
The following information applies to Morrow SA9054 (and maybe SA9052, SA9034 and SA9085 as well).
Other devices from Morrow may have the same codes.

Engine Command Table
Engine Commands are Commands for CPU P1 (acquisition CPU).
The code allows Engine command values in range 0..16.

See sa_defin.h
/* ------------------------------------------------------------------------ */
/*  Constant definitions of command numbers to the engine.                  */
/* ------------------------------------------------------------------------ */
#define ENG_INIT        0			4 WORDS:  unknown(4), Wert = 0. 
									Testing shows that 3 (!?!) values are required.
#define ENG_START_SWP   1			12 WORDS
#define ENG_START_ZSPAN 2			10 WORDS
#define ENG_START_FHOP  3			5 WORDS
#define ENG_SET_TRIGDET 4			8 WORDS: detect_code(2), sweep_code(2), num_cells(4)
#define ENG_LOAD_HOPFRQ 5
#define ENG_SET_INTMODE 6			2 WORDS: intr_code(2)
#define ENG_TERMINATE   7			1 WORD: breakMode, value seen: 0
#define ENG_CALIBRATE   10			(6 WORDS???)
#define ENG_UNKNOWN1    11          8 WORDS, 6 WORDS, 2 WORDS
Own findings:

Command 	Function				Comment
-------------------------------------------------------------------------
0 			unknown					Not exposed by libs and not called by lib code.
1			Start Sweep
2			Start zSpan
3			Start FreqHop
4			Set Trigger related		Params (8, g8)
5									(not used by libs)
6			Comm Interrupt			Params (1, a1->interrupt_code)
7			Break Sweep				Params (1, 0)
8									(not used by libs)			
9									(not used by libs)
10			GetCalPoint
11			Pulse function related
12									(not used by libs)
13									(not used by libs)
14									(not used by libs)
15									(not used by libs)
16									(not used by libs)


Shared Lib Function Table
 /* from mtcsa32.c */
       int32_t (*func)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"OpenSessionStep")); // 0x10003377
        *(int32_t *)(a1 + 720) = (int32_t)func;
        g8 = v1;
        int32_t (*func2)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"ClearDataFIFO")); // 0x1000339c
        *(int32_t *)(a1 + 664) = (int32_t)func2;
        g8 = v1;
        int32_t (*func3)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"CheckSWStatus")); // 0x100033c1
        *(int32_t *)(a1 + 668) = (int32_t)func3;
        g8 = v1;
        int32_t (*func4)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"CheckHWStatus")); // 0x100033e6
        *(int32_t *)(a1 + 672) = (int32_t)func4;
        g8 = v1;
        int32_t (*func5)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"FetchDataWord")); // 0x1000340b
        *(int32_t *)(a1 + 680) = (int32_t)func5;
        g8 = v1;
        int32_t (*func6)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"WaitRecvWord")); // 0x10003430
        *(int32_t *)(a1 + 684) = (int32_t)func6;
        g8 = v1;
        int32_t (*func7)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"SendDataItem")); // 0x10003455
        *(int32_t *)(a1 + 688) = (int32_t)func7;
        g8 = v1;
        int32_t (*func8)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"SendCommand")); // 0x1000347a
        *(int32_t *)(a1 + 692) = (int32_t)func8;
        g8 = v1;
        int32_t (*func9)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"VerDataBlock")); // 0x1000349f
        *(int32_t *)(a1 + 696) = (int32_t)func9;
        g8 = v1;
        int32_t (*func10)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"GetDataBlock")); // 0x100034c4
        *(int32_t *)(a1 + 676) = (int32_t)func10;
        g8 = v1;
        int32_t (*func11)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"SendWord")); // 0x100034e9
        *(int32_t *)(a1 + 700) = (int32_t)func11;
        g8 = v1;
        int32_t (*func12)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"CheckSWStatNoTO")); // 0x1000350e
        *(int32_t *)(a1 + 704) = (int32_t)func12;
        g8 = v1;
        int32_t (*func13)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"ShutdownEngine")); // 0x10003533
        *(int32_t *)(a1 + 708) = (int32_t)func13;
        g8 = v1;
        int32_t (*func14)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"InitEngine")); // 0x10003558
        *(int32_t *)(a1 + 712) = (int32_t)func14;
        g8 = v1;
        int32_t (*func15)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"ResetEngine")); // 0x1000357d
        *(int32_t *)(a1 + 716) = (int32_t)func15;
        g8 = v1;
        int32_t (*func16)() = GetProcAddress((int32_t *)hModule, (char *)function_10003280(v1, (int32_t)"CloseSession")); // 0x100035a2
        *(int32_t *)(a1 + 724) = (int32_t)func16;
        g8 = v1;
        int32_t lpProcName = function_10003280(v1, (int32_t)"IdQuery"); // 0x100035ba
        int32_t func17 = (int32_t)GetProcAddress((int32_t *)hModule, (char *)lpProcName); // 0x100035c7
        *(int32_t *)(a1 + 728) = func17;


Status

