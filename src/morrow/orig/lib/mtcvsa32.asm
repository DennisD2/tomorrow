
_SCOPETABLE_ENTRY struc ; (sizeof=0xC, align=0x4, copyof_1)
                        ; XREF: VISA_SendCommand+6B/o
                        ; VISA_GetDataBlock+6/o ...
EnclosingLevel dd ?
FilterFunc dd ?         ; offset
HandlerFunc dd ?        ; offset
_SCOPETABLE_ENTRY ends


CPPEH_RECORD struc ; (sizeof=0x18, align=0x4, copyof_6)
                        ; XREF: VISA_SendCommand+6B/o
                        ; VISA_GetDataBlock+6/o ...
old_esp dd ?            ; XREF: sub_10006EA8+23/w
                        ; sub_10006EA8+102/w ...
exc_ptr dd ?            ; offset
registration _EH3_EXCEPTION_REGISTRATION ?
                        ; XREF: sub_10004960+74/w
                        ; sub_10004960+81/w ...
CPPEH_RECORD ends


_EH3_EXCEPTION_REGISTRATION struc ; (sizeof=0x10, align=0x4, copyof_3)
                        ; XREF: VISA_SendCommand+6B/o
                        ; VISA_GetDataBlock+6/o ...
Next dd ?               ; XREF: sub_10004960:loc_10004A8E/r
                        ; sub_10004A9D:loc_10004B77/r ... ; offset
ExceptionHandler dd ?   ; offset
ScopeTable dd ?         ; offset
TryLevel dd ?           ; XREF: sub_10004960+74/w
                        ; sub_10004960+81/w ...
_EH3_EXCEPTION_REGISTRATION ends


_STARTUPINFOA struc ; (sizeof=0x44, align=0x4, copyof_7)
                        ; XREF: VISA_SendCommand+6B/o
                        ; VISA_InitEngine+6/o ...
cb dd ?
lpReserved dd ?         ; offset
lpDesktop dd ?          ; offset
lpTitle dd ?            ; offset
dwX dd ?
dwY dd ?
dwXSize dd ?
dwYSize dd ?
dwXCountChars dd ?
dwYCountChars dd ?
dwFillAttribute dd ?
dwFlags dd ?
wShowWindow dw ?
cbReserved2 dw ?        ; XREF: sub_10003743+64/r
lpReserved2 dd ?        ; XREF: sub_10003743+6F/r ; offset
hStdInput dd ?          ; offset
hStdOutput dd ?         ; offset
hStdError dd ?          ; offset
_STARTUPINFOA ends


_OSVERSIONINFOA struc ; (sizeof=0x94, align=0x4, copyof_15)
                        ; XREF: VISA_SendCommand+6B/o
                        ; VISA_GetDataBlock+6/o ...
dwOSVersionInfoSize dd ? ; XREF: sub_10003DB8+15/w
dwMajorVersion dd ?     ; XREF: sub_10003DB8+32/r
dwMinorVersion dd ?
dwBuildNumber dd ?
dwPlatformId dd ?       ; XREF: sub_10003DB8+29/r
szCSDVersion db 128 dup(?)
_OSVERSIONINFOA ends


_cpinfo struc ; (sizeof=0x14, align=0x4, copyof_16)
                        ; XREF: sub_10004DB0/r sub_10005003/r
MaxCharSize dd ?        ; XREF: sub_10004DB0+73/r
DefaultChar db 2 dup(?)
LeadByte db 12 dup(?)   ; XREF: sub_10004DB0+85/r
                        ; sub_10004DB0+8F/o ...
db ? ; undefined
db ? ; undefined
_cpinfo ends


;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
; |                            Freeware version                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 413FAC834C10F9BE8BBC1CB15924071CD7FBF455D75350D9C7F11578E429CF25
; Input MD5    : 47D0ED400B7ACA8BAF7FB5CC39D76DAC
; Input CRC32  : 6E96B367

; File Name   : /home/dennis/git/tomorrow/src/morrow/orig/lib/mtcvsa32.dll
; Format      : Portable executable for 80386 (PE)
; Imagebase   : 10000000
; Timestamp   : 38E0D1FA (Tue Mar 28 15:38:34 2000)
; Section 1. (virtual address 00001000)
; Virtual size                  : 00006D3A (  27962.)
; Section size in file          : 00007000 (  28672.)
; Offset to raw data for section: 00001000
; Flags 60000020: Text Executable Readable
; Alignment     : default
; Exported entry   2. VISA_CheckSWStatNoTO

include uni.inc ; see unicode subdir of ida for info on unicode

.686p
.mmx
.model flat


; Segment type: Pure code
; Segment permissions: Read/Execute
_text segment para public 'CODE' use32
assume cs:_text
;org 10001000h
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing


; Attributes: bp-based frame

public VISA_CheckSWStatNoTO
VISA_CheckSWStatNoTO proc near

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= word ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 0Ch
mov     eax, [ebp+arg_0]
push    eax
call    sub_1000108E
add     esp, 4
mov     word ptr [ebp+var_C], ax
mov     ecx, [ebp+var_C]
and     ecx, 0FFFFh
cmp     ecx, 1
jz      short loc_10001034
mov     edx, [ebp+arg_0]
push    edx
call    sub_1000108E
add     esp, 4
mov     word ptr [ebp+var_C], ax

loc_10001034:
mov     eax, [ebp+arg_0]
push    eax
call    RdTimeoutWait
add     esp, 4
mov     [ebp+var_4], eax
call    IeTimer
mov     [ebp+var_8], eax

loc_1000104B:
mov     ecx, [ebp+var_C]
and     ecx, 0FFFFh
test    ecx, ecx
jnz     short loc_10001086
mov     edx, [ebp+arg_0]
push    edx
call    sub_1000108E
add     esp, 4
mov     word ptr [ebp+var_C], ax
movsx   eax, [ebp+arg_4]
cmp     eax, 1
jnz     short loc_10001084
mov     ecx, [ebp+var_8]
push    ecx
call    IeTimerFrom
add     esp, 4
cmp     eax, [ebp+var_4]
jle     short loc_10001084
jmp     short loc_10001086

loc_10001084:
jmp     short loc_1000104B

loc_10001086:
mov     ax, word ptr [ebp+var_C]
mov     esp, ebp
pop     ebp
retn
VISA_CheckSWStatNoTO endp



; Attributes: bp-based frame

sub_1000108E proc near

var_4= word ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    ecx
mov     eax, [ebp+arg_0]
push    eax
call    DLFMModeOff
add     esp, 4
push    7E00h
mov     ecx, [ebp+arg_0]
push    ecx
call    sub_100012FA
add     esp, 8
mov     [ebp+var_4], ax
mov     dx, [ebp+var_4]
and     dx, 0FFh
mov     [ebp+var_4], dx
mov     eax, [ebp+arg_0]
push    eax
call    DLFMModeOn
add     esp, 4
mov     cx, [ebp+var_4]
push    ecx
mov     edx, [ebp+arg_0]
push    edx
call    SetEngineReplyCode
add     esp, 8
mov     esp, ebp
pop     ebp
retn
sub_1000108E endp



; Attributes: bp-based frame

DLFMModeOff proc near

var_10= word ptr -10h
var_C= word ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
a1= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 10h
mov     eax, [ebp+a1]
push    eax
call    RdTimeoutWait
add     esp, 4
mov     [ebp+var_4], eax
lea     ecx, [ebp+var_10]
push    ecx
mov     edx, [ebp+a1]
push    edx
call    sub_100011FC
add     esp, 8
movsx   eax, ax
mov     [ebp+var_8], eax
cmp     [ebp+var_8], 0
jz      short loc_10001129
push    1
mov     ecx, [ebp+a1]
push    ecx
call    SetErrorStatus
add     esp, 8
mov     ax, 0FFFEh
jmp     loc_100011F8

loc_10001129:
mov     dx, [ebp+var_10]
and     dx, 0FDFFh
mov     [ebp+var_10], dx
mov     ax, [ebp+var_10]
push    eax
mov     ecx, [ebp+a1]
push    ecx
call    sub_10001249
add     esp, 8
movsx   edx, ax
mov     [ebp+var_8], edx
cmp     [ebp+var_8], 0
jz      short loc_1000116A
push    1
mov     eax, [ebp+a1]
push    eax
call    SetErrorStatus
add     esp, 8
mov     ax, 0FFFEh
jmp     loc_100011F8

loc_1000116A:
call    InitTimeoutLoop

loc_1000116F:
lea     ecx, [ebp+var_10]
push    ecx
mov     edx, [ebp+a1]
push    edx
call    sub_10001297
add     esp, 8
movsx   eax, ax
mov     [ebp+var_8], eax
xor     ecx, ecx
cmp     [ebp+var_8], 0
setz    cl
mov     [ebp+var_C], cx
movsx   edx, [ebp+var_C]
test    edx, edx
jz      short loc_1000119C
jmp     short loc_100011AF

loc_1000119C:
mov     eax, [ebp+var_4]
push    eax
call    TestTimeoutDone
add     esp, 4
movsx   ecx, ax
test    ecx, ecx
jz      short loc_1000116F

loc_100011AF:
movsx   edx, [ebp+var_C]
test    edx, edx
jnz     short loc_100011DA
lea     eax, [ebp+var_10]
push    eax
mov     ecx, [ebp+a1]
push    ecx
call    sub_10001297
add     esp, 8
movsx   edx, ax
mov     [ebp+var_8], edx
xor     eax, eax
cmp     [ebp+var_8], 0
setz    al
mov     [ebp+var_C], ax

loc_100011DA:
mov     ecx, [ebp+var_8]
push    ecx
mov     edx, [ebp+a1]
push    edx
call    SetErrorStatus
add     esp, 8
movsx   eax, [ebp+var_C]
neg     eax
sbb     eax, eax
and     eax, 2
add     eax, 0FFFFFFFEh

loc_100011F8:
mov     esp, ebp
pop     ebp
retn
DLFMModeOff endp



; Attributes: bp-based frame

sub_100011FC proc near

var_8= word ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 8
mov     eax, [ebp+arg_4]
push    eax
push    4
push    1
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+1D4h]
push    edx
call    viIn16
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jz      short loc_1000122A
mov     [ebp+var_8], 1
jmp     short loc_10001230

loc_1000122A:
mov     [ebp+var_8], 0

loc_10001230:
movsx   eax, [ebp+var_8]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
call    SetErrorStatus
add     esp, 8
mov     ax, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn
sub_100011FC endp



; Attributes: bp-based frame

sub_10001249 proc near

var_8= word ptr -8
var_4= dword ptr -4
a1= dword ptr  8
arg_4= word ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 8
mov     ax, [ebp+arg_4]
push    eax
push    4
push    1
mov     ecx, [ebp+a1]
mov     edx, [ecx+1D4h]
push    edx
call    viOut16
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jz      short loc_10001278
mov     [ebp+var_8], 1
jmp     short loc_1000127E

loc_10001278:
mov     [ebp+var_8], 0

loc_1000127E:
movsx   eax, [ebp+var_8]
push    eax
mov     ecx, [ebp+a1]
push    ecx
call    SetErrorStatus
add     esp, 8
mov     ax, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn
sub_10001249 endp



; Attributes: bp-based frame

sub_10001297 proc near

var_8= word ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 8
mov     eax, [ebp+arg_4]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
call    sub_100011FC
add     esp, 8
movsx   edx, ax
mov     [ebp+var_4], edx
cmp     [ebp+var_4], 0
jz      short loc_100012C1
mov     [ebp+var_8], 1
jmp     short loc_100012E1

loc_100012C1:
mov     eax, [ebp+arg_4]
xor     ecx, ecx
mov     cx, [eax]
and     ecx, 100h
test    ecx, ecx
jz      short loc_100012DB
mov     [ebp+var_8], 3
jmp     short loc_100012E1

loc_100012DB:
mov     [ebp+var_8], 0

loc_100012E1:
movsx   edx, [ebp+var_8]
push    edx
mov     eax, [ebp+arg_0]
push    eax
call    SetErrorStatus
add     esp, 8
mov     ax, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn
sub_10001297 endp



; Attributes: bp-based frame

sub_100012FA proc near

var_C= dword ptr -0Ch
var_8= word ptr -8
var_4= word ptr -4
arg_0= dword ptr  8
arg_4= word ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 0Ch
mov     [ebp+var_C], 0
lea     eax, [ebp+var_8]
push    eax
push    1
mov     cx, [ebp+arg_4]
push    ecx
mov     edx, [ebp+arg_0]
push    edx
call    sub_10001354
add     esp, 10h
mov     [ebp+var_4], ax
movsx   eax, [ebp+var_4]
and     eax, 8000h
test    eax, eax
jz      short loc_1000133C
mov     [ebp+var_C], 1
mov     [ebp+var_8], 0

loc_1000133C:
mov     ecx, [ebp+var_C]
push    ecx
mov     edx, [ebp+arg_0]
push    edx
call    SetErrorStatus
add     esp, 8
mov     ax, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn
sub_100012FA endp



; Attributes: bp-based frame

sub_10001354 proc near

var_1C= dword ptr -1Ch
var_18= word ptr -18h
var_14= dword ptr -14h
var_10= word ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= word ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

push    ebp
mov     ebp, esp
sub     esp, 1Ch
mov     [ebp+var_10], 8000h
mov     [ebp+var_4], 64h
mov     eax, [ebp+arg_0]
mov     ecx, [eax+1D4h]
mov     [ebp+var_8], ecx
lea     edx, [ebp+var_14]
push    edx
push    200h
mov     eax, [ebp+var_4]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
call    sub_100015D0
add     esp, 10h
mov     [ebp+var_18], ax
movsx   edx, [ebp+var_18]
and     edx, 8000h
test    edx, edx
jz      short loc_100013A7
mov     ax, [ebp+var_18]
jmp     loc_100015B4

loc_100013A7:
mov     ax, [ebp+arg_4]
push    eax
push    0Eh
push    1
mov     ecx, [ebp+var_8]
push    ecx
call    viOut16
mov     [ebp+var_C], eax
cmp     [ebp+var_C], 0
jz      short loc_100013CB
mov     ax, 8000h
jmp     loc_100015B4

loc_100013CB:
lea     edx, [ebp+var_14]
push    edx
push    200h
mov     eax, [ebp+var_4]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
call    sub_100015D0
add     esp, 10h
mov     [ebp+var_18], ax
movsx   edx, [ebp+var_18]
and     edx, 8000h
test    edx, edx
jz      short loc_100013FF
mov     ax, [ebp+var_18]
jmp     loc_100015B4

loc_100013FF:
mov     eax, [ebp+var_14]
and     eax, 0FFFFh
and     eax, 800h
test    eax, eax
jnz     loc_1000156B
push    0CDFFh
push    0Eh
push    1
mov     ecx, [ebp+var_8]
push    ecx
call    viOut16
mov     [ebp+var_C], eax
cmp     [ebp+var_C], 0
jz      short loc_10001438
mov     ax, 8400h
jmp     loc_100015B4

loc_10001438:
lea     edx, [ebp+var_14]
push    edx
push    200h
mov     eax, [ebp+var_4]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
call    sub_100015D0
add     esp, 10h
mov     [ebp+var_18], ax
movsx   edx, [ebp+var_18]
and     edx, 8000h
test    edx, edx
jz      short loc_1000146C
mov     ax, [ebp+var_18]
jmp     loc_100015B4

loc_1000146C:
mov     eax, [ebp+var_14]
and     eax, 0FFFFh
and     eax, 200h
test    eax, eax
jnz     short loc_10001486
mov     ax, 8000h
jmp     loc_100015B4

loc_10001486:
lea     ecx, [ebp+var_14]
push    ecx
push    400h
mov     edx, [ebp+var_4]
push    edx
mov     eax, [ebp+arg_0]
push    eax
call    sub_100015D0
add     esp, 10h
mov     [ebp+var_18], ax
movsx   ecx, [ebp+var_18]
and     ecx, 8000h
test    ecx, ecx
jz      short loc_100014BA
mov     ax, [ebp+var_18]
jmp     loc_100015B4

loc_100014BA:
mov     edx, [ebp+var_14]
and     edx, 0FFFFh
and     edx, 400h
test    edx, edx
jnz     short loc_100014D6
mov     ax, 8000h
jmp     loc_100015B4

loc_100014D6:
mov     [ebp+var_10], 8000h
lea     eax, [ebp+var_14]
push    eax
push    0Eh
push    1
mov     ecx, [ebp+var_8]
push    ecx
call    viIn16
mov     [ebp+var_C], eax
cmp     [ebp+var_C], 0
jnz     short loc_10001569 ; jumptable 10001516 default case
mov     edx, [ebp+var_14]
and     edx, 0FFFFh
mov     [ebp+var_1C], edx
mov     eax, [ebp+var_1C]
sub     eax, 0FFF8h
mov     [ebp+var_1C], eax
cmp     [ebp+var_1C], 5 ; switch 6 cases
ja      short loc_10001569 ; jumptable 10001516 default case
mov     ecx, [ebp+var_1C]
jmp     ds:off_100015B8[ecx*4] ; switch jump

loc_1000151D:           ; jumptable 10001516 case 5
mov     dx, [ebp+var_10]
or      dl, 40h
mov     [ebp+var_10], dx
jmp     short loc_10001569 ; jumptable 10001516 default case

loc_1000152A:           ; jumptable 10001516 case 4
mov     ax, [ebp+var_10]
or      ah, 2
mov     [ebp+var_10], ax
jmp     short loc_10001569 ; jumptable 10001516 default case

loc_10001537:           ; jumptable 10001516 case 3
mov     cx, [ebp+var_10]
or      ch, 8
mov     [ebp+var_10], cx
jmp     short loc_10001569 ; jumptable 10001516 default case

loc_10001544:           ; jumptable 10001516 case 2
mov     dx, [ebp+var_10]
or      dh, 10h
mov     [ebp+var_10], dx
jmp     short loc_10001569 ; jumptable 10001516 default case

loc_10001551:           ; jumptable 10001516 case 1
mov     ax, [ebp+var_10]
or      ah, 20h
mov     [ebp+var_10], ax
jmp     short loc_10001569 ; jumptable 10001516 default case

loc_1000155E:           ; jumptable 10001516 case 0
mov     cx, [ebp+var_10]
or      ch, 40h
mov     [ebp+var_10], cx

loc_10001569:           ; jumptable 10001516 default case
jmp     short loc_100015B0

loc_1000156B:
mov     [ebp+var_10], 1
mov     edx, [ebp+arg_8]
and     edx, 0FFFFh
test    edx, edx
jz      short loc_100015B0
lea     eax, [ebp+var_14]
push    eax
push    0Eh
push    1
mov     ecx, [ebp+var_8]
push    ecx
call    viIn16
mov     [ebp+var_C], eax
cmp     [ebp+var_C], 0
jnz     short loc_100015AA
mov     [ebp+var_10], 1
mov     edx, [ebp+arg_C]
mov     ax, word ptr [ebp+var_14]
mov     [edx], ax
jmp     short loc_100015B0

loc_100015AA:
mov     [ebp+var_10], 8020h

loc_100015B0:
mov     ax, [ebp+var_10]

loc_100015B4:
mov     esp, ebp
pop     ebp
retn
sub_10001354 endp

off_100015B8 dd offset loc_1000155E ; jump table for switch statement
dd offset loc_10001551
dd offset loc_10001544
dd offset loc_10001537
dd offset loc_1000152A
dd offset loc_1000151D


; Attributes: bp-based frame

sub_100015D0 proc near

var_8= word ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= word ptr  10h
arg_C= dword ptr  14h

push    ebp
mov     ebp, esp
sub     esp, 8
call    InitTimeoutLoop

loc_100015DB:
mov     eax, [ebp+arg_C]
push    eax
mov     cx, [ebp+arg_8]
push    ecx
mov     edx, [ebp+arg_0]
push    edx
call    sub_10001654
add     esp, 0Ch
mov     [ebp+var_8], ax
movsx   eax, [ebp+var_8]
sub     eax, 1
neg     eax
sbb     eax, eax
inc     eax
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jz      short loc_1000160B
jmp     short loc_1000161E

loc_1000160B:
mov     ecx, [ebp+arg_4]
push    ecx
call    TestTimeoutDone
add     esp, 4
movsx   edx, ax
test    edx, edx
jz      short loc_100015DB

loc_1000161E:
cmp     [ebp+var_4], 0
jnz     short loc_1000164C
mov     eax, [ebp+arg_C]
push    eax
mov     cx, [ebp+arg_8]
push    ecx
mov     edx, [ebp+arg_0]
push    edx
call    sub_10001654
add     esp, 0Ch
mov     [ebp+var_8], ax
movsx   eax, [ebp+var_8]
sub     eax, 1
neg     eax
sbb     eax, eax
inc     eax
mov     [ebp+var_4], eax

loc_1000164C:
mov     ax, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn
sub_100015D0 endp



; Attributes: bp-based frame

sub_10001654 proc near

var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= word ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
push    ecx
mov     eax, [ebp+arg_8]
push    eax
push    0Ah
push    1
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+1D4h]
push    edx
call    viIn16
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jz      short loc_1000168C
push    1
mov     eax, [ebp+arg_0]
push    eax
call    SetErrorStatus
add     esp, 8
mov     ax, 8020h
jmp     short loc_100016C4

loc_1000168C:
mov     ecx, [ebp+arg_8]
xor     edx, edx
mov     dx, [ecx]
movsx   eax, [ebp+arg_4]
and     edx, eax
test    edx, edx
jnz     short loc_100016B2
push    1
mov     ecx, [ebp+arg_0]
push    ecx
call    SetErrorStatus
add     esp, 8
mov     ax, 8004h
jmp     short loc_100016C4

loc_100016B2:
push    0
mov     edx, [ebp+arg_0]
push    edx
call    SetErrorStatus
add     esp, 8
mov     ax, 1

loc_100016C4:
mov     esp, ebp
pop     ebp
retn
sub_10001654 endp



; Attributes: bp-based frame

DLFMModeOn proc near

var_10= word ptr -10h
var_C= word ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 10h
mov     eax, [ebp+arg_0]
push    eax
call    RdTimeoutWait
add     esp, 4
mov     [ebp+var_4], eax
lea     ecx, [ebp+var_10]
push    ecx
mov     edx, [ebp+arg_0]
push    edx
call    sub_100011FC
add     esp, 8
movsx   eax, ax
mov     [ebp+var_8], eax
cmp     [ebp+var_8], 0
jz      short loc_10001710
push    1
mov     ecx, [ebp+arg_0]
push    ecx
call    SetErrorStatus
add     esp, 8
mov     ax, 0FFFEh
jmp     loc_100017DD

loc_10001710:
mov     dx, [ebp+var_10]
or      dh, 2
mov     [ebp+var_10], dx
mov     ax, [ebp+var_10]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
call    sub_10001249
add     esp, 8
movsx   edx, ax
mov     [ebp+var_8], edx
cmp     [ebp+var_8], 0
jz      short loc_1000174F
push    1
mov     eax, [ebp+arg_0]
push    eax
call    SetErrorStatus
add     esp, 8
mov     ax, 0FFFEh
jmp     loc_100017DD

loc_1000174F:
call    InitTimeoutLoop

loc_10001754:
lea     ecx, [ebp+var_10]
push    ecx
mov     edx, [ebp+arg_0]
push    edx
call    sub_100017E1
add     esp, 8
movsx   eax, ax
mov     [ebp+var_8], eax
xor     ecx, ecx
cmp     [ebp+var_8], 0
setz    cl
mov     [ebp+var_C], cx
movsx   edx, [ebp+var_C]
test    edx, edx
jz      short loc_10001781
jmp     short loc_10001794

loc_10001781:
mov     eax, [ebp+var_4]
push    eax
call    TestTimeoutDone
add     esp, 4
movsx   ecx, ax
test    ecx, ecx
jz      short loc_10001754

loc_10001794:
movsx   edx, [ebp+var_C]
test    edx, edx
jnz     short loc_100017BF
lea     eax, [ebp+var_10]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
call    sub_100017E1
add     esp, 8
movsx   edx, ax
mov     [ebp+var_8], edx
xor     eax, eax
cmp     [ebp+var_8], 0
setz    al
mov     [ebp+var_C], ax

loc_100017BF:
mov     ecx, [ebp+var_8]
push    ecx
mov     edx, [ebp+arg_0]
push    edx
call    SetErrorStatus
add     esp, 8
movsx   eax, [ebp+var_C]
neg     eax
sbb     eax, eax
and     eax, 2
add     eax, 0FFFFFFFEh

loc_100017DD:
mov     esp, ebp
pop     ebp
retn
DLFMModeOn endp



; Attributes: bp-based frame

sub_100017E1 proc near

var_8= word ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 8
mov     eax, [ebp+arg_4]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
call    sub_100011FC
add     esp, 8
movsx   edx, ax
mov     [ebp+var_4], edx
cmp     [ebp+var_4], 0
jz      short loc_1000180B
mov     [ebp+var_8], 1
jmp     short loc_1000182B

loc_1000180B:
mov     eax, [ebp+arg_4]
xor     ecx, ecx
mov     cx, [eax]
and     ecx, 100h
test    ecx, ecx
jnz     short loc_10001825
mov     [ebp+var_8], 3
jmp     short loc_1000182B

loc_10001825:
mov     [ebp+var_8], 0

loc_1000182B:
movsx   edx, [ebp+var_8]
push    edx
mov     eax, [ebp+arg_0]
push    eax
call    SetErrorStatus
add     esp, 8
mov     ax, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn
sub_100017E1 endp

push    ebp
mov     ebp, esp
sub     esp, 11Ch
mov     dword ptr [ebp-14h], 0
mov     word ptr [ebp-0Ch], 0
mov     dword ptr [ebp-4], 0
cmp     dword ptr [ebp+10h], 0
jnz     short loc_1000186F
or      eax, 0FFFFFFFFh
jmp     loc_100019C2

loc_1000186F:
cmp     dword ptr [ebp+14h], 0
jnz     short loc_1000187D
or      eax, 0FFFFFFFFh
jmp     loc_100019C2

loc_1000187D:
cmp     dword ptr [ebp+8], 0
jnz     short loc_100018B8
cmp     dword_1000BD08, 0
jnz     short loc_100018B0
push    offset dword_1000BD08
call    viOpenDefaultRM
mov     [ebp-118h], eax
cmp     dword ptr [ebp-118h], 0
jz      short loc_100018B0
mov     eax, [ebp-118h]
jmp     loc_100019C2

loc_100018B0:
mov     eax, dword_1000BD08
mov     [ebp+8], eax

loc_100018B8:
mov     ecx, [ebp+14h]
mov     dword ptr [ecx], 0
mov     edx, [ebp+10h]
mov     dword ptr [edx], 0
mov     dword ptr [ebp-11Ch], 0
lea     eax, [ebp-114h]
push    eax
lea     ecx, [ebp-4]
push    ecx
lea     edx, [ebp-14h]
push    edx
push    offset aVxiInstr ; "VXI?*INSTR"
mov     eax, [ebp+8]
push    eax
call    viFindRsrc

loc_100018F1:
cmp     dword ptr [ebp-4], 0
jbe     loc_100019AB
mov     ecx, [ebp-4]
sub     ecx, 1
mov     [ebp-4], ecx
lea     edx, [ebp-10h]
push    edx
push    0
push    0
lea     eax, [ebp-114h]
push    eax
mov     ecx, [ebp+8]
push    ecx
call    viOpen
mov     [ebp-118h], eax
lea     edx, [ebp-8]
push    edx
push    3FFF00D5h
mov     eax, [ebp-10h]
push    eax
call    viGetAttribute
lea     ecx, [ebp-0Ch]
push    ecx
push    3FFF00D9h
mov     edx, [ebp-10h]
push    edx
call    viGetAttribute
mov     eax, [ebp-0Ch]
and     eax, 0FFFFh
cmp     eax, 0ECEh
jnz     short loc_10001987
movsx   ecx, word ptr [ebp-8]
cmp     ecx, [ebp+0Ch]
jbe     short loc_10001987
mov     edx, [ebp+14h]
mov     eax, [edx]
add     eax, 1
mov     ecx, [ebp+14h]
mov     [ecx], eax
cmp     dword ptr [ebp-11Ch], 0
jnz     short loc_10001987
movsx   edx, word ptr [ebp-8]
mov     eax, [ebp+10h]
mov     [eax], edx
mov     dword ptr [ebp-11Ch], 1

loc_10001987:
cmp     dword ptr [ebp-4], 0
jbe     short loc_1000199D
lea     ecx, [ebp-114h]
push    ecx
mov     edx, [ebp-14h]
push    edx
call    viFindNext

loc_1000199D:
mov     eax, [ebp-10h]
push    eax
call    viClose
jmp     loc_100018F1

loc_100019AB:
cmp     dword ptr [ebp+14h], 0
jz      short loc_100019BF
mov     ecx, [ebp+14h]
mov     eax, [ecx]
neg     eax
sbb     eax, eax
neg     eax
dec     eax
jmp     short loc_100019C2

loc_100019BF:
or      eax, 0FFFFFFFFh

loc_100019C2:
mov     esp, ebp
pop     ebp
retn    10h
; Exported entry  14. VISA_SendWord


; Attributes: bp-based frame

public VISA_SendWord
VISA_SendWord proc near

var_4= word ptr -4
arg_0= dword ptr  8
arg_4= word ptr  0Ch

push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], 0FFFEh
push    7F00h
mov     eax, [ebp+arg_0]
push    eax
call    sub_10001A0A
add     esp, 8
test    eax, eax
jnz     short loc_10001A02
mov     cx, [ebp+arg_4]
push    ecx
mov     edx, [ebp+arg_0]
push    edx
call    sub_10001A0A
add     esp, 8
test    eax, eax
jnz     short loc_10001A02
mov     [ebp+var_4], 0

loc_10001A02:
mov     ax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn
VISA_SendWord endp



; Attributes: bp-based frame

sub_10001A0A proc near

arg_0= dword ptr  8
arg_4= word ptr  0Ch

push    ebp
mov     ebp, esp
push    0
push    0
mov     ax, [ebp+arg_4]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
call    sub_10001354
add     esp, 10h
movsx   edx, ax
and     edx, 8000h
test    edx, edx
jz      short loc_10001A42
push    1
mov     eax, [ebp+arg_0]
push    eax
call    SetErrorStatus
add     esp, 8
or      eax, 0FFFFFFFFh
jmp     short loc_10001A52

loc_10001A42:
push    0
mov     ecx, [ebp+arg_0]
push    ecx
call    SetErrorStatus
add     esp, 8
xor     eax, eax

loc_10001A52:
pop     ebp
retn
sub_10001A0A endp

; Exported entry   1. VISA_CheckHWStatus


; Attributes: bp-based frame

public VISA_CheckHWStatus
VISA_CheckHWStatus proc near

var_8= dword ptr -8
var_4= word ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 8
lea     eax, [ebp+var_4]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
call    sub_100011FC
add     esp, 8
movsx   edx, ax
mov     [ebp+var_8], edx
cmp     [ebp+var_8], 0
jz      short loc_10001A7E
mov     [ebp+var_4], 0FF00h
jmp     short loc_10001A8E

loc_10001A7E:
movsx   eax, [ebp+var_4]
and     eax, 0F0h
shl     eax, 4
mov     [ebp+var_4], ax

loc_10001A8E:
mov     ax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn
VISA_CheckHWStatus endp

; Exported entry  16. VISA_VerDataBlock


; Attributes: bp-based frame

public VISA_VerDataBlock
VISA_VerDataBlock proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
push    eax
call    TestFuncStatusAndPtr
add     esp, 4
movsx   ecx, ax
test    ecx, ecx
jz      short loc_10001ABA
mov     edx, [ebp+arg_0]
push    edx
call    GetFuncStatusCode
add     esp, 4
jmp     short loc_10001AC6

loc_10001ABA:
mov     eax, [ebp+arg_4]
and     eax, 0FFFFh
neg     eax
sbb     eax, eax

loc_10001AC6:
pop     ebp
retn
VISA_VerDataBlock endp

; Exported entry   6. VISA_FetchDataWord


; Attributes: bp-based frame

public VISA_FetchDataWord
VISA_FetchDataWord proc near

v1= word ptr -4
a1= dword ptr  8
dwordPtr= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ecx
mov     eax, [ebp+a1]
push    eax
call    readDataWord_sub_10001B08
add     esp, 4
mov     [ebp+v1], ax
mov     ecx, [ebp+a1]
push    ecx
call    RdErrorStatus
add     esp, 4
test    eax, eax
jz      short loc_10001B00
cmp     [ebp+dwordPtr], 0
jz      short loc_10001AFA
mov     edx, [ebp+dwordPtr]
mov     word ptr [edx], 1

loc_10001AFA:
mov     [ebp+v1], 0

loc_10001B00:
mov     ax, [ebp+v1]
mov     esp, ebp
pop     ebp
retn
VISA_FetchDataWord endp



; Attributes: bp-based frame

readDataWord_sub_10001B08 proc near

var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 18h
mov     [ebp+var_18], 1
mov     word ptr [ebp+var_10], 0
mov     eax, [ebp+arg_0]
push    eax
call    RdTimeoutWait
add     esp, 4
mov     [ebp+var_8], eax
lea     ecx, [ebp+var_14]
push    ecx
push    400h
mov     edx, [ebp+var_8]
push    edx
mov     eax, [ebp+arg_0]
push    eax
call    sub_100015D0
add     esp, 10h
mov     word ptr [ebp+var_10], ax
mov     ecx, [ebp+var_10]
and     ecx, 0FFFFh
and     ecx, 8000h
test    ecx, ecx
jnz     short loc_10001BB4
mov     edx, [ebp+var_14]
and     edx, 0FFFFh
and     edx, 400h
test    edx, edx
jz      short loc_10001BAD
lea     eax, [ebp+var_4]
push    eax
push    0Eh
push    1
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+1D4h]
push    edx
call    viIn16
mov     [ebp+var_C], eax
cmp     [ebp+var_C], 0
jz      short loc_10001B9C
mov     [ebp+var_18], 1
mov     word ptr [ebp+var_10], 0
jmp     short loc_10001BAB

loc_10001B9C:
mov     [ebp+var_18], 0
mov     ax, [ebp+var_4]
mov     word ptr [ebp+var_10], ax

loc_10001BAB:
jmp     short loc_10001BB4

loc_10001BAD:
mov     [ebp+var_18], 2

loc_10001BB4:
mov     ecx, [ebp+var_18]
push    ecx
mov     edx, [ebp+arg_0]
push    edx
call    SetErrorStatus
add     esp, 8
mov     ax, word ptr [ebp+var_10]
mov     esp, ebp
pop     ebp
retn
readDataWord_sub_10001B08 endp

; Exported entry   3. VISA_CheckSWStatus


; Attributes: bp-based frame

public VISA_CheckSWStatus
VISA_CheckSWStatus proc near

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 10h
mov     eax, [ebp+arg_0]
push    eax
call    sub_1000108E
add     esp, 4
mov     word ptr [ebp+var_10], ax
mov     ecx, [ebp+var_10]
and     ecx, 0FFFFh
cmp     ecx, 1
jz      short loc_10001C00
mov     edx, [ebp+arg_0]
push    edx
call    sub_1000108E
add     esp, 4
mov     word ptr [ebp+var_10], ax

loc_10001C00:
mov     eax, [ebp+arg_0]
push    eax
call    RdTimeoutWait
add     esp, 4
mov     [ebp+var_C], eax
call    IeTimer
mov     [ebp+var_8], eax

loc_10001C17:
mov     ecx, [ebp+var_10]
and     ecx, 0FFFFh
test    ecx, ecx
jnz     short loc_10001C49
mov     edx, [ebp+arg_0]
push    edx
call    sub_1000108E
add     esp, 4
mov     word ptr [ebp+var_10], ax
mov     eax, [ebp+var_8]
push    eax
call    IeTimerFrom
add     esp, 4
cmp     eax, [ebp+var_C]
jle     short loc_10001C47
jmp     short loc_10001C49

loc_10001C47:
jmp     short loc_10001C17

loc_10001C49:
mov     ax, word ptr [ebp+var_10]
mov     esp, ebp
pop     ebp
retn
VISA_CheckSWStatus endp

; Exported entry  17. VISA_WaitRecvWord


; Attributes: bp-based frame

public VISA_WaitRecvWord
VISA_WaitRecvWord proc near

var_C= word ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 0Ch
mov     eax, [ebp+arg_0]
push    eax
call    RdTimeoutWait
add     esp, 4
mov     [ebp+var_8], eax
call    InitTimeoutLoop

loc_10001C6B:
lea     ecx, [ebp+var_C]
push    ecx
mov     edx, [ebp+arg_0]
push    edx
call    sub_10001CCA
add     esp, 8
neg     eax
sbb     eax, eax
inc     eax
mov     [ebp+var_4], ax
movsx   eax, [ebp+var_4]
test    eax, eax
jz      short loc_10001C8E
jmp     short loc_10001CA1

loc_10001C8E:
mov     ecx, [ebp+var_8]
push    ecx
call    TestTimeoutDone
add     esp, 4
movsx   edx, ax
test    edx, edx
jz      short loc_10001C6B

loc_10001CA1:
movsx   eax, [ebp+var_4]
test    eax, eax
jnz     short loc_10001CC2
lea     ecx, [ebp+var_C]
push    ecx
mov     edx, [ebp+arg_0]
push    edx
call    sub_10001CCA
add     esp, 8
neg     eax
sbb     eax, eax
inc     eax
mov     [ebp+var_4], ax

loc_10001CC2:
mov     ax, [ebp+var_C]
mov     esp, ebp
pop     ebp
retn
VISA_WaitRecvWord endp



; Attributes: bp-based frame

sub_10001CCA proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
push    eax
call    readDataWord_sub_10001B08
add     esp, 4
mov     ecx, [ebp+arg_4]
mov     [ecx], ax
mov     edx, [ebp+arg_0]
push    edx
call    RdErrorStatus
add     esp, 4
pop     ebp
retn
sub_10001CCA endp

; Exported entry  12. VISA_SendCommand


; Attributes: bp-based frame

public VISA_SendCommand
VISA_SendCommand proc near

returnv= dword ptr -10h
word_i= word ptr -0Ch
retry_i= word ptr -8
retry_state= dword ptr -4
a1= dword ptr  8
command= word ptr  0Ch
num= word ptr  10h
words= dword ptr  14h

push    ebp
mov     ebp, esp
sub     esp, 10h
mov     word ptr [ebp+returnv], 0
mov     word ptr [ebp+retry_state], 3
mov     [ebp+word_i], 0
mov     [ebp+retry_i], 0
mov     eax, [ebp+a1]
push    eax
call    DLFMModeOff
add     esp, 4
movsx   ecx, [ebp+command]
test    ecx, ecx
jl      short loc_10001D28
movsx   edx, [ebp+command]
cmp     edx, 10h
jle     short loc_10001D34

loc_10001D28:
mov     word ptr [ebp+returnv], 11h
mov     word ptr [ebp+retry_state], 1

loc_10001D34:
mov     eax, [ebp+retry_state]
and     eax, 0FFFFh
cmp     eax, 3
jz      short loc_10001D53
mov     ecx, [ebp+retry_state]
and     ecx, 0FFFFh
cmp     ecx, 4
jnz     loc_10001E1D

loc_10001D53:
mov     dx, [ebp+command]
push    edx
mov     eax, [ebp+a1]
push    eax
call    VISA_SendWord
add     esp, 8
mov     [ebp+word_i], 0
jmp     short loc_10001D78

loc_10001D6C:
mov     cx, [ebp+word_i]
add     cx, 1
mov     [ebp+word_i], cx

loc_10001D78:
movsx   edx, [ebp+word_i]
movsx   eax, [ebp+num]
cmp     edx, eax
jge     short loc_10001D9E
movsx   ecx, [ebp+word_i]
mov     edx, [ebp+words]
mov     ax, [edx+ecx*2]
push    eax
mov     ecx, [ebp+a1]
push    ecx
call    VISA_SendWord
add     esp, 8
jmp     short loc_10001D6C

loc_10001D9E:
mov     edx, [ebp+a1]
push    edx
call    VISA_CheckSWStatus
add     esp, 4
mov     word ptr [ebp+returnv], ax
mov     eax, [ebp+returnv]
and     eax, 0FFFFh
cmp     eax, 1
jnz     short loc_10001DC6
mov     word ptr [ebp+retry_state], 0
jmp     loc_10001D34

loc_10001DC6:
movsx   ecx, [ebp+retry_i]
cmp     ecx, 0Ah
jge     short max_retry_reached

prep_retry:
mov     dx, [ebp+retry_i]
add     dx, 1
mov     [ebp+retry_i], dx
mov     word ptr [ebp+retry_state], 4
jmp     loc_10001D34

max_retry_reached:
movsx   eax, [ebp+retry_i]
cmp     eax, 0Ah
jl      short loc_10001E00
mov     word ptr [ebp+retry_state], 1
mov     word ptr [ebp+returnv], 0
jmp     loc_10001D34

loc_10001E00:
mov     ecx, [ebp+returnv]
and     ecx, 0FFFFh
test    ecx, ecx
jz      short loc_10001E18
mov     word ptr [ebp+retry_state], 1
jmp     loc_10001D34

loc_10001E18:
jmp     loc_10001D34

loc_10001E1D:
mov     edx, [ebp+a1]
push    edx
call    DLFMModeOn
add     esp, 4
mov     ax, word ptr [ebp+returnv]
mov     esp, ebp
pop     ebp
retn
VISA_SendCommand endp

; Exported entry   4. VISA_ClearDataFIFO


; Attributes: bp-based frame

public VISA_ClearDataFIFO
VISA_ClearDataFIFO proc near

var_4= word ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], 0
jmp     short loc_10001E49

loc_10001E3D:
mov     ax, [ebp+var_4]
add     ax, 1
mov     [ebp+var_4], ax

loc_10001E49:
movsx   ecx, [ebp+var_4]
cmp     ecx, 200h
jg      short loc_10001E75
mov     edx, [ebp+arg_0]
push    edx
call    readDataWord_sub_10001B08
add     esp, 4
mov     eax, [ebp+arg_0]
push    eax
call    RdErrorStatus
add     esp, 4
test    eax, eax
jz      short loc_10001E73
jmp     short loc_10001E75

loc_10001E73:
jmp     short loc_10001E3D

loc_10001E75:
mov     esp, ebp
pop     ebp
retn
VISA_ClearDataFIFO endp

; Exported entry  13. VISA_SendDataItem


; Attributes: bp-based frame

public VISA_SendDataItem
VISA_SendDataItem proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= word ptr -0Ch
var_8= word ptr -8
var_4= word ptr -4
arg_0= dword ptr  8
arg_4= word ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 14h
mov     [ebp+var_C], 0
call    IeTimer
mov     [ebp+var_14], eax
mov     eax, [ebp+arg_0]
push    eax
call    TestFuncStatusAndPtr
add     esp, 4
movsx   ecx, ax
test    ecx, ecx
jz      short loc_10001EB1
mov     edx, [ebp+arg_0]
push    edx
call    GetFuncStatusCode
add     esp, 4
jmp     loc_10001F9D

loc_10001EB1:
mov     eax, [ebp+arg_0]
push    eax
call    RdTimeoutWait
add     esp, 4
mov     [ebp+var_10], eax
mov     ecx, [ebp+arg_0]
push    ecx
call    GetFuncStatusCode
add     esp, 4
mov     [ebp+var_4], ax
movsx   edx, [ebp+var_4]
test    edx, edx
jge     short loc_10001EE1
mov     ax, [ebp+var_4]
jmp     loc_10001F9D

loc_10001EE1:
call    InitTimeoutLoop

loc_10001EE6:
mov     eax, [ebp+arg_0]
push    eax
call    VISA_CheckHWStatus
add     esp, 4
mov     [ebp+var_4], ax
movsx   ecx, [ebp+var_4]
xor     edx, edx
cmp     ecx, 800h
setnz   dl
mov     [ebp+var_8], dx
movsx   eax, [ebp+var_8]
test    eax, eax
jz      short loc_10001F13
jmp     short loc_10001F26

loc_10001F13:
mov     ecx, [ebp+var_10]
push    ecx
call    TestTimeoutDone
add     esp, 4
movsx   edx, ax
test    edx, edx
jz      short loc_10001EE6

loc_10001F26:
movsx   eax, [ebp+var_8]
test    eax, eax
jnz     short loc_10001F51
mov     ecx, [ebp+arg_0]
push    ecx
call    VISA_CheckHWStatus
add     esp, 4
mov     [ebp+var_4], ax
movsx   edx, [ebp+var_4]
xor     eax, eax
cmp     edx, 800h
setnz   al
mov     [ebp+var_8], ax

loc_10001F51:
movsx   ecx, [ebp+var_8]
test    ecx, ecx
jnz     short loc_10001F69
push    0FFFFFFF4h
mov     edx, [ebp+arg_0]
push    edx
call    SetFuncStatusCode
add     esp, 8
jmp     short loc_10001F9D

loc_10001F69:
mov     ax, [ebp+arg_4]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
call    VISA_SendWord
add     esp, 8
mov     [ebp+var_4], ax
movsx   edx, [ebp+var_4]
test    edx, edx
jz      short loc_10001F8C
mov     [ebp+var_4], 0FFFFh

loc_10001F8C:
mov     ax, [ebp+var_4]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
call    SetFuncStatusCode
add     esp, 8

loc_10001F9D:
mov     esp, ebp
pop     ebp
retn
VISA_SendDataItem endp

; Exported entry   9. VISA_InitEngine


; Attributes: bp-based frame

public VISA_InitEngine
VISA_InitEngine proc near

var_8= word ptr -8
var_4= word ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 8
push    64h
mov     eax, [ebp+arg_0]
push    eax
call    SetTimeoutWait
add     esp, 8
push    0C8FFh
mov     ecx, [ebp+arg_0]
push    ecx
call    sub_100012FA
add     esp, 8
mov     [ebp+var_4], ax
mov     edx, [ebp+arg_0]
push    edx
call    RdErrorStatus
add     esp, 4
test    eax, eax
jnz     short loc_10001FE3
movsx   eax, [ebp+var_4]
cmp     eax, 0FFFFFFFEh
jz      short loc_10001FEC

loc_10001FE3:
or      ax, 0FFFFh
jmp     loc_100020DF

loc_10001FEC:
push    0FCFFh
mov     ecx, [ebp+arg_0]
push    ecx
call    sub_100012FA
add     esp, 8
mov     [ebp+var_4], ax
mov     edx, [ebp+arg_0]
push    edx
call    RdErrorStatus
add     esp, 4
test    eax, eax
jz      short loc_1000201A
or      ax, 0FFFFh
jmp     loc_100020DF

loc_1000201A:
movsx   eax, [ebp+var_4]
and     eax, 0F00h
cmp     eax, 0F00h
jz      short loc_10002033
or      ax, 0FFFFh
jmp     loc_100020DF

loc_10002033:
mov     ecx, [ebp+arg_0]
push    ecx
call    DLFMModeOn
add     esp, 4
movsx   edx, ax
test    edx, edx
jz      short loc_1000204F
or      ax, 0FFFFh
jmp     loc_100020DF

loc_1000204F:
push    7C00h
mov     eax, [ebp+arg_0]
push    eax
call    sub_100012FA
add     esp, 8
mov     ecx, [ebp+arg_0]
push    ecx
call    RdErrorStatus
add     esp, 4
test    eax, eax
jz      short loc_10002076
or      ax, 0FFFFh
jmp     short loc_100020DF

loc_10002076:
push    0
mov     edx, [ebp+arg_0]
push    edx
call    BreakSweep
add     esp, 8
mov     [ebp+var_8], ax
movsx   eax, [ebp+var_8]
cmp     eax, 41h
jz      short loc_10002097
or      ax, 0FFFFh
jmp     short loc_100020DF

loc_10002097:
mov     ecx, [ebp+arg_0]
push    ecx
call    CommTrigDetect
add     esp, 4
mov     [ebp+var_8], ax
movsx   edx, [ebp+var_8]
cmp     edx, 41h
jz      short loc_100020B6
or      ax, 0FFFFh
jmp     short loc_100020DF

loc_100020B6:
mov     eax, [ebp+arg_0]
push    eax
call    CommInterrupts
add     esp, 4
mov     [ebp+var_8], ax
movsx   ecx, [ebp+var_8]
cmp     ecx, 41h
jz      short loc_100020D5
or      ax, 0FFFFh
jmp     short loc_100020DF

loc_100020D5:
mov     [ebp+var_8], 41h
mov     ax, [ebp+var_8]

loc_100020DF:
mov     esp, ebp
pop     ebp
retn
VISA_InitEngine endp

; Exported entry  11. VISA_ResetEngine


; Attributes: bp-based frame

public VISA_ResetEngine
VISA_ResetEngine proc near

var_4= word ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    ecx
push    0C8FFh
mov     eax, [ebp+arg_0]
push    eax
call    sub_100012FA
add     esp, 8
mov     [ebp+var_4], ax
mov     ecx, [ebp+arg_0]
push    ecx
call    RdErrorStatus
add     esp, 4
test    eax, eax
jnz     short loc_10002115
movsx   edx, [ebp+var_4]
cmp     edx, 0FFFFFFFEh
jz      short loc_1000211D

loc_10002115:
mov     [ebp+var_4], 40h
jmp     short loc_1000215A

loc_1000211D:
push    0FCFFh
mov     eax, [ebp+arg_0]
push    eax
call    sub_100012FA
add     esp, 8
mov     [ebp+var_4], ax
mov     ecx, [ebp+arg_0]
push    ecx
call    RdErrorStatus
add     esp, 4
test    eax, eax
jnz     short loc_10002154
movsx   edx, [ebp+var_4]
and     edx, 0F00h
cmp     edx, 0F00h
jz      short loc_1000215A

loc_10002154:
mov     [ebp+var_4], 40h

loc_1000215A:
movsx   eax, [ebp+var_4]
cmp     eax, 40h
jz      short loc_10002175
push    0
mov     ecx, [ebp+arg_0]
push    ecx
call    BreakSweep
add     esp, 8
mov     [ebp+var_4], ax

loc_10002175:
mov     ax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn
VISA_ResetEngine endp

; Exported entry  15. VISA_ShutdownEngine


; Attributes: bp-based frame

public VISA_ShutdownEngine
VISA_ShutdownEngine proc near

var_8= dword ptr -8
var_4= word ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+var_4], 0
push    0C8FFh
mov     eax, [ebp+arg_0]
push    eax
call    sub_100012FA
add     esp, 8
mov     word ptr [ebp+var_8], ax
mov     ecx, [ebp+arg_0]
push    ecx
call    RdErrorStatus
add     esp, 4
test    eax, eax
jz      short loc_100021B4
mov     [ebp+var_4], 0FFFFh

loc_100021B4:
mov     edx, [ebp+var_8]
and     edx, 0FFFFh
cmp     edx, 0FFFEh
jz      short loc_100021CB
mov     [ebp+var_4], 0FFFFh

loc_100021CB:
xor     ax, ax
mov     esp, ebp
pop     ebp
retn
VISA_ShutdownEngine endp

; Exported entry  10. VISA_OpenSessionStep


; Attributes: bp-based frame

public VISA_OpenSessionStep
VISA_OpenSessionStep proc near

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 8
cmp     [ebp+arg_0], 0
jnz     short loc_100021E7
mov     ax, 0FFF6h
jmp     loc_10002370

loc_100021E7:
mov     eax, [ebp+arg_0]
cmp     dword ptr [eax+1D4h], 0
jz      short loc_100021FC
mov     ax, 0FFEDh
jmp     loc_10002370

loc_100021FC:
cmp     dword_1000BD0C, 0
jnz     short loc_10002221
push    offset dword_1000BD08
call    viOpenDefaultRM
mov     [ebp+var_8], eax
cmp     [ebp+var_8], 0
jz      short loc_10002221
or      ax, 0FFFFh
jmp     loc_10002370

loc_10002221:
lea     ecx, [ebp+var_4]
push    ecx
push    0
push    0
mov     edx, [ebp+arg_0]
add     edx, 0D2h
push    edx
mov     eax, dword_1000BD08
push    eax
call    viOpen
mov     [ebp+var_8], eax
cmp     [ebp+var_8], 0
jz      short loc_10002266
mov     ecx, dword_1000BD08
push    ecx
call    viClose
mov     dword_1000BD08, 0
or      ax, 0FFFFh
jmp     loc_10002370

loc_10002266:
mov     edx, dword_1000BD0C
add     edx, 1
mov     dword_1000BD0C, edx
mov     eax, [ebp+arg_0]
mov     cx, [eax+0D0h]
add     cx, 1
mov     edx, [ebp+arg_0]
mov     [edx+0D0h], cx
push    2710h
push    3FFF001Ah
mov     eax, [ebp+var_4]
push    eax
call    viSetAttribute
test    eax, eax
jge     short loc_100022B9
mov     ecx, [ebp+arg_0]
push    ecx
call    VISA_CloseSession
add     esp, 4
or      ax, 0FFFFh
jmp     loc_10002370

loc_100022B9:
push    0FA0h
push    3
mov     edx, [ebp+var_4]
push    edx
call    viSetBuf
test    eax, eax
jge     short loc_100022E2
mov     eax, [ebp+arg_0]
push    eax
call    VISA_CloseSession
add     esp, 4
or      ax, 0FFFFh
jmp     loc_10002370

loc_100022E2:
push    1
push    3FFF002Dh
mov     ecx, [ebp+var_4]
push    ecx
call    viSetAttribute
test    eax, eax
jge     short loc_10002308
mov     edx, [ebp+arg_0]
push    edx
call    VISA_CloseSession
add     esp, 4
or      ax, 0FFFFh
jmp     short loc_10002370

loc_10002308:
push    1
push    3FFF002Ah
mov     eax, [ebp+var_4]
push    eax
call    viSetAttribute
test    eax, eax
jge     short loc_1000232E
mov     ecx, [ebp+arg_0]
push    ecx
call    VISA_CloseSession
add     esp, 4
or      ax, 0FFFFh
jmp     short loc_10002370

loc_1000232E:
mov     edx, [ebp+arg_0]
mov     eax, [ebp+var_4]
mov     [edx+1D4h], eax
mov     ecx, [ebp+arg_0]
push    ecx
call    VISA_InitEngine
add     esp, 4
movsx   edx, ax
cmp     edx, 41h
jz      short loc_1000236D
mov     eax, [ebp+arg_0]
push    eax
call    VISA_CloseSession
add     esp, 4
mov     ecx, [ebp+arg_0]
mov     dword ptr [ecx+1D4h], 0
or      ax, 0FFFFh
jmp     short loc_10002370

loc_1000236D:
xor     ax, ax

loc_10002370:
mov     esp, ebp
pop     ebp
retn
VISA_OpenSessionStep endp

; Exported entry   5. VISA_CloseSession


; Attributes: bp-based frame

public VISA_CloseSession
VISA_CloseSession proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
cmp     [ebp+arg_0], 0
jnz     short loc_10002383
mov     ax, 0FFF6h
jmp     short loc_10002400

loc_10002383:
mov     eax, [ebp+arg_0]
cmp     dword ptr [eax+1D4h], 0
jnz     short loc_10002395
mov     ax, 0FFEDh
jmp     short loc_10002400

loc_10002395:
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+1D4h]
push    edx
call    viClose
mov     eax, dword_1000BD0C
sub     eax, 1
mov     dword_1000BD0C, eax
cmp     dword_1000BD0C, 0
jnz     short loc_100023D0
mov     ecx, dword_1000BD08
push    ecx
call    viClose
mov     dword_1000BD08, 0

loc_100023D0:
mov     dword_1000BD08, 0
mov     edx, [ebp+arg_0]
mov     dword ptr [edx+1D4h], 0
mov     eax, [ebp+arg_0]
mov     word ptr [eax+0D0h], 0
mov     ecx, [ebp+arg_0]
mov     byte ptr [ecx+0D2h], 0
xor     ax, ax

loc_10002400:
pop     ebp
retn
VISA_CloseSession endp

; Exported entry   7. VISA_GetDataBlock


; Attributes: bp-based frame

public VISA_GetDataBlock
VISA_GetDataBlock proc near

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
a1= dword ptr  8
reversePointIdx= dword ptr  0Ch
a3= dword ptr  10h
a4= dword ptr  14h
a5= dword ptr  18h

push    ebp
mov     ebp, esp
sub     esp, 0Ch
mov     eax, [ebp+a1]
push    eax
call    TestFuncStatusAndPtr
add     esp, 4
movsx   ecx, ax
test    ecx, ecx
jz      short loc_1000242C
mov     edx, [ebp+a1]
push    edx
call    GetFuncStatusCode
add     esp, 4
jmp     loc_10002539

loc_1000242C:
cmp     [ebp+a4], 0
jz      short loc_10002438
cmp     [ebp+a5], 0
jnz     short loc_10002459

loc_10002438:
push    4
mov     eax, [ebp+a1]
push    eax
call    SetErrorStatus
add     esp, 8
push    0FFFFFFFDh
mov     ecx, [ebp+a1]
push    ecx
call    SetFuncStatusCode
add     esp, 8
jmp     loc_10002539

loc_10002459:
mov     edx, [ebp+reversePointIdx]
imul    edx, [ebp+a3]
mov     [ebp+var_4], edx
mov     eax, [ebp+a1]
push    eax
call    VISA_CheckHWStatus
add     esp, 4
movsx   ecx, ax
and     ecx, 0F00h
mov     [ebp+var_C], ecx
cmp     [ebp+var_C], 0D00h
jg      short loc_100024A1
cmp     [ebp+var_C], 0D00h
jz      short loc_100024BE
cmp     [ebp+var_C], 900h
jz      short loc_100024B5
cmp     [ebp+var_C], 0B00h
jz      short loc_100024AC
jmp     short loc_100024D0

loc_100024A1:
cmp     [ebp+var_C], 0F00h
jz      short loc_100024C7
jmp     short loc_100024D0

loc_100024AC:
mov     [ebp+var_8], 1
jmp     short loc_100024D7

loc_100024B5:
mov     [ebp+var_8], 80h
jmp     short loc_100024D7

loc_100024BE:
mov     [ebp+var_8], 100h
jmp     short loc_100024D7

loc_100024C7:
mov     [ebp+var_8], 180h
jmp     short loc_100024D7

loc_100024D0:
mov     [ebp+var_8], 0

loc_100024D7:
mov     edx, [ebp+var_4]
cmp     edx, [ebp+var_8]
jle     short loc_100024EE
mov     eax, [ebp+var_8]
cdq
idiv    [ebp+a3]
mov     eax, [ebp+var_8]
sub     eax, edx
mov     [ebp+var_4], eax

loc_100024EE:
cmp     [ebp+var_4], 0
jnz     short loc_10002509
cmp     [ebp+var_8], 1
jnz     short loc_10002509
cmp     [ebp+a3], 80h
jge     short loc_10002509
mov     ecx, [ebp+a3]
mov     [ebp+var_4], ecx

loc_10002509:
mov     edx, [ebp+a5]
mov     word ptr [edx], 0
mov     eax, [ebp+var_4]
cdq
idiv    [ebp+a3]
mov     ecx, [ebp+a4]
mov     [ecx], eax
push    0
mov     edx, [ebp+a1]
push    edx
call    SetErrorStatus
add     esp, 8
push    0
mov     eax, [ebp+a1]
push    eax
call    SetFuncStatusCode
add     esp, 8

loc_10002539:
mov     esp, ebp
pop     ebp
retn
VISA_GetDataBlock endp

; Exported entry   8. VISA_IdQuery


; Attributes: bp-based frame

public VISA_IdQuery
VISA_IdQuery proc near

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 0Ch
mov     word ptr [ebp+var_8], 0
mov     [ebp+var_4], 0
mov     eax, [ebp+arg_0]
push    eax
call    RdSessionHandle
add     esp, 4
mov     [ebp+var_C], eax
lea     ecx, [ebp+var_8]
push    ecx
push    3FFF00D9h
mov     edx, [ebp+var_C]
push    edx
call    viGetAttribute
test    eax, eax
jge     short loc_1000257A
or      ax, 0FFFFh
jmp     short loc_1000259E

loc_1000257A:
mov     eax, [ebp+var_8]
and     eax, 0FFFFh
cmp     eax, 0ECEh
jz      short loc_10002593
mov     ecx, [ebp+arg_4]
mov     word ptr [ecx], 0
jmp     short loc_1000259B

loc_10002593:
mov     edx, [ebp+arg_4]
mov     word ptr [edx], 1

loc_1000259B:
xor     ax, ax

loc_1000259E:
mov     esp, ebp
pop     ebp
retn
VISA_IdQuery endp



; Attributes: bp-based frame

sub_100025A2 proc near

var_120= dword ptr -120h
var_11C= word ptr -11Ch
var_118= byte ptr -118h
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= word ptr -0Ch
var_8= word ptr -8
var_4= dword ptr -4
arg_0= word ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
sub     esp, 120h
mov     [ebp+var_4], 0
mov     [ebp+var_10], 0
mov     [ebp+var_C], 0
mov     eax, [ebp+arg_4]
mov     dword ptr [eax], 0
mov     ecx, [ebp+arg_8]
mov     word ptr [ecx], 0
mov     [ebp+var_11C], 0
lea     edx, [ebp+var_14]
push    edx
call    viOpenDefaultRM
mov     [ebp+var_120], eax
cmp     [ebp+var_120], 0
jz      short loc_100025F9
or      eax, 0FFFFFFFFh
jmp     loc_1000274F

loc_100025F9:
lea     eax, [ebp+var_118]
push    eax
lea     ecx, [ebp+var_4]
push    ecx
lea     edx, [ebp+var_10]
push    edx
push    offset aVxiInstr_0 ; "VXI?*INSTR"
mov     eax, [ebp+var_14]
push    eax
call    viFindRsrc
mov     [ebp+var_120], eax
cmp     [ebp+var_120], 0
jz      short loc_10002636
mov     ecx, [ebp+var_14]
push    ecx
call    viClose
or      eax, 0FFFFFFFFh
jmp     loc_1000274F

loc_10002636:
cmp     [ebp+var_4], 0
jbe     loc_10002744
mov     edx, [ebp+var_4]
sub     edx, 1
mov     [ebp+var_4], edx
lea     eax, [ebp+var_18]
push    eax
push    0
push    0
lea     ecx, [ebp+var_118]
push    ecx
mov     edx, [ebp+var_14]
push    edx
call    viOpen
mov     [ebp+var_120], eax
cmp     [ebp+var_120], 0
jz      short loc_10002681
mov     eax, [ebp+var_14]
push    eax
call    viClose
or      eax, 0FFFFFFFFh
jmp     loc_1000274F

loc_10002681:
lea     ecx, [ebp+var_8]
push    ecx
push    3FFF00D5h
mov     edx, [ebp+var_18]
push    edx
call    viGetAttribute
test    eax, eax
jz      short loc_100026B1
mov     eax, [ebp+var_18]
push    eax
call    viClose
mov     ecx, [ebp+var_14]
push    ecx
call    viClose
or      eax, 0FFFFFFFFh
jmp     loc_1000274F

loc_100026B1:
lea     edx, [ebp+var_C]
push    edx
push    3FFF00D9h
mov     eax, [ebp+var_18]
push    eax
call    viGetAttribute
test    eax, eax
jz      short loc_100026DE
mov     ecx, [ebp+var_18]
push    ecx
call    viClose
mov     edx, [ebp+var_14]
push    edx
call    viClose
or      eax, 0FFFFFFFFh
jmp     short loc_1000274F

loc_100026DE:
movsx   eax, [ebp+var_C]
cmp     eax, 0ECEh
jnz     short loc_10002720
movsx   ecx, [ebp+var_8]
movsx   edx, [ebp+arg_0]
cmp     ecx, edx
jle     short loc_10002720
mov     eax, [ebp+arg_4]
mov     ecx, [eax]
add     ecx, 1
mov     edx, [ebp+arg_4]
mov     [edx], ecx
movsx   eax, [ebp+var_11C]
test    eax, eax
jnz     short loc_10002720
mov     ecx, [ebp+arg_8]
mov     dx, [ebp+var_8]
mov     [ecx], dx
mov     [ebp+var_11C], 1

loc_10002720:
cmp     [ebp+var_4], 0
jbe     short loc_10002736
lea     eax, [ebp+var_118]
push    eax
mov     ecx, [ebp+var_10]
push    ecx
call    viFindNext

loc_10002736:
mov     edx, [ebp+var_18]
push    edx
call    viClose
jmp     loc_10002636

loc_10002744:
mov     eax, [ebp+var_14]
push    eax
call    viClose
xor     eax, eax

loc_1000274F:
mov     esp, ebp
pop     ebp
retn
sub_100025A2 endp

push    ebp
mov     ebp, esp
sub     esp, 58h
lea     eax, [ebp-3Ch]
push    eax
mov     ecx, [ebp+0Ch]
push    ecx
mov     dx, [ebp+8]
push    edx
call    sub_100025A2
add     esp, 0Ch
test    eax, eax
jz      short loc_1000277A
or      eax, 0FFFFFFFFh
jmp     loc_100028DB

loc_1000277A:
mov     eax, [ebp+0Ch]
mov     ecx, [eax]
mov     [ebp-50h], ecx
lea     edx, [ebp-44h]
push    edx
call    viOpenDefaultRM
mov     [ebp-54h], eax
cmp     dword ptr [ebp-54h], 0
jz      short loc_1000279C
or      eax, 0FFFFFFFFh
jmp     loc_100028DB

loc_1000279C:
mov     dword ptr [ebp-4Ch], 0
jmp     short loc_100027AE

loc_100027A5:
mov     eax, [ebp-4Ch]
add     eax, 1
mov     [ebp-4Ch], eax

loc_100027AE:
cmp     dword ptr [ebp-50h], 0
jz      loc_100028D0
movsx   ecx, word ptr [ebp-3Ch]
push    ecx
push    offset aVxi0IInstr ; "VXI0::%i::INSTR"
lea     edx, [ebp-34h]
push    edx
call    sub_1000297C
add     esp, 0Ch
lea     eax, [ebp-48h]
push    eax
push    0
push    0
lea     ecx, [ebp-34h]
push    ecx
mov     edx, [ebp-44h]
push    edx
call    viOpen
mov     [ebp-54h], eax
cmp     dword ptr [ebp-54h], 0
jz      short loc_100027FD
mov     eax, [ebp-44h]
push    eax
call    viClose
or      eax, 0FFFFFFFFh
jmp     loc_100028DB

loc_100027FD:
lea     ecx, [ebp-58h]
push    ecx
push    3FFF00D9h
mov     edx, [ebp-48h]
push    edx
call    viGetAttribute
mov     eax, [ebp-58h]
and     eax, 0FFFFh
cmp     eax, 0ECEh
jz      short loc_10002838
mov     ecx, [ebp-48h]
push    ecx
call    viClose
mov     edx, [ebp-44h]
push    edx
call    viClose
or      eax, 0FFFFFFFFh
jmp     loc_100028DB

loc_10002838:
lea     eax, [ebp-38h]
push    eax
push    3FFF00E8h
mov     ecx, [ebp-48h]
push    ecx
call    viGetAttribute
lea     edx, [ebp-40h]
push    edx
push    3FFF0070h
mov     eax, [ebp-48h]
push    eax
call    viGetAttribute
mov     ecx, [ebp-4Ch]
mov     edx, [ebp+10h]
mov     ax, [ebp-3Ch]
mov     [edx+ecx*2], ax
mov     ecx, [ebp-4Ch]
mov     edx, [ebp+14h]
mov     ax, [ebp-40h]
mov     [edx+ecx*2], ax
mov     ecx, [ebp-4Ch]
mov     edx, [ebp+18h]
mov     ax, [ebp-38h]
mov     [edx+ecx*2], ax
cmp     dword ptr [ebp-50h], 0
jz      short loc_100028C2
lea     ecx, [ebp-3Ch]
push    ecx
lea     edx, [ebp-50h]
push    edx
mov     eax, [ebp-4Ch]
mov     ecx, [ebp+10h]
mov     dx, [ecx+eax*2]
push    edx
call    sub_100025A2
add     esp, 0Ch
test    eax, eax
jz      short loc_100028C2
mov     eax, [ebp-48h]
push    eax
call    viClose
mov     ecx, [ebp-44h]
push    ecx
call    viClose
or      eax, 0FFFFFFFFh
jmp     short loc_100028DB

loc_100028C2:
mov     edx, [ebp-48h]
push    edx
call    viClose
jmp     loc_100027A5

loc_100028D0:
mov     eax, [ebp-44h]
push    eax
call    viClose
xor     eax, eax

loc_100028DB:
mov     esp, ebp
pop     ebp
retn
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION IeTimerFrom. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION IeTimer. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION RdTimeoutWait. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SetEngineReplyCode. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION TestTimeoutDone. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION InitTimeoutLoop. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SetErrorStatus. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetFuncStatusCode. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION TestFuncStatusAndPtr. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION RdErrorStatus. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SetFuncStatusCode. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION CommInterrupts. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION CommTrigDetect. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION BreakSweep. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SetTimeoutWait. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION RdSessionHandle. PRESS CTRL-NUMPAD+ TO EXPAND]


; Attributes: thunk

viIn16 proc near
jmp     ds:__imp_viIn16
viIn16 endp

; [00000006 BYTES: COLLAPSED FUNCTION viOut16. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION viClose. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION viFindNext. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION viGetAttribute. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION viOpen. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION viFindRsrc. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION viOpenDefaultRM. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION viSetBuf. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION viSetAttribute. PRESS CTRL-NUMPAD+ TO EXPAND]


; Attributes: bp-based frame

sub_1000297C proc near

var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= dword ptr -14h
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= byte ptr  10h

push    ebp
mov     ebp, esp
sub     esp, 20h
mov     eax, [ebp+arg_0]
push    esi
mov     [ebp+var_18], eax
mov     [ebp+var_20], eax
lea     eax, [ebp+arg_8]
mov     [ebp+var_14], 42h
push    eax
lea     eax, [ebp+var_20]
push    [ebp+arg_4]
mov     [ebp+var_1C], 7FFFFFFFh
push    eax
call    sub_10002C8F
add     esp, 0Ch
dec     [ebp+var_1C]
mov     esi, eax
js      short loc_100029BC
mov     eax, [ebp+var_20]
and     byte ptr [eax], 0
jmp     short loc_100029C9

loc_100029BC:
lea     eax, [ebp+var_20]
push    eax
push    0
call    sub_10002B77
pop     ecx
pop     ecx

loc_100029C9:
mov     eax, esi
pop     esi
leave
retn
sub_1000297C endp




sub_100029CE proc near

arg_4= dword ptr  8

mov     eax, [esp+arg_4]
cmp     eax, 1
jnz     loc_10002A63
call    ds:GetVersion
push    1
mov     dword_1000BD28, eax
call    sub_10003F00
test    eax, eax
pop     ecx
jz      short loc_10002A2E
mov     eax, dword_1000BD28
xor     ecx, ecx
mov     cl, byte ptr dword_1000BD28+1
and     eax, 0FFh
shr     dword_1000BD28, 10h
mov     dword_1000BD30, eax
mov     dword_1000BD34, ecx
shl     eax, 8
add     eax, ecx
mov     dword_1000BD2C, eax
call    sub_100035B7
test    eax, eax
jnz     short loc_10002A32
call    sub_10003F5D

loc_10002A2E:
xor     eax, eax
jmp     short locret_10002AA4

loc_10002A32:
call    ds:GetCommandLineA
mov     dword_1000D3F8, eax
call    sub_10003C59
mov     dword_1000BD14, eax
call    sub_10003743
call    sub_10003A0C
call    sub_10003953
call    sub_10003499
inc     dword_1000BD10
jmp     short loc_10002AA1

loc_10002A63:
xor     ecx, ecx
cmp     eax, ecx
jnz     short loc_10002A95
cmp     dword_1000BD10, ecx
jle     short loc_10002A2E
dec     dword_1000BD10
cmp     dword_1000BD60, ecx
jnz     short loc_10002A84
call    sub_100034D7

loc_10002A84:
call    sub_100038FF
call    sub_1000360B
call    sub_10003F5D
jmp     short loc_10002AA1

loc_10002A95:
cmp     eax, 3
jnz     short loc_10002AA1
push    ecx
call    sub_100036A3
pop     ecx

loc_10002AA1:
push    1
pop     eax

locret_10002AA4:
retn    0Ch
sub_100029CE endp



; Attributes: bp-based frame

; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
public DllEntryPoint
DllEntryPoint proc near

hinstDLL= dword ptr  8
fdwReason= dword ptr  0Ch
lpReserved= dword ptr  10h

push    ebp
mov     ebp, esp
push    ebx
mov     ebx, [ebp+hinstDLL]
push    esi
mov     esi, [ebp+fdwReason]
push    edi
mov     edi, [ebp+lpReserved]
test    esi, esi
jnz     short loc_10002AC3
cmp     dword_1000BD10, 0
jmp     short loc_10002AE9

loc_10002AC3:
cmp     esi, 1
jz      short loc_10002ACD
cmp     esi, 2
jnz     short loc_10002AEF

loc_10002ACD:
mov     eax, dword_1000D3FC
test    eax, eax
jz      short loc_10002ADF
push    edi
push    esi
push    ebx
call    eax ; dword_1000D3FC
test    eax, eax
jz      short loc_10002AEB

loc_10002ADF:
push    edi
push    esi
push    ebx
call    sub_100029CE
test    eax, eax

loc_10002AE9:
jnz     short loc_10002AEF

loc_10002AEB:
xor     eax, eax
jmp     short loc_10002B3D

loc_10002AEF:
push    edi
push    esi
push    ebx
call    sub_10004005
cmp     esi, 1
mov     [ebp+fdwReason], eax
jnz     short loc_10002B0B
test    eax, eax
jnz     short loc_10002B3A
push    edi
push    eax
push    ebx
call    sub_100029CE

loc_10002B0B:
test    esi, esi
jz      short loc_10002B14
cmp     esi, 3
jnz     short loc_10002B3A

loc_10002B14:
push    edi
push    esi
push    ebx
call    sub_100029CE
test    eax, eax
jnz     short loc_10002B23
and     [ebp+fdwReason], eax

loc_10002B23:
cmp     [ebp+fdwReason], 0
jz      short loc_10002B3A
mov     eax, dword_1000D3FC
test    eax, eax
jz      short loc_10002B3A
push    edi
push    esi
push    ebx
call    eax ; dword_1000D3FC
mov     [ebp+fdwReason], eax

loc_10002B3A:
mov     eax, [ebp+fdwReason]

loc_10002B3D:
pop     edi
pop     esi
pop     ebx
pop     ebp
retn    0Ch
DllEntryPoint endp




; int __cdecl sub_10002B44(DWORD NumberOfBytesWritten)
sub_10002B44 proc near

NumberOfBytesWritten= dword ptr  4

mov     eax, dword_1000BD1C
cmp     eax, 1
jz      short loc_10002B5B
test    eax, eax
jnz     short loc_10002B60
cmp     dword_1000BD20, 1
jnz     short loc_10002B60

loc_10002B5B:
call    sub_1000400B

loc_10002B60:           ; NumberOfBytesWritten
push    [esp+NumberOfBytesWritten]
call    sub_10004044
push    0FFh
call    off_10009058
pop     ecx
pop     ecx
retn
sub_10002B44 endp



; Attributes: bp-based frame

sub_10002B77 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ebx
push    esi
mov     esi, [ebp+arg_4]
mov     eax, [esi+0Ch]
mov     ebx, [esi+10h]
test    al, 82h
jz      loc_10002C83
test    al, 40h
jnz     loc_10002C83
test    al, 1
jz      short loc_10002BAF
and     dword ptr [esi+4], 0
test    al, 10h
jz      loc_10002C83
mov     ecx, [esi+8]
and     al, 0FEh
mov     [esi], ecx
mov     [esi+0Ch], eax

loc_10002BAF:
mov     eax, [esi+0Ch]
and     dword ptr [esi+4], 0
and     [ebp+arg_4], 0
and     al, 0EFh
or      al, 2
test    ax, 10Ch
mov     [esi+0Ch], eax
jnz     short loc_10002BE9
cmp     esi, offset unk_10009140
jz      short loc_10002BD7
cmp     esi, offset unk_10009160
jnz     short loc_10002BE2

loc_10002BD7:
push    ebx
call    sub_100044A3
test    eax, eax
pop     ecx
jnz     short loc_10002BE9

loc_10002BE2:
push    esi
call    sub_1000445F
pop     ecx

loc_10002BE9:
test    word ptr [esi+0Ch], 108h
push    edi
jz      short loc_10002C59
mov     eax, [esi+8]
mov     edi, [esi]
sub     edi, eax
lea     ecx, [eax+1]
mov     [esi], ecx
mov     ecx, [esi+18h]
dec     ecx
test    edi, edi
mov     [esi+4], ecx
jle     short loc_10002C19
push    edi
push    eax
push    ebx
call    sub_1000426F
add     esp, 0Ch
mov     [ebp+arg_4], eax
jmp     short loc_10002C4F

loc_10002C19:
cmp     ebx, 0FFFFFFFFh
jz      short loc_10002C37
mov     ecx, ebx
mov     eax, ebx
sar     ecx, 5
and     eax, 1Fh
mov     ecx, dword_1000D2E0[ecx*4]
lea     eax, [eax+eax*8]
lea     eax, [ecx+eax*4]
jmp     short loc_10002C3C

loc_10002C37:
mov     eax, offset unk_10009068

loc_10002C3C:
test    byte ptr [eax+4], 20h
jz      short loc_10002C4F
push    2
push    0
push    ebx
call    sub_10004197
add     esp, 0Ch

loc_10002C4F:
mov     eax, [esi+8]
mov     cl, byte ptr [ebp+arg_0]
mov     [eax], cl
jmp     short loc_10002C6D

loc_10002C59:
push    1
lea     eax, [ebp+arg_0]
pop     edi
push    edi
push    eax
push    ebx
call    sub_1000426F
add     esp, 0Ch
mov     [ebp+arg_4], eax

loc_10002C6D:
cmp     [ebp+arg_4], edi
pop     edi
jz      short loc_10002C79
or      dword ptr [esi+0Ch], 20h
jmp     short loc_10002C88

loc_10002C79:
mov     eax, [ebp+arg_0]
and     eax, 0FFh
jmp     short loc_10002C8B

loc_10002C83:
or      al, 20h
mov     [esi+0Ch], eax

loc_10002C88:
or      eax, 0FFFFFFFFh

loc_10002C8B:
pop     esi
pop     ebx
pop     ebp
retn
sub_10002B77 endp



; Attributes: bp-based frame

sub_10002C8F proc near

var_248= byte ptr -248h
var_247= byte ptr -247h
var_49= byte ptr -49h
var_48= dword ptr -48h
var_44= dword ptr -44h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= byte ptr -38h
var_34= dword ptr -34h
var_30= dword ptr -30h
var_2C= dword ptr -2Ch
var_28= dword ptr -28h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_16= byte ptr -16h
var_15= byte ptr -15h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
sub     esp, 248h
push    ebx
push    esi
push    edi
mov     edi, [ebp+arg_4]
xor     esi, esi
mov     bl, [edi]
inc     edi
test    bl, bl
mov     [ebp+var_C], esi
mov     [ebp+var_14], esi
mov     [ebp+arg_4], edi
jz      loc_100033A8
mov     ecx, [ebp+var_10]
xor     edx, edx
jmp     short loc_10002CC3

loc_10002CBB:
mov     ecx, [ebp+var_10]
mov     esi, [ebp+var_30]
xor     edx, edx

loc_10002CC3:
cmp     [ebp+var_14], edx
jl      loc_100033A8
cmp     bl, 20h
jl      short loc_10002CE4
cmp     bl, 78h
jg      short loc_10002CE4
movsx   eax, bl
mov     al, byte ptr ds:__imp_InitTimeoutLoop[eax]
and     eax, 0Fh
jmp     short loc_10002CE6

loc_10002CE4:
xor     eax, eax

loc_10002CE6:
movsx   eax, ds:byte_10008150[esi+eax*8]
sar     eax, 4
cmp     eax, 7          ; switch 8 cases
mov     [ebp+var_30], eax
ja      loc_10003397    ; jumptable 10002CFD default case
jmp     ds:off_100033B0[eax*4] ; switch jump

loc_10002D04:           ; jumptable 10002CFD case 1
or      [ebp+var_10], 0FFFFFFFFh
mov     [ebp+var_34], edx
mov     [ebp+var_28], edx
mov     [ebp+var_20], edx
mov     [ebp+var_1C], edx
mov     [ebp+var_4], edx
mov     [ebp+var_24], edx
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002D1F:           ; jumptable 10002CFD case 2
movsx   eax, bl
sub     eax, 20h
jz      short loc_10002D62
sub     eax, 3
jz      short loc_10002D59
sub     eax, 8
jz      short loc_10002D50
dec     eax
dec     eax
jz      short loc_10002D47
sub     eax, 3
jnz     loc_10003397    ; jumptable 10002CFD default case
or      [ebp+var_4], 8
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002D47:
or      [ebp+var_4], 4
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002D50:
or      [ebp+var_4], 1
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002D59:
or      byte ptr [ebp+var_4], 80h
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002D62:
or      [ebp+var_4], 2
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002D6B:           ; jumptable 10002CFD case 3
cmp     bl, 2Ah
jnz     short loc_10002D93
lea     eax, [ebp+arg_8]
push    eax
call    sub_1000346E
test    eax, eax
pop     ecx
mov     [ebp+var_20], eax
jge     loc_10003397    ; jumptable 10002CFD default case
or      [ebp+var_4], 4
neg     eax

loc_10002D8B:
mov     [ebp+var_20], eax
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002D93:
mov     eax, [ebp+var_20]
movsx   ecx, bl
lea     eax, [eax+eax*4]
lea     eax, [ecx+eax*2-30h]
jmp     short loc_10002D8B

loc_10002DA2:           ; jumptable 10002CFD case 4
mov     [ebp+var_10], edx
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002DAA:           ; jumptable 10002CFD case 5
cmp     bl, 2Ah
jnz     short loc_10002DCD
lea     eax, [ebp+arg_8]
push    eax
call    sub_1000346E
test    eax, eax
pop     ecx
mov     [ebp+var_10], eax
jge     loc_10003397    ; jumptable 10002CFD default case
or      [ebp+var_10], 0FFFFFFFFh
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002DCD:
lea     eax, [ecx+ecx*4]
movsx   ecx, bl
lea     eax, [ecx+eax*2-30h]
mov     [ebp+var_10], eax
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002DDF:           ; jumptable 10002CFD case 6
cmp     bl, 49h
jz      short loc_10002E12
cmp     bl, 68h
jz      short loc_10002E09
cmp     bl, 6Ch
jz      short loc_10002E00
cmp     bl, 77h
jnz     loc_10003397    ; jumptable 10002CFD default case
or      byte ptr [ebp+var_4+1], 8
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002E00:
or      [ebp+var_4], 10h
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002E09:
or      [ebp+var_4], 20h
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002E12:
cmp     byte ptr [edi], 36h
jnz     short loc_10002E2B
cmp     byte ptr [edi+1], 34h
jnz     short loc_10002E2B
inc     edi
inc     edi
or      byte ptr [ebp+var_4+1], 80h
mov     [ebp+arg_4], edi
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002E2B:
mov     [ebp+var_30], edx

loc_10002E2E:           ; jumptable 10002CFD case 0
mov     ecx, off_100093B8
mov     [ebp+var_24], edx
movzx   eax, bl
test    byte ptr [ecx+eax*2+1], 80h
jz      short loc_10002E5A
lea     eax, [ebp+var_14]
push    eax
push    [ebp+arg_0]
movsx   eax, bl
push    eax
call    sub_100033D0
mov     bl, [edi]
add     esp, 0Ch
inc     edi
mov     [ebp+arg_4], edi

loc_10002E5A:
lea     eax, [ebp+var_14]
push    eax
push    [ebp+arg_0]
movsx   eax, bl
push    eax
call    sub_100033D0
add     esp, 0Ch
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10002E72:           ; jumptable 10002CFD case 7
movsx   eax, bl
cmp     eax, 67h
jg      loc_1000309A
cmp     eax, 65h
jge     loc_10002F1D
cmp     eax, 58h
jg      loc_10002F7B
jz      loc_1000310E
sub     eax, 43h
jz      loc_10002F3E
dec     eax
dec     eax
jz      short loc_10002F13
dec     eax
dec     eax
jz      short loc_10002F13
sub     eax, 0Ch
jnz     loc_10003299
test    word ptr [ebp+var_4], 830h
jnz     short loc_10002EBC
or      byte ptr [ebp+var_4+1], 8

loc_10002EBC:
mov     esi, [ebp+var_10]
cmp     esi, 0FFFFFFFFh
jnz     short loc_10002EC9
mov     esi, 7FFFFFFFh

loc_10002EC9:
lea     eax, [ebp+arg_8]
push    eax
call    sub_1000346E
test    word ptr [ebp+var_4], 810h
pop     ecx
mov     ecx, eax
mov     [ebp+var_8], ecx
jz      loc_100030E2
test    ecx, ecx
jnz     short loc_10002EF1
mov     ecx, off_10009060
mov     [ebp+var_8], ecx

loc_10002EF1:
mov     [ebp+var_24], 1
mov     eax, ecx

loc_10002EFA:
mov     edx, esi
dec     esi
test    edx, edx
jz      loc_100030D9
cmp     word ptr [eax], 0
jz      loc_100030D9
inc     eax
inc     eax
jmp     short loc_10002EFA

loc_10002F13:
mov     [ebp+var_34], 1
add     bl, 20h

loc_10002F1D:
or      [ebp+var_4], 40h
lea     edi, [ebp+var_248]
cmp     ecx, edx
mov     [ebp+var_8], edi
jge     loc_10003001
mov     [ebp+var_10], 6
jmp     loc_1000300F

loc_10002F3E:
test    word ptr [ebp+var_4], 830h
jnz     short loc_10002F4A
or      byte ptr [ebp+var_4+1], 8

loc_10002F4A:
test    word ptr [ebp+var_4], 810h
lea     eax, [ebp+arg_8]
push    eax
jz      short loc_10002F91
call    sub_1000348B
push    eax
lea     eax, [ebp+var_248]
push    eax
call    sub_100046AB
add     esp, 0Ch
mov     [ebp+var_C], eax
test    eax, eax
jge     short loc_10002FA4
mov     [ebp+var_28], 1
jmp     short loc_10002FA4

loc_10002F7B:
sub     eax, 5Ah
jz      short loc_10002FB2
sub     eax, 9
jz      short loc_10002F4A
dec     eax
jz      loc_10003174
jmp     loc_10003299

loc_10002F91:
call    sub_1000346E
pop     ecx
mov     [ebp+var_248], al
mov     [ebp+var_C], 1

loc_10002FA4:
lea     eax, [ebp+var_248]
mov     [ebp+var_8], eax
jmp     loc_10003299

loc_10002FB2:
lea     eax, [ebp+arg_8]
push    eax
call    sub_1000346E
test    eax, eax
pop     ecx
jz      short loc_10002FF3
mov     ecx, [eax+4]
test    ecx, ecx
jz      short loc_10002FF3
test    byte ptr [ebp+var_4+1], 8
jz      short loc_10002FE4
movsx   eax, word ptr [eax]
shr     eax, 1
mov     [ebp+var_8], ecx
mov     [ebp+var_C], eax
mov     [ebp+var_24], 1
jmp     loc_10003299

loc_10002FE4:
and     [ebp+var_24], 0
mov     [ebp+var_8], ecx
movsx   eax, word ptr [eax]
jmp     loc_10003296

loc_10002FF3:
mov     eax, off_1000905C
mov     [ebp+var_8], eax
push    eax
jmp     loc_1000308F

loc_10003001:
jnz     short loc_1000300F
cmp     bl, 67h
jnz     short loc_1000300F
mov     [ebp+var_10], 1

loc_1000300F:
mov     eax, [ebp+arg_8]
push    [ebp+var_34]
add     eax, 8
mov     [ebp+arg_8], eax
push    [ebp+var_10]
mov     ecx, [eax-8]
mov     [ebp+var_48], ecx
mov     eax, [eax-4]
mov     [ebp+var_44], eax
movsx   eax, bl
push    eax
lea     eax, [ebp+var_248]
push    eax
lea     eax, [ebp+var_48]
push    eax
call    off_100093A0
mov     esi, [ebp+var_4]
add     esp, 14h
and     esi, 80h
jz      short loc_10003061
cmp     [ebp+var_10], 0
jnz     short loc_10003061
lea     eax, [ebp+var_248]
push    eax
call    off_100093AC
pop     ecx

loc_10003061:
cmp     bl, 67h
jnz     short loc_10003078
test    esi, esi
jnz     short loc_10003078
lea     eax, [ebp+var_248]
push    eax
call    off_100093A4
pop     ecx

loc_10003078:
cmp     [ebp+var_248], 2Dh
jnz     short loc_1000308E
or      byte ptr [ebp+var_4+1], 1
lea     edi, [ebp+var_247]
mov     [ebp+var_8], edi

loc_1000308E:
push    edi

loc_1000308F:
call    sub_10004630
pop     ecx
jmp     loc_10003296

loc_1000309A:
sub     eax, 69h
jz      loc_10003174
sub     eax, 5
jz      loc_1000314A
dec     eax
jz      loc_10003137
dec     eax
jz      short loc_10003107
sub     eax, 3
jz      loc_10002EBC
dec     eax
dec     eax
jz      loc_10003178
sub     eax, 3
jnz     loc_10003299
mov     [ebp+var_2C], 27h
jmp     short loc_10003115

loc_100030D9:
sub     eax, ecx
sar     eax, 1
jmp     loc_10003296

loc_100030E2:
test    ecx, ecx
jnz     short loc_100030EF
mov     ecx, off_1000905C
mov     [ebp+var_8], ecx

loc_100030EF:
mov     eax, ecx

loc_100030F1:
mov     edx, esi
dec     esi
test    edx, edx
jz      short loc_10003100
cmp     byte ptr [eax], 0
jz      short loc_10003100
inc     eax
jmp     short loc_100030F1

loc_10003100:
sub     eax, ecx
jmp     loc_10003296

loc_10003107:
mov     [ebp+var_10], 8

loc_1000310E:
mov     [ebp+var_2C], 7

loc_10003115:
test    byte ptr [ebp+var_4], 80h
mov     [ebp+var_C], 10h
jz      short loc_1000317F
mov     al, byte ptr [ebp+var_2C]
mov     [ebp+var_16], 30h
add     al, 51h
mov     [ebp+var_1C], 2
mov     [ebp+var_15], al
jmp     short loc_1000317F

loc_10003137:
test    byte ptr [ebp+var_4], 80h
mov     [ebp+var_C], 8
jz      short loc_1000317F
or      byte ptr [ebp+var_4+1], 2
jmp     short loc_1000317F

loc_1000314A:
lea     eax, [ebp+arg_8]
push    eax
call    sub_1000346E
test    byte ptr [ebp+var_4], 20h
pop     ecx
jz      short loc_10003163
mov     cx, word ptr [ebp+var_14]
mov     [eax], cx
jmp     short loc_10003168

loc_10003163:
mov     ecx, [ebp+var_14]
mov     [eax], ecx

loc_10003168:
mov     [ebp+var_28], 1
jmp     loc_10003397    ; jumptable 10002CFD default case

loc_10003174:
or      [ebp+var_4], 40h

loc_10003178:
mov     [ebp+var_C], 0Ah

loc_1000317F:
test    byte ptr [ebp+var_4+1], 80h
jz      short loc_10003191
lea     eax, [ebp+arg_8]
push    eax
call    sub_1000347B
pop     ecx
jmp     short loc_100031D2

loc_10003191:
test    byte ptr [ebp+var_4], 20h
jz      short loc_100031B8
test    byte ptr [ebp+var_4], 40h
lea     eax, [ebp+arg_8]
push    eax
jz      short loc_100031AD
call    sub_1000346E
pop     ecx
movsx   eax, ax

loc_100031AA:
cdq
jmp     short loc_100031D2

loc_100031AD:
call    sub_1000346E
pop     ecx
movzx   eax, ax
jmp     short loc_100031AA

loc_100031B8:
test    byte ptr [ebp+var_4], 40h
lea     eax, [ebp+arg_8]
push    eax
jz      short loc_100031CA
call    sub_1000346E
pop     ecx
jmp     short loc_100031AA

loc_100031CA:
call    sub_1000346E
pop     ecx
xor     edx, edx

loc_100031D2:
test    byte ptr [ebp+var_4], 40h
jz      short loc_100031F3
test    edx, edx
jg      short loc_100031F3
jl      short loc_100031E2
test    eax, eax
jnb     short loc_100031F3

loc_100031E2:
neg     eax
adc     edx, 0
mov     esi, eax
neg     edx
or      byte ptr [ebp+var_4+1], 1
mov     edi, edx
jmp     short loc_100031F7

loc_100031F3:
mov     esi, eax
mov     edi, edx

loc_100031F7:
test    byte ptr [ebp+var_4+1], 80h
jnz     short loc_10003200
and     edi, 0

loc_10003200:
cmp     [ebp+var_10], 0
jge     short loc_1000320F
mov     [ebp+var_10], 1
jmp     short loc_10003213

loc_1000320F:
and     [ebp+var_4], 0FFFFFFF7h

loc_10003213:
mov     eax, esi
or      eax, edi
jnz     short loc_1000321D
and     [ebp+var_1C], 0

loc_1000321D:
lea     eax, [ebp+var_49]
mov     [ebp+var_8], eax

loc_10003223:
mov     eax, [ebp+var_10]
dec     [ebp+var_10]
test    eax, eax
jg      short loc_10003233
mov     eax, esi
or      eax, edi
jz      short loc_1000326E

loc_10003233:
mov     eax, [ebp+var_C]
cdq
push    edx
push    eax
push    edi
push    esi
mov     [ebp+var_40], eax
mov     [ebp+var_3C], edx
call    sub_100047E0
push    [ebp+var_3C]
mov     ebx, eax
add     ebx, 30h
push    [ebp+var_40]
push    edi
push    esi
call    sub_10004770
cmp     ebx, 39h
mov     esi, eax
mov     edi, edx
jle     short loc_10003264
add     ebx, [ebp+var_2C]

loc_10003264:
mov     eax, [ebp+var_8]
dec     [ebp+var_8]
mov     [eax], bl
jmp     short loc_10003223

loc_1000326E:
lea     eax, [ebp+var_49]
sub     eax, [ebp+var_8]
inc     [ebp+var_8]
test    byte ptr [ebp+var_4+1], 2
mov     [ebp+var_C], eax
jz      short loc_10003299
mov     ecx, [ebp+var_8]
cmp     byte ptr [ecx], 30h
jnz     short loc_1000328C
test    eax, eax
jnz     short loc_10003299

loc_1000328C:
dec     [ebp+var_8]
inc     eax
mov     ecx, [ebp+var_8]
mov     byte ptr [ecx], 30h

loc_10003296:
mov     [ebp+var_C], eax

loc_10003299:
cmp     [ebp+var_28], 0
jnz     loc_10003397    ; jumptable 10002CFD default case
mov     ebx, [ebp+var_4]
test    bl, 40h
jz      short loc_100032D1
test    bh, 1
jz      short loc_100032B6
mov     [ebp+var_16], 2Dh
jmp     short loc_100032CA

loc_100032B6:
test    bl, 1
jz      short loc_100032C1
mov     [ebp+var_16], 2Bh
jmp     short loc_100032CA

loc_100032C1:
test    bl, 2
jz      short loc_100032D1
mov     [ebp+var_16], 20h

loc_100032CA:
mov     [ebp+var_1C], 1

loc_100032D1:
mov     esi, [ebp+var_20]
sub     esi, [ebp+var_1C]
sub     esi, [ebp+var_C]
test    bl, 0Ch
jnz     short loc_100032F1
lea     eax, [ebp+var_14]
push    eax
push    [ebp+arg_0]
push    esi
push    20h
call    sub_10003405
add     esp, 10h

loc_100032F1:
lea     eax, [ebp+var_14]
push    eax
lea     eax, [ebp+var_16]
push    [ebp+arg_0]
push    [ebp+var_1C]
push    eax
call    sub_10003436
add     esp, 10h
test    bl, 8
jz      short loc_10003323
test    bl, 4
jnz     short loc_10003323
lea     eax, [ebp+var_14]
push    eax
push    [ebp+arg_0]
push    esi
push    30h
call    sub_10003405
add     esp, 10h

loc_10003323:
cmp     [ebp+var_24], 0
jz      short loc_1000336A
cmp     [ebp+var_C], 0
jle     short loc_1000336A
mov     eax, [ebp+var_C]
mov     ebx, [ebp+var_8]
lea     edi, [eax-1]

loc_10003338:
mov     ax, [ebx]
inc     ebx
push    eax
lea     eax, [ebp+var_38]
push    eax
inc     ebx
call    sub_100046AB
pop     ecx
test    eax, eax
pop     ecx
jle     short loc_1000337F
lea     ecx, [ebp+var_14]
push    ecx
push    [ebp+arg_0]
push    eax
lea     eax, [ebp+var_38]
push    eax
call    sub_10003436
add     esp, 10h
mov     eax, edi
dec     edi
test    eax, eax
jnz     short loc_10003338
jmp     short loc_1000337F

loc_1000336A:
lea     eax, [ebp+var_14]
push    eax
push    [ebp+arg_0]
push    [ebp+var_C]
push    [ebp+var_8]
call    sub_10003436
add     esp, 10h

loc_1000337F:
test    byte ptr [ebp+var_4], 4
jz      short loc_10003397 ; jumptable 10002CFD default case
lea     eax, [ebp+var_14]
push    eax
push    [ebp+arg_0]
push    esi
push    20h
call    sub_10003405
add     esp, 10h

loc_10003397:           ; jumptable 10002CFD default case
mov     edi, [ebp+arg_4]
mov     bl, [edi]
inc     edi
test    bl, bl
mov     [ebp+arg_4], edi
jnz     loc_10002CBB

loc_100033A8:
mov     eax, [ebp+var_14]
pop     edi
pop     esi
pop     ebx
leave
retn
sub_10002C8F endp

off_100033B0 dd offset loc_10002E2E ; jump table for switch statement
dd offset loc_10002D04
dd offset loc_10002D1F
dd offset loc_10002D6B
dd offset loc_10002DA2
dd offset loc_10002DAA
dd offset loc_10002DDF
dd offset loc_10002E72


; Attributes: bp-based frame

sub_100033D0 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
mov     ecx, [ebp+arg_4]
dec     dword ptr [ecx+4]
js      short loc_100033E9
mov     edx, [ecx]
mov     al, byte ptr [ebp+arg_0]
mov     [edx], al
inc     dword ptr [ecx]
movzx   eax, al
jmp     short loc_100033F4

loc_100033E9:
push    ecx
push    [ebp+arg_0]
call    sub_10002B77
pop     ecx
pop     ecx

loc_100033F4:
cmp     eax, 0FFFFFFFFh
mov     eax, [ebp+arg_8]
jnz     short loc_10003401
or      dword ptr [eax], 0FFFFFFFFh
pop     ebp
retn

loc_10003401:
inc     dword ptr [eax]
pop     ebp
retn
sub_100033D0 endp




sub_10003405 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch
arg_C= dword ptr  10h

push    esi
push    edi
mov     edi, [esp+8+arg_4]
mov     eax, edi
dec     edi
test    eax, eax
jle     short loc_10003433
mov     esi, [esp+8+arg_C]

loc_10003416:
push    esi
push    [esp+0Ch+arg_8]
push    [esp+10h+arg_0]
call    sub_100033D0
add     esp, 0Ch
cmp     dword ptr [esi], 0FFFFFFFFh
jz      short loc_10003433
mov     eax, edi
dec     edi
test    eax, eax
jg      short loc_10003416

loc_10003433:
pop     edi
pop     esi
retn
sub_10003405 endp




sub_10003436 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch
arg_C= dword ptr  10h

push    ebx
mov     ebx, [esp+4+arg_4]
mov     eax, ebx
dec     ebx
push    esi
push    edi
test    eax, eax
jle     short loc_1000346A
mov     edi, [esp+0Ch+arg_C]
mov     esi, [esp+0Ch+arg_0]

loc_1000344C:
movsx   eax, byte ptr [esi]
push    edi
inc     esi
push    [esp+10h+arg_8]
push    eax
call    sub_100033D0
add     esp, 0Ch
cmp     dword ptr [edi], 0FFFFFFFFh
jz      short loc_1000346A
mov     eax, ebx
dec     ebx
test    eax, eax
jg      short loc_1000344C

loc_1000346A:
pop     edi
pop     esi
pop     ebx
retn
sub_10003436 endp




sub_1000346E proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
add     dword ptr [eax], 4
mov     eax, [eax]
mov     eax, [eax-4]
retn
sub_1000346E endp




sub_1000347B proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
add     dword ptr [eax], 8
mov     ecx, [eax]
mov     eax, [ecx-8]
mov     edx, [ecx-4]
retn
sub_1000347B endp




sub_1000348B proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
add     dword ptr [eax], 4
mov     eax, [eax]
mov     ax, [eax-4]
retn
sub_1000348B endp




sub_10003499 proc near
mov     eax, dword_1000D3F4
test    eax, eax
jz      short loc_100034A4
call    eax ; dword_1000D3F4

loc_100034A4:
push    offset unk_10009014
push    offset unk_10009008
call    sub_1000359D
push    offset unk_10009004
push    offset unk_10009000
call    sub_1000359D
add     esp, 10h
retn
sub_10003499 endp




sub_100034C6 proc near

uExitCode= dword ptr  4

push    0               ; int
push    1               ; int
push    [esp+8+uExitCode] ; uExitCode
call    sub_100034E6
add     esp, 0Ch
retn
sub_100034C6 endp




sub_100034D7 proc near
push    1               ; int
push    0               ; int
push    0               ; uExitCode
call    sub_100034E6
add     esp, 0Ch
retn
sub_100034D7 endp




; int __cdecl sub_100034E6(UINT uExitCode, int, int)
sub_100034E6 proc near

uExitCode= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch

push    edi
call    sub_1000358B
push    1
pop     edi
cmp     dword_1000BD64, edi
jnz     short loc_10003508
push    [esp+4+uExitCode] ; uExitCode
call    ds:GetCurrentProcess
push    eax             ; hProcess
call    ds:TerminateProcess

loc_10003508:
cmp     [esp+4+arg_4], 0
push    ebx
mov     ebx, [esp+8+arg_8]
mov     dword_1000BD60, edi
mov     byte_1000BD5C, bl
jnz     short loc_1000355C
mov     eax, dword_1000D3F0
test    eax, eax
jz      short loc_1000354B
mov     ecx, dword_1000D3EC
push    esi
lea     esi, [ecx-4]
cmp     esi, eax
jb      short loc_1000354A

loc_10003537:
mov     eax, [esi]
test    eax, eax
jz      short loc_1000353F
call    eax

loc_1000353F:
sub     esi, 4
cmp     esi, dword_1000D3F0
jnb     short loc_10003537

loc_1000354A:
pop     esi

loc_1000354B:
push    offset unk_10009020
push    offset unk_10009018
call    sub_1000359D
pop     ecx
pop     ecx

loc_1000355C:
push    offset unk_10009028
push    offset unk_10009024
call    sub_1000359D
pop     ecx
pop     ecx
test    ebx, ebx
pop     ebx
jz      short loc_10003579
call    sub_10003594
pop     edi
retn

loc_10003579:           ; uExitCode
push    [esp+4+uExitCode]
mov     dword_1000BD64, edi
call    ds:ExitProcess
sub_100034E6 endp

pop     edi
retn



sub_1000358B proc near
push    0Dh
call    sub_100048EA
pop     ecx
retn
sub_1000358B endp




sub_10003594 proc near
push    0Dh
call    sub_1000494B
pop     ecx
retn
sub_10003594 endp




sub_1000359D proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    esi
mov     esi, [esp+4+arg_0]

loc_100035A2:
cmp     esi, [esp+4+arg_4]
jnb     short loc_100035B5
mov     eax, [esi]
test    eax, eax
jz      short loc_100035B0
call    eax

loc_100035B0:
add     esi, 4
jmp     short loc_100035A2

loc_100035B5:
pop     esi
retn
sub_1000359D endp




sub_100035B7 proc near
push    esi
call    sub_10004855
call    ds:TlsAlloc
cmp     eax, 0FFFFFFFFh
mov     dwTlsIndex, eax
jz      short loc_10003607
push    74h
push    1
call    sub_10004960
mov     esi, eax
pop     ecx
test    esi, esi
pop     ecx
jz      short loc_10003607
push    esi             ; lpTlsValue
push    dwTlsIndex      ; dwTlsIndex
call    ds:TlsSetValue
test    eax, eax
jz      short loc_10003607
push    esi
call    sub_10003629
pop     ecx
call    ds:GetCurrentThreadId
or      dword ptr [esi+4], 0FFFFFFFFh
push    1
mov     [esi], eax
pop     eax
pop     esi
retn

loc_10003607:
xor     eax, eax
pop     esi
retn
sub_100035B7 endp




sub_1000360B proc near
call    sub_1000487E
mov     eax, dwTlsIndex
cmp     eax, 0FFFFFFFFh
jz      short locret_10003628
push    eax             ; dwTlsIndex
call    ds:TlsFree
or      dwTlsIndex, 0FFFFFFFFh

locret_10003628:
retn
sub_1000360B endp




sub_10003629 proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
mov     dword ptr [eax+50h], offset unk_10009690
mov     dword ptr [eax+14h], 1
retn
sub_10003629 endp




sub_1000363C proc near
push    esi
push    edi
call    ds:GetLastError
push    dwTlsIndex      ; dwTlsIndex
mov     edi, eax
call    ds:TlsGetValue
mov     esi, eax
test    esi, esi
jnz     short loc_10003697
push    74h
push    1
call    sub_10004960
mov     esi, eax
pop     ecx
test    esi, esi
pop     ecx
jz      short loc_1000368F
push    esi             ; lpTlsValue
push    dwTlsIndex      ; dwTlsIndex
call    ds:TlsSetValue
test    eax, eax
jz      short loc_1000368F
push    esi
call    sub_10003629
pop     ecx
call    ds:GetCurrentThreadId
or      dword ptr [esi+4], 0FFFFFFFFh
mov     [esi], eax
jmp     short loc_10003697

loc_1000368F:           ; NumberOfBytesWritten
push    10h
call    sub_10002B44
pop     ecx

loc_10003697:           ; dwErrCode
push    edi
call    ds:SetLastError
mov     eax, esi
pop     edi
pop     esi
retn
sub_1000363C endp




sub_100036A3 proc near

lpMem= dword ptr  4

mov     eax, dwTlsIndex
cmp     eax, 0FFFFFFFFh
jz      locret_10003742
push    esi
mov     esi, [esp+4+lpMem]
test    esi, esi
jnz     short loc_100036C7
push    eax             ; dwTlsIndex
call    ds:TlsGetValue
mov     esi, eax
test    esi, esi
jz      short loc_10003733

loc_100036C7:
mov     eax, [esi+24h]
test    eax, eax
jz      short loc_100036D5
push    eax             ; lpMem
call    sub_10004A9D
pop     ecx

loc_100036D5:
mov     eax, [esi+28h]
test    eax, eax
jz      short loc_100036E3
push    eax             ; lpMem
call    sub_10004A9D
pop     ecx

loc_100036E3:
mov     eax, [esi+30h]
test    eax, eax
jz      short loc_100036F1
push    eax             ; lpMem
call    sub_10004A9D
pop     ecx

loc_100036F1:
mov     eax, [esi+38h]
test    eax, eax
jz      short loc_100036FF
push    eax             ; lpMem
call    sub_10004A9D
pop     ecx

loc_100036FF:
mov     eax, [esi+40h]
test    eax, eax
jz      short loc_1000370D
push    eax             ; lpMem
call    sub_10004A9D
pop     ecx

loc_1000370D:
mov     eax, [esi+44h]
test    eax, eax
jz      short loc_1000371B
push    eax             ; lpMem
call    sub_10004A9D
pop     ecx

loc_1000371B:
mov     eax, [esi+50h]
cmp     eax, offset unk_10009690
jz      short loc_1000372C
push    eax             ; lpMem
call    sub_10004A9D
pop     ecx

loc_1000372C:           ; lpMem
push    esi
call    sub_10004A9D
pop     ecx

loc_10003733:           ; lpTlsValue
push    0
push    dwTlsIndex      ; dwTlsIndex
call    ds:TlsSetValue
pop     esi

locret_10003742:
retn
sub_100036A3 endp



; Attributes: bp-based frame

sub_10003743 proc near

StartupInfo= _STARTUPINFOA ptr -48h
var_4= dword ptr -4

push    ebp
mov     ebp, esp
sub     esp, 48h
push    ebx
push    esi
push    edi
push    480h
call    sub_10004B86
mov     esi, eax
pop     ecx
test    esi, esi
jnz     short loc_10003765
push    1Bh             ; NumberOfBytesWritten
call    sub_10002B44
pop     ecx

loc_10003765:
mov     dword_1000D2E0, esi
mov     uNumber, 20h
lea     eax, [esi+480h]

loc_1000377B:
cmp     esi, eax
jnb     short loc_1000379D
and     byte ptr [esi+4], 0
or      dword ptr [esi], 0FFFFFFFFh
and     dword ptr [esi+8], 0
mov     byte ptr [esi+5], 0Ah
mov     eax, dword_1000D2E0
add     esi, 24h
add     eax, 480h
jmp     short loc_1000377B

loc_1000379D:
lea     eax, [ebp+StartupInfo]
push    eax             ; lpStartupInfo
call    ds:GetStartupInfoA
cmp     [ebp+StartupInfo.cbReserved2], 0
jz      loc_10003883
mov     eax, [ebp+StartupInfo.lpReserved2]
test    eax, eax
jz      loc_10003883
mov     edi, [eax]
lea     ebx, [eax+4]
lea     eax, [ebx+edi]
mov     [ebp+var_4], eax
mov     eax, 800h
cmp     edi, eax
jl      short loc_100037D3
mov     edi, eax

loc_100037D3:
cmp     uNumber, edi
jge     short loc_10003831
mov     esi, offset unk_1000D2E4

loc_100037E0:
push    480h
call    sub_10004B86
test    eax, eax
pop     ecx
jz      short loc_1000382B
add     uNumber, 20h
mov     [esi], eax
lea     ecx, [eax+480h]

loc_100037FE:
cmp     eax, ecx
jnb     short loc_1000381E
and     byte ptr [eax+4], 0
or      dword ptr [eax], 0FFFFFFFFh
and     dword ptr [eax+8], 0
mov     byte ptr [eax+5], 0Ah
mov     ecx, [esi]
add     eax, 24h
add     ecx, 480h
jmp     short loc_100037FE

loc_1000381E:
add     esi, 4
cmp     uNumber, edi
jl      short loc_100037E0
jmp     short loc_10003831

loc_1000382B:
mov     edi, uNumber

loc_10003831:
xor     esi, esi
test    edi, edi
jle     short loc_10003883

loc_10003837:
mov     eax, [ebp+var_4]
mov     ecx, [eax]
cmp     ecx, 0FFFFFFFFh
jz      short loc_10003879
mov     al, [ebx]
test    al, 1
jz      short loc_10003879
test    al, 8
jnz     short loc_10003856
push    ecx             ; hFile
call    ds:GetFileType
test    eax, eax
jz      short loc_10003879

loc_10003856:
mov     ecx, esi
mov     eax, esi
sar     ecx, 5
and     eax, 1Fh
mov     ecx, dword_1000D2E0[ecx*4]
lea     eax, [eax+eax*8]
lea     eax, [ecx+eax*4]
mov     ecx, [ebp+var_4]
mov     ecx, [ecx]
mov     [eax], ecx
mov     cl, [ebx]
mov     [eax+4], cl

loc_10003879:
add     [ebp+var_4], 4
inc     esi
inc     ebx
cmp     esi, edi
jl      short loc_10003837

loc_10003883:
xor     ebx, ebx

loc_10003885:
mov     ecx, dword_1000D2E0
lea     eax, [ebx+ebx*8]
cmp     dword ptr [ecx+eax*4], 0FFFFFFFFh
lea     esi, [ecx+eax*4]
jnz     short loc_100038E4
test    ebx, ebx
mov     byte ptr [esi+4], 81h
jnz     short loc_100038A4
push    0FFFFFFF6h
pop     eax
jmp     short loc_100038AE

loc_100038A4:
mov     eax, ebx
dec     eax
neg     eax
sbb     eax, eax
add     eax, 0FFFFFFF5h

loc_100038AE:           ; nStdHandle
push    eax
call    ds:GetStdHandle
mov     edi, eax
cmp     edi, 0FFFFFFFFh
jz      short loc_100038D3
push    edi             ; hFile
call    ds:GetFileType
test    eax, eax
jz      short loc_100038D3
and     eax, 0FFh
mov     [esi], edi
cmp     eax, 2
jnz     short loc_100038D9

loc_100038D3:
or      byte ptr [esi+4], 40h
jmp     short loc_100038E8

loc_100038D9:
cmp     eax, 3
jnz     short loc_100038E8
or      byte ptr [esi+4], 8
jmp     short loc_100038E8

loc_100038E4:
or      byte ptr [esi+4], 80h

loc_100038E8:
inc     ebx
cmp     ebx, 3
jl      short loc_10003885
push    uNumber         ; uNumber
call    ds:SetHandleCount
pop     edi
pop     esi
pop     ebx
leave
retn
sub_10003743 endp




sub_100038FF proc near
push    ebx
push    esi
push    edi
mov     esi, offset dword_1000D2E0

loc_10003907:
mov     eax, [esi]
test    eax, eax
jz      short loc_10003944
mov     edi, eax
add     eax, 480h
cmp     edi, eax
jnb     short loc_10003939
lea     ebx, [edi+0Ch]

loc_1000391B:
cmp     dword ptr [ebx-4], 0
jz      short loc_10003928
push    ebx             ; lpCriticalSection
call    ds:DeleteCriticalSection

loc_10003928:
mov     eax, [esi]
add     edi, 24h
add     eax, 480h
add     ebx, 24h
cmp     edi, eax
jb      short loc_1000391B

loc_10003939:           ; lpMem
push    dword ptr [esi]
call    sub_10004A9D
and     dword ptr [esi], 0
pop     ecx

loc_10003944:
add     esi, 4
cmp     esi, offset uNumber
jl      short loc_10003907
pop     edi
pop     esi
pop     ebx
retn
sub_100038FF endp




sub_10003953 proc near
push    ebx
xor     ebx, ebx
cmp     dword_1000D3E8, ebx
push    esi
push    edi
jnz     short loc_10003965
call    sub_10005188

loc_10003965:
mov     esi, dword_1000BD14
xor     edi, edi

loc_1000396D:
mov     al, [esi]
cmp     al, bl
jz      short loc_10003985
cmp     al, 3Dh
jz      short loc_10003978
inc     edi

loc_10003978:
push    esi
call    sub_10004630
pop     ecx
lea     esi, [esi+eax+1]
jmp     short loc_1000396D

loc_10003985:
lea     eax, ds:4[edi*4]
push    eax
call    sub_10004B86
mov     esi, eax
pop     ecx
cmp     esi, ebx
mov     dword_1000BD44, esi
jnz     short loc_100039A7
push    9               ; NumberOfBytesWritten
call    sub_10002B44
pop     ecx

loc_100039A7:
mov     edi, dword_1000BD14
cmp     [edi], bl
jz      short loc_100039EA
push    ebp

loc_100039B2:
push    edi
call    sub_10004630
mov     ebp, eax
pop     ecx
inc     ebp
cmp     byte ptr [edi], 3Dh
jz      short loc_100039E3
push    ebp
call    sub_10004B86
cmp     eax, ebx
pop     ecx
mov     [esi], eax
jnz     short loc_100039D6
push    9               ; NumberOfBytesWritten
call    sub_10002B44
pop     ecx

loc_100039D6:
push    edi
push    dword ptr [esi]
call    sub_10004CC0
pop     ecx
add     esi, 4
pop     ecx

loc_100039E3:
add     edi, ebp
cmp     [edi], bl
jnz     short loc_100039B2
pop     ebp

loc_100039EA:           ; lpMem
push    dword_1000BD14
call    sub_10004A9D
pop     ecx
mov     dword_1000BD14, ebx
mov     [esi], ebx
pop     edi
pop     esi
mov     dword_1000D3E4, 1
pop     ebx
retn
sub_10003953 endp



; Attributes: bp-based frame

sub_10003A0C proc near

var_8= dword ptr -8
var_4= dword ptr -4

push    ebp
mov     ebp, esp
push    ecx
push    ecx
push    ebx
xor     ebx, ebx
cmp     dword_1000D3E8, ebx
push    esi
push    edi
jnz     short loc_10003A23
call    sub_10005188

loc_10003A23:
mov     esi, offset Filename
push    104h            ; nSize
push    esi             ; lpFilename
push    ebx             ; hModule
call    ds:GetModuleFileNameA
mov     eax, dword_1000D3F8
mov     dword_1000BD54, esi
mov     edi, esi
cmp     [eax], bl
jz      short loc_10003A48
mov     edi, eax

loc_10003A48:
lea     eax, [ebp+var_8]
push    eax
lea     eax, [ebp+var_4]
push    eax
push    ebx
push    ebx
push    edi
call    sub_10003AA5
mov     eax, [ebp+var_8]
mov     ecx, [ebp+var_4]
lea     eax, [eax+ecx*4]
push    eax
call    sub_10004B86
mov     esi, eax
add     esp, 18h
cmp     esi, ebx
jnz     short loc_10003A78
push    8               ; NumberOfBytesWritten
call    sub_10002B44
pop     ecx

loc_10003A78:
lea     eax, [ebp+var_8]
push    eax
lea     eax, [ebp+var_4]
push    eax
mov     eax, [ebp+var_4]
lea     eax, [esi+eax*4]
push    eax
push    esi
push    edi
call    sub_10003AA5
mov     eax, [ebp+var_4]
add     esp, 14h
dec     eax
mov     dword_1000BD3C, esi
pop     edi
pop     esi
mov     dword_1000BD38, eax
pop     ebx
leave
retn
sub_10003A0C endp



; Attributes: bp-based frame

sub_10003AA5 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h
arg_10= dword ptr  18h

push    ebp
mov     ebp, esp
mov     ecx, [ebp+arg_10]
mov     eax, [ebp+arg_C]
push    ebx
push    esi
and     dword ptr [ecx], 0
mov     esi, [ebp+arg_8]
push    edi
mov     edi, [ebp+arg_4]
mov     dword ptr [eax], 1
mov     eax, [ebp+arg_0]
test    edi, edi
jz      short loc_10003ACF
mov     [edi], esi
add     edi, 4
mov     [ebp+arg_4], edi

loc_10003ACF:
cmp     byte ptr [eax], 22h
jnz     short loc_10003B18

loc_10003AD4:
mov     dl, [eax+1]
inc     eax
cmp     dl, 22h
jz      short loc_10003B06
test    dl, dl
jz      short loc_10003B06
movzx   edx, dl
test    byte_1000C1A1[edx], 4
jz      short loc_10003AF9
inc     dword ptr [ecx]
test    esi, esi
jz      short loc_10003AF9
mov     dl, [eax]
mov     [esi], dl
inc     esi
inc     eax

loc_10003AF9:
inc     dword ptr [ecx]
test    esi, esi
jz      short loc_10003AD4
mov     dl, [eax]
mov     [esi], dl
inc     esi
jmp     short loc_10003AD4

loc_10003B06:
inc     dword ptr [ecx]
test    esi, esi
jz      short loc_10003B10
and     byte ptr [esi], 0
inc     esi

loc_10003B10:
cmp     byte ptr [eax], 22h
jnz     short loc_10003B5B
inc     eax
jmp     short loc_10003B5B

loc_10003B18:
inc     dword ptr [ecx]
test    esi, esi
jz      short loc_10003B23
mov     dl, [eax]
mov     [esi], dl
inc     esi

loc_10003B23:
mov     dl, [eax]
inc     eax
movzx   ebx, dl
test    byte_1000C1A1[ebx], 4
jz      short loc_10003B3E
inc     dword ptr [ecx]
test    esi, esi
jz      short loc_10003B3D
mov     bl, [eax]
mov     [esi], bl
inc     esi

loc_10003B3D:
inc     eax

loc_10003B3E:
cmp     dl, 20h
jz      short loc_10003B4C
test    dl, dl
jz      short loc_10003B50
cmp     dl, 9
jnz     short loc_10003B18

loc_10003B4C:
test    dl, dl
jnz     short loc_10003B53

loc_10003B50:
dec     eax
jmp     short loc_10003B5B

loc_10003B53:
test    esi, esi
jz      short loc_10003B5B
and     byte ptr [esi-1], 0

loc_10003B5B:
and     [ebp+arg_10], 0

loc_10003B5F:
cmp     byte ptr [eax], 0
jz      loc_10003C48

loc_10003B68:
mov     dl, [eax]
cmp     dl, 20h
jz      short loc_10003B74
cmp     dl, 9
jnz     short loc_10003B77

loc_10003B74:
inc     eax
jmp     short loc_10003B68

loc_10003B77:
cmp     byte ptr [eax], 0
jz      loc_10003C48
test    edi, edi
jz      short loc_10003B8C
mov     [edi], esi
add     edi, 4
mov     [ebp+arg_4], edi

loc_10003B8C:
mov     edx, [ebp+arg_C]
inc     dword ptr [edx]

loc_10003B91:
mov     [ebp+arg_0], 1
xor     ebx, ebx

loc_10003B9A:
cmp     byte ptr [eax], 5Ch
jnz     short loc_10003BA3
inc     eax
inc     ebx
jmp     short loc_10003B9A

loc_10003BA3:
cmp     byte ptr [eax], 22h
jnz     short loc_10003BD4
test    bl, 1
jnz     short loc_10003BD2
xor     edi, edi
cmp     [ebp+arg_10], edi
jz      short loc_10003BC1
cmp     byte ptr [eax+1], 22h
lea     edx, [eax+1]
jnz     short loc_10003BC1
mov     eax, edx
jmp     short loc_10003BC4

loc_10003BC1:
mov     [ebp+arg_0], edi

loc_10003BC4:
mov     edi, [ebp+arg_4]
xor     edx, edx
cmp     [ebp+arg_10], edx
setz    dl
mov     [ebp+arg_10], edx

loc_10003BD2:
shr     ebx, 1

loc_10003BD4:
mov     edx, ebx
dec     ebx
test    edx, edx
jz      short loc_10003BE9
inc     ebx

loc_10003BDC:
test    esi, esi
jz      short loc_10003BE4
mov     byte ptr [esi], 5Ch
inc     esi

loc_10003BE4:
inc     dword ptr [ecx]
dec     ebx
jnz     short loc_10003BDC

loc_10003BE9:
mov     dl, [eax]
test    dl, dl
jz      short loc_10003C39
cmp     [ebp+arg_10], 0
jnz     short loc_10003BFF
cmp     dl, 20h
jz      short loc_10003C39
cmp     dl, 9
jz      short loc_10003C39

loc_10003BFF:
cmp     [ebp+arg_0], 0
jz      short loc_10003C33
test    esi, esi
jz      short loc_10003C22
movzx   ebx, dl
test    byte_1000C1A1[ebx], 4
jz      short loc_10003C1B
mov     [esi], dl
inc     esi
inc     eax
inc     dword ptr [ecx]

loc_10003C1B:
mov     dl, [eax]
mov     [esi], dl
inc     esi
jmp     short loc_10003C31

loc_10003C22:
movzx   edx, dl
test    byte_1000C1A1[edx], 4
jz      short loc_10003C31
inc     eax
inc     dword ptr [ecx]

loc_10003C31:
inc     dword ptr [ecx]

loc_10003C33:
inc     eax
jmp     loc_10003B91

loc_10003C39:
test    esi, esi
jz      short loc_10003C41
and     byte ptr [esi], 0
inc     esi

loc_10003C41:
inc     dword ptr [ecx]
jmp     loc_10003B5F

loc_10003C48:
test    edi, edi
jz      short loc_10003C4F
and     dword ptr [edi], 0

loc_10003C4F:
mov     eax, [ebp+arg_C]
pop     edi
pop     esi
pop     ebx
inc     dword ptr [eax]
pop     ebp
retn
sub_10003AA5 endp




sub_10003C59 proc near

lpMem= dword ptr -8
cchWideChar= dword ptr -4

push    ecx
push    ecx
mov     eax, dword_1000BE6C
push    ebx
push    ebp
mov     ebp, ds:GetEnvironmentStringsW
push    esi
push    edi
xor     ebx, ebx
xor     esi, esi
xor     edi, edi
cmp     eax, ebx
jnz     short loc_10003CA7
call    ebp ; GetEnvironmentStringsW
mov     esi, eax
cmp     esi, ebx
jz      short loc_10003C88
mov     dword_1000BE6C, 1
jmp     short loc_10003CB0

loc_10003C88:
call    ds:GetEnvironmentStrings
mov     edi, eax
cmp     edi, ebx
jz      loc_10003D82
mov     dword_1000BE6C, 2
jmp     loc_10003D36

loc_10003CA7:
cmp     eax, 1
jnz     loc_10003D31

loc_10003CB0:
cmp     esi, ebx
jnz     short loc_10003CC0
call    ebp ; GetEnvironmentStringsW
mov     esi, eax
cmp     esi, ebx
jz      loc_10003D82

loc_10003CC0:
cmp     [esi], bx
mov     eax, esi
jz      short loc_10003CD5

loc_10003CC7:
inc     eax
inc     eax
cmp     [eax], bx
jnz     short loc_10003CC7
inc     eax
inc     eax
cmp     [eax], bx
jnz     short loc_10003CC7

loc_10003CD5:
sub     eax, esi
mov     edi, ds:WideCharToMultiByte
sar     eax, 1
push    ebx             ; lpUsedDefaultChar
push    ebx             ; lpDefaultChar
inc     eax
push    ebx             ; cbMultiByte
push    ebx             ; lpMultiByteStr
push    eax             ; cchWideChar
push    esi             ; lpWideCharStr
push    ebx             ; dwFlags
push    ebx             ; CodePage
mov     [esp+38h+cchWideChar], eax
call    edi ; WideCharToMultiByte
mov     ebp, eax
cmp     ebp, ebx
jz      short loc_10003D26
push    ebp
call    sub_10004B86
cmp     eax, ebx
pop     ecx
mov     [esp+18h+lpMem], eax
jz      short loc_10003D26
push    ebx             ; lpUsedDefaultChar
push    ebx             ; lpDefaultChar
push    ebp             ; cbMultiByte
push    eax             ; lpMultiByteStr
push    [esp+28h+cchWideChar] ; cchWideChar
push    esi             ; lpWideCharStr
push    ebx             ; dwFlags
push    ebx             ; CodePage
call    edi ; WideCharToMultiByte
test    eax, eax
jnz     short loc_10003D22
push    [esp+18h+lpMem] ; lpMem
call    sub_10004A9D
pop     ecx
mov     [esp+18h+lpMem], ebx

loc_10003D22:
mov     ebx, [esp+18h+lpMem]

loc_10003D26:           ; LPWCH
push    esi
call    ds:FreeEnvironmentStringsW
mov     eax, ebx
jmp     short loc_10003D84

loc_10003D31:
cmp     eax, 2
jnz     short loc_10003D82

loc_10003D36:
cmp     edi, ebx
jnz     short loc_10003D46
call    ds:GetEnvironmentStrings
mov     edi, eax
cmp     edi, ebx
jz      short loc_10003D82

loc_10003D46:
cmp     [edi], bl
mov     eax, edi
jz      short loc_10003D56

loc_10003D4C:
inc     eax
cmp     [eax], bl
jnz     short loc_10003D4C
inc     eax
cmp     [eax], bl
jnz     short loc_10003D4C

loc_10003D56:
sub     eax, edi
inc     eax
mov     ebp, eax
push    ebp
call    sub_10004B86
mov     esi, eax
pop     ecx
cmp     esi, ebx
jnz     short loc_10003D6C
xor     esi, esi
jmp     short loc_10003D77

loc_10003D6C:
push    ebp
push    edi
push    esi
call    sub_100051B0
add     esp, 0Ch

loc_10003D77:           ; LPCH
push    edi
call    ds:FreeEnvironmentStringsA
mov     eax, esi
jmp     short loc_10003D84

loc_10003D82:
xor     eax, eax

loc_10003D84:
pop     edi
pop     esi
pop     ebp
pop     ebx
pop     ecx
pop     ecx
retn
sub_10003C59 endp




sub_10003D8B proc near

arg_0= dword ptr  4

push    esi
mov     esi, [esp+4+arg_0]
push    0               ; lpModuleName
and     dword ptr [esi], 0
call    ds:GetModuleHandleA
cmp     word ptr [eax], 5A4Dh
jnz     short loc_10003DB6
mov     ecx, [eax+3Ch]
test    ecx, ecx
jz      short loc_10003DB6
add     eax, ecx
mov     cl, [eax+1Ah]
mov     [esi], cl
mov     al, [eax+1Bh]
mov     [esi+1], al

loc_10003DB6:
pop     esi
retn
sub_10003D8B endp



; Attributes: bp-based frame

sub_10003DB8 proc near

Buffer= byte ptr -122Ch
Filename= byte ptr -19Ch
VersionInformation= _OSVERSIONINFOA ptr -98h
var_4= byte ptr -4

push    ebp
mov     ebp, esp
mov     eax, 122Ch
call    __alloca_probe
lea     eax, [ebp+VersionInformation]
push    ebx
push    eax             ; lpVersionInformation
mov     [ebp+VersionInformation.dwOSVersionInfoSize], 94h
call    ds:GetVersionExA
test    eax, eax
jz      short loc_10003DFB
cmp     [ebp+VersionInformation.dwPlatformId], 2
jnz     short loc_10003DFB
cmp     [ebp+VersionInformation.dwMajorVersion], 5
jb      short loc_10003DFB
push    1
pop     eax
jmp     loc_10003EFD

loc_10003DFB:
lea     eax, [ebp+Buffer]
push    1090h           ; nSize
push    eax             ; lpBuffer
push    offset Name     ; "__MSVCRT_HEAP_SELECT"
call    ds:GetEnvironmentVariableA
test    eax, eax
jz      loc_10003EEA
xor     ebx, ebx
lea     ecx, [ebp+Buffer]
cmp     [ebp+Buffer], bl
jz      short loc_10003E3D

loc_10003E2A:
mov     al, [ecx]
cmp     al, 61h
jl      short loc_10003E38
cmp     al, 7Ah
jg      short loc_10003E38
sub     al, 20h
mov     [ecx], al

loc_10003E38:
inc     ecx
cmp     [ecx], bl
jnz     short loc_10003E2A

loc_10003E3D:
lea     eax, [ebp+Buffer]
push    16h
push    eax
push    offset aGlobalHeapSele ; "__GLOBAL_HEAP_SELECTED"
call    sub_10005860
add     esp, 0Ch
test    eax, eax
jnz     short loc_10003E5F
lea     eax, [ebp+Buffer]
jmp     short loc_10003EA8

loc_10003E5F:
lea     eax, [ebp+Filename]
push    104h            ; nSize
push    eax             ; lpFilename
push    ebx             ; hModule
call    ds:GetModuleFileNameA
cmp     [ebp+Filename], bl
lea     ecx, [ebp+Filename]
jz      short loc_10003E93

loc_10003E80:
mov     al, [ecx]
cmp     al, 61h
jl      short loc_10003E8E
cmp     al, 7Ah
jg      short loc_10003E8E
sub     al, 20h
mov     [ecx], al

loc_10003E8E:
inc     ecx
cmp     [ecx], bl
jnz     short loc_10003E80

loc_10003E93:
lea     eax, [ebp+Filename]
push    eax
lea     eax, [ebp+Buffer]
push    eax
call    sub_100057E0
pop     ecx
pop     ecx

loc_10003EA8:
cmp     eax, ebx
jz      short loc_10003EEA
push    2Ch
push    eax
call    sub_10005720
pop     ecx
cmp     eax, ebx
pop     ecx
jz      short loc_10003EEA
inc     eax
mov     ecx, eax
cmp     [eax], bl
jz      short loc_10003ECF

loc_10003EC1:
cmp     byte ptr [ecx], 3Bh
jnz     short loc_10003ECA
mov     [ecx], bl
jmp     short loc_10003ECB

loc_10003ECA:
inc     ecx

loc_10003ECB:
cmp     [ecx], bl
jnz     short loc_10003EC1

loc_10003ECF:
push    0Ah
push    ebx
push    eax
call    sub_100054E5
add     esp, 0Ch
cmp     eax, 2
jz      short loc_10003EFD
cmp     eax, 3
jz      short loc_10003EFD
cmp     eax, 1
jz      short loc_10003EFD

loc_10003EEA:
lea     eax, [ebp+var_4]
push    eax
call    sub_10003D8B
cmp     [ebp+var_4], 6
pop     ecx
sbb     eax, eax
add     eax, 3

loc_10003EFD:
pop     ebx
leave
retn
sub_10003DB8 endp




sub_10003F00 proc near

arg_0= dword ptr  4

xor     eax, eax
push    0               ; dwMaximumSize
cmp     [esp+4+arg_0], eax
push    1000h           ; dwInitialSize
setz    al
push    eax             ; flOptions
call    ds:HeapCreate
test    eax, eax
mov     hHeap, eax
jz      short loc_10003F56
call    sub_10003DB8
cmp     eax, 3
mov     dword_1000D2C8, eax
jnz     short loc_10003F3C
push    3F8h
call    sub_100058CF
pop     ecx
jmp     short loc_10003F46

loc_10003F3C:
cmp     eax, 2
jnz     short loc_10003F59
call    sub_10006120

loc_10003F46:
test    eax, eax
jnz     short loc_10003F59
push    hHeap           ; hHeap
call    ds:HeapDestroy

loc_10003F56:
xor     eax, eax
retn

loc_10003F59:
push    1
pop     eax
retn
sub_10003F00 endp




sub_10003F5D proc near
mov     eax, dword_1000D2C8
push    esi
cmp     eax, 3
push    edi
jnz     short loc_10003FCF
push    ebx
xor     ebx, ebx
cmp     dword_1000C080, ebx
push    ebp
mov     ebp, ds:HeapFree
jle     short loc_10003FBB
mov     eax, lpMem
mov     edi, ds:VirtualFree
lea     esi, [eax+0Ch]

loc_10003F89:           ; dwFreeType
push    4000h
push    100000h         ; dwSize
push    dword ptr [esi] ; lpAddress
call    edi ; VirtualFree
push    8000h           ; dwFreeType
push    0               ; dwSize
push    dword ptr [esi] ; lpAddress
call    edi ; VirtualFree
push    dword ptr [esi+4] ; lpMem
push    0               ; dwFlags
push    hHeap           ; hHeap
call    ebp ; HeapFree
add     esi, 14h
inc     ebx
cmp     ebx, dword_1000C080
jl      short loc_10003F89

loc_10003FBB:           ; lpMem
push    lpMem
push    0               ; dwFlags
push    hHeap           ; hHeap
call    ebp ; HeapFree
pop     ebp
pop     ebx
jmp     short loc_10003FF6

loc_10003FCF:
cmp     eax, 2
jnz     short loc_10003FF6
mov     edi, offset off_10009820
mov     esi, edi

loc_10003FDB:
mov     eax, [esi+10h]
test    eax, eax
jz      short loc_10003FF0
push    8000h           ; dwFreeType
push    0               ; dwSize
push    eax             ; lpAddress
call    ds:VirtualFree

loc_10003FF0:
mov     esi, [esi]
cmp     esi, edi
jnz     short loc_10003FDB

loc_10003FF6:           ; hHeap
push    hHeap
call    ds:HeapDestroy
pop     edi
pop     esi
retn
sub_10003F5D endp




sub_10004005 proc near
push    1
pop     eax
retn    0Ch
sub_10004005 endp




sub_1000400B proc near
mov     eax, dword_1000BD1C
cmp     eax, 1
jz      short loc_10004022
test    eax, eax
jnz     short locret_10004043
cmp     dword_1000BD20, 1
jnz     short locret_10004043

loc_10004022:           ; NumberOfBytesWritten
push    0FCh
call    sub_10004044
mov     eax, dword_1000BE70
pop     ecx
test    eax, eax
jz      short loc_10004038
call    eax ; dword_1000BE70

loc_10004038:           ; NumberOfBytesWritten
push    0FFh
call    sub_10004044
pop     ecx

locret_10004043:
retn
sub_1000400B endp



; Attributes: bp-based frame

; int __cdecl sub_10004044(DWORD NumberOfBytesWritten)
sub_10004044 proc near

Filename= byte ptr -1A4h
var_A0= byte ptr -0A0h
NumberOfBytesWritten= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 1A4h
mov     edx, [ebp+NumberOfBytesWritten]
xor     ecx, ecx
mov     eax, offset dword_10009090

loc_10004057:
cmp     edx, [eax]
jz      short loc_10004066
add     eax, 8
inc     ecx
cmp     eax, offset off_10009120
jl      short loc_10004057

loc_10004066:
push    esi
mov     esi, ecx
shl     esi, 3
cmp     edx, dword_10009090[esi]
jnz     loc_10004194
mov     eax, dword_1000BD1C
cmp     eax, 1
jz      loc_1000416E
test    eax, eax
jnz     short loc_10004097
cmp     dword_1000BD20, 1
jz      loc_1000416E

loc_10004097:
cmp     edx, 0FCh
jz      loc_10004194
lea     eax, [ebp+Filename]
push    104h            ; nSize
push    eax             ; lpFilename
push    0               ; hModule
call    ds:GetModuleFileNameA
test    eax, eax
jnz     short loc_100040CE
lea     eax, [ebp+Filename]
push    offset aProgramNameUnk ; "<program name unknown>"
push    eax
call    sub_10004CC0
pop     ecx
pop     ecx

loc_100040CE:
lea     eax, [ebp+Filename]
push    edi
push    eax
lea     edi, [ebp+Filename]
call    sub_10004630
inc     eax
pop     ecx
cmp     eax, 3Ch
jbe     short loc_10004111
lea     eax, [ebp+Filename]
push    eax
call    sub_10004630
mov     edi, eax
lea     eax, [ebp+Filename]
sub     eax, 3Bh
push    3
add     edi, eax
push    offset asc_100084C8 ; "..."
push    edi
call    sub_100067D0
add     esp, 10h

loc_10004111:
lea     eax, [ebp+var_A0]
push    offset aRuntimeErrorPr ; "Runtime Error!\n\nProgram: "
push    eax
call    sub_10004CC0
lea     eax, [ebp+var_A0]
push    edi
push    eax
call    sub_10004CD0
lea     eax, [ebp+var_A0]
push    offset asc_100084A8 ; "\n\n"
push    eax
call    sub_10004CD0
push    off_10009094[esi]
lea     eax, [ebp+var_A0]
push    eax
call    sub_10004CD0
push    12010h
lea     eax, [ebp+var_A0]
push    offset aMicrosoftVisua ; "Microsoft Visual C++ Runtime Library"
push    eax
call    sub_10006744
add     esp, 2Ch
pop     edi
jmp     short loc_10004194

loc_1000416E:
lea     eax, [ebp+NumberOfBytesWritten]
lea     esi, off_10009094[esi]
push    0               ; lpOverlapped
push    eax             ; lpNumberOfBytesWritten
push    dword ptr [esi]
call    sub_10004630
pop     ecx
push    eax             ; nNumberOfBytesToWrite
push    dword ptr [esi] ; lpBuffer
push    0FFFFFFF4h      ; nStdHandle
call    ds:GetStdHandle
push    eax             ; hFile
call    ds:WriteFile

loc_10004194:
pop     esi
leave
retn
sub_10004044 endp




sub_10004197 proc near

arg_0= dword ptr  4
lDistanceToMove= dword ptr  8
dwMoveMethod= dword ptr  0Ch

push    esi
mov     esi, [esp+4+arg_0]
cmp     esi, uNumber
jnb     short loc_100041E4
mov     ecx, esi
mov     eax, esi
sar     ecx, 5
and     eax, 1Fh
mov     ecx, dword_1000D2E0[ecx*4]
lea     eax, [eax+eax*8]
test    byte ptr [ecx+eax*4+4], 1
jz      short loc_100041E4
push    edi
push    esi
call    sub_10006A14
push    [esp+0Ch+dwMoveMethod] ; dwMoveMethod
push    [esp+10h+lDistanceToMove] ; lDistanceToMove
push    esi             ; int
call    sub_100041FC
push    esi
mov     edi, eax
call    sub_10006A73
add     esp, 14h
mov     eax, edi
pop     edi
pop     esi
retn

loc_100041E4:
call    sub_10006941
mov     dword ptr [eax], 9
call    sub_1000694A
and     dword ptr [eax], 0
or      eax, 0FFFFFFFFh
pop     esi
retn
sub_10004197 endp




; int __cdecl sub_100041FC(int, LONG lDistanceToMove, DWORD dwMoveMethod)
sub_100041FC proc near

arg_0= dword ptr  4
lDistanceToMove= dword ptr  8
dwMoveMethod= dword ptr  0Ch

push    esi
mov     esi, [esp+4+arg_0]
push    edi
push    esi
call    sub_100069D2
cmp     eax, 0FFFFFFFFh
pop     ecx
jnz     short loc_1000421B
call    sub_10006941
mov     dword ptr [eax], 9
jmp     short loc_10004248

loc_1000421B:           ; dwMoveMethod
push    [esp+8+dwMoveMethod]
push    0               ; lpDistanceToMoveHigh
push    [esp+10h+lDistanceToMove] ; lDistanceToMove
push    eax             ; hFile
call    ds:SetFilePointer
mov     edi, eax
cmp     edi, 0FFFFFFFFh
jnz     short loc_1000423B
call    ds:GetLastError
jmp     short loc_1000423D

loc_1000423B:
xor     eax, eax

loc_1000423D:
test    eax, eax
jz      short loc_1000424D
push    eax
call    sub_100068CE
pop     ecx

loc_10004248:
or      eax, 0FFFFFFFFh
jmp     short loc_1000426C

loc_1000424D:
mov     ecx, esi
and     esi, 1Fh
sar     ecx, 5
mov     eax, esi
mov     ecx, dword_1000D2E0[ecx*4]
lea     eax, [eax+eax*8]
and     byte ptr [ecx+eax*4+4], 0FDh
lea     eax, [ecx+eax*4+4]
mov     eax, edi

loc_1000426C:
pop     edi
pop     esi
retn
sub_100041FC endp




sub_1000426F proc near

arg_0= dword ptr  4
lpBuffer= dword ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch

push    esi
mov     esi, [esp+4+arg_0]
cmp     esi, uNumber
jnb     short loc_100042BC
mov     ecx, esi
mov     eax, esi
sar     ecx, 5
and     eax, 1Fh
mov     ecx, dword_1000D2E0[ecx*4]
lea     eax, [eax+eax*8]
test    byte ptr [ecx+eax*4+4], 1
jz      short loc_100042BC
push    edi
push    esi
call    sub_10006A14
push    [esp+0Ch+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
push    [esp+10h+lpBuffer] ; lpBuffer
push    esi             ; int
call    sub_100042D4
push    esi
mov     edi, eax
call    sub_10006A73
add     esp, 14h
mov     eax, edi
pop     edi
pop     esi
retn

loc_100042BC:
call    sub_10006941
mov     dword ptr [eax], 9
call    sub_1000694A
and     dword ptr [eax], 0
or      eax, 0FFFFFFFFh
pop     esi
retn
sub_1000426F endp



; Attributes: bp-based frame

; int __cdecl sub_100042D4(int, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite)
sub_100042D4 proc near

Buffer= byte ptr -414h
var_10= dword ptr -10h
NumberOfBytesWritten= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
lpBuffer= dword ptr  0Ch
nNumberOfBytesToWrite= dword ptr  10h

push    ebp
mov     ebp, esp
sub     esp, 414h
push    ebx
push    esi
push    edi
xor     edi, edi
cmp     [ebp+nNumberOfBytesToWrite], edi
mov     [ebp+var_8], edi
mov     [ebp+var_10], edi
jnz     short loc_100042F4

loc_100042ED:
xor     eax, eax
jmp     loc_1000445A

loc_100042F4:
mov     eax, [ebp+arg_0]
sar     eax, 5
lea     ebx, dword_1000D2E0[eax*4]
mov     eax, [ebp+arg_0]
and     eax, 1Fh
lea     esi, [eax+eax*8]
mov     eax, [ebx]
shl     esi, 2
test    byte ptr [eax+esi+4], 20h
jz      short loc_10004324
push    2               ; dwMoveMethod
push    edi             ; lDistanceToMove
push    [ebp+arg_0]     ; int
call    sub_100041FC
add     esp, 0Ch

loc_10004324:
mov     eax, [ebx]
add     eax, esi
test    byte ptr [eax+4], 80h
jz      loc_100043F3
mov     eax, [ebp+lpBuffer]
cmp     [ebp+nNumberOfBytesToWrite], edi
mov     [ebp+var_4], eax
mov     [ebp+arg_0], edi
jbe     loc_1000442E

loc_10004344:
lea     eax, [ebp+Buffer]

loc_1000434A:
mov     ecx, [ebp+var_4]
sub     ecx, [ebp+lpBuffer]
cmp     ecx, [ebp+nNumberOfBytesToWrite]
jnb     short loc_1000437E
mov     ecx, [ebp+var_4]
inc     [ebp+var_4]
mov     cl, [ecx]
cmp     cl, 0Ah
jnz     short loc_10004369
inc     [ebp+var_10]
mov     byte ptr [eax], 0Dh
inc     eax

loc_10004369:
mov     [eax], cl
inc     eax
mov     ecx, eax
lea     edx, [ebp+Buffer]
sub     ecx, edx
cmp     ecx, 400h
jl      short loc_1000434A

loc_1000437E:
mov     edi, eax
lea     eax, [ebp+Buffer]
sub     edi, eax
lea     eax, [ebp+NumberOfBytesWritten]
push    0               ; lpOverlapped
push    eax             ; lpNumberOfBytesWritten
lea     eax, [ebp+Buffer]
push    edi             ; nNumberOfBytesToWrite
push    eax             ; lpBuffer
mov     eax, [ebx]
push    dword ptr [eax+esi] ; hFile
call    ds:WriteFile
test    eax, eax
jz      short loc_100043E8
mov     eax, [ebp+NumberOfBytesWritten]
add     [ebp+var_8], eax
cmp     eax, edi
jl      short loc_100043BA
mov     eax, [ebp+var_4]
sub     eax, [ebp+lpBuffer]
cmp     eax, [ebp+nNumberOfBytesToWrite]
jb      short loc_10004344

loc_100043BA:
xor     edi, edi

loc_100043BC:
mov     eax, [ebp+var_8]
cmp     eax, edi
jnz     loc_10004457
cmp     [ebp+arg_0], edi
jz      short loc_1000442E
push    5
pop     esi
cmp     [ebp+arg_0], esi
jnz     short loc_10004420
call    sub_10006941
mov     dword ptr [eax], 9
call    sub_1000694A
mov     [eax], esi
jmp     short loc_10004429

loc_100043E8:
call    ds:GetLastError
mov     [ebp+arg_0], eax
jmp     short loc_100043BA

loc_100043F3:
lea     ecx, [ebp+NumberOfBytesWritten]
push    edi             ; lpOverlapped
push    ecx             ; lpNumberOfBytesWritten
push    [ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
push    [ebp+lpBuffer]  ; lpBuffer
push    dword ptr [eax] ; hFile
call    ds:WriteFile
test    eax, eax
jz      short loc_10004415
mov     eax, [ebp+NumberOfBytesWritten]
mov     [ebp+arg_0], edi
mov     [ebp+var_8], eax
jmp     short loc_100043BC

loc_10004415:
call    ds:GetLastError
mov     [ebp+arg_0], eax
jmp     short loc_100043BC

loc_10004420:
push    [ebp+arg_0]
call    sub_100068CE
pop     ecx

loc_10004429:
or      eax, 0FFFFFFFFh
jmp     short loc_1000445A

loc_1000442E:
mov     eax, [ebx]
test    byte ptr [eax+esi+4], 40h
jz      short loc_10004443
mov     eax, [ebp+lpBuffer]
cmp     byte ptr [eax], 1Ah
jz      loc_100042ED

loc_10004443:
call    sub_10006941
mov     dword ptr [eax], 1Ch
call    sub_1000694A
mov     [eax], edi
jmp     short loc_10004429

loc_10004457:
sub     eax, [ebp+var_10]

loc_1000445A:
pop     edi
pop     esi
pop     ebx
leave
retn
sub_100042D4 endp




sub_1000445F proc near

arg_0= dword ptr  4

inc     dword_1000BE74
push    1000h
call    sub_10004B86
pop     ecx
mov     ecx, [esp+arg_0]
test    eax, eax
mov     [ecx+8], eax
jz      short loc_10004488
or      dword ptr [ecx+0Ch], 8
mov     dword ptr [ecx+18h], 1000h
jmp     short loc_10004499

loc_10004488:
or      dword ptr [ecx+0Ch], 4
lea     eax, [ecx+14h]
mov     [ecx+8], eax
mov     dword ptr [ecx+18h], 2

loc_10004499:
mov     eax, [ecx+8]
and     dword ptr [ecx+4], 0
mov     [ecx], eax
retn
sub_1000445F endp




sub_100044A3 proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
cmp     eax, uNumber
jb      short loc_100044B2
xor     eax, eax
retn

loc_100044B2:
mov     ecx, eax
and     eax, 1Fh
sar     ecx, 5
lea     eax, [eax+eax*8]
mov     ecx, dword_1000D2E0[ecx*4]
mov     al, [ecx+eax*4+4]
and     eax, 40h
retn
sub_100044A3 endp




sub_100044CC proc near
mov     eax, dword_1000D2C0
push    esi
push    14h
test    eax, eax
pop     esi
jnz     short loc_100044E0
mov     eax, 200h
jmp     short loc_100044E6

loc_100044E0:
cmp     eax, esi
jge     short loc_100044EB
mov     eax, esi

loc_100044E6:
mov     dword_1000D2C0, eax

loc_100044EB:
push    4
push    eax
call    sub_10004960
pop     ecx
mov     dword_1000C2A8, eax
test    eax, eax
pop     ecx
jnz     short loc_1000451F
push    4
push    esi
mov     dword_1000D2C0, esi
call    sub_10004960
pop     ecx
mov     dword_1000C2A8, eax
test    eax, eax
pop     ecx
jnz     short loc_1000451F
push    1Ah             ; NumberOfBytesWritten
call    sub_10002B44
pop     ecx

loc_1000451F:
xor     ecx, ecx
mov     eax, offset off_10009120

loc_10004526:
mov     edx, dword_1000C2A8
mov     [ecx+edx], eax
add     eax, 20h
add     ecx, 4
cmp     eax, offset off_100093A0
jl      short loc_10004526
xor     ecx, ecx
mov     edx, offset unk_10009130

loc_10004543:
mov     esi, ecx
mov     eax, ecx
sar     esi, 5
and     eax, 1Fh
mov     esi, dword_1000D2E0[esi*4]
lea     eax, [eax+eax*8]
mov     eax, [esi+eax*4]
cmp     eax, 0FFFFFFFFh
jz      short loc_10004563
test    eax, eax
jnz     short loc_10004566

loc_10004563:
or      dword ptr [edx], 0FFFFFFFFh

loc_10004566:
add     edx, 20h
inc     ecx
cmp     edx, offset unk_10009190
jl      short loc_10004543
pop     esi
retn
sub_100044CC endp




sub_10004574 proc near

; FUNCTION CHUNK AT 10006A95 SIZE 00000081 BYTES

call    sub_10006BA0
cmp     byte_1000BD5C, 0
jz      short locret_10004587
jmp     loc_10006A95

locret_10004587:
retn
sub_10004574 endp




sub_10004588 proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
mov     ecx, offset off_10009120
cmp     eax, ecx
jb      short loc_100045AC
cmp     eax, offset unk_10009380
ja      short loc_100045AC
sub     eax, ecx
sar     eax, 5
add     eax, 1Ch
push    eax
call    sub_100048EA
pop     ecx
retn

loc_100045AC:
add     eax, 20h
push    eax             ; lpCriticalSection
call    ds:EnterCriticalSection
retn
sub_10004588 endp




sub_100045B7 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     eax, [esp+arg_0]
cmp     eax, 14h
jge     short loc_100045CB
add     eax, 1Ch
push    eax
call    sub_100048EA
pop     ecx
retn

loc_100045CB:
mov     eax, [esp+arg_4]
add     eax, 20h
push    eax             ; lpCriticalSection
call    ds:EnterCriticalSection
retn
sub_100045B7 endp




sub_100045DA proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
mov     ecx, offset off_10009120
cmp     eax, ecx
jb      short loc_100045FE
cmp     eax, offset unk_10009380
ja      short loc_100045FE
sub     eax, ecx
sar     eax, 5
add     eax, 1Ch
push    eax
call    sub_1000494B
pop     ecx
retn

loc_100045FE:
add     eax, 20h
push    eax             ; lpCriticalSection
call    ds:LeaveCriticalSection
retn
sub_100045DA endp




sub_10004609 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     eax, [esp+arg_0]
cmp     eax, 14h
jge     short loc_1000461D
add     eax, 1Ch
push    eax
call    sub_1000494B
pop     ecx
retn

loc_1000461D:
mov     eax, [esp+arg_4]
add     eax, 20h
push    eax             ; lpCriticalSection
call    ds:LeaveCriticalSection
retn
sub_10004609 endp

align 10h



sub_10004630 proc near

arg_0= dword ptr  4

mov     ecx, [esp+arg_0]
test    ecx, 3
jz      short loc_10004650

loc_1000463C:
mov     al, [ecx]
inc     ecx
test    al, al
jz      short loc_10004683
test    ecx, 3
jnz     short loc_1000463C
add     eax, 0

loc_10004650:
mov     eax, [ecx]
mov     edx, 7EFEFEFFh
add     edx, eax
xor     eax, 0FFFFFFFFh
xor     eax, edx
add     ecx, 4
test    eax, 81010100h
jz      short loc_10004650
mov     eax, [ecx-4]
test    al, al
jz      short loc_100046A1
test    ah, ah
jz      short loc_10004697
test    eax, 0FF0000h
jz      short loc_1000468D
test    eax, 0FF000000h
jz      short loc_10004683
jmp     short loc_10004650

loc_10004683:
lea     eax, [ecx-1]
mov     ecx, [esp+arg_0]
sub     eax, ecx
retn

loc_1000468D:
lea     eax, [ecx-2]
mov     ecx, [esp+arg_0]
sub     eax, ecx
retn

loc_10004697:
lea     eax, [ecx-3]
mov     ecx, [esp+arg_0]
sub     eax, ecx
retn

loc_100046A1:
lea     eax, [ecx-4]
mov     ecx, [esp+arg_0]
sub     eax, ecx
retn
sub_10004630 endp



; Attributes: bp-based frame

sub_100046AB proc near

lpMultiByteStr= dword ptr  8
WideCharStr= word ptr  0Ch

push    ebp
mov     ebp, esp
push    ebx
push    esi
mov     esi, offset Addend
push    edi
push    esi             ; lpAddend
call    ds:InterlockedIncrement
mov     edi, ds:InterlockedDecrement
xor     ebx, ebx
cmp     dword_1000C068, ebx
jz      short loc_100046DB
push    esi             ; lpAddend
call    edi ; InterlockedDecrement
push    13h
call    sub_100048EA
pop     ecx
push    1
pop     ebx

loc_100046DB:           ; WideCharStr
push    dword ptr [ebp+WideCharStr]
push    [ebp+lpMultiByteStr] ; lpMultiByteStr
call    sub_10004704
pop     ecx
mov     dword ptr [ebp+WideCharStr], eax
test    ebx, ebx
pop     ecx
jz      short loc_100046F9
push    13h
call    sub_1000494B
pop     ecx
jmp     short loc_100046FC

loc_100046F9:           ; lpAddend
push    esi
call    edi ; InterlockedDecrement

loc_100046FC:
mov     eax, dword ptr [ebp+WideCharStr]
pop     edi
pop     esi
pop     ebx
pop     ebp
retn
sub_100046AB endp



; Attributes: bp-based frame

; int __cdecl sub_10004704(LPSTR lpMultiByteStr, WCHAR WideCharStr)
sub_10004704 proc near

lpMultiByteStr= dword ptr  8
WideCharStr= word ptr  0Ch

push    ebp
mov     ebp, esp
mov     eax, [ebp+lpMultiByteStr]
test    eax, eax
jnz     short loc_10004710
pop     ebp
retn

loc_10004710:
cmp     dword_1000BF00, 0
jnz     short loc_1000472B
mov     cx, [ebp+WideCharStr]
cmp     cx, 0FFh
ja      short loc_1000475D
push    1
mov     [eax], cl
pop     eax
pop     ebp
retn

loc_1000472B:
lea     ecx, [ebp+lpMultiByteStr]
and     [ebp+lpMultiByteStr], 0
push    ecx             ; lpUsedDefaultChar
push    0               ; lpDefaultChar
push    cbMultiByte     ; cbMultiByte
push    eax             ; lpMultiByteStr
lea     eax, [ebp+WideCharStr]
push    1               ; cchWideChar
push    eax             ; lpWideCharStr
push    220h            ; dwFlags
push    CodePage        ; CodePage
call    ds:WideCharToMultiByte
test    eax, eax
jz      short loc_1000475D
cmp     [ebp+lpMultiByteStr], 0
jz      short loc_1000476B

loc_1000475D:
call    sub_10006941
mov     dword ptr [eax], 2Ah
or      eax, 0FFFFFFFFh

loc_1000476B:
pop     ebp
retn
sub_10004704 endp

align 10h



sub_10004770 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch
arg_C= dword ptr  10h

push    ebx
push    esi
mov     eax, [esp+8+arg_C]
or      eax, eax
jnz     short loc_10004792
mov     ecx, [esp+8+arg_8]
mov     eax, [esp+8+arg_4]
xor     edx, edx
div     ecx
mov     ebx, eax
mov     eax, [esp+8+arg_0]
div     ecx
mov     edx, ebx
jmp     short loc_100047D3

loc_10004792:
mov     ecx, eax
mov     ebx, [esp+8+arg_8]
mov     edx, [esp+8+arg_4]
mov     eax, [esp+8+arg_0]

loc_100047A0:
shr     ecx, 1
rcr     ebx, 1
shr     edx, 1
rcr     eax, 1
or      ecx, ecx
jnz     short loc_100047A0
div     ebx
mov     esi, eax
mul     [esp+8+arg_C]
mov     ecx, eax
mov     eax, [esp+8+arg_8]
mul     esi
add     edx, ecx
jb      short loc_100047CE
cmp     edx, [esp+8+arg_4]
ja      short loc_100047CE
jb      short loc_100047CF
cmp     eax, [esp+8+arg_0]
jbe     short loc_100047CF

loc_100047CE:
dec     esi

loc_100047CF:
xor     edx, edx
mov     eax, esi

loc_100047D3:
pop     esi
pop     ebx
retn    10h
sub_10004770 endp

align 10h



sub_100047E0 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch
arg_C= dword ptr  10h

push    ebx
mov     eax, [esp+4+arg_C]
or      eax, eax
jnz     short loc_10004801
mov     ecx, [esp+4+arg_8]
mov     eax, [esp+4+arg_4]
xor     edx, edx
div     ecx
mov     eax, [esp+4+arg_0]
div     ecx
mov     eax, edx
xor     edx, edx
jmp     short loc_10004851

loc_10004801:
mov     ecx, eax
mov     ebx, [esp+4+arg_8]
mov     edx, [esp+4+arg_4]
mov     eax, [esp+4+arg_0]

loc_1000480F:
shr     ecx, 1
rcr     ebx, 1
shr     edx, 1
rcr     eax, 1
or      ecx, ecx
jnz     short loc_1000480F
div     ebx
mov     ecx, eax
mul     [esp+4+arg_C]
xchg    eax, ecx
mul     [esp+4+arg_8]
add     edx, ecx
jb      short loc_1000483A
cmp     edx, [esp+4+arg_4]
ja      short loc_1000483A
jb      short loc_10004842
cmp     eax, [esp+4+arg_0]
jbe     short loc_10004842

loc_1000483A:
sub     eax, [esp+4+arg_8]
sbb     edx, [esp+4+arg_C]

loc_10004842:
sub     eax, [esp+4+arg_0]
sbb     edx, [esp+4+arg_4]
neg     edx
neg     eax
sbb     edx, 0

loc_10004851:
pop     ebx
retn    10h
sub_100047E0 endp




sub_10004855 proc near
push    esi
mov     esi, ds:InitializeCriticalSection
push    lpCriticalSection ; lpCriticalSection
call    esi ; InitializeCriticalSection
push    off_10009604    ; lpCriticalSection
call    esi ; InitializeCriticalSection
push    off_100095F4    ; lpCriticalSection
call    esi ; InitializeCriticalSection
push    off_100095D4    ; lpCriticalSection
call    esi ; InitializeCriticalSection
pop     esi
retn
sub_10004855 endp




sub_1000487E proc near
push    esi
push    edi
mov     edi, ds:DeleteCriticalSection
mov     esi, offset dword_100095D0

loc_1000488B:
mov     eax, [esi]
test    eax, eax
jz      short loc_100048BC
cmp     esi, offset lpCriticalSection
jz      short loc_100048BC
cmp     esi, offset off_10009604
jz      short loc_100048BC
cmp     esi, offset off_100095F4
jz      short loc_100048BC
cmp     esi, offset off_100095D4
jz      short loc_100048BC
push    eax             ; lpCriticalSection
call    edi ; DeleteCriticalSection
push    dword ptr [esi] ; lpMem
call    sub_10004A9D
pop     ecx

loc_100048BC:
add     esi, 4
cmp     esi, offset unk_10009690
jl      short loc_1000488B
push    off_100095F4    ; lpCriticalSection
call    edi ; DeleteCriticalSection
push    off_10009604    ; lpCriticalSection
call    edi ; DeleteCriticalSection
push    lpCriticalSection ; lpCriticalSection
call    edi ; DeleteCriticalSection
push    off_100095D4    ; lpCriticalSection
call    edi ; DeleteCriticalSection
pop     edi
pop     esi
retn
sub_1000487E endp



; Attributes: bp-based frame

sub_100048EA proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
push    esi
cmp     dword_100095D0[eax*4], 0
lea     esi, dword_100095D0[eax*4]
jnz     short loc_10004940
push    edi
push    18h
call    sub_10004B86
mov     edi, eax
pop     ecx
test    edi, edi
jnz     short loc_10004919
push    11h             ; NumberOfBytesWritten
call    sub_10002B44
pop     ecx

loc_10004919:
push    11h
call    sub_100048EA
cmp     dword ptr [esi], 0
pop     ecx
push    edi             ; lpMem
jnz     short loc_10004931
call    ds:InitializeCriticalSection
mov     [esi], edi
jmp     short loc_10004937

loc_10004931:
call    sub_10004A9D
pop     ecx

loc_10004937:
push    11h
call    sub_1000494B
pop     ecx
pop     edi

loc_10004940:           ; lpCriticalSection
push    dword ptr [esi]
call    ds:EnterCriticalSection
pop     esi
pop     ebp
retn
sub_100048EA endp



; Attributes: bp-based frame

sub_1000494B proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
push    dword_100095D0[eax*4] ; lpCriticalSection
call    ds:LeaveCriticalSection
pop     ebp
retn
sub_1000494B endp



; Attributes: bp-based frame

sub_10004960 proc near

var_20= dword ptr -20h
var_1C= dword ptr -1Ch
ms_exc= CPPEH_RECORD ptr -18h
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset stru_100084E8
push    offset sub_10006DD0
mov     eax, large fs:0
push    eax
mov     large fs:0, esp
sub     esp, 18h
push    ebx
push    esi
push    edi
mov     esi, [ebp+arg_0]
imul    esi, [ebp+arg_4]
mov     [ebp+arg_4], esi
mov     [ebp+var_1C], esi
cmp     esi, 0FFFFFFE0h
ja      short loc_100049A9
xor     ebx, ebx
cmp     esi, ebx
jnz     short loc_1000499E
push    1
pop     esi

loc_1000499E:
add     esi, 0Fh
and     esi, 0FFFFFFF0h
mov     [ebp+arg_4], esi
jmp     short loc_100049AB

loc_100049A9:
xor     ebx, ebx

loc_100049AB:
mov     [ebp+var_20], ebx
cmp     esi, 0FFFFFFE0h
ja      loc_10004A5F
mov     eax, dword_1000D2C8
cmp     eax, 3
jnz     short loc_10004A02
mov     edi, [ebp+var_1C]
cmp     edi, dword_1000C088
ja      short loc_10004A48
push    9
call    sub_100048EA
pop     ecx
mov     [ebp+ms_exc.registration.TryLevel], ebx
push    edi
call    sub_10005C6B
pop     ecx
mov     [ebp+var_20], eax
or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
call    loc_100049F9

loc_100049EA:
cmp     [ebp+var_20], ebx
jz      short loc_10004A4D
push    [ebp+var_1C]
jmp     short loc_10004A3C

loc_100049F4:
xor     ebx, ebx
mov     esi, [ebp+arg_4]

loc_100049F9:
push    9
call    sub_1000494B
pop     ecx
retn

loc_10004A02:
cmp     eax, 2
jnz     short loc_10004A48
cmp     esi, dword_1000B844
ja      short loc_10004A48
push    9
call    sub_100048EA
pop     ecx
mov     [ebp+ms_exc.registration.TryLevel], 1
mov     eax, esi
shr     eax, 4
push    eax
call    sub_10006418
pop     ecx
mov     [ebp+var_20], eax
or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
call    loc_10004A82

loc_10004A36:
cmp     [ebp+var_20], ebx
jz      short loc_10004A4D
push    esi

loc_10004A3C:
push    ebx
push    [ebp+var_20]
call    sub_10006C80
add     esp, 0Ch

loc_10004A48:
cmp     [ebp+var_20], ebx
jnz     short loc_10004A8B

loc_10004A4D:           ; dwBytes
push    esi
push    8               ; dwFlags
push    hHeap           ; hHeap
call    ds:HeapAlloc
mov     [ebp+var_20], eax

loc_10004A5F:
cmp     [ebp+var_20], ebx
jnz     short loc_10004A8B
cmp     dword_1000BF1C, ebx
jz      short loc_10004A8B
push    esi
call    sub_10006C56
pop     ecx
test    eax, eax
jnz     loc_100049AB
jmp     short loc_10004A8E

loc_10004A7D:
xor     ebx, ebx
mov     esi, [ebp+arg_4]

loc_10004A82:
push    9
call    sub_1000494B
pop     ecx
retn

loc_10004A8B:
mov     eax, [ebp+var_20]

loc_10004A8E:
mov     ecx, [ebp+ms_exc.registration.Next]
mov     large fs:0, ecx
pop     edi
pop     esi
pop     ebx
leave
retn
sub_10004960 endp



; Attributes: bp-based frame

; int __cdecl sub_10004A9D(LPVOID lpMem)
sub_10004A9D proc near

var_28= dword ptr -28h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
ms_exc= CPPEH_RECORD ptr -18h
lpMem= dword ptr  8

push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset stru_10008500
push    offset sub_10006DD0
mov     eax, large fs:0
push    eax
mov     large fs:0, esp
sub     esp, 18h
push    ebx
push    esi
push    edi
mov     esi, [ebp+lpMem]
test    esi, esi
jz      loc_10004B77
mov     eax, dword_1000D2C8
cmp     eax, 3
jnz     short loc_10004B10
push    9
call    sub_100048EA
pop     ecx
and     [ebp+ms_exc.registration.TryLevel], 0
push    esi
call    sub_10005917
pop     ecx
mov     [ebp+var_1C], eax
test    eax, eax
jz      short loc_10004AF8
push    esi
push    eax
call    sub_10005942
pop     ecx
pop     ecx

loc_10004AF8:
or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
call    loc_10004B07

loc_10004B01:
cmp     [ebp+var_1C], 0
jmp     short loc_10004B58

loc_10004B07:
push    9
call    sub_1000494B
pop     ecx
retn

loc_10004B10:
cmp     eax, 2
jnz     short loc_10004B68
push    9
call    sub_100048EA
pop     ecx
mov     [ebp+ms_exc.registration.TryLevel], 1
lea     eax, [ebp+var_20]
push    eax
lea     eax, [ebp+var_28]
push    eax
push    esi
call    sub_1000637C
add     esp, 0Ch
mov     [ebp+var_24], eax
test    eax, eax
jz      short loc_10004B4B
push    eax
push    [ebp+var_20]
push    [ebp+var_28]
call    sub_100063D3
add     esp, 0Ch

loc_10004B4B:
or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
call    loc_10004B5F

loc_10004B54:
cmp     [ebp+var_24], 0

loc_10004B58:
jnz     short loc_10004B77
push    [ebp+lpMem]
jmp     short loc_10004B69

loc_10004B5F:
push    9
call    sub_1000494B
pop     ecx
retn

loc_10004B68:           ; lpMem
push    esi

loc_10004B69:           ; dwFlags
push    0
push    hHeap           ; hHeap
call    ds:HeapFree

loc_10004B77:
mov     ecx, [ebp+ms_exc.registration.Next]
mov     large fs:0, ecx
pop     edi
pop     esi
pop     ebx
leave
retn
sub_10004A9D endp




sub_10004B86 proc near

arg_0= dword ptr  4

push    dword_1000BF1C
push    [esp+4+arg_0]
call    sub_10004B98
pop     ecx
pop     ecx
retn
sub_10004B86 endp




sub_10004B98 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

cmp     [esp+arg_0], 0FFFFFFE0h
ja      short loc_10004BC1

loc_10004B9F:
push    [esp+arg_0]
call    sub_10004BC4
test    eax, eax
pop     ecx
jnz     short locret_10004BC3
cmp     [esp+arg_4], eax
jz      short locret_10004BC3
push    [esp+arg_0]
call    sub_10006C56
test    eax, eax
pop     ecx
jnz     short loc_10004B9F

loc_10004BC1:
xor     eax, eax

locret_10004BC3:
retn
sub_10004B98 endp



; Attributes: bp-based frame

sub_10004BC4 proc near

var_1C= dword ptr -1Ch
ms_exc= CPPEH_RECORD ptr -18h
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset stru_10008518
push    offset sub_10006DD0
mov     eax, large fs:0
push    eax
mov     large fs:0, esp
sub     esp, 0Ch
push    ebx
push    esi
push    edi
mov     eax, dword_1000D2C8
cmp     eax, 3
jnz     short loc_10004C34
mov     esi, [ebp+arg_0]
cmp     esi, dword_1000C088
ja      loc_10004C93
push    9
call    sub_100048EA
pop     ecx
and     [ebp+ms_exc.registration.TryLevel], 0
push    esi
call    sub_10005C6B
pop     ecx
mov     [ebp+var_1C], eax
or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
call    loc_10004C2B

loc_10004C1F:
mov     eax, [ebp+var_1C]
test    eax, eax
jz      short loc_10004C93
jmp     loc_10004CB1

loc_10004C2B:
push    9
call    sub_1000494B
pop     ecx
retn

loc_10004C34:
cmp     eax, 2
jnz     short loc_10004C93
mov     eax, [ebp+arg_0]
test    eax, eax
jz      short loc_10004C48
lea     esi, [eax+0Fh]
and     esi, 0FFFFFFF0h
jmp     short loc_10004C4B

loc_10004C48:
push    10h
pop     esi

loc_10004C4B:
mov     [ebp+arg_0], esi
cmp     esi, dword_1000B844
ja      short loc_10004C84
push    9
call    sub_100048EA
pop     ecx
mov     [ebp+ms_exc.registration.TryLevel], 1
mov     eax, esi
shr     eax, 4
push    eax
call    sub_10006418
pop     ecx
mov     [ebp+var_1C], eax
or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
call    loc_10004C8A

loc_10004C7D:
mov     eax, [ebp+var_1C]
test    eax, eax
jnz     short loc_10004CB1

loc_10004C84:
push    esi
jmp     short loc_10004CA3

loc_10004C87:
mov     esi, [ebp+arg_0]

loc_10004C8A:
push    9
call    sub_1000494B
pop     ecx
retn

loc_10004C93:
mov     eax, [ebp+arg_0]
test    eax, eax
jnz     short loc_10004C9D
push    1
pop     eax

loc_10004C9D:
add     eax, 0Fh
and     al, 0F0h
push    eax             ; dwBytes

loc_10004CA3:           ; dwFlags
push    0
push    hHeap           ; hHeap
call    ds:HeapAlloc

loc_10004CB1:
mov     ecx, [ebp+ms_exc.registration.Next]
mov     large fs:0, ecx
pop     edi
pop     esi
pop     ebx
leave
retn
sub_10004BC4 endp




sub_10004CC0 proc near

arg_0= dword ptr  4

push    edi
mov     edi, [esp+4+arg_0]
jmp     short loc_10004D31
sub_10004CC0 endp

align 10h



sub_10004CD0 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     ecx, [esp+arg_0]
push    edi
test    ecx, 3
jz      short loc_10004CEC

loc_10004CDD:
mov     al, [ecx]
inc     ecx
test    al, al
jz      short loc_10004D1F
test    ecx, 3
jnz     short loc_10004CDD

loc_10004CEC:
mov     eax, [ecx]
mov     edx, 7EFEFEFFh
add     edx, eax
xor     eax, 0FFFFFFFFh
xor     eax, edx
add     ecx, 4
test    eax, 81010100h
jz      short loc_10004CEC
mov     eax, [ecx-4]
test    al, al
jz      short loc_10004D2E
test    ah, ah
jz      short loc_10004D29
test    eax, 0FF0000h
jz      short loc_10004D24
test    eax, 0FF000000h
jz      short loc_10004D1F
jmp     short loc_10004CEC

loc_10004D1F:
lea     edi, [ecx-1]
jmp     short loc_10004D31

loc_10004D24:
lea     edi, [ecx-2]
jmp     short loc_10004D31

loc_10004D29:
lea     edi, [ecx-3]
jmp     short loc_10004D31

loc_10004D2E:
lea     edi, [ecx-4]

loc_10004D31:
mov     ecx, [esp+4+arg_4]
test    ecx, 3
jz      short loc_10004D56

loc_10004D3D:
mov     dl, [ecx]
inc     ecx
test    dl, dl
jz      short loc_10004DA8
mov     [edi], dl
inc     edi
test    ecx, 3
jnz     short loc_10004D3D
jmp     short loc_10004D56

loc_10004D51:
mov     [edi], edx
add     edi, 4

loc_10004D56:
mov     edx, 7EFEFEFFh
mov     eax, [ecx]
add     edx, eax
xor     eax, 0FFFFFFFFh
xor     eax, edx
mov     edx, [ecx]
add     ecx, 4
test    eax, 81010100h
jz      short loc_10004D51
test    dl, dl
jz      short loc_10004DA8
test    dh, dh
jz      short loc_10004D9F
test    edx, 0FF0000h
jz      short loc_10004D92
test    edx, 0FF000000h
jz      short loc_10004D8A
jmp     short loc_10004D51

loc_10004D8A:
mov     [edi], edx
mov     eax, [esp+4+arg_0]
pop     edi
retn

loc_10004D92:
mov     [edi], dx
mov     eax, [esp+4+arg_0]
mov     byte ptr [edi+2], 0
pop     edi
retn

loc_10004D9F:
mov     [edi], dx
mov     eax, [esp+4+arg_0]
pop     edi
retn

loc_10004DA8:
mov     [edi], dl
mov     eax, [esp+4+arg_0]
pop     edi
retn
sub_10004CD0 endp



; Attributes: bp-based frame

sub_10004DB0 proc near

CPInfo= _cpinfo ptr -18h
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 18h
push    ebx
push    esi
push    edi
push    19h
call    sub_100048EA
push    [ebp+arg_0]
call    sub_10004F5D
mov     ebx, eax
pop     ecx
cmp     ebx, dword_1000C08C
pop     ecx
mov     [ebp+arg_0], ebx
jnz     short loc_10004DDE

loc_10004DD7:
xor     esi, esi
jmp     loc_10004F4E

loc_10004DDE:
test    ebx, ebx
jz      loc_10004F3C
xor     edx, edx
mov     eax, offset unk_10009728

loc_10004DED:
cmp     [eax], ebx
jz      short loc_10004E65
add     eax, 30h
inc     edx
cmp     eax, offset unk_10009818
jl      short loc_10004DED
lea     eax, [ebp+CPInfo]
push    eax             ; lpCPInfo
push    ebx             ; CodePage
call    ds:GetCPInfo
push    1
pop     esi
cmp     eax, esi
jnz     loc_10004F33
push    40h
and     Locale, 0
pop     ecx
xor     eax, eax
mov     edi, offset unk_1000C1A0
cmp     [ebp+CPInfo.MaxCharSize], esi
rep stosd
stosb
mov     dword_1000C08C, ebx
jbe     loc_10004F20
cmp     [ebp+CPInfo.LeadByte], 0
jz      loc_10004EFB
lea     ecx, [ebp+CPInfo.LeadByte+1]

loc_10004E42:
mov     dl, [ecx]
test    dl, dl
jz      loc_10004EFB
movzx   eax, byte ptr [ecx-1]
movzx   edx, dl

loc_10004E53:
cmp     eax, edx
ja      loc_10004EEF
or      byte_1000C1A1[eax], 4
inc     eax
jmp     short loc_10004E53

loc_10004E65:
and     [ebp+var_4], 0
push    40h
pop     ecx
xor     eax, eax
mov     edi, offset unk_1000C1A0
lea     esi, [edx+edx*2]
rep stosd
shl     esi, 4
stosb
lea     ebx, unk_10009738[esi]

loc_10004E82:
cmp     byte ptr [ebx], 0
mov     ecx, ebx
jz      short loc_10004EB5

loc_10004E89:
mov     dl, [ecx+1]
test    dl, dl
jz      short loc_10004EB5
movzx   eax, byte ptr [ecx]
movzx   edi, dl
cmp     eax, edi
ja      short loc_10004EAE
mov     edx, [ebp+var_4]
mov     dl, byte_10009720[edx]

loc_10004EA3:
or      byte_1000C1A1[eax], dl
inc     eax
cmp     eax, edi
jbe     short loc_10004EA3

loc_10004EAE:
inc     ecx
inc     ecx
cmp     byte ptr [ecx], 0
jnz     short loc_10004E89

loc_10004EB5:
inc     [ebp+var_4]
add     ebx, 8
cmp     [ebp+var_4], 4
jb      short loc_10004E82
mov     eax, [ebp+arg_0]
mov     dword_1000C09C, 1
push    eax
mov     dword_1000C08C, eax
call    sub_10004FA7
lea     esi, unk_1000972C[esi]
mov     edi, offset unk_1000C090
movsd
movsd
pop     ecx
mov     Locale, eax
movsd
jmp     short loc_10004F41

loc_10004EEF:
inc     ecx
inc     ecx
cmp     byte ptr [ecx-1], 0
jnz     loc_10004E42

loc_10004EFB:
mov     eax, esi

loc_10004EFD:
or      byte_1000C1A1[eax], 8
inc     eax
cmp     eax, 0FFh
jb      short loc_10004EFD
push    ebx
call    sub_10004FA7
pop     ecx
mov     Locale, eax
mov     dword_1000C09C, esi
jmp     short loc_10004F27

loc_10004F20:
and     dword_1000C09C, 0

loc_10004F27:
xor     eax, eax
mov     edi, offset unk_1000C090
stosd
stosd
stosd
jmp     short loc_10004F41

loc_10004F33:
cmp     dword_1000BED8, 0
jz      short loc_10004F4B

loc_10004F3C:
call    sub_10004FDA

loc_10004F41:
call    sub_10005003
jmp     loc_10004DD7

loc_10004F4B:
or      esi, 0FFFFFFFFh

loc_10004F4E:
push    19h
call    sub_1000494B
pop     ecx
mov     eax, esi
pop     edi
pop     esi
pop     ebx
leave
retn
sub_10004DB0 endp




sub_10004F5D proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
and     dword_1000BED8, 0
cmp     eax, 0FFFFFFFEh
jnz     short loc_10004F7D
mov     dword_1000BED8, 1
jmp     ds:GetOEMCP

loc_10004F7D:
cmp     eax, 0FFFFFFFDh
jnz     short loc_10004F92
mov     dword_1000BED8, 1
jmp     ds:GetACP

loc_10004F92:
cmp     eax, 0FFFFFFFCh
jnz     short locret_10004FA6
mov     eax, CodePage
mov     dword_1000BED8, 1

locret_10004FA6:
retn
sub_10004F5D endp




sub_10004FA7 proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
sub     eax, 3A4h
jz      short loc_10004FD4
sub     eax, 4
jz      short loc_10004FCE
sub     eax, 0Dh
jz      short loc_10004FC8
dec     eax
jz      short loc_10004FC2
xor     eax, eax
retn

loc_10004FC2:
mov     eax, 404h
retn

loc_10004FC8:
mov     eax, 412h
retn

loc_10004FCE:
mov     eax, 804h
retn

loc_10004FD4:
mov     eax, 411h
retn
sub_10004FA7 endp




sub_10004FDA proc near
push    edi
push    40h
pop     ecx
xor     eax, eax
mov     edi, offset unk_1000C1A0
rep stosd
stosb
xor     eax, eax
mov     edi, offset unk_1000C090
mov     dword_1000C08C, eax
mov     dword_1000C09C, eax
mov     Locale, eax
stosd
stosd
stosd
pop     edi
retn
sub_10004FDA endp



; Attributes: bp-based frame

sub_10005003 proc near

CharType= word ptr -514h
var_314= byte ptr -314h
DestStr= byte ptr -214h
SrcStr= byte ptr -114h
CPInfo= _cpinfo ptr -14h

push    ebp
mov     ebp, esp
sub     esp, 514h
lea     eax, [ebp+CPInfo]
push    esi
push    eax             ; lpCPInfo
push    dword_1000C08C  ; CodePage
call    ds:GetCPInfo
cmp     eax, 1
jnz     loc_1000513C
xor     eax, eax
mov     esi, 100h

loc_1000502D:
mov     [ebp+eax+SrcStr], al
inc     eax
cmp     eax, esi
jb      short loc_1000502D
mov     al, [ebp+CPInfo.LeadByte]
mov     [ebp+SrcStr], 20h
test    al, al
jz      short loc_1000507E
push    ebx
push    edi
lea     edx, [ebp+CPInfo.LeadByte+1]

loc_1000504C:
movzx   ecx, byte ptr [edx]
movzx   eax, al
cmp     eax, ecx
ja      short loc_10005073
sub     ecx, eax
lea     edi, [ebp+eax+SrcStr]
inc     ecx
mov     eax, 20202020h
mov     ebx, ecx
shr     ecx, 2
rep stosd
mov     ecx, ebx
and     ecx, 3
rep stosb

loc_10005073:
inc     edx
inc     edx
mov     al, [edx-1]
test    al, al
jnz     short loc_1000504C
pop     edi
pop     ebx

loc_1000507E:           ; int
push    0
lea     eax, [ebp+CharType]
push    Locale          ; Locale
push    dword_1000C08C  ; CodePage
push    eax             ; lpCharType
lea     eax, [ebp+SrcStr]
push    esi             ; cchSrc
push    eax             ; lpSrcStr
push    1               ; dwInfoType
call    sub_100070F7
push    0               ; int
lea     eax, [ebp+DestStr]
push    dword_1000C08C  ; CodePage
push    esi             ; cchDest
push    eax             ; lpDestStr
lea     eax, [ebp+SrcStr]
push    esi             ; cchSrc
push    eax             ; lpSrcStr
push    esi             ; dwMapFlags
push    Locale          ; Locale
call    sub_10006EA8
push    0               ; int
lea     eax, [ebp+var_314]
push    dword_1000C08C  ; CodePage
push    esi             ; cchDest
push    eax             ; lpDestStr
lea     eax, [ebp+SrcStr]
push    esi             ; cchSrc
push    eax             ; lpSrcStr
push    200h            ; dwMapFlags
push    Locale          ; Locale
call    sub_10006EA8
add     esp, 5Ch
xor     eax, eax
lea     ecx, [ebp+CharType]

loc_100050F9:
mov     dx, [ecx]
test    dl, 1
jz      short loc_10005117
or      byte_1000C1A1[eax], 10h
mov     dl, [ebp+eax+DestStr]

loc_1000510F:
mov     byte_1000C0A0[eax], dl
jmp     short loc_10005133

loc_10005117:
test    dl, 2
jz      short loc_1000512C
or      byte_1000C1A1[eax], 20h
mov     dl, [ebp+eax+var_314]
jmp     short loc_1000510F

loc_1000512C:
and     byte_1000C0A0[eax], 0

loc_10005133:
inc     eax
inc     ecx
inc     ecx
cmp     eax, esi
jb      short loc_100050F9
jmp     short loc_10005185

loc_1000513C:
xor     eax, eax
mov     esi, 100h

loc_10005143:
cmp     eax, 41h
jb      short loc_10005161
cmp     eax, 5Ah
ja      short loc_10005161
or      byte_1000C1A1[eax], 10h
mov     cl, al
add     cl, 20h

loc_10005159:
mov     byte_1000C0A0[eax], cl
jmp     short loc_10005180

loc_10005161:
cmp     eax, 61h
jb      short loc_10005179
cmp     eax, 7Ah
ja      short loc_10005179
or      byte_1000C1A1[eax], 20h
mov     cl, al
sub     cl, 20h
jmp     short loc_10005159

loc_10005179:
and     byte_1000C0A0[eax], 0

loc_10005180:
inc     eax
cmp     eax, esi
jb      short loc_10005143

loc_10005185:
pop     esi
leave
retn
sub_10005003 endp




sub_10005188 proc near
cmp     dword_1000D3E8, 0
jnz     short locret_100051A3
push    0FFFFFFFDh
call    sub_10004DB0
pop     ecx
mov     dword_1000D3E8, 1

locret_100051A3:
retn
sub_10005188 endp

align 10h


; Attributes: bp-based frame

sub_100051B0 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
push    edi
push    esi
mov     esi, [ebp+arg_4]
mov     ecx, [ebp+arg_8]
mov     edi, [ebp+arg_0]
mov     eax, ecx
mov     edx, ecx
add     eax, esi
cmp     edi, esi
jbe     short loc_100051D0
cmp     edi, eax
jb      loc_10005348

loc_100051D0:
test    edi, 3
jnz     short loc_100051EC
shr     ecx, 2
and     edx, 3
cmp     ecx, 8          ; switch 8 cases
jb      short loc_1000520C
rep movsd               ; jumptable 1000520C default case
jmp     ds:off_100052F8[edx*4]

loc_100051EC:
mov     eax, edi
mov     edx, 3
sub     ecx, 4
jb      short loc_10005204
and     eax, 3
add     ecx, eax
jmp     dword ptr ds:(loc_1000520C+4)[eax*4]

loc_10005204:
jmp     dword ptr ds:loc_10005308[ecx*4]
align 4

loc_1000520C:           ; switch jump
jmp     ds:off_1000528C[ecx*4]
align 4
dd offset loc_10005220
dd offset loc_1000524C
dd offset loc_10005270

loc_10005220:
and     edx, ecx
mov     al, [esi]
mov     [edi], al
mov     al, [esi+1]
mov     [edi+1], al
mov     al, [esi+2]
shr     ecx, 2
mov     [edi+2], al
add     esi, 3
add     edi, 3
cmp     ecx, 8
jb      short loc_1000520C
rep movsd
jmp     ds:off_100052F8[edx*4]
align 4

loc_1000524C:
and     edx, ecx
mov     al, [esi]
mov     [edi], al
mov     al, [esi+1]
shr     ecx, 2
mov     [edi+1], al
add     esi, 2
add     edi, 2
cmp     ecx, 8
jb      short loc_1000520C
rep movsd
jmp     ds:off_100052F8[edx*4]
align 10h

loc_10005270:
and     edx, ecx
mov     al, [esi]
mov     [edi], al
inc     esi
shr     ecx, 2
inc     edi
cmp     ecx, 8
jb      short loc_1000520C
rep movsd
jmp     ds:off_100052F8[edx*4]
align 4
off_1000528C dd offset loc_100052EF ; jump table for switch statement
dd offset loc_100052DC
dd offset loc_100052D4
dd offset loc_100052CC
dd offset loc_100052C4
dd offset loc_100052BC
dd offset loc_100052B4
dd offset loc_100052AC

loc_100052AC:           ; jumptable 1000520C case 7
mov     eax, [esi+ecx*4-1Ch]
mov     [edi+ecx*4-1Ch], eax

loc_100052B4:           ; jumptable 1000520C case 6
mov     eax, [esi+ecx*4-18h]
mov     [edi+ecx*4-18h], eax

loc_100052BC:           ; jumptable 1000520C case 5
mov     eax, [esi+ecx*4-14h]
mov     [edi+ecx*4-14h], eax

loc_100052C4:           ; jumptable 1000520C case 4
mov     eax, [esi+ecx*4-10h]
mov     [edi+ecx*4-10h], eax

loc_100052CC:           ; jumptable 1000520C case 3
mov     eax, [esi+ecx*4-0Ch]
mov     [edi+ecx*4-0Ch], eax

loc_100052D4:           ; jumptable 1000520C case 2
mov     eax, [esi+ecx*4-8]
mov     [edi+ecx*4-8], eax

loc_100052DC:           ; jumptable 1000520C case 1
mov     eax, [esi+ecx*4-4]
mov     [edi+ecx*4-4], eax
lea     eax, ds:0[ecx*4]
add     esi, eax
add     edi, eax

loc_100052EF:           ; jumptable 1000520C case 0
jmp     ds:off_100052F8[edx*4]
align 4
off_100052F8 dd offset loc_10005308
dd offset loc_10005310
dd offset loc_1000531C
dd offset loc_10005330

loc_10005308:
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
align 10h

loc_10005310:
mov     al, [esi]
mov     [edi], al
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
align 4

loc_1000531C:
mov     al, [esi]
mov     [edi], al
mov     al, [esi+1]
mov     [edi+1], al
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
align 10h

loc_10005330:
mov     al, [esi]
mov     [edi], al
mov     al, [esi+1]
mov     [edi+1], al
mov     al, [esi+2]
mov     [edi+2], al
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
align 4

loc_10005348:
lea     esi, [ecx+esi-4]
lea     edi, [ecx+edi-4]
test    edi, 3
jnz     short loc_1000537C
shr     ecx, 2
and     edx, 3
cmp     ecx, 8
jb      short loc_10005370
std
rep movsd
cld
jmp     ds:off_10005490[edx*4] ; jumptable 10005394 case 0
align 10h

loc_10005370:
neg     ecx
jmp     ds:off_10005440[ecx*4]
align 4

loc_1000537C:
mov     eax, edi
mov     edx, 3
cmp     ecx, 4          ; switch 4 cases
jb      short loc_10005394
and     eax, 3          ; jumptable 10005394 default case
sub     ecx, eax
jmp     dword ptr ds:(loc_10005394+4)[eax*4]

loc_10005394:           ; switch jump
jmp     ds:off_10005490[ecx*4]
align 4
dd offset loc_100053A8
dd offset loc_100053C8
dd offset loc_100053F0

loc_100053A8:
mov     al, [esi+3]
and     edx, ecx
mov     [edi+3], al
dec     esi
shr     ecx, 2
dec     edi
cmp     ecx, 8
jb      short loc_10005370
std
rep movsd
cld
jmp     ds:off_10005490[edx*4] ; jumptable 10005394 case 0
align 4

loc_100053C8:
mov     al, [esi+3]
and     edx, ecx
mov     [edi+3], al
mov     al, [esi+2]
shr     ecx, 2
mov     [edi+2], al
sub     esi, 2
sub     edi, 2
cmp     ecx, 8
jb      short loc_10005370
std
rep movsd
cld
jmp     ds:off_10005490[edx*4] ; jumptable 10005394 case 0
align 10h

loc_100053F0:
mov     al, [esi+3]
and     edx, ecx
mov     [edi+3], al
mov     al, [esi+2]
mov     [edi+2], al
mov     al, [esi+1]
shr     ecx, 2
mov     [edi+1], al
sub     esi, 3
sub     edi, 3
cmp     ecx, 8
jb      loc_10005370
std
rep movsd
cld
jmp     ds:off_10005490[edx*4] ; jumptable 10005394 case 0
align 4
dd offset loc_10005444
dd offset loc_1000544C
dd offset loc_10005454
dd offset loc_1000545C
dd offset loc_10005464
dd offset loc_1000546C
dd offset loc_10005474
off_10005440 dd offset loc_10005487

loc_10005444:
mov     eax, [esi+ecx*4+1Ch]
mov     [edi+ecx*4+1Ch], eax

loc_1000544C:
mov     eax, [esi+ecx*4+18h]
mov     [edi+ecx*4+18h], eax

loc_10005454:
mov     eax, [esi+ecx*4+14h]
mov     [edi+ecx*4+14h], eax

loc_1000545C:
mov     eax, [esi+ecx*4+10h]
mov     [edi+ecx*4+10h], eax

loc_10005464:
mov     eax, [esi+ecx*4+0Ch]
mov     [edi+ecx*4+0Ch], eax

loc_1000546C:
mov     eax, [esi+ecx*4+8]
mov     [edi+ecx*4+8], eax

loc_10005474:
mov     eax, [esi+ecx*4+4]
mov     [edi+ecx*4+4], eax
lea     eax, ds:0[ecx*4]
add     esi, eax
add     edi, eax

loc_10005487:           ; jumptable 10005394 case 0
jmp     ds:off_10005490[edx*4]
align 10h
off_10005490 dd offset loc_100054A0 ; jump table for switch statement
dd offset loc_100054A8  ; jumptable 10005394 case 1
dd offset loc_100054B8  ; jumptable 10005394 case 2
dd offset loc_100054CC  ; jumptable 10005394 case 3

loc_100054A0:           ; jumptable 10005394 case 0
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
align 4

loc_100054A8:           ; jumptable 10005394 case 1
mov     al, [esi+3]
mov     [edi+3], al
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
align 4

loc_100054B8:           ; jumptable 10005394 case 2
mov     al, [esi+3]
mov     [edi+3], al
mov     al, [esi+2]
mov     [edi+2], al
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
align 4

loc_100054CC:           ; jumptable 10005394 case 3
mov     al, [esi+3]
mov     [edi+3], al
mov     al, [esi+2]
mov     [edi+2], al
mov     al, [esi+1]
mov     [edi+1], al
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
sub_100051B0 endp




sub_100054E5 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch

push    0
push    [esp+4+arg_8]
push    [esp+8+arg_4]
push    [esp+0Ch+arg_0]
call    sub_100054FC
add     esp, 10h
retn
sub_100054E5 endp



; Attributes: bp-based frame

sub_100054FC proc near

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

push    ebp
mov     ebp, esp
sub     esp, 0Ch
push    ebx
and     [ebp+var_8], 0
push    esi
push    edi
mov     edi, [ebp+arg_0]
mov     bl, [edi]
lea     esi, [edi+1]
mov     [ebp+var_4], esi

loc_10005514:
cmp     cbMultiByte, 1
jle     short loc_1000552C
movzx   eax, bl
push    8               ; int
push    eax             ; CharType
call    sub_1000737B
pop     ecx
pop     ecx
jmp     short loc_1000553B

loc_1000552C:
mov     ecx, off_100093B8
movzx   eax, bl
mov     al, [ecx+eax*2]
and     eax, 8

loc_1000553B:
test    eax, eax
jz      short loc_10005544
mov     bl, [esi]
inc     esi
jmp     short loc_10005514

loc_10005544:
cmp     bl, 2Dh
mov     [ebp+var_4], esi
jnz     short loc_10005552
or      [ebp+arg_C], 2
jmp     short loc_10005557

loc_10005552:
cmp     bl, 2Bh
jnz     short loc_1000555D

loc_10005557:
mov     bl, [esi]
inc     esi
mov     [ebp+var_4], esi

loc_1000555D:
mov     eax, [ebp+arg_8]
test    eax, eax
jl      loc_100056F1
cmp     eax, 1
jz      loc_100056F1
cmp     eax, 24h
jg      loc_100056F1
push    10h
test    eax, eax
pop     ecx
jnz     short loc_100055A5
cmp     bl, 30h
jz      short loc_1000558F
mov     [ebp+arg_8], 0Ah
jmp     short loc_100055C1

loc_1000558F:
mov     al, [esi]
cmp     al, 78h
jz      short loc_100055A2
cmp     al, 58h
jz      short loc_100055A2
mov     [ebp+arg_8], 8
jmp     short loc_100055C1

loc_100055A2:
mov     [ebp+arg_8], ecx

loc_100055A5:
cmp     [ebp+arg_8], ecx
jnz     short loc_100055C1
cmp     bl, 30h
jnz     short loc_100055C1
mov     al, [esi]
cmp     al, 78h
jz      short loc_100055B9
cmp     al, 58h
jnz     short loc_100055C1

loc_100055B9:
mov     bl, [esi+1]
inc     esi
inc     esi
mov     [ebp+var_4], esi

loc_100055C1:
or      eax, 0FFFFFFFFh
xor     edx, edx
div     [ebp+arg_8]
mov     edi, 103h
mov     [ebp+var_C], eax

loc_100055D1:
cmp     cbMultiByte, 1
movzx   esi, bl
jle     short loc_100055E9
push    4               ; int
push    esi             ; CharType
call    sub_1000737B
pop     ecx
pop     ecx
jmp     short loc_100055F4

loc_100055E9:
mov     eax, off_100093B8
mov     al, [eax+esi*2]
and     eax, 4

loc_100055F4:
test    eax, eax
jz      short loc_10005600
movsx   ecx, bl
sub     ecx, 30h
jmp     short loc_10005632

loc_10005600:
cmp     cbMultiByte, 1
jle     short loc_10005614
push    edi             ; int
push    esi             ; CharType
call    sub_1000737B
pop     ecx
pop     ecx
jmp     short loc_1000561F

loc_10005614:
mov     eax, off_100093B8
mov     ax, [eax+esi*2]
and     eax, edi

loc_1000561F:
test    eax, eax
jz      short loc_1000566D
movsx   eax, bl
push    eax             ; CharType
call    sub_10007240
pop     ecx
mov     ecx, eax
sub     ecx, 37h

loc_10005632:
cmp     ecx, [ebp+arg_8]
jnb     short loc_1000566D
mov     esi, [ebp+var_8]
or      [ebp+arg_C], 8
cmp     esi, [ebp+var_C]
jb      short loc_10005657
jnz     short loc_10005651
or      eax, 0FFFFFFFFh
xor     edx, edx
div     [ebp+arg_8]
cmp     ecx, edx
jbe     short loc_10005657

loc_10005651:
or      [ebp+arg_C], 4
jmp     short loc_10005660

loc_10005657:
imul    esi, [ebp+arg_8]
add     esi, ecx
mov     [ebp+var_8], esi

loc_10005660:
mov     eax, [ebp+var_4]
inc     [ebp+var_4]
mov     bl, [eax]
jmp     loc_100055D1

loc_1000566D:
mov     eax, [ebp+arg_C]
dec     [ebp+var_4]
mov     ebx, [ebp+arg_4]
test    al, 8
jnz     short loc_1000568A
test    ebx, ebx
jz      short loc_10005684
mov     eax, [ebp+arg_0]
mov     [ebp+var_4], eax

loc_10005684:
and     [ebp+var_8], 0
jmp     short loc_100056D5

loc_1000568A:
test    al, 4
mov     esi, 7FFFFFFFh
jnz     short loc_100056AE
test    al, 1
jnz     short loc_100056D5
and     eax, 2
jz      short loc_100056A5
cmp     [ebp+var_8], 80000000h
ja      short loc_100056AE

loc_100056A5:
test    eax, eax
jnz     short loc_100056D5
cmp     [ebp+var_8], esi
jbe     short loc_100056D5

loc_100056AE:
call    sub_10006941
test    byte ptr [ebp+arg_C], 1
mov     dword ptr [eax], 22h
jz      short loc_100056C5
or      [ebp+var_8], 0FFFFFFFFh
jmp     short loc_100056D5

loc_100056C5:
mov     eax, [ebp+arg_C]
and     al, 2
neg     al
sbb     eax, eax
neg     eax
add     eax, esi
mov     [ebp+var_8], eax

loc_100056D5:
test    ebx, ebx
jz      short loc_100056DE
mov     eax, [ebp+var_4]
mov     [ebx], eax

loc_100056DE:
test    byte ptr [ebp+arg_C], 2
jz      short loc_100056EC
mov     eax, [ebp+var_8]
neg     eax
mov     [ebp+var_8], eax

loc_100056EC:
mov     eax, [ebp+var_8]
jmp     short loc_100056FC

loc_100056F1:
mov     eax, [ebp+arg_4]
test    eax, eax
jz      short loc_100056FA
mov     [eax], edi

loc_100056FA:
xor     eax, eax

loc_100056FC:
pop     edi
pop     esi
pop     ebx
leave
retn
sub_100054FC endp

align 10h
; START OF FUNCTION CHUNK FOR sub_10005720

loc_10005710:
lea     eax, [edx-1]
pop     ebx
retn
; END OF FUNCTION CHUNK FOR sub_10005720
align 10h



sub_10005720 proc near

arg_0= dword ptr  4
arg_4= byte ptr  8

; FUNCTION CHUNK AT 10005710 SIZE 00000005 BYTES

xor     eax, eax
mov     al, [esp+arg_4]

loc_10005726:
push    ebx
mov     ebx, eax
shl     eax, 8
mov     edx, [esp+4+arg_0]
test    edx, 3
jz      short loc_1000574B

loc_10005738:
mov     cl, [edx]
inc     edx
cmp     cl, bl
jz      short loc_10005710
test    cl, cl
jz      short loc_10005794
test    edx, 3
jnz     short loc_10005738

loc_1000574B:
or      ebx, eax
push    edi
mov     eax, ebx
shl     ebx, 10h
push    esi
or      ebx, eax

loc_10005756:
mov     ecx, [edx]
mov     edi, 7EFEFEFFh
mov     eax, ecx
mov     esi, edi
xor     ecx, ebx
add     esi, eax
add     edi, ecx
xor     ecx, 0FFFFFFFFh
xor     eax, 0FFFFFFFFh
xor     ecx, edi
xor     eax, esi
add     edx, 4
and     ecx, 81010100h
jnz     short loc_10005798
and     eax, 81010100h
jz      short loc_10005756
and     eax, 1010100h
jnz     short loc_10005792
and     esi, 80000000h
jnz     short loc_10005756

loc_10005792:
pop     esi
pop     edi

loc_10005794:
pop     ebx
xor     eax, eax
retn

loc_10005798:
mov     eax, [edx-4]
cmp     al, bl
jz      short loc_100057D5
test    al, al
jz      short loc_10005792
cmp     ah, bl
jz      short loc_100057CE
test    ah, ah
jz      short loc_10005792
shr     eax, 10h
cmp     al, bl
jz      short loc_100057C7
test    al, al
jz      short loc_10005792
cmp     ah, bl
jz      short loc_100057C0
test    ah, ah
jz      short loc_10005792
jmp     short loc_10005756

loc_100057C0:
pop     esi
pop     edi
lea     eax, [edx-1]
pop     ebx
retn

loc_100057C7:
lea     eax, [edx-2]
pop     esi
pop     edi
pop     ebx
retn

loc_100057CE:
lea     eax, [edx-3]
pop     esi
pop     edi
pop     ebx
retn

loc_100057D5:
lea     eax, [edx-4]
pop     esi
pop     edi
pop     ebx
retn
sub_10005720 endp

align 10h



sub_100057E0 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     ecx, [esp+arg_4]
push    edi
push    ebx
push    esi
mov     dl, [ecx]
mov     edi, [esp+0Ch+arg_0]
test    dl, dl
jz      short loc_1000585A
mov     dh, [ecx+1]
test    dh, dh
jz      short loc_10005847

loc_100057F8:
mov     esi, edi
mov     ecx, [esp+0Ch+arg_4]
mov     al, [edi]
inc     esi
cmp     al, dl
jz      short loc_1000581A
test    al, al
jz      short loc_10005814

loc_10005809:
mov     al, [esi]
inc     esi

loc_1000580C:
cmp     al, dl
jz      short loc_1000581A
test    al, al
jnz     short loc_10005809

loc_10005814:
pop     esi
pop     ebx
pop     edi
xor     eax, eax
retn

loc_1000581A:
mov     al, [esi]
inc     esi
cmp     al, dh
jnz     short loc_1000580C
lea     edi, [esi-1]

loc_10005824:
mov     ah, [ecx+2]
test    ah, ah
jz      short loc_10005853
mov     al, [esi]
add     esi, 2
cmp     al, ah
jnz     short loc_100057F8
mov     al, [ecx+3]
test    al, al
jz      short loc_10005853
mov     ah, [esi-1]
add     ecx, 2
cmp     al, ah
jz      short loc_10005824
jmp     short loc_100057F8

loc_10005847:
xor     eax, eax
pop     esi
pop     ebx
pop     edi
mov     al, dl
jmp     loc_10005726

loc_10005853:
lea     eax, [edi-1]
pop     esi
pop     ebx
pop     edi
retn

loc_1000585A:
mov     eax, edi
pop     esi
pop     ebx
pop     edi
retn
sub_100057E0 endp



; Attributes: bp-based frame

sub_10005860 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
push    edi
push    esi
push    ebx
mov     ecx, [ebp+arg_8]
jecxz   short loc_10005891
mov     ebx, ecx
mov     edi, [ebp+arg_0]
mov     esi, edi
xor     eax, eax
repne scasb
neg     ecx
add     ecx, ebx
mov     edi, esi
mov     esi, [ebp+arg_4]
repe cmpsb
mov     al, [esi-1]
xor     ecx, ecx
cmp     al, [edi-1]
ja      short loc_1000588F
jz      short loc_10005891
dec     ecx
dec     ecx

loc_1000588F:
not     ecx

loc_10005891:
mov     eax, ecx
pop     ebx
pop     esi
pop     edi
leave
retn
sub_10005860 endp

align 10h
; [0000002F BYTES: COLLAPSED FUNCTION __alloca_probe. PRESS CTRL-NUMPAD+ TO EXPAND]



sub_100058CF proc near

arg_0= dword ptr  4

push    140h            ; dwBytes
push    0               ; dwFlags
push    hHeap           ; hHeap
call    ds:HeapAlloc
test    eax, eax
mov     lpMem, eax
jnz     short loc_100058EC
retn

loc_100058EC:
mov     ecx, [esp+arg_0]
and     dword_1000C07C, 0
and     dword_1000C080, 0
push    1
mov     dword_1000C078, eax
mov     dword_1000C088, ecx
mov     dword_1000C070, 10h
pop     eax
retn
sub_100058CF endp




sub_10005917 proc near

arg_0= dword ptr  4

mov     eax, dword_1000C080
lea     ecx, [eax+eax*4]
mov     eax, lpMem
lea     ecx, [eax+ecx*4]

loc_10005927:
cmp     eax, ecx
jnb     short loc_1000593F
mov     edx, [esp+arg_0]
sub     edx, [eax+0Ch]
cmp     edx, 100000h
jb      short locret_10005941
add     eax, 14h
jmp     short loc_10005927

loc_1000593F:
xor     eax, eax

locret_10005941:
retn
sub_10005917 endp



; Attributes: bp-based frame

sub_10005942 proc near

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 10h
mov     ecx, [ebp+arg_0]
push    ebx
push    esi
mov     esi, [ebp+arg_4]
mov     eax, [ecx+10h]
push    edi
mov     edi, esi
add     esi, 0FFFFFFFCh
sub     edi, [ecx+0Ch]
shr     edi, 0Fh
mov     ecx, edi
imul    ecx, 204h
lea     ecx, [ecx+eax+144h]
mov     [ebp+var_10], ecx
mov     ecx, [esi]
dec     ecx
test    cl, 1
mov     [ebp+var_4], ecx
jnz     loc_10005C66
mov     edx, [ecx+esi]
lea     ebx, [ecx+esi]
mov     [ebp+var_C], edx
mov     edx, [esi-4]
mov     [ebp+var_8], edx
mov     edx, [ebp+var_C]
test    dl, 1
mov     [ebp+arg_4], ebx
jnz     short loc_10005A18
sar     edx, 4
dec     edx
cmp     edx, 3Fh
jbe     short loc_100059A6
push    3Fh
pop     edx

loc_100059A6:
mov     ecx, [ebx+4]
cmp     ecx, [ebx+8]
jnz     short loc_100059FA
cmp     edx, 20h
jnb     short loc_100059D1
mov     ebx, 80000000h
mov     ecx, edx
shr     ebx, cl
lea     ecx, [edx+eax+4]
not     ebx
and     [eax+edi*4+44h], ebx
dec     byte ptr [ecx]
jnz     short loc_100059F2
mov     ecx, [ebp+arg_0]
and     [ecx], ebx
jmp     short loc_100059F2

loc_100059D1:
lea     ecx, [edx-20h]
mov     ebx, 80000000h
shr     ebx, cl
lea     ecx, [edx+eax+4]
not     ebx
and     [eax+edi*4+0C4h], ebx
dec     byte ptr [ecx]
jnz     short loc_100059F2
mov     ecx, [ebp+arg_0]
and     [ecx+4], ebx

loc_100059F2:
mov     ecx, [ebp+var_4]
mov     ebx, [ebp+arg_4]
jmp     short loc_100059FD

loc_100059FA:
mov     ecx, [ebp+var_4]

loc_100059FD:
mov     edx, [ebx+8]
mov     ebx, [ebx+4]
add     ecx, [ebp+var_C]
mov     [edx+4], ebx
mov     edx, [ebp+arg_4]
mov     [ebp+var_4], ecx
mov     ebx, [edx+4]
mov     edx, [edx+8]
mov     [ebx+8], edx

loc_10005A18:
mov     edx, ecx
sar     edx, 4
dec     edx
cmp     edx, 3Fh
jbe     short loc_10005A26
push    3Fh
pop     edx

loc_10005A26:
mov     ebx, [ebp+var_8]
and     ebx, 1
mov     [ebp+var_C], ebx
jnz     loc_10005AC9
sub     esi, [ebp+var_8]
mov     ebx, [ebp+var_8]
sar     ebx, 4
push    3Fh
mov     [ebp+arg_4], esi
dec     ebx
pop     esi
cmp     ebx, esi
jbe     short loc_10005A4B
mov     ebx, esi

loc_10005A4B:
add     ecx, [ebp+var_8]
mov     edx, ecx
mov     [ebp+var_4], ecx
sar     edx, 4
dec     edx
cmp     edx, esi
jbe     short loc_10005A5D
mov     edx, esi

loc_10005A5D:
cmp     ebx, edx
jz      short loc_10005AC4
mov     ecx, [ebp+arg_4]
mov     esi, [ecx+4]
cmp     esi, [ecx+8]
jnz     short loc_10005AAC
cmp     ebx, 20h
jnb     short loc_10005A8D
mov     esi, 80000000h
mov     ecx, ebx
shr     esi, cl
not     esi
and     [eax+edi*4+44h], esi
dec     byte ptr [ebx+eax+4]
jnz     short loc_10005AAC
mov     ecx, [ebp+arg_0]
and     [ecx], esi
jmp     short loc_10005AAC

loc_10005A8D:
lea     ecx, [ebx-20h]
mov     esi, 80000000h
shr     esi, cl
not     esi
and     [eax+edi*4+0C4h], esi
dec     byte ptr [ebx+eax+4]
jnz     short loc_10005AAC
mov     ecx, [ebp+arg_0]
and     [ecx+4], esi

loc_10005AAC:
mov     ecx, [ebp+arg_4]
mov     esi, [ecx+8]
mov     ecx, [ecx+4]
mov     [esi+4], ecx
mov     ecx, [ebp+arg_4]
mov     esi, [ecx+4]
mov     ecx, [ecx+8]
mov     [esi+8], ecx

loc_10005AC4:
mov     esi, [ebp+arg_4]
jmp     short loc_10005ACC

loc_10005AC9:
mov     ebx, [ebp+arg_0]

loc_10005ACC:
cmp     [ebp+var_C], 0
jnz     short loc_10005ADA
cmp     ebx, edx
jz      loc_10005B5B

loc_10005ADA:
mov     ecx, [ebp+var_10]
mov     ebx, [ecx+edx*8+4]
lea     ecx, [ecx+edx*8]
mov     [esi+4], ebx
mov     [esi+8], ecx
mov     [ecx+4], esi
mov     ecx, [esi+4]
mov     [ecx+8], esi
mov     ecx, [esi+4]
cmp     ecx, [esi+8]
jnz     short loc_10005B5B
mov     cl, [edx+eax+4]
cmp     edx, 20h
mov     byte ptr [ebp+arg_4+3], cl
inc     cl
mov     [edx+eax+4], cl
jnb     short loc_10005B32
cmp     byte ptr [ebp+arg_4+3], 0
jnz     short loc_10005B21
mov     ebx, 80000000h
mov     ecx, edx
shr     ebx, cl
mov     ecx, [ebp+arg_0]
or      [ecx], ebx

loc_10005B21:
mov     ebx, 80000000h
mov     ecx, edx
shr     ebx, cl
lea     eax, [eax+edi*4+44h]
or      [eax], ebx
jmp     short loc_10005B5B

loc_10005B32:
cmp     byte ptr [ebp+arg_4+3], 0
jnz     short loc_10005B48
lea     ecx, [edx-20h]
mov     ebx, 80000000h
shr     ebx, cl
mov     ecx, [ebp+arg_0]
or      [ecx+4], ebx

loc_10005B48:
lea     ecx, [edx-20h]
mov     edx, 80000000h
shr     edx, cl
lea     eax, [eax+edi*4+0C4h]
or      [eax], edx

loc_10005B5B:
mov     eax, [ebp+var_4]
mov     [esi], eax
mov     [eax+esi-4], eax
mov     eax, [ebp+var_10]
dec     dword ptr [eax]
jnz     loc_10005C66
mov     eax, dword_1000C07C
test    eax, eax
jz      loc_10005C58
mov     ecx, dword_1000C074
mov     esi, ds:VirtualFree
shl     ecx, 0Fh
add     ecx, [eax+0Ch]
mov     ebx, 8000h
push    4000h           ; dwFreeType
push    ebx             ; dwSize
push    ecx             ; lpAddress
call    esi ; VirtualFree
mov     ecx, dword_1000C074
mov     eax, dword_1000C07C
mov     edx, 80000000h
shr     edx, cl
or      [eax+8], edx
mov     eax, dword_1000C07C
mov     ecx, dword_1000C074
mov     eax, [eax+10h]
and     dword ptr [eax+ecx*4+0C4h], 0
mov     eax, dword_1000C07C
mov     eax, [eax+10h]
dec     byte ptr [eax+43h]
mov     eax, dword_1000C07C
mov     ecx, [eax+10h]
cmp     byte ptr [ecx+43h], 0
jnz     short loc_10005BE9
and     dword ptr [eax+4], 0FFFFFFFEh
mov     eax, dword_1000C07C

loc_10005BE9:
cmp     dword ptr [eax+8], 0FFFFFFFFh
jnz     short loc_10005C58
push    ebx             ; dwFreeType
push    0               ; dwSize
push    dword ptr [eax+0Ch] ; lpAddress
call    esi ; VirtualFree
mov     eax, dword_1000C07C
push    dword ptr [eax+10h] ; lpMem
push    0               ; dwFlags
push    hHeap           ; hHeap
call    ds:HeapFree
mov     eax, dword_1000C080
mov     edx, lpMem
lea     eax, [eax+eax*4]
shl     eax, 2
mov     ecx, eax
mov     eax, dword_1000C07C
sub     ecx, eax
lea     ecx, [ecx+edx-14h]
push    ecx
lea     ecx, [eax+14h]
push    ecx
push    eax
call    sub_100073F0
mov     eax, [ebp+arg_0]
add     esp, 0Ch
dec     dword_1000C080
cmp     eax, dword_1000C07C
jbe     short loc_10005C4E
sub     [ebp+arg_0], 14h

loc_10005C4E:
mov     eax, lpMem
mov     dword_1000C078, eax

loc_10005C58:
mov     eax, [ebp+arg_0]
mov     dword_1000C074, edi
mov     dword_1000C07C, eax

loc_10005C66:
pop     edi
pop     esi
pop     ebx
leave
retn
sub_10005942 endp



; Attributes: bp-based frame

sub_10005C6B proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 14h
mov     eax, dword_1000C080
mov     edx, lpMem
push    ebx
push    esi
lea     eax, [eax+eax*4]
push    edi
lea     edi, [edx+eax*4]
mov     eax, [ebp+arg_0]
mov     [ebp+var_4], edi
lea     ecx, [eax+17h]
and     ecx, 0FFFFFFF0h
mov     [ebp+var_10], ecx
sar     ecx, 4
dec     ecx
cmp     ecx, 20h
jge     short loc_10005CAB
or      esi, 0FFFFFFFFh
shr     esi, cl
or      [ebp+var_8], 0FFFFFFFFh
mov     [ebp+var_C], esi
jmp     short loc_10005CBB

loc_10005CAB:
add     ecx, 0FFFFFFE0h
or      eax, 0FFFFFFFFh
xor     esi, esi
shr     eax, cl
mov     [ebp+var_C], esi
mov     [ebp+var_8], eax

loc_10005CBB:
mov     eax, dword_1000C078
mov     ebx, eax
cmp     ebx, edi
mov     [ebp+arg_0], ebx
jnb     short loc_10005CE2

loc_10005CC9:
mov     ecx, [ebx+4]
mov     edi, [ebx]
and     ecx, [ebp+var_8]
and     edi, esi
or      ecx, edi
jnz     short loc_10005CE2
add     ebx, 14h
cmp     ebx, [ebp+var_4]
mov     [ebp+arg_0], ebx
jb      short loc_10005CC9

loc_10005CE2:
cmp     ebx, [ebp+var_4]
jnz     short loc_10005D60
mov     ebx, edx

loc_10005CE9:
cmp     ebx, eax
mov     [ebp+arg_0], ebx
jnb     short loc_10005D05
mov     ecx, [ebx+4]
mov     edi, [ebx]
and     ecx, [ebp+var_8]
and     edi, esi
or      ecx, edi
jnz     short loc_10005D03
add     ebx, 14h
jmp     short loc_10005CE9

loc_10005D03:
cmp     ebx, eax

loc_10005D05:
jnz     short loc_10005D60

loc_10005D07:
cmp     ebx, [ebp+var_4]
jnb     short loc_10005D1D
cmp     dword ptr [ebx+8], 0
jnz     short loc_10005D1A
add     ebx, 14h
mov     [ebp+arg_0], ebx
jmp     short loc_10005D07

loc_10005D1A:
cmp     ebx, [ebp+var_4]

loc_10005D1D:
jnz     short loc_10005D45
mov     ebx, edx

loc_10005D21:
cmp     ebx, eax
mov     [ebp+arg_0], ebx
jnb     short loc_10005D35
cmp     dword ptr [ebx+8], 0
jnz     short loc_10005D33
add     ebx, 14h
jmp     short loc_10005D21

loc_10005D33:
cmp     ebx, eax

loc_10005D35:
jnz     short loc_10005D45
call    sub_10005F74
mov     ebx, eax
test    ebx, ebx
mov     [ebp+arg_0], ebx
jz      short loc_10005D59

loc_10005D45:
push    ebx
call    sub_10006025
pop     ecx
mov     ecx, [ebx+10h]
mov     [ecx], eax
mov     eax, [ebx+10h]
cmp     dword ptr [eax], 0FFFFFFFFh
jnz     short loc_10005D60

loc_10005D59:
xor     eax, eax
jmp     loc_10005F6F

loc_10005D60:
mov     dword_1000C078, ebx
mov     eax, [ebx+10h]
mov     edx, [eax]
cmp     edx, 0FFFFFFFFh
mov     [ebp+var_4], edx
jz      short loc_10005D87
mov     ecx, [eax+edx*4+0C4h]
mov     edi, [eax+edx*4+44h]
and     ecx, [ebp+var_8]
and     edi, esi
or      ecx, edi
jnz     short loc_10005DBE

loc_10005D87:
mov     edx, [eax+0C4h]
mov     esi, [eax+44h]
and     edx, [ebp+var_8]
and     esi, [ebp+var_C]
and     [ebp+var_4], 0
lea     ecx, [eax+44h]
or      edx, esi
mov     esi, [ebp+var_C]
jnz     short loc_10005DBB

loc_10005DA4:
mov     edx, [ecx+84h]
inc     [ebp+var_4]
and     edx, [ebp+var_8]
add     ecx, 4
mov     edi, esi
and     edi, [ecx]
or      edx, edi
jz      short loc_10005DA4

loc_10005DBB:
mov     edx, [ebp+var_4]

loc_10005DBE:
mov     ecx, edx
xor     edi, edi
imul    ecx, 204h
lea     ecx, [ecx+eax+144h]
mov     [ebp+var_C], ecx
mov     ecx, [eax+edx*4+44h]
and     ecx, esi
jnz     short loc_10005DE7
mov     ecx, [eax+edx*4+0C4h]
push    20h
and     ecx, [ebp+var_8]
pop     edi

loc_10005DE7:
test    ecx, ecx
jl      short loc_10005DF0
shl     ecx, 1
inc     edi
jmp     short loc_10005DE7

loc_10005DF0:
mov     ecx, [ebp+var_C]
mov     edx, [ecx+edi*8+4]
mov     ecx, [edx]
sub     ecx, [ebp+var_10]
mov     esi, ecx
mov     [ebp+var_8], ecx
sar     esi, 4
dec     esi
cmp     esi, 3Fh
jle     short loc_10005E0D
push    3Fh
pop     esi

loc_10005E0D:
cmp     esi, edi
jz      loc_10005F22
mov     ecx, [edx+4]
cmp     ecx, [edx+8]
jnz     short loc_10005E7E
cmp     edi, 20h
jge     short loc_10005E4D
mov     ebx, 80000000h
mov     ecx, edi
shr     ebx, cl
mov     ecx, [ebp+var_4]
lea     edi, [eax+edi+4]
not     ebx
mov     [ebp+var_14], ebx
and     ebx, [eax+ecx*4+44h]
mov     [eax+ecx*4+44h], ebx
dec     byte ptr [edi]
jnz     short loc_10005E7B
mov     ebx, [ebp+arg_0]
mov     ecx, [ebp+var_14]
and     [ebx], ecx
jmp     short loc_10005E7E

loc_10005E4D:
lea     ecx, [edi-20h]
mov     ebx, 80000000h
shr     ebx, cl
mov     ecx, [ebp+var_4]
lea     edi, [eax+edi+4]
lea     ecx, [eax+ecx*4+0C4h]
not     ebx
and     [ecx], ebx
dec     byte ptr [edi]
mov     [ebp+var_14], ebx
jnz     short loc_10005E7B
mov     ebx, [ebp+arg_0]
mov     ecx, [ebp+var_14]
and     [ebx+4], ecx
jmp     short loc_10005E7E

loc_10005E7B:
mov     ebx, [ebp+arg_0]

loc_10005E7E:
mov     ecx, [edx+8]
mov     edi, [edx+4]
cmp     [ebp+var_8], 0
mov     [ecx+4], edi
mov     ecx, [edx+4]
mov     edi, [edx+8]
mov     [ecx+8], edi
jz      loc_10005F2E
mov     ecx, [ebp+var_C]
mov     edi, [ecx+esi*8+4]
lea     ecx, [ecx+esi*8]
mov     [edx+4], edi
mov     [edx+8], ecx
mov     [ecx+4], edx
mov     ecx, [edx+4]
mov     [ecx+8], edx
mov     ecx, [edx+4]
cmp     ecx, [edx+8]
jnz     short loc_10005F1F
mov     cl, [esi+eax+4]
cmp     esi, 20h
mov     byte ptr [ebp+arg_0+3], cl
jge     short loc_10005EF0
inc     cl
cmp     byte ptr [ebp+arg_0+3], 0
mov     [esi+eax+4], cl
jnz     short loc_10005EDE
mov     edi, 80000000h
mov     ecx, esi
shr     edi, cl
or      [ebx], edi

loc_10005EDE:
mov     edi, 80000000h
mov     ecx, esi
shr     edi, cl
mov     ecx, [ebp+var_4]
or      [eax+ecx*4+44h], edi
jmp     short loc_10005F1F

loc_10005EF0:
inc     cl
cmp     byte ptr [ebp+arg_0+3], 0
mov     [esi+eax+4], cl
jnz     short loc_10005F09
lea     ecx, [esi-20h]
mov     edi, 80000000h
shr     edi, cl
or      [ebx+4], edi

loc_10005F09:
mov     ecx, [ebp+var_4]
lea     edi, [eax+ecx*4+0C4h]
lea     ecx, [esi-20h]
mov     esi, 80000000h
shr     esi, cl
or      [edi], esi

loc_10005F1F:
mov     ecx, [ebp+var_8]

loc_10005F22:
test    ecx, ecx
jz      short loc_10005F31
mov     [edx], ecx
mov     [ecx+edx-4], ecx
jmp     short loc_10005F31

loc_10005F2E:
mov     ecx, [ebp+var_8]

loc_10005F31:
mov     esi, [ebp+var_10]
add     edx, ecx
lea     ecx, [esi+1]
mov     [edx], ecx
mov     [edx+esi-4], ecx
mov     esi, [ebp+var_C]
mov     ecx, [esi]
test    ecx, ecx
lea     edi, [ecx+1]
mov     [esi], edi
jnz     short loc_10005F67
cmp     ebx, dword_1000C07C
jnz     short loc_10005F67
mov     ecx, [ebp+var_4]
cmp     ecx, dword_1000C074
jnz     short loc_10005F67
and     dword_1000C07C, 0

loc_10005F67:
mov     ecx, [ebp+var_4]
mov     [eax], ecx
lea     eax, [edx+4]

loc_10005F6F:
pop     edi
pop     esi
pop     ebx
leave
retn
sub_10005C6B endp




sub_10005F74 proc near
mov     eax, dword_1000C080
mov     ecx, dword_1000C070
push    esi
push    edi
xor     edi, edi
cmp     eax, ecx
jnz     short loc_10005FB7
lea     eax, [ecx+ecx*4+50h]
shl     eax, 2
push    eax             ; dwBytes
push    lpMem           ; lpMem
push    edi             ; dwFlags
push    hHeap           ; hHeap
call    ds:HeapReAlloc
cmp     eax, edi
jz      short loc_10006007
add     dword_1000C070, 10h
mov     lpMem, eax
mov     eax, dword_1000C080

loc_10005FB7:
mov     ecx, lpMem
push    41C4h           ; dwBytes
push    8               ; dwFlags
lea     eax, [eax+eax*4]
push    hHeap           ; hHeap
lea     esi, [ecx+eax*4]
call    ds:HeapAlloc
cmp     eax, edi
mov     [esi+10h], eax
jz      short loc_10006007
push    4               ; flProtect
push    2000h           ; flAllocationType
push    100000h         ; dwSize
push    edi             ; lpAddress
call    ds:VirtualAlloc
cmp     eax, edi
mov     [esi+0Ch], eax
jnz     short loc_1000600B
push    dword ptr [esi+10h] ; lpMem
push    edi             ; dwFlags
push    hHeap           ; hHeap
call    ds:HeapFree

loc_10006007:
xor     eax, eax
jmp     short loc_10006022

loc_1000600B:
or      dword ptr [esi+8], 0FFFFFFFFh
mov     [esi], edi
mov     [esi+4], edi
inc     dword_1000C080
mov     eax, [esi+10h]
or      dword ptr [eax], 0FFFFFFFFh
mov     eax, esi

loc_10006022:
pop     edi
pop     esi
retn
sub_10005F74 endp



; Attributes: bp-based frame

sub_10006025 proc near

var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    ecx
mov     ecx, [ebp+arg_0]
push    ebx
push    esi
push    edi
mov     esi, [ecx+10h]
mov     eax, [ecx+8]
xor     ebx, ebx

loc_10006037:
test    eax, eax
jl      short loc_10006040
shl     eax, 1
inc     ebx
jmp     short loc_10006037

loc_10006040:
mov     eax, ebx
push    3Fh
imul    eax, 204h
pop     edx
lea     eax, [eax+esi+144h]
mov     [ebp+var_4], eax

loc_10006055:
mov     [eax+8], eax
mov     [eax+4], eax
add     eax, 8
dec     edx
jnz     short loc_10006055
mov     edi, ebx
push    4               ; flProtect
shl     edi, 0Fh
add     edi, [ecx+0Ch]
push    1000h           ; flAllocationType
push    8000h           ; dwSize
push    edi             ; lpAddress
call    ds:VirtualAlloc
test    eax, eax
jnz     short loc_10006088
or      eax, 0FFFFFFFFh
jmp     loc_1000611B

loc_10006088:
lea     edx, [edi+7000h]
cmp     edi, edx
ja      short loc_100060CE
lea     eax, [edi+10h]

loc_10006095:
or      dword ptr [eax-8], 0FFFFFFFFh
or      dword ptr [eax+0FECh], 0FFFFFFFFh
lea     ecx, [eax+0FFCh]
mov     dword ptr [eax-4], 0FF0h
mov     [eax], ecx
lea     ecx, [eax-1004h]
mov     [eax+4], ecx
mov     dword ptr [eax+0FE8h], 0FF0h
add     eax, 1000h
lea     ecx, [eax-10h]
cmp     ecx, edx
jbe     short loc_10006095

loc_100060CE:
mov     eax, [ebp+var_4]
lea     ecx, [edi+0Ch]
add     eax, 1F8h
push    1
pop     edi
mov     [eax+4], ecx
mov     [ecx+8], eax
lea     ecx, [edx+0Ch]
mov     [eax+8], ecx
mov     [ecx+4], eax
and     dword ptr [esi+ebx*4+44h], 0
mov     [esi+ebx*4+0C4h], edi
mov     al, [esi+43h]
mov     cl, al
inc     cl
test    al, al
mov     eax, [ebp+arg_0]
mov     [esi+43h], cl
jnz     short loc_1000610B
or      [eax+4], edi

loc_1000610B:
mov     edx, 80000000h
mov     ecx, ebx
shr     edx, cl
not     edx
and     [eax+8], edx
mov     eax, ebx

loc_1000611B:
pop     edi
pop     esi
pop     ebx
leave
retn
sub_10006025 endp




sub_10006120 proc near
cmp     dword_10009830, 0FFFFFFFFh
push    ebx
push    ebp
push    esi
push    edi
jnz     short loc_10006134
mov     esi, offset off_10009820
jmp     short loc_10006151

loc_10006134:           ; dwBytes
push    2020h
push    0               ; dwFlags
push    hHeap           ; hHeap
call    ds:HeapAlloc
mov     esi, eax
test    esi, esi
jz      loc_1000625D

loc_10006151:
mov     ebp, ds:VirtualAlloc
push    4               ; flProtect
push    2000h           ; flAllocationType
push    400000h         ; dwSize
push    0               ; lpAddress
call    ebp ; VirtualAlloc
mov     edi, eax
test    edi, edi
jz      loc_10006246
push    4               ; flProtect
mov     ebx, 10000h
push    1000h           ; flAllocationType
push    ebx             ; dwSize
push    edi             ; lpAddress
call    ebp ; VirtualAlloc
test    eax, eax
jz      loc_10006238
mov     eax, offset off_10009820
cmp     esi, eax
jnz     short loc_100061B0
cmp     off_10009820, 0
jnz     short loc_100061A0
mov     off_10009820, eax

loc_100061A0:
cmp     off_10009824, 0
jnz     short loc_100061C5
mov     off_10009824, eax
jmp     short loc_100061C5

loc_100061B0:
mov     [esi], eax
mov     eax, off_10009824
mov     [esi+4], eax
mov     off_10009824, esi
mov     eax, [esi+4]
mov     [eax], esi

loc_100061C5:
lea     eax, [edi+400000h]
lea     ecx, [esi+98h]
mov     [esi+14h], eax
lea     eax, [esi+18h]
mov     [esi+0Ch], ecx
mov     [esi+10h], edi
mov     [esi+8], eax
xor     ebp, ebp
mov     ecx, 0F1h

loc_100061E7:
xor     edx, edx
cmp     ebp, 10h
setnl   dl
dec     edx
and     edx, ecx
dec     edx
inc     ebp
mov     [eax], edx
mov     [eax+4], ecx
add     eax, 8
cmp     ebp, 400h
jl      short loc_100061E7
push    ebx
push    0
push    edi
call    sub_10006C80
add     esp, 0Ch

loc_10006210:
mov     eax, [esi+10h]
add     eax, ebx
cmp     edi, eax
jnb     short loc_10006234
or      byte ptr [edi+0F8h], 0FFh
lea     eax, [edi+8]
mov     [edi], eax
mov     dword ptr [edi+4], 0F0h
add     edi, 1000h
jmp     short loc_10006210

loc_10006234:
mov     eax, esi
jmp     short loc_1000625F

loc_10006238:           ; dwFreeType
push    8000h
push    0               ; dwSize
push    edi             ; lpAddress
call    ds:VirtualFree

loc_10006246:
cmp     esi, offset off_10009820
jz      short loc_1000625D
push    esi             ; lpMem
push    0               ; dwFlags
push    hHeap           ; hHeap
call    ds:HeapFree

loc_1000625D:
xor     eax, eax

loc_1000625F:
pop     edi
pop     esi
pop     ebp
pop     ebx
retn
sub_10006120 endp




; int __cdecl sub_10006264(LPVOID lpMem)
sub_10006264 proc near

lpMem= dword ptr  4

push    esi
mov     esi, [esp+4+lpMem]
push    8000h           ; dwFreeType
push    0               ; dwSize
push    dword ptr [esi+10h] ; lpAddress
call    ds:VirtualFree
cmp     off_1000B840, esi
jnz     short loc_10006289
mov     eax, [esi+4]
mov     off_1000B840, eax

loc_10006289:
cmp     esi, offset off_10009820
jz      short loc_100062B1
mov     eax, [esi+4]
mov     ecx, [esi]
push    esi             ; lpMem
push    0               ; dwFlags
mov     [eax], ecx
mov     eax, [esi]
mov     ecx, [esi+4]
mov     [eax+4], ecx
push    hHeap           ; hHeap
call    ds:HeapFree
pop     esi
retn

loc_100062B1:
or      dword_10009830, 0FFFFFFFFh
pop     esi
retn
sub_10006264 endp



; Attributes: bp-based frame

sub_100062BA proc near

var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    ecx
push    ebx
push    esi
mov     esi, off_10009824
push    edi

loc_100062C7:
cmp     dword ptr [esi+10h], 0FFFFFFFFh
jz      loc_10006365
and     [ebp+var_4], 0
lea     edi, [esi+2010h]
mov     ebx, 3FF000h

loc_100062E0:
cmp     dword ptr [edi], 0F0h
jnz     short loc_10006321
mov     eax, ebx
push    4000h           ; dwFreeType
add     eax, [esi+10h]
push    1000h           ; dwSize
push    eax             ; lpAddress
call    ds:VirtualFree
test    eax, eax
jz      short loc_10006321
or      dword ptr [edi], 0FFFFFFFFh
dec     dword_1000BEDC
mov     eax, [esi+0Ch]
test    eax, eax
jz      short loc_10006316
cmp     eax, edi
jbe     short loc_10006319

loc_10006316:
mov     [esi+0Ch], edi

loc_10006319:
inc     [ebp+var_4]
dec     [ebp+arg_0]
jz      short loc_1000632E

loc_10006321:
sub     ebx, 1000h
sub     edi, 8
test    ebx, ebx
jge     short loc_100062E0

loc_1000632E:
cmp     [ebp+var_4], 0
mov     ecx, esi
mov     esi, [esi+4]
jz      short loc_10006365
cmp     dword ptr [ecx+18h], 0FFFFFFFFh
jnz     short loc_10006365
push    1
lea     eax, [ecx+20h]
pop     edx

loc_10006345:
cmp     dword ptr [eax], 0FFFFFFFFh
jnz     short loc_10006356
inc     edx
add     eax, 8
cmp     edx, 400h
jl      short loc_10006345

loc_10006356:
cmp     edx, 400h
jnz     short loc_10006365
push    ecx             ; lpMem
call    sub_10006264
pop     ecx

loc_10006365:
cmp     esi, off_10009824
jz      short loc_10006377
cmp     [ebp+arg_0], 0
jg      loc_100062C7

loc_10006377:
pop     edi
pop     esi
pop     ebx
leave
retn
sub_100062BA endp




sub_1000637C proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch

mov     eax, [esp+arg_0]
mov     edx, offset off_10009820
push    esi
mov     ecx, edx

loc_10006388:
cmp     eax, [ecx+10h]
jbe     short loc_10006392
cmp     eax, [ecx+14h]
jb      short loc_1000639A

loc_10006392:
mov     ecx, [ecx]
cmp     ecx, edx
jz      short loc_100063CF
jmp     short loc_10006388

loc_1000639A:
test    al, 0Fh
jnz     short loc_100063CF
mov     esi, eax
mov     edx, 100h
and     esi, 0FFFh
cmp     esi, edx
jb      short loc_100063CF
mov     esi, [esp+4+arg_4]
mov     [esi], ecx
mov     esi, [esp+4+arg_8]
mov     ecx, eax
and     cx, 0F000h
sub     eax, ecx
mov     [esi], ecx
sub     eax, edx
pop     esi
sar     eax, 4
lea     eax, [eax+ecx+8]
retn

loc_100063CF:
xor     eax, eax
pop     esi
retn
sub_1000637C endp




sub_100063D3 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch

mov     eax, [esp+arg_0]
mov     ecx, [esp+arg_4]
sub     ecx, [eax+10h]
sar     ecx, 0Ch
lea     eax, [eax+ecx*8+18h]
mov     ecx, [esp+arg_8]
movzx   edx, byte ptr [ecx]
add     [eax], edx
and     byte ptr [ecx], 0
cmp     dword ptr [eax], 0F0h
mov     dword ptr [eax+4], 0F1h
jnz     short locret_10006417
inc     dword_1000BEDC
cmp     dword_1000BEDC, 20h
jnz     short locret_10006417
push    10h
call    sub_100062BA
pop     ecx

locret_10006417:
retn
sub_100063D3 endp



; Attributes: bp-based frame

sub_10006418 proc near

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    ecx
push    ecx
push    ebx
push    esi
mov     esi, off_1000B840
push    edi

loc_10006426:
mov     edx, [esi+10h]
cmp     edx, 0FFFFFFFFh
jz      loc_100064D1
mov     edi, [esi+8]
lea     ecx, [esi+2018h]
mov     eax, edi
sub     eax, esi
sub     eax, 18h
sar     eax, 3
shl     eax, 0Ch
add     eax, edx
cmp     edi, ecx
mov     [ebp+var_4], eax
jnb     short loc_1000648B

loc_10006451:
mov     ecx, [edi]
mov     ebx, [ebp+arg_0]
cmp     ecx, ebx
jl      short loc_10006474
cmp     [edi+4], ebx
jbe     short loc_10006474
push    ebx
push    ecx
push    eax
call    sub_10006620
add     esp, 0Ch
test    eax, eax
jnz     short loc_100064E3
mov     eax, [ebp+var_4]
mov     [edi+4], ebx

loc_10006474:
add     edi, 8
lea     ecx, [esi+2018h]
add     eax, 1000h
cmp     edi, ecx
mov     [ebp+var_4], eax
jb      short loc_10006451
jmp     short loc_1000648E

loc_1000648B:
mov     ebx, [ebp+arg_0]

loc_1000648E:
mov     eax, [esi+8]
mov     ecx, [esi+10h]
lea     edi, [esi+18h]
mov     [ebp+var_8], eax
cmp     edi, eax
mov     [ebp+var_4], ecx
jnb     short loc_100064D4

loc_100064A1:
mov     eax, [edi]
cmp     eax, ebx
jl      short loc_100064C0
cmp     [edi+4], ebx
jbe     short loc_100064C0
push    ebx
push    eax
push    [ebp+var_4]
call    sub_10006620
add     esp, 0Ch
test    eax, eax
jnz     short loc_100064E3
mov     [edi+4], ebx

loc_100064C0:
add     [ebp+var_4], 1000h
add     edi, 8
cmp     edi, [ebp+var_8]
jb      short loc_100064A1
jmp     short loc_100064D4

loc_100064D1:
mov     ebx, [ebp+arg_0]

loc_100064D4:
mov     esi, [esi]
cmp     esi, off_1000B840
jz      short loc_100064F3
jmp     loc_10006426

loc_100064E3:
mov     off_1000B840, esi
sub     [edi], ebx
mov     [esi+8], edi
jmp     loc_1000661B

loc_100064F3:
mov     eax, offset off_10009820
mov     edi, eax

loc_100064FA:
cmp     dword ptr [edi+10h], 0FFFFFFFFh
jz      short loc_10006506
cmp     dword ptr [edi+0Ch], 0
jnz     short loc_10006512

loc_10006506:
mov     edi, [edi]
cmp     edi, eax
jz      loc_100065E7
jmp     short loc_100064FA

loc_10006512:
mov     ebx, [edi+0Ch]
and     [ebp+var_4], 0
mov     esi, ebx
mov     eax, ebx
sub     esi, edi
sub     esi, 18h
sar     esi, 3
shl     esi, 0Ch
add     esi, [edi+10h]
cmp     dword ptr [ebx], 0FFFFFFFFh
jnz     short loc_10006541

loc_10006530:
cmp     [ebp+var_4], 10h
jge     short loc_10006541
add     eax, 8
inc     [ebp+var_4]
cmp     dword ptr [eax], 0FFFFFFFFh
jz      short loc_10006530

loc_10006541:
mov     eax, [ebp+var_4]
push    4               ; flProtect
shl     eax, 0Ch
push    1000h           ; flAllocationType
push    eax             ; dwSize
push    esi             ; lpAddress
mov     [ebp+var_8], eax
call    ds:VirtualAlloc
cmp     eax, esi
jnz     loc_10006619
push    0
push    [ebp+var_8]
push    esi
call    sub_10006C80
mov     edx, [ebp+var_4]
add     esp, 0Ch
test    edx, edx
mov     ecx, ebx
jle     short loc_100065A8
lea     eax, [esi+4]
mov     [ebp+var_4], edx

loc_1000657E:
or      byte ptr [eax+0F4h], 0FFh
lea     edx, [eax+4]
mov     [eax-4], edx
mov     edx, 0F0h
mov     [eax], edx
mov     [ecx], edx
mov     dword ptr [ecx+4], 0F1h
add     eax, 1000h
add     ecx, 8
dec     [ebp+var_4]
jnz     short loc_1000657E

loc_100065A8:
mov     off_1000B840, edi
lea     eax, [edi+2018h]

loc_100065B4:
cmp     ecx, eax
jnb     short loc_100065C4
cmp     dword ptr [ecx], 0FFFFFFFFh
jz      short loc_100065C2
add     ecx, 8
jmp     short loc_100065B4

loc_100065C2:
cmp     ecx, eax

loc_100065C4:
sbb     eax, eax
and     eax, ecx
mov     [edi+0Ch], eax
mov     eax, [ebp+arg_0]
mov     [esi+8], al
mov     [edi+8], ebx
sub     [ebx], eax
sub     [esi+4], eax
lea     ecx, [esi+eax+8]
lea     eax, [esi+100h]
mov     [esi], ecx
jmp     short loc_1000661B

loc_100065E7:
call    sub_10006120
test    eax, eax
jz      short loc_10006619
mov     ecx, [eax+10h]
mov     [ecx+8], bl
lea     edx, [ecx+ebx+8]
mov     off_1000B840, eax
mov     [ecx], edx
mov     edx, 0F0h
sub     edx, ebx
mov     [ecx+4], edx
movzx   edx, bl
sub     [eax+18h], edx
lea     eax, [ecx+100h]
jmp     short loc_1000661B

loc_10006619:
xor     eax, eax

loc_1000661B:
pop     edi
pop     esi
pop     ebx
leave
retn
sub_10006418 endp



; Attributes: bp-based frame

sub_10006620 proc near

var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
push    ecx
mov     ecx, [ebp+arg_0]
mov     edx, [ebp+arg_8]
push    ebx
push    esi
mov     esi, [ecx+4]
push    edi
mov     edi, [ecx]
lea     ebx, [ecx+0F8h]
cmp     esi, edx
mov     [ebp+var_4], edi
mov     eax, edi
mov     [ebp+arg_0], ebx
jb      short loc_10006665
lea     eax, [edi+edx]
mov     [edi], dl
cmp     eax, ebx
jnb     short loc_10006654
add     [ecx], edx
sub     [ecx+4], edx
jmp     short loc_1000665D

loc_10006654:
and     dword ptr [ecx+4], 0
lea     eax, [ecx+8]
mov     [ecx], eax

loc_1000665D:
lea     eax, [edi+8]
jmp     loc_10006733

loc_10006665:
add     esi, edi
cmp     byte ptr [esi], 0
jz      short loc_1000666E
mov     eax, esi

loc_1000666E:
lea     esi, [eax+edx]
cmp     esi, ebx
jnb     short loc_100066B8

loc_10006675:
mov     bl, [eax]
test    bl, bl
jnz     short loc_100066AB
push    1
lea     ebx, [eax+1]
pop     esi

loc_10006681:
cmp     byte ptr [ebx], 0
jnz     short loc_1000668A
inc     ebx
inc     esi
jmp     short loc_10006681

loc_1000668A:
cmp     esi, edx
jnb     short loc_100066DC
cmp     eax, [ebp+var_4]
jnz     short loc_10006698
mov     [ecx+4], esi
jmp     short loc_100066A4

loc_10006698:
sub     [ebp+arg_4], esi
cmp     [ebp+arg_4], edx
jb      loc_1000673D

loc_100066A4:
mov     edi, [ebp+var_4]
mov     eax, ebx
jmp     short loc_100066B0

loc_100066AB:
movzx   esi, bl
add     eax, esi

loc_100066B0:
lea     esi, [eax+edx]
cmp     esi, [ebp+arg_0]
jb      short loc_10006675

loc_100066B8:
lea     esi, [ecx+8]

loc_100066BB:
cmp     esi, edi
jnb     short loc_1000673D
lea     eax, [esi+edx]
cmp     eax, [ebp+arg_0]
jnb     short loc_1000673D
mov     al, [esi]
test    al, al
jnz     short loc_1000670D
push    1
lea     ebx, [esi+1]
pop     eax

loc_100066D3:
cmp     byte ptr [ebx], 0
jnz     short loc_100066FD
inc     ebx
inc     eax
jmp     short loc_100066D3

loc_100066DC:
lea     ebx, [eax+edx]
cmp     ebx, [ebp+arg_0]
jnb     short loc_100066ED
sub     esi, edx
mov     [ecx], ebx
mov     [ecx+4], esi
jmp     short loc_100066F6

loc_100066ED:
and     dword ptr [ecx+4], 0
lea     esi, [ecx+8]
mov     [ecx], esi

loc_100066F6:
mov     [eax], dl
add     eax, 8
jmp     short loc_10006733

loc_100066FD:
cmp     eax, edx
jnb     short loc_10006714
sub     [ebp+arg_4], eax
cmp     [ebp+arg_4], edx
jb      short loc_1000673D
mov     esi, ebx
jmp     short loc_100066BB

loc_1000670D:
movzx   eax, al
add     esi, eax
jmp     short loc_100066BB

loc_10006714:
lea     ebx, [esi+edx]
cmp     ebx, [ebp+arg_0]
jnb     short loc_10006725
sub     eax, edx
mov     [ecx], ebx
mov     [ecx+4], eax
jmp     short loc_1000672E

loc_10006725:
and     dword ptr [ecx+4], 0
lea     eax, [ecx+8]
mov     [ecx], eax

loc_1000672E:
mov     [esi], dl
lea     eax, [esi+8]

loc_10006733:
imul    ecx, 0Fh
shl     eax, 4
sub     eax, ecx
jmp     short loc_1000673F

loc_1000673D:
xor     eax, eax

loc_1000673F:
pop     edi
pop     esi
pop     ebx
leave
retn
sub_10006620 endp




sub_10006744 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch

push    ebx
xor     ebx, ebx
cmp     dword_1000BEE0, ebx
push    esi
push    edi
jnz     short loc_10006793
push    offset LibFileName ; "user32.dll"
call    ds:LoadLibraryA
mov     edi, eax
cmp     edi, ebx
jz      short loc_100067C9
mov     esi, ds:GetProcAddress
push    offset ProcName ; "MessageBoxA"
push    edi             ; hModule
call    esi ; GetProcAddress
test    eax, eax
mov     dword_1000BEE0, eax
jz      short loc_100067C9
push    offset aGetactivewindo ; "GetActiveWindow"
push    edi             ; hModule
call    esi ; GetProcAddress
push    offset aGetlastactivep ; "GetLastActivePopup"
push    edi             ; hModule
mov     dword_1000BEE4, eax
call    esi ; GetProcAddress
mov     dword_1000BEE8, eax

loc_10006793:
mov     eax, dword_1000BEE4
test    eax, eax
jz      short loc_100067B2
call    eax ; dword_1000BEE4
mov     ebx, eax
test    ebx, ebx
jz      short loc_100067B2
mov     eax, dword_1000BEE8
test    eax, eax
jz      short loc_100067B2
push    ebx
call    eax ; dword_1000BEE8
mov     ebx, eax

loc_100067B2:
push    [esp+0Ch+arg_8]
push    [esp+10h+arg_4]
push    [esp+14h+arg_0]
push    ebx
call    dword_1000BEE0

loc_100067C5:
pop     edi
pop     esi
pop     ebx
retn

loc_100067C9:
xor     eax, eax
jmp     short loc_100067C5
sub_10006744 endp

align 10h



sub_100067D0 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch

mov     ecx, [esp+arg_8]
push    edi
test    ecx, ecx
jz      short loc_10006853
push    esi
push    ebx
mov     ebx, ecx
mov     esi, [esp+0Ch+arg_4]
test    esi, 3
mov     edi, [esp+0Ch+arg_0]
jnz     short loc_100067F4
shr     ecx, 2
jnz     short loc_10006861
jmp     short loc_10006815

loc_100067F4:
mov     al, [esi]
inc     esi
mov     [edi], al
inc     edi
dec     ecx
jz      short loc_10006822
test    al, al
jz      short loc_1000682A
test    esi, 3
jnz     short loc_100067F4
mov     ebx, ecx
shr     ecx, 2
jnz     short loc_10006861

loc_10006810:
and     ebx, 3
jz      short loc_10006822

loc_10006815:
mov     al, [esi]
inc     esi
mov     [edi], al
inc     edi
test    al, al
jz      short loc_1000684E
dec     ebx
jnz     short loc_10006815

loc_10006822:
mov     eax, [esp+0Ch+arg_0]
pop     ebx
pop     esi
pop     edi
retn

loc_1000682A:
test    edi, 3
jz      short loc_10006844

loc_10006832:
mov     [edi], al
inc     edi
dec     ecx
jz      loc_100068C6
test    edi, 3
jnz     short loc_10006832

loc_10006844:
mov     ebx, ecx
shr     ecx, 2
jnz     short loc_100068B7

loc_1000684B:
mov     [edi], al
inc     edi

loc_1000684E:
dec     ebx
jnz     short loc_1000684B
pop     ebx
pop     esi

loc_10006853:
mov     eax, [esp+4+arg_0]
pop     edi
retn

loc_10006859:
mov     [edi], edx
add     edi, 4
dec     ecx
jz      short loc_10006810

loc_10006861:
mov     edx, 7EFEFEFFh
mov     eax, [esi]
add     edx, eax
xor     eax, 0FFFFFFFFh
xor     eax, edx
mov     edx, [esi]
add     esi, 4
test    eax, 81010100h
jz      short loc_10006859
test    dl, dl
jz      short loc_100068AB
test    dh, dh
jz      short loc_100068A1
test    edx, 0FF0000h
jz      short loc_10006897
test    edx, 0FF000000h
jnz     short loc_10006859
mov     [edi], edx
jmp     short loc_100068AF

loc_10006897:
and     edx, 0FFFFh
mov     [edi], edx
jmp     short loc_100068AF

loc_100068A1:
and     edx, 0FFh
mov     [edi], edx
jmp     short loc_100068AF

loc_100068AB:
xor     edx, edx
mov     [edi], edx

loc_100068AF:
add     edi, 4
xor     eax, eax
dec     ecx
jz      short loc_100068C1

loc_100068B7:
xor     eax, eax

loc_100068B9:
mov     [edi], eax
add     edi, 4
dec     ecx
jnz     short loc_100068B9

loc_100068C1:
and     ebx, 3
jnz     short loc_1000684B

loc_100068C6:
mov     eax, [esp+0Ch+arg_0]
pop     ebx
pop     esi
pop     edi
retn
sub_100067D0 endp




sub_100068CE proc near

arg_0= dword ptr  4

push    esi
call    sub_1000694A
mov     ecx, [esp+4+arg_0]
xor     esi, esi
mov     [eax], ecx
mov     eax, offset unk_1000B850

loc_100068E1:
cmp     ecx, [eax]
jz      short loc_10006907
add     eax, 8
inc     esi
cmp     eax, offset unk_1000B9B8
jl      short loc_100068E1
cmp     ecx, 13h
jb      short loc_10006917
cmp     ecx, 24h
ja      short loc_10006917
call    sub_10006941
mov     dword ptr [eax], 0Dh
pop     esi
retn

loc_10006907:
call    sub_10006941
mov     ecx, dword_1000B854[esi*8]
pop     esi
mov     [eax], ecx
retn

loc_10006917:
cmp     ecx, 0BCh
jb      short loc_10006934
cmp     ecx, 0CAh
ja      short loc_10006934
call    sub_10006941
mov     dword ptr [eax], 8
pop     esi
retn

loc_10006934:
call    sub_10006941
mov     dword ptr [eax], 16h
pop     esi
retn
sub_100068CE endp




sub_10006941 proc near
call    sub_1000363C
add     eax, 8
retn
sub_10006941 endp




sub_1000694A proc near
call    sub_1000363C
add     eax, 0Ch
retn
sub_1000694A endp




sub_10006953 proc near

arg_0= dword ptr  4

mov     ecx, [esp+arg_0]
push    esi
cmp     ecx, uNumber
push    edi
jnb     short loc_100069B9
mov     eax, ecx
sar     eax, 5
lea     edi, dword_1000D2E0[eax*4]
mov     eax, ecx
and     eax, 1Fh
lea     esi, [eax+eax*8]
mov     eax, [edi]
shl     esi, 2
add     eax, esi
test    byte ptr [eax+4], 1
jz      short loc_100069B9
cmp     dword ptr [eax], 0FFFFFFFFh
jz      short loc_100069B9
cmp     dword_1000BD20, 1
jnz     short loc_100069AF
xor     eax, eax
sub     ecx, eax
jz      short loc_100069A6
dec     ecx
jz      short loc_100069A1
dec     ecx
jnz     short loc_100069AF
push    eax
push    0FFFFFFF4h
jmp     short loc_100069A9

loc_100069A1:
push    eax
push    0FFFFFFF5h
jmp     short loc_100069A9

loc_100069A6:           ; hHandle
push    eax
push    0FFFFFFF6h      ; nStdHandle

loc_100069A9:
call    ds:SetStdHandle

loc_100069AF:
mov     eax, [edi]
or      dword ptr [eax+esi], 0FFFFFFFFh
xor     eax, eax
jmp     short loc_100069CF

loc_100069B9:
call    sub_10006941
mov     dword ptr [eax], 9
call    sub_1000694A
and     dword ptr [eax], 0
or      eax, 0FFFFFFFFh

loc_100069CF:
pop     edi
pop     esi
retn
sub_10006953 endp




sub_100069D2 proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
cmp     eax, uNumber
jnb     short loc_100069FD
mov     ecx, eax
and     eax, 1Fh
sar     ecx, 5
lea     eax, [eax+eax*8]
mov     ecx, dword_1000D2E0[ecx*4]
test    byte ptr [ecx+eax*4+4], 1
lea     eax, [ecx+eax*4]
jz      short loc_100069FD
mov     eax, [eax]
retn

loc_100069FD:
call    sub_10006941
mov     dword ptr [eax], 9
call    sub_1000694A
and     dword ptr [eax], 0
or      eax, 0FFFFFFFFh
retn
sub_100069D2 endp




sub_10006A14 proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
push    ebx
mov     ecx, eax
and     eax, 1Fh
sar     ecx, 5
push    esi
push    edi
mov     esi, dword_1000D2E0[ecx*4]
lea     ebx, dword_1000D2E0[ecx*4]
lea     edi, [eax+eax*8]
shl     edi, 2
add     esi, edi
cmp     dword ptr [esi+8], 0
jnz     short loc_10006A62
push    11h
call    sub_100048EA
cmp     dword ptr [esi+8], 0
pop     ecx
jnz     short loc_10006A5A
lea     eax, [esi+0Ch]
push    eax             ; lpCriticalSection
call    ds:InitializeCriticalSection
inc     dword ptr [esi+8]

loc_10006A5A:
push    11h
call    sub_1000494B
pop     ecx

loc_10006A62:
mov     eax, [ebx]
lea     eax, [eax+edi+0Ch]
push    eax             ; lpCriticalSection
call    ds:EnterCriticalSection
pop     edi
pop     esi
pop     ebx
retn
sub_10006A14 endp




sub_10006A73 proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
mov     ecx, eax
and     eax, 1Fh
sar     ecx, 5
lea     eax, [eax+eax*8]
mov     ecx, dword_1000D2E0[ecx*4]
lea     eax, [ecx+eax*4+0Ch]
push    eax             ; lpCriticalSection
call    ds:LeaveCriticalSection
retn
sub_10006A73 endp

; START OF FUNCTION CHUNK FOR sub_10004574

loc_10006A95:
push    ebx
push    edi
push    2
xor     ebx, ebx
call    sub_100048EA
pop     ecx
push    3
pop     edi
cmp     dword_1000D2C0, edi
jle     short loc_10006B09
push    esi

loc_10006AAD:
mov     eax, dword_1000C2A8
mov     esi, edi
shl     esi, 2
mov     eax, [esi+eax]
test    eax, eax
jz      short loc_10006AFF
test    byte ptr [eax+0Ch], 83h
jz      short loc_10006AD1
push    eax
call    sub_10007725
cmp     eax, 0FFFFFFFFh
pop     ecx
jz      short loc_10006AD1
inc     ebx

loc_10006AD1:
cmp     edi, 14h
jl      short loc_10006AFF
mov     eax, dword_1000C2A8
mov     eax, [esi+eax]
add     eax, 20h
push    eax             ; lpCriticalSection
call    ds:DeleteCriticalSection
mov     eax, dword_1000C2A8
push    dword ptr [esi+eax] ; lpMem
call    sub_10004A9D
mov     eax, dword_1000C2A8
pop     ecx
and     dword ptr [esi+eax], 0

loc_10006AFF:
inc     edi
cmp     edi, dword_1000D2C0
jl      short loc_10006AAD
pop     esi

loc_10006B09:
push    2
call    sub_1000494B
pop     ecx
mov     eax, ebx
pop     edi
pop     ebx
retn
; END OF FUNCTION CHUNK FOR sub_10004574



sub_10006B16 proc near

arg_0= dword ptr  4

push    esi
mov     esi, [esp+4+arg_0]
push    esi
call    sub_10006B44
test    eax, eax
pop     ecx
jz      short loc_10006B2B
or      eax, 0FFFFFFFFh
pop     esi
retn

loc_10006B2B:
test    byte ptr [esi+0Dh], 40h
jz      short loc_10006B40
push    dword ptr [esi+10h]
call    sub_100077A2
neg     eax
pop     ecx
pop     esi
sbb     eax, eax
retn

loc_10006B40:
xor     eax, eax
pop     esi
retn
sub_10006B16 endp




sub_10006B44 proc near

arg_0= dword ptr  4

push    ebx
push    esi
mov     esi, [esp+8+arg_0]
xor     ebx, ebx
push    edi
mov     eax, [esi+0Ch]
mov     ecx, eax
and     ecx, 3
cmp     cl, 2
jnz     short loc_10006B91
test    ax, 108h
jz      short loc_10006B91
mov     eax, [esi+8]
mov     edi, [esi]
sub     edi, eax
test    edi, edi
jle     short loc_10006B91
push    edi
push    eax
push    dword ptr [esi+10h]
call    sub_1000426F
add     esp, 0Ch
cmp     eax, edi
jnz     short loc_10006B8A
mov     eax, [esi+0Ch]
test    al, 80h
jz      short loc_10006B91
and     al, 0FDh
mov     [esi+0Ch], eax
jmp     short loc_10006B91

loc_10006B8A:
or      dword ptr [esi+0Ch], 20h
or      ebx, 0FFFFFFFFh

loc_10006B91:
mov     eax, [esi+8]
and     dword ptr [esi+4], 0
mov     [esi], eax
pop     edi
mov     eax, ebx
pop     esi
pop     ebx
retn
sub_10006B44 endp




sub_10006BA0 proc near
push    1
call    sub_10006BA9
pop     ecx
retn
sub_10006BA0 endp




sub_10006BA9 proc near

arg_0= dword ptr  4

push    ebx
push    esi
push    edi
push    2
xor     ebx, ebx
xor     edi, edi
call    sub_100048EA
xor     esi, esi
pop     ecx
cmp     dword_1000D2C0, esi
jle     short loc_10006C36

loc_10006BC2:
mov     eax, dword_1000C2A8
mov     eax, [eax+esi*4]
test    eax, eax
jz      short loc_10006C2D
test    byte ptr [eax+0Ch], 83h
jz      short loc_10006C2D
push    eax
push    esi
call    sub_100045B7
mov     eax, dword_1000C2A8
pop     ecx
pop     ecx
mov     eax, [eax+esi*4]
mov     ecx, [eax+0Ch]
test    cl, 83h
jz      short loc_10006C1D
cmp     [esp+0Ch+arg_0], 1
jnz     short loc_10006C03
push    eax
call    sub_10006B16
cmp     eax, 0FFFFFFFFh
pop     ecx
jz      short loc_10006C1D
inc     ebx
jmp     short loc_10006C1D

loc_10006C03:
cmp     [esp+0Ch+arg_0], 0
jnz     short loc_10006C1D
test    cl, 2
jz      short loc_10006C1D
push    eax
call    sub_10006B16
cmp     eax, 0FFFFFFFFh
pop     ecx
jnz     short loc_10006C1D
or      edi, eax

loc_10006C1D:
mov     eax, dword_1000C2A8
push    dword ptr [eax+esi*4]
push    esi
call    sub_10004609
pop     ecx
pop     ecx

loc_10006C2D:
inc     esi
cmp     esi, dword_1000D2C0
jl      short loc_10006BC2

loc_10006C36:
push    2
call    sub_1000494B
cmp     [esp+10h+arg_0], 1
pop     ecx
mov     eax, ebx
jz      short loc_10006C49
mov     eax, edi

loc_10006C49:
pop     edi
pop     esi
pop     ebx
retn
sub_10006BA9 endp




sub_10006C4D proc near
push    2               ; NumberOfBytesWritten
call    sub_10002B44
pop     ecx
retn
sub_10006C4D endp




sub_10006C56 proc near

arg_0= dword ptr  4

mov     eax, dword_1000BF18
test    eax, eax
jz      short loc_10006C6E
push    [esp+arg_0]
call    eax ; dword_1000BF18
test    eax, eax
pop     ecx
jz      short loc_10006C6E
push    1
pop     eax
retn

loc_10006C6E:
xor     eax, eax
retn
sub_10006C56 endp

align 10h



sub_10006C80 proc near

arg_0= dword ptr  4
arg_4= byte ptr  8
arg_8= dword ptr  0Ch

mov     edx, [esp+arg_8]
mov     ecx, [esp+arg_0]
test    edx, edx
jz      short loc_10006CD3
xor     eax, eax
mov     al, [esp+arg_4]
push    edi
mov     edi, ecx
cmp     edx, 4
jb      short loc_10006CC7
neg     ecx
and     ecx, 3
jz      short loc_10006CA9
sub     edx, ecx

loc_10006CA3:
mov     [edi], al
inc     edi
dec     ecx
jnz     short loc_10006CA3

loc_10006CA9:
mov     ecx, eax
shl     eax, 8
add     eax, ecx
mov     ecx, eax
shl     eax, 10h
add     eax, ecx
mov     ecx, edx
and     edx, 3
shr     ecx, 2
jz      short loc_10006CC7
rep stosd
test    edx, edx
jz      short loc_10006CCD

loc_10006CC7:
mov     [edi], al
inc     edi
dec     edx
jnz     short loc_10006CC7

loc_10006CCD:
mov     eax, [esp+4+arg_0]
pop     edi
retn

loc_10006CD3:
mov     eax, [esp+arg_0]
retn
sub_10006C80 endp



; Attributes: bp-based frame

; int __cdecl sub_10006CD8(PVOID TargetFrame)
sub_10006CD8 proc near

TargetFrame= dword ptr  8

push    ebp
mov     ebp, esp
push    ebx
push    esi
push    edi
push    ebp
push    0               ; ReturnValue
push    0               ; ExceptionRecord
push    offset loc_10006CF0 ; TargetIp
push    [ebp+TargetFrame] ; TargetFrame
call    RtlUnwind

loc_10006CF0:
pop     ebp
pop     edi
pop     esi
pop     ebx
mov     esp, ebp
pop     ebp
retn
sub_10006CD8 endp




sub_10006CF8 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_C= dword ptr  10h

mov     ecx, [esp+arg_0]
test    dword ptr [ecx+4], 6
mov     eax, 1
jz      short locret_10006D19
mov     eax, [esp+arg_4]
mov     edx, [esp+arg_C]
mov     [edx], eax
mov     eax, 3

locret_10006D19:
retn
sub_10006CF8 endp




sub_10006D1A proc near

var_14= dword ptr -14h
arg_0= dword ptr  4
arg_4= dword ptr  8

push    ebx
push    esi
push    edi
mov     eax, [esp+0Ch+arg_0]
push    eax
push    0FFFFFFFEh
push    offset sub_10006CF8
push    large dword ptr fs:0
mov     large fs:0, esp

loc_10006D37:
mov     eax, [esp+1Ch+arg_0]
mov     ebx, [eax+8]
mov     esi, [eax+0Ch]
cmp     esi, 0FFFFFFFFh
jz      short loc_10006D74
cmp     esi, [esp+1Ch+arg_4]
jz      short loc_10006D74
lea     esi, [esi+esi*2]
mov     ecx, [ebx+esi*4]
mov     [esp+1Ch+var_14], ecx
mov     [eax+0Ch], ecx
cmp     dword ptr [ebx+esi*4+4], 0
jnz     short loc_10006D72
push    101h
mov     eax, [ebx+esi*4+8]
call    sub_10006DAE
call    dword ptr [ebx+esi*4+8]

loc_10006D72:
jmp     short loc_10006D37

loc_10006D74:
pop     large dword ptr fs:0
add     esp, 0Ch
pop     edi
pop     esi
pop     ebx
retn
sub_10006D1A endp

xor     eax, eax
mov     ecx, large fs:0
cmp     dword ptr [ecx+4], offset sub_10006CF8
jnz     short locret_10006DA4
mov     edx, [ecx+0Ch]
mov     edx, [edx+0Ch]
cmp     [ecx+8], edx
jnz     short locret_10006DA4
mov     eax, 1

locret_10006DA4:
retn
push    ebx
push    ecx
mov     ebx, offset unk_1000BAD0
jmp     short loc_10006DB8



sub_10006DAE proc near
push    ebx
push    ecx
mov     ebx, offset unk_1000BAD0
mov     ecx, [ebp+8]

loc_10006DB8:
mov     [ebx+8], ecx
mov     [ebx+4], eax
mov     [ebx+0Ch], ebp
pop     ecx
pop     ebx
retn    4
sub_10006DAE endp

align 4
push    esi
inc     ebx
xor     dh, [eax]
pop     eax
inc     ebx
xor     [eax], dh


; Attributes: bp-based frame

; int __cdecl sub_10006DD0(int, PVOID TargetFrame, int)
sub_10006DD0 proc near

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
TargetFrame= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
sub     esp, 8
push    ebx
push    esi
push    edi
push    ebp
cld
mov     ebx, [ebp+TargetFrame]
mov     eax, [ebp+arg_0]
test    dword ptr [eax+4], 6
jnz     loc_10006E70
mov     [ebp+var_8], eax
mov     eax, [ebp+arg_8]
mov     [ebp+var_4], eax
lea     eax, [ebp+var_8]
mov     [ebx-4], eax
mov     esi, [ebx+0Ch]
mov     edi, [ebx+8]

loc_10006E03:
cmp     esi, 0FFFFFFFFh
jz      short loc_10006E69
lea     ecx, [esi+esi*2]
cmp     dword ptr [edi+ecx*4+4], 0
jz      short loc_10006E57
push    esi
push    ebp
lea     ebp, [ebx+10h]
call    dword ptr [edi+ecx*4+4]
pop     ebp
pop     esi
mov     ebx, [ebp+TargetFrame]
or      eax, eax
jz      short loc_10006E57
js      short loc_10006E62
mov     edi, [ebx+8]
push    ebx             ; TargetFrame
call    sub_10006CD8
add     esp, 4
lea     ebp, [ebx+10h]
push    esi
push    ebx
call    sub_10006D1A
add     esp, 8
lea     ecx, [esi+esi*2]
push    1
mov     eax, [edi+ecx*4+8]
call    sub_10006DAE
mov     eax, [edi+ecx*4]
mov     [ebx+0Ch], eax
call    dword ptr [edi+ecx*4+8]

loc_10006E57:
mov     edi, [ebx+8]
lea     ecx, [esi+esi*2]
mov     esi, [edi+ecx*4]
jmp     short loc_10006E03

loc_10006E62:
mov     eax, 0
jmp     short loc_10006E85

loc_10006E69:
mov     eax, 1
jmp     short loc_10006E85

loc_10006E70:
push    ebp
lea     ebp, [ebx+10h]
push    0FFFFFFFFh
push    ebx
call    sub_10006D1A
add     esp, 8
pop     ebp
mov     eax, 1

loc_10006E85:
pop     ebp
pop     edi
pop     esi
pop     ebx
mov     esp, ebp
pop     ebp
retn
sub_10006DD0 endp

push    ebp
mov     ecx, [esp+8]
mov     ebp, [ecx]
mov     eax, [ecx+1Ch]
push    eax
mov     eax, [ecx+18h]
push    eax
call    sub_10006D1A
add     esp, 8
pop     ebp
retn    4


; Attributes: bp-based frame

; int __cdecl sub_10006EA8(LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest, UINT CodePage, int)
sub_10006EA8 proc near

var_28= dword ptr -28h
lpWideCharStr= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
ms_exc= CPPEH_RECORD ptr -18h
Locale= dword ptr  8
dwMapFlags= dword ptr  0Ch
lpSrcStr= dword ptr  10h
cchSrc= dword ptr  14h
lpDestStr= dword ptr  18h
cchDest= dword ptr  1Ch
CodePage= dword ptr  20h
arg_1C= dword ptr  24h

push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset stru_10008578
push    offset sub_10006DD0
mov     eax, large fs:0
push    eax
mov     large fs:0, esp
sub     esp, 1Ch
push    ebx
push    esi
push    edi
mov     [ebp+ms_exc.old_esp], esp
xor     edi, edi
cmp     dword_1000BF20, edi
jnz     short loc_10006F1E
push    edi             ; cchDest
push    edi             ; lpDestStr
push    1
pop     ebx
push    ebx             ; cchSrc
push    offset SrcStr   ; lpSrcStr
mov     esi, 100h
push    esi             ; dwMapFlags
push    edi             ; Locale
call    ds:LCMapStringW
test    eax, eax
jz      short loc_10006EFC
mov     dword_1000BF20, ebx
jmp     short loc_10006F1E

loc_10006EFC:           ; cchDest
push    edi
push    edi             ; lpDestStr
push    ebx             ; cchSrc
push    offset byte_1000856C ; lpSrcStr
push    esi             ; dwMapFlags
push    edi             ; Locale
call    ds:LCMapStringA
test    eax, eax
jz      loc_10007036
mov     dword_1000BF20, 2

loc_10006F1E:
cmp     [ebp+cchSrc], edi
jle     short loc_10006F33
push    [ebp+cchSrc]
push    [ebp+lpSrcStr]
call    sub_100070CC
pop     ecx
pop     ecx
mov     [ebp+cchSrc], eax

loc_10006F33:
mov     eax, dword_1000BF20
cmp     eax, 2
jnz     short loc_10006F5A
push    [ebp+cchDest]   ; cchDest
push    [ebp+lpDestStr] ; lpDestStr
push    [ebp+cchSrc]    ; cchSrc
push    [ebp+lpSrcStr]  ; lpSrcStr
push    [ebp+dwMapFlags] ; dwMapFlags
push    [ebp+Locale]    ; Locale
call    ds:LCMapStringA
jmp     loc_10007038

loc_10006F5A:
cmp     eax, 1
jnz     loc_10007036
cmp     [ebp+CodePage], edi
jnz     short loc_10006F70
mov     eax, CodePage
mov     [ebp+CodePage], eax

loc_10006F70:           ; cchWideChar
push    edi
push    edi             ; lpWideCharStr
push    [ebp+cchSrc]    ; cbMultiByte
push    [ebp+lpSrcStr]  ; lpMultiByteStr
mov     eax, [ebp+arg_1C]
neg     eax
sbb     eax, eax
and     eax, 8
inc     eax
push    eax             ; dwFlags
push    [ebp+CodePage]  ; CodePage
call    ds:MultiByteToWideChar
mov     ebx, eax
mov     [ebp+var_1C], ebx
cmp     ebx, edi
jz      loc_10007036
mov     [ebp+ms_exc.registration.TryLevel], edi
lea     eax, [ebx+ebx]
add     eax, 3
and     al, 0FCh
call    __alloca_probe
mov     [ebp+ms_exc.old_esp], esp
mov     eax, esp
mov     [ebp+lpWideCharStr], eax
or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
jmp     short loc_10006FCB

loc_10006FB8:
push    1
pop     eax
retn

loc_10006FBC:
mov     esp, [ebp+ms_exc.old_esp]
xor     edi, edi
mov     [ebp+lpWideCharStr], edi
or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
mov     ebx, [ebp+var_1C]

loc_10006FCB:
cmp     [ebp+lpWideCharStr], edi
jz      short loc_10007036
push    ebx             ; cchWideChar
push    [ebp+lpWideCharStr] ; lpWideCharStr
push    [ebp+cchSrc]    ; cbMultiByte
push    [ebp+lpSrcStr]  ; lpMultiByteStr
push    1               ; dwFlags
push    [ebp+CodePage]  ; CodePage
call    ds:MultiByteToWideChar
test    eax, eax
jz      short loc_10007036
push    edi             ; cchDest
push    edi             ; lpDestStr
push    ebx             ; cchSrc
push    [ebp+lpWideCharStr] ; lpSrcStr
push    [ebp+dwMapFlags] ; dwMapFlags
push    [ebp+Locale]    ; Locale
call    ds:LCMapStringW
mov     esi, eax
mov     [ebp+var_28], esi
cmp     esi, edi
jz      short loc_10007036
test    byte ptr [ebp+dwMapFlags+1], 4
jz      short loc_1000704A
cmp     [ebp+cchDest], edi
jz      loc_100070C5
cmp     esi, [ebp+cchDest]
jg      short loc_10007036
push    [ebp+cchDest]   ; cchDest
push    [ebp+lpDestStr] ; lpDestStr
push    ebx             ; cchSrc
push    [ebp+lpWideCharStr] ; lpSrcStr
push    [ebp+dwMapFlags] ; dwMapFlags
push    [ebp+Locale]    ; Locale
call    ds:LCMapStringW
test    eax, eax
jnz     loc_100070C5

loc_10007036:
xor     eax, eax

loc_10007038:
lea     esp, [ebp-38h]
mov     ecx, [ebp+ms_exc.registration.Next]
mov     large fs:0, ecx
pop     edi
pop     esi
pop     ebx
leave
retn

loc_1000704A:
mov     [ebp+ms_exc.registration.TryLevel], 1
lea     eax, [esi+esi]
add     eax, 3
and     al, 0FCh
call    __alloca_probe
mov     [ebp+ms_exc.old_esp], esp
mov     ebx, esp
mov     [ebp+var_20], ebx
or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
jmp     short loc_1000707E

loc_1000706C:
push    1
pop     eax
retn

loc_10007070:
mov     esp, [ebp+ms_exc.old_esp]
xor     edi, edi
xor     ebx, ebx
or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
mov     esi, [ebp+var_28]

loc_1000707E:
cmp     ebx, edi
jz      short loc_10007036
push    esi             ; cchDest
push    ebx             ; lpDestStr
push    [ebp+var_1C]    ; cchSrc
push    [ebp+lpWideCharStr] ; lpSrcStr
push    [ebp+dwMapFlags] ; dwMapFlags
push    [ebp+Locale]    ; Locale
call    ds:LCMapStringW
test    eax, eax
jz      short loc_10007036
cmp     [ebp+cchDest], edi
push    edi             ; lpUsedDefaultChar
push    edi             ; lpDefaultChar
jnz     short loc_100070A5
push    edi
push    edi
jmp     short loc_100070AB

loc_100070A5:           ; cbMultiByte
push    [ebp+cchDest]
push    [ebp+lpDestStr] ; lpMultiByteStr

loc_100070AB:           ; cchWideChar
push    esi
push    ebx             ; lpWideCharStr
push    220h            ; dwFlags
push    [ebp+CodePage]  ; CodePage
call    ds:WideCharToMultiByte
mov     esi, eax
cmp     esi, edi
jz      loc_10007036

loc_100070C5:
mov     eax, esi
jmp     loc_10007038
sub_10006EA8 endp




sub_100070CC proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     edx, [esp+arg_4]
mov     eax, [esp+arg_0]
test    edx, edx
push    esi
lea     ecx, [edx-1]
jz      short loc_100070E9

loc_100070DC:
cmp     byte ptr [eax], 0
jz      short loc_100070E9
inc     eax
mov     esi, ecx
dec     ecx
test    esi, esi
jnz     short loc_100070DC

loc_100070E9:
cmp     byte ptr [eax], 0
pop     esi
jnz     short loc_100070F4
sub     eax, [esp+arg_0]
retn

loc_100070F4:
mov     eax, edx
retn
sub_100070CC endp



; Attributes: bp-based frame

; int __cdecl sub_100070F7(DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType, UINT CodePage, LCID Locale, int)
sub_100070F7 proc near

var_24= dword ptr -24h
cchWideChar= dword ptr -20h
CharType= word ptr -1Ch
ms_exc= CPPEH_RECORD ptr -18h
dwInfoType= dword ptr  8
lpSrcStr= dword ptr  0Ch
cchSrc= dword ptr  10h
lpCharType= dword ptr  14h
CodePage= dword ptr  18h
Locale= dword ptr  1Ch
arg_18= dword ptr  20h

push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset stru_10008590
push    offset sub_10006DD0
mov     eax, large fs:0
push    eax
mov     large fs:0, esp
sub     esp, 18h
push    ebx
push    esi
push    edi
mov     [ebp+ms_exc.old_esp], esp
mov     eax, dword_1000BF24
xor     ebx, ebx
cmp     eax, ebx
jnz     short loc_10007166
lea     eax, [ebp+CharType]
push    eax             ; lpCharType
push    1
pop     esi
push    esi             ; cchSrc
push    offset SrcStr   ; lpSrcStr
push    esi             ; dwInfoType
call    ds:GetStringTypeW
test    eax, eax
jz      short loc_10007144
mov     eax, esi
jmp     short loc_10007161

loc_10007144:
lea     eax, [ebp+CharType]
push    eax             ; lpCharType
push    esi             ; cchSrc
push    offset byte_1000856C ; lpSrcStr
push    esi             ; dwInfoType
push    ebx             ; Locale
call    ds:GetStringTypeA
test    eax, eax
jz      loc_1000722C
push    2
pop     eax

loc_10007161:
mov     dword_1000BF24, eax

loc_10007166:
cmp     eax, 2
jnz     short loc_1000718F
mov     eax, [ebp+Locale]
cmp     eax, ebx
jnz     short loc_10007177
mov     eax, dword_1000BF00

loc_10007177:           ; lpCharType
push    [ebp+lpCharType]
push    [ebp+cchSrc]    ; cchSrc
push    [ebp+lpSrcStr]  ; lpSrcStr
push    [ebp+dwInfoType] ; dwInfoType
push    eax             ; Locale
call    ds:GetStringTypeA
jmp     loc_1000722E

loc_1000718F:
cmp     eax, 1
jnz     loc_1000722C
cmp     [ebp+CodePage], ebx
jnz     short loc_100071A5
mov     eax, CodePage
mov     [ebp+CodePage], eax

loc_100071A5:           ; cchWideChar
push    ebx
push    ebx             ; lpWideCharStr
push    [ebp+cchSrc]    ; cbMultiByte
push    [ebp+lpSrcStr]  ; lpMultiByteStr
mov     eax, [ebp+arg_18]
neg     eax
sbb     eax, eax
and     eax, 8
inc     eax
push    eax             ; dwFlags
push    [ebp+CodePage]  ; CodePage
call    ds:MultiByteToWideChar
mov     [ebp+cchWideChar], eax
cmp     eax, ebx
jz      short loc_1000722C
mov     [ebp+ms_exc.registration.TryLevel], ebx
lea     edi, [eax+eax]
mov     eax, edi
add     eax, 3
and     al, 0FCh
call    __alloca_probe
mov     [ebp+ms_exc.old_esp], esp
mov     esi, esp
mov     [ebp+var_24], esi
push    edi
push    ebx
push    esi
call    sub_10006C80
add     esp, 0Ch
jmp     short loc_100071FB

loc_100071F0:
push    1
pop     eax
retn

loc_100071F4:
mov     esp, [ebp+ms_exc.old_esp]
xor     ebx, ebx
xor     esi, esi

loc_100071FB:
or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
cmp     esi, ebx
jz      short loc_1000722C
push    [ebp+cchWideChar] ; cchWideChar
push    esi             ; lpWideCharStr
push    [ebp+cchSrc]    ; cbMultiByte
push    [ebp+lpSrcStr]  ; lpMultiByteStr
push    1               ; dwFlags
push    [ebp+CodePage]  ; CodePage
call    ds:MultiByteToWideChar
cmp     eax, ebx
jz      short loc_1000722C
push    [ebp+lpCharType] ; lpCharType
push    eax             ; cchSrc
push    esi             ; lpSrcStr
push    [ebp+dwInfoType] ; dwInfoType
call    ds:GetStringTypeW
jmp     short loc_1000722E

loc_1000722C:
xor     eax, eax

loc_1000722E:
lea     esp, [ebp-34h]
mov     ecx, [ebp+ms_exc.registration.Next]
mov     large fs:0, ecx
pop     edi
pop     esi
pop     ebx
leave
retn
sub_100070F7 endp




; int __cdecl sub_10007240(WORD CharType)
sub_10007240 proc near

CharType= word ptr  4

push    ebx
xor     ebx, ebx
cmp     dword_1000BF00, ebx
jnz     short loc_1000725E
mov     eax, dword ptr [esp+4+CharType]
cmp     eax, 61h
jl      short loc_100072AD
cmp     eax, 7Ah
jg      short loc_100072AD
sub     eax, 20h
pop     ebx
retn

loc_1000725E:
push    esi
mov     esi, offset Addend
push    edi
push    esi             ; lpAddend
call    ds:InterlockedIncrement
cmp     dword_1000C068, ebx
mov     edi, ds:InterlockedDecrement
jz      short loc_10007288
push    esi             ; lpAddend
call    edi ; InterlockedDecrement
push    13h
call    sub_100048EA
pop     ecx
push    1
pop     ebx

loc_10007288:           ; CharType
push    dword ptr [esp+0Ch+CharType]
call    sub_100072AF
test    ebx, ebx
pop     ecx
mov     dword ptr [esp+0Ch+CharType], eax
jz      short loc_100072A4
push    13h
call    sub_1000494B
pop     ecx
jmp     short loc_100072A7

loc_100072A4:           ; lpAddend
push    esi
call    edi ; InterlockedDecrement

loc_100072A7:
mov     eax, dword ptr [esp+0Ch+CharType]
pop     edi
pop     esi

loc_100072AD:
pop     ebx
retn
sub_10007240 endp



; Attributes: bp-based frame

; int __cdecl sub_100072AF(WORD CharType)
sub_100072AF proc near

DestStr= byte ptr -4
var_3= byte ptr -3
CharType= word ptr  8

push    ebp
mov     ebp, esp
push    ecx
cmp     dword_1000BF00, 0
push    ebx
jnz     short loc_100072DA
mov     eax, dword ptr [ebp+CharType]
cmp     eax, 61h
jl      loc_10007378
cmp     eax, 7Ah
jg      loc_10007378
sub     eax, 20h
jmp     loc_10007378

loc_100072DA:
mov     ebx, dword ptr [ebp+CharType]
cmp     ebx, 100h
jge     short loc_1000730D
cmp     cbMultiByte, 1
jle     short loc_100072FA
push    2               ; int
push    ebx             ; CharType
call    sub_1000737B
pop     ecx
pop     ecx
jmp     short loc_10007305

loc_100072FA:
mov     eax, off_100093B8
mov     al, [eax+ebx*2]
and     eax, 2

loc_10007305:
test    eax, eax
jnz     short loc_1000730D

loc_10007309:
mov     eax, ebx
jmp     short loc_10007378

loc_1000730D:
mov     edx, off_100093B8
mov     eax, ebx
sar     eax, 8
movzx   ecx, al
test    byte ptr [edx+ecx*2+1], 80h
jz      short loc_10007330
and     byte ptr [ebp+0Ah], 0
mov     byte ptr [ebp+CharType], al
mov     byte ptr [ebp+CharType+1], bl
push    2
jmp     short loc_10007339

loc_10007330:
and     byte ptr [ebp+CharType+1], 0
mov     byte ptr [ebp+CharType], bl
push    1

loc_10007339:
pop     eax
lea     ecx, [ebp+DestStr]
push    1               ; int
push    0               ; CodePage
push    3               ; cchDest
push    ecx             ; lpDestStr
push    eax             ; cchSrc
lea     eax, [ebp+CharType]
push    eax             ; lpSrcStr
push    200h            ; dwMapFlags
push    dword_1000BF00  ; Locale
call    sub_10006EA8
add     esp, 20h
test    eax, eax
jz      short loc_10007309
cmp     eax, 1
jnz     short loc_1000736B
movzx   eax, [ebp+DestStr]
jmp     short loc_10007378

loc_1000736B:
movzx   eax, [ebp+var_3]
movzx   ecx, [ebp+DestStr]
shl     eax, 8
or      eax, ecx

loc_10007378:
pop     ebx
leave
retn
sub_100072AF endp



; Attributes: bp-based frame

; int __cdecl sub_1000737B(WORD CharType, int)
sub_1000737B proc near

SrcStr= byte ptr -4
var_3= byte ptr -3
var_2= byte ptr -2
CharType= word ptr  8
arg_2= word ptr  0Ah
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ecx
mov     eax, dword ptr [ebp+CharType]
lea     ecx, [eax+1]
cmp     ecx, 100h
ja      short loc_10007399
mov     ecx, off_100093B8
movzx   eax, word ptr [ecx+eax*2]
jmp     short loc_100073EB

loc_10007399:
mov     ecx, eax
push    esi
mov     esi, off_100093B8
sar     ecx, 8
movzx   edx, cl
test    byte ptr [esi+edx*2+1], 80h
pop     esi
jz      short loc_100073BE
and     [ebp+var_2], 0
mov     [ebp+SrcStr], cl
mov     [ebp+var_3], al
push    2
jmp     short loc_100073C7

loc_100073BE:
and     [ebp+var_3], 0
mov     [ebp+SrcStr], al
push    1

loc_100073C7:
pop     eax
lea     ecx, [ebp+arg_2]
push    1               ; int
push    0               ; Locale
push    0               ; CodePage
push    ecx             ; lpCharType
push    eax             ; cchSrc
lea     eax, [ebp+SrcStr]
push    eax             ; lpSrcStr
push    1               ; dwInfoType
call    sub_100070F7
add     esp, 1Ch
test    eax, eax
jnz     short loc_100073E7
leave
retn

loc_100073E7:
movzx   eax, [ebp+arg_2]

loc_100073EB:
and     eax, [ebp+arg_4]
leave
retn
sub_1000737B endp



; Attributes: bp-based frame

sub_100073F0 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
push    edi
push    esi
mov     esi, [ebp+arg_4]
mov     ecx, [ebp+arg_8]
mov     edi, [ebp+arg_0]
mov     eax, ecx
mov     edx, ecx
add     eax, esi
cmp     edi, esi
jbe     short loc_10007410
cmp     edi, eax
jb      loc_10007588

loc_10007410:
test    edi, 3
jnz     short loc_1000742C
shr     ecx, 2
and     edx, 3
cmp     ecx, 8          ; switch 8 cases
jb      short loc_1000744C
rep movsd               ; jumptable 1000744C default case
jmp     ds:off_10007538[edx*4]

loc_1000742C:
mov     eax, edi
mov     edx, 3
sub     ecx, 4
jb      short loc_10007444
and     eax, 3
add     ecx, eax
jmp     dword ptr ds:(loc_1000744C+4)[eax*4]

loc_10007444:
jmp     dword ptr ds:loc_10007548[ecx*4]
align 4

loc_1000744C:           ; switch jump
jmp     ds:off_100074CC[ecx*4]
align 4
dd offset loc_10007460
dd offset loc_1000748C
dd offset loc_100074B0

loc_10007460:
and     edx, ecx
mov     al, [esi]
mov     [edi], al
mov     al, [esi+1]
mov     [edi+1], al
mov     al, [esi+2]
shr     ecx, 2
mov     [edi+2], al
add     esi, 3
add     edi, 3
cmp     ecx, 8
jb      short loc_1000744C
rep movsd
jmp     ds:off_10007538[edx*4]
align 4

loc_1000748C:
and     edx, ecx
mov     al, [esi]
mov     [edi], al
mov     al, [esi+1]
shr     ecx, 2
mov     [edi+1], al
add     esi, 2
add     edi, 2
cmp     ecx, 8
jb      short loc_1000744C
rep movsd
jmp     ds:off_10007538[edx*4]
align 10h

loc_100074B0:
and     edx, ecx
mov     al, [esi]
mov     [edi], al
inc     esi
shr     ecx, 2
inc     edi
cmp     ecx, 8
jb      short loc_1000744C
rep movsd
jmp     ds:off_10007538[edx*4]
align 4
off_100074CC dd offset loc_1000752F ; jump table for switch statement
dd offset loc_1000751C
dd offset loc_10007514
dd offset loc_1000750C
dd offset loc_10007504
dd offset loc_100074FC
dd offset loc_100074F4
dd offset loc_100074EC

loc_100074EC:           ; jumptable 1000744C case 7
mov     eax, [esi+ecx*4-1Ch]
mov     [edi+ecx*4-1Ch], eax

loc_100074F4:           ; jumptable 1000744C case 6
mov     eax, [esi+ecx*4-18h]
mov     [edi+ecx*4-18h], eax

loc_100074FC:           ; jumptable 1000744C case 5
mov     eax, [esi+ecx*4-14h]
mov     [edi+ecx*4-14h], eax

loc_10007504:           ; jumptable 1000744C case 4
mov     eax, [esi+ecx*4-10h]
mov     [edi+ecx*4-10h], eax

loc_1000750C:           ; jumptable 1000744C case 3
mov     eax, [esi+ecx*4-0Ch]
mov     [edi+ecx*4-0Ch], eax

loc_10007514:           ; jumptable 1000744C case 2
mov     eax, [esi+ecx*4-8]
mov     [edi+ecx*4-8], eax

loc_1000751C:           ; jumptable 1000744C case 1
mov     eax, [esi+ecx*4-4]
mov     [edi+ecx*4-4], eax
lea     eax, ds:0[ecx*4]
add     esi, eax
add     edi, eax

loc_1000752F:           ; jumptable 1000744C case 0
jmp     ds:off_10007538[edx*4]
align 4
off_10007538 dd offset loc_10007548
dd offset loc_10007550
dd offset loc_1000755C
dd offset loc_10007570

loc_10007548:
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
align 10h

loc_10007550:
mov     al, [esi]
mov     [edi], al
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
align 4

loc_1000755C:
mov     al, [esi]
mov     [edi], al
mov     al, [esi+1]
mov     [edi+1], al
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
align 10h

loc_10007570:
mov     al, [esi]
mov     [edi], al
mov     al, [esi+1]
mov     [edi+1], al
mov     al, [esi+2]
mov     [edi+2], al
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
align 4

loc_10007588:
lea     esi, [ecx+esi-4]
lea     edi, [ecx+edi-4]
test    edi, 3
jnz     short loc_100075BC
shr     ecx, 2
and     edx, 3
cmp     ecx, 8
jb      short loc_100075B0
std
rep movsd
cld
jmp     ds:off_100076D0[edx*4] ; jumptable 100075D4 case 0
align 10h

loc_100075B0:
neg     ecx
jmp     ds:off_10007680[ecx*4]
align 4

loc_100075BC:
mov     eax, edi
mov     edx, 3
cmp     ecx, 4          ; switch 4 cases
jb      short loc_100075D4
and     eax, 3          ; jumptable 100075D4 default case
sub     ecx, eax
jmp     dword ptr ds:(loc_100075D4+4)[eax*4]

loc_100075D4:           ; switch jump
jmp     ds:off_100076D0[ecx*4]
align 4
dd offset loc_100075E8
dd offset loc_10007608
dd offset loc_10007630

loc_100075E8:
mov     al, [esi+3]
and     edx, ecx
mov     [edi+3], al
dec     esi
shr     ecx, 2
dec     edi
cmp     ecx, 8
jb      short loc_100075B0
std
rep movsd
cld
jmp     ds:off_100076D0[edx*4] ; jumptable 100075D4 case 0
align 4

loc_10007608:
mov     al, [esi+3]
and     edx, ecx
mov     [edi+3], al
mov     al, [esi+2]
shr     ecx, 2
mov     [edi+2], al
sub     esi, 2
sub     edi, 2
cmp     ecx, 8
jb      short loc_100075B0
std
rep movsd
cld
jmp     ds:off_100076D0[edx*4] ; jumptable 100075D4 case 0
align 10h

loc_10007630:
mov     al, [esi+3]
and     edx, ecx
mov     [edi+3], al
mov     al, [esi+2]
mov     [edi+2], al
mov     al, [esi+1]
shr     ecx, 2
mov     [edi+1], al
sub     esi, 3
sub     edi, 3
cmp     ecx, 8
jb      loc_100075B0
std
rep movsd
cld
jmp     ds:off_100076D0[edx*4] ; jumptable 100075D4 case 0
align 4
dd offset loc_10007684
dd offset loc_1000768C
dd offset loc_10007694
dd offset loc_1000769C
dd offset loc_100076A4
dd offset loc_100076AC
dd offset loc_100076B4
off_10007680 dd offset loc_100076C7

loc_10007684:
mov     eax, [esi+ecx*4+1Ch]
mov     [edi+ecx*4+1Ch], eax

loc_1000768C:
mov     eax, [esi+ecx*4+18h]
mov     [edi+ecx*4+18h], eax

loc_10007694:
mov     eax, [esi+ecx*4+14h]
mov     [edi+ecx*4+14h], eax

loc_1000769C:
mov     eax, [esi+ecx*4+10h]
mov     [edi+ecx*4+10h], eax

loc_100076A4:
mov     eax, [esi+ecx*4+0Ch]
mov     [edi+ecx*4+0Ch], eax

loc_100076AC:
mov     eax, [esi+ecx*4+8]
mov     [edi+ecx*4+8], eax

loc_100076B4:
mov     eax, [esi+ecx*4+4]
mov     [edi+ecx*4+4], eax
lea     eax, ds:0[ecx*4]
add     esi, eax
add     edi, eax

loc_100076C7:           ; jumptable 100075D4 case 0
jmp     ds:off_100076D0[edx*4]
align 10h
off_100076D0 dd offset loc_100076E0 ; jump table for switch statement
dd offset loc_100076E8  ; jumptable 100075D4 case 1
dd offset loc_100076F8  ; jumptable 100075D4 case 2
dd offset loc_1000770C  ; jumptable 100075D4 case 3

loc_100076E0:           ; jumptable 100075D4 case 0
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
align 4

loc_100076E8:           ; jumptable 100075D4 case 1
mov     al, [esi+3]
mov     [edi+3], al
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
align 4

loc_100076F8:           ; jumptable 100075D4 case 2
mov     al, [esi+3]
mov     [edi+3], al
mov     al, [esi+2]
mov     [edi+2], al
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
align 4

loc_1000770C:           ; jumptable 100075D4 case 3
mov     al, [esi+3]
mov     [edi+3], al
mov     al, [esi+2]
mov     [edi+2], al
mov     al, [esi+1]
mov     [edi+1], al
mov     eax, [ebp+arg_0]
pop     esi
pop     edi
leave
retn
sub_100073F0 endp




sub_10007725 proc near

arg_0= dword ptr  4

push    esi
mov     esi, [esp+4+arg_0]
push    edi
or      edi, 0FFFFFFFFh
test    byte ptr [esi+0Ch], 40h
jz      short loc_1000773A
and     dword ptr [esi+0Ch], 0
jmp     short loc_10007751

loc_1000773A:
push    esi
call    sub_10004588
push    esi
call    sub_10007756
push    esi
mov     edi, eax
call    sub_100045DA
add     esp, 0Ch

loc_10007751:
mov     eax, edi
pop     edi
pop     esi
retn
sub_10007725 endp




sub_10007756 proc near

arg_0= dword ptr  4

push    esi
mov     esi, [esp+4+arg_0]
push    edi
or      edi, 0FFFFFFFFh
test    byte ptr [esi+0Ch], 83h
jz      short loc_10007799
push    esi
call    sub_10006B44
push    esi
mov     edi, eax
call    sub_10007A2A
push    dword ptr [esi+10h]
call    sub_1000794A
add     esp, 0Ch
test    eax, eax
jge     short loc_10007787
or      edi, 0FFFFFFFFh
jmp     short loc_10007799

loc_10007787:
mov     eax, [esi+1Ch]
test    eax, eax
jz      short loc_10007799
push    eax             ; lpMem
call    sub_10004A9D
and     dword ptr [esi+1Ch], 0
pop     ecx

loc_10007799:
and     dword ptr [esi+0Ch], 0
mov     eax, edi
pop     edi
pop     esi
retn
sub_10007756 endp




sub_100077A2 proc near

arg_0= dword ptr  4

push    ebx
mov     ebx, [esp+4+arg_0]
cmp     ebx, uNumber
push    esi
push    edi
jnb     short loc_10007823
mov     eax, ebx
sar     eax, 5
lea     edi, dword_1000D2E0[eax*4]
mov     eax, ebx
and     eax, 1Fh
lea     esi, [eax+eax*8]
mov     eax, [edi]
shl     esi, 2
test    byte ptr [eax+esi+4], 1
jz      short loc_10007823
push    ebx
call    sub_10006A14
mov     eax, [edi]
pop     ecx
test    byte ptr [eax+esi+4], 1
jz      short loc_1000780A
push    ebx
call    sub_100069D2
pop     ecx
push    eax             ; hFile
call    ds:FlushFileBuffers
test    eax, eax
jnz     short loc_100077FD
call    ds:GetLastError
mov     esi, eax
jmp     short loc_100077FF

loc_100077FD:
xor     esi, esi

loc_100077FF:
test    esi, esi
jz      short loc_10007818
call    sub_1000694A
mov     [eax], esi

loc_1000780A:
call    sub_10006941
mov     dword ptr [eax], 9
or      esi, 0FFFFFFFFh

loc_10007818:
push    ebx
call    sub_10006A73
pop     ecx
mov     eax, esi
jmp     short loc_10007831

loc_10007823:
call    sub_10006941
mov     dword ptr [eax], 9
or      eax, 0FFFFFFFFh

loc_10007831:
pop     edi
pop     esi
pop     ebx
retn
sub_100077A2 endp

align 10h
mov     edx, [esp+4]
mov     ecx, [esp+8]
test    edx, 3
jnz     short loc_1000788C

loc_10007850:
mov     eax, [edx]
cmp     al, [ecx]
jnz     short loc_10007884
or      al, al
jz      short loc_10007880
cmp     ah, [ecx+1]
jnz     short loc_10007884
or      ah, ah
jz      short loc_10007880
shr     eax, 10h
cmp     al, [ecx+2]
jnz     short loc_10007884
or      al, al
jz      short loc_10007880
cmp     ah, [ecx+3]
jnz     short loc_10007884
add     ecx, 4
add     edx, 4
or      ah, ah
jnz     short loc_10007850
mov     edi, edi

loc_10007880:
xor     eax, eax
retn
align 4

loc_10007884:
sbb     eax, eax
shl     eax, 1
inc     eax
retn
align 4

loc_1000788C:
test    edx, 1
jz      short loc_100078A8
mov     al, [edx]
inc     edx
cmp     al, [ecx]
jnz     short loc_10007884
inc     ecx
or      al, al
jz      short loc_10007880
test    edx, 2
jz      short loc_10007850

loc_100078A8:
mov     ax, [edx]
add     edx, 2
cmp     al, [ecx]
jnz     short loc_10007884
or      al, al
jz      short loc_10007880
cmp     ah, [ecx+1]
jnz     short loc_10007884
or      ah, ah
jz      short loc_10007880
add     ecx, 2
jmp     short loc_10007850
align 10h
push    ebp
mov     ebp, esp
push    esi
xor     eax, eax
push    eax
push    eax
push    eax
push    eax
push    eax
push    eax
push    eax
push    eax
mov     edx, [ebp+0Ch]
lea     ecx, [ecx+0]

loc_100078E4:
mov     al, [edx]
or      al, al
jz      short loc_100078F1
inc     edx
bts     [esp], eax
jmp     short loc_100078E4

loc_100078F1:
mov     esi, [ebp+8]
or      ecx, 0FFFFFFFFh
nop

loc_100078F8:
inc     ecx
mov     al, [esi]
or      al, al
jz      short loc_10007906
inc     esi
bt      [esp], eax
jnb     short loc_100078F8

loc_10007906:
mov     eax, ecx
add     esp, 20h
pop     esi
leave
retn
align 10h
push    ebp
mov     ebp, esp
push    esi
xor     eax, eax
push    eax
push    eax
push    eax
push    eax
push    eax
push    eax
push    eax
push    eax
mov     edx, [ebp+0Ch]
lea     ecx, [ecx+0]

loc_10007924:
mov     al, [edx]
or      al, al
jz      short loc_10007931
inc     edx
bts     [esp], eax
jmp     short loc_10007924

loc_10007931:
mov     esi, [ebp+8]

loc_10007934:
mov     al, [esi]
or      al, al
jz      short loc_10007944
inc     esi
bt      [esp], eax
jnb     short loc_10007934
lea     eax, [esi-1]

loc_10007944:
add     esp, 20h
pop     esi
leave
retn



sub_1000794A proc near

arg_0= dword ptr  4

push    esi
mov     esi, [esp+4+arg_0]
cmp     esi, uNumber
jnb     short loc_1000798F
mov     ecx, esi
mov     eax, esi
sar     ecx, 5
and     eax, 1Fh
mov     ecx, dword_1000D2E0[ecx*4]
lea     eax, [eax+eax*8]
test    byte ptr [ecx+eax*4+4], 1
jz      short loc_1000798F
push    edi
push    esi
call    sub_10006A14
push    esi
call    sub_100079A7
push    esi
mov     edi, eax
call    sub_10006A73
add     esp, 0Ch
mov     eax, edi
pop     edi
pop     esi
retn

loc_1000798F:
call    sub_10006941
mov     dword ptr [eax], 9
call    sub_1000694A
and     dword ptr [eax], 0
or      eax, 0FFFFFFFFh
pop     esi
retn
sub_1000794A endp




sub_100079A7 proc near

arg_0= dword ptr  4

push    esi
mov     esi, [esp+4+arg_0]
push    edi
push    esi
call    sub_100069D2
cmp     eax, 0FFFFFFFFh
pop     ecx
jz      short loc_100079F5
cmp     esi, 1
jz      short loc_100079C3
cmp     esi, 2
jnz     short loc_100079D9

loc_100079C3:
push    2
call    sub_100069D2
push    1
mov     edi, eax
call    sub_100069D2
pop     ecx
cmp     eax, edi
pop     ecx
jz      short loc_100079F5

loc_100079D9:
push    esi
call    sub_100069D2
pop     ecx
push    eax             ; hObject
call    ds:CloseHandle
test    eax, eax
jnz     short loc_100079F5
call    ds:GetLastError
mov     edi, eax
jmp     short loc_100079F7

loc_100079F5:
xor     edi, edi

loc_100079F7:
push    esi
call    sub_10006953
mov     eax, esi
and     esi, 1Fh
sar     eax, 5
pop     ecx
mov     eax, dword_1000D2E0[eax*4]
lea     ecx, [esi+esi*8]
and     byte ptr [eax+ecx*4+4], 0
test    edi, edi
jz      short loc_10007A25
push    edi
call    sub_100068CE
pop     ecx
or      eax, 0FFFFFFFFh
jmp     short loc_10007A27

loc_10007A25:
xor     eax, eax

loc_10007A27:
pop     edi
pop     esi
retn
sub_100079A7 endp




sub_10007A2A proc near

arg_0= dword ptr  4

push    esi
mov     esi, [esp+4+arg_0]
mov     eax, [esi+0Ch]
test    al, 83h
jz      short loc_10007A53
test    al, 8
jz      short loc_10007A53
push    dword ptr [esi+8] ; lpMem
call    sub_10004A9D
and     word ptr [esi+0Ch], 0FBF7h
xor     eax, eax
pop     ecx
mov     [esi], eax
mov     [esi+8], eax
mov     [esi+4], eax

loc_10007A53:
pop     esi
retn
sub_10007A2A endp

align 10h
push    ebp
mov     ebp, esp
push    edi
push    esi
push    ebx
mov     esi, [ebp+0Ch]
mov     edi, [ebp+8]
lea     eax, unk_1000BEF8
cmp     dword ptr [eax+8], 0
jnz     short loc_10007AB3
mov     al, 0FFh
mov     edi, edi

loc_10007A7C:
or      al, al
jz      short loc_10007AAE
mov     al, [esi]
inc     esi
mov     ah, [edi]
inc     edi
cmp     ah, al
jz      short loc_10007A7C
sub     al, 41h
cmp     al, 1Ah
sbb     cl, cl
and     cl, 20h
add     al, cl
add     al, 41h
xchg    ah, al
sub     al, 41h
cmp     al, 1Ah
sbb     cl, cl
and     cl, 20h
add     al, cl
add     al, 41h
cmp     al, ah
jz      short loc_10007A7C
sbb     al, al
sbb     al, 0FFh

loc_10007AAE:
movsx   eax, al
jmp     short loc_10007B2B

loc_10007AB3:
lock inc Addend
cmp     dword_1000C068, 0
jg      short loc_10007AC7
push    0
jmp     short loc_10007ADC

loc_10007AC7:
lock dec Addend
push    13h
call    sub_100048EA
mov     dword ptr [esp], 1

loc_10007ADC:
mov     eax, 0FFh
xor     ebx, ebx
nop

loc_10007AE4:
or      al, al
jz      short loc_10007B0F
mov     al, [esi]
inc     esi
mov     bl, [edi]
inc     edi
cmp     al, bl
jz      short loc_10007AE4
push    eax
push    ebx
call    sub_10007C31
mov     ebx, eax
add     esp, 4
call    sub_10007C31
add     esp, 4
cmp     bl, al
jz      short loc_10007AE4
sbb     eax, eax
sbb     eax, 0FFFFFFFFh

loc_10007B0F:
mov     ebx, eax
pop     eax
or      eax, eax
jnz     short loc_10007B1F
lock dec Addend
jmp     short loc_10007B29

loc_10007B1F:
push    13h
call    sub_1000494B
add     esp, 4

loc_10007B29:
mov     eax, ebx

loc_10007B2B:
pop     ebx
pop     esi
pop     edi
leave
retn
push    ebp
mov     ebp, esp
push    edi
push    esi
push    ebx
mov     ecx, [ebp+10h]
or      ecx, ecx
jz      loc_10007C2A
mov     esi, [ebp+8]
mov     edi, [ebp+0Ch]
lea     eax, unk_1000BEF8
cmp     dword ptr [eax+8], 0
jnz     short loc_10007BA1
mov     bh, 41h
mov     bl, 5Ah
mov     dh, 20h
lea     ecx, [ecx+0]

loc_10007B5C:
mov     ah, [esi]
or      ah, ah
mov     al, [edi]
jz      short loc_10007B85
or      al, al
jz      short loc_10007B85
inc     esi
inc     edi
cmp     ah, bh
jb      short loc_10007B74
cmp     ah, bl
ja      short loc_10007B74
add     ah, dh

loc_10007B74:
cmp     al, bh
jb      short loc_10007B7E
cmp     al, bl
ja      short loc_10007B7E
add     al, dh

loc_10007B7E:
cmp     ah, al
jnz     short loc_10007B8F
dec     ecx
jnz     short loc_10007B5C

loc_10007B85:
xor     ecx, ecx
cmp     ah, al
jz      loc_10007C2A

loc_10007B8F:
mov     ecx, 0FFFFFFFFh
jb      loc_10007C2A
neg     ecx
jmp     loc_10007C2A

loc_10007BA1:
lock inc Addend
cmp     dword_1000C068, 0
jg      short loc_10007BB5
push    0
jmp     short loc_10007BCE

loc_10007BB5:
lock dec Addend
mov     ebx, ecx
push    13h
call    sub_100048EA
mov     dword ptr [esp], 1
mov     ecx, ebx

loc_10007BCE:
xor     eax, eax
xor     ebx, ebx
mov     edi, edi

loc_10007BD4:
mov     al, [esi]
or      eax, eax
mov     bl, [edi]
jz      short loc_10007BFF
or      ebx, ebx
jz      short loc_10007BFF
inc     esi
inc     edi
push    ecx
push    eax
push    ebx
call    sub_10007C31
mov     ebx, eax
add     esp, 4
call    sub_10007C31
add     esp, 4
pop     ecx
cmp     eax, ebx
jnz     short loc_10007C05
dec     ecx
jnz     short loc_10007BD4

loc_10007BFF:
xor     ecx, ecx
cmp     eax, ebx
jz      short loc_10007C0E

loc_10007C05:
mov     ecx, 0FFFFFFFFh
jb      short loc_10007C0E
neg     ecx

loc_10007C0E:
pop     eax
or      eax, eax
jnz     short loc_10007C1C
lock dec Addend
jmp     short loc_10007C2A

loc_10007C1C:
mov     ebx, ecx
push    13h
call    sub_1000494B
add     esp, 4
mov     ecx, ebx

loc_10007C2A:
mov     eax, ecx
pop     ebx
pop     esi
pop     edi
leave
retn


; Attributes: bp-based frame

; int __cdecl sub_10007C31(WORD CharType)
sub_10007C31 proc near

DestStr= byte ptr -4
var_3= byte ptr -3
CharType= word ptr  8

push    ebp
mov     ebp, esp
push    ecx
cmp     dword_1000BF00, 0
push    ebx
push    esi
push    edi
jnz     short loc_10007C5E
mov     eax, dword ptr [ebp+CharType]
cmp     eax, 41h
jl      loc_10007CF7
cmp     eax, 5Ah
jg      loc_10007CF7
add     eax, 20h
jmp     loc_10007CF7

loc_10007C5E:
mov     ebx, dword ptr [ebp+CharType]
mov     edi, 100h
push    1
cmp     ebx, edi
pop     esi
jge     short loc_10007C92
cmp     cbMultiByte, esi
jle     short loc_10007C80
push    esi             ; int
push    ebx             ; CharType
call    sub_1000737B
pop     ecx
pop     ecx
jmp     short loc_10007C8A

loc_10007C80:
mov     eax, off_100093B8
mov     al, [eax+ebx*2]
and     eax, esi

loc_10007C8A:
test    eax, eax
jnz     short loc_10007C92

loc_10007C8E:
mov     eax, ebx
jmp     short loc_10007CF7

loc_10007C92:
mov     edx, off_100093B8
mov     eax, ebx
sar     eax, 8
movzx   ecx, al
test    byte ptr [edx+ecx*2+1], 80h
jz      short loc_10007CB6
and     byte ptr [ebp+0Ah], 0
push    2
mov     byte ptr [ebp+CharType], al
mov     byte ptr [ebp+CharType+1], bl
pop     eax
jmp     short loc_10007CBF

loc_10007CB6:
and     byte ptr [ebp+CharType+1], 0
mov     byte ptr [ebp+CharType], bl
mov     eax, esi

loc_10007CBF:           ; int
push    esi
push    0               ; CodePage
lea     ecx, [ebp+DestStr]
push    3               ; cchDest
push    ecx             ; lpDestStr
push    eax             ; cchSrc
lea     eax, [ebp+CharType]
push    eax             ; lpSrcStr
push    edi             ; dwMapFlags
push    dword_1000BF00  ; Locale
call    sub_10006EA8
add     esp, 20h
test    eax, eax
jz      short loc_10007C8E
cmp     eax, esi
jnz     short loc_10007CEA
movzx   eax, [ebp+DestStr]
jmp     short loc_10007CF7

loc_10007CEA:
movzx   eax, [ebp+var_3]
movzx   ecx, [ebp+DestStr]
shl     eax, 8
or      eax, ecx

loc_10007CF7:
pop     edi
pop     esi
pop     ebx
leave
retn
sub_10007C31 endp

align 10h
mov     eax, [esp+8]
mov     ecx, [esp+10h]
or      ecx, eax
mov     ecx, [esp+0Ch]
jnz     short loc_10007D19
mov     eax, [esp+4]
mul     ecx
retn    10h

loc_10007D19:
push    ebx
mul     ecx
mov     ebx, eax
mov     eax, [esp+8]
mul     dword ptr [esp+14h]
add     ebx, eax
mov     eax, [esp+8]
mul     ecx
add     edx, ebx
pop     ebx
retn    10h
; [00000006 BYTES: COLLAPSED FUNCTION RtlUnwind. PRESS CTRL-NUMPAD+ TO EXPAND]
align 400h
_text ends

; Section 2. (virtual address 00008000)
; Virtual size                  : 00000FC0 (   4032.)
; Section size in file          : 00001000 (   4096.)
; Offset to raw data for section: 00008000
; Flags 40000040: Data Readable
; Alignment     : default
;
; Imports from KERNEL32.dll
;

; Segment type: Externs
; _idata
; int __stdcall WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCSTR lpDefaultChar, LPBOOL lpUsedDefaultChar)
extrn WideCharToMultiByte:dword
; BOOL __stdcall FreeEnvironmentStringsW(LPWCH)
extrn FreeEnvironmentStringsW:dword
; BOOL __stdcall CloseHandle(HANDLE hObject)
extrn CloseHandle:dword
; BOOL __stdcall FlushFileBuffers(HANDLE hFile)
extrn FlushFileBuffers:dword
; BOOL __stdcall GetStringTypeW(DWORD dwInfoType, LPCWSTR lpSrcStr, int cchSrc, LPWORD lpCharType)
extrn GetStringTypeW:dword
; BOOL __stdcall GetStringTypeA(LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType)
extrn GetStringTypeA:dword
; int __stdcall LCMapStringW(LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest)
extrn LCMapStringW:dword
; int __stdcall LCMapStringA(LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest)
extrn LCMapStringA:dword
; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
extrn MultiByteToWideChar:dword
; void __stdcall RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue)
extrn __imp_RtlUnwind:dword
; BOOL __stdcall SetStdHandle(DWORD nStdHandle, HANDLE hHandle)
extrn SetStdHandle:dword
; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
extrn LoadLibraryA:dword
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
extrn GetProcAddress:dword
; LPVOID __stdcall HeapReAlloc(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes)
extrn HeapReAlloc:dword
; LPVOID __stdcall VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)
extrn VirtualAlloc:dword
; LPSTR __stdcall GetCommandLineA()
extrn GetCommandLineA:dword
; DWORD __stdcall GetVersion()
extrn GetVersion:dword
; void __stdcall __noreturn ExitProcess(UINT uExitCode)
extrn ExitProcess:dword
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT uExitCode)
extrn TerminateProcess:dword
; HANDLE __stdcall GetCurrentProcess()
extrn GetCurrentProcess:dword
; DWORD __stdcall GetCurrentThreadId()
extrn GetCurrentThreadId:dword
; BOOL __stdcall TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue)
extrn TlsSetValue:dword
; DWORD __stdcall TlsAlloc()
extrn TlsAlloc:dword
; BOOL __stdcall TlsFree(DWORD dwTlsIndex)
extrn TlsFree:dword
; void __stdcall SetLastError(DWORD dwErrCode)
extrn SetLastError:dword
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
extrn TlsGetValue:dword
; DWORD __stdcall GetLastError()
extrn GetLastError:dword
; UINT __stdcall SetHandleCount(UINT uNumber)
extrn SetHandleCount:dword
; HANDLE __stdcall GetStdHandle(DWORD nStdHandle)
extrn GetStdHandle:dword
; DWORD __stdcall GetFileType(HANDLE hFile)
extrn GetFileType:dword
; void __stdcall GetStartupInfoA(LPSTARTUPINFOA lpStartupInfo)
extrn GetStartupInfoA:dword
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
extrn DeleteCriticalSection:dword
; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
extrn GetModuleFileNameA:dword
; BOOL __stdcall FreeEnvironmentStringsA(LPCH)
extrn FreeEnvironmentStringsA:dword
; UINT __stdcall GetACP()
extrn GetACP:dword
; UINT __stdcall GetOEMCP()
extrn GetOEMCP:dword
; LPCH __stdcall GetEnvironmentStrings()
extrn GetEnvironmentStrings:dword
; LPWCH __stdcall GetEnvironmentStringsW()
extrn GetEnvironmentStringsW:dword
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
extrn GetModuleHandleA:dword
; DWORD __stdcall GetEnvironmentVariableA(LPCSTR lpName, LPSTR lpBuffer, DWORD nSize)
extrn GetEnvironmentVariableA:dword
; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
extrn GetVersionExA:dword
; BOOL __stdcall HeapDestroy(HANDLE hHeap)
extrn HeapDestroy:dword
; HANDLE __stdcall HeapCreate(DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize)
extrn HeapCreate:dword
; BOOL __stdcall VirtualFree(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType)
extrn VirtualFree:dword
; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
extrn HeapFree:dword
; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
extrn WriteFile:dword
; DWORD __stdcall SetFilePointer(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod)
extrn SetFilePointer:dword
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
extrn EnterCriticalSection:dword
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
extrn LeaveCriticalSection:dword
; LONG __stdcall InterlockedDecrement(volatile LONG *lpAddend)
extrn InterlockedDecrement:dword
; LONG __stdcall InterlockedIncrement(volatile LONG *lpAddend)
extrn InterlockedIncrement:dword
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
extrn InitializeCriticalSection:dword
; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
extrn HeapAlloc:dword
; BOOL __stdcall GetCPInfo(UINT CodePage, LPCPINFO lpCPInfo)
extrn GetCPInfo:dword

;
; Imports from VISA32.dll
;
extrn __imp_viSetAttribute:dword
extrn __imp_viSetBuf:dword
extrn __imp_viOpenDefaultRM:dword
extrn __imp_viFindRsrc:dword
extrn __imp_viOpen:dword
extrn __imp_viGetAttribute:dword
extrn __imp_viFindNext:dword
extrn __imp_viClose:dword
extrn __imp_viOut16:dword
extrn __imp_viIn16:dword

;
; Imports from mtcsa32.dll
;
extrn __imp_RdSessionHandle:dword
extrn __imp_SetTimeoutWait:dword
extrn __imp_BreakSweep:dword
extrn __imp_CommTrigDetect:dword
extrn __imp_CommInterrupts:dword
extrn __imp_SetFuncStatusCode:dword
extrn __imp_RdErrorStatus:dword
extrn __imp_TestFuncStatusAndPtr:dword
extrn __imp_GetFuncStatusCode:dword
extrn __imp_SetErrorStatus:dword
extrn __imp_InitTimeoutLoop:dword
extrn __imp_TestTimeoutDone:dword
extrn __imp_SetEngineReplyCode:dword
extrn __imp_RdTimeoutWait:dword
extrn __imp_IeTimer:dword
extrn __imp_IeTimerFrom:dword



; Segment type: Pure data
; Segment permissions: Read
_rdata segment para public 'DATA' use32
assume cs:_rdata
;org 1000814Ch
align 10h
byte_10008150 db 6
db    0
db    0
db    6
db    0
db    1
db    0
db    0
db  10h
db    0
db    3
db    6
db    0
db    6
db    2
db  10h
db    4
db  45h ; E
db  45h ; E
db  45h ; E
db    5
db    5
db    5
db    5
db    5
db  35h ; 5
db  30h ; 0
db    0
db  50h ; P
db    0
db    0
db    0
db    0
db  20h
db  28h ; (
db  38h ; 8
db  50h ; P
db  58h ; X
db    7
db    8
db    0
db  37h ; 7
db  30h ; 0
db  30h ; 0
db  57h ; W
db  50h ; P
db    7
db    0
db    0
db  20h
db  20h
db    8
db    0
db    0
db    0
db    0
db    8
db  60h ; `
db  68h ; h
db  60h ; `
db  60h ; `
db  60h ; `
db  60h ; `
db    0
db    0
db  70h ; p
db  70h ; p
db  78h ; x
db  78h ; x
db  78h ; x
db  78h ; x
db    8
db    7
db    8
db    0
db    0
db    7
db    0
db    8
db    8
db    8
db    0
db    0
db    8
db    0
db    8
db    0
db    7
db    8
db    0
db    0
db    0
aNull_0:
text "UTF-16LE", '(null)',0
align 4
aNull db '(null)',0
align 4
aGlobalHeapSele db '__GLOBAL_HEAP_SELECTED',0
align 4
; CHAR Name[]
Name db '__MSVCRT_HEAP_SELECT',0
align 4
aRuntimeError db 'runtime error ',0
align 4
asc_10008204 db 0Dh,0Ah,0
align 4
aTlossError db 'TLOSS error',0Dh,0Ah,0
align 4
aSingError db 'SING error',0Dh,0Ah,0
align 4
aDomainError db 'DOMAIN error',0Dh,0Ah,0
align 4
aR6028UnableToI db 'R6028',0Dh,0Ah
db '- unable to initialize heap',0Dh,0Ah
db 0
align 10h
aR6027NotEnough db 'R6027',0Dh,0Ah
db '- not enough space for lowio initia'
db 'lization',0Dh,0Ah,0
align 4
aR6026NotEnough db 'R6026',0Dh,0Ah
db '- not enough space for stdio initia'
db 'lization',0Dh,0Ah,0
align 10h
aR6025PureVirtu db 'R6025',0Dh,0Ah
db '- pure virtual function call',0Dh,0Ah
db 0
align 4
aR6024NotEnough db 'R6024',0Dh,0Ah
db '- not enough space for _onexit/atex'
db 'it table',0Dh,0Ah,0
align 10h
aR6019UnableToO db 'R6019',0Dh,0Ah
db '- unable to open console device',0Dh
db 0Ah,0
align 4
aR6018Unexpecte db 'R6018',0Dh,0Ah
db '- unexpected heap error',0Dh,0Ah,0
align 10h
aR6017Unexpecte db 'R6017',0Dh,0Ah
db '- unexpected multithread lock error'
db 0Dh,0Ah,0
align 10h
aR6016NotEnough db 'R6016',0Dh,0Ah
db '- not enough space for thread data',0Dh
db 0Ah,0
aAbnormalProgra db 0Dh,0Ah
db 'abnormal program termination',0Dh,0Ah
db 0
align 10h
aR6009NotEnough db 'R6009',0Dh,0Ah
db '- not enough space for environment',0Dh
db 0Ah,0
aR6008NotEnough db 'R6008',0Dh,0Ah
db '- not enough space for arguments',0Dh
db 0Ah,0
align 4
aR6002FloatingP db 'R6002',0Dh,0Ah
db '- floating point not loaded',0Dh,0Ah
db 0
align 10h
aMicrosoftVisua db 'Microsoft Visual C++ Runtime Librar'
db 'y',0
align 4
asc_100084A8 db 0Ah
db 0Ah,0
align 4
aRuntimeErrorPr db 'Runtime Error!',0Ah
db 0Ah
db 'Program: ',0
align 4
asc_100084C8 db '...',0
aProgramNameUnk db '<program name unknown>',0
align 8
stru_100084E8 _SCOPETABLE_ENTRY <0FFFFFFFFh, 0, \ ; SEH scope table for function 10004960
                   offset loc_100049F4>
_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, \
                   offset loc_10004A7D>
stru_10008500 _SCOPETABLE_ENTRY <0FFFFFFFFh, 0, \ ; SEH scope table for function 10004A9D
                   offset loc_10004B07>
_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, \
                   offset loc_10004B5F>
stru_10008518 _SCOPETABLE_ENTRY <0FFFFFFFFh, 0, \ ; SEH scope table for function 10004BC4
                   offset loc_10004C2B>
_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, \
                   offset loc_10004C87>
; CHAR aGetlastactivep[]
aGetlastactivep db 'GetLastActivePopup',0
align 4
; CHAR aGetactivewindo[]
aGetactivewindo db 'GetActiveWindow',0
; CHAR ProcName[]
ProcName db 'MessageBoxA',0
; CHAR LibFileName[]
LibFileName db 'user32.dll',0
align 4
; CHAR byte_1000856C[4]
byte_1000856C db 4 dup(0)
; const WCHAR SrcStr
SrcStr dw 0
align 8
stru_10008578 _SCOPETABLE_ENTRY <0FFFFFFFFh, \ ; SEH scope table for function 10006EA8
                   offset loc_10006FB8, \
                   offset loc_10006FBC>
_SCOPETABLE_ENTRY <0FFFFFFFFh, \
                   offset loc_1000706C, \
                   offset loc_10007070>
stru_10008590 _SCOPETABLE_ENTRY <0FFFFFFFFh, \ ; SEH scope table for function 100070F7
                   offset loc_100071F0, \
                   offset loc_100071F4>
aHMmSs db 'H:mm:ss',0
aDdddMmmmDdYyyy db 'dddd, MMMM dd, yyyy',0
aMDYy db 'M/d/yy',0
align 10h
aPm db 'PM',0
align 4
aAm db 'AM',0
align 4
aDecember db 'December',0
align 4
aNovember db 'November',0
align 10h
aOctober db 'October',0
aSeptember db 'September',0
align 4
aAugust db 'August',0
align 4
aJuly db 'July',0
align 4
aJune db 'June',0
align 4
aApril db 'April',0
align 4
aMarch db 'March',0
align 4
aFebruary db 'February',0
align 4
aJanuary db 'January',0
aDec db 'Dec',0
aNov db 'Nov',0
aOct db 'Oct',0
aSep db 'Sep',0
aAug db 'Aug',0
aJul db 'Jul',0
aJun db 'Jun',0
aMay db 'May',0
aApr db 'Apr',0
aMar db 'Mar',0
aFeb db 'Feb',0
aJan db 'Jan',0
aSaturday db 'Saturday',0
align 4
aFriday db 'Friday',0
align 4
aThursday db 'Thursday',0
align 10h
aWednesday db 'Wednesday',0
align 4
aTuesday db 'Tuesday',0
aMonday db 'Monday',0
align 4
aSunday db 'Sunday',0
align 4
aSat db 'Sat',0
aFri db 'Fri',0
aThu db 'Thu',0
aWed db 'Wed',0
aTue db 'Tue',0
aMon db 'Mon',0
aSun db 'Sun',0
aSunmontuewedth db 'SunMonTueWedThuFriSat',0
align 4
aJanfebmaraprma db 'JanFebMarAprMayJunJulAugSepOctNovDe'
db 'c',0
align 10h
__IMPORT_DESCRIPTOR_mtcsa32 dd rva off_1000886C ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aMtcsa32Dll      ; DLL Name
dd rva __imp_RdSessionHandle ; Import Address Table
__IMPORT_DESCRIPTOR_VISA32 dd rva dword_10008840 ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aVisa32Dll       ; DLL Name
dd rva __imp_viSetAttribute ; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd rva off_10008764 ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aKernel32Dll     ; DLL Name
dd rva WideCharToMultiByte ; Import Address Table
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
;
; Import names for KERNEL32.dll
;
off_10008764 dd rva word_10008B44
dd rva word_10008B2A
dd rva word_10008D92
dd rva word_10008D7E
dd rva word_10008D6C
dd rva word_10008D5A
dd rva word_10008D4A
dd rva word_10008D3A
dd rva word_10008D24
dd rva word_10008D18
dd rva word_10008D08
dd rva word_10008CF8
dd rva word_10008CE6
dd rva word_10008CD8
dd rva word_10008CC8
dd rva word_100089E2
dd rva word_100089F4
dd rva word_10008A02
dd rva word_10008A10
dd rva word_10008A24
dd rva word_10008A38
dd rva word_10008A4E
dd rva word_10008A5C
dd rva word_10008A68
dd rva word_10008A72
dd rva word_10008A82
dd rva word_10008A90
dd rva word_10008AA0
dd rva word_10008AB2
dd rva word_10008AC2
dd rva word_10008AD0
dd rva word_10008AE2
dd rva word_10008AFA
dd rva word_10008B10
dd rva word_10008CB2
dd rva word_10008CBC
dd rva word_10008B5A
dd rva word_10008B72
dd rva word_10008B8C
dd rva word_10008BA0
dd rva word_10008BBA
dd rva word_10008BCA
dd rva word_10008BD8
dd rva word_10008BE6
dd rva word_10008BF4
dd rva word_10008C00
dd rva word_10008C0C
dd rva word_10008C1E
dd rva word_10008C36
dd rva word_10008C4E
dd rva word_10008C66
dd rva word_10008C7E
dd rva word_10008C9A
dd rva word_10008CA6
dd 0
;
; Import names for VISA32.dll
;
dword_10008840 dd 80000086h
dd 8000010Bh
dd 8000008Dh
dd 80000081h
dd 80000083h
dd 80000085h
dd 80000082h
dd 80000084h
dd 80000106h
dd 80000105h
dd 0
;
; Import names for mtcsa32.dll
;
off_1000886C dd rva word_100089B8
dd rva word_100089A6
dd rva word_10008998
dd rva word_10008986
dd rva word_10008974
dd rva word_10008960
dd rva word_10008950
dd rva word_10008938
dd rva word_10008924
dd rva word_10008912
dd rva word_10008900
dd rva word_100088EE
dd rva word_100088D8
dd rva word_100088C8
dd rva word_100088BE
dd rva word_100088B0
dd 0
word_100088B0 dw 33h
db 'IeTimerFrom',0
word_100088BE dw 32h
db 'IeTimer',0
word_100088C8 dw 76h
db 'RdTimeoutWait',0
word_100088D8 dw 98h
db 'SetEngineReplyCode',0
align 2
word_100088EE dw 0C1h
db 'TestTimeoutDone',0
word_10008900 dw 3Bh
db 'InitTimeoutLoop',0
word_10008912 dw 99h
db 'SetErrorStatus',0
align 4
word_10008924 dw 27h
db 'GetFuncStatusCode',0
word_10008938 dw 0C0h
db 'TestFuncStatusAndPtr',0
align 10h
word_10008950 dw 5Ah
db 'RdErrorStatus',0
word_10008960 dw 9Ch
db 'SetFuncStatusCode',0
word_10008974 dw 0Bh
db 'CommInterrupts',0
align 2
word_10008986 dw 0Ch
db 'CommTrigDetect',0
align 4
word_10008998 dw 0
db 'BreakSweep',0
align 2
word_100089A6 dw 0B0h
db 'SetTimeoutWait',0
align 4
word_100089B8 dw 70h
db 'RdSessionHandle',0
aMtcsa32Dll db 'mtcsa32.dll',0
aVisa32Dll db 'VISA32.dll',0
align 2
word_100089E2 dw 0CAh
db 'GetCommandLineA',0
word_100089F4 dw 174h
db 'GetVersion',0
align 2
word_10008A02 dw 7Dh
db 'ExitProcess',0
word_10008A10 dw 29Eh
db 'TerminateProcess',0
align 4
word_10008A24 dw 0F7h
db 'GetCurrentProcess',0
word_10008A38 dw 0FAh
db 'GetCurrentThreadId',0
align 2
word_10008A4E dw 2A5h
db 'TlsSetValue',0
word_10008A5C dw 2A2h
db 'TlsAlloc',0
align 4
word_10008A68 dw 2A3h
db 'TlsFree',0
word_10008A72 dw 271h
db 'SetLastError',0
align 2
word_10008A82 dw 2A4h
db 'TlsGetValue',0
word_10008A90 dw 11Ah
db 'GetLastError',0
align 10h
word_10008AA0 dw 26Dh
db 'SetHandleCount',0
align 2
word_10008AB2 dw 152h
db 'GetStdHandle',0
align 2
word_10008AC2 dw 115h
db 'GetFileType',0
word_10008AD0 dw 150h
db 'GetStartupInfoA',0
word_10008AE2 dw 55h
db 'DeleteCriticalSection',0
word_10008AFA dw 124h
db 'GetModuleFileNameA',0
align 10h
word_10008B10 dw 0B2h
db 'FreeEnvironmentStringsA',0
word_10008B2A dw 0B3h
db 'FreeEnvironmentStringsW',0
word_10008B44 dw 2D2h
db 'WideCharToMultiByte',0
word_10008B5A dw 106h
db 'GetEnvironmentStrings',0
word_10008B72 dw 108h
db 'GetEnvironmentStringsW',0
align 4
word_10008B8C dw 126h
db 'GetModuleHandleA',0
align 10h
word_10008BA0 dw 109h
db 'GetEnvironmentVariableA',0
word_10008BBA dw 175h
db 'GetVersionExA',0
word_10008BCA dw 19Dh
db 'HeapDestroy',0
word_10008BD8 dw 19Bh
db 'HeapCreate',0
align 2
word_10008BE6 dw 2BFh
db 'VirtualFree',0
word_10008BF4 dw 19Fh
db 'HeapFree',0
align 10h
word_10008C00 dw 2DFh
db 'WriteFile',0
word_10008C0C dw 26Ah
db 'SetFilePointer',0
align 2
word_10008C1E dw 66h
db 'EnterCriticalSection',0
align 2
word_10008C36 dw 1C1h
db 'LeaveCriticalSection',0
align 2
word_10008C4E dw 1ADh
db 'InterlockedDecrement',0
align 2
word_10008C66 dw 1B0h
db 'InterlockedIncrement',0
align 2
word_10008C7E dw 1AAh
db 'InitializeCriticalSection',0
word_10008C9A dw 199h
db 'HeapAlloc',0
word_10008CA6 dw 0BFh
db 'GetCPInfo',0
word_10008CB2 dw 0B9h
db 'GetACP',0
align 4
word_10008CBC dw 131h
db 'GetOEMCP',0
align 4
word_10008CC8 dw 2BBh
db 'VirtualAlloc',0
align 4
word_10008CD8 dw 1A2h
db 'HeapReAlloc',0
word_10008CE6 dw 13Eh
db 'GetProcAddress',0
align 4
word_10008CF8 dw 1C2h
db 'LoadLibraryA',0
align 4
word_10008D08 dw 27Ch
db 'SetStdHandle',0
align 4
word_10008D18 dw 22Fh
db 'RtlUnwind',0
word_10008D24 dw 1E4h
db 'MultiByteToWideChar',0
word_10008D3A dw 1BFh
db 'LCMapStringA',0
align 2
word_10008D4A dw 1C0h
db 'LCMapStringW',0
align 2
word_10008D5A dw 153h
db 'GetStringTypeA',0
align 4
word_10008D6C dw 156h
db 'GetStringTypeW',0
align 2
word_10008D7E dw 0AAh
db 'FlushFileBuffers',0
align 2
word_10008D92 dw 1Bh
db 'CloseHandle',0
aKernel32Dll db 'KERNEL32.dll',0
align 10h
;
; Export directory for mtcvsa32.dll
;
dd 0                    ; Characteristics
dd 38E0D1F9h            ; TimeDateStamp: Tue Mar 28 15:38:33 2000
dw 0                    ; MajorVersion
dw 0                    ; MinorVersion
dd rva aMtcvsa32Dll     ; Name
dd 1                    ; Base
dd 11h                  ; NumberOfFunctions
dd 11h                  ; NumberOfNames
dd rva off_10008DD8     ; AddressOfFunctions
dd rva off_10008E1C     ; AddressOfNames
dd rva word_10008E60    ; AddressOfNameOrdinals
;
; Export Address Table for mtcvsa32.dll
;
off_10008DD8 dd rva VISA_CheckHWStatus, rva VISA_CheckSWStatNoTO
dd rva VISA_CheckSWStatus, rva VISA_ClearDataFIFO
dd rva VISA_CloseSession, rva VISA_FetchDataWord
dd rva VISA_GetDataBlock, rva VISA_IdQuery
dd rva VISA_InitEngine, rva VISA_OpenSessionStep
dd rva VISA_ResetEngine, rva VISA_SendCommand
dd rva VISA_SendDataItem, rva VISA_SendWord
dd rva VISA_ShutdownEngine, rva VISA_VerDataBlock
dd rva VISA_WaitRecvWord
;
; Export Names Table for mtcvsa32.dll
;
off_10008E1C dd rva aVisaCheckhwsta, rva aVisaCheckswsta ; "VISA_CheckHWStatus" ...
dd rva aVisaCheckswsta_0, rva aVisaCleardataf
dd rva aVisaClosesessi, rva aVisaFetchdataw
dd rva aVisaGetdatablo, rva aVisaIdquery
dd rva aVisaInitengine, rva aVisaOpensessio
dd rva aVisaResetengin, rva aVisaSendcomman
dd rva aVisaSenddatait, rva aVisaSendword
dd rva aVisaShutdownen, rva aVisaVerdatablo
dd rva aVisaWaitrecvwo
;
; Export Ordinals Table for mtcvsa32.dll
;
word_10008E60 dw 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh
dw 0Ch, 0Dh, 0Eh, 0Fh, 10h
aMtcvsa32Dll db 'mtcvsa32.dll',0
aVisaCheckhwsta db 'VISA_CheckHWStatus',0
aVisaCheckswsta db 'VISA_CheckSWStatNoTO',0
aVisaCheckswsta_0 db 'VISA_CheckSWStatus',0
aVisaCleardataf db 'VISA_ClearDataFIFO',0
aVisaClosesessi db 'VISA_CloseSession',0
aVisaFetchdataw db 'VISA_FetchDataWord',0
aVisaGetdatablo db 'VISA_GetDataBlock',0
aVisaIdquery db 'VISA_IdQuery',0
aVisaInitengine db 'VISA_InitEngine',0
aVisaOpensessio db 'VISA_OpenSessionStep',0
aVisaResetengin db 'VISA_ResetEngine',0
aVisaSendcomman db 'VISA_SendCommand',0
aVisaSenddatait db 'VISA_SendDataItem',0
aVisaSendword db 'VISA_SendWord',0
aVisaShutdownen db 'VISA_ShutdownEngine',0
aVisaVerdatablo db 'VISA_VerDataBlock',0
aVisaWaitrecvwo db 'VISA_WaitRecvWord',0
align 80h
_rdata ends

; Section 3. (virtual address 00009000)
; Virtual size                  : 00004400 (  17408.)
; Section size in file          : 00003000 (  12288.)
; Offset to raw data for section: 00009000
; Flags C0000040: Data Readable Writable
; Alignment     : default

; Segment type: Pure data
; Segment permissions: Read/Write
_data segment para public 'DATA' use32
assume cs:_data
;org 10009000h
unk_10009000 db    0
db    0
db    0
db    0
unk_10009004 db    0
db    0
db    0
db    0
unk_10009008 db    0
db    0
db    0
db    0
dd offset sub_100044CC
dd offset sub_10005188
unk_10009014 db    0
db    0
db    0
db    0
unk_10009018 db    0
db    0
db    0
db    0
dd offset sub_10004574
unk_10009020 db    0
db    0
db    0
db    0
unk_10009024 db    0
db    0
db    0
db    0
unk_10009028 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
aVxiInstr db 'VXI?*INSTR',0
align 4
aVxiInstr_0 db 'VXI?*INSTR',0
align 4
aVxi0IInstr db 'VXI0::%i::INSTR',0
off_10009058 dd offset sub_100034C6
off_1000905C dd offset aNull ; "(null)"
off_10009060 dd offset aNull_0 ; "(null)"
; DWORD dwTlsIndex
dwTlsIndex dd 0FFFFFFFFh
unk_10009068 db 0FFh ; ÿ
db 0FFh ; ÿ
db 0FFh ; ÿ
db 0FFh ; ÿ
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
dword_10009090 dd 2
off_10009094 dd offset aR6002FloatingP ; "R6002\r\n- floating point not loaded\r"...
db    8
db    0
db    0
db    0
dd offset aR6008NotEnough ; "R6008\r\n- not enough space for argumen"...
db    9
db    0
db    0
db    0
dd offset aR6009NotEnough ; "R6009\r\n- not enough space for environ"...
db  0Ah
db    0
db    0
db    0
dd offset aAbnormalProgra ; "\r\nabnormal program termination\r\n"
db  10h
db    0
db    0
db    0
dd offset aR6016NotEnough ; "R6016\r\n- not enough space for thread "...
db  11h
db    0
db    0
db    0
dd offset aR6017Unexpecte ; "R6017\r\n- unexpected multithread lock "...
db  12h
db    0
db    0
db    0
dd offset aR6018Unexpecte ; "R6018\r\n- unexpected heap error\r\n"
db  13h
db    0
db    0
db    0
dd offset aR6019UnableToO ; "R6019\r\n- unable to open console devic"...
db  18h
db    0
db    0
db    0
dd offset aR6024NotEnough ; "R6024\r\n- not enough space for _onexit"...
db  19h
db    0
db    0
db    0
dd offset aR6025PureVirtu ; "R6025\r\n- pure virtual function call\r"...
db  1Ah
db    0
db    0
db    0
dd offset aR6026NotEnough ; "R6026\r\n- not enough space for stdio i"...
db  1Bh
db    0
db    0
db    0
dd offset aR6027NotEnough ; "R6027\r\n- not enough space for lowio i"...
db  1Ch
db    0
db    0
db    0
dd offset aR6028UnableToI ; "R6028\r\n- unable to initialize heap\r"...
db  78h ; x
db    0
db    0
db    0
dd offset aDomainError  ; "DOMAIN error\r\n"
db  79h ; y
db    0
db    0
db    0
dd offset aSingError    ; "SING error\r\n"
db  7Ah ; z
db    0
db    0
db    0
dd offset aTlossError   ; "TLOSS error\r\n"
db 0FCh ; ü
db    0
db    0
db    0
dd offset asc_10008204  ; "\r\n"
db 0FFh ; ÿ
db    0
db    0
db    0
dd offset aRuntimeError ; "runtime error "
off_10009120 dd offset unk_1000C2C0
align 8
dd offset unk_1000C2C0
db    1
db    1
db    0
db    0
unk_10009130 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
unk_10009140 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_10009160 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_10009190 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_10009380 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
off_100093A0 dd offset sub_10006C4D
off_100093A4 dd offset sub_10006C4D
dd offset sub_10006C4D
off_100093AC dd offset sub_10006C4D
dd offset sub_10006C4D
dd offset sub_10006C4D
off_100093B8 dd offset unk_100093C2
dd offset unk_100093C2
db    0
db    0
unk_100093C2 db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  28h ; (
db    0
db  28h ; (
db    0
db  28h ; (
db    0
db  28h ; (
db    0
db  28h ; (
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  48h ; H
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  84h ; „
db    0
db  84h ; „
db    0
db  84h ; „
db    0
db  84h ; „
db    0
db  84h ; „
db    0
db  84h ; „
db    0
db  84h ; „
db    0
db  84h ; „
db    0
db  84h ; „
db    0
db  84h ; „
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  82h ; ‚
db    0
db  82h ; ‚
db    0
db  82h ; ‚
db    0
db  82h ; ‚
db    0
db  82h ; ‚
db    0
db  82h ; ‚
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; LPCRITICAL_SECTION dword_100095D0
dword_100095D0 dd 0
; LPCRITICAL_SECTION off_100095D4
off_100095D4 dd offset unk_1000BE78
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; LPCRITICAL_SECTION off_100095F4
off_100095F4 dd offset unk_1000BEA8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; LPCRITICAL_SECTION off_10009604
off_10009604 dd offset unk_1000BEC0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; LPCRITICAL_SECTION lpCriticalSection
lpCriticalSection dd offset unk_1000BE90
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_10009690 db    5
db    0
db    0
db 0C0h ; À
db  0Bh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Dh
db    0
db    0
db 0C0h ; À
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  96h ; –
db    0
db    0
db 0C0h ; À
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Dh
db    0
db    0
db 0C0h ; À
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Eh ; Ž
db    0
db    0
db 0C0h ; À
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Fh
db    0
db    0
db 0C0h ; À
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h
db    0
db    0
db 0C0h ; À
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  91h ; ‘
db    0
db    0
db 0C0h ; À
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  92h ; ’
db    0
db    0
db 0C0h ; À
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  93h ; “
db    0
db    0
db 0C0h ; À
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db    7
db    0
db    0
db    0
db  78h ; x
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
byte_10009720 db 1
db    2
db    4
db    8
db    0
db    0
db    0
db    0
unk_10009728 db 0A4h ; ¤
db    3
db    0
db    0
unk_1000972C db  60h ; `
db  82h ; ‚
db  79h ; y
db  82h ; ‚
db  21h ; !
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_10009738 db 0A6h ; ¦
db 0DFh ; ß
db    0
db    0
db    0
db    0
db    0
db    0
db 0A1h ; ¡
db 0A5h ; ¥
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db  9Fh ; Ÿ
db 0E0h ; à
db 0FCh ; ü
db    0
db    0
db    0
db    0
db  40h ; @
db  7Eh ; ~
db  80h ; €
db 0FCh ; ü
db    0
db    0
db    0
db    0
db 0A8h ; ¨
db    3
db    0
db    0
db 0C1h ; Á
db 0A3h ; £
db 0DAh ; Ú
db 0A3h ; £
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0FEh ; þ
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db 0FEh ; þ
db    0
db    0
db    0
db    0
db    0
db    0
db 0B5h ; µ
db    3
db    0
db    0
db 0C1h ; Á
db 0A3h ; £
db 0DAh ; Ú
db 0A3h ; £
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0FEh ; þ
db    0
db    0
db    0
db    0
db    0
db    0
db  41h ; A
db 0FEh ; þ
db    0
db    0
db    0
db    0
db    0
db    0
db 0B6h ; ¶
db    3
db    0
db    0
db 0CFh ; Ï
db 0A2h ; ¢
db 0E4h ; ä
db 0A2h ; ¢
db  1Ah
db    0
db 0E5h ; å
db 0A2h ; ¢
db 0E8h ; è
db 0A2h ; ¢
db  5Bh ; [
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0FEh ; þ
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Eh ; ~
db 0A1h ; ¡
db 0FEh ; þ
db    0
db    0
db    0
db    0
db  51h ; Q
db    5
db    0
db    0
db  51h ; Q
db 0DAh ; Ú
db  5Eh ; ^
db 0DAh ; Ú
db  20h
db    0
db  5Fh ; _
db 0DAh ; Ú
db  6Ah ; j
db 0DAh ; Ú
db  32h ; 2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0D3h ; Ó
db 0D8h ; Ø
db 0DEh ; Þ
db 0E0h ; à
db 0F9h ; ù
db    0
db    0
db  31h ; 1
db  7Eh ; ~
db  81h
db 0FEh ; þ
db    0
db    0
db    0
db    0
unk_10009818 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
off_10009820 dd offset off_10009820
; LPVOID off_10009824
off_10009824 dd offset off_10009820
dd offset unk_10009838
dd offset unk_10009838
dword_10009830 dd 0FFFFFFFFh
db 0FFh ; ÿ
db 0FFh ; ÿ
db 0FFh ; ÿ
db 0FFh ; ÿ
unk_10009838 db 0F0h ; ð
db    0
db    0
db    0
db 0F1h ; ñ
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
off_1000B840 dd offset off_10009820
dword_1000B844 dd 1E0h
align 10h
unk_1000B850 db    1
db    0
db    0
db    0
dword_1000B854 dd 16h
db    2
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    4
db    0
db    0
db    0
db  18h
db    0
db    0
db    0
db    5
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db    6
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db    7
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
db    7
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  0Fh
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  11h
db    0
db    0
db    0
db  12h
db    0
db    0
db    0
db  12h
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  21h ; !
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  35h ; 5
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  41h ; A
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  43h ; C
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  50h ; P
db    0
db    0
db    0
db  11h
db    0
db    0
db    0
db  52h ; R
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  53h ; S
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  57h ; W
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  59h ; Y
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db  6Ch ; l
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  6Dh ; m
db    0
db    0
db    0
db  20h
db    0
db    0
db    0
db  70h ; p
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  72h ; r
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db    6
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  80h ; €
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
db  81h
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
db  82h ; ‚
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db  83h ; ƒ
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  84h ; „
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  91h ; ‘
db    0
db    0
db    0
db  29h ; )
db    0
db    0
db    0
db  9Eh ; ž
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db 0A1h ; ¡
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db 0A4h ; ¤
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db 0A7h ; §
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db 0B7h ; ·
db    0
db    0
db    0
db  11h
db    0
db    0
db    0
db 0CEh ; Î
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db 0D7h ; ×
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db  18h
db    7
db    0
db    0
db  0Ch
db    0
db    0
db    0
unk_1000B9B8 db  43h ; C
db    0
db    0
db    0
db  43h ; C
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  43h ; C
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; int cbMultiByte
cbMultiByte dd 1
db  2Eh ; .
db    0
db    0
db    0
db    1
db    0
db    0
db    0
unk_1000BAD0 db  20h
db    5
db  93h ; “
db  19h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_1000BAE8
align 8
off_1000BAE8 dd offset aSun ; "Sun"
dd offset aMon          ; "Mon"
dd offset aTue          ; "Tue"
dd offset aWed          ; "Wed"
dd offset aThu          ; "Thu"
dd offset aFri          ; "Fri"
dd offset aSat          ; "Sat"
dd offset aSunday       ; "Sunday"
dd offset aMonday       ; "Monday"
dd offset aTuesday      ; "Tuesday"
dd offset aWednesday    ; "Wednesday"
dd offset aThursday     ; "Thursday"
dd offset aFriday       ; "Friday"
dd offset aSaturday     ; "Saturday"
dd offset aJan          ; "Jan"
dd offset aFeb          ; "Feb"
dd offset aMar          ; "Mar"
dd offset aApr          ; "Apr"
dd offset aMay          ; "May"
dd offset aJun          ; "Jun"
dd offset aJul          ; "Jul"
dd offset aAug          ; "Aug"
dd offset aSep          ; "Sep"
dd offset aOct          ; "Oct"
dd offset aNov          ; "Nov"
dd offset aDec          ; "Dec"
dd offset aJanuary      ; "January"
dd offset aFebruary     ; "February"
dd offset aMarch        ; "March"
dd offset aApril        ; "April"
dd offset aMay          ; "May"
dd offset aJune         ; "June"
dd offset aJuly         ; "July"
dd offset aAugust       ; "August"
dd offset aSeptember    ; "September"
dd offset aOctober      ; "October"
dd offset aNovember     ; "November"
dd offset aDecember     ; "December"
dd offset aAm           ; "AM"
dd offset aPm           ; "PM"
dd offset aMDYy         ; "M/d/yy"
dd offset aDdddMmmmDdYyyy ; "dddd, MMMM dd, yyyy"
dd offset aHMmSs        ; "H:mm:ss"
align 8
unk_1000BB98 db  2Eh ; .
db    0
db    0
db    0
db    0
db    0
db    0
db    0
off_1000BBA0 dd offset unk_1000BB98
dd offset unk_1000BF94
dd offset unk_1000BF94
dd offset unk_1000BF94
dd offset unk_1000BF94
dd offset unk_1000BF94
dd offset unk_1000BF94
dd offset unk_1000BF94
dd offset unk_1000BF94
dd offset unk_1000BF94
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
dd offset off_1000BBA0
align 10h
db  80h ; €
db  70h ; p
db    0
db    0
db    1
db    0
db    0
db    0
db 0F0h ; ð
db 0F1h ; ñ
db 0FFh ; ÿ
db 0FFh ; ÿ
unk_1000BBEC db  50h ; P
db  53h ; S
db  54h ; T
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1000BC2C db  50h ; P
db  44h ; D
db  54h ; T
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_1000BBEC
dd offset unk_1000BC2C
align 8
db 0FFh ; ÿ
db 0FFh ; ÿ
db 0FFh ; ÿ
db 0FFh ; ÿ
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh ; ÿ
db 0FFh ; ÿ
db 0FFh ; ÿ
db 0FFh ; ÿ
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh ; ÿ
db 0FFh ; ÿ
db 0FFh ; ÿ
db 0FFh ; ÿ
db  1Eh
db    0
db    0
db    0
db  3Bh ; ;
db    0
db    0
db    0
db  5Ah ; Z
db    0
db    0
db    0
db  78h ; x
db    0
db    0
db    0
db  97h ; —
db    0
db    0
db    0
db 0B5h ; µ
db    0
db    0
db    0
db 0D4h ; Ô
db    0
db    0
db    0
db 0F3h ; ó
db    0
db    0
db    0
db  11h
db    1
db    0
db    0
db  30h ; 0
db    1
db    0
db    0
db  4Eh ; N
db    1
db    0
db    0
db  6Dh ; m
db    1
db    0
db    0
db 0FFh ; ÿ
db 0FFh ; ÿ
db 0FFh ; ÿ
db 0FFh ; ÿ
db  1Eh
db    0
db    0
db    0
db  3Ah ; :
db    0
db    0
db    0
db  59h ; Y
db    0
db    0
db    0
db  77h ; w
db    0
db    0
db    0
db  96h ; –
db    0
db    0
db    0
db 0B4h ; ´
db    0
db    0
db    0
db 0D3h ; Ó
db    0
db    0
db    0
db 0F2h ; ò
db    0
db    0
db    0
db  10h
db    1
db    0
db    0
db  2Fh ; /
db    1
db    0
db    0
db  4Dh ; M
db    1
db    0
db    0
db  6Ch ; l
db    1
db    0
db    0
dword_1000BD08 dd 0
dword_1000BD0C dd 0
dword_1000BD10 dd 0
; LPVOID dword_1000BD14
dword_1000BD14 dd 0
db    0
db    0
db    0
db    0
dword_1000BD1C dd 0
dword_1000BD20 dd 0
align 8
dword_1000BD28 dd 0
dword_1000BD2C dd 0
dword_1000BD30 dd 0
dword_1000BD34 dd 0
dword_1000BD38 dd 0
dword_1000BD3C dd 0
db    0
db    0
db    0
db    0
dword_1000BD44 dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_1000BD54 dd 0
db    0
db    0
db    0
db    0
byte_1000BD5C db 0
align 10h
dword_1000BD60 dd 0
dword_1000BD64 dd 0
; CHAR Filename[260]
Filename db 104h dup(0)
dword_1000BE6C dd 0
dword_1000BE70 dd 0
dword_1000BE74 dd 0
unk_1000BE78 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1000BE90 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1000BEA8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1000BEC0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_1000BED8 dd 0
dword_1000BEDC dd 0
dword_1000BEE0 dd 0
dword_1000BEE4 dd 0
dword_1000BEE8 dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1000BEF8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; LCID dword_1000BF00
dword_1000BF00 dd 0
align 10h
; UINT CodePage
CodePage dd 0
align 8
dword_1000BF18 dd 0
dword_1000BF1C dd 0
dword_1000BF20 dd 0
dword_1000BF24 dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1000BF94 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_1000C068 dd ?
; volatile LONG Addend
Addend dd ?
dword_1000C070 dd ?
dword_1000C074 dd ?
dword_1000C078 dd ?
dword_1000C07C dd ?
dword_1000C080 dd ?
; LPVOID lpMem
lpMem dd ?
dword_1000C088 dd ?
; UINT dword_1000C08C
dword_1000C08C dd ?
unk_1000C090 db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_1000C09C dd ?
byte_1000C0A0 db ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
unk_1000C1A0 db    ? ;
byte_1000C1A1 db ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
; LCID Locale
Locale dd ?
dword_1000C2A8 dd ?
align 20h
unk_1000C2C0 db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_1000D2C0 dd ?
; HANDLE hHeap
hHeap dd ?
dword_1000D2C8 dd ?
align 20h
dword_1000D2E0 dd ?
unk_1000D2E4 db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
; UINT uNumber
uNumber dd ?
dword_1000D3E4 dd ?
dword_1000D3E8 dd ?
dword_1000D3EC dd ?
dword_1000D3F0 dd ?
dword_1000D3F4 dd ?
dword_1000D3F8 dd ?
dword_1000D3FC dd ?
align 1000h
_data ends


end DllEntryPoint
