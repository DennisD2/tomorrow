source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%_STARTUPINFOA = type { i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i8*, i32*, i32*, i32* }
%_OSVERSIONINFOA = type { i32, i32, i32, i32, i32, [128 x i8] }
%_RTL_CRITICAL_SECTION = type { %_RTL_CRITICAL_SECTION_DEBUG*, i32, i32, i32*, i32*, i32 }
%_RTL_CRITICAL_SECTION_DEBUG = type { i16, i16, %_RTL_CRITICAL_SECTION*, %_LIST_ENTRY, i32, i32, i32, i16, i16 }
%_LIST_ENTRY = type { %_LIST_ENTRY*, %_LIST_ENTRY* }
%_OVERLAPPED = type { i32, i32, i32, i32* }
%_cpinfo = type { i32, [1 x i8], [1 x i8] }
%_EXCEPTION_RECORD = type { i32, i32, %_EXCEPTION_RECORD*, i32*, i32, [1 x i32] }

@cf = internal unnamed_addr global i1 false
@zf = internal unnamed_addr global i1 false
@sf = internal unnamed_addr global i1 false
@df = internal unnamed_addr global i1 false
@of = internal unnamed_addr global i1 false
@st0 = internal unnamed_addr global x86_fp80 0xK00000000000000000000
@st1 = internal unnamed_addr global x86_fp80 0xK00000000000000000000
@fpu_stat_TOP = internal unnamed_addr global i3 0
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_1001b3e4.10 = local_unnamed_addr global i32 0
@global_var_1001b3c8.11 = local_unnamed_addr global i32 0
@global_var_1001b3dc.12 = local_unnamed_addr global i32 0
@global_var_1001b3d0.14 = local_unnamed_addr global i32 0
@global_var_1001b3d6.17 = local_unnamed_addr global i32 0
@global_var_1001b3cc.18 = global i32 0
@global_var_1001b3ce.19 = local_unnamed_addr global i32 0
@global_var_1001b3e8.20 = global i32 0
@global_var_10018030.21 = constant [4 x i8] c"ISA\00"
@global_var_10018034.22 = constant [5 x i8] c"ISA_\00"
@global_var_1001803c.23 = constant [13 x i8] c"mtcisa32.dll\00"
@global_var_1001804c.24 = constant [16 x i8] c"OpenSessionStep\00"
@global_var_1001805c.25 = constant [14 x i8] c"ClearDataFIFO\00"
@global_var_1001806c.26 = constant [14 x i8] c"CheckSWStatus\00"
@global_var_1001807c.27 = constant [14 x i8] c"CheckHWStatus\00"
@global_var_1001808c.28 = constant [14 x i8] c"FetchDataWord\00"
@global_var_1001809c.29 = constant [13 x i8] c"WaitRecvWord\00"
@global_var_100180ac.30 = constant [13 x i8] c"SendDataItem\00"
@global_var_100180bc.31 = constant [12 x i8] c"SendCommand\00"
@global_var_100180c8.32 = constant [13 x i8] c"VerDataBlock\00"
@global_var_100180d8.33 = constant [13 x i8] c"GetDataBlock\00"
@global_var_100180e8.34 = constant [9 x i8] c"SendWord\00"
@global_var_100180f4.35 = constant [16 x i8] c"CheckSWStatNoTO\00"
@global_var_10018104.36 = constant [15 x i8] c"ShutdownEngine\00"
@global_var_10018114.37 = constant [11 x i8] c"InitEngine\00"
@global_var_10018120.38 = constant [12 x i8] c"ResetEngine\00"
@global_var_1001812c.39 = constant [13 x i8] c"CloseSession\00"
@global_var_1001813c.40 = constant [8 x i8] c"IdQuery\00"
@global_var_10018144.41 = constant [3 x i8] c"::\00"
@global_var_10018148.42 = constant [4 x i8] c"VXI\00"
@global_var_1001814c.43 = constant [6 x i8] c"VISA_\00"
@global_var_10018154.44 = constant [13 x i8] c"mtcvsa32.dll\00"
@global_var_10018164.45 = constant [8 x i8] c"TCPIP::\00"
@global_var_1001816c.46 = constant [7 x i8] c"TCPIP_\00"
@global_var_10018174.47 = constant [13 x i8] c"mtctcpip.dll\00"
@global_var_100181a0.48 = constant [4 x i8] c"SIM\00"
@global_var_100181a4.49 = constant [5 x i8] c"SIM_\00"
@global_var_100181ac.50 = constant [13 x i8] c"mtcsim32.dll\00"
@global_var_100181fc.51 = constant [4 x i8] c"ISA\00"
@global_var_10018200.52 = constant [7 x i8] c"ISANT_\00"
@global_var_10018208.53 = constant [13 x i8] c"mtcisant.dll\00"
@global_var_100050c6.55 = constant i32 268456029
@global_var_10018228.65 = global i32 9600
@global_var_10018240.68 = global i32 110
@global_var_1000c8f2.76 = constant i32 268486839
@global_var_1000c979.77 = constant i32 268486947
@global_var_1000cc65.78 = constant i32 268487625
@global_var_1000cd9f.80 = constant i32 268487855
@global_var_1001b414.82 = local_unnamed_addr global i32 0
@global_var_1001b410.90 = local_unnamed_addr global i32 0
@global_var_1001b41c.91 = local_unnamed_addr global i32 0
@global_var_100183c0.92 = local_unnamed_addr global i32 268510101
@global_var_100183bc.93 = local_unnamed_addr global i32 268510101
@global_var_100183c4.94 = local_unnamed_addr global i32 268510101
@global_var_100183c8.95 = local_unnamed_addr global i32 268510101
@global_var_100183cc.96 = local_unnamed_addr global i32 268510101
@global_var_100183d0.97 = local_unnamed_addr global i32 268510101
@global_var_100185e0.98 = local_unnamed_addr global i32 1
@global_var_100183d4 = external local_unnamed_addr global i32
@global_var_1000da55.101 = constant i32 1693470091
@global_var_1001bb14.102 = local_unnamed_addr global i32 0
@global_var_1000da46.103 = constant [3 x i8] c"Vj\00"
@global_var_1001bb10.104 = local_unnamed_addr global i32 0
@global_var_1001b498.105 = local_unnamed_addr global i32 0
@global_var_1001bb0c.107 = local_unnamed_addr global i32 0
@global_var_1001a734.108 = local_unnamed_addr global i32 480
@global_var_1000db8f.109 = constant i32 1693470091
@global_var_1000dc00.111 = constant i32 -1877999396
@global_var_1000dcf8.112 = constant i32 1577600395
@global_var_1000dd88.116 = constant i32 -1877999394
@global_var_1001b418.117 = local_unnamed_addr global i32 0
@global_var_10018398.118 = constant [4 x i8] c"pow\00"
@global_var_100183a0.122 = constant [6 x i8] c"log10\00"
@global_var_100183b0.124 = constant [5 x i8] c"sqrt\00"
@global_var_1001b4ac.127 = local_unnamed_addr global i32 0
@global_var_1001b4b0.128 = local_unnamed_addr global i32 0
@global_var_1001b4a8.129 = local_unnamed_addr global i32 0
@global_var_1001b420.132 = local_unnamed_addr global i32 0
@global_var_1001b4dc.133 = local_unnamed_addr global i32 0
@global_var_1001bb1c.134 = local_unnamed_addr global i32 0
@global_var_10016200.138 = constant [6 x i8] c"e+000\00"
@global_var_1001aaf8.139 = local_unnamed_addr global i32 9876
@global_var_100185f0.142 = global i32 20
@global_var_100162b8.143 = constant [4 x i8] c"exp\00"
@global_var_100185f4.144 = global [4 x i8]* @global_var_100162b8.143
@global_var_100162d4.147 = constant [21 x i8] c"__MSVCRT_HEAP_SELECT\00"
@global_var_100162bc.148 = constant [23 x i8] c"__GLOBAL_HEAP_SELECTED\00"
@global_var_1001bb04.149 = local_unnamed_addr global i32 0
@global_var_1001bb08.150 = local_unnamed_addr global i32 0
@global_var_10018710 = external global i32
@global_var_1001bb00.151 = local_unnamed_addr global i32 0
@global_var_1001bafc.152 = local_unnamed_addr global i32 0
@global_var_1001baf4.153 = local_unnamed_addr global i32 0
@global_var_1001baf8.154 = local_unnamed_addr global i32 0
@global_var_10018720.155 = local_unnamed_addr global i32 -1
@global_var_10018714 = external local_unnamed_addr global i32
@global_var_1001a730.157 = local_unnamed_addr global i32* @global_var_10018710
@global_var_1001b434.158 = local_unnamed_addr global i32 0
@global_var_1001b450.159 = global i32 0
@global_var_1001a77c.160 = local_unnamed_addr global i32* @global_var_1001b450.159
@global_var_1001b480.161 = global i32 0
@global_var_1001a76c.162 = local_unnamed_addr global i32* @global_var_1001b480.161
@global_var_1001b468.163 = global i32 0
@global_var_1001a75c.164 = local_unnamed_addr global i32* @global_var_1001b468.163
@global_var_1001b438.165 = global i32 0
@global_var_1001a73c.166 = local_unnamed_addr global i32* @global_var_1001b438.165
@global_var_1001a738.167 = global i32 0
@global_var_1001a7f8.168 = global i32 429065504
@global_var_1001b49c.169 = local_unnamed_addr global i32 0
@global_var_10018380.174 = local_unnamed_addr global i32 268489963
@global_var_10018010.175 = global i32 0
@global_var_10018008.176 = global i32 0
@global_var_10018004.177 = global i32 0
@global_var_10018000.178 = global i32 0
@global_var_1001b4e0.179 = local_unnamed_addr global i32 0
@global_var_1001b4d8.180 = local_unnamed_addr global i32 0
@global_var_1001baf0.181 = local_unnamed_addr global i32 0
@global_var_1001baec.182 = local_unnamed_addr global i32 0
@global_var_10018018.183 = global i32 0
@global_var_10018014.184 = global i32 0
@global_var_10018020.185 = global i32 0
@global_var_1001801c.186 = global i32 0
@global_var_1001a8a0.187 = local_unnamed_addr global i32 -1
@global_var_1001ac60.188 = global i32 -1073741819
@global_var_1001b9e0.189 = global i32 0
@global_var_1001b9e4.191 = global i32 0
@global_var_1001bae8.192 = local_unnamed_addr global i32 0
@global_var_1001b4c0.193 = local_unnamed_addr global i32 0
@global_var_1001bae4.194 = local_unnamed_addr global i32 0
@global_var_1001b4b8.197 = local_unnamed_addr global i32 0
@global_var_1001b4b4.198 = local_unnamed_addr global i32 0
@global_var_1001b5e8.200 = local_unnamed_addr global i32 0
@global_var_1001b42c.201 = local_unnamed_addr global i32 0
@global_var_1001b430.202 = local_unnamed_addr global i32 0
@global_var_1001b5ec.203 = local_unnamed_addr global i32 0
@global_var_1001a8d0.204 = global i32 2
@global_var_10016618.205 = constant [23 x i8] c"<program name unknown>\00"
@global_var_10016614.206 = constant [4 x i8] c"...\00"
@global_var_100165f8.207 = constant [26 x i8] c"Runtime Error!\0A\0AProgram: \00"
@global_var_100165f4.208 = constant [3 x i8] c"\0A\0A\00"
@global_var_100165a4.209 = constant [37 x i8] c"R6002\0D\0A- floating point not loaded\0D\0A\00"
@global_var_1001a8d4.210 = global [37 x i8]* @global_var_100165a4.209
@global_var_100165cc.211 = constant [37 x i8] c"Microsoft Visual C++ Runtime Library\00"
@global_var_1001b62c.212 = local_unnamed_addr global i32 0
@global_var_1001b78c.213 = global i32 0
@global_var_1001b788.214 = local_unnamed_addr global i32 0
@global_var_1001a960.215 = global i32 1024
@global_var_1001a978.216 = global i32 128
@global_var_100120c0.218 = constant i32 -1877999327
@global_var_100121b8.219 = constant i32 1577600395
@global_var_10012248.223 = constant i32 -1877999325
@global_var_1001b790.230 = local_unnamed_addr global i32 0
@global_var_1001acf0.231 = global i32 932
@global_var_1001b9c4.232 = local_unnamed_addr global i32 0
@global_var_1001b7ac.236 = local_unnamed_addr global i32 0
@global_var_1001acf4.237 = global i32 -2105965984
@global_var_1001b7a0.238 = global i32 0
@global_var_1001b5f4.239 = local_unnamed_addr global i32 0
@global_var_10016690.241 = constant [11 x i8] c"user32.dll\00"
@global_var_10016684.242 = constant [12 x i8] c"MessageBoxA\00"
@global_var_10016674.243 = constant [16 x i8] c"GetActiveWindow\00"
@global_var_10016660.244 = constant [19 x i8] c"GetLastActivePopup\00"
@global_var_1001b5fc.245 = local_unnamed_addr global i32 0
@global_var_1001b600.246 = local_unnamed_addr global i32 0
@global_var_100145da.249 = constant i32 268517795
@global_var_100166d0.250 = constant [7 x i8] c"1#SNAN\00"
@global_var_100166c8.251 = constant [6 x i8] c"1#IND\00"
@global_var_100166c0.252 = constant [6 x i8] c"1#INF\00"
@global_var_100166b8.253 = constant [7 x i8] c"1#QNAN\00"
@global_var_10016700.255 = constant [3 x i8] c"AM\00"
@global_var_100166fc.256 = constant [3 x i8] c"PM\00"
@global_var_100166f4.257 = constant [7 x i8] c"M/d/yy\00"
@global_var_100166e0.258 = constant [20 x i8] c"dddd, MMMM dd, yyyy\00"
@global_var_100166d8.259 = constant [8 x i8] c"H:mm:ss\00"
@global_var_1001af90.260 = global [5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10016700.255, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_100166fc.256, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_100166f4.257, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @global_var_100166e0.258, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_100166d8.259, i32 0, i32 0)]
@global_var_1001b150.261 = global i32 -858927923
@global_var_1001b624.263 = global i32 0
@global_var_1001b5f8.2 = local_unnamed_addr global i32 (i32, i32, i32, i32)* null
@global_var_10010b3d.3 = local_unnamed_addr constant i32 (i32)* inttoptr (i32 -268435395 to i32 (i32)*)
@global_var_10001164.4 = external constant i8*
@global_var_1001b3e0.13 = local_unnamed_addr global i16 0
@global_var_1001b3d2.15 = local_unnamed_addr global i16 0
@global_var_1001b3d4.16 = local_unnamed_addr global i16 0
@global_var_10018290.63 = local_unnamed_addr global i16 -1
@global_var_10018292.66 = local_unnamed_addr global i16 -1
@global_var_10018298.73 = global double* null
@global_var_100182c0.74 = global double* null
@global_var_1001a810.119 = local_unnamed_addr global x86_fp80 0xK7FFF8000000000000000
@global_var_1001a870.120 = local_unnamed_addr global x86_fp80 0xKFFFFC000000000000000
@global_var_10018390.121 = local_unnamed_addr global double 5.000000e-01
@global_var_1001a81a.123 = local_unnamed_addr global x86_fp80 0xKFFFF8000000000000000
@global_var_1001b4a4.125 = local_unnamed_addr global i16 0
@global_var_1001b4a5.126 = local_unnamed_addr global i8 0
@global_var_1001bb18.130 = external local_unnamed_addr global i8*
@global_var_1001b424.131 = external local_unnamed_addr global i8*
@global_var_100185e4.137 = local_unnamed_addr global i8 46
@global_var_100186d8.140 = local_unnamed_addr global double 0x7FEFFFFFFFFFFFFF
@global_var_100186c8.141 = local_unnamed_addr global double 0x7FF0000000000000
@global_var_100186f0.145 = local_unnamed_addr global x86_fp80 0xK440FFFFFEF4C414A2EA1
@global_var_100186fc.146 = local_unnamed_addr global x86_fp80 0xK3000800013BF136616C8
@global_var_100186e8.172 = local_unnamed_addr global double -0.000000e+00
@global_var_1001bae0.190 = local_unnamed_addr global %_STARTUPINFOA* null
@global_var_1001b4d0.196 = external local_unnamed_addr global i8*
@global_var_1001b4e4.195 = external global i8*
@global_var_1001b8c1.199 = external global i8*
@global_var_1001b8c0.233 = external global i8*
@1 = internal constant [3 x i8] c"\A6\DF\00"
@global_var_1001ad00.234 = global i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0)
@2 = internal constant [5 x i8] c"\01\02\04\08\00"
@global_var_1001ace8.235 = global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0)
@global_var_1001b7c0.240 = external global i8*
@global_var_1001b0f0.262 = global i8 14

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @FuncStatusFromEngineReply(i16 %arg1) local_unnamed_addr {
entry:
  %v4_10001006 = sext i16 %arg1 to i32
  store i32 %v4_10001006, i32* @edx, align 4
  %v1_1000101c = add i32 %v4_10001006, ptrtoint (i8** @global_var_10001164.4 to i32)
  %v2_1000101c = inttoptr i32 %v1_1000101c to i8*
  %v3_1000101c = load i8, i8* %v2_1000101c, align 1
  %v4_1000101c = zext i8 %v3_1000101c to i32
  store i32 %v4_1000101c, i32* @ecx, align 4
  switch i8 %v3_1000101c, label %dec_label_pc_100010f6 [
    i8 0, label %dec_label_pc_100010fc
    i8 1, label %dec_label_pc_10001034
    i8 2, label %dec_label_pc_1000103f
    i8 3, label %dec_label_pc_1000104a
    i8 4, label %dec_label_pc_10001055
    i8 5, label %dec_label_pc_10001060
    i8 6, label %dec_label_pc_1000106b
    i8 7, label %dec_label_pc_10001076
    i8 8, label %dec_label_pc_1000107e
    i8 9, label %dec_label_pc_10001086
    i8 10, label %dec_label_pc_1000108e
    i8 11, label %dec_label_pc_10001096
    i8 12, label %dec_label_pc_1000109e
    i8 13, label %dec_label_pc_100010a6
    i8 14, label %dec_label_pc_100010ae
    i8 15, label %dec_label_pc_100010b6
    i8 16, label %dec_label_pc_100010be
    i8 17, label %dec_label_pc_100010c6
    i8 18, label %dec_label_pc_100010ce
    i8 19, label %dec_label_pc_100010d6
    i8 20, label %dec_label_pc_100010de
    i8 21, label %dec_label_pc_100010e6
    i8 22, label %dec_label_pc_100010ee
  ]

dec_label_pc_10001034:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_1000103f:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_1000104a:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_10001055:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_10001060:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_1000106b:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_10001076:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_1000107e:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_10001086:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_1000108e:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_10001096:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_1000109e:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_100010a6:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_100010ae:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_100010b6:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_100010be:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_100010c6:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_100010ce:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_100010d6:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_100010de:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_100010e6:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_100010ee:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_100010f6:                            ; preds = %entry
  br label %dec_label_pc_100010fc

dec_label_pc_100010fc:                            ; preds = %entry, %dec_label_pc_100010ee, %dec_label_pc_100010e6, %dec_label_pc_100010de, %dec_label_pc_100010d6, %dec_label_pc_100010ce, %dec_label_pc_100010c6, %dec_label_pc_100010be, %dec_label_pc_100010b6, %dec_label_pc_100010ae, %dec_label_pc_100010a6, %dec_label_pc_1000109e, %dec_label_pc_10001096, %dec_label_pc_1000108e, %dec_label_pc_10001086, %dec_label_pc_1000107e, %dec_label_pc_10001076, %dec_label_pc_1000106b, %dec_label_pc_10001060, %dec_label_pc_10001055, %dec_label_pc_1000104a, %dec_label_pc_1000103f, %dec_label_pc_10001034, %dec_label_pc_100010f6
  %stack_var_-8.0 = phi i32 [ 254, %dec_label_pc_100010f6 ], [ 145, %dec_label_pc_100010ee ], [ 144, %dec_label_pc_100010e6 ], [ 91, %dec_label_pc_100010de ], [ 90, %dec_label_pc_100010d6 ], [ 89, %dec_label_pc_100010ce ], [ 88, %dec_label_pc_100010c6 ], [ 87, %dec_label_pc_100010be ], [ 86, %dec_label_pc_100010b6 ], [ 85, %dec_label_pc_100010ae ], [ 84, %dec_label_pc_100010a6 ], [ 83, %dec_label_pc_1000109e ], [ 82, %dec_label_pc_10001096 ], [ 81, %dec_label_pc_1000108e ], [ 73, %dec_label_pc_10001086 ], [ 72, %dec_label_pc_1000107e ], [ 71, %dec_label_pc_10001076 ], [ 70, %dec_label_pc_1000106b ], [ 69, %dec_label_pc_10001060 ], [ 68, %dec_label_pc_10001055 ], [ 67, %dec_label_pc_1000104a ], [ 66, %dec_label_pc_1000103f ], [ 65, %dec_label_pc_10001034 ], [ 64, %entry ]
  %v6_100010fc = and i32 %v4_10001006, -65536
  %v7_100010fc = or i32 %stack_var_-8.0, %v6_100010fc
  ret i32 %v7_100010fc

; uselistorder directives
  uselistorder i32 %v4_10001006, { 0, 2, 1 }
  uselistorder label %dec_label_pc_100010fc, { 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0 }
}

define i32 @SetFuncStatusCode(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_10001365 = load i32, i32* @ebp, align 4
  store i32 %v0_10001365, i32* %stack_var_-4, align 4
  %v4_10001365 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10001365, i32* @ebp, align 4
  %v4_10001368 = icmp eq i32 %arg1, 0
  %v1_1000136c = icmp eq i1 %v4_10001368, false
  br i1 %v1_1000136c, label %dec_label_pc_10001374, label %dec_label_pc_1000136e

dec_label_pc_1000136e:                            ; preds = %entry
  %v0_1000136e = load i32, i32* @eax, align 4
  %v1_1000136e = and i32 %v0_1000136e, -65536
  %v2_1000136e = or i32 %v1_1000136e, 65526
  br label %dec_label_pc_100013af

dec_label_pc_10001374:                            ; preds = %entry
  store i32 %arg1, i32* @eax, align 4
  %v1_10001377 = add i32 %arg1, 204
  %v2_10001377 = inttoptr i32 %v1_10001377 to i16*
  %v3_10001377 = load i16, i16* %v2_10001377, align 2
  %v4_10001377 = sext i16 %v3_10001377 to i32
  store i32 %v4_10001377, i32* @ecx, align 4
  %v2_1000137e = icmp slt i16 %v3_10001377, 0
  %v2_10001380 = icmp eq i1 %v2_1000137e, false
  br i1 %v2_10001380, label %dec_label_pc_10001397, label %dec_label_pc_10001382

dec_label_pc_10001382:                            ; preds = %dec_label_pc_10001374
  store i32 %arg1, i32* @edx, align 4
  %v2_10001388 = call i32 @RdEngOption(i32 %arg1, i32 2)
  %v1_10001390 = mul i32 %v2_10001388, 65536
  %v1_10001390.off = or i32 %v1_10001390, 65535
  %tmp = icmp ult i32 %v1_10001390.off, 131071
  %v1_10001395 = icmp eq i1 %tmp, false
  br i1 %v1_10001395, label %dec_label_pc_100013a5, label %dec_label_pc_10001397

dec_label_pc_10001397:                            ; preds = %dec_label_pc_10001382, %dec_label_pc_10001374
  store i32 %arg1, i32* @ecx, align 4
  %v4_1000139a = zext i16 %arg2 to i32
  %v5_1000139a = load i32, i32* @edx, align 4
  %v6_1000139a = and i32 %v5_1000139a, -65536
  %v7_1000139a = or i32 %v6_1000139a, %v4_1000139a
  store i32 %v7_1000139a, i32* @edx, align 4
  store i16 %arg2, i16* %v2_10001377, align 2
  br label %dec_label_pc_100013a5

dec_label_pc_100013a5:                            ; preds = %dec_label_pc_10001382, %dec_label_pc_10001397
  %v3_100013a8 = load i16, i16* %v2_10001377, align 2
  %v4_100013a8 = zext i16 %v3_100013a8 to i32
  %v6_100013a8 = and i32 %arg1, -65536
  %v7_100013a8 = or i32 %v4_100013a8, %v6_100013a8
  %v2_100013af.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_100013af

dec_label_pc_100013af:                            ; preds = %dec_label_pc_1000136e, %dec_label_pc_100013a5
  %v2_100013af = phi i32 [ %v0_10001365, %dec_label_pc_1000136e ], [ %v2_100013af.pre, %dec_label_pc_100013a5 ]
  %storemerge = phi i32 [ %v2_1000136e, %dec_label_pc_1000136e ], [ %v7_100013a8, %dec_label_pc_100013a5 ]
  store i32 %v2_100013af, i32* @ebp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100013af, { 1, 0 }
  uselistorder label %dec_label_pc_100013a5, { 1, 0 }
}

define i32 @GetFuncStatusCode(i32 %arg1) local_unnamed_addr {
entry:
  %v4_100013b4 = icmp eq i32 %arg1, 0
  %v1_100013b8 = icmp eq i1 %v4_100013b4, false
  br i1 %v1_100013b8, label %dec_label_pc_100013c0, label %dec_label_pc_100013ba

dec_label_pc_100013ba:                            ; preds = %entry
  %v0_100013ba = load i32, i32* @eax, align 4
  %v1_100013ba = and i32 %v0_100013ba, -65536
  %v2_100013ba = or i32 %v1_100013ba, 65526
  br label %dec_label_pc_100013ca

dec_label_pc_100013c0:                            ; preds = %entry
  %v1_100013c3 = add i32 %arg1, 204
  %v2_100013c3 = inttoptr i32 %v1_100013c3 to i16*
  %v3_100013c3 = load i16, i16* %v2_100013c3, align 2
  %v4_100013c3 = zext i16 %v3_100013c3 to i32
  %v6_100013c3 = and i32 %arg1, -65536
  %v7_100013c3 = or i32 %v4_100013c3, %v6_100013c3
  br label %dec_label_pc_100013ca

dec_label_pc_100013ca:                            ; preds = %dec_label_pc_100013ba, %dec_label_pc_100013c0
  %storemerge = phi i32 [ %v2_100013ba, %dec_label_pc_100013ba ], [ %v7_100013c3, %dec_label_pc_100013c0 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_100013ca, { 1, 0 }
}

define i32 @ClearFuncStatusCode(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_100013cc = load i32, i32* @ebp, align 4
  store i32 %v0_100013cc, i32* %stack_var_-4, align 4
  %v4_100013cf = icmp eq i32 %arg1, 0
  br i1 %v4_100013cf, label %dec_label_pc_100013e1, label %dec_label_pc_100013d5

dec_label_pc_100013d5:                            ; preds = %entry
  %v1_100013d8 = add i32 %arg1, 204
  %v2_100013d8 = inttoptr i32 %v1_100013d8 to i16*
  store i16 0, i16* %v2_100013d8, align 2
  %v2_100013e1.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_100013e1

dec_label_pc_100013e1:                            ; preds = %entry, %dec_label_pc_100013d5
  %v2_100013e1 = phi i32 [ %v0_100013cc, %entry ], [ %v2_100013e1.pre, %dec_label_pc_100013d5 ]
  store i32 %v2_100013e1, i32* @ebp, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_100013e1, { 1, 0 }
}

define i32 @SetEngineReplyCode(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %v4_100013e6 = icmp eq i32 %arg1, 0
  %v1_100013ea = icmp eq i1 %v4_100013e6, false
  br i1 %v1_100013ea, label %dec_label_pc_100013f2, label %dec_label_pc_100013ec

dec_label_pc_100013ec:                            ; preds = %entry
  %v0_100013ec = load i32, i32* @eax, align 4
  %v1_100013ec = and i32 %v0_100013ec, -65536
  %v2_100013ec = or i32 %v1_100013ec, 255
  br label %dec_label_pc_10001404

dec_label_pc_100013f2:                            ; preds = %entry
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_100013f5 = zext i16 %arg2 to i32
  %v3_100013f9 = add i32 %arg1, 206
  %v4_100013f9 = inttoptr i32 %v3_100013f9 to i16*
  store i16 %arg2, i16* %v4_100013f9, align 2
  %v5_10001400 = load i32, i32* %eax.global-to-local, align 4
  %v6_10001400 = and i32 %v5_10001400, -65536
  %v7_10001400 = or i32 %v6_10001400, %v4_100013f5
  br label %dec_label_pc_10001404

dec_label_pc_10001404:                            ; preds = %dec_label_pc_100013ec, %dec_label_pc_100013f2
  %storemerge = phi i32 [ %v2_100013ec, %dec_label_pc_100013ec ], [ %v7_10001400, %dec_label_pc_100013f2 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 2, 0, 1 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10001404, { 1, 0 }
}

define i32 @GetEngineReplyCode(i32 %arg1) local_unnamed_addr {
entry:
  %v4_10001409 = icmp eq i32 %arg1, 0
  %v1_1000140d = icmp eq i1 %v4_10001409, false
  br i1 %v1_1000140d, label %dec_label_pc_10001415, label %dec_label_pc_1000140f

dec_label_pc_1000140f:                            ; preds = %entry
  %v0_1000140f = load i32, i32* @eax, align 4
  %v1_1000140f = and i32 %v0_1000140f, -65536
  %v2_1000140f = or i32 %v1_1000140f, 255
  br label %dec_label_pc_1000141f

dec_label_pc_10001415:                            ; preds = %entry
  %v1_10001418 = add i32 %arg1, 206
  %v2_10001418 = inttoptr i32 %v1_10001418 to i16*
  %v3_10001418 = load i16, i16* %v2_10001418, align 2
  %v4_10001418 = zext i16 %v3_10001418 to i32
  %v6_10001418 = and i32 %arg1, -65536
  %v7_10001418 = or i32 %v4_10001418, %v6_10001418
  br label %dec_label_pc_1000141f

dec_label_pc_1000141f:                            ; preds = %dec_label_pc_1000140f, %dec_label_pc_10001415
  %storemerge = phi i32 [ %v2_1000140f, %dec_label_pc_1000140f ], [ %v7_10001418, %dec_label_pc_10001415 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1000141f, { 1, 0 }
}

define i32 @TestFuncStatusAndPtr(i32 %arg1) local_unnamed_addr {
entry:
  %v4_10001425 = icmp eq i32 %arg1, 0
  %v1_10001429 = icmp eq i1 %v4_10001425, false
  br i1 %v1_10001429, label %dec_label_pc_10001431, label %dec_label_pc_1000142b

dec_label_pc_1000142b:                            ; preds = %entry
  %v0_1000142b = load i32, i32* @eax, align 4
  %v1_1000142b = and i32 %v0_1000142b, -65536
  %v2_1000142b = or i32 %v1_1000142b, 65526
  br label %dec_label_pc_1000146c

dec_label_pc_10001431:                            ; preds = %entry
  store i32 %arg1, i32* @eax, align 4
  %v2_10001437 = call i32 @RdEngOption(i32 %arg1, i32 2)
  store i32 %v2_10001437, i32* @eax, align 4
  %v1_1000143f = mul i32 %v2_10001437, 65536
  %v2_1000143f = sdiv i32 %v1_1000143f, 65536
  store i32 %v2_1000143f, i32* @ecx, align 4
  %v1_1000143f.off = or i32 %v1_1000143f, 65535
  %tmp = icmp ult i32 %v1_1000143f.off, 131071
  %v1_10001444 = icmp eq i1 %tmp, false
  br i1 %v1_10001444, label %dec_label_pc_1000144b, label %dec_label_pc_10001446

dec_label_pc_10001446:                            ; preds = %dec_label_pc_10001431
  %v12_10001446 = and i32 %v2_10001437, -65536
  br label %dec_label_pc_1000146c

dec_label_pc_1000144b:                            ; preds = %dec_label_pc_10001431
  store i32 %arg1, i32* @edx, align 4
  %v1_1000144f = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_1000144f = trunc i32 %v1_1000144f to i16
  %sext = mul i32 %v1_1000144f, 65536
  %v4_1000145b = sdiv i32 %sext, 65536
  %v2_1000145f = icmp slt i16 %v2_1000144f, 0
  %v2_10001461 = icmp eq i1 %v2_1000145f, false
  br i1 %v2_10001461, label %dec_label_pc_10001469, label %dec_label_pc_10001463

dec_label_pc_10001463:                            ; preds = %dec_label_pc_1000144b
  br label %dec_label_pc_1000146c

dec_label_pc_10001469:                            ; preds = %dec_label_pc_1000144b
  %v12_10001469 = and i32 %v4_1000145b, -65536
  br label %dec_label_pc_1000146c

dec_label_pc_1000146c:                            ; preds = %dec_label_pc_10001463, %dec_label_pc_10001446, %dec_label_pc_1000142b, %dec_label_pc_10001469
  %v0_1000146f = phi i32 [ %v4_1000145b, %dec_label_pc_10001463 ], [ %v12_10001446, %dec_label_pc_10001446 ], [ %v2_1000142b, %dec_label_pc_1000142b ], [ %v12_10001469, %dec_label_pc_10001469 ]
  ret i32 %v0_1000146f

; uselistorder directives
  uselistorder i32 %v4_1000145b, { 1, 0 }
  uselistorder i32 %v2_10001437, { 1, 0, 2 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000146c, { 3, 0, 1, 2 }
}

define i32 @SetPreamp(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10001477 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10001477, i32* @eax, align 4
  %v1_1000147f = mul i32 %v1_10001477, 65536
  %v1_1000147f.off = or i32 %v1_1000147f, 65535
  %tmp = icmp ult i32 %v1_1000147f.off, 131071
  br i1 %tmp, label %dec_label_pc_10001497, label %dec_label_pc_10001486

dec_label_pc_10001486:                            ; preds = %entry
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_1000148a = call i32 @GetFuncStatusCode(i32 %arg1)
  store i32 %v1_1000148a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000153c

dec_label_pc_10001497:                            ; preds = %entry
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_1000149a = add i32 %arg1, 100
  %v2_1000149a = inttoptr i32 %v1_1000149a to i16*
  %v3_1000149a = load i16, i16* %v2_1000149a, align 2
  %v1_1000149e = icmp eq i16 %v3_1000149a, 0
  %v1_100014a0 = icmp eq i1 %v1_1000149e, false
  br i1 %v1_100014a0, label %dec_label_pc_100014ab, label %dec_label_pc_100014a2

dec_label_pc_100014a2:                            ; preds = %dec_label_pc_10001497
  %v2_100014a2 = or i32 %arg1, 65535
  store i32 %v2_100014a2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000153c

dec_label_pc_100014ab:                            ; preds = %dec_label_pc_10001497
  %v4_100014ab = sext i16 %arg2 to i32
  store i32 %v4_100014ab, i32* %edx.global-to-local, align 4
  %v2_100014af = icmp eq i16 %arg2, 0
  br i1 %v2_100014af, label %dec_label_pc_100014fb, label %dec_label_pc_100014b3

dec_label_pc_100014b3:                            ; preds = %dec_label_pc_100014ab
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_100014b6 = add i32 %arg1, 102
  %v2_100014b6 = inttoptr i32 %v1_100014b6 to i16*
  %v3_100014b6 = load i16, i16* %v2_100014b6, align 2
  %v1_100014ba = icmp eq i16 %v3_100014b6, 0
  %v1_100014bc = icmp eq i1 %v1_100014ba, false
  br i1 %v1_100014bc, label %dec_label_pc_100014f3.thread, label %dec_label_pc_100014be

dec_label_pc_100014f3.thread:                     ; preds = %dec_label_pc_100014b3
  store i32 %v4_100014ab, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10001539

dec_label_pc_100014be:                            ; preds = %dec_label_pc_100014b3
  store i32 %arg1, i32* %edx.global-to-local, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_100014c4 = add i32 %arg1, 106
  %v2_100014c4 = inttoptr i32 %v1_100014c4 to i16*
  %v3_100014c4 = load i16, i16* %v2_100014c4, align 2
  %v3_100014c8 = add i32 %arg1, 104
  %v4_100014c8 = inttoptr i32 %v3_100014c8 to i16*
  %v5_100014c8 = load i16, i16* %v4_100014c8, align 2
  %v6_100014c8 = sub i16 %v3_100014c4, %v5_100014c8
  store i32 %arg1, i32* %edx.global-to-local, align 4
  store i16 %v6_100014c8, i16* %v2_100014c4, align 2
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_100014d9 = add i32 %arg1, 98
  %v2_100014d9 = inttoptr i32 %v1_100014d9 to i16*
  %v3_100014d9 = load i16, i16* %v2_100014d9, align 2
  %v4_100014d9 = zext i16 %v3_100014d9 to i32
  %v5_100014d9 = load i32, i32* %edx.global-to-local, align 4
  %v6_100014d9 = and i32 %v5_100014d9, -65536
  %v7_100014d9 = or i32 %v6_100014d9, %v4_100014d9
  store i32 %v7_100014d9, i32* %edx.global-to-local, align 4
  %v5_100014dd = load i16, i16* %v4_100014c8, align 2
  %v6_100014dd = sub i16 %v3_100014d9, %v5_100014dd
  %v22_100014dd = zext i16 %v6_100014dd to i32
  %v25_100014dd = or i32 %v22_100014dd, %v6_100014d9
  store i32 %v25_100014dd, i32* %edx.global-to-local, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i16 %v6_100014dd, i16* %v2_100014d9, align 2
  store i16 1, i16* %v2_100014b6, align 2
  br label %dec_label_pc_10001539

dec_label_pc_100014fb:                            ; preds = %dec_label_pc_100014ab
  store i32 %v4_100014ab, i32* %edx.global-to-local, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_100014fe = add i32 %arg1, 102
  %v2_100014fe = inttoptr i32 %v1_100014fe to i16*
  %v3_100014fe = load i16, i16* %v2_100014fe, align 2
  %v1_10001502 = icmp eq i16 %v3_100014fe, 0
  br i1 %v1_10001502, label %dec_label_pc_10001539, label %dec_label_pc_10001506

dec_label_pc_10001506:                            ; preds = %dec_label_pc_100014fb
  store i32 %arg1, i32* %edx.global-to-local, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_1000150c = add i32 %arg1, 106
  %v2_1000150c = inttoptr i32 %v1_1000150c to i16*
  %v3_1000150c = load i16, i16* %v2_1000150c, align 2
  %v3_10001510 = add i32 %arg1, 104
  %v4_10001510 = inttoptr i32 %v3_10001510 to i16*
  %v5_10001510 = load i16, i16* %v4_10001510, align 2
  %v6_10001510 = add i16 %v5_10001510, %v3_1000150c
  store i32 %arg1, i32* %edx.global-to-local, align 4
  store i16 %v6_10001510, i16* %v2_1000150c, align 2
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10001521 = add i32 %arg1, 98
  %v2_10001521 = inttoptr i32 %v1_10001521 to i16*
  %v3_10001521 = load i16, i16* %v2_10001521, align 2
  %v4_10001521 = zext i16 %v3_10001521 to i32
  %v5_10001521 = load i32, i32* %edx.global-to-local, align 4
  %v6_10001521 = and i32 %v5_10001521, -65536
  %v7_10001521 = or i32 %v6_10001521, %v4_10001521
  store i32 %v7_10001521, i32* %edx.global-to-local, align 4
  %v5_10001525 = load i16, i16* %v4_10001510, align 2
  %v6_10001525 = add i16 %v5_10001525, %v3_10001521
  %v22_10001525 = zext i16 %v6_10001525 to i32
  %v25_10001525 = or i32 %v22_10001525, %v6_10001521
  store i32 %v25_10001525, i32* %edx.global-to-local, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i16 %v6_10001525, i16* %v2_10001521, align 2
  store i16 0, i16* %v2_100014fe, align 2
  br label %dec_label_pc_10001539

dec_label_pc_10001539:                            ; preds = %dec_label_pc_100014f3.thread, %dec_label_pc_100014fb, %dec_label_pc_100014be, %dec_label_pc_10001506
  %v11_10001539 = load i32, i32* %eax.global-to-local, align 4
  %v12_10001539 = and i32 %v11_10001539, -65536
  store i32 %v12_10001539, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000153c

dec_label_pc_1000153c:                            ; preds = %dec_label_pc_100014a2, %dec_label_pc_10001486, %dec_label_pc_10001539
  %v0_1000153d = phi i32 [ %v2_100014a2, %dec_label_pc_100014a2 ], [ %v1_1000148a, %dec_label_pc_10001486 ], [ %v12_10001539, %dec_label_pc_10001539 ]
  ret i32 %v0_1000153d

; uselistorder directives
  uselistorder i32 %v4_100014ab, { 1, 0, 2 }
  uselistorder i32* %edx.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 12, 13 }
  uselistorder i32* %eax.global-to-local, { 0, 8, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 26, 25, 24, 23, 0, 22, 21, 20, 19, 18, 17, 16, 15, 14, 1, 13, 12, 11, 10, 9, 2, 6, 5, 7, 8, 4, 3 }
  uselistorder label %dec_label_pc_1000153c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10001539, { 3, 1, 2, 0 }
}

define i32 @RdPreamp(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10001545 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000154d = mul i32 %v1_10001545, 65536
  %v1_1000154d.off = or i32 %v1_1000154d, 65535
  %tmp = icmp ult i32 %v1_1000154d.off, 131071
  br i1 %tmp, label %dec_label_pc_1000155a, label %dec_label_pc_10001554

dec_label_pc_10001554:                            ; preds = %entry
  %v2_10001554 = or i32 %v1_10001545, 65535
  br label %dec_label_pc_10001567

dec_label_pc_1000155a:                            ; preds = %entry
  %v1_1000155d = add i32 %arg1, 102
  %v2_1000155d = inttoptr i32 %v1_1000155d to i16*
  %v3_1000155d = load i16, i16* %v2_1000155d, align 2
  %v5_10001561 = icmp ne i16 %v3_1000155d, 0
  %v7_10001563 = sext i1 %v5_10001561 to i32
  br label %dec_label_pc_10001567

dec_label_pc_10001567:                            ; preds = %dec_label_pc_10001554, %dec_label_pc_1000155a
  %storemerge = phi i32 [ %v2_10001554, %dec_label_pc_10001554 ], [ %v7_10001563, %dec_label_pc_1000155a ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10001545, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10001567, { 1, 0 }
}

define i32 @CommInterrupts(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-16 = alloca i16, align 2
  %stack_var_-4 = alloca i32, align 4
  %v0_10001569 = load i32, i32* @ebp, align 4
  store i32 %v0_10001569, i32* %stack_var_-4, align 4
  %v4_10001569 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10001569, i32* @ebp, align 4
  store i16 1, i16* %stack_var_-16, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_1000157f = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000157f, i32* @eax, align 4
  %v1_10001587 = mul i32 %v1_1000157f, 65536
  %v1_10001587.off = or i32 %v1_10001587, 65535
  %tmp = icmp ult i32 %v1_10001587.off, 131071
  br i1 %tmp, label %dec_label_pc_1000159c, label %dec_label_pc_1000158e

dec_label_pc_1000158e:                            ; preds = %entry
  %v1_10001592 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100015d2

dec_label_pc_1000159c:                            ; preds = %entry
  %v1_1000159f = add i32 %arg1, 136
  %v2_1000159f = inttoptr i32 %v1_1000159f to i16*
  %v3_1000159f = load i16, i16* %v2_1000159f, align 2
  %v4_1000159f = zext i16 %v3_1000159f to i32
  store i32 %v4_1000159f, i32* %stack_var_-8, align 4
  %v2_100015aa = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_100015aa, i32* @edx, align 4
  %v3_100015ae = load i16, i16* %stack_var_-16, align 2
  %v4_100015ae = sext i16 %v3_100015ae to i32
  %v7_100015ae = and i32 %arg1, -65536
  %v8_100015ae = or i32 %v4_100015ae, %v7_100015ae
  %v4_100015b9 = trunc i32 %arg1 to i16
  %v5_100015b9 = call i32 @SendCommand(i16 %v4_100015b9, i32 6, i32 %v8_100015ae, i32 %v2_100015aa)
  %v6_100015b9 = trunc i32 %v5_100015b9 to i16
  %v2_100015ca = call i32 @FuncStatusFromEngineReply(i16 %v6_100015b9)
  br label %dec_label_pc_100015d2

dec_label_pc_100015d2:                            ; preds = %dec_label_pc_1000158e, %dec_label_pc_1000159c
  %v0_100015d5 = phi i32 [ %v2_100015ca, %dec_label_pc_1000159c ], [ %v1_10001592, %dec_label_pc_1000158e ]
  ret i32 %v0_100015d5

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i16* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder i32 %arg1, { 5, 0, 3, 4, 2, 1 }
  uselistorder label %dec_label_pc_100015d2, { 1, 0 }
}

define i32 @CommTrigDetect(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-32 = alloca i16, align 2
  %stack_var_-4 = alloca i32, align 4
  %v0_100015d6 = load i32, i32* @ebp, align 4
  store i32 %v0_100015d6, i32* %stack_var_-4, align 4
  %v4_100015d6 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100015d6, i32* @ebp, align 4
  store i16 8, i16* %stack_var_-32, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_100015ec = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100015ec, i32* @eax, align 4
  %v1_100015f4 = mul i32 %v1_100015ec, 65536
  %v2_100015f4 = sdiv i32 %v1_100015f4, 65536
  store i32 %v2_100015f4, i32* @ecx, align 4
  %v1_100015f4.off = or i32 %v1_100015f4, 65535
  %tmp = icmp ult i32 %v1_100015f4.off, 131071
  br i1 %tmp, label %dec_label_pc_1000160c, label %dec_label_pc_100015fb

dec_label_pc_100015fb:                            ; preds = %entry
  %v1_100015ff = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10001714

dec_label_pc_1000160c:                            ; preds = %entry
  %v1_10001613 = add i32 %arg1, 120
  %v2_10001613 = inttoptr i32 %v1_10001613 to i32*
  %v3_10001613 = load i32, i32* %v2_10001613, align 4
  store i32 %v3_10001613, i32* @edx, align 4
  %v2_1000161b = sext i32 %v3_10001613 to i64
  %v3_1000161b = bitcast i64 %v2_1000161b to double
  %v4_1000161b = call i32 @function_10002df9(i32 %arg1, double %v3_1000161b)
  %v1_10001629 = add i32 %arg1, 128
  %v2_10001629 = inttoptr i32 %v1_10001629 to i16*
  %v3_10001629 = load i16, i16* %v2_10001629, align 2
  %v4_10001629 = zext i16 %v3_10001629 to i32
  %v5_10001629 = load i32, i32* @edx, align 4
  %v6_10001629 = and i32 %v5_10001629, -65536
  %v7_10001629 = or i32 %v6_10001629, %v4_10001629
  store i32 %v7_10001629, i32* %stack_var_-24, align 4
  %v1_10001638 = call i32 @RdSweepCode(i32 %arg1)
  %v1_10001643 = and i32 %v1_10001638, 1
  %v2_10001643 = icmp eq i32 %v1_10001643, 0
  br i1 %v2_10001643, label %dec_label_pc_10001672, label %dec_label_pc_1000164a

dec_label_pc_1000164a:                            ; preds = %dec_label_pc_1000160c
  %v1_1000164d = add i32 %arg1, 110
  %v2_1000164d = inttoptr i32 %v1_1000164d to i16*
  %v3_1000164d = load i16, i16* %v2_1000164d, align 2
  %v1_10001651 = icmp eq i16 %v3_1000164d, 0
  %v1_10001653 = icmp eq i1 %v1_10001651, false
  br i1 %v1_10001653, label %dec_label_pc_10001662, label %dec_label_pc_10001655

dec_label_pc_10001655:                            ; preds = %dec_label_pc_1000164a
  br label %dec_label_pc_1000167d

dec_label_pc_10001662:                            ; preds = %dec_label_pc_1000164a
  br label %dec_label_pc_1000167d

dec_label_pc_10001672:                            ; preds = %dec_label_pc_1000160c
  br label %dec_label_pc_1000167d

dec_label_pc_1000167d:                            ; preds = %dec_label_pc_10001662, %dec_label_pc_10001655, %dec_label_pc_10001672
  %v2_100016ce = ptrtoint i32* %stack_var_-24 to i32
  %v3_100016d2 = load i16, i16* %stack_var_-32, align 2
  %v4_100016d2 = sext i16 %v3_100016d2 to i32
  %v4_100016dd = trunc i32 %arg1 to i16
  %v5_100016dd = call i32 @SendCommand(i16 %v4_100016dd, i32 4, i32 %v4_100016d2, i32 %v2_100016ce)
  %v6_100016dd = trunc i32 %v5_100016dd to i16
  %sext4 = mul i32 %v5_100016dd, 65536
  %v4_100016e9 = sdiv i32 %sext4, 65536
  %tmp27 = icmp eq i32 %sext4, 1245184
  %v1_100016f0 = icmp eq i1 %tmp27, false
  br i1 %v1_100016f0, label %dec_label_pc_100016f8, label %dec_label_pc_100016f2

dec_label_pc_100016f2:                            ; preds = %dec_label_pc_1000167d
  %v2_100016f2 = and i32 %v4_100016e9, -65536
  %v3_100016f2 = or i32 %v2_100016f2, 144
  br label %dec_label_pc_10001714

dec_label_pc_100016f8:                            ; preds = %dec_label_pc_1000167d
  %v12_100016fc = icmp slt i16 %v6_100016dd, 20
  br i1 %v12_100016fc, label %dec_label_pc_10001707, label %dec_label_pc_10001701

dec_label_pc_10001701:                            ; preds = %dec_label_pc_100016f8
  %v1_10001701 = and i32 %v4_100016e9, -65536
  %v2_10001701 = or i32 %v1_10001701, 145
  br label %dec_label_pc_10001714

dec_label_pc_10001707:                            ; preds = %dec_label_pc_100016f8
  %v2_1000170c = call i32 @FuncStatusFromEngineReply(i16 %v6_100016dd)
  br label %dec_label_pc_10001714

dec_label_pc_10001714:                            ; preds = %dec_label_pc_10001701, %dec_label_pc_100016f2, %dec_label_pc_100015fb, %dec_label_pc_10001707
  %v0_10001717 = phi i32 [ %v2_10001701, %dec_label_pc_10001701 ], [ %v3_100016f2, %dec_label_pc_100016f2 ], [ %v1_100015ff, %dec_label_pc_100015fb ], [ %v2_1000170c, %dec_label_pc_10001707 ]
  %v2_10001716 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001716, i32* @ebp, align 4
  ret i32 %v0_10001717

; uselistorder directives
  uselistorder i32 %v4_100016e9, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i16* %stack_var_-32, { 1, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 145, { 1, 0 }
  uselistorder i32 %arg1, { 8, 7, 6, 5, 4, 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_10001714, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1000167d, { 2, 0, 1 }
}

define i32 @function_10001718(i32 %arg1) local_unnamed_addr {
dec_label_pc_10001718:
  %stack_var_-4 = alloca i32, align 4
  %v0_10001718 = load i32, i32* @ebp, align 4
  store i32 %v0_10001718, i32* %stack_var_-4, align 4
  %v4_10001718 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10001718, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10001728 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10001728, i32* @eax, align 4
  %v1_10001730 = mul i32 %v1_10001728, 65536
  %v1_10001730.off = or i32 %v1_10001730, 65535
  %tmp = icmp ult i32 %v1_10001730.off, 131071
  br i1 %tmp, label %dec_label_pc_10001748, label %dec_label_pc_10001737

dec_label_pc_10001737:                            ; preds = %dec_label_pc_10001718
  store i32 %arg1, i32* @edx, align 4
  %v1_1000173b = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10001b0f

dec_label_pc_10001748:                            ; preds = %dec_label_pc_10001718
  %v1_1000174e = add i32 %arg1, 16
  %v2_1000174e = inttoptr i32 %v1_1000174e to double*
  %v3_1000174e = load double, double* %v2_1000174e, align 4
  %v4_1000174e = fpext double %v3_1000174e to x86_fp80
  %v5_1000174e = load i3, i3* @fpu_stat_TOP, align 1
  %v6_1000174e = add i3 %v5_1000174e, -1
  %v2_10001751 = add i32 %arg1, 8
  %v3_10001751 = inttoptr i32 %v2_10001751 to double*
  %v4_10001751 = load double, double* %v3_10001751, align 4
  %v5_10001751 = fpext double %v4_10001751 to x86_fp80
  %v7_10001751 = fsub x86_fp80 %v5_10001751, %v4_1000174e
  %v4_10001754 = fptrunc x86_fp80 %v7_10001751 to double
  %v3_1000175f = and i32 %arg1, 256
  %v4_1000175f = icmp eq i32 %v3_1000175f, 0
  br i1 %v4_1000175f, label %dec_label_pc_1000176d, label %dec_label_pc_10001764

dec_label_pc_10001764:                            ; preds = %dec_label_pc_10001748
  %v1_10001764 = and i32 %arg1, -65536
  %v2_10001764 = or i32 %v1_10001764, 65531
  br label %dec_label_pc_10001b0f

dec_label_pc_1000176d:                            ; preds = %dec_label_pc_10001748
  %v1_10001773 = add i32 %arg1, 68
  %v2_10001773 = inttoptr i32 %v1_10001773 to i32*
  %v3_10001773 = load i32, i32* %v2_10001773, align 4
  %v2_10001776 = add i32 %arg1, 164
  %v3_10001776 = inttoptr i32 %v2_10001776 to i32*
  store i32 %v3_10001773, i32* %v3_10001776, align 4
  %v3_10001782 = load i32, i32* %v2_10001773, align 4
  %v2_10001785 = add i32 %arg1, 168
  %v3_10001785 = inttoptr i32 %v2_10001785 to i32*
  store i32 %v3_10001782, i32* %v3_10001785, align 4
  store i32 %arg1, i32* @edx, align 4
  %v1_1000178e = add i32 %arg1, 32
  %v2_1000178e = inttoptr i32 %v1_1000178e to i16*
  %v3_1000178e = load i16, i16* %v2_1000178e, align 2
  %v4_1000178e = sext i16 %v3_1000178e to i32
  %v12_10001795 = icmp eq i16 %v3_1000178e, 1
  br i1 %v12_10001795, label %dec_label_pc_100017b4, label %dec_label_pc_1000179b

dec_label_pc_1000179b:                            ; preds = %dec_label_pc_1000176d
  %v12_1000179b = icmp eq i16 %v3_1000178e, 2
  br i1 %v12_1000179b, label %dec_label_pc_10001aa7, label %dec_label_pc_100017a5

dec_label_pc_100017a5:                            ; preds = %dec_label_pc_1000179b
  %v12_100017a5 = icmp eq i16 %v3_1000178e, 3
  br i1 %v12_100017a5, label %dec_label_pc_10001a49, label %dec_label_pc_10001af2

dec_label_pc_100017b4:                            ; preds = %dec_label_pc_1000176d
  %v1_100017b7 = add i32 %arg1, 74
  %v2_100017b7 = inttoptr i32 %v1_100017b7 to i16*
  %v3_100017b7 = load i16, i16* %v2_100017b7, align 2
  %v9_100017bb = icmp eq i16 %v3_100017b7, 1
  %v1_100017be = icmp eq i1 %v9_100017bb, false
  br i1 %v1_100017be, label %dec_label_pc_100017ce, label %dec_label_pc_100017c0

dec_label_pc_100017c0:                            ; preds = %dec_label_pc_100017b4
  %v1_100017c4 = call i32 @function_10001d01(i32 %arg1)
  br label %dec_label_pc_100017e6

dec_label_pc_100017ce:                            ; preds = %dec_label_pc_100017b4
  %v1_100017d1 = add i32 %arg1, 78
  %v2_100017d1 = inttoptr i32 %v1_100017d1 to i16*
  %v3_100017d1 = load i16, i16* %v2_100017d1, align 2
  %v9_100017d5 = icmp eq i16 %v3_100017d1, 1
  %v1_100017d8 = icmp eq i1 %v9_100017d5, false
  br i1 %v1_100017d8, label %dec_label_pc_100017e6, label %dec_label_pc_100017da

dec_label_pc_100017da:                            ; preds = %dec_label_pc_100017ce
  %v1_100017de = call i32 @function_10001e98(i32 %arg1)
  br label %dec_label_pc_100017e6

dec_label_pc_100017e6:                            ; preds = %dec_label_pc_100017ce, %dec_label_pc_100017c0, %dec_label_pc_100017da
  %v1_100017e9 = add i32 %arg1, 66
  %v2_100017e9 = inttoptr i32 %v1_100017e9 to i16*
  %v3_100017e9 = load i16, i16* %v2_100017e9, align 2
  %v9_100017ed = icmp eq i16 %v3_100017e9, 1
  %v1_100017f0 = icmp eq i1 %v9_100017ed, false
  br i1 %v1_100017f0, label %dec_label_pc_100017e6.dec_label_pc_1000183f_crit_edge, label %dec_label_pc_100017f2

dec_label_pc_100017e6.dec_label_pc_1000183f_crit_edge: ; preds = %dec_label_pc_100017e6
  %.pre = add i32 %arg1, 64
  %.pre16 = inttoptr i32 %.pre to i16*
  br label %dec_label_pc_1000183f

dec_label_pc_100017f2:                            ; preds = %dec_label_pc_100017e6
  %v1_100017f5 = add i32 %arg1, 64
  %v2_100017f5 = inttoptr i32 %v1_100017f5 to i16*
  %v3_100017f5 = load i16, i16* %v2_100017f5, align 2
  %v1_100017f9 = icmp eq i16 %v3_100017f5, 0
  %v1_100017fb = icmp eq i1 %v1_100017f9, false
  br i1 %v1_100017fb, label %dec_label_pc_1000183f, label %dec_label_pc_100017fd

dec_label_pc_100017fd:                            ; preds = %dec_label_pc_100017f2
  %v2_10001811 = call i32 @GetRBWwide(i16 4)
  %v3_10001811 = sext i32 %v2_10001811 to i64
  %v2_10001819 = ashr i32 %v2_10001811, 31
  %v5_1000181f = zext i32 %v2_10001819 to i64
  %v6_1000181f = mul nuw i64 %v5_1000181f, 4294967296
  %v7_1000181f = or i64 %v6_1000181f, %v3_10001811
  %v9_1000181f = sdiv i64 %v7_1000181f, 3
  %v3_1000182c = and i64 %v9_1000181f, 256
  %v4_1000182c = icmp eq i64 %v3_1000182c, 0
  br i1 %v4_1000182c, label %dec_label_pc_1000183f, label %dec_label_pc_10001831

dec_label_pc_10001831:                            ; preds = %dec_label_pc_100017fd
  %v3_10001837 = call i32 @SetCellMode(i32 %arg1, i16 1)
  br label %dec_label_pc_1000183f

dec_label_pc_1000183f:                            ; preds = %dec_label_pc_100017e6.dec_label_pc_1000183f_crit_edge, %dec_label_pc_100017fd, %dec_label_pc_100017f2, %dec_label_pc_10001831
  %v2_10001842.pre-phi = phi i16* [ %.pre16, %dec_label_pc_100017e6.dec_label_pc_1000183f_crit_edge ], [ %v2_100017f5, %dec_label_pc_100017fd ], [ %v2_100017f5, %dec_label_pc_100017f2 ], [ %v2_100017f5, %dec_label_pc_10001831 ]
  %v3_10001842 = load i16, i16* %v2_10001842.pre-phi, align 2
  %v9_10001846 = icmp eq i16 %v3_10001842, 1
  %v1_10001849 = icmp eq i1 %v9_10001846, false
  br i1 %v1_10001849, label %dec_label_pc_10001940, label %dec_label_pc_1000184f

dec_label_pc_1000184f:                            ; preds = %dec_label_pc_1000183f
  %v1_10001852 = add i32 %arg1, 72
  %v2_10001852 = inttoptr i32 %v1_10001852 to i16*
  %v3_10001852 = load i16, i16* %v2_10001852, align 2
  %v2_10001857 = call i32 @GetRBWwide(i16 %v3_10001852)
  %v3_10001857 = sext i32 %v2_10001857 to i64
  %v2_1000185f = ashr i32 %v2_10001857, 31
  %v5_10001865 = zext i32 %v2_1000185f to i64
  %v6_10001865 = mul nuw i64 %v5_10001865, 4294967296
  %v7_10001865 = or i64 %v6_10001865, %v3_10001857
  %v9_10001865 = sdiv i64 %v7_10001865, 3
  %v10_10001865 = trunc i64 %v9_10001865 to i32
  %v5_1000186d = load i3, i3* @fpu_stat_TOP, align 1
  %v6_1000186d = add i3 %v5_1000186d, -1
  %v3_10001870 = add i32 %arg1, 24
  %tmp38 = sitofp i32 %v10_10001865 to double
  %v5_10001870 = inttoptr i32 %v3_10001870 to double*
  store double %tmp38, double* %v5_10001870, align 4
  %v4_10001876 = fpext double %v4_10001754 to x86_fp80
  store i3 %v6_1000186d, i3* @fpu_stat_TOP, align 1
  %v1_10001882 = call i32 @__ftol(i32 %v10_10001865)
  store i32 %v1_10001882, i32* %v3_10001785, align 4
  %v2_1000189c = add i32 %arg1, 132
  %v3_1000189c = inttoptr i32 %v2_1000189c to i32*
  %v4_1000189c = load i32, i32* %v3_1000189c, align 4
  %v5_100018a2 = icmp slt i32 %v1_10001882, %v4_1000189c
  br i1 %v5_100018a2, label %dec_label_pc_100018a4, label %dec_label_pc_100018d1

dec_label_pc_100018a4:                            ; preds = %dec_label_pc_1000184f
  %v3_100018aa = load i32, i32* %v3_1000189c, align 4
  store i32 %v3_100018aa, i32* %v3_10001785, align 4
  %v1_100018bf = add i32 %v3_100018aa, -1
  %v4_100018c5 = sitofp i32 %v1_100018bf to x86_fp80
  %v7_100018c8 = fdiv x86_fp80 %v4_100018c5, %v4_10001876
  %v4_100018ce = fptrunc x86_fp80 %v7_100018c8 to double
  store double %v4_100018ce, double* %v5_10001870, align 4
  br label %dec_label_pc_100018d1

dec_label_pc_100018d1:                            ; preds = %dec_label_pc_1000184f, %dec_label_pc_100018a4
  %v3_100018d7 = load i32, i32* %v3_10001785, align 4
  store i32 %v3_100018d7, i32* %v3_10001776, align 4
  store i32 %arg1, i32* @edx, align 4
  %v1_100018e7 = call i32 @IsValidStep(i32 %arg1)
  %v1_100018ef = mul i32 %v1_100018e7, 65536
  %tmp39 = icmp eq i32 %v1_100018ef, 65536
  br i1 %tmp39, label %dec_label_pc_10001a38, label %dec_label_pc_100018f7

dec_label_pc_100018f7:                            ; preds = %dec_label_pc_100018d1, %dec_label_pc_100018f7
  %v3_100018fa = load i32, i32* %v3_10001785, align 4
  %v1_10001900 = add i32 %v3_100018fa, 10
  store i32 %v1_10001900, i32* %v3_10001785, align 4
  %v1_10001915 = add i32 %v3_100018fa, 9
  %v4_1000191b = sitofp i32 %v1_10001915 to x86_fp80
  %v7_1000191e = fdiv x86_fp80 %v4_1000191b, %v4_10001876
  %v4_10001924 = fptrunc x86_fp80 %v7_1000191e to double
  store double %v4_10001924, double* %v5_10001870, align 4
  %v1_1000192b = call i32 @IsValidStep(i32 %arg1)
  %v1_10001933 = mul i32 %v1_1000192b, 65536
  %v2_10001933 = sdiv i32 %v1_10001933, 65536
  store i32 %v2_10001933, i32* @edx, align 4
  %tmp40 = icmp eq i32 %v1_10001933, 65536
  %v1_10001939 = icmp eq i1 %tmp40, false
  br i1 %v1_10001939, label %dec_label_pc_100018f7, label %dec_label_pc_10001a38

dec_label_pc_10001940:                            ; preds = %dec_label_pc_1000183f
  %v1_10001943 = add i32 %arg1, 72
  %v2_10001943 = inttoptr i32 %v1_10001943 to i16*
  %v3_10001943 = load i16, i16* %v2_10001943, align 2
  %v2_10001948 = call i32 @GetRBWwide(i16 %v3_10001943)
  %v3_10001948 = sext i32 %v2_10001948 to i64
  %v2_10001950 = ashr i32 %v2_10001948, 31
  %v5_10001956 = zext i32 %v2_10001950 to i64
  %v6_10001956 = mul nuw i64 %v5_10001956, 4294967296
  %v7_10001956 = or i64 %v6_10001956, %v3_10001948
  %v9_10001956 = sdiv i64 %v7_10001956, 3
  %v10_10001956 = trunc i64 %v9_10001956 to i32
  %v5_1000195e = load i3, i3* @fpu_stat_TOP, align 1
  %v6_1000195e = add i3 %v5_1000195e, -1
  %v3_10001961 = add i32 %arg1, 24
  %tmp41 = sitofp i32 %v10_10001956 to double
  %v5_10001961 = inttoptr i32 %v3_10001961 to double*
  store double %tmp41, double* %v5_10001961, align 4
  %v4_10001967 = fpext double %v4_10001754 to x86_fp80
  store i3 %v6_1000195e, i3* @fpu_stat_TOP, align 1
  %v1_10001973 = call i32 @__ftol(i32 %v10_10001956)
  store i32 %v1_10001973, i32* %v3_10001785, align 4
  %v4_1000198d = load i32, i32* %v2_10001773, align 4
  %v5_10001990 = icmp slt i32 %v1_10001973, %v4_1000198d
  br i1 %v5_10001990, label %dec_label_pc_10001992, label %dec_label_pc_100019bc

dec_label_pc_10001992:                            ; preds = %dec_label_pc_10001940
  %v3_10001998 = load i32, i32* %v2_10001773, align 4
  store i32 %v3_10001998, i32* %v3_10001785, align 4
  %v1_100019aa = add i32 %v3_10001998, -1
  %v4_100019b0 = sitofp i32 %v1_100019aa to x86_fp80
  %v7_100019b3 = fdiv x86_fp80 %v4_100019b0, %v4_10001967
  %v4_100019b9 = fptrunc x86_fp80 %v7_100019b3 to double
  store double %v4_100019b9, double* %v5_10001961, align 4
  br label %dec_label_pc_100019bc

dec_label_pc_100019bc:                            ; preds = %dec_label_pc_10001940, %dec_label_pc_10001992
  %v3_100019c2 = load i32, i32* %v3_10001785, align 4
  store i32 %v3_100019c2, i32* %v3_10001776, align 4
  store i32 %arg1, i32* @edx, align 4
  %v1_100019d2 = call i32 @IsValidStep(i32 %arg1)
  %v1_100019da = mul i32 %v1_100019d2, 65536
  %tmp42 = icmp eq i32 %v1_100019da, 65536
  br i1 %tmp42, label %dec_label_pc_10001a38, label %dec_label_pc_100019e2

dec_label_pc_100019e2:                            ; preds = %dec_label_pc_100019bc, %dec_label_pc_100019e2
  %v3_100019e5 = load i32, i32* %v3_10001785, align 4
  %v1_100019eb = add i32 %v3_100019e5, 10
  store i32 %v1_100019eb, i32* %v3_10001785, align 4
  store i32 %v1_100019eb, i32* %v3_10001776, align 4
  %v3_10001a0c = load i32, i32* %v3_10001785, align 4
  %v1_10001a12 = add i32 %v3_10001a0c, -1
  %v4_10001a18 = sitofp i32 %v1_10001a12 to x86_fp80
  %v7_10001a1b = fdiv x86_fp80 %v4_10001a18, %v4_10001967
  %v4_10001a21 = fptrunc x86_fp80 %v7_10001a1b to double
  store double %v4_10001a21, double* %v5_10001961, align 4
  %v1_10001a28 = call i32 @IsValidStep(i32 %arg1)
  %v1_10001a30 = mul i32 %v1_10001a28, 65536
  %v2_10001a30 = sdiv i32 %v1_10001a30, 65536
  store i32 %v2_10001a30, i32* @edx, align 4
  %tmp43 = icmp eq i32 %v1_10001a30, 65536
  %v1_10001a36 = icmp eq i1 %tmp43, false
  br i1 %v1_10001a36, label %dec_label_pc_100019e2, label %dec_label_pc_10001a38

dec_label_pc_10001a38:                            ; preds = %dec_label_pc_100018f7, %dec_label_pc_100019e2, %dec_label_pc_100018d1, %dec_label_pc_100019bc
  %v1_10001a3c = call i32 @function_10001b13(i32 %arg1)
  br label %dec_label_pc_10001af2

dec_label_pc_10001a49:                            ; preds = %dec_label_pc_100017a5
  store i3 %v6_1000174e, i3* @fpu_stat_TOP, align 1
  %v1_10001a52 = call i32 @__ftol(i32 %v4_1000178e)
  %v1_10001a57 = add i32 %v1_10001a52, 1
  store i32 %v1_10001a57, i32* %v3_10001785, align 4
  store i32 %v1_10001a57, i32* @edx, align 4
  store i32 %v1_10001a57, i32* %v3_10001776, align 4
  %v1_10001a78 = add i32 %arg1, 74
  %v2_10001a78 = inttoptr i32 %v1_10001a78 to i16*
  %v3_10001a78 = load i16, i16* %v2_10001a78, align 2
  %v9_10001a7c = icmp eq i16 %v3_10001a78, 1
  %v1_10001a7f = icmp eq i1 %v9_10001a7c, false
  br i1 %v1_10001a7f, label %dec_label_pc_10001a8d, label %dec_label_pc_10001a81

dec_label_pc_10001a81:                            ; preds = %dec_label_pc_10001a49
  %v1_10001a85 = call i32 @function_10001d01(i32 %arg1)
  br label %dec_label_pc_10001a8d

dec_label_pc_10001a8d:                            ; preds = %dec_label_pc_10001a49, %dec_label_pc_10001a81
  %v1_10001a90 = add i32 %arg1, 78
  %v2_10001a90 = inttoptr i32 %v1_10001a90 to i16*
  %v3_10001a90 = load i16, i16* %v2_10001a90, align 2
  %v9_10001a94 = icmp eq i16 %v3_10001a90, 1
  %v1_10001a97 = icmp eq i1 %v9_10001a94, false
  br i1 %v1_10001a97, label %dec_label_pc_10001af2, label %dec_label_pc_10001a99

dec_label_pc_10001a99:                            ; preds = %dec_label_pc_10001a8d
  store i32 %arg1, i32* @edx, align 4
  %v1_10001a9d = call i32 @function_10001e98(i32 %arg1)
  br label %dec_label_pc_10001af2

dec_label_pc_10001aa7:                            ; preds = %dec_label_pc_1000179b
  %v3_10001aaa = load i32, i32* %v3_10001785, align 4
  %v1_10001ab0 = add i32 %v3_10001aaa, -1
  %v4_10001ab6 = sitofp i32 %v1_10001ab0 to x86_fp80
  %v5_10001ab9 = fpext double %v4_10001754 to x86_fp80
  %v7_10001ab9 = fdiv x86_fp80 %v4_10001ab6, %v5_10001ab9
  store i32 %arg1, i32* @edx, align 4
  %v3_10001abf = add i32 %arg1, 24
  %v4_10001abf = fptrunc x86_fp80 %v7_10001ab9 to double
  %v5_10001abf = inttoptr i32 %v3_10001abf to double*
  store double %v4_10001abf, double* %v5_10001abf, align 4
  %v1_10001ac5 = add i32 %arg1, 74
  %v2_10001ac5 = inttoptr i32 %v1_10001ac5 to i16*
  %v3_10001ac5 = load i16, i16* %v2_10001ac5, align 2
  %v9_10001ac9 = icmp eq i16 %v3_10001ac5, 1
  %v1_10001acc = icmp eq i1 %v9_10001ac9, false
  br i1 %v1_10001acc, label %dec_label_pc_10001ada, label %dec_label_pc_10001ace

dec_label_pc_10001ace:                            ; preds = %dec_label_pc_10001aa7
  %v1_10001ad2 = call i32 @function_10001d01(i32 %arg1)
  br label %dec_label_pc_10001ada

dec_label_pc_10001ada:                            ; preds = %dec_label_pc_10001aa7, %dec_label_pc_10001ace
  %v1_10001add = add i32 %arg1, 78
  %v2_10001add = inttoptr i32 %v1_10001add to i16*
  %v3_10001add = load i16, i16* %v2_10001add, align 2
  %v9_10001ae1 = icmp eq i16 %v3_10001add, 1
  %v1_10001ae4 = icmp eq i1 %v9_10001ae1, false
  br i1 %v1_10001ae4, label %dec_label_pc_10001af2, label %dec_label_pc_10001ae6

dec_label_pc_10001ae6:                            ; preds = %dec_label_pc_10001ada
  store i32 %arg1, i32* @edx, align 4
  %v1_10001aea = call i32 @function_10001e98(i32 %arg1)
  br label %dec_label_pc_10001af2

dec_label_pc_10001af2:                            ; preds = %dec_label_pc_10001a99, %dec_label_pc_10001a8d, %dec_label_pc_100017a5, %dec_label_pc_10001ada, %dec_label_pc_10001a38, %dec_label_pc_10001ae6
  %v1_10001af5 = add i32 %arg1, 24
  %v2_10001af5 = inttoptr i32 %v1_10001af5 to double*
  %v3_10001af5 = load double, double* %v2_10001af5, align 4
  %v4_10001af5 = fpext double %v3_10001af5 to x86_fp80
  store x86_fp80 %v4_10001af5, x86_fp80* @st1, align 4
  %v6_10001b0b = and i32 %arg1, -65536
  br label %dec_label_pc_10001b0f

dec_label_pc_10001b0f:                            ; preds = %dec_label_pc_10001764, %dec_label_pc_10001737, %dec_label_pc_10001af2
  %v0_10001b12 = phi i32 [ %v2_10001764, %dec_label_pc_10001764 ], [ %v1_1000173b, %dec_label_pc_10001737 ], [ %v6_10001b0b, %dec_label_pc_10001af2 ]
  %v2_10001b11 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001b11, i32* @ebp, align 4
  ret i32 %v0_10001b12

; uselistorder directives
  uselistorder i32 %v1_10001a57, { 1, 0, 2 }
  uselistorder i32 %v10_10001956, { 1, 0 }
  uselistorder i32 %v10_10001865, { 1, 0 }
  uselistorder i32* %v3_10001785, { 1, 0, 7, 8, 9, 10, 11, 12, 2, 3, 4, 5, 6, 13 }
  uselistorder i32* %v3_10001776, { 0, 2, 3, 1, 4 }
  uselistorder double %v4_10001754, { 0, 2, 1 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 (i32)* @IsValidStep, { 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 1, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 5, 28, 27, 26, 25, 24, 6, 29, 23, 22, 0, 21, 20, 18, 19, 17, 16, 15, 14, 13, 12, 2, 3, 4, 9, 10, 11, 8, 7 }
  uselistorder label %dec_label_pc_10001b0f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10001af2, { 5, 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_10001ada, { 1, 0 }
  uselistorder label %dec_label_pc_10001a8d, { 1, 0 }
  uselistorder label %dec_label_pc_10001a38, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_100019e2, { 1, 0 }
  uselistorder label %dec_label_pc_100019bc, { 1, 0 }
  uselistorder label %dec_label_pc_100018f7, { 1, 0 }
  uselistorder label %dec_label_pc_100018d1, { 1, 0 }
  uselistorder label %dec_label_pc_1000183f, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_100017e6, { 2, 0, 1 }
}

define i32 @function_10001b13(i32 %arg1) local_unnamed_addr {
dec_label_pc_10001b13:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10001b13 = load i32, i32* @ebp, align 4
  store i32 %v0_10001b13, i32* %stack_var_-4, align 4
  %v4_10001b13 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10001b13, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10001b32 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10001b32, i32* %eax.global-to-local, align 4
  %v1_10001b3a = mul i32 %v1_10001b32, 65536
  %v2_10001b3a = sdiv i32 %v1_10001b3a, 65536
  store i32 %v2_10001b3a, i32* @ecx, align 4
  %v1_10001b3a.off = or i32 %v1_10001b3a, 65535
  %tmp = icmp ult i32 %v1_10001b3a.off, 131071
  br i1 %tmp, label %dec_label_pc_10001b46, label %dec_label_pc_10001cfd

dec_label_pc_10001b46:                            ; preds = %dec_label_pc_10001b13
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_10001b49 = add i32 %arg1, 168
  %v2_10001b49 = inttoptr i32 %v1_10001b49 to i32*
  %v3_10001b49 = load i32, i32* %v2_10001b49, align 4
  store i32 %v3_10001b49, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_10001b55 = add i32 %arg1, 34
  %v2_10001b55 = inttoptr i32 %v1_10001b55 to i16*
  %v3_10001b55 = load i16, i16* %v2_10001b55, align 2
  %v4_10001b55 = sext i16 %v3_10001b55 to i32
  store i32 %v4_10001b55, i32* @edx, align 4
  %v12_10001b5c = icmp eq i16 %v3_10001b55, 1
  br i1 %v12_10001b5c, label %dec_label_pc_10001b7b, label %dec_label_pc_10001b62

dec_label_pc_10001b62:                            ; preds = %dec_label_pc_10001b46
  %v12_10001b62 = icmp eq i16 %v3_10001b55, 2
  br i1 %v12_10001b62, label %dec_label_pc_10001c03, label %dec_label_pc_10001b6c

dec_label_pc_10001b6c:                            ; preds = %dec_label_pc_10001b62
  %v12_10001b6c = icmp eq i16 %v3_10001b55, 3
  br i1 %v12_10001b6c, label %dec_label_pc_10001c74, label %dec_label_pc_10001cfd

dec_label_pc_10001b7b:                            ; preds = %dec_label_pc_10001b46
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10001b7e = add i32 %arg1, 36
  %v2_10001b7e = inttoptr i32 %v1_10001b7e to i32*
  %v3_10001b7e = load i32, i32* %v2_10001b7e, align 4
  %tmp29 = icmp slt i32 %v3_10001b7e, 1
  br i1 %tmp29, label %dec_label_pc_10001b92, label %dec_label_pc_10001b84

dec_label_pc_10001b84:                            ; preds = %dec_label_pc_10001b7b
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v3_10001b8a = load i32, i32* %v2_10001b7e, align 4
  store i32 %v3_10001b8a, i32* %eax.global-to-local, align 4
  %v2_10001b8d = add i32 %arg1, 40
  %v3_10001b8d = inttoptr i32 %v2_10001b8d to i32*
  store i32 %v3_10001b8a, i32* %v3_10001b8d, align 4
  br label %dec_label_pc_10001b9c

dec_label_pc_10001b92:                            ; preds = %dec_label_pc_10001b7b
  %v1_10001b95 = add i32 %arg1, 40
  %v2_10001b95 = inttoptr i32 %v1_10001b95 to i32*
  store i32 0, i32* %v2_10001b95, align 4
  br label %dec_label_pc_10001b9c

dec_label_pc_10001b9c:                            ; preds = %dec_label_pc_10001b84, %dec_label_pc_10001b92
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_10001b9f = add i32 %arg1, 72
  %v2_10001b9f = inttoptr i32 %v1_10001b9f to i16*
  %v3_10001b9f = load i16, i16* %v2_10001b9f, align 2
  %v4_10001b9f = zext i16 %v3_10001b9f to i32
  %v5_10001b9f = load i32, i32* %eax.global-to-local, align 4
  %v6_10001b9f = and i32 %v5_10001b9f, -65536
  %v7_10001b9f = or i32 %v6_10001b9f, %v4_10001b9f
  store i32 %v7_10001b9f, i32* %eax.global-to-local, align 4
  %v2_10001ba4 = call i32 @DefltSetTimeRBW(i16 %v3_10001b9f)
  store i32 %v2_10001ba4, i32* %eax.global-to-local, align 4
  %v1_10001bb2 = add i32 %arg1, 76
  %v2_10001bb2 = inttoptr i32 %v1_10001bb2 to i16*
  %v3_10001bb2 = load i16, i16* %v2_10001bb2, align 2
  %v4_10001bb2 = zext i16 %v3_10001bb2 to i32
  %v5_10001bb2 = load i32, i32* %edx.global-to-local, align 4
  %v6_10001bb2 = and i32 %v5_10001bb2, -65536
  %v7_10001bb2 = or i32 %v6_10001bb2, %v4_10001bb2
  store i32 %v7_10001bb2, i32* %edx.global-to-local, align 4
  %v2_10001bb7 = call i32 @DefltSetTimeVBW(i16 %v3_10001bb2)
  store i32 %v2_10001bb7, i32* %eax.global-to-local, align 4
  %v7_10001bc8 = icmp sgt i32 %v2_10001bb7, %v2_10001ba4
  br i1 %v7_10001bc8, label %dec_label_pc_10001bca, label %dec_label_pc_10001bd2

dec_label_pc_10001bca:                            ; preds = %dec_label_pc_10001b9c
  br label %dec_label_pc_10001bd8

dec_label_pc_10001bd2:                            ; preds = %dec_label_pc_10001b9c
  store i32 %v2_10001ba4, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10001bd8

dec_label_pc_10001bd8:                            ; preds = %dec_label_pc_10001bca, %dec_label_pc_10001bd2
  %storemerge5 = phi i32 [ %v2_10001ba4, %dec_label_pc_10001bd2 ], [ %v2_10001bb7, %dec_label_pc_10001bca ]
  store i32 %storemerge5, i32* %eax.global-to-local, align 4
  %v5_10001bde = sitofp i32 %v3_10001b49 to x86_fp80
  %v1_10001be4 = add i32 %arg1, 60
  %v2_10001be4 = inttoptr i32 %v1_10001be4 to i32*
  %v3_10001be4 = load i32, i32* %v2_10001be4, align 4
  %v5_10001be7 = add i32 %v3_10001be4, %storemerge5
  store i32 %v5_10001be7, i32* %edx.global-to-local, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_10001bed = load i32, i32* %v2_10001b7e, align 4
  %v5_10001bed = add i32 %v4_10001bed, %v5_10001be7
  store i32 %v5_10001bed, i32* @edx, align 4
  %v4_10001bf3 = sitofp i32 %v5_10001bed to x86_fp80
  store x86_fp80 %v4_10001bf3, x86_fp80* @st1, align 4
  %v4_10001bf6 = fmul x86_fp80 %v5_10001bde, %v4_10001bf3
  store i32 %arg1, i32* @ecx, align 4
  %v3_10001bfb = add i32 %arg1, 48
  %v4_10001bfb = fptrunc x86_fp80 %v4_10001bf6 to double
  %v5_10001bfb = inttoptr i32 %v3_10001bfb to double*
  store double %v4_10001bfb, double* %v5_10001bfb, align 4
  br label %dec_label_pc_10001cfd

dec_label_pc_10001c03:                            ; preds = %dec_label_pc_10001b62
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_10001c06 = add i32 %arg1, 60
  %v2_10001c06 = inttoptr i32 %v1_10001c06 to i32*
  %v3_10001c06 = load i32, i32* %v2_10001c06, align 4
  %v8_10001c09 = mul i32 %v3_10001c06, %v3_10001b49
  store i32 %v8_10001c09, i32* %eax.global-to-local, align 4
  %v3_10001c1b = and i32 %v8_10001c09, 16640
  %v4_10001c1b = icmp eq i32 %v3_10001c1b, 0
  %v1_10001c1e = icmp eq i1 %v4_10001c1b, false
  br i1 %v1_10001c1e, label %dec_label_pc_10001c45, label %dec_label_pc_10001c20

dec_label_pc_10001c20:                            ; preds = %dec_label_pc_10001c03
  %v2_10001c16 = add i32 %arg1, 48
  %v3_10001c16 = inttoptr i32 %v2_10001c16 to double*
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_10001c23 = add i32 %arg1, 40
  %v2_10001c23 = inttoptr i32 %v1_10001c23 to i32*
  store i32 -1, i32* %v2_10001c23, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_10001c2d = load i32, i32* %v2_10001c06, align 4
  %v8_10001c30 = mul i32 %v3_10001c2d, %v3_10001b49
  %v6_10001c34 = add i32 %v8_10001c30, %v3_10001b49
  store i32 %v6_10001c34, i32* @ecx, align 4
  store i32 %arg1, i32* @edx, align 4
  %tmp31 = sitofp i32 %v6_10001c34 to double
  store double %tmp31, double* %v3_10001c16, align 4
  br label %dec_label_pc_10001cfd

dec_label_pc_10001c45:                            ; preds = %dec_label_pc_10001c03
  %v5_10001c10 = load i3, i3* @fpu_stat_TOP, align 1
  %v6_10001c10 = add i3 %v5_10001c10, -1
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_10001c4b = load i32, i32* %v2_10001c06, align 4
  %v8_10001c4e = mul i32 %v3_10001c4b, %v3_10001b49
  store i32 %v8_10001c4e, i32* @edx, align 4
  store i3 %v6_10001c10, i3* @fpu_stat_TOP, align 1
  %v1_10001c64 = call i32 @__ftol(i32 %v8_10001c4e)
  store i32 %v1_10001c64, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v2_10001c6c = add i32 %arg1, 40
  %v3_10001c6c = inttoptr i32 %v2_10001c6c to i32*
  store i32 %v1_10001c64, i32* %v3_10001c6c, align 4
  %v0_10001d00.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10001cfd

dec_label_pc_10001c74:                            ; preds = %dec_label_pc_10001b6c
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_10001c77 = add i32 %arg1, 36
  %v2_10001c77 = inttoptr i32 %v1_10001c77 to i32*
  %v3_10001c77 = load i32, i32* %v2_10001c77, align 4
  %tmp30 = icmp slt i32 %v3_10001c77, 1
  br i1 %tmp30, label %dec_label_pc_10001caf, label %dec_label_pc_10001c7d

dec_label_pc_10001c7d:                            ; preds = %dec_label_pc_10001c74
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10001c80 = add i32 %arg1, 40
  %v2_10001c80 = inttoptr i32 %v1_10001c80 to i32*
  store i32 0, i32* %v2_10001c80, align 4
  %v1_10001c8a = add i32 %arg1, 72
  %v2_10001c8a = inttoptr i32 %v1_10001c8a to i16*
  %v3_10001c8a = load i16, i16* %v2_10001c8a, align 2
  %v4_10001c8a = zext i16 %v3_10001c8a to i32
  %v5_10001c8a = load i32, i32* %edx.global-to-local, align 4
  %v6_10001c8a = and i32 %v5_10001c8a, -65536
  %v7_10001c8a = or i32 %v6_10001c8a, %v4_10001c8a
  store i32 %v7_10001c8a, i32* %edx.global-to-local, align 4
  %v2_10001c8f = call i32 @DefltSetTimeRBW(i16 %v3_10001c8a)
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10001c9d = add i32 %arg1, 76
  %v2_10001c9d = inttoptr i32 %v1_10001c9d to i16*
  %v3_10001c9d = load i16, i16* %v2_10001c9d, align 2
  %v2_10001ca2 = call i32 @DefltSetTimeVBW(i16 %v3_10001c9d)
  br label %dec_label_pc_10001cc1

dec_label_pc_10001caf:                            ; preds = %dec_label_pc_10001c74
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_10001cb2 = add i32 %arg1, 40
  %v2_10001cb2 = inttoptr i32 %v1_10001cb2 to i32*
  %v3_10001cb2 = load i32, i32* %v2_10001cb2, align 4
  store i32 %v3_10001cb2, i32* %eax.global-to-local, align 4
  %v1_10001cb6 = call i32 @function_1000d563(i32 %v3_10001cb2)
  br label %dec_label_pc_10001cc1

dec_label_pc_10001cc1:                            ; preds = %dec_label_pc_10001c7d, %dec_label_pc_10001caf
  %stack_var_-8.0 = phi i32 [ %v2_10001ca2, %dec_label_pc_10001c7d ], [ 0, %dec_label_pc_10001caf ]
  %storemerge13 = phi i32 [ %v2_10001ca2, %dec_label_pc_10001c7d ], [ %v1_10001cb6, %dec_label_pc_10001caf ]
  %stack_var_-12.0 = phi i32 [ %v2_10001c8f, %dec_label_pc_10001c7d ], [ %v1_10001cb6, %dec_label_pc_10001caf ]
  store i32 %storemerge13, i32* %eax.global-to-local, align 4
  %v7_10001cc7 = icmp sgt i32 %stack_var_-8.0, %stack_var_-12.0
  br i1 %v7_10001cc7, label %dec_label_pc_10001cc9, label %dec_label_pc_10001cd1

dec_label_pc_10001cc9:                            ; preds = %dec_label_pc_10001cc1
  store i32 %stack_var_-8.0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10001cd7

dec_label_pc_10001cd1:                            ; preds = %dec_label_pc_10001cc1
  store i32 %stack_var_-12.0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10001cd7

dec_label_pc_10001cd7:                            ; preds = %dec_label_pc_10001cc9, %dec_label_pc_10001cd1
  %storemerge = phi i32 [ %stack_var_-12.0, %dec_label_pc_10001cd1 ], [ %stack_var_-8.0, %dec_label_pc_10001cc9 ]
  %v5_10001cdd = sitofp i32 %v3_10001b49 to x86_fp80
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_10001ce3 = add i32 %arg1, 60
  %v2_10001ce3 = inttoptr i32 %v1_10001ce3 to i32*
  %v3_10001ce3 = load i32, i32* %v2_10001ce3, align 4
  %v5_10001ce6 = add i32 %v3_10001ce3, %storemerge
  store i32 %v5_10001ce6, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v4_10001cec = load i32, i32* %v2_10001c77, align 4
  %v5_10001cec = add i32 %v4_10001cec, %v5_10001ce6
  store i32 %v5_10001cec, i32* %eax.global-to-local, align 4
  %v4_10001cf2 = sitofp i32 %v5_10001cec to x86_fp80
  store x86_fp80 %v4_10001cf2, x86_fp80* @st1, align 4
  %v4_10001cf5 = fmul x86_fp80 %v5_10001cdd, %v4_10001cf2
  store i32 %arg1, i32* @edx, align 4
  %v3_10001cfa = add i32 %arg1, 48
  %v4_10001cfa = fptrunc x86_fp80 %v4_10001cf5 to double
  %v5_10001cfa = inttoptr i32 %v3_10001cfa to double*
  store double %v4_10001cfa, double* %v5_10001cfa, align 4
  br label %dec_label_pc_10001cfd

dec_label_pc_10001cfd:                            ; preds = %dec_label_pc_10001c45, %dec_label_pc_10001c20, %dec_label_pc_10001b6c, %dec_label_pc_10001b13, %dec_label_pc_10001bd8, %dec_label_pc_10001cd7
  %v0_10001d00 = phi i32 [ %v0_10001d00.pre, %dec_label_pc_10001c45 ], [ %arg1, %dec_label_pc_10001c20 ], [ %v3_10001b49, %dec_label_pc_10001b6c ], [ %v1_10001b32, %dec_label_pc_10001b13 ], [ %arg1, %dec_label_pc_10001bd8 ], [ %v5_10001cec, %dec_label_pc_10001cd7 ]
  %v2_10001cff = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001cff, i32* @ebp, align 4
  ret i32 %v0_10001d00

; uselistorder directives
  uselistorder i32 %stack_var_-12.0, { 1, 0, 2 }
  uselistorder i32 %stack_var_-8.0, { 1, 0, 2 }
  uselistorder i32 %v2_10001ca2, { 1, 0 }
  uselistorder i32 %v8_10001c4e, { 1, 0 }
  uselistorder i32 %v8_10001c09, { 1, 0 }
  uselistorder i32* %v2_10001c06, { 1, 0, 2 }
  uselistorder i32 %v2_10001ba4, { 1, 0, 2, 3 }
  uselistorder i32* %v2_10001b7e, { 1, 0, 2 }
  uselistorder i32 %v3_10001b49, { 4, 6, 0, 1, 2, 3, 5, 7 }
  uselistorder i32 %v1_10001b32, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 21, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18, 19, 20 }
  uselistorder i32 %arg1, { 0, 1, 43, 42, 41, 40, 39, 36, 35, 34, 33, 32, 37, 38, 31, 30, 29, 28, 25, 24, 23, 26, 27, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 10, 11, 12, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder label %dec_label_pc_10001cfd, { 5, 0, 1, 4, 2, 3 }
  uselistorder label %dec_label_pc_10001cd7, { 1, 0 }
  uselistorder label %dec_label_pc_10001cc1, { 1, 0 }
  uselistorder label %dec_label_pc_10001bd8, { 1, 0 }
  uselistorder label %dec_label_pc_10001b9c, { 1, 0 }
}

define i32 @function_10001d01(i32 %arg1) local_unnamed_addr {
dec_label_pc_10001d01:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10001d01 = load i32, i32* @ebp, align 4
  store i32 %v0_10001d01, i32* %stack_var_-4, align 4
  %v4_10001d01 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10001d01, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10001d0a = add i32 %arg1, 164
  %v2_10001d0a = inttoptr i32 %v1_10001d0a to i32*
  %v3_10001d0a = load i32, i32* %v2_10001d0a, align 4
  store i32 %v3_10001d0a, i32* %ecx.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v1_10001d25 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10001d2d = mul i32 %v1_10001d25, 65536
  %v2_10001d2d = sdiv i32 %v1_10001d2d, 65536
  store i32 %v2_10001d2d, i32* %eax.global-to-local, align 4
  %v1_10001d2d.off = or i32 %v1_10001d2d, 65535
  %tmp = icmp ult i32 %v1_10001d2d.off, 131071
  br i1 %tmp, label %dec_label_pc_10001d39, label %dec_label_pc_10001e94

dec_label_pc_10001d39:                            ; preds = %dec_label_pc_10001d01
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_10001d3c = add i32 %arg1, 74
  %v2_10001d3c = inttoptr i32 %v1_10001d3c to i16*
  %v3_10001d3c = load i16, i16* %v2_10001d3c, align 2
  %v4_10001d3c = sext i16 %v3_10001d3c to i32
  store i32 %v4_10001d3c, i32* @edx, align 4
  %v1_10001d40 = icmp eq i16 %v3_10001d3c, 0
  %v1_10001d42 = icmp eq i1 %v1_10001d40, false
  br i1 %v1_10001d42, label %dec_label_pc_10001d49, label %dec_label_pc_10001e94

dec_label_pc_10001d49:                            ; preds = %dec_label_pc_10001d39
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_10001d4f = add i32 %arg1, 16
  %v2_10001d4f = inttoptr i32 %v1_10001d4f to double*
  %v3_10001d4f = load double, double* %v2_10001d4f, align 4
  %v4_10001d4f = fpext double %v3_10001d4f to x86_fp80
  %v2_10001d52 = add i32 %arg1, 8
  %v3_10001d52 = inttoptr i32 %v2_10001d52 to double*
  %v4_10001d52 = load double, double* %v3_10001d52, align 4
  %v5_10001d52 = fpext double %v4_10001d52 to x86_fp80
  %v7_10001d52 = fsub x86_fp80 %v5_10001d52, %v4_10001d4f
  %v4_10001d55 = fptrunc x86_fp80 %v7_10001d52 to double
  %v1_10001d5b = add i32 %arg1, 64
  %v2_10001d5b = inttoptr i32 %v1_10001d5b to i16*
  %v3_10001d5b = load i16, i16* %v2_10001d5b, align 2
  %v4_10001d5b = sext i16 %v3_10001d5b to i32
  store i32 %v4_10001d5b, i32* %eax.global-to-local, align 4
  %v1_10001d5f = icmp eq i16 %v3_10001d5b, 0
  %v1_10001d61 = icmp eq i1 %v1_10001d5f, false
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  br i1 %v1_10001d61, label %dec_label_pc_10001d83, label %dec_label_pc_10001d63

dec_label_pc_10001d63:                            ; preds = %dec_label_pc_10001d49
  %v3_10001d66 = load i32, i32* %v2_10001d0a, align 4
  %v1_10001d72 = add i32 %v3_10001d66, -1
  store i32 %v1_10001d72, i32* %eax.global-to-local, align 4
  %v4_10001d78 = sitofp i32 %v1_10001d72 to x86_fp80
  %v5_10001d7b = fpext double %v4_10001d55 to x86_fp80
  %v7_10001d7b = fdiv x86_fp80 %v4_10001d78, %v5_10001d7b
  %tmp37 = fptrunc x86_fp80 %v7_10001d7b to double
  br label %dec_label_pc_10001dad

dec_label_pc_10001d83:                            ; preds = %dec_label_pc_10001d49
  %v3_10001d86 = load i16, i16* %v2_10001d5b, align 2
  %v9_10001d8a = icmp eq i16 %v3_10001d86, 1
  %v1_10001d8d = icmp eq i1 %v9_10001d8a, false
  br i1 %v1_10001d8d, label %dec_label_pc_10001dad, label %dec_label_pc_10001d8f

dec_label_pc_10001d8f:                            ; preds = %dec_label_pc_10001d83
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10001d92 = add i32 %arg1, 168
  %v2_10001d92 = inttoptr i32 %v1_10001d92 to i32*
  %v3_10001d92 = load i32, i32* %v2_10001d92, align 4
  store i32 %v3_10001d92, i32* %ecx.global-to-local, align 4
  %v1_10001d9e = add i32 %v3_10001d92, -1
  %v4_10001da4 = sitofp i32 %v1_10001d9e to x86_fp80
  %v5_10001da7 = fpext double %v4_10001d55 to x86_fp80
  %v7_10001da7 = fdiv x86_fp80 %v4_10001da4, %v5_10001da7
  %tmp38 = fptrunc x86_fp80 %v7_10001da7 to double
  br label %dec_label_pc_10001dad

dec_label_pc_10001dad:                            ; preds = %dec_label_pc_10001d83, %dec_label_pc_10001d63, %dec_label_pc_10001d8f
  %stack_var_-24.0 = phi double [ 0.000000e+00, %dec_label_pc_10001d83 ], [ %tmp38, %dec_label_pc_10001d8f ], [ %tmp37, %dec_label_pc_10001d63 ]
  %v2_10001daf = call i32 @GetRBWwide(i16 0)
  %v3_10001daf = sext i32 %v2_10001daf to i64
  %v2_10001db7 = ashr i32 %v2_10001daf, 31
  store i32 3, i32* %ecx.global-to-local, align 4
  %v5_10001dbd = zext i32 %v2_10001db7 to i64
  %v6_10001dbd = mul nuw i64 %v5_10001dbd, 4294967296
  %v7_10001dbd = or i64 %v6_10001dbd, %v3_10001daf
  %v9_10001dbd = sdiv i64 %v7_10001dbd, 3
  %v10_10001dbd = trunc i64 %v9_10001dbd to i32
  store i32 %v10_10001dbd, i32* %eax.global-to-local, align 4
  %v3_10001dca = and i32 %v10_10001dbd, 256
  %v4_10001dca = icmp eq i32 %v3_10001dca, 0
  %v1_10001dcd = icmp eq i1 %v4_10001dca, false
  br i1 %v1_10001dcd, label %dec_label_pc_10001ddd, label %dec_label_pc_10001dcf

dec_label_pc_10001dcf:                            ; preds = %dec_label_pc_10001dad
  %v1_10001dd2 = add i32 %arg1, 72
  %v2_10001dd2 = inttoptr i32 %v1_10001dd2 to i16*
  store i16 0, i16* %v2_10001dd2, align 2
  br label %dec_label_pc_10001e6d

dec_label_pc_10001ddd:                            ; preds = %dec_label_pc_10001dad
  %v2_10001ddf = call i32 @GetRBWwide(i16 1)
  %v3_10001ddf = sext i32 %v2_10001ddf to i64
  %v2_10001de7 = ashr i32 %v2_10001ddf, 31
  store i32 3, i32* %ecx.global-to-local, align 4
  %v5_10001ded = zext i32 %v2_10001de7 to i64
  %v6_10001ded = mul nuw i64 %v5_10001ded, 4294967296
  %v7_10001ded = or i64 %v6_10001ded, %v3_10001ddf
  %v9_10001ded = sdiv i64 %v7_10001ded, 3
  %v10_10001ded = trunc i64 %v9_10001ded to i32
  store i32 %v10_10001ded, i32* %eax.global-to-local, align 4
  %v3_10001dfa = and i32 %v10_10001ded, 256
  %v4_10001dfa = icmp eq i32 %v3_10001dfa, 0
  %v1_10001dfd = icmp eq i1 %v4_10001dfa, false
  br i1 %v1_10001dfd, label %dec_label_pc_10001e0a, label %dec_label_pc_10001dff

dec_label_pc_10001dff:                            ; preds = %dec_label_pc_10001ddd
  %v1_10001e02 = add i32 %arg1, 72
  %v2_10001e02 = inttoptr i32 %v1_10001e02 to i16*
  store i16 1, i16* %v2_10001e02, align 2
  br label %dec_label_pc_10001e6d

dec_label_pc_10001e0a:                            ; preds = %dec_label_pc_10001ddd
  %v2_10001e0c = call i32 @GetRBWwide(i16 2)
  %v3_10001e0c = sext i32 %v2_10001e0c to i64
  %v2_10001e14 = ashr i32 %v2_10001e0c, 31
  store i32 3, i32* %ecx.global-to-local, align 4
  %v5_10001e1a = zext i32 %v2_10001e14 to i64
  %v6_10001e1a = mul nuw i64 %v5_10001e1a, 4294967296
  %v7_10001e1a = or i64 %v6_10001e1a, %v3_10001e0c
  %v9_10001e1a = sdiv i64 %v7_10001e1a, 3
  %v10_10001e1a = trunc i64 %v9_10001e1a to i32
  store i32 %v10_10001e1a, i32* %eax.global-to-local, align 4
  %v3_10001e27 = and i32 %v10_10001e1a, 256
  %v4_10001e27 = icmp eq i32 %v3_10001e27, 0
  %v1_10001e2a = icmp eq i1 %v4_10001e27, false
  br i1 %v1_10001e2a, label %dec_label_pc_10001e37, label %dec_label_pc_10001e2c

dec_label_pc_10001e2c:                            ; preds = %dec_label_pc_10001e0a
  %v1_10001e2f = add i32 %arg1, 72
  %v2_10001e2f = inttoptr i32 %v1_10001e2f to i16*
  store i16 2, i16* %v2_10001e2f, align 2
  br label %dec_label_pc_10001e6d

dec_label_pc_10001e37:                            ; preds = %dec_label_pc_10001e0a
  %v2_10001e39 = call i32 @GetRBWwide(i16 3)
  %v3_10001e39 = sext i32 %v2_10001e39 to i64
  %v2_10001e41 = ashr i32 %v2_10001e39, 31
  store i32 3, i32* %ecx.global-to-local, align 4
  %v5_10001e47 = zext i32 %v2_10001e41 to i64
  %v6_10001e47 = mul nuw i64 %v5_10001e47, 4294967296
  %v7_10001e47 = or i64 %v6_10001e47, %v3_10001e39
  %v9_10001e47 = sdiv i64 %v7_10001e47, 3
  %v10_10001e47 = trunc i64 %v9_10001e47 to i32
  store i32 %v10_10001e47, i32* %eax.global-to-local, align 4
  %v3_10001e54 = and i32 %v10_10001e47, 256
  %v4_10001e54 = icmp eq i32 %v3_10001e54, 0
  %v1_10001e57 = icmp eq i1 %v4_10001e54, false
  br i1 %v1_10001e57, label %dec_label_pc_10001e64, label %dec_label_pc_10001e59

dec_label_pc_10001e59:                            ; preds = %dec_label_pc_10001e37
  %v1_10001e5c = add i32 %arg1, 72
  %v2_10001e5c = inttoptr i32 %v1_10001e5c to i16*
  store i16 3, i16* %v2_10001e5c, align 2
  br label %dec_label_pc_10001e6d

dec_label_pc_10001e64:                            ; preds = %dec_label_pc_10001e37
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10001e67 = add i32 %arg1, 72
  %v2_10001e67 = inttoptr i32 %v1_10001e67 to i16*
  store i16 4, i16* %v2_10001e67, align 2
  br label %dec_label_pc_10001e6d

dec_label_pc_10001e6d:                            ; preds = %dec_label_pc_10001e59, %dec_label_pc_10001e2c, %dec_label_pc_10001dff, %dec_label_pc_10001dcf, %dec_label_pc_10001e64
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v4_10001e70 = fptrunc double %stack_var_-24.0 to float
  %v5_10001e70 = bitcast float %v4_10001e70 to i32
  %v2_10001e73 = add i32 %arg1, 24
  %v3_10001e73 = inttoptr i32 %v2_10001e73 to i32*
  store i32 %v5_10001e70, i32* %v3_10001e73, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_10001e79 = load i32, i32* %ecx.global-to-local, align 4
  %v2_10001e79 = add i32 %v1_10001e79, 28
  %v3_10001e79 = inttoptr i32 %v2_10001e79 to i32*
  store i32 0, i32* %v3_10001e79, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_10001e7f = add i32 %arg1, 78
  %v2_10001e7f = inttoptr i32 %v1_10001e7f to i16*
  %v3_10001e7f = load i16, i16* %v2_10001e7f, align 2
  %v4_10001e7f = sext i16 %v3_10001e7f to i32
  store i32 %v4_10001e7f, i32* @edx, align 4
  %v9_10001e83 = icmp eq i16 %v3_10001e7f, 1
  %v1_10001e86 = icmp eq i1 %v9_10001e83, false
  br i1 %v1_10001e86, label %dec_label_pc_10001e6d.dec_label_pc_10001e94_crit_edge, label %dec_label_pc_10001e88

dec_label_pc_10001e6d.dec_label_pc_10001e94_crit_edge: ; preds = %dec_label_pc_10001e6d
  %v0_10001e97.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10001e94

dec_label_pc_10001e88:                            ; preds = %dec_label_pc_10001e6d
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10001e8c = call i32 @function_10001e98(i32 %arg1)
  store i32 %v1_10001e8c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10001e94

dec_label_pc_10001e94:                            ; preds = %dec_label_pc_10001e6d.dec_label_pc_10001e94_crit_edge, %dec_label_pc_10001d39, %dec_label_pc_10001d01, %dec_label_pc_10001e88
  %v0_10001e97 = phi i32 [ %v0_10001e97.pre, %dec_label_pc_10001e6d.dec_label_pc_10001e94_crit_edge ], [ 0, %dec_label_pc_10001d39 ], [ %v2_10001d2d, %dec_label_pc_10001d01 ], [ %v1_10001e8c, %dec_label_pc_10001e88 ]
  %v2_10001e96 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001e96, i32* @ebp, align 4
  ret i32 %v0_10001e97

; uselistorder directives
  uselistorder double %v4_10001d55, { 1, 0 }
  uselistorder i32 %v2_10001d2d, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 (i32)* @function_10001e98, { 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 25, 24, 23, 22, 21, 20, 18, 17, 19, 16, 15, 14, 13, 12, 11, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10001e94, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_10001e6d, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_10001dad, { 2, 0, 1 }
}

define i32 @function_10001e98(i32 %arg1) local_unnamed_addr {
dec_label_pc_10001e98:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca double, align 8
  %stack_var_-4 = alloca i32, align 4
  %v0_10001e98 = load i32, i32* @ebp, align 4
  store i32 %v0_10001e98, i32* %stack_var_-4, align 4
  %v4_10001e98 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10001e98, i32* @ebp, align 4
  store double 0.000000e+00, double* %stack_var_-16, align 8
  store i32 %arg1, i32* @eax, align 4
  %v1_10001eb0 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10001eb0, i32* %eax.global-to-local, align 4
  %v1_10001eb8 = mul i32 %v1_10001eb0, 65536
  %v1_10001eb8.off = or i32 %v1_10001eb8, 65535
  %tmp = icmp ult i32 %v1_10001eb8.off, 131071
  br i1 %tmp, label %dec_label_pc_10001ec4, label %dec_label_pc_10001f4f

dec_label_pc_10001ec4:                            ; preds = %dec_label_pc_10001e98
  store i32 %arg1, i32* @edx, align 4
  %v1_10001ec7 = add i32 %arg1, 78
  %v2_10001ec7 = inttoptr i32 %v1_10001ec7 to i16*
  %v3_10001ec7 = load i16, i16* %v2_10001ec7, align 2
  %v4_10001ec7 = sext i16 %v3_10001ec7 to i32
  store i32 %v4_10001ec7, i32* %eax.global-to-local, align 4
  %v1_10001ecb = icmp eq i16 %v3_10001ec7, 0
  %v1_10001ecd = icmp eq i1 %v1_10001ecb, false
  br i1 %v1_10001ecd, label %dec_label_pc_10001ed1, label %dec_label_pc_10001f4f

dec_label_pc_10001ed1:                            ; preds = %dec_label_pc_10001ec4
  %v1_10001ed5 = call i32 @RdRBW(i32 %arg1)
  store i32 %v1_10001ed5, i32* %eax.global-to-local, align 4
  %v1_10001ede = trunc i32 %v1_10001ed5 to i16
  %v2_10001ede = call i32 @RBWFreqFromCode(i16 %v1_10001ede)
  store i32 %v2_10001ede, i32* %eax.global-to-local, align 4
  %v2_10001ee9 = add i32 %arg1, 88
  %v3_10001ee9 = inttoptr i32 %v2_10001ee9 to double*
  %v4_10001ee9 = load double, double* %v3_10001ee9, align 4
  %v5_10001ee9 = fpext double %v4_10001ee9 to x86_fp80
  %v6_10001ee9 = load x86_fp80, x86_fp80* @st0, align 4
  %v7_10001ee9 = fmul x86_fp80 %v5_10001ee9, %v6_10001ee9
  %v0_10001eec = load i3, i3* @fpu_stat_TOP, align 1
  %tmp19 = fptrunc x86_fp80 %v7_10001ee9 to double
  store double %tmp19, double* %stack_var_-16, align 8
  %v12_10001eec = add i3 %v0_10001eec, 1
  store i3 %v12_10001eec, i3* @fpu_stat_TOP, align 1
  %v2_10001ef1 = call i32 @VBWFreqFromCode(i16 7)
  store i32 %v2_10001ef1, i32* %eax.global-to-local, align 4
  %v0_10001ef9 = load i3, i3* @fpu_stat_TOP, align 1
  %storemerge3 = add i3 %v0_10001ef9, 1
  store i3 %storemerge3, i3* @fpu_stat_TOP, align 1
  %v3_10001efe = and i32 %v2_10001ef1, 16640
  %v4_10001efe = icmp eq i32 %v3_10001efe, 0
  br i1 %v4_10001efe, label %dec_label_pc_10001f0b, label %dec_label_pc_10001f3b

dec_label_pc_10001f0b:                            ; preds = %dec_label_pc_10001ed1
  %v2_10001f0d = call i32 @VBWFreqFromCode(i16 1)
  store i32 %v2_10001f0d, i32* %eax.global-to-local, align 4
  %v0_10001f15 = load i3, i3* @fpu_stat_TOP, align 1
  %storemerge5 = add i3 %v0_10001f15, 1
  store i3 %storemerge5, i3* @fpu_stat_TOP, align 1
  %v3_10001f1a = and i32 %v2_10001f0d, 256
  %v4_10001f1a = icmp eq i32 %v3_10001f1a, 0
  %v1_10001f1d = icmp eq i1 %v4_10001f1a, false
  br i1 %v1_10001f1d, label %dec_label_pc_10001f27, label %dec_label_pc_10001f3b

dec_label_pc_10001f27:                            ; preds = %dec_label_pc_10001f0b
  store i32 0, i32* @eax, align 4
  %v3_10001f2b = load double, double* %stack_var_-16, align 8
  %v4_10001f2f = call i32 @VBWCodeFromFreq(double %v3_10001f2b, i32 0)
  store i32 %v4_10001f2f, i32* %eax.global-to-local, align 4
  %v1_10001f37 = trunc i32 %v4_10001f2f to i16
  br label %dec_label_pc_10001f3b

dec_label_pc_10001f3b:                            ; preds = %dec_label_pc_10001f0b, %dec_label_pc_10001ed1, %dec_label_pc_10001f27
  %v0_10001f5211 = phi i32 [ %v4_10001f2f, %dec_label_pc_10001f27 ], [ %v2_10001ef1, %dec_label_pc_10001ed1 ], [ %v2_10001f0d, %dec_label_pc_10001f0b ]
  %stack_var_-8.0 = phi i16 [ %v1_10001f37, %dec_label_pc_10001f27 ], [ 7, %dec_label_pc_10001ed1 ], [ 1, %dec_label_pc_10001f0b ]
  %v4_10001f3b = sext i16 %stack_var_-8.0 to i32
  store i32 %v4_10001f3b, i32* @edx, align 4
  %v10_10001f3f = icmp eq i16 %stack_var_-8.0, -1
  br i1 %v10_10001f3f, label %dec_label_pc_10001f4f, label %dec_label_pc_10001f44

dec_label_pc_10001f44:                            ; preds = %dec_label_pc_10001f3b
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_10001f4b = add i32 %arg1, 76
  %v4_10001f4b = inttoptr i32 %v3_10001f4b to i16*
  store i16 %stack_var_-8.0, i16* %v4_10001f4b, align 2
  %v0_10001f52.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10001f4f

dec_label_pc_10001f4f:                            ; preds = %dec_label_pc_10001ec4, %dec_label_pc_10001e98, %dec_label_pc_10001f3b, %dec_label_pc_10001f44
  %v0_10001f52 = phi i32 [ %v4_10001ec7, %dec_label_pc_10001ec4 ], [ %v1_10001eb0, %dec_label_pc_10001e98 ], [ %v0_10001f5211, %dec_label_pc_10001f3b ], [ %v0_10001f52.pre, %dec_label_pc_10001f44 ]
  %v2_10001f51 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001f51, i32* @ebp, align 4
  ret i32 %v0_10001f52

; uselistorder directives
  uselistorder i16 %stack_var_-8.0, { 1, 0, 2 }
  uselistorder i32 %v1_10001eb0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder double* %stack_var_-16, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10001f4f, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_10001f3b, { 2, 0, 1 }
}

define i32 @function_10001f53(i32 %arg1) local_unnamed_addr {
dec_label_pc_10001f53:
  store i32 %arg1, i32* @eax, align 4
  %v1_10001f5b = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10001f5b, i32* @eax, align 4
  %v1_10001f63 = mul i32 %v1_10001f5b, 65536
  %v1_10001f63.off = or i32 %v1_10001f63, 65535
  %tmp = icmp ult i32 %v1_10001f63.off, 131071
  br i1 %tmp, label %dec_label_pc_10001f78, label %dec_label_pc_10001f6a

dec_label_pc_10001f6a:                            ; preds = %dec_label_pc_10001f53
  %v1_10001f6e = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10001f82

dec_label_pc_10001f78:                            ; preds = %dec_label_pc_10001f53
  %v7_10001f7e = and i32 %v1_10001f5b, -65536
  br label %dec_label_pc_10001f82

dec_label_pc_10001f82:                            ; preds = %dec_label_pc_10001f6a, %dec_label_pc_10001f78
  %v0_10001f85 = phi i32 [ %v1_10001f6e, %dec_label_pc_10001f6a ], [ %v7_10001f7e, %dec_label_pc_10001f78 ]
  ret i32 %v0_10001f85

; uselistorder directives
  uselistorder i32 %v1_10001f5b, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10001f82, { 1, 0 }
}

define i32 @GetCalPoint(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %tmp14 = inttoptr i32 %arg5 to i16*
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10001f86 = load i32, i32* @ebp, align 4
  store i32 %v0_10001f86, i32* %stack_var_-4, align 4
  %v4_10001f86 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10001f86, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10001fa9 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10001fa9, i32* @eax, align 4
  %v1_10001fb1 = mul i32 %v1_10001fa9, 65536
  %v1_10001fb1.off = or i32 %v1_10001fb1, 65535
  %tmp = icmp ult i32 %v1_10001fb1.off, 131071
  br i1 %tmp, label %dec_label_pc_10001fc9, label %dec_label_pc_10001fb8

dec_label_pc_10001fb8:                            ; preds = %entry
  %v1_10001fbc = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100021d1

dec_label_pc_10001fc9:                            ; preds = %entry
  %v2_10001fd6 = sext i32 %arg3 to i64
  %v3_10001fd6 = bitcast i64 %v2_10001fd6 to double
  %v4_10001fd6 = call i32 @function_10002df9(i32 %arg1, double %v3_10001fd6)
  %v1_10001fe5 = call i32 @CommTrigDetect(i32 %arg1)
  %sext6 = mul i32 %v1_10001fe5, 65536
  %tmp40 = icmp eq i32 %sext6, 4259840
  br i1 %tmp40, label %dec_label_pc_10002003, label %dec_label_pc_10001ffa

dec_label_pc_10001ffa:                            ; preds = %dec_label_pc_10001fc9
  %v4_10001ff1 = sdiv i32 %sext6, 65536
  %v4_10001ffa = and i32 %v1_10001fe5, 65535
  %v7_10001ffa = and i32 %v4_10001ff1, -65536
  %v8_10001ffa = or i32 %v7_10001ffa, %v4_10001ffa
  br label %dec_label_pc_100021d1

dec_label_pc_10002003:                            ; preds = %dec_label_pc_10001fc9
  %v1_10002006 = add i32 %arg1, 72
  %v2_10002006 = inttoptr i32 %v1_10002006 to i16*
  %v3_10002006 = load i16, i16* %v2_10002006, align 2
  %v2_1000200b = call i32 @DefltSetTimeRBW(i16 %v3_10002006)
  %v3_1000200b = sext i32 %v2_1000200b to i64
  %v2_10002013 = ashr i32 %v2_1000200b, 31
  %v5_10002019 = zext i32 %v2_10002013 to i64
  %v6_10002019 = mul nuw i64 %v5_10002019, 4294967296
  %v7_10002019 = or i64 %v6_10002019, %v3_1000200b
  %v9_10002019 = sdiv i64 %v7_10002019, 1000
  %v10_10002019 = trunc i64 %v9_10002019 to i32
  %v1_10002021 = add i32 %arg1, 76
  %v2_10002021 = inttoptr i32 %v1_10002021 to i16*
  %v3_10002021 = load i16, i16* %v2_10002021, align 2
  %v2_10002026 = call i32 @DefltSetTimeVBW(i16 %v3_10002021)
  %v3_10002026 = sext i32 %v2_10002026 to i64
  %v2_1000202e = ashr i32 %v2_10002026, 31
  %v5_10002034 = zext i32 %v2_1000202e to i64
  %v6_10002034 = mul nuw i64 %v5_10002034, 4294967296
  %v7_10002034 = or i64 %v6_10002034, %v3_10002026
  %v9_10002034 = sdiv i64 %v7_10002034, 1000
  %v10_10002034 = trunc i64 %v9_10002034 to i32
  %v7_10002039 = icmp sgt i32 %v10_10002034, %v10_10002019
  br i1 %v7_10002039, label %dec_label_pc_1000203b, label %dec_label_pc_10002056

dec_label_pc_1000203b:                            ; preds = %dec_label_pc_10002003
  %v3_1000203e = load i16, i16* %v2_10002021, align 2
  %v2_10002043 = call i32 @DefltSetTimeVBW(i16 %v3_1000203e)
  %v3_10002043 = sext i32 %v2_10002043 to i64
  %v2_1000204b = ashr i32 %v2_10002043, 31
  %v5_10002051 = zext i32 %v2_1000204b to i64
  %v6_10002051 = mul nuw i64 %v5_10002051, 4294967296
  %v7_10002051 = or i64 %v6_10002051, %v3_10002043
  %v9_10002051 = sdiv i64 %v7_10002051, 1000
  %v10_10002051 = trunc i64 %v9_10002051 to i32
  br label %dec_label_pc_10002056

dec_label_pc_10002056:                            ; preds = %dec_label_pc_10002003, %dec_label_pc_1000203b
  %stack_var_-8.0 = phi i32 [ %v10_10002051, %dec_label_pc_1000203b ], [ %v10_10002019, %dec_label_pc_10002003 ]
  %v1_1000205a = call i32 @RdTimeoutWait(i32 %arg1)
  %v1_10002068 = add i32 %stack_var_-8.0, 500
  %v5_10002076 = icmp slt i32 %v1_10002068, %v1_1000205a
  br i1 %v5_10002076, label %dec_label_pc_10002078, label %dec_label_pc_1000207e

dec_label_pc_10002078:                            ; preds = %dec_label_pc_10002056
  br label %dec_label_pc_1000207e

dec_label_pc_1000207e:                            ; preds = %dec_label_pc_10002056, %dec_label_pc_10002078
  %stack_var_-44.0 = phi i32 [ %v1_1000205a, %dec_label_pc_10002078 ], [ %v1_10002068, %dec_label_pc_10002056 ]
  %v3_10002081 = load i16, i16* %v2_10002021, align 2
  %v4_10002081 = sext i16 %v3_10002081 to i32
  %sext = mul i32 %v4_10002081, 16777216
  %v4_1000208c = sdiv i32 %sext, 65536
  %v3_10002093 = load i16, i16* %v2_10002006, align 2
  %v4_1000209312 = zext i16 %v3_10002093 to i32
  %v2_10002097 = or i32 %v4_1000209312, %v4_1000208c
  %v1_100020a4 = trunc i32 %v2_10002097 to i16
  %v3_100020a4 = add i32 %arg1, 80
  %v4_100020a4 = inttoptr i32 %v3_100020a4 to i16*
  store i16 %v1_100020a4, i16* %v4_100020a4, align 2
  %v1_100020ab = and i32 %v4_10001fd6, 65535
  store i32 %v1_100020ab, i32* %stack_var_-36, align 4
  %v4_100020ed = zext i16 %arg2 to i32
  %v1_100020f9 = call i32 @RdEngineModel(i32 %arg1)
  %v1_10002101 = mul i32 %v1_100020f9, 65536
  %tmp41 = icmp eq i32 %v1_10002101, 50331648
  %v1_1000210a = icmp eq i1 %tmp41, false
  br i1 %v1_1000210a, label %dec_label_pc_10002146, label %dec_label_pc_1000210c

dec_label_pc_1000210c:                            ; preds = %dec_label_pc_1000207e
  %v3_10002124 = and i32 %v4_10001fd6, 16640
  %v4_10002124 = icmp eq i32 %v3_10002124, 0
  %v1_10002127 = icmp eq i1 %v4_10002124, false
  br i1 %v1_10002127, label %dec_label_pc_10002146, label %dec_label_pc_10002129

dec_label_pc_10002129:                            ; preds = %dec_label_pc_1000210c
  %v1_1000212d = call i32 @function_100031ab(i32 %arg1)
  %v1_10002135 = mul i32 %v1_1000212d, 65536
  %v2_10002138 = sdiv i32 %v1_10002135, 256
  %v6_1000213b = and i32 %v1_1000212d, -65536
  %v2_10002138.masked = and i32 %v2_10002138, 65535
  %v10_1000213f = or i32 %v4_100020ed, %v2_10002138.masked
  %v13_1000213f = or i32 %v10_1000213f, %v6_1000213b
  br label %dec_label_pc_10002146

dec_label_pc_10002146:                            ; preds = %dec_label_pc_1000210c, %dec_label_pc_1000207e, %dec_label_pc_10002129
  %v5_10002152 = phi i32 [ %v4_10001fd6, %dec_label_pc_1000210c ], [ %v1_100020f9, %dec_label_pc_1000207e ], [ %v13_1000213f, %dec_label_pc_10002129 ]
  %v2_1000214e = ptrtoint i32* %stack_var_-36 to i32
  %v6_10002152 = and i32 %v5_10002152, -65536
  %v7_10002152 = or i32 %v6_10002152, 6
  %v4_1000215d = trunc i32 %arg1 to i16
  %v5_1000215d = call i32 @SendCommand(i16 %v4_1000215d, i32 10, i32 %v7_10002152, i32 %v2_1000214e)
  %v6_1000215d = trunc i32 %v5_1000215d to i16
  %sext9 = mul i32 %v5_1000215d, 65536
  %tmp42 = icmp eq i32 %sext9, 65536
  %v1_10002170 = icmp eq i1 %tmp42, false
  br i1 %v1_10002170, label %dec_label_pc_100021ac, label %dec_label_pc_10002172

dec_label_pc_10002172:                            ; preds = %dec_label_pc_10002146
  %v2_1000217a = call i32 @SetTimeoutWait(i32 %arg1, i32 %stack_var_-44.0)
  %v2_10002186 = call i32 @WaitRecvWord(i16 %v4_1000215d)
  %v3_10002186 = trunc i32 %v2_10002186 to i16
  store i16 %v3_10002186, i16* %tmp14, align 2
  %v1_10002198 = call i32 @RdErrorStatus(i32 %arg1)
  %v1_100021a0 = icmp eq i32 %v1_10002198, 0
  %v6_1000215d. = select i1 %v1_100021a0, i16 %v6_1000215d, i16 -12
  br label %dec_label_pc_100021b4

dec_label_pc_100021ac:                            ; preds = %dec_label_pc_10002146
  store i16 0, i16* %tmp14, align 2
  br label %dec_label_pc_100021b4

dec_label_pc_100021b4:                            ; preds = %dec_label_pc_10002172, %dec_label_pc_100021ac
  %stack_var_-40.0 = phi i16 [ %v6_1000215d, %dec_label_pc_100021ac ], [ %v6_1000215d., %dec_label_pc_10002172 ]
  %v2_100021bc = call i32 @SetTimeoutWait(i32 %arg1, i32 %v1_1000205a)
  %v2_100021c9 = call i32 @FuncStatusFromEngineReply(i16 %stack_var_-40.0)
  br label %dec_label_pc_100021d1

dec_label_pc_100021d1:                            ; preds = %dec_label_pc_10001ffa, %dec_label_pc_10001fb8, %dec_label_pc_100021b4
  %v0_100021d4 = phi i32 [ %v8_10001ffa, %dec_label_pc_10001ffa ], [ %v1_10001fbc, %dec_label_pc_10001fb8 ], [ %v2_100021c9, %dec_label_pc_100021b4 ]
  ret i32 %v0_100021d4

; uselistorder directives
  uselistorder i16 %v6_1000215d, { 1, 0 }
  uselistorder i32 %v1_1000212d, { 1, 0 }
  uselistorder i32 %v1_100020f9, { 1, 0 }
  uselistorder i32 %sext6, { 1, 0 }
  uselistorder i32 %v1_10001fe5, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32 %arg1, { 14, 13, 12, 11, 10, 9, 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_100021d1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_100021b4, { 1, 0 }
  uselistorder label %dec_label_pc_10002146, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000207e, { 1, 0 }
  uselistorder label %dec_label_pc_10002056, { 1, 0 }
}

define i32 @GetCalPointExt(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %tmp15 = inttoptr i32 %arg6 to i16*
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100021d5 = load i32, i32* @ebp, align 4
  store i32 %v0_100021d5, i32* %stack_var_-4, align 4
  %v4_100021d5 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100021d5, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_100021f8 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100021f8, i32* @eax, align 4
  %v1_10002200 = mul i32 %v1_100021f8, 65536
  %v1_10002200.off = or i32 %v1_10002200, 65535
  %tmp = icmp ult i32 %v1_10002200.off, 131071
  br i1 %tmp, label %dec_label_pc_10002218, label %dec_label_pc_10002207

dec_label_pc_10002207:                            ; preds = %entry
  %v1_1000220b = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10002409

dec_label_pc_10002218:                            ; preds = %entry
  %v2_10002224 = sext i32 %arg3 to i64
  %v3_10002224 = bitcast i64 %v2_10002224 to double
  %v4_10002224 = call i32 @function_10002df9(i32 %arg1, double %v3_10002224)
  %v1_10002233 = call i32 @CommTrigDetect(i32 %arg1)
  %sext6 = mul i32 %v1_10002233, 65536
  %tmp42 = icmp eq i32 %sext6, 4259840
  br i1 %tmp42, label %dec_label_pc_10002251, label %dec_label_pc_10002248

dec_label_pc_10002248:                            ; preds = %dec_label_pc_10002218
  %v4_1000223f = sdiv i32 %sext6, 65536
  %v4_10002248 = and i32 %v1_10002233, 65535
  %v7_10002248 = and i32 %v4_1000223f, -65536
  %v8_10002248 = or i32 %v7_10002248, %v4_10002248
  br label %dec_label_pc_10002409

dec_label_pc_10002251:                            ; preds = %dec_label_pc_10002218
  %v1_10002254 = add i32 %arg1, 72
  %v2_10002254 = inttoptr i32 %v1_10002254 to i16*
  %v3_10002254 = load i16, i16* %v2_10002254, align 2
  %v2_10002259 = call i32 @DefltSetTimeRBW(i16 %v3_10002254)
  %v3_10002259 = sext i32 %v2_10002259 to i64
  %v2_10002261 = ashr i32 %v2_10002259, 31
  %v5_10002267 = zext i32 %v2_10002261 to i64
  %v6_10002267 = mul nuw i64 %v5_10002267, 4294967296
  %v7_10002267 = or i64 %v6_10002267, %v3_10002259
  %v9_10002267 = sdiv i64 %v7_10002267, 1000
  %v10_10002267 = trunc i64 %v9_10002267 to i32
  %v1_1000226f = add i32 %arg1, 76
  %v2_1000226f = inttoptr i32 %v1_1000226f to i16*
  %v3_1000226f = load i16, i16* %v2_1000226f, align 2
  %v2_10002274 = call i32 @DefltSetTimeVBW(i16 %v3_1000226f)
  %v3_10002274 = sext i32 %v2_10002274 to i64
  %v2_1000227c = ashr i32 %v2_10002274, 31
  %v5_10002282 = zext i32 %v2_1000227c to i64
  %v6_10002282 = mul nuw i64 %v5_10002282, 4294967296
  %v7_10002282 = or i64 %v6_10002282, %v3_10002274
  %v9_10002282 = sdiv i64 %v7_10002282, 1000
  %v10_10002282 = trunc i64 %v9_10002282 to i32
  %v7_10002287 = icmp sgt i32 %v10_10002282, %v10_10002267
  br i1 %v7_10002287, label %dec_label_pc_10002289, label %dec_label_pc_100022a4

dec_label_pc_10002289:                            ; preds = %dec_label_pc_10002251
  %v3_1000228c = load i16, i16* %v2_1000226f, align 2
  %v2_10002291 = call i32 @DefltSetTimeVBW(i16 %v3_1000228c)
  %v3_10002291 = sext i32 %v2_10002291 to i64
  %v2_10002299 = ashr i32 %v2_10002291, 31
  %v5_1000229f = zext i32 %v2_10002299 to i64
  %v6_1000229f = mul nuw i64 %v5_1000229f, 4294967296
  %v7_1000229f = or i64 %v6_1000229f, %v3_10002291
  %v9_1000229f = sdiv i64 %v7_1000229f, 1000
  %v10_1000229f = trunc i64 %v9_1000229f to i32
  br label %dec_label_pc_100022a4

dec_label_pc_100022a4:                            ; preds = %dec_label_pc_10002251, %dec_label_pc_10002289
  %stack_var_-8.0 = phi i32 [ %v10_1000229f, %dec_label_pc_10002289 ], [ %v10_10002267, %dec_label_pc_10002251 ]
  %v1_100022a8 = call i32 @RdTimeoutWait(i32 %arg1)
  %v1_100022b6 = add i32 %stack_var_-8.0, 500
  %v5_100022c4 = icmp slt i32 %v1_100022b6, %v1_100022a8
  br i1 %v5_100022c4, label %dec_label_pc_100022c6, label %dec_label_pc_100022cc

dec_label_pc_100022c6:                            ; preds = %dec_label_pc_100022a4
  br label %dec_label_pc_100022cc

dec_label_pc_100022cc:                            ; preds = %dec_label_pc_100022a4, %dec_label_pc_100022c6
  %stack_var_-44.0 = phi i32 [ %v1_100022a8, %dec_label_pc_100022c6 ], [ %v1_100022b6, %dec_label_pc_100022a4 ]
  %v3_100022cf = load i16, i16* %v2_1000226f, align 2
  %v4_100022cf = sext i16 %v3_100022cf to i32
  %sext = mul i32 %v4_100022cf, 16777216
  %v4_100022da = sdiv i32 %sext, 65536
  %v3_100022e1 = load i16, i16* %v2_10002254, align 2
  %v4_100022e113 = zext i16 %v3_100022e1 to i32
  %v2_100022e5 = or i32 %v4_100022e113, %v4_100022da
  %v1_100022f2 = trunc i32 %v2_100022e5 to i16
  %v3_100022f2 = add i32 %arg1, 80
  %v4_100022f2 = inttoptr i32 %v3_100022f2 to i16*
  store i16 %v1_100022f2, i16* %v4_100022f2, align 2
  %v1_100022f9 = and i32 %v4_10002224, 65535
  store i32 %v1_100022f9, i32* %stack_var_-36, align 4
  %v4_1000233b = zext i16 %arg2 to i32
  %v1_10002347 = call i32 @RdEngineModel(i32 %arg1)
  %v1_1000234f = mul i32 %v1_10002347, 65536
  %tmp43 = icmp eq i32 %v1_1000234f, 50331648
  %v1_10002358 = icmp eq i1 %tmp43, false
  br i1 %v1_10002358, label %dec_label_pc_10002394, label %dec_label_pc_1000235a

dec_label_pc_1000235a:                            ; preds = %dec_label_pc_100022cc
  %v3_10002372 = and i32 %v4_10002224, 16640
  %v4_10002372 = icmp eq i32 %v3_10002372, 0
  %v1_10002375 = icmp eq i1 %v4_10002372, false
  br i1 %v1_10002375, label %dec_label_pc_10002394, label %dec_label_pc_10002377

dec_label_pc_10002377:                            ; preds = %dec_label_pc_1000235a
  %v1_1000237b = call i32 @function_100031ab(i32 %arg1)
  %v1_10002383 = mul i32 %v1_1000237b, 65536
  %v2_10002386 = sdiv i32 %v1_10002383, 256
  %v6_10002389 = and i32 %v1_1000237b, -65536
  %v2_10002386.masked = and i32 %v2_10002386, 65535
  %v10_1000238d = or i32 %v4_1000233b, %v2_10002386.masked
  %v13_1000238d = or i32 %v10_1000238d, %v6_10002389
  br label %dec_label_pc_10002394

dec_label_pc_10002394:                            ; preds = %dec_label_pc_1000235a, %dec_label_pc_100022cc, %dec_label_pc_10002377
  %v5_100023a0 = phi i32 [ %v4_10002224, %dec_label_pc_1000235a ], [ %v1_10002347, %dec_label_pc_100022cc ], [ %v13_1000238d, %dec_label_pc_10002377 ]
  %v2_1000239c = ptrtoint i32* %stack_var_-36 to i32
  %v6_100023a0 = and i32 %v5_100023a0, -65536
  %v7_100023a0 = or i32 %v6_100023a0, 6
  %v4_100023ab = trunc i32 %arg1 to i16
  %v5_100023ab = call i32 @SendCommand(i16 %v4_100023ab, i32 10, i32 %v7_100023a0, i32 %v2_1000239c)
  %v6_100023ab = trunc i32 %v5_100023ab to i16
  %sext10 = mul i32 %v5_100023ab, 65536
  %tmp44 = icmp eq i32 %sext10, 65536
  %v1_100023be = icmp eq i1 %tmp44, false
  br i1 %v1_100023be, label %dec_label_pc_100023e4, label %dec_label_pc_100023c0

dec_label_pc_100023c0:                            ; preds = %dec_label_pc_10002394
  %v2_100023c8 = call i32 @SetTimeoutWait(i32 %arg1, i32 %stack_var_-44.0)
  store i32 %arg1, i32* @edx, align 4
  %v2_100023d4 = call i32 @WaitRecvWord(i16 %v4_100023ab)
  %v3_100023d4 = trunc i32 %v2_100023d4 to i16
  br label %dec_label_pc_100023ec

dec_label_pc_100023e4:                            ; preds = %dec_label_pc_10002394
  store i32 %arg6, i32* @edx, align 4
  br label %dec_label_pc_100023ec

dec_label_pc_100023ec:                            ; preds = %dec_label_pc_100023c0, %dec_label_pc_100023e4
  %storemerge = phi i16 [ %v3_100023d4, %dec_label_pc_100023c0 ], [ 0, %dec_label_pc_100023e4 ]
  store i16 %storemerge, i16* %tmp15, align 2
  %v2_100023f4 = call i32 @SetTimeoutWait(i32 %arg1, i32 %v1_100022a8)
  %v2_10002401 = call i32 @FuncStatusFromEngineReply(i16 %v6_100023ab)
  br label %dec_label_pc_10002409

dec_label_pc_10002409:                            ; preds = %dec_label_pc_10002248, %dec_label_pc_10002207, %dec_label_pc_100023ec
  %v0_1000240c = phi i32 [ %v8_10002248, %dec_label_pc_10002248 ], [ %v1_1000220b, %dec_label_pc_10002207 ], [ %v2_10002401, %dec_label_pc_100023ec ]
  ret i32 %v0_1000240c

; uselistorder directives
  uselistorder i32 %v1_1000237b, { 1, 0 }
  uselistorder i32 %v1_10002347, { 1, 0 }
  uselistorder i32 %sext6, { 1, 0 }
  uselistorder i32 %v1_10002233, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32 %arg1, { 14, 13, 12, 11, 10, 9, 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10002409, { 2, 0, 1 }
  uselistorder label %dec_label_pc_100023ec, { 1, 0 }
  uselistorder label %dec_label_pc_10002394, { 2, 0, 1 }
  uselistorder label %dec_label_pc_100022cc, { 1, 0 }
  uselistorder label %dec_label_pc_100022a4, { 1, 0 }
}

define i32 @function_1000240d(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_1000240d:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = trunc i32 %arg6 to i16
  %tmp11 = trunc i32 %arg3 to i16
  %tmp13 = inttoptr i32 %arg7 to i16*
  %tmp18 = call i64 @__decompiler_undefined_function_3()
  %stack_var_-4 = alloca i32, align 4
  %v0_1000240d = load i32, i32* @ebp, align 4
  store i32 %v0_1000240d, i32* %stack_var_-4, align 4
  %v4_1000240d = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000240d, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10002423 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10002423, i32* @eax, align 4
  %v1_1000242b = mul i32 %v1_10002423, 65536
  %v1_1000242b.off = or i32 %v1_1000242b, 65535
  %tmp32 = icmp ult i32 %v1_1000242b.off, 131071
  br i1 %tmp32, label %dec_label_pc_10002443, label %dec_label_pc_10002432

dec_label_pc_10002432:                            ; preds = %dec_label_pc_1000240d
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_10002436 = call i32 @GetFuncStatusCode(i32 %arg1)
  store i32 %v1_10002436, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000268e

dec_label_pc_10002443:                            ; preds = %dec_label_pc_1000240d
  %v4_10002443 = sext i16 %arg2 to i32
  store i32 %v4_10002443, i32* %eax.global-to-local, align 4
  %v9_10002447 = icmp eq i16 %arg2, 1
  %v1_1000244a = icmp eq i1 %v9_10002447, false
  br i1 %v1_1000244a, label %dec_label_pc_100025d1, label %dec_label_pc_10002450

dec_label_pc_10002450:                            ; preds = %dec_label_pc_10002443
  %v1_10002454 = call i32 @CommTrigDetect(i32 %arg1)
  store i32 %v1_10002454, i32* %eax.global-to-local, align 4
  %sext6 = mul i32 %v1_10002454, 65536
  %v4_10002460 = sdiv i32 %sext6, 65536
  store i32 %v4_10002460, i32* %edx.global-to-local, align 4
  %tmp33 = icmp eq i32 %sext6, 4259840
  br i1 %tmp33, label %dec_label_pc_10002472, label %dec_label_pc_10002469

dec_label_pc_10002469:                            ; preds = %dec_label_pc_10002450
  %v4_10002469 = and i32 %v1_10002454, 65535
  %v7_10002469 = and i32 %v4_10002460, -65536
  %v8_10002469 = or i32 %v7_10002469, %v4_10002469
  store i32 %v8_10002469, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000268e

dec_label_pc_10002472:                            ; preds = %dec_label_pc_10002450
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10002475 = add i32 %arg1, 72
  %v2_10002475 = inttoptr i32 %v1_10002475 to i16*
  %v3_10002475 = load i16, i16* %v2_10002475, align 2
  %v2_1000247a = call i32 @DefltSetTimeRBW(i16 %v3_10002475)
  store i32 %v2_1000247a, i32* %eax.global-to-local, align 4
  store i32 %v2_1000247a, i32* @global_var_1001b3e4.10, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_1000248a = add i32 %arg1, 76
  %v2_1000248a = inttoptr i32 %v1_1000248a to i16*
  %v3_1000248a = load i16, i16* %v2_1000248a, align 2
  %v4_1000248a = zext i16 %v3_1000248a to i32
  %v6_1000248a = and i32 %v2_1000247a, -65536
  %v7_1000248a = or i32 %v4_1000248a, %v6_1000248a
  store i32 %v7_1000248a, i32* %eax.global-to-local, align 4
  %v2_1000248f = call i32 @DefltSetTimeVBW(i16 %v3_1000248a)
  store i32 %v2_1000248f, i32* %eax.global-to-local, align 4
  %v1_10002497 = load i32, i32* @global_var_1001b3e4.10, align 4
  %v7_1000249d = icmp sgt i32 %v2_1000248f, %v1_10002497
  br i1 %v7_1000249d, label %dec_label_pc_1000249f, label %dec_label_pc_100024b4

dec_label_pc_1000249f:                            ; preds = %dec_label_pc_10002472
  %v3_100024a2 = load i16, i16* %v2_1000248a, align 2
  %v4_100024a2 = zext i16 %v3_100024a2 to i32
  %v5_100024a2 = load i32, i32* %edx.global-to-local, align 4
  %v6_100024a2 = and i32 %v5_100024a2, -65536
  %v7_100024a2 = or i32 %v6_100024a2, %v4_100024a2
  store i32 %v7_100024a2, i32* %edx.global-to-local, align 4
  %v2_100024a7 = call i32 @DefltSetTimeVBW(i16 %v3_100024a2)
  store i32 %v2_100024a7, i32* %eax.global-to-local, align 4
  store i32 %v2_100024a7, i32* @global_var_1001b3e4.10, align 4
  br label %dec_label_pc_100024b4

dec_label_pc_100024b4:                            ; preds = %dec_label_pc_10002472, %dec_label_pc_1000249f
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_100024b8 = call i32 @RdTimeoutWait(i32 %arg1)
  store i32 %v1_100024b8, i32* %eax.global-to-local, align 4
  store i32 %v1_100024b8, i32* @global_var_1001b3c8.11, align 8
  %v0_100024c5 = load i32, i32* @global_var_1001b3e4.10, align 4
  %v1_100024cb = add i32 %v0_100024c5, 200
  store i32 %v1_100024cb, i32* @global_var_1001b3dc.12, align 4
  store i32 %v1_100024cb, i32* %edx.global-to-local, align 4
  %v5_100024e3 = icmp slt i32 %v1_100024cb, %v1_100024b8
  br i1 %v5_100024e3, label %dec_label_pc_100024e5, label %dec_label_pc_100024ef

dec_label_pc_100024e5:                            ; preds = %dec_label_pc_100024b4
  store i32 %v1_100024b8, i32* %eax.global-to-local, align 4
  store i32 %v1_100024b8, i32* @global_var_1001b3dc.12, align 4
  br label %dec_label_pc_100024ef

dec_label_pc_100024ef:                            ; preds = %dec_label_pc_100024b4, %dec_label_pc_100024e5
  %v3_100024f2 = load i16, i16* %v2_1000248a, align 2
  %v4_100024f2 = sext i16 %v3_100024f2 to i32
  %v2_100024f6 = mul nsw i32 %v4_100024f2, 256
  store i32 %v2_100024f6, i32* %edx.global-to-local, align 4
  %v1_100024f9 = trunc i32 %v2_100024f6 to i16
  store i16 %v1_100024f9, i16* @global_var_1001b3e0.13, align 32
  %sext = mul i32 %v4_100024f2, 16777216
  %v1_10002500 = sdiv i32 %sext, 65536
  store i32 %v1_10002500, i32* %eax.global-to-local, align 4
  %v3_1000250a = load i16, i16* %v2_10002475, align 2
  %v4_1000250a31 = zext i16 %v3_1000250a to i32
  %v2_1000250e = or i32 %v4_1000250a31, %v1_10002500
  %v1_10002510 = trunc i32 %v2_1000250e to i16
  store i16 %v1_10002510, i16* @global_var_1001b3e0.13, align 32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_10002519 = and i32 %arg1, -65536
  %v3_10002520 = add i32 %arg1, 80
  %v4_10002520 = inttoptr i32 %v3_10002520 to i16*
  store i16 %v1_10002510, i16* %v4_10002520, align 2
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v3_10002527 = load i16, i16* %v4_10002520, align 2
  %v4_10002527 = zext i16 %v3_10002527 to i32
  %v5_10002527 = load i32, i32* %eax.global-to-local, align 4
  %v6_10002527 = and i32 %v5_10002527, -65536
  %v7_10002527 = or i32 %v6_10002527, %v4_10002527
  store i32 %v7_10002527, i32* %eax.global-to-local, align 4
  store i16 %v3_10002527, i16* bitcast (i32* @global_var_1001b3d0.14 to i16*), align 16
  %v1_10002534 = add i32 %arg1, 96
  %v2_10002534 = inttoptr i32 %v1_10002534 to i16*
  %v3_10002534 = load i16, i16* %v2_10002534, align 2
  %v4_1000253410 = zext i16 %v3_10002534 to i32
  %v1_10002538 = and i16 %v3_10002534, 255
  %v10_1000255d = and i32 %v4_1000253410, 255
  store i32 %v10_1000255d, i32* %edx.global-to-local, align 4
  store i16 %v1_10002538, i16* @global_var_1001b3d2.15, align 2
  %v4_10002567 = and i32 %arg3, 65535
  %v7_10002567 = or i32 %v4_10002567, %v3_10002519
  store i32 %v7_10002567, i32* %eax.global-to-local, align 4
  store i16 %tmp11, i16* @global_var_1001b3d4.16, align 4
  %v1_10002575 = call i32 @RdEngineModel(i32 %arg1)
  store i32 %v1_10002575, i32* %eax.global-to-local, align 4
  %v1_1000257d = mul i32 %v1_10002575, 65536
  %v2_1000257d = sdiv i32 %v1_1000257d, 65536
  store i32 %v2_1000257d, i32* %edx.global-to-local, align 4
  %tmp34 = icmp eq i32 %v1_1000257d, 50331648
  %v1_10002586 = icmp eq i1 %tmp34, false
  br i1 %v1_10002586, label %dec_label_pc_100025c6, label %dec_label_pc_10002588

dec_label_pc_10002588:                            ; preds = %dec_label_pc_100024ef
  %v4_10002588 = trunc i64 %tmp18 to i32
  store i32 %v4_10002588, i32* %eax.global-to-local, align 4
  %v3_100025a0 = and i32 %v4_10002588, 16640
  %v4_100025a0 = icmp eq i32 %v3_100025a0, 0
  %v1_100025a3 = icmp eq i1 %v4_100025a0, false
  br i1 %v1_100025a3, label %dec_label_pc_100025c6, label %dec_label_pc_100025a5

dec_label_pc_100025a5:                            ; preds = %dec_label_pc_10002588
  %v1_100025a9 = call i32 @function_100031ab(i32 %arg1)
  %v1_100025b1 = mul i32 %v1_100025a9, 65536
  %v2_100025b4 = sdiv i32 %v1_100025b1, 256
  store i32 %v2_100025b4, i32* %edx.global-to-local, align 4
  %v0_100025b7 = load i16, i16* @global_var_1001b3d4.16, align 4
  %v1_100025b7 = zext i16 %v0_100025b7 to i32
  %v3_100025b7 = and i32 %v1_100025a9, -65536
  %v4_100025b7 = or i32 %v2_100025b4, %v3_100025b7
  %v2_100025bd = or i32 %v4_100025b7, %v1_100025b7
  %v3_100025bd = trunc i32 %v2_100025bd to i16
  %v10_100025bd = and i32 %v2_100025bd, 65535
  %v13_100025bd = or i32 %v10_100025bd, %v3_100025b7
  store i32 %v13_100025bd, i32* %eax.global-to-local, align 4
  store i16 %v3_100025bd, i16* @global_var_1001b3d4.16, align 4
  br label %dec_label_pc_100025c6

dec_label_pc_100025c6:                            ; preds = %dec_label_pc_10002588, %dec_label_pc_100024ef, %dec_label_pc_100025a5
  store i16 %tmp, i16* bitcast (i32* @global_var_1001b3d6.17 to i16*), align 4
  br label %dec_label_pc_100025d1

dec_label_pc_100025d1:                            ; preds = %dec_label_pc_10002443, %dec_label_pc_100025c6
  store i32 %arg5, i32* %edx.global-to-local, align 4
  store i32 %arg4, i32* %eax.global-to-local, align 4
  %v2_100025dd = sext i32 %arg4 to i64
  %v3_100025dd = bitcast i64 %v2_100025dd to double
  %v4_100025dd = call i32 @function_10002df9(i32 %arg1, double %v3_100025dd)
  %v1_100025f1 = trunc i32 %v4_100025dd to i16
  store i16 %v1_100025f1, i16* bitcast (i32* @global_var_1001b3cc.18 to i16*), align 4
  %v2_100025fb = udiv i32 %v4_100025dd, 65536
  store i32 %v2_100025fb, i32* %eax.global-to-local, align 4
  %v1_100025fe = trunc i32 %v2_100025fb to i16
  store i16 %v1_100025fe, i16* bitcast (i32* @global_var_1001b3ce.19 to i16*), align 4
  %v5_10002609 = load i32, i32* @ecx, align 4
  %v6_10002609 = and i32 %v5_10002609, -65536
  %v7_10002609 = or i32 %v6_10002609, 6
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v4_10002614 = trunc i32 %arg1 to i16
  %v5_10002614 = call i32 @SendCommand(i16 %v4_10002614, i32 10, i32 %v7_10002609, i32 ptrtoint (i32* @global_var_1001b3cc.18 to i32))
  %v6_10002614 = trunc i32 %v5_10002614 to i16
  %sext8 = mul i32 %v5_10002614, 65536
  %v4_10002620 = sdiv i32 %sext8, 65536
  store i32 %v4_10002620, i32* %eax.global-to-local, align 4
  %tmp35 = icmp eq i32 %sext8, 4259840
  %v1_10002627 = icmp eq i1 %tmp35, false
  br i1 %v1_10002627, label %dec_label_pc_10002666, label %dec_label_pc_10002629

dec_label_pc_10002629:                            ; preds = %dec_label_pc_100025d1
  %v0_10002629 = load i32, i32* @global_var_1001b3dc.12, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v2_10002634 = call i32 @SetTimeoutWait(i32 %arg1, i32 %v0_10002629)
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v2_10002640 = call i32 @WaitRecvWord(i16 %v4_10002614)
  %v3_10002640 = trunc i32 %v2_10002640 to i16
  store i32 %v2_10002640, i32* %eax.global-to-local, align 4
  store i16 %v3_10002640, i16* %tmp13, align 2
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_10002652 = call i32 @RdErrorStatus(i32 %arg1)
  store i32 %v1_10002652, i32* %eax.global-to-local, align 4
  %v1_1000265a = icmp eq i32 %v1_10002652, 0
  %v6_10002614. = select i1 %v1_1000265a, i16 %v6_10002614, i16 -12
  br label %dec_label_pc_1000266e

dec_label_pc_10002666:                            ; preds = %dec_label_pc_100025d1
  store i32 %arg7, i32* %eax.global-to-local, align 4
  store i16 0, i16* %tmp13, align 2
  br label %dec_label_pc_1000266e

dec_label_pc_1000266e:                            ; preds = %dec_label_pc_10002629, %dec_label_pc_10002666
  %stack_var_-12.0 = phi i16 [ %v6_10002614, %dec_label_pc_10002666 ], [ %v6_10002614., %dec_label_pc_10002629 ]
  %v0_1000266e = load i32, i32* @global_var_1001b3c8.11, align 8
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v2_10002679 = call i32 @SetTimeoutWait(i32 %arg1, i32 %v0_1000266e)
  %v4_10002681 = zext i16 %stack_var_-12.0 to i32
  %v6_10002681 = and i32 %v2_10002679, -65536
  %v7_10002681 = or i32 %v6_10002681, %v4_10002681
  store i32 %v7_10002681, i32* %eax.global-to-local, align 4
  %v2_10002686 = call i32 @FuncStatusFromEngineReply(i16 %stack_var_-12.0)
  store i32 %v2_10002686, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000268e

dec_label_pc_1000268e:                            ; preds = %dec_label_pc_10002469, %dec_label_pc_10002432, %dec_label_pc_1000266e
  %v0_10002691 = phi i32 [ %v8_10002469, %dec_label_pc_10002469 ], [ %v1_10002436, %dec_label_pc_10002432 ], [ %v2_10002686, %dec_label_pc_1000266e ]
  ret i32 %v0_10002691

; uselistorder directives
  uselistorder i16 %stack_var_-12.0, { 1, 0 }
  uselistorder i16 %v6_10002614, { 1, 0 }
  uselistorder i32 %v2_100025fb, { 1, 0 }
  uselistorder i32 %v2_100025b4, { 1, 0 }
  uselistorder i32 %v1_100025a9, { 1, 0 }
  uselistorder i16 %v3_10002534, { 1, 0 }
  uselistorder i32 %v1_10002500, { 1, 0 }
  uselistorder i32 %v2_100024f6, { 1, 0 }
  uselistorder i32 %v1_100024b8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_10002460, { 1, 0 }
  uselistorder i32 %v1_10002454, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 (i32)* @function_100031ab, { 2, 1, 0 }
  uselistorder i16* @global_var_1001b3d4.16, { 2, 1, 0 }
  uselistorder i16* @global_var_1001b3e0.13, { 1, 0 }
  uselistorder i32 %arg1, { 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 1, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder label %dec_label_pc_1000268e, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000266e, { 1, 0 }
  uselistorder label %dec_label_pc_100025d1, { 1, 0 }
  uselistorder label %dec_label_pc_100025c6, { 2, 0, 1 }
  uselistorder label %dec_label_pc_100024ef, { 1, 0 }
  uselistorder label %dec_label_pc_100024b4, { 1, 0 }
}

define i32 @function_10002692(i32 %arg1, i16 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10002692:
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-28 = alloca i16, align 2
  %stack_var_-4 = alloca i32, align 4
  %v0_10002692 = load i32, i32* @ebp, align 4
  store i32 %v0_10002692, i32* %stack_var_-4, align 4
  %v4_10002692 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10002692, i32* @ebp, align 4
  store i16 6, i16* %stack_var_-28, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_100026ae = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100026ae, i32* @eax, align 4
  %v1_100026b6 = mul i32 %v1_100026ae, 65536
  %v1_100026b6.off = or i32 %v1_100026b6, 65535
  %tmp = icmp ult i32 %v1_100026b6.off, 131071
  br i1 %tmp, label %dec_label_pc_100026cb, label %dec_label_pc_100026bd

dec_label_pc_100026bd:                            ; preds = %dec_label_pc_10002692
  %v1_100026c1 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10002727

dec_label_pc_100026cb:                            ; preds = %dec_label_pc_10002692
  store i32 4, i32* %stack_var_-16, align 4
  %v2_100026fc = ptrtoint i32* %stack_var_-16 to i32
  %v3_10002700 = load i16, i16* %stack_var_-28, align 2
  %v4_10002700 = sext i16 %v3_10002700 to i32
  %v4_1000270e = trunc i32 %arg1 to i16
  %v5_1000270e = call i32 @SendCommand(i16 %v4_1000270e, i32 11, i32 %v4_10002700, i32 %v2_100026fc)
  %v6_1000270e = trunc i32 %v5_1000270e to i16
  %v2_1000271f = call i32 @FuncStatusFromEngineReply(i16 %v6_1000270e)
  br label %dec_label_pc_10002727

dec_label_pc_10002727:                            ; preds = %dec_label_pc_100026bd, %dec_label_pc_100026cb
  %v0_1000272a = phi i32 [ %v2_1000271f, %dec_label_pc_100026cb ], [ %v1_100026c1, %dec_label_pc_100026bd ]
  ret i32 %v0_1000272a

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i16* %stack_var_-28, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10002727, { 1, 0 }
}

define i32 @PulseGetMinMax(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %tmp7 = inttoptr i32 %arg5 to i16*
  %tmp9 = inttoptr i32 %arg4 to i16*
  %tmp20 = zext i32 %arg3 to i64
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i16, align 2
  %stack_var_-4 = alloca i32, align 4
  %v0_1000272b = load i32, i32* @ebp, align 4
  store i32 %v0_1000272b, i32* %stack_var_-4, align 4
  %v4_1000272b = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000272b, i32* @ebp, align 4
  store i16 8, i16* %stack_var_-40, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10002747 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10002747, i32* @eax, align 4
  %v1_1000274f = mul i32 %v1_10002747, 65536
  %v1_1000274f.off = or i32 %v1_1000274f, 65535
  %tmp = icmp ult i32 %v1_1000274f.off, 131071
  br i1 %tmp, label %dec_label_pc_10002767, label %dec_label_pc_10002756

dec_label_pc_10002756:                            ; preds = %entry
  %v1_1000275a = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10002898

dec_label_pc_10002767:                            ; preds = %entry
  %v4_10002767 = trunc i64 %arg2 to i32
  %v9_10002767 = icmp ult i32 %v4_10002767, 306
  br i1 %v9_10002767, label %dec_label_pc_10002779, label %dec_label_pc_10002770

dec_label_pc_10002770:                            ; preds = %dec_label_pc_10002767
  %tmp33 = icmp ult i32 %v4_10002767, 1000001
  br i1 %tmp33, label %dec_label_pc_10002782, label %dec_label_pc_10002779

dec_label_pc_10002779:                            ; preds = %dec_label_pc_10002770, %dec_label_pc_10002767
  %v1_10002779 = and i32 %v1_10002747, -65536
  %v2_10002779 = or i32 %v1_10002779, 65533
  br label %dec_label_pc_10002898

dec_label_pc_10002782:                            ; preds = %dec_label_pc_10002770
  %v6_10002786 = icmp slt i32 %arg3, 1
  br i1 %v6_10002786, label %dec_label_pc_10002791, label %dec_label_pc_10002788

dec_label_pc_10002788:                            ; preds = %dec_label_pc_10002782
  %v8_1000278f = icmp sgt i32 %arg3, 1000000000
  br i1 %v8_1000278f, label %dec_label_pc_10002791, label %dec_label_pc_1000279a

dec_label_pc_10002791:                            ; preds = %dec_label_pc_10002788, %dec_label_pc_10002782
  %v1_10002791 = and i32 %v1_10002747, -65536
  %v2_10002791 = or i32 %v1_10002791, 65533
  br label %dec_label_pc_10002898

dec_label_pc_1000279a:                            ; preds = %dec_label_pc_10002788
  %v1_1000279e = call i32 @RdTimeoutWait(i32 %arg1)
  %v1_100027ac = ashr i32 %arg3, 31
  %v4_100027b2 = zext i32 %v1_100027ac to i64
  %v5_100027b2 = mul nuw i64 %v4_100027b2, 4294967296
  %v6_100027b2 = or i64 %v5_100027b2, %tmp20
  %v8_100027b2 = sdiv i64 %v6_100027b2, 1000
  %v9_100027b2 = trunc i64 %v8_100027b2 to i32
  %v1_100027b4 = add i32 %v9_100027b2, 100
  %v5_100027c0 = icmp slt i32 %v1_100027b4, %v1_1000279e
  br i1 %v5_100027c0, label %dec_label_pc_100027c2, label %dec_label_pc_100027c8

dec_label_pc_100027c2:                            ; preds = %dec_label_pc_1000279a
  br label %dec_label_pc_100027c8

dec_label_pc_100027c8:                            ; preds = %dec_label_pc_1000279a, %dec_label_pc_100027c2
  %stack_var_-32.0 = phi i32 [ %v1_1000279e, %dec_label_pc_100027c2 ], [ %v1_100027b4, %dec_label_pc_1000279a ]
  store i32 6, i32* %stack_var_-24, align 4
  %v2_100027fe = sdiv i32 %arg3, 65536
  %v2_1000280b = ptrtoint i32* %stack_var_-24 to i32
  %v3_1000280f = load i16, i16* %stack_var_-40, align 2
  %v4_1000280f = sext i16 %v3_1000280f to i32
  %v6_10002814 = and i32 %v2_100027fe, -65536
  %v7_10002814 = or i32 %v6_10002814, 11
  %v4_1000281d = trunc i32 %arg1 to i16
  %v5_1000281d = call i32 @SendCommand(i16 %v4_1000281d, i32 %v7_10002814, i32 %v4_1000280f, i32 %v2_1000280b)
  %sext = mul i32 %v5_1000281d, 65536
  %tmp34 = icmp eq i32 %sext, 65536
  %v1_10002830 = icmp eq i1 %tmp34, false
  br i1 %v1_10002830, label %dec_label_pc_1000286e, label %dec_label_pc_10002832

dec_label_pc_10002832:                            ; preds = %dec_label_pc_100027c8
  %v2_1000283a = call i32 @SetTimeoutWait(i32 %arg1, i32 %stack_var_-32.0)
  %v2_10002846 = call i32 @WaitRecvWord(i16 %v4_1000281d)
  %v3_10002846 = trunc i32 %v2_10002846 to i16
  store i16 %v3_10002846, i16* %tmp9, align 2
  %v2_10002858 = call i32 @WaitRecvWord(i16 %v4_1000281d)
  %v3_10002858 = trunc i32 %v2_10002858 to i16
  br label %dec_label_pc_10002884

dec_label_pc_1000286e:                            ; preds = %dec_label_pc_100027c8
  store i16 1, i16* %tmp9, align 2
  br label %dec_label_pc_10002884

dec_label_pc_10002884:                            ; preds = %dec_label_pc_10002832, %dec_label_pc_1000286e
  %storemerge5 = phi i16 [ %v3_10002858, %dec_label_pc_10002832 ], [ 1, %dec_label_pc_1000286e ]
  %storemerge = phi i32 [ 65, %dec_label_pc_10002832 ], [ 65535, %dec_label_pc_1000286e ]
  store i16 %storemerge5, i16* %tmp7, align 2
  %v2_1000288c = call i32 @SetTimeoutWait(i32 %arg1, i32 %v1_1000279e)
  %v6_10002894 = and i32 %v2_1000288c, -65536
  %v7_10002894 = or i32 %v6_10002894, %storemerge
  br label %dec_label_pc_10002898

dec_label_pc_10002898:                            ; preds = %dec_label_pc_10002791, %dec_label_pc_10002779, %dec_label_pc_10002756, %dec_label_pc_10002884
  %v0_1000289b = phi i32 [ %v2_10002791, %dec_label_pc_10002791 ], [ %v2_10002779, %dec_label_pc_10002779 ], [ %v1_1000275a, %dec_label_pc_10002756 ], [ %v7_10002894, %dec_label_pc_10002884 ]
  ret i32 %v0_1000289b

; uselistorder directives
  uselistorder i32 %v1_10002747, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i16* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 %arg3, { 0, 2, 3, 4, 1 }
  uselistorder i32 %arg1, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10002898, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_10002884, { 1, 0 }
  uselistorder label %dec_label_pc_100027c8, { 1, 0 }
}

define i32 @PulseSigPresent(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg4 to i16
  %tmp11 = inttoptr i32 %arg5 to i16*
  %tmp23 = zext i32 %arg3 to i64
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i16, align 2
  %stack_var_-4 = alloca i32, align 4
  %v0_1000289c = load i32, i32* @ebp, align 4
  store i32 %v0_1000289c, i32* %stack_var_-4, align 4
  %v4_1000289c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000289c, i32* @ebp, align 4
  store i16 8, i16* %stack_var_-36, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_100028b2 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100028b2, i32* @eax, align 4
  %v1_100028ba = mul i32 %v1_100028b2, 65536
  %v1_100028ba.off = or i32 %v1_100028ba, 65535
  %tmp35 = icmp ult i32 %v1_100028ba.off, 131071
  br i1 %tmp35, label %dec_label_pc_100028d2, label %dec_label_pc_100028c1

dec_label_pc_100028c1:                            ; preds = %entry
  %v1_100028c5 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10002a05

dec_label_pc_100028d2:                            ; preds = %entry
  %v4_100028d2 = trunc i64 %arg2 to i32
  %v9_100028d2 = icmp ult i32 %v4_100028d2, 306
  br i1 %v9_100028d2, label %dec_label_pc_100028e4, label %dec_label_pc_100028db

dec_label_pc_100028db:                            ; preds = %dec_label_pc_100028d2
  %tmp36 = icmp ult i32 %v4_100028d2, 1000001
  br i1 %tmp36, label %dec_label_pc_100028ed, label %dec_label_pc_100028e4

dec_label_pc_100028e4:                            ; preds = %dec_label_pc_100028db, %dec_label_pc_100028d2
  %v1_100028e4 = and i32 %v1_100028b2, -65536
  %v2_100028e4 = or i32 %v1_100028e4, 65533
  br label %dec_label_pc_10002a05

dec_label_pc_100028ed:                            ; preds = %dec_label_pc_100028db
  %v6_100028f1 = icmp slt i32 %arg3, 1
  br i1 %v6_100028f1, label %dec_label_pc_100028fc, label %dec_label_pc_100028f3

dec_label_pc_100028f3:                            ; preds = %dec_label_pc_100028ed
  %v8_100028fa = icmp sgt i32 %arg3, 1000000000
  br i1 %v8_100028fa, label %dec_label_pc_100028fc, label %dec_label_pc_10002905

dec_label_pc_100028fc:                            ; preds = %dec_label_pc_100028f3, %dec_label_pc_100028ed
  %v1_100028fc = and i32 %v1_100028b2, -65536
  %v2_100028fc = or i32 %v1_100028fc, 65533
  br label %dec_label_pc_10002a05

dec_label_pc_10002905:                            ; preds = %dec_label_pc_100028f3
  %sext = mul i32 %arg4, 65536
  %v4_10002905 = sdiv i32 %sext, 65536
  %v3_10002909 = icmp slt i16 %tmp, 0
  %v2_1000290b = icmp eq i1 %v3_10002909, false
  br i1 %v2_1000290b, label %dec_label_pc_1000290d, label %dec_label_pc_10002919

dec_label_pc_1000290d:                            ; preds = %dec_label_pc_10002905
  %v8_10002917 = icmp sgt i16 %tmp, 4095
  br i1 %v8_10002917, label %dec_label_pc_10002919, label %dec_label_pc_10002922

dec_label_pc_10002919:                            ; preds = %dec_label_pc_1000290d, %dec_label_pc_10002905
  %v2_10002919 = and i32 %v4_10002905, -65536
  %v3_10002919 = or i32 %v2_10002919, 65533
  br label %dec_label_pc_10002a05

dec_label_pc_10002922:                            ; preds = %dec_label_pc_1000290d
  %v1_10002926 = call i32 @RdTimeoutWait(i32 %arg1)
  %v1_10002934 = ashr i32 %arg3, 31
  %v4_1000293a = zext i32 %v1_10002934 to i64
  %v5_1000293a = mul nuw i64 %v4_1000293a, 4294967296
  %v6_1000293a = or i64 %v5_1000293a, %tmp23
  %v8_1000293a = sdiv i64 %v6_1000293a, 1000
  %v9_1000293a = trunc i64 %v8_1000293a to i32
  %v1_1000293c = add i32 %v9_1000293a, 100
  %v5_10002948 = icmp slt i32 %v1_1000293c, %v1_10002926
  br i1 %v5_10002948, label %dec_label_pc_1000294a, label %dec_label_pc_10002950

dec_label_pc_1000294a:                            ; preds = %dec_label_pc_10002922
  br label %dec_label_pc_10002950

dec_label_pc_10002950:                            ; preds = %dec_label_pc_10002922, %dec_label_pc_1000294a
  %stack_var_-32.0 = phi i32 [ %v1_10002926, %dec_label_pc_1000294a ], [ %v1_1000293c, %dec_label_pc_10002922 ]
  store i32 6, i32* %stack_var_-24, align 4
  %v2_10002986 = sdiv i32 %arg3, 65536
  %v2_10002995 = ptrtoint i32* %stack_var_-24 to i32
  %v3_10002999 = load i16, i16* %stack_var_-36, align 2
  %v4_10002999 = sext i16 %v3_10002999 to i32
  %v7_10002999 = and i32 %v2_10002986, -65536
  %v8_10002999 = or i32 %v4_10002999, %v7_10002999
  %v4_100029a4 = trunc i32 %arg1 to i16
  %v5_100029a4 = call i32 @SendCommand(i16 %v4_100029a4, i32 11, i32 %v8_10002999, i32 %v2_10002995)
  %sext7 = mul i32 %v5_100029a4, 65536
  %tmp37 = icmp eq i32 %sext7, 65536
  %v1_100029b7 = icmp eq i1 %tmp37, false
  br i1 %v1_100029b7, label %dec_label_pc_100029e3, label %dec_label_pc_100029b9

dec_label_pc_100029b9:                            ; preds = %dec_label_pc_10002950
  %v2_100029c1 = call i32 @SetTimeoutWait(i32 %arg1, i32 %stack_var_-32.0)
  %v2_100029cd = call i32 @WaitRecvWord(i16 %v4_100029a4)
  %v3_100029cd = trunc i32 %v2_100029cd to i16
  br label %dec_label_pc_100029f1

dec_label_pc_100029e3:                            ; preds = %dec_label_pc_10002950
  br label %dec_label_pc_100029f1

dec_label_pc_100029f1:                            ; preds = %dec_label_pc_100029b9, %dec_label_pc_100029e3
  %storemerge8 = phi i16 [ %v3_100029cd, %dec_label_pc_100029b9 ], [ 0, %dec_label_pc_100029e3 ]
  %storemerge = phi i32 [ 65, %dec_label_pc_100029b9 ], [ 65535, %dec_label_pc_100029e3 ]
  store i16 %storemerge8, i16* %tmp11, align 2
  %v2_100029f9 = call i32 @SetTimeoutWait(i32 %arg1, i32 %v1_10002926)
  %v6_10002a01 = and i32 %v2_100029f9, -65536
  %v7_10002a01 = or i32 %v6_10002a01, %storemerge
  br label %dec_label_pc_10002a05

dec_label_pc_10002a05:                            ; preds = %dec_label_pc_10002919, %dec_label_pc_100028fc, %dec_label_pc_100028e4, %dec_label_pc_100028c1, %dec_label_pc_100029f1
  %v0_10002a08 = phi i32 [ %v3_10002919, %dec_label_pc_10002919 ], [ %v2_100028fc, %dec_label_pc_100028fc ], [ %v2_100028e4, %dec_label_pc_100028e4 ], [ %v1_100028c5, %dec_label_pc_100028c1 ], [ %v7_10002a01, %dec_label_pc_100029f1 ]
  ret i32 %v0_10002a08

; uselistorder directives
  uselistorder i32 %v1_100028b2, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i16* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 %arg3, { 0, 2, 3, 4, 1 }
  uselistorder i32 %arg1, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10002a05, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_100029f1, { 1, 0 }
  uselistorder label %dec_label_pc_10002950, { 1, 0 }
}

define i32 @PulseMeasure(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg4 to i16
  %tmp27 = zext i32 %arg3 to i64
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-44 = alloca i16, align 2
  %stack_var_-4 = alloca i32, align 4
  %v0_10002a09 = load i32, i32* @ebp, align 4
  store i32 %v0_10002a09, i32* %stack_var_-4, align 4
  %v4_10002a09 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10002a09, i32* @ebp, align 4
  store i16 8, i16* %stack_var_-44, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10002a2b = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10002a2b, i32* @eax, align 4
  %v1_10002a33 = mul i32 %v1_10002a2b, 65536
  %v1_10002a33.off = or i32 %v1_10002a33, 65535
  %tmp41 = icmp ult i32 %v1_10002a33.off, 131071
  br i1 %tmp41, label %dec_label_pc_10002a4b, label %dec_label_pc_10002a3a

dec_label_pc_10002a3a:                            ; preds = %entry
  %v1_10002a3e = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10002bfb

dec_label_pc_10002a4b:                            ; preds = %entry
  %v4_10002a4b = trunc i64 %arg2 to i32
  %v9_10002a4b = icmp ult i32 %v4_10002a4b, 306
  br i1 %v9_10002a4b, label %dec_label_pc_10002a5d, label %dec_label_pc_10002a54

dec_label_pc_10002a54:                            ; preds = %dec_label_pc_10002a4b
  %tmp42 = icmp ult i32 %v4_10002a4b, 1000001
  br i1 %tmp42, label %dec_label_pc_10002a66, label %dec_label_pc_10002a5d

dec_label_pc_10002a5d:                            ; preds = %dec_label_pc_10002a54, %dec_label_pc_10002a4b
  %v1_10002a5d = and i32 %v1_10002a2b, -65536
  %v2_10002a5d = or i32 %v1_10002a5d, 65533
  br label %dec_label_pc_10002bfb

dec_label_pc_10002a66:                            ; preds = %dec_label_pc_10002a54
  %v6_10002a6a = icmp slt i32 %arg3, 1
  br i1 %v6_10002a6a, label %dec_label_pc_10002a75, label %dec_label_pc_10002a6c

dec_label_pc_10002a6c:                            ; preds = %dec_label_pc_10002a66
  %v8_10002a73 = icmp sgt i32 %arg3, 1000000000
  br i1 %v8_10002a73, label %dec_label_pc_10002a75, label %dec_label_pc_10002a7e

dec_label_pc_10002a75:                            ; preds = %dec_label_pc_10002a6c, %dec_label_pc_10002a66
  %v1_10002a75 = and i32 %v1_10002a2b, -65536
  %v2_10002a75 = or i32 %v1_10002a75, 65533
  br label %dec_label_pc_10002bfb

dec_label_pc_10002a7e:                            ; preds = %dec_label_pc_10002a6c
  %sext = mul i32 %arg4, 65536
  %v4_10002a7e = sdiv i32 %sext, 65536
  %v3_10002a82 = icmp slt i16 %tmp, 0
  %v2_10002a84 = icmp eq i1 %v3_10002a82, false
  br i1 %v2_10002a84, label %dec_label_pc_10002a86, label %dec_label_pc_10002a92

dec_label_pc_10002a86:                            ; preds = %dec_label_pc_10002a7e
  %v8_10002a90 = icmp sgt i16 %tmp, 4095
  br i1 %v8_10002a90, label %dec_label_pc_10002a92, label %dec_label_pc_10002a9b

dec_label_pc_10002a92:                            ; preds = %dec_label_pc_10002a86, %dec_label_pc_10002a7e
  %v2_10002a92 = and i32 %v4_10002a7e, -65536
  %v3_10002a92 = or i32 %v2_10002a92, 65533
  br label %dec_label_pc_10002bfb

dec_label_pc_10002a9b:                            ; preds = %dec_label_pc_10002a86
  %v1_10002a9f = call i32 @RdTimeoutWait(i32 %arg1)
  %v1_10002aad = ashr i32 %arg3, 31
  %v4_10002ab3 = zext i32 %v1_10002aad to i64
  %v5_10002ab3 = mul nuw i64 %v4_10002ab3, 4294967296
  %v6_10002ab3 = or i64 %v5_10002ab3, %tmp27
  %v8_10002ab3 = sdiv i64 %v6_10002ab3, 1000
  %v9_10002ab3 = trunc i64 %v8_10002ab3 to i32
  %v1_10002ab5 = add i32 %v9_10002ab3, 100
  %v5_10002ac1 = icmp slt i32 %v1_10002ab5, %v1_10002a9f
  br i1 %v5_10002ac1, label %dec_label_pc_10002ac3, label %dec_label_pc_10002ac9

dec_label_pc_10002ac3:                            ; preds = %dec_label_pc_10002a9b
  br label %dec_label_pc_10002ac9

dec_label_pc_10002ac9:                            ; preds = %dec_label_pc_10002a9b, %dec_label_pc_10002ac3
  %stack_var_-40.0 = phi i32 [ %v1_10002a9f, %dec_label_pc_10002ac3 ], [ %v1_10002ab5, %dec_label_pc_10002a9b ]
  store i32 6, i32* %stack_var_-32, align 4
  %v2_10002aff = sdiv i32 %arg3, 65536
  %v2_10002b0e = ptrtoint i32* %stack_var_-32 to i32
  %v3_10002b12 = load i16, i16* %stack_var_-44, align 2
  %v4_10002b12 = sext i16 %v3_10002b12 to i32
  %v7_10002b12 = and i32 %v2_10002aff, -65536
  %v8_10002b12 = or i32 %v4_10002b12, %v7_10002b12
  %v4_10002b1d = trunc i32 %arg1 to i16
  %v5_10002b1d = call i32 @SendCommand(i16 %v4_10002b1d, i32 11, i32 %v8_10002b12, i32 %v2_10002b0e)
  %sext7 = mul i32 %v5_10002b1d, 65536
  %tmp43 = icmp eq i32 %sext7, 65536
  %v1_10002b30 = icmp eq i1 %tmp43, false
  br i1 %v1_10002b30, label %dec_label_pc_10002bcf, label %dec_label_pc_10002b36

dec_label_pc_10002b36:                            ; preds = %dec_label_pc_10002ac9
  %v2_10002b3e = call i32 @SetTimeoutWait(i32 %arg1, i32 %stack_var_-40.0)
  %v2_10002b4a = call i32 @WaitRecvWord(i16 %v4_10002b1d)
  %v2_10002b5a = call i32 @WaitRecvWord(i16 %v4_10002b1d)
  %v1_10002b693 = and i32 %v2_10002b4a, 65535
  %sext9 = mul i32 %v2_10002b5a, 65536
  %v2_10002b7f = or i32 %sext9, %v1_10002b693
  %v2_10002b84 = inttoptr i32 %arg5 to i32*
  store i32 %v2_10002b7f, i32* %v2_10002b84, align 4
  %v2_10002b8a = call i32 @WaitRecvWord(i16 %v4_10002b1d)
  %v2_10002b9a = call i32 @WaitRecvWord(i16 %v4_10002b1d)
  %v4_10002ba613 = and i32 %v2_10002b8a, 65535
  %sext11 = mul i32 %v2_10002b9a, 65536
  %v2_10002bc0 = or i32 %sext11, %v4_10002ba613
  %v2_10002bc5 = inttoptr i32 %arg6 to i32*
  store i32 %v2_10002bc0, i32* %v2_10002bc5, align 4
  br label %dec_label_pc_10002be7

dec_label_pc_10002bcf:                            ; preds = %dec_label_pc_10002ac9
  %v1_10002bd2 = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v1_10002bd2, align 4
  %v1_10002bdb = inttoptr i32 %arg6 to i32*
  store i32 0, i32* %v1_10002bdb, align 4
  br label %dec_label_pc_10002be7

dec_label_pc_10002be7:                            ; preds = %dec_label_pc_10002b36, %dec_label_pc_10002bcf
  %storemerge = phi i32 [ 65535, %dec_label_pc_10002bcf ], [ 65, %dec_label_pc_10002b36 ]
  %v2_10002bef = call i32 @SetTimeoutWait(i32 %arg1, i32 %v1_10002a9f)
  %v6_10002bf7 = and i32 %v2_10002bef, -65536
  %v7_10002bf7 = or i32 %v6_10002bf7, %storemerge
  br label %dec_label_pc_10002bfb

dec_label_pc_10002bfb:                            ; preds = %dec_label_pc_10002a92, %dec_label_pc_10002a75, %dec_label_pc_10002a5d, %dec_label_pc_10002a3a, %dec_label_pc_10002be7
  %v0_10002bfe = phi i32 [ %v3_10002a92, %dec_label_pc_10002a92 ], [ %v2_10002a75, %dec_label_pc_10002a75 ], [ %v2_10002a5d, %dec_label_pc_10002a5d ], [ %v1_10002a3e, %dec_label_pc_10002a3a ], [ %v7_10002bf7, %dec_label_pc_10002be7 ]
  ret i32 %v0_10002bfe

; uselistorder directives
  uselistorder i32 %v1_10002a2b, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i16* %stack_var_-44, { 1, 0 }
  uselistorder i32* %stack_var_-32, { 1, 0 }
  uselistorder i32 (i16)* @WaitRecvWord, { 1, 2, 3, 4, 5, 6, 7, 0, 8, 9 }
  uselistorder i32 (i32, i32)* @SetTimeoutWait, { 9, 8, 7, 6, 5, 4, 11, 10, 3, 2, 1, 0 }
  uselistorder i32 %arg6, { 1, 0 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg3, { 0, 2, 3, 4, 1 }
  uselistorder i32 %arg1, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10002bfb, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_10002be7, { 1, 0 }
  uselistorder label %dec_label_pc_10002ac9, { 1, 0 }
}

define i32 @SetLinearAttn(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10002c06 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10002c06, i32* @eax, align 4
  %v1_10002c0e = mul i32 %v1_10002c06, 65536
  %v2_10002c0e = sdiv i32 %v1_10002c0e, 65536
  store i32 %v2_10002c0e, i32* %ecx.global-to-local, align 4
  %v1_10002c0e.off = or i32 %v1_10002c0e, 65535
  %tmp = icmp ult i32 %v1_10002c0e.off, 131071
  br i1 %tmp, label %dec_label_pc_10002c26, label %dec_label_pc_10002c15

dec_label_pc_10002c15:                            ; preds = %entry
  %v1_10002c19 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10002cca

dec_label_pc_10002c26:                            ; preds = %entry
  %v4_10002c26 = sext i16 %arg2 to i32
  store i32 %v4_10002c26, i32* %eax.global-to-local, align 4
  %v1_10002c2a = icmp eq i16 %arg2, 0
  %v1_10002c2c = icmp eq i1 %v1_10002c2a, false
  br i1 %v1_10002c2c, label %dec_label_pc_10002c7c, label %dec_label_pc_10002c2e

dec_label_pc_10002c2e:                            ; preds = %dec_label_pc_10002c26
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_10002c31 = add i32 %arg1, 128
  %v2_10002c31 = inttoptr i32 %v1_10002c31 to i16*
  %v3_10002c31 = load i16, i16* %v2_10002c31, align 2
  %v1_10002c38 = and i16 %v3_10002c31, 64
  %v2_10002c38 = icmp eq i16 %v1_10002c38, 0
  %v1_10002c3d = icmp eq i1 %v2_10002c38, false
  br i1 %v1_10002c3d, label %dec_label_pc_10002cc7, label %dec_label_pc_10002c3f

dec_label_pc_10002c3f:                            ; preds = %dec_label_pc_10002c2e
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_10002c42 = load i16, i16* %v2_10002c31, align 2
  %v4_10002c42 = sext i16 %v3_10002c42 to i32
  %v1_10002c49 = or i32 %v4_10002c42, 64
  store i32 %v1_10002c49, i32* %ecx.global-to-local, align 4
  %v1_10002c4f = trunc i32 %v1_10002c49 to i16
  store i16 %v1_10002c4f, i16* %v2_10002c31, align 2
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10002c59 = add i32 %arg1, 98
  %v2_10002c59 = inttoptr i32 %v1_10002c59 to i16*
  %v3_10002c59 = load i16, i16* %v2_10002c59, align 2
  %v5_10002c59 = load i32, i32* %ecx.global-to-local, align 4
  %v2_10002c5d = add i16 %v3_10002c59, -30
  %v16_10002c5d = zext i16 %v2_10002c5d to i32
  %v18_10002c5d = and i32 %v5_10002c59, -65536
  %v19_10002c5d = or i32 %v18_10002c5d, %v16_10002c5d
  store i32 %v19_10002c5d, i32* %ecx.global-to-local, align 4
  store i16 %v2_10002c5d, i16* %v2_10002c59, align 2
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10002c6b = add i32 %arg1, 106
  %v2_10002c6b = inttoptr i32 %v1_10002c6b to i16*
  %v3_10002c6b = load i16, i16* %v2_10002c6b, align 2
  %v5_10002c6b = load i32, i32* %ecx.global-to-local, align 4
  %v2_10002c6f = add i16 %v3_10002c6b, -30
  %v16_10002c6f = zext i16 %v2_10002c6f to i32
  %v18_10002c6f = and i32 %v5_10002c6b, -65536
  %v19_10002c6f = or i32 %v18_10002c6f, %v16_10002c6f
  store i32 %v19_10002c6f, i32* %ecx.global-to-local, align 4
  store i16 %v2_10002c6f, i16* %v2_10002c6b, align 2
  br label %dec_label_pc_10002cc7

dec_label_pc_10002c7c:                            ; preds = %dec_label_pc_10002c26
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10002c7f = add i32 %arg1, 128
  %v2_10002c7f = inttoptr i32 %v1_10002c7f to i16*
  %v3_10002c7f = load i16, i16* %v2_10002c7f, align 2
  %v4_10002c7f3 = zext i16 %v3_10002c7f to i32
  %v1_10002c86 = and i32 %v4_10002c7f3, 64
  %v2_10002c86 = icmp eq i32 %v1_10002c86, 0
  store i32 %v1_10002c86, i32* %ecx.global-to-local, align 4
  br i1 %v2_10002c86, label %dec_label_pc_10002cc7, label %dec_label_pc_10002c8d

dec_label_pc_10002c8d:                            ; preds = %dec_label_pc_10002c7c
  %v3_10002c90 = load i16, i16* %v2_10002c7f, align 2
  %v4_10002c90 = sext i16 %v3_10002c90 to i32
  %v1_10002c97 = zext i16 %v3_10002c90 to i32
  %v2_10002c97 = and i32 %v1_10002c97, 191
  %v10_10002c97 = and i32 %v4_10002c90, -256
  %v11_10002c97 = or i32 %v10_10002c97, %v2_10002c97
  store i32 %v11_10002c97, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_10002c9c = trunc i32 %v11_10002c97 to i16
  store i16 %v1_10002c9c, i16* %v2_10002c7f, align 2
  %v1_10002ca6 = add i32 %arg1, 98
  %v2_10002ca6 = inttoptr i32 %v1_10002ca6 to i16*
  %v3_10002ca6 = load i16, i16* %v2_10002ca6, align 2
  %v5_10002ca6 = load i32, i32* %eax.global-to-local, align 4
  %v2_10002caa = add i16 %v3_10002ca6, 30
  %v16_10002caa = zext i16 %v2_10002caa to i32
  %v18_10002caa = and i32 %v5_10002ca6, -65536
  %v19_10002caa = or i32 %v18_10002caa, %v16_10002caa
  store i32 %v19_10002caa, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  store i16 %v2_10002caa, i16* %v2_10002ca6, align 2
  %v1_10002cb8 = add i32 %arg1, 106
  %v2_10002cb8 = inttoptr i32 %v1_10002cb8 to i16*
  %v3_10002cb8 = load i16, i16* %v2_10002cb8, align 2
  %v5_10002cb8 = load i32, i32* %eax.global-to-local, align 4
  %v2_10002cbc = add i16 %v3_10002cb8, 30
  %v16_10002cbc = zext i16 %v2_10002cbc to i32
  %v18_10002cbc = and i32 %v5_10002cb8, -65536
  %v19_10002cbc = or i32 %v18_10002cbc, %v16_10002cbc
  store i32 %v19_10002cbc, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  store i16 %v2_10002cbc, i16* %v2_10002cb8, align 2
  br label %dec_label_pc_10002cc7

dec_label_pc_10002cc7:                            ; preds = %dec_label_pc_10002c3f, %dec_label_pc_10002c2e, %dec_label_pc_10002c7c, %dec_label_pc_10002c8d
  %v11_10002cc7 = load i32, i32* %eax.global-to-local, align 4
  %v12_10002cc7 = and i32 %v11_10002cc7, -65536
  br label %dec_label_pc_10002cca

dec_label_pc_10002cca:                            ; preds = %dec_label_pc_10002c15, %dec_label_pc_10002cc7
  %storemerge = phi i32 [ %v12_10002cc7, %dec_label_pc_10002cc7 ], [ %v1_10002c19, %dec_label_pc_10002c15 ]
  %v0_10002ccb = phi i32 [ %v12_10002cc7, %dec_label_pc_10002cc7 ], [ %v1_10002c19, %dec_label_pc_10002c15 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_10002ccb

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 16, 15, 14, 13, 12, 9, 8, 7, 6, 5, 4, 3, 10, 11, 2, 1, 0 }
  uselistorder label %dec_label_pc_10002cca, { 1, 0 }
  uselistorder label %dec_label_pc_10002cc7, { 3, 2, 0, 1 }
}

define i32 @RdLinearAttn(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10002cd3 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10002cd3, i32* @eax, align 4
  %v1_10002cdb = mul i32 %v1_10002cd3, 65536
  %v1_10002cdb.off = or i32 %v1_10002cdb, 65535
  %tmp = icmp ult i32 %v1_10002cdb.off, 131071
  br i1 %tmp, label %dec_label_pc_10002cf0, label %dec_label_pc_10002ce2

dec_label_pc_10002ce2:                            ; preds = %entry
  %v1_10002ce6 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10002d10

dec_label_pc_10002cf0:                            ; preds = %entry
  store i32 %arg1, i32* @eax, align 4
  %v3_10002cf6 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10002d01 = add i32 %arg1, 128
  %v2_10002d01 = inttoptr i32 %v1_10002d01 to i16*
  %v3_10002d01 = load i16, i16* %v2_10002d01, align 2
  %v4_10002d013 = zext i16 %v3_10002d01 to i32
  %v1_10002d08 = and i32 %v4_10002d013, 64
  %tmp8 = udiv i32 %v1_10002d08, 64
  %tmp9 = add nuw nsw i32 %tmp8, 1
  br label %dec_label_pc_10002d10

dec_label_pc_10002d10:                            ; preds = %dec_label_pc_10002ce2, %dec_label_pc_10002cf0
  %v0_10002d11 = phi i32 [ %v1_10002ce6, %dec_label_pc_10002ce2 ], [ %tmp9, %dec_label_pc_10002cf0 ]
  ret i32 %v0_10002d11

; uselistorder directives
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10002d10, { 1, 0 }
}

define i32 @function_10002d12(i32 %arg1, i16 %arg2) local_unnamed_addr {
dec_label_pc_10002d12:
  store i32 %arg1, i32* @eax, align 4
  %v1_10002d19 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10002d19, i32* @eax, align 4
  %v1_10002d21 = mul i32 %v1_10002d19, 65536
  %v2_10002d21 = sdiv i32 %v1_10002d21, 65536
  store i32 %v2_10002d21, i32* @ecx, align 4
  %v1_10002d21.off = or i32 %v1_10002d21, 65535
  %tmp = icmp ult i32 %v1_10002d21.off, 131071
  br i1 %tmp, label %dec_label_pc_10002d36, label %dec_label_pc_10002d28

dec_label_pc_10002d28:                            ; preds = %dec_label_pc_10002d12
  store i32 %arg1, i32* @edx, align 4
  %v1_10002d2c = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10002d4f

dec_label_pc_10002d36:                            ; preds = %dec_label_pc_10002d12
  store i32 %arg1, i32* @eax, align 4
  %v4_10002d39 = zext i16 %arg2 to i32
  store i32 %v4_10002d39, i32* @ecx, align 4
  %v3_10002d3d = add i32 %arg1, 4
  %v4_10002d3d = inttoptr i32 %v3_10002d3d to i16*
  store i16 %arg2, i16* %v4_10002d3d, align 2
  store i32 %arg1, i32* @edx, align 4
  %v3_10002d47 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_10002d4f

dec_label_pc_10002d4f:                            ; preds = %dec_label_pc_10002d28, %dec_label_pc_10002d36
  %v0_10002d50 = phi i32 [ %v3_10002d47, %dec_label_pc_10002d36 ], [ %v1_10002d2c, %dec_label_pc_10002d28 ]
  ret i32 %v0_10002d50

; uselistorder directives
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 7, 6, 0, 3, 4, 5, 2, 1 }
  uselistorder label %dec_label_pc_10002d4f, { 1, 0 }
}

define i32 @SetTimeoutWait(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10002d58 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10002d58, i32* @eax, align 4
  %v1_10002d60 = mul i32 %v1_10002d58, 65536
  %v1_10002d60.off = or i32 %v1_10002d60, 65535
  %tmp = icmp ult i32 %v1_10002d60.off, 131071
  br i1 %tmp, label %dec_label_pc_10002d75, label %dec_label_pc_10002d67

dec_label_pc_10002d67:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v1_10002d6b = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10002d84

dec_label_pc_10002d75:                            ; preds = %entry
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v2_10002d7b = add i32 %arg1, 180
  %v3_10002d7b = inttoptr i32 %v2_10002d7b to i32*
  store i32 %arg2, i32* %v3_10002d7b, align 4
  %v11_10002d81 = load i32, i32* %eax.global-to-local, align 4
  %v12_10002d81 = and i32 %v11_10002d81, -65536
  br label %dec_label_pc_10002d84

dec_label_pc_10002d84:                            ; preds = %dec_label_pc_10002d67, %dec_label_pc_10002d75
  %storemerge = phi i32 [ %v12_10002d81, %dec_label_pc_10002d75 ], [ %v1_10002d6b, %dec_label_pc_10002d67 ]
  %v0_10002d85 = phi i32 [ %v12_10002d81, %dec_label_pc_10002d75 ], [ %v1_10002d6b, %dec_label_pc_10002d67 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_10002d85

; uselistorder directives
  uselistorder i32 %arg1, { 3, 2, 4, 5, 1, 0 }
  uselistorder label %dec_label_pc_10002d84, { 1, 0 }
}

define i32 @RdTimeoutWait(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10002d8d = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10002d8d, i32* @eax, align 4
  %v1_10002d95 = mul i32 %v1_10002d8d, 65536
  %v1_10002d95.off = or i32 %v1_10002d95, 65535
  %tmp = icmp ult i32 %v1_10002d95.off, 131071
  br i1 %tmp, label %dec_label_pc_10002da1, label %dec_label_pc_10002d9c

dec_label_pc_10002d9c:                            ; preds = %entry
  br label %dec_label_pc_10002db8

dec_label_pc_10002da1:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10002da7 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10002db2 = add i32 %arg1, 180
  %v2_10002db2 = inttoptr i32 %v1_10002db2 to i32*
  %v3_10002db2 = load i32, i32* %v2_10002db2, align 4
  br label %dec_label_pc_10002db8

dec_label_pc_10002db8:                            ; preds = %dec_label_pc_10002d9c, %dec_label_pc_10002da1
  %storemerge = phi i32 [ -1, %dec_label_pc_10002d9c ], [ %v3_10002db2, %dec_label_pc_10002da1 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10002db8, { 1, 0 }
}

define i32 @SetErrorStatus(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10002dc8 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10002dc8, i32* @eax, align 4
  %v1_10002dd0 = mul i32 %v1_10002dc8, 65536
  %v1_10002dd0.off = or i32 %v1_10002dd0, 65535
  %tmp = icmp ult i32 %v1_10002dd0.off, 131071
  br i1 %tmp, label %dec_label_pc_10002de5, label %dec_label_pc_10002dd7

dec_label_pc_10002dd7:                            ; preds = %entry
  %v1_10002ddb = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10002df5

dec_label_pc_10002de5:                            ; preds = %entry
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_10002de8 = sext i16 %arg2 to i32
  %v2_10002deb = add i32 %arg1, 192
  %v3_10002deb = inttoptr i32 %v2_10002deb to i32*
  store i32 %v4_10002de8, i32* %v3_10002deb, align 4
  %v6_10002df1 = load i32, i32* %eax.global-to-local, align 4
  %v7_10002df1 = and i32 %v6_10002df1, -65536
  %v8_10002df1 = or i32 %v7_10002df1, %v4_10002de8
  br label %dec_label_pc_10002df5

dec_label_pc_10002df5:                            ; preds = %dec_label_pc_10002dd7, %dec_label_pc_10002de5
  %storemerge = phi i32 [ %v8_10002df1, %dec_label_pc_10002de5 ], [ %v1_10002ddb, %dec_label_pc_10002dd7 ]
  %v0_10002df8 = phi i32 [ %v8_10002df1, %dec_label_pc_10002de5 ], [ %v1_10002ddb, %dec_label_pc_10002dd7 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_10002df8

; uselistorder directives
  uselistorder i32 %arg1, { 3, 2, 4, 1, 0 }
  uselistorder label %dec_label_pc_10002df5, { 1, 0 }
}

define i32 @function_10002df9(i32 %arg1, double %arg2) local_unnamed_addr {
dec_label_pc_10002df9:
  %stack_var_-4 = alloca i32, align 4
  %v0_10002df9 = load i32, i32* @ebp, align 4
  store i32 %v0_10002df9, i32* %stack_var_-4, align 4
  %v4_10002df9 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10002df9, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10002e03 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10002e0b = mul i32 %v1_10002e03, 65536
  %v2_10002e0b = sdiv i32 %v1_10002e0b, 65536
  store i32 %v2_10002e0b, i32* @ecx, align 4
  %v1_10002e0b.off = or i32 %v1_10002e0b, 65535
  %tmp = icmp ult i32 %v1_10002e0b.off, 131071
  br i1 %tmp, label %dec_label_pc_10002e1a, label %dec_label_pc_10002e12

dec_label_pc_10002e12:                            ; preds = %dec_label_pc_10002df9
  br label %dec_label_pc_10002ea2

dec_label_pc_10002e1a:                            ; preds = %dec_label_pc_10002df9
  store i32 %arg1, i32* @edx, align 4
  %v1_10002e1d = add i32 %arg1, 2
  %v2_10002e1d = inttoptr i32 %v1_10002e1d to i16*
  %v3_10002e1d = load i16, i16* %v2_10002e1d, align 2
  %v4_10002e1d = sext i16 %v3_10002e1d to i32
  store i32 %v4_10002e1d, i32* @eax, align 4
  %v6_10002e24 = sub nsw i32 767, %v4_10002e1d
  %v7_10002e24 = and i32 %v6_10002e24, %v4_10002e1d
  %v8_10002e24 = icmp slt i32 %v7_10002e24, 0
  %v9_10002e24 = icmp eq i16 %v3_10002e1d, 768
  %v10_10002e24 = icmp slt i16 %v3_10002e1d, 768
  %v3_10002e2b = icmp eq i1 %v10_10002e24, %v8_10002e24
  %v4_10002e2b = icmp eq i1 %v9_10002e24, false
  %v5_10002e2b = and i1 %v4_10002e2b, %v3_10002e2b
  br i1 %v5_10002e2b, label %dec_label_pc_10002e4a, label %dec_label_pc_10002e2d

dec_label_pc_10002e2d:                            ; preds = %dec_label_pc_10002e1a
  br i1 %v9_10002e24, label %dec_label_pc_10002e5f, label %dec_label_pc_10002e36

dec_label_pc_10002e36:                            ; preds = %dec_label_pc_10002e2d
  %v9_10002e36 = icmp eq i16 %v3_10002e1d, 256
  br i1 %v9_10002e36, label %dec_label_pc_10002e55, label %dec_label_pc_10002e3f

dec_label_pc_10002e3f:                            ; preds = %dec_label_pc_10002e36
  %v9_10002e3f = icmp eq i16 %v3_10002e1d, 512
  br i1 %v9_10002e3f, label %dec_label_pc_10002e55, label %dec_label_pc_10002e9f

dec_label_pc_10002e4a:                            ; preds = %dec_label_pc_10002e1a
  %v9_10002e4a = icmp eq i16 %v3_10002e1d, 1024
  br i1 %v9_10002e4a, label %dec_label_pc_10002e55, label %dec_label_pc_10002e9f

dec_label_pc_10002e55:                            ; preds = %dec_label_pc_10002e4a, %dec_label_pc_10002e3f, %dec_label_pc_10002e36
  %v5_10002e55 = load i3, i3* @fpu_stat_TOP, align 1
  %v6_10002e55 = add i3 %v5_10002e55, -1
  store i3 %v6_10002e55, i3* @fpu_stat_TOP, align 1
  %v1_10002e58 = call i32 @__ftol(i32 %v4_10002e1d)
  br label %dec_label_pc_10002ea2

dec_label_pc_10002e5f:                            ; preds = %dec_label_pc_10002e2d
  store i32 %arg1, i32* @ecx, align 4
  %v2_10002e65 = call i32 @RdEngOption(i32 %arg1, i32 0)
  %v1_10002e6d = mul i32 %v2_10002e65, 65536
  %v2_10002e6d = sdiv i32 %v1_10002e6d, 65536
  store i32 %v2_10002e6d, i32* @edx, align 4
  %v1_10002e6d.off = or i32 %v1_10002e6d, 65535
  %tmp11 = icmp ult i32 %v1_10002e6d.off, 131071
  %. = select i1 %tmp11, i32 1073741824, i32 1075314688
  %v5_10002e92 = load i3, i3* @fpu_stat_TOP, align 1
  %v6_10002e92 = add i3 %v5_10002e92, -1
  store i3 %v6_10002e92, i3* @fpu_stat_TOP, align 1
  %v1_10002e98 = call i32 @__ftol(i32 %.)
  br label %dec_label_pc_10002ea2

dec_label_pc_10002e9f:                            ; preds = %dec_label_pc_10002e4a, %dec_label_pc_10002e3f
  br label %dec_label_pc_10002ea2

dec_label_pc_10002ea2:                            ; preds = %dec_label_pc_10002e5f, %dec_label_pc_10002e55, %dec_label_pc_10002e12, %dec_label_pc_10002e9f
  %v0_10002ea5 = phi i32 [ %v1_10002e98, %dec_label_pc_10002e5f ], [ %v1_10002e58, %dec_label_pc_10002e55 ], [ -1, %dec_label_pc_10002e12 ], [ -1, %dec_label_pc_10002e9f ]
  %v2_10002ea4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10002ea4, i32* @ebp, align 4
  ret i32 %v0_10002ea5

; uselistorder directives
  uselistorder i32 %v4_10002e1d, { 1, 0, 2, 3 }
  uselistorder i16 %v3_10002e1d, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10002ea2, { 3, 0, 1, 2 }
}

define i32 @function_10002ea6(i32 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_10002ea6:
  %stack_var_-4 = alloca i32, align 4
  %v0_10002ea6 = load i32, i32* @ebp, align 4
  store i32 %v0_10002ea6, i32* %stack_var_-4, align 4
  %v4_10002ea6 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10002ea6, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10002eb0 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10002eb8 = mul i32 %v1_10002eb0, 65536
  %v2_10002eb8 = sdiv i32 %v1_10002eb8, 65536
  store i32 %v2_10002eb8, i32* @ecx, align 4
  %v1_10002eb8.off = or i32 %v1_10002eb8, 65535
  %tmp = icmp ult i32 %v1_10002eb8.off, 131071
  br i1 %tmp, label %dec_label_pc_10002eca, label %dec_label_pc_10002ebf

dec_label_pc_10002ebf:                            ; preds = %dec_label_pc_10002ea6
  %v2_10002ebf = load i3, i3* @fpu_stat_TOP, align 1
  %v3_10002ebf = add i3 %v2_10002ebf, -1
  store x86_fp80 0xKBFFF8000000000000000, x86_fp80* @st0, align 4
  store i3 %v3_10002ebf, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_10002f65

dec_label_pc_10002eca:                            ; preds = %dec_label_pc_10002ea6
  %v1_10002ecd = add i32 %arg1, 2
  %v2_10002ecd = inttoptr i32 %v1_10002ecd to i16*
  %v3_10002ecd = load i16, i16* %v2_10002ecd, align 2
  %v4_10002ecd = sext i16 %v3_10002ecd to i32
  store i32 %v4_10002ecd, i32* @eax, align 4
  %v6_10002ed4 = sub nsw i32 767, %v4_10002ecd
  %v7_10002ed4 = and i32 %v6_10002ed4, %v4_10002ecd
  %v8_10002ed4 = icmp slt i32 %v7_10002ed4, 0
  %v9_10002ed4 = icmp eq i16 %v3_10002ecd, 768
  %v10_10002ed4 = icmp slt i16 %v3_10002ecd, 768
  %v3_10002edb = icmp eq i1 %v10_10002ed4, %v8_10002ed4
  %v4_10002edb = icmp eq i1 %v9_10002ed4, false
  %v5_10002edb = and i1 %v4_10002edb, %v3_10002edb
  br i1 %v5_10002edb, label %dec_label_pc_10002efa, label %dec_label_pc_10002edd

dec_label_pc_10002edd:                            ; preds = %dec_label_pc_10002eca
  br i1 %v9_10002ed4, label %dec_label_pc_10002f17, label %dec_label_pc_10002ee6

dec_label_pc_10002ee6:                            ; preds = %dec_label_pc_10002edd
  %v9_10002ee6 = icmp eq i16 %v3_10002ecd, 256
  br i1 %v9_10002ee6, label %dec_label_pc_10002f05, label %dec_label_pc_10002eef

dec_label_pc_10002eef:                            ; preds = %dec_label_pc_10002ee6
  %v9_10002eef = icmp eq i16 %v3_10002ecd, 512
  br i1 %v9_10002eef, label %dec_label_pc_10002f05, label %dec_label_pc_10002f5f

dec_label_pc_10002efa:                            ; preds = %dec_label_pc_10002eca
  %v9_10002efa = icmp eq i16 %v3_10002ecd, 1024
  br i1 %v9_10002efa, label %dec_label_pc_10002f05, label %dec_label_pc_10002f5f

dec_label_pc_10002f05:                            ; preds = %dec_label_pc_10002efa, %dec_label_pc_10002eef, %dec_label_pc_10002ee6
  %v4_10002f05 = trunc i64 %arg2 to i32
  store i32 %v4_10002f05, i32* @ecx, align 4
  %v6_10002f12 = sitofp i32 %v4_10002f05 to x86_fp80
  %v7_10002f12 = load i3, i3* @fpu_stat_TOP, align 1
  %v8_10002f12 = add i3 %v7_10002f12, -1
  store x86_fp80 %v6_10002f12, x86_fp80* @st0, align 4
  store i3 %v8_10002f12, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_10002f65

dec_label_pc_10002f17:                            ; preds = %dec_label_pc_10002edd
  %v2_10002f1d = call i32 @RdEngOption(i32 %arg1, i32 0)
  %v1_10002f25 = mul i32 %v2_10002f1d, 65536
  %v2_10002f25 = sdiv i32 %v1_10002f25, 65536
  %v4_10002f4a = trunc i64 %arg2 to i32
  store i32 %v4_10002f4a, i32* @ecx, align 4
  %v6_10002f57 = sitofp i32 %v4_10002f4a to x86_fp80
  %v7_10002f57 = load i3, i3* @fpu_stat_TOP, align 1
  %v8_10002f57 = add i3 %v7_10002f57, -1
  store i3 %v8_10002f57, i3* @fpu_stat_TOP, align 1
  %v11_10002f5a = fmul x86_fp80 %v6_10002f57, 0xK00000000000000000000
  store x86_fp80 %v11_10002f5a, x86_fp80* @st0, align 4
  br label %dec_label_pc_10002f65

dec_label_pc_10002f5f:                            ; preds = %dec_label_pc_10002efa, %dec_label_pc_10002eef
  %v2_10002f5f = load i3, i3* @fpu_stat_TOP, align 1
  %v3_10002f5f = add i3 %v2_10002f5f, -1
  store x86_fp80 0xKBFFF8000000000000000, x86_fp80* @st0, align 4
  store i3 %v3_10002f5f, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_10002f65

dec_label_pc_10002f65:                            ; preds = %dec_label_pc_10002f17, %dec_label_pc_10002f05, %dec_label_pc_10002ebf, %dec_label_pc_10002f5f
  %v0_10002f68 = phi i32 [ %v2_10002f25, %dec_label_pc_10002f17 ], [ %v4_10002ecd, %dec_label_pc_10002f05 ], [ %v1_10002eb0, %dec_label_pc_10002ebf ], [ %v4_10002ecd, %dec_label_pc_10002f5f ]
  %v2_10002f67 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10002f67, i32* @ebp, align 4
  ret i32 %v0_10002f68

; uselistorder directives
  uselistorder i32 %v4_10002ecd, { 1, 2, 0, 3, 4 }
  uselistorder i16 %v3_10002ecd, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v1_10002eb0, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10002f65, { 3, 0, 1, 2 }
}

define i32 @SetEngOption(i32 %arg1, i32 %arg2, i16 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10002f71 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10002f71, i32* @eax, align 4
  %v1_10002f79 = mul i32 %v1_10002f71, 65536
  %v1_10002f79.off = or i32 %v1_10002f79, 65535
  %tmp = icmp ult i32 %v1_10002f79.off, 131071
  br i1 %tmp, label %dec_label_pc_10002f91, label %dec_label_pc_10002f80

dec_label_pc_10002f80:                            ; preds = %entry
  %v1_10002f84 = call i32 @GetFuncStatusCode(i32 %arg1)
  store i32 %v1_10002f84, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000309f

dec_label_pc_10002f91:                            ; preds = %entry
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v4_10002f97 = icmp eq i32 %arg2, 0
  br i1 %v4_10002f97, label %dec_label_pc_10002fb2, label %dec_label_pc_10002f9d

dec_label_pc_10002f9d:                            ; preds = %dec_label_pc_10002f91
  %v12_10002f9d = icmp eq i32 %arg2, 1
  br i1 %v12_10002f9d, label %dec_label_pc_10003000, label %dec_label_pc_10002fa3

dec_label_pc_10002fa3:                            ; preds = %dec_label_pc_10002f9d
  %v12_10002fa3 = icmp eq i32 %arg2, 2
  br i1 %v12_10002fa3, label %dec_label_pc_1000304c, label %dec_label_pc_10003096

dec_label_pc_10002fb2:                            ; preds = %dec_label_pc_10002f91
  %v2_10002fb6 = icmp ult i16 %arg3, 2
  br i1 %v2_10002fb6, label %dec_label_pc_10002fc9, label %dec_label_pc_10002fc0

dec_label_pc_10002fc0:                            ; preds = %dec_label_pc_10002fb2
  store i32 65534, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000309f

dec_label_pc_10002fc9:                            ; preds = %dec_label_pc_10002fb2
  %v1_10002fcc = add i32 %arg1, 200
  %v2_10002fcc = inttoptr i32 %v1_10002fcc to i32*
  %v3_10002fcc = load i32, i32* %v2_10002fcc, align 4
  %v11_10002fd2 = and i32 %v3_10002fcc, -2
  store i32 %v11_10002fd2, i32* %v2_10002fcc, align 4
  %v5_10002fe1 = icmp ne i16 %arg3, 0
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_10002fea = load i32, i32* %v2_10002fcc, align 4
  %v2_10002ff0 = select i1 %v5_10002fe1, i32 -1, i32 %v3_10002fea
  store i32 %v2_10002ff0, i32* %v2_10002fcc, align 4
  br label %dec_label_pc_1000309c

dec_label_pc_10003000:                            ; preds = %dec_label_pc_10002f9d
  %v4_100030003 = zext i16 %arg3 to i32
  %v1_10003004 = and i32 %v4_100030003, 65534
  %v2_10003004 = icmp eq i32 %v1_10003004, 0
  store i32 %v1_10003004, i32* %eax.global-to-local, align 4
  br i1 %v2_10003004, label %dec_label_pc_10003016, label %dec_label_pc_1000300d

dec_label_pc_1000300d:                            ; preds = %dec_label_pc_10003000
  store i32 65534, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000309f

dec_label_pc_10003016:                            ; preds = %dec_label_pc_10003000
  %v1_10003019 = add i32 %arg1, 200
  %v2_10003019 = inttoptr i32 %v1_10003019 to i32*
  %v3_10003019 = load i32, i32* %v2_10003019, align 4
  %v1_1000301f = and i32 %v3_10003019, -3
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %v1_1000301f, i32* %v2_10003019, align 4
  store i32 %v1_1000301f, i32* %eax.global-to-local, align 4
  store i32 %v1_1000301f, i32* %v2_10003019, align 4
  br label %dec_label_pc_1000309c

dec_label_pc_1000304c:                            ; preds = %dec_label_pc_10002fa3
  %v2_10003050 = icmp ult i16 %arg3, 2
  br i1 %v2_10003050, label %dec_label_pc_10003060, label %dec_label_pc_1000305a

dec_label_pc_1000305a:                            ; preds = %dec_label_pc_1000304c
  %v1_1000305a = and i32 %arg2, -65536
  %v2_1000305a = or i32 %v1_1000305a, 65534
  store i32 %v2_1000305a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000309f

dec_label_pc_10003060:                            ; preds = %dec_label_pc_1000304c
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10003063 = add i32 %arg1, 200
  %v2_10003063 = inttoptr i32 %v1_10003063 to i32*
  %v3_10003063 = load i32, i32* %v2_10003063, align 4
  %v1_10003069 = and i32 %v3_10003063, -5
  store i32 %v1_10003069, i32* %v2_10003063, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_10003083 = load i32, i32* %v2_10003063, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %v3_10003083, i32* %v2_10003063, align 4
  br label %dec_label_pc_1000309c

dec_label_pc_10003096:                            ; preds = %dec_label_pc_10002fa3
  %v1_10003096 = and i32 %arg2, -65536
  %v2_10003096 = or i32 %v1_10003096, 65534
  store i32 %v2_10003096, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000309f

dec_label_pc_1000309c:                            ; preds = %dec_label_pc_10003060, %dec_label_pc_10003016, %dec_label_pc_10002fc9
  %v11_1000309c = load i32, i32* %eax.global-to-local, align 4
  %v12_1000309c = and i32 %v11_1000309c, -65536
  store i32 %v12_1000309c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000309f

dec_label_pc_1000309f:                            ; preds = %dec_label_pc_10003096, %dec_label_pc_1000305a, %dec_label_pc_1000300d, %dec_label_pc_10002fc0, %dec_label_pc_10002f80, %dec_label_pc_1000309c
  %v0_100030a2 = phi i32 [ %v2_10003096, %dec_label_pc_10003096 ], [ %v2_1000305a, %dec_label_pc_1000305a ], [ 65534, %dec_label_pc_1000300d ], [ 65534, %dec_label_pc_10002fc0 ], [ %v1_10002f84, %dec_label_pc_10002f80 ], [ %v12_1000309c, %dec_label_pc_1000309c ]
  ret i32 %v0_100030a2

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14 }
  uselistorder i16 %arg3, { 1, 2, 3, 0 }
  uselistorder i32 %arg2, { 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %arg1, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000309f, { 5, 0, 1, 2, 3, 4 }
}

define i32 @RdEngOption(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_100030a7 = icmp eq i32 %arg1, 0
  %v1_100030ab = icmp eq i1 %v4_100030a7, false
  br i1 %v1_100030ab, label %dec_label_pc_100030b3, label %dec_label_pc_100030ad

dec_label_pc_100030ad:                            ; preds = %entry
  %v0_100030ad = load i32, i32* @eax, align 4
  %v1_100030ad = and i32 %v0_100030ad, -65536
  %v2_100030ad = or i32 %v1_100030ad, 65526
  br label %dec_label_pc_1000311d

dec_label_pc_100030b3:                            ; preds = %entry
  store i32 %arg1, i32* @eax, align 4
  %v1_100030b6 = add i32 %arg1, 204
  %v2_100030b6 = inttoptr i32 %v1_100030b6 to i16*
  store i16 0, i16* %v2_100030b6, align 2
  store i32 %arg2, i32* @ecx, align 4
  %v4_100030c5 = icmp eq i32 %arg2, 0
  br i1 %v4_100030c5, label %dec_label_pc_100030d9, label %dec_label_pc_100030cb

dec_label_pc_100030cb:                            ; preds = %dec_label_pc_100030b3
  %v12_100030cb = icmp eq i32 %arg2, 1
  br i1 %v12_100030cb, label %dec_label_pc_100030e7, label %dec_label_pc_100030d1

dec_label_pc_100030d1:                            ; preds = %dec_label_pc_100030cb
  %v12_100030d1 = icmp eq i32 %arg2, 2
  br i1 %v12_100030d1, label %dec_label_pc_100030fb, label %dec_label_pc_1000310f

dec_label_pc_100030d9:                            ; preds = %dec_label_pc_100030b3
  store i32 %arg1, i32* @edx, align 4
  %v1_100030dc = add i32 %arg1, 200
  %v2_100030dc = inttoptr i32 %v1_100030dc to i32*
  %v3_100030dc = load i32, i32* %v2_100030dc, align 4
  %v1_100030e2 = and i32 %v3_100030dc, 1
  br label %dec_label_pc_1000311d

dec_label_pc_100030e7:                            ; preds = %dec_label_pc_100030cb
  %v1_100030ea = add i32 %arg1, 200
  %v2_100030ea = inttoptr i32 %v1_100030ea to i32*
  %v3_100030ea = load i32, i32* %v2_100030ea, align 4
  %v1_100030f0 = and i32 %v3_100030ea, 2
  %v5_100030f3 = icmp ne i32 %v1_100030f0, 0
  %v1_100030f7 = sext i1 %v5_100030f3 to i32
  br label %dec_label_pc_1000311d

dec_label_pc_100030fb:                            ; preds = %dec_label_pc_100030d1
  store i32 %arg1, i32* @ecx, align 4
  %v1_100030fe = add i32 %arg1, 200
  %v2_100030fe = inttoptr i32 %v1_100030fe to i32*
  %v3_100030fe = load i32, i32* %v2_100030fe, align 4
  %v1_10003104 = and i32 %v3_100030fe, 4
  %v5_10003107 = icmp ne i32 %v1_10003104, 0
  %v1_1000310b = sext i1 %v5_10003107 to i32
  br label %dec_label_pc_1000311d

dec_label_pc_1000310f:                            ; preds = %dec_label_pc_100030d1
  store i32 %arg1, i32* @edx, align 4
  %v3_10003115 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -1)
  br label %dec_label_pc_1000311d

dec_label_pc_1000311d:                            ; preds = %dec_label_pc_100030fb, %dec_label_pc_100030e7, %dec_label_pc_100030d9, %dec_label_pc_100030ad, %dec_label_pc_1000310f
  %v0_10003120 = phi i32 [ %v1_1000310b, %dec_label_pc_100030fb ], [ %v1_100030f7, %dec_label_pc_100030e7 ], [ %v1_100030e2, %dec_label_pc_100030d9 ], [ %v2_100030ad, %dec_label_pc_100030ad ], [ %v3_10003115, %dec_label_pc_1000310f ]
  ret i32 %v0_10003120

; uselistorder directives
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder i32 %arg1, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000311d, { 4, 0, 1, 2, 3 }
}

define i32 @SetIFStepAttn(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10003128 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10003128, i32* @eax, align 4
  %v1_10003130 = mul i32 %v1_10003128, 65536
  %v1_10003130.off = or i32 %v1_10003130, 65535
  %tmp = icmp ult i32 %v1_10003130.off, 131071
  br i1 %tmp, label %dec_label_pc_10003145, label %dec_label_pc_10003137

dec_label_pc_10003137:                            ; preds = %entry
  %v1_1000313b = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100031a9

dec_label_pc_10003145:                            ; preds = %entry
  %v1_10003149 = call i32 @RdEngineModel(i32 %arg1)
  store i32 %v1_10003149, i32* @eax, align 4
  %v1_10003151 = mul i32 %v1_10003149, 65536
  %tmp7 = icmp eq i32 %v1_10003151, 50331648
  br i1 %tmp7, label %dec_label_pc_1000316c, label %dec_label_pc_1000315c

dec_label_pc_1000315c:                            ; preds = %dec_label_pc_10003145
  store i32 %arg1, i32* @edx, align 4
  %v3_10003162 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -1)
  br label %dec_label_pc_100031a9

dec_label_pc_1000316c:                            ; preds = %dec_label_pc_10003145
  %v4_1000316c = sext i16 %arg2 to i32
  store i32 %v4_1000316c, i32* @eax, align 4
  %v3_10003170 = icmp slt i16 %arg2, 0
  %v2_10003172 = icmp eq i1 %v3_10003170, false
  br i1 %v2_10003172, label %dec_label_pc_10003174, label %dec_label_pc_1000317d

dec_label_pc_10003174:                            ; preds = %dec_label_pc_1000316c
  %v8_1000317b = icmp sgt i16 %arg2, 31
  br i1 %v8_1000317b, label %dec_label_pc_1000317d, label %dec_label_pc_1000318d

dec_label_pc_1000317d:                            ; preds = %dec_label_pc_10003174, %dec_label_pc_1000316c
  store i32 %arg1, i32* @edx, align 4
  %v3_10003183 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -3)
  br label %dec_label_pc_100031a9

dec_label_pc_1000318d:                            ; preds = %dec_label_pc_10003174
  store i32 %arg1, i32* @eax, align 4
  %v3_10003194 = add i32 %arg1, 186
  %v4_10003194 = inttoptr i32 %v3_10003194 to i16*
  store i16 %arg2, i16* %v4_10003194, align 2
  store i32 %arg1, i32* @edx, align 4
  %v3_100031a1 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_100031a9

dec_label_pc_100031a9:                            ; preds = %dec_label_pc_1000317d, %dec_label_pc_1000315c, %dec_label_pc_10003137, %dec_label_pc_1000318d
  %v0_100031aa = phi i32 [ %v3_10003183, %dec_label_pc_1000317d ], [ %v3_10003162, %dec_label_pc_1000315c ], [ %v1_1000313b, %dec_label_pc_10003137 ], [ %v3_100031a1, %dec_label_pc_1000318d ]
  ret i32 %v0_100031aa

; uselistorder directives
  uselistorder i16 %arg2, { 3, 0, 2, 1 }
  uselistorder i32 %arg1, { 11, 10, 0, 9, 8, 7, 6, 5, 3, 4, 2, 1 }
  uselistorder label %dec_label_pc_100031a9, { 3, 0, 1, 2 }
}

define i32 @function_100031ab(i32 %arg1) local_unnamed_addr {
dec_label_pc_100031ab:
  store i32 %arg1, i32* @eax, align 4
  %v1_100031b2 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_100031ba = mul i32 %v1_100031b2, 65536
  %v2_100031ba = sdiv i32 %v1_100031ba, 65536
  store i32 %v2_100031ba, i32* @ecx, align 4
  %v1_100031ba.off = or i32 %v1_100031ba, 65535
  %tmp = icmp ult i32 %v1_100031ba.off, 131071
  br i1 %tmp, label %dec_label_pc_100031c7, label %dec_label_pc_100031c1

dec_label_pc_100031c1:                            ; preds = %dec_label_pc_100031ab
  %v2_100031c1 = or i32 %v1_100031b2, 65535
  br label %dec_label_pc_10003209

dec_label_pc_100031c7:                            ; preds = %dec_label_pc_100031ab
  store i32 %arg1, i32* @edx, align 4
  %v1_100031cb = call i32 @RdEngineModel(i32 %arg1)
  %v1_100031d3 = mul i32 %v1_100031cb, 65536
  %v2_100031d3 = sdiv i32 %v1_100031d3, 65536
  store i32 %v2_100031d3, i32* @eax, align 4
  %tmp6 = icmp eq i32 %v1_100031d3, 50331648
  br i1 %tmp6, label %dec_label_pc_100031f1, label %dec_label_pc_100031dd

dec_label_pc_100031dd:                            ; preds = %dec_label_pc_100031c7
  store i32 %arg1, i32* @ecx, align 4
  %v3_100031e3 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -1)
  %v2_100031eb = or i32 %v3_100031e3, 65535
  br label %dec_label_pc_10003209

dec_label_pc_100031f1:                            ; preds = %dec_label_pc_100031c7
  store i32 %arg1, i32* @edx, align 4
  %v3_100031f7 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10003202 = add i32 %arg1, 186
  %v2_10003202 = inttoptr i32 %v1_10003202 to i16*
  %v3_10003202 = load i16, i16* %v2_10003202, align 2
  %v4_10003202 = zext i16 %v3_10003202 to i32
  %v6_10003202 = and i32 %arg1, -65536
  %v7_10003202 = or i32 %v4_10003202, %v6_10003202
  br label %dec_label_pc_10003209

dec_label_pc_10003209:                            ; preds = %dec_label_pc_100031dd, %dec_label_pc_100031c1, %dec_label_pc_100031f1
  %v0_1000320a = phi i32 [ %v2_100031eb, %dec_label_pc_100031dd ], [ %v2_100031c1, %dec_label_pc_100031c1 ], [ %v7_10003202, %dec_label_pc_100031f1 ]
  ret i32 %v0_1000320a

; uselistorder directives
  uselistorder i32 %v1_100031b2, { 1, 0 }
  uselistorder i32 186, { 1, 0 }
  uselistorder i32 %arg1, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10003209, { 2, 0, 1 }
}

define i32 @SetTrigDelay(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10003212 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10003212, i32* @eax, align 4
  %v1_1000321a = mul i32 %v1_10003212, 65536
  %v1_1000321a.off = or i32 %v1_1000321a, 65535
  %tmp = icmp ult i32 %v1_1000321a.off, 131071
  br i1 %tmp, label %dec_label_pc_1000322f, label %dec_label_pc_10003221

dec_label_pc_10003221:                            ; preds = %entry
  %v1_10003225 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10003246

dec_label_pc_1000322f:                            ; preds = %entry
  store i32 %arg1, i32* @eax, align 4
  %v2_10003235 = add i32 %arg1, 112
  %v3_10003235 = inttoptr i32 %v2_10003235 to i32*
  store i32 %arg2, i32* %v3_10003235, align 4
  store i32 %arg1, i32* @edx, align 4
  %v3_1000323e = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_10003246

dec_label_pc_10003246:                            ; preds = %dec_label_pc_10003221, %dec_label_pc_1000322f
  %v0_10003247 = phi i32 [ %v3_1000323e, %dec_label_pc_1000322f ], [ %v1_10003225, %dec_label_pc_10003221 ]
  ret i32 %v0_10003247

; uselistorder directives
  uselistorder i32 %arg1, { 6, 5, 3, 2, 4, 1, 0 }
  uselistorder label %dec_label_pc_10003246, { 1, 0 }
}

define i32 @RdTrigDelay(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000324f = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000324f, i32* @eax, align 4
  %v1_10003257 = mul i32 %v1_1000324f, 65536
  %v1_10003257.off = or i32 %v1_10003257, 65535
  %tmp = icmp ult i32 %v1_10003257.off, 131071
  br i1 %tmp, label %dec_label_pc_10003263, label %dec_label_pc_1000325e

dec_label_pc_1000325e:                            ; preds = %entry
  br label %dec_label_pc_10003277

dec_label_pc_10003263:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10003269 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10003274 = add i32 %arg1, 112
  %v2_10003274 = inttoptr i32 %v1_10003274 to i32*
  %v3_10003274 = load i32, i32* %v2_10003274, align 4
  br label %dec_label_pc_10003277

dec_label_pc_10003277:                            ; preds = %dec_label_pc_1000325e, %dec_label_pc_10003263
  %storemerge = phi i32 [ -1, %dec_label_pc_1000325e ], [ %v3_10003274, %dec_label_pc_10003263 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10003277, { 1, 0 }
}

define i32 @function_10003280(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10003280:
  %v1_1000328c = call i32 @function_1000d570(i32 ptrtoint (i32* @global_var_1001b3e8.20 to i32))
  store i32 %v1_1000328c, i32* @eax, align 4
  %v3_1000329d = call i32 @function_1000d580(i8* bitcast (i32* @global_var_1001b3e8.20 to i8*), i32 %arg2)
  ret i32 ptrtoint (i32* @global_var_1001b3e8.20 to i32)
}

define i32 @function_100032ac(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100032ac:
  %v0_100032af = call i32 @function_100035dd()
  %v1_100032b4 = icmp eq i32 %v0_100032af, 0
  br i1 %v1_100032b4, label %dec_label_pc_100032be, label %dec_label_pc_100032b8

dec_label_pc_100032b8:                            ; preds = %dec_label_pc_100032ac
  %v1_100032b8 = and i32 %v0_100032af, -65536
  %v2_100032b8 = or i32 %v1_100032b8, 65516
  br label %dec_label_pc_10003327

dec_label_pc_100032be:                            ; preds = %dec_label_pc_100032ac
  %v5_100032c9 = inttoptr i32 %arg2 to i8*
  %v6_100032c9 = call i32 @function_10014e60(i8* %v5_100032c9, i32 ptrtoint ([4 x i8]* @global_var_10018030.21 to i32), i32 3)
  store i32 %v6_100032c9, i32* @eax, align 4
  %v1_100032d1 = icmp eq i32 %v6_100032c9, 0
  br i1 %v1_100032d1, label %dec_label_pc_100032db, label %dec_label_pc_100032d5

dec_label_pc_100032d5:                            ; preds = %dec_label_pc_100032be
  %v1_100032d5 = and i32 %v6_100032c9, -65536
  %v2_100032d5 = or i32 %v1_100032d5, 65519
  br label %dec_label_pc_10003327

dec_label_pc_100032db:                            ; preds = %dec_label_pc_100032be
  store i32 %arg2, i32* @ecx, align 4
  %v3_100032df = call i32 @function_10003613(i8* %v5_100032c9)
  %v4_100032ec = trunc i32 %v3_100032df to i16
  %v5_100032ec = call i32 @SetPortNum(i32 %arg1, i16 %v4_100032ec)
  %v1_100032f4 = mul i32 %v5_100032ec, 65536
  %v1_100032f4.off = or i32 %v1_100032f4, 65535
  %tmp = icmp ult i32 %v1_100032f4.off, 131071
  br i1 %tmp, label %dec_label_pc_10003301, label %dec_label_pc_100032fb

dec_label_pc_100032fb:                            ; preds = %dec_label_pc_100032db
  %v2_100032f4 = sdiv i32 %v1_100032f4, 65536
  %v1_100032fb = and i32 %v2_100032f4, -65536
  %v2_100032fb = or i32 %v1_100032fb, 65533
  br label %dec_label_pc_10003327

dec_label_pc_10003301:                            ; preds = %dec_label_pc_100032db
  store i32 %arg1, i32* @ecx, align 4
  %v6_1000330f = call i32 @function_10003329(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_1001803c.23 to i32), i32* bitcast ([5 x i8]* @global_var_10018034.22 to i32*))
  %v1_10003317 = mul i32 %v6_1000330f, 65536
  %v2_10003317 = sdiv i32 %v1_10003317, 65536
  store i32 %v2_10003317, i32* @edx, align 4
  %v1_10003317.off = or i32 %v1_10003317, 65535
  %tmp10 = icmp ult i32 %v1_10003317.off, 131071
  br i1 %tmp10, label %dec_label_pc_10003324, label %dec_label_pc_1000331e

dec_label_pc_1000331e:                            ; preds = %dec_label_pc_10003301
  %v1_1000331e = and i32 %v6_1000330f, -65536
  %v2_1000331e = or i32 %v1_1000331e, 65515
  br label %dec_label_pc_10003327

dec_label_pc_10003324:                            ; preds = %dec_label_pc_10003301
  %v12_10003324 = and i32 %v6_1000330f, -65536
  br label %dec_label_pc_10003327

dec_label_pc_10003327:                            ; preds = %dec_label_pc_1000331e, %dec_label_pc_100032fb, %dec_label_pc_100032d5, %dec_label_pc_100032b8, %dec_label_pc_10003324
  %v0_10003328 = phi i32 [ %v2_1000331e, %dec_label_pc_1000331e ], [ %v2_100032fb, %dec_label_pc_100032fb ], [ %v2_100032d5, %dec_label_pc_100032d5 ], [ %v2_100032b8, %dec_label_pc_100032b8 ], [ %v12_10003324, %dec_label_pc_10003324 ]
  ret i32 %v0_10003328

; uselistorder directives
  uselistorder i32 %v6_1000330f, { 2, 1, 0 }
  uselistorder i32 %v1_100032f4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10003327, { 4, 0, 1, 2, 3 }
}

define i32 @function_10003329(i32 %arg1, i32 %arg2, i32* %arg3) local_unnamed_addr {
dec_label_pc_10003329:
  %tmp1 = ptrtoint i32* %arg3 to i32
  %stack_var_-8 = alloca i32, align 4
  %v0_1000332c = load i32, i32* @ecx, align 4
  store i32 %v0_1000332c, i32* %stack_var_-8, align 4
  %v5_10003330 = inttoptr i32 %arg2 to i8*
  %v6_10003331 = call i32* @LoadLibraryA(i8* %v5_10003330)
  %v7_10003331 = ptrtoint i32* %v6_10003331 to i32
  %v2_1000333a = add i32 %arg1, 660
  %v3_1000333a = inttoptr i32 %v2_1000333a to i32*
  store i32 %v7_10003331, i32* %v3_1000333a, align 4
  store i32 %arg1, i32* @edx, align 4
  %v3_10003343 = load i32, i32* %v3_1000333a, align 4
  store i32 %v3_10003343, i32* %stack_var_-8, align 4
  %v3_1000334f = load i32, i32* %v3_1000333a, align 4
  %v4_1000334f = icmp eq i32 %v3_1000334f, 0
  %v1_10003356 = icmp eq i1 %v4_1000334f, false
  br i1 %v1_10003356, label %dec_label_pc_10003361, label %dec_label_pc_10003358

dec_label_pc_10003358:                            ; preds = %dec_label_pc_10003329
  %v2_10003358 = or i32 %v3_10003343, 65535
  br label %dec_label_pc_100035d9

dec_label_pc_10003361:                            ; preds = %dec_label_pc_10003329
  store i32 %tmp1, i32* @edx, align 4
  %v3_1000336a = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([16 x i8]* @global_var_1001804c.24 to i32))
  %v5_10003372 = inttoptr i32 %v3_1000336a to i8*
  %v3_10003373 = load i32, i32* %stack_var_-8, align 4
  %v5_10003377 = inttoptr i32 %v3_10003373 to i32*
  %v7_10003377 = call i32 ()* @GetProcAddress(i32* %v5_10003377, i8* %v5_10003372)
  %v8_10003377 = ptrtoint i32 ()* %v7_10003377 to i32
  %v2_10003380 = add i32 %arg1, 720
  %v3_10003380 = inttoptr i32 %v2_10003380 to i32*
  store i32 %v8_10003377, i32* %v3_10003380, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_1000338f = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([14 x i8]* @global_var_1001805c.25 to i32))
  %v5_10003397 = inttoptr i32 %v3_1000338f to i8*
  %v3_10003398 = load i32, i32* %stack_var_-8, align 4
  %v5_1000339c = inttoptr i32 %v3_10003398 to i32*
  %v7_1000339c = call i32 ()* @GetProcAddress(i32* %v5_1000339c, i8* %v5_10003397)
  %v8_1000339c = ptrtoint i32 ()* %v7_1000339c to i32
  %v2_100033a5 = add i32 %arg1, 664
  %v3_100033a5 = inttoptr i32 %v2_100033a5 to i32*
  store i32 %v8_1000339c, i32* %v3_100033a5, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_100033b4 = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([14 x i8]* @global_var_1001806c.26 to i32))
  %v5_100033bc = inttoptr i32 %v3_100033b4 to i8*
  %v3_100033bd = load i32, i32* %stack_var_-8, align 4
  %v5_100033c1 = inttoptr i32 %v3_100033bd to i32*
  %v7_100033c1 = call i32 ()* @GetProcAddress(i32* %v5_100033c1, i8* %v5_100033bc)
  %v8_100033c1 = ptrtoint i32 ()* %v7_100033c1 to i32
  %v2_100033ca = add i32 %arg1, 668
  %v3_100033ca = inttoptr i32 %v2_100033ca to i32*
  store i32 %v8_100033c1, i32* %v3_100033ca, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_100033d9 = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([14 x i8]* @global_var_1001807c.27 to i32))
  %v5_100033e1 = inttoptr i32 %v3_100033d9 to i8*
  %v3_100033e2 = load i32, i32* %stack_var_-8, align 4
  %v5_100033e6 = inttoptr i32 %v3_100033e2 to i32*
  %v7_100033e6 = call i32 ()* @GetProcAddress(i32* %v5_100033e6, i8* %v5_100033e1)
  %v8_100033e6 = ptrtoint i32 ()* %v7_100033e6 to i32
  %v2_100033ef = add i32 %arg1, 672
  %v3_100033ef = inttoptr i32 %v2_100033ef to i32*
  store i32 %v8_100033e6, i32* %v3_100033ef, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_100033fe = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([14 x i8]* @global_var_1001808c.28 to i32))
  %v5_10003406 = inttoptr i32 %v3_100033fe to i8*
  %v3_10003407 = load i32, i32* %stack_var_-8, align 4
  %v5_1000340b = inttoptr i32 %v3_10003407 to i32*
  %v7_1000340b = call i32 ()* @GetProcAddress(i32* %v5_1000340b, i8* %v5_10003406)
  %v8_1000340b = ptrtoint i32 ()* %v7_1000340b to i32
  %v2_10003414 = add i32 %arg1, 680
  %v3_10003414 = inttoptr i32 %v2_10003414 to i32*
  store i32 %v8_1000340b, i32* %v3_10003414, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_10003423 = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([13 x i8]* @global_var_1001809c.29 to i32))
  %v5_1000342b = inttoptr i32 %v3_10003423 to i8*
  %v3_1000342c = load i32, i32* %stack_var_-8, align 4
  %v5_10003430 = inttoptr i32 %v3_1000342c to i32*
  %v7_10003430 = call i32 ()* @GetProcAddress(i32* %v5_10003430, i8* %v5_1000342b)
  %v8_10003430 = ptrtoint i32 ()* %v7_10003430 to i32
  %v2_10003439 = add i32 %arg1, 684
  %v3_10003439 = inttoptr i32 %v2_10003439 to i32*
  store i32 %v8_10003430, i32* %v3_10003439, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_10003448 = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([13 x i8]* @global_var_100180ac.30 to i32))
  %v5_10003450 = inttoptr i32 %v3_10003448 to i8*
  %v3_10003451 = load i32, i32* %stack_var_-8, align 4
  %v5_10003455 = inttoptr i32 %v3_10003451 to i32*
  %v7_10003455 = call i32 ()* @GetProcAddress(i32* %v5_10003455, i8* %v5_10003450)
  %v8_10003455 = ptrtoint i32 ()* %v7_10003455 to i32
  %v2_1000345e = add i32 %arg1, 688
  %v3_1000345e = inttoptr i32 %v2_1000345e to i32*
  store i32 %v8_10003455, i32* %v3_1000345e, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_1000346d = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([12 x i8]* @global_var_100180bc.31 to i32))
  %v5_10003475 = inttoptr i32 %v3_1000346d to i8*
  %v3_10003476 = load i32, i32* %stack_var_-8, align 4
  %v5_1000347a = inttoptr i32 %v3_10003476 to i32*
  %v7_1000347a = call i32 ()* @GetProcAddress(i32* %v5_1000347a, i8* %v5_10003475)
  %v8_1000347a = ptrtoint i32 ()* %v7_1000347a to i32
  %v2_10003483 = add i32 %arg1, 692
  %v3_10003483 = inttoptr i32 %v2_10003483 to i32*
  store i32 %v8_1000347a, i32* %v3_10003483, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_10003492 = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([13 x i8]* @global_var_100180c8.32 to i32))
  %v5_1000349a = inttoptr i32 %v3_10003492 to i8*
  %v3_1000349b = load i32, i32* %stack_var_-8, align 4
  %v5_1000349f = inttoptr i32 %v3_1000349b to i32*
  %v7_1000349f = call i32 ()* @GetProcAddress(i32* %v5_1000349f, i8* %v5_1000349a)
  %v8_1000349f = ptrtoint i32 ()* %v7_1000349f to i32
  %v2_100034a8 = add i32 %arg1, 696
  %v3_100034a8 = inttoptr i32 %v2_100034a8 to i32*
  store i32 %v8_1000349f, i32* %v3_100034a8, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_100034b7 = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([13 x i8]* @global_var_100180d8.33 to i32))
  %v5_100034bf = inttoptr i32 %v3_100034b7 to i8*
  %v3_100034c0 = load i32, i32* %stack_var_-8, align 4
  %v5_100034c4 = inttoptr i32 %v3_100034c0 to i32*
  %v7_100034c4 = call i32 ()* @GetProcAddress(i32* %v5_100034c4, i8* %v5_100034bf)
  %v8_100034c4 = ptrtoint i32 ()* %v7_100034c4 to i32
  %v2_100034cd = add i32 %arg1, 676
  %v3_100034cd = inttoptr i32 %v2_100034cd to i32*
  store i32 %v8_100034c4, i32* %v3_100034cd, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_100034dc = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([9 x i8]* @global_var_100180e8.34 to i32))
  %v5_100034e4 = inttoptr i32 %v3_100034dc to i8*
  %v3_100034e5 = load i32, i32* %stack_var_-8, align 4
  %v5_100034e9 = inttoptr i32 %v3_100034e5 to i32*
  %v7_100034e9 = call i32 ()* @GetProcAddress(i32* %v5_100034e9, i8* %v5_100034e4)
  %v8_100034e9 = ptrtoint i32 ()* %v7_100034e9 to i32
  %v2_100034f2 = add i32 %arg1, 700
  %v3_100034f2 = inttoptr i32 %v2_100034f2 to i32*
  store i32 %v8_100034e9, i32* %v3_100034f2, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_10003501 = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([16 x i8]* @global_var_100180f4.35 to i32))
  %v5_10003509 = inttoptr i32 %v3_10003501 to i8*
  %v3_1000350a = load i32, i32* %stack_var_-8, align 4
  %v5_1000350e = inttoptr i32 %v3_1000350a to i32*
  %v7_1000350e = call i32 ()* @GetProcAddress(i32* %v5_1000350e, i8* %v5_10003509)
  %v8_1000350e = ptrtoint i32 ()* %v7_1000350e to i32
  %v2_10003517 = add i32 %arg1, 704
  %v3_10003517 = inttoptr i32 %v2_10003517 to i32*
  store i32 %v8_1000350e, i32* %v3_10003517, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_10003526 = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([15 x i8]* @global_var_10018104.36 to i32))
  %v5_1000352e = inttoptr i32 %v3_10003526 to i8*
  %v3_1000352f = load i32, i32* %stack_var_-8, align 4
  %v5_10003533 = inttoptr i32 %v3_1000352f to i32*
  %v7_10003533 = call i32 ()* @GetProcAddress(i32* %v5_10003533, i8* %v5_1000352e)
  %v8_10003533 = ptrtoint i32 ()* %v7_10003533 to i32
  %v2_1000353c = add i32 %arg1, 708
  %v3_1000353c = inttoptr i32 %v2_1000353c to i32*
  store i32 %v8_10003533, i32* %v3_1000353c, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_1000354b = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([11 x i8]* @global_var_10018114.37 to i32))
  %v5_10003553 = inttoptr i32 %v3_1000354b to i8*
  %v3_10003554 = load i32, i32* %stack_var_-8, align 4
  %v5_10003558 = inttoptr i32 %v3_10003554 to i32*
  %v7_10003558 = call i32 ()* @GetProcAddress(i32* %v5_10003558, i8* %v5_10003553)
  %v8_10003558 = ptrtoint i32 ()* %v7_10003558 to i32
  %v2_10003561 = add i32 %arg1, 712
  %v3_10003561 = inttoptr i32 %v2_10003561 to i32*
  store i32 %v8_10003558, i32* %v3_10003561, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_10003570 = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([12 x i8]* @global_var_10018120.38 to i32))
  %v5_10003578 = inttoptr i32 %v3_10003570 to i8*
  %v3_10003579 = load i32, i32* %stack_var_-8, align 4
  %v5_1000357d = inttoptr i32 %v3_10003579 to i32*
  %v7_1000357d = call i32 ()* @GetProcAddress(i32* %v5_1000357d, i8* %v5_10003578)
  %v8_1000357d = ptrtoint i32 ()* %v7_1000357d to i32
  %v2_10003586 = add i32 %arg1, 716
  %v3_10003586 = inttoptr i32 %v2_10003586 to i32*
  store i32 %v8_1000357d, i32* %v3_10003586, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_10003595 = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([13 x i8]* @global_var_1001812c.39 to i32))
  %v5_1000359d = inttoptr i32 %v3_10003595 to i8*
  %v3_1000359e = load i32, i32* %stack_var_-8, align 4
  %v5_100035a2 = inttoptr i32 %v3_1000359e to i32*
  %v7_100035a2 = call i32 ()* @GetProcAddress(i32* %v5_100035a2, i8* %v5_1000359d)
  %v8_100035a2 = ptrtoint i32 ()* %v7_100035a2 to i32
  %v2_100035ab = add i32 %arg1, 724
  %v3_100035ab = inttoptr i32 %v2_100035ab to i32*
  store i32 %v8_100035a2, i32* %v3_100035ab, align 4
  store i32 %tmp1, i32* @edx, align 4
  %v3_100035ba = call i32 @function_10003280(i32 %tmp1, i32 ptrtoint ([8 x i8]* @global_var_1001813c.40 to i32))
  %v5_100035c2 = inttoptr i32 %v3_100035ba to i8*
  %v3_100035c3 = load i32, i32* %stack_var_-8, align 4
  %v5_100035c7 = inttoptr i32 %v3_100035c3 to i32*
  %v7_100035c7 = call i32 ()* @GetProcAddress(i32* %v5_100035c7, i8* %v5_100035c2)
  %v8_100035c7 = ptrtoint i32 ()* %v7_100035c7 to i32
  %v2_100035d0 = add i32 %arg1, 728
  %v3_100035d0 = inttoptr i32 %v2_100035d0 to i32*
  store i32 %v8_100035c7, i32* %v3_100035d0, align 4
  %v12_100035d6 = and i32 %v8_100035c7, -65536
  br label %dec_label_pc_100035d9

dec_label_pc_100035d9:                            ; preds = %dec_label_pc_10003358, %dec_label_pc_10003361
  %storemerge = phi i32 [ %v2_10003358, %dec_label_pc_10003358 ], [ %v12_100035d6, %dec_label_pc_10003361 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %tmp1, { 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_10003280, { 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100035d9, { 1, 0 }
}

define i32 @function_100035dd() local_unnamed_addr {
dec_label_pc_100035dd:
  %tmp = call i32 @__decompiler_undefined_function_1()
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100035dd = load i32, i32* @ebp, align 4
  store i32 %v0_100035dd, i32* %stack_var_-4, align 4
  store i32 148, i32* %stack_var_-152, align 4
  %tmp6 = bitcast i32* %stack_var_-152 to %_OSVERSIONINFOA*
  %v5_100035f7 = call i1 @GetVersionExA(%_OSVERSIONINFOA* %tmp6)
  %v12_100035fd = icmp eq i32 %tmp, 2
  %v1_10003604 = icmp eq i1 %v12_100035fd, false
  br i1 %v1_10003604, label %dec_label_pc_1000360d, label %dec_label_pc_1000360f

dec_label_pc_1000360d:                            ; preds = %dec_label_pc_100035dd
  br label %dec_label_pc_1000360f

dec_label_pc_1000360f:                            ; preds = %dec_label_pc_100035dd, %dec_label_pc_1000360d
  %storemerge = phi i32 [ 0, %dec_label_pc_1000360d ], [ 1, %dec_label_pc_100035dd ]
  %v2_10003611 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10003611, i32* @ebp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder label %dec_label_pc_1000360f, { 1, 0 }
}

define i32 @function_10003613(i8* %arg1) local_unnamed_addr {
dec_label_pc_10003613:
  %stack_var_-8 = alloca i32, align 4
  %v0_10003616 = load i32, i32* @ecx, align 4
  store i32 %v0_10003616, i32* %stack_var_-8, align 4
  %v5_10003617 = icmp eq i8* %arg1, null
  %v1_1000361b = icmp eq i1 %v5_10003617, false
  br i1 %v1_1000361b, label %dec_label_pc_10003634.preheader, label %dec_label_pc_1000361d

dec_label_pc_10003634.preheader:                  ; preds = %dec_label_pc_10003613
  %v4_10003634 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_10003634

dec_label_pc_1000361d:                            ; preds = %dec_label_pc_10003613
  %v11_1000361d = load i32, i32* @eax, align 4
  %v12_1000361d = and i32 %v11_1000361d, -65536
  br label %dec_label_pc_10003675

dec_label_pc_10003634:                            ; preds = %dec_label_pc_10003634.preheader, %dec_label_pc_10003670
  %v4_1000364b = phi i32 [ %v1_1000362e, %dec_label_pc_10003670 ], [ 0, %dec_label_pc_10003634.preheader ]
  store i32 %v4_1000364b, i32* %stack_var_-8, align 4
  %v5_10003637 = add i32 %v4_1000364b, %v4_10003634
  %v1_1000363a = inttoptr i32 %v5_10003637 to i8*
  %v2_1000363a = load i8, i8* %v1_1000363a, align 1
  %v1_1000363d = icmp eq i8 %v2_1000363a, 0
  br i1 %v1_1000363d, label %dec_label_pc_10003672, label %dec_label_pc_10003641

dec_label_pc_10003641:                            ; preds = %dec_label_pc_10003634
  %v6_1000364f = call i32 @function_1000d700(i8* %v1_1000363a, i32 ptrtoint ([3 x i8]* @global_var_10018144.41 to i32), i32 2)
  %v1_10003657 = icmp eq i32 %v6_1000364f, 0
  %v1_10003659 = icmp eq i1 %v1_10003657, false
  %v3_1000362b = load i32, i32* %stack_var_-8, align 4
  br i1 %v1_10003659, label %dec_label_pc_10003670, label %dec_label_pc_1000365b

dec_label_pc_1000365b:                            ; preds = %dec_label_pc_10003641
  store i32 %v3_1000362b, i32* @ecx, align 4
  %v2_10003661 = add i32 %v4_10003634, 2
  %v3_10003661 = add i32 %v2_10003661, %v3_1000362b
  %v1_10003666 = call i32 @function_1000d6eb(i32 %v3_10003661)
  br label %dec_label_pc_10003675

dec_label_pc_10003670:                            ; preds = %dec_label_pc_10003641
  %v1_1000362e = add i32 %v3_1000362b, 1
  store i32 %v1_1000362e, i32* @eax, align 4
  br label %dec_label_pc_10003634

dec_label_pc_10003672:                            ; preds = %dec_label_pc_10003634
  %v11_10003672 = load i32, i32* @eax, align 4
  %v12_10003672 = and i32 %v11_10003672, -65536
  br label %dec_label_pc_10003675

dec_label_pc_10003675:                            ; preds = %dec_label_pc_1000365b, %dec_label_pc_1000361d, %dec_label_pc_10003672
  %v0_10003678 = phi i32 [ %v1_10003666, %dec_label_pc_1000365b ], [ %v12_1000361d, %dec_label_pc_1000361d ], [ %v12_10003672, %dec_label_pc_10003672 ]
  ret i32 %v0_10003678

; uselistorder directives
  uselistorder i32 %v1_1000362e, { 1, 0 }
  uselistorder i32 %v3_1000362b, { 2, 1, 0 }
  uselistorder i32 %v4_10003634, { 1, 0 }
  uselistorder i32* %stack_var_-8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10003675, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10003634, { 1, 0 }
}

define i32 @function_10003679(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10003679:
  %v5_10003687 = inttoptr i32 %arg2 to i8*
  %v6_10003687 = call i32 @function_10014e60(i8* %v5_10003687, i32 ptrtoint ([4 x i8]* @global_var_10018148.42 to i32), i32 3)
  %v1_1000368f = icmp eq i32 %v6_10003687, 0
  br i1 %v1_1000368f, label %dec_label_pc_10003699, label %dec_label_pc_10003693

dec_label_pc_10003693:                            ; preds = %dec_label_pc_10003679
  %v2_10003693 = or i32 %v6_10003687, 65535
  br label %dec_label_pc_100036ee

dec_label_pc_10003699:                            ; preds = %dec_label_pc_10003679
  %v2_1000369d = call i32 @ClearFuncStatusCode(i32 %arg1)
  store i32 %arg1, i32* @edx, align 4
  %v1_100036a8 = add i32 %arg1, 200
  %v2_100036a8 = inttoptr i32 %v1_100036a8 to i32*
  store i32 0, i32* %v2_100036a8, align 4
  %v1_100036b9 = add i32 %arg1, 210
  %v2_100036c0 = call i32 @function_1000d570(i32 %v1_100036b9)
  %v6_100036d6 = call i32 @function_10003329(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_10018154.44 to i32), i32* bitcast ([6 x i8]* @global_var_1001814c.43 to i32*))
  %v1_100036de = mul i32 %v6_100036d6, 65536
  %v1_100036de.off = or i32 %v1_100036de, 65535
  %tmp = icmp ult i32 %v1_100036de.off, 131071
  br i1 %tmp, label %dec_label_pc_100036eb, label %dec_label_pc_100036e5

dec_label_pc_100036e5:                            ; preds = %dec_label_pc_10003699
  %v2_100036de = sdiv i32 %v1_100036de, 65536
  %v1_100036e5 = and i32 %v2_100036de, -65536
  %v2_100036e5 = or i32 %v1_100036e5, 65515
  br label %dec_label_pc_100036ee

dec_label_pc_100036eb:                            ; preds = %dec_label_pc_10003699
  br label %dec_label_pc_100036ee

dec_label_pc_100036ee:                            ; preds = %dec_label_pc_100036e5, %dec_label_pc_10003693, %dec_label_pc_100036eb
  %v0_100036ef = phi i32 [ %v2_100036e5, %dec_label_pc_100036e5 ], [ %v2_10003693, %dec_label_pc_10003693 ], [ 0, %dec_label_pc_100036eb ]
  ret i32 %v0_100036ef

; uselistorder directives
  uselistorder i32 %v1_100036de, { 1, 0 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100036ee, { 2, 0, 1 }
}

define i32 @function_100036f0(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100036f0:
  %stack_var_-8 = alloca i32, align 4
  %v0_100036f3 = load i32, i32* @ecx, align 4
  store i32 %v0_100036f3, i32* %stack_var_-8, align 4
  %v4_100036f6 = ptrtoint i8* %arg2 to i32
  %v7_100036ff = call i32 @function_10014e60(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_10018164.45, i32 0, i32 0), i32 %v4_100036f6, i32 7)
  %v1_10003707 = icmp eq i32 %v7_100036ff, 0
  br i1 %v1_10003707, label %dec_label_pc_10003726, label %dec_label_pc_1000370b

dec_label_pc_1000370b:                            ; preds = %dec_label_pc_100036f0
  %v1_1000370b = and i32 %v7_100036ff, -65536
  %v2_1000370b = or i32 %v1_1000370b, 65519
  br label %dec_label_pc_100037b3

dec_label_pc_10003726:                            ; preds = %dec_label_pc_100036f0, %dec_label_pc_10003741
  %v3_10003743 = phi i32 [ %v1_10003720, %dec_label_pc_10003741 ], [ 7, %dec_label_pc_100036f0 ]
  store i32 %v3_10003743, i32* %stack_var_-8, align 4
  %v5_10003729 = add i32 %v3_10003743, %v4_100036f6
  %v1_1000372c = inttoptr i32 %v5_10003729 to i8*
  %v2_1000372c = load i8, i8* %v1_1000372c, align 1
  %v1_1000372f = icmp eq i8 %v2_1000372c, 0
  br i1 %v1_1000372f, label %dec_label_pc_10003743, label %dec_label_pc_10003733

dec_label_pc_10003733:                            ; preds = %dec_label_pc_10003726
  %v2_10003739 = load i8, i8* %v1_1000372c, align 1
  %v9_1000373c = icmp eq i8 %v2_10003739, 44
  br i1 %v9_1000373c, label %dec_label_pc_10003743, label %dec_label_pc_10003741

dec_label_pc_10003741:                            ; preds = %dec_label_pc_10003733
  %v1_10003720 = add i32 %v3_10003743, 1
  br label %dec_label_pc_10003726

dec_label_pc_10003743:                            ; preds = %dec_label_pc_10003733, %dec_label_pc_10003726
  %v1_10003746 = add i32 %v3_10003743, -7
  store i32 %v1_10003746, i32* @eax, align 4
  %v1_1000374d = add i32 %v4_100036f6, 7
  %v1_10003754 = add i32 %arg1, 594
  %v5_1000375a = inttoptr i32 %v1_10003754 to i8*
  %v7_1000375b = call i32 @function_1000d740(i8* %v5_1000375a, i32 %v1_1000374d, i32 %v1_10003746)
  %v4_10003766 = load i32, i32* %stack_var_-8, align 4
  %v5_10003766 = add i32 %v4_10003766, %arg1
  %v1_10003769 = add i32 %v5_10003766, 587
  %v2_10003769 = inttoptr i32 %v1_10003769 to i8*
  store i8 0, i8* %v2_10003769, align 1
  %v3_10003770 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_10003770, i32* @ecx, align 4
  %v2_10003776 = add i32 %v4_100036f6, 1
  %v3_10003776 = add i32 %v2_10003776, %v3_10003770
  %v2_1000377b = call i32 @function_1000d6eb(i32 %v3_10003776)
  %v3_1000377b = trunc i32 %v2_1000377b to i16
  store i32 %arg1, i32* @ecx, align 4
  %v4_10003786 = add i32 %arg1, 532
  %v5_10003786 = inttoptr i32 %v4_10003786 to i16*
  store i16 %v3_1000377b, i16* %v5_10003786, align 2
  %v7_1000379b = call i32 @function_10003329(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_10018174.47 to i32), i32* bitcast ([7 x i8]* @global_var_1001816c.46 to i32*))
  %v1_100037a3 = mul i32 %v7_1000379b, 65536
  %v1_100037a3.off = or i32 %v1_100037a3, 65535
  %tmp = icmp ult i32 %v1_100037a3.off, 131071
  br i1 %tmp, label %dec_label_pc_100037b0, label %dec_label_pc_100037aa

dec_label_pc_100037aa:                            ; preds = %dec_label_pc_10003743
  %v2_100037a3 = sdiv i32 %v1_100037a3, 65536
  %v1_100037aa = and i32 %v2_100037a3, -65536
  %v2_100037aa = or i32 %v1_100037aa, 65515
  br label %dec_label_pc_100037b3

dec_label_pc_100037b0:                            ; preds = %dec_label_pc_10003743
  br label %dec_label_pc_100037b3

dec_label_pc_100037b3:                            ; preds = %dec_label_pc_100037aa, %dec_label_pc_1000370b, %dec_label_pc_100037b0
  %v0_100037b6 = phi i32 [ %v2_100037aa, %dec_label_pc_100037aa ], [ %v2_1000370b, %dec_label_pc_1000370b ], [ 0, %dec_label_pc_100037b0 ]
  ret i32 %v0_100037b6

; uselistorder directives
  uselistorder i32 %v1_100037a3, { 1, 0 }
  uselistorder i32 %v3_10003743, { 0, 2, 1, 3 }
  uselistorder i32 %v4_100036f6, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @function_1000d6eb, { 1, 0 }
  uselistorder i32 %arg1, { 4, 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_100037b3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10003726, { 1, 0 }
}

define i32 @function_100037b7(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100037b7:
  %v1_100037bb = load i32, i32* @eax, align 4
  %v2_100037bb = or i32 %v1_100037bb, 65535
  ret i32 %v2_100037bb
}

define i32 @function_100037c3(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100037c3:
  store i32 %arg1, i32* @eax, align 4
  %v2_100037ca = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v2_100037ca, i32* @eax, align 4
  %v1_100037d2 = mul i32 %v2_100037ca, 65536
  %v1_100037d2.off = or i32 %v1_100037d2, 65535
  %tmp = icmp ult i32 %v1_100037d2.off, 131071
  br i1 %tmp, label %dec_label_pc_100037e7, label %dec_label_pc_100037d9

dec_label_pc_100037d9:                            ; preds = %dec_label_pc_100037c3
  %v2_100037dd = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_1000382a

dec_label_pc_100037e7:                            ; preds = %dec_label_pc_100037c3
  %v5_100037f2 = inttoptr i32 %arg2 to i8*
  %v6_100037f2 = call i32 @function_10014e60(i8* %v5_100037f2, i32 ptrtoint ([4 x i8]* @global_var_100181a0.48 to i32), i32 3)
  %v1_100037fa = icmp eq i32 %v6_100037f2, 0
  br i1 %v1_100037fa, label %dec_label_pc_10003804, label %dec_label_pc_100037fe

dec_label_pc_100037fe:                            ; preds = %dec_label_pc_100037e7
  %v1_100037fe = and i32 %v6_100037f2, -65536
  %v2_100037fe = or i32 %v1_100037fe, 65519
  br label %dec_label_pc_1000382a

dec_label_pc_10003804:                            ; preds = %dec_label_pc_100037e7
  store i32 %arg1, i32* @ecx, align 4
  %v6_10003812 = call i32 @function_10003329(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_100181ac.50 to i32), i32* bitcast ([5 x i8]* @global_var_100181a4.49 to i32*))
  %v1_1000381a = mul i32 %v6_10003812, 65536
  %v1_1000381a.off = or i32 %v1_1000381a, 65535
  %tmp10 = icmp ult i32 %v1_1000381a.off, 131071
  br i1 %tmp10, label %dec_label_pc_10003827, label %dec_label_pc_10003821

dec_label_pc_10003821:                            ; preds = %dec_label_pc_10003804
  %v1_10003821 = and i32 %v6_10003812, -65536
  %v2_10003821 = or i32 %v1_10003821, 65515
  br label %dec_label_pc_1000382a

dec_label_pc_10003827:                            ; preds = %dec_label_pc_10003804
  %v12_10003827 = and i32 %v6_10003812, -65536
  br label %dec_label_pc_1000382a

dec_label_pc_1000382a:                            ; preds = %dec_label_pc_10003821, %dec_label_pc_100037fe, %dec_label_pc_100037d9, %dec_label_pc_10003827
  %v0_1000382b = phi i32 [ %v2_10003821, %dec_label_pc_10003821 ], [ %v2_100037fe, %dec_label_pc_100037fe ], [ %v2_100037dd, %dec_label_pc_100037d9 ], [ %v12_10003827, %dec_label_pc_10003827 ]
  ret i32 %v0_1000382b

; uselistorder directives
  uselistorder i32 %v6_10003812, { 1, 2, 0 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000382a, { 3, 0, 1, 2 }
}

define i32 @function_1000382c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000382c:
  %v1_10003830 = load i32, i32* @eax, align 4
  %v2_10003830 = or i32 %v1_10003830, 65535
  ret i32 %v2_10003830
}

define i32 @function_10003838(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10003838:
  %v1_1000383c = load i32, i32* @eax, align 4
  %v2_1000383c = or i32 %v1_1000383c, 65535
  ret i32 %v2_1000383c
}

define i32 @function_10003844(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10003844:
  %v0_10003847 = call i32 @function_100035dd()
  %v1_1000384c = icmp eq i32 %v0_10003847, 0
  %v1_1000384e = icmp eq i1 %v1_1000384c, false
  br i1 %v1_1000384e, label %dec_label_pc_10003856, label %dec_label_pc_10003850

dec_label_pc_10003850:                            ; preds = %dec_label_pc_10003844
  %v1_10003850 = and i32 %v0_10003847, -65536
  %v2_10003850 = or i32 %v1_10003850, 65516
  br label %dec_label_pc_100038bf

dec_label_pc_10003856:                            ; preds = %dec_label_pc_10003844
  %v5_10003861 = inttoptr i32 %arg2 to i8*
  %v6_10003861 = call i32 @function_10014e60(i8* %v5_10003861, i32 ptrtoint ([4 x i8]* @global_var_100181fc.51 to i32), i32 3)
  store i32 %v6_10003861, i32* @eax, align 4
  %v1_10003869 = icmp eq i32 %v6_10003861, 0
  br i1 %v1_10003869, label %dec_label_pc_10003873, label %dec_label_pc_1000386d

dec_label_pc_1000386d:                            ; preds = %dec_label_pc_10003856
  %v2_1000386d = or i32 %v6_10003861, 65535
  br label %dec_label_pc_100038bf

dec_label_pc_10003873:                            ; preds = %dec_label_pc_10003856
  store i32 %arg2, i32* @ecx, align 4
  %v3_10003877 = call i32 @function_10003613(i8* %v5_10003861)
  %v4_10003884 = trunc i32 %v3_10003877 to i16
  %v5_10003884 = call i32 @SetPortNum(i32 %arg1, i16 %v4_10003884)
  %v1_1000388c = mul i32 %v5_10003884, 65536
  %v1_1000388c.off = or i32 %v1_1000388c, 65535
  %tmp = icmp ult i32 %v1_1000388c.off, 131071
  br i1 %tmp, label %dec_label_pc_10003899, label %dec_label_pc_10003893

dec_label_pc_10003893:                            ; preds = %dec_label_pc_10003873
  %v2_1000388c = sdiv i32 %v1_1000388c, 65536
  %v2_10003893 = or i32 %v2_1000388c, 65535
  br label %dec_label_pc_100038bf

dec_label_pc_10003899:                            ; preds = %dec_label_pc_10003873
  store i32 %arg1, i32* @ecx, align 4
  %v6_100038a7 = call i32 @function_10003329(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_10018208.53 to i32), i32* bitcast ([7 x i8]* @global_var_10018200.52 to i32*))
  %v1_100038af = mul i32 %v6_100038a7, 65536
  %v1_100038af.off = or i32 %v1_100038af, 65535
  %tmp10 = icmp ult i32 %v1_100038af.off, 131071
  br i1 %tmp10, label %dec_label_pc_100038bc, label %dec_label_pc_100038b6

dec_label_pc_100038b6:                            ; preds = %dec_label_pc_10003899
  %v1_100038b6 = and i32 %v6_100038a7, -65536
  %v2_100038b6 = or i32 %v1_100038b6, 65515
  br label %dec_label_pc_100038bf

dec_label_pc_100038bc:                            ; preds = %dec_label_pc_10003899
  %v12_100038bc = and i32 %v6_100038a7, -65536
  br label %dec_label_pc_100038bf

dec_label_pc_100038bf:                            ; preds = %dec_label_pc_100038b6, %dec_label_pc_10003893, %dec_label_pc_1000386d, %dec_label_pc_10003850, %dec_label_pc_100038bc
  %v0_100038c0 = phi i32 [ %v2_100038b6, %dec_label_pc_100038b6 ], [ %v2_10003893, %dec_label_pc_10003893 ], [ %v2_1000386d, %dec_label_pc_1000386d ], [ %v2_10003850, %dec_label_pc_10003850 ], [ %v12_100038bc, %dec_label_pc_100038bc ]
  ret i32 %v0_100038c0

; uselistorder directives
  uselistorder i32 %v6_100038a7, { 2, 1, 0 }
  uselistorder i32 %v1_1000388c, { 1, 0 }
  uselistorder i32 (i32, i32, i32*)* @function_10003329, { 4, 2, 1, 0, 3 }
  uselistorder i32 (i32, i16)* @SetPortNum, { 1, 0 }
  uselistorder i32 (i8*)* @function_10003613, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_10014e60, { 4, 2, 1, 0, 3 }
  uselistorder i32 65516, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_100038bf, { 4, 0, 1, 2, 3 }
}

define i32 @function_100038c1(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100038c1:
  %v1_100038c5 = load i32, i32* @eax, align 4
  %v2_100038c5 = or i32 %v1_100038c5, 65535
  ret i32 %v2_100038c5
}

define i32 @ClearDataFIFO(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_100038d5 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100038d5, i32* %eax.global-to-local, align 4
  %v1_100038dd = mul i32 %v1_100038d5, 65536
  %v1_100038dd.off = or i32 %v1_100038dd, 65535
  %tmp = icmp ult i32 %v1_100038dd.off, 131071
  br i1 %tmp, label %dec_label_pc_100038e6, label %dec_label_pc_10003914

dec_label_pc_100038e6:                            ; preds = %entry
  %v1_100038e9 = add i32 %arg1, 660
  %v2_100038e9 = inttoptr i32 %v1_100038e9 to i32*
  %v3_100038e9 = load i32, i32* %v2_100038e9, align 4
  %v4_100038e9 = icmp eq i32 %v3_100038e9, 0
  br i1 %v4_100038e9, label %dec_label_pc_10003914, label %dec_label_pc_100038f2

dec_label_pc_100038f2:                            ; preds = %dec_label_pc_100038e6
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_100038f5 = add i32 %arg1, 664
  %v2_100038f5 = inttoptr i32 %v1_100038f5 to i32*
  %v3_100038f5 = load i32, i32* %v2_100038f5, align 4
  %v4_100038f5 = icmp eq i32 %v3_100038f5, 0
  %v1_100038fc = icmp eq i1 %v4_100038f5, false
  br i1 %v1_100038fc, label %dec_label_pc_10003900, label %dec_label_pc_10003914

dec_label_pc_10003900:                            ; preds = %dec_label_pc_100038f2
  %v7_10003907 = load i32, i32* %v2_100038f5, align 4
  call void @__pseudo_call(i32 %v7_10003907)
  %v0_10003917.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10003914

dec_label_pc_10003914:                            ; preds = %dec_label_pc_100038e6, %dec_label_pc_100038f2, %entry, %dec_label_pc_10003900
  %v0_10003917 = phi i32 [ %v1_100038d5, %dec_label_pc_100038e6 ], [ %arg1, %dec_label_pc_100038f2 ], [ %v1_100038d5, %entry ], [ %v0_10003917.pre, %dec_label_pc_10003900 ]
  ret i32 %v0_10003917

; uselistorder directives
  uselistorder i32 %v1_100038d5, { 1, 2, 0, 3 }
  uselistorder i32 664, { 1, 0 }
  uselistorder i32 %arg1, { 0, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10003914, { 3, 1, 0, 2 }
}

define i32 @CheckSWStatus(i16 %arg1) local_unnamed_addr {
entry:
  %v4_1000391c = sext i16 %arg1 to i32
  store i32 %v4_1000391c, i32* @eax, align 4
  %v2_10003920 = call i32 @TestFuncStatusAndPtr(i32 %v4_1000391c)
  store i32 %v2_10003920, i32* @eax, align 4
  %v1_10003928 = mul i32 %v2_10003920, 65536
  %v1_10003928.off = or i32 %v1_10003928, 65535
  %tmp = icmp ult i32 %v1_10003928.off, 131071
  br i1 %tmp, label %dec_label_pc_1000393d, label %dec_label_pc_1000392f

dec_label_pc_1000392f:                            ; preds = %entry
  store i32 %v4_1000391c, i32* @edx, align 4
  %v2_10003933 = call i32 @GetFuncStatusCode(i32 %v4_1000391c)
  br label %dec_label_pc_10003970

dec_label_pc_1000393d:                            ; preds = %entry
  %v1_10003940 = add nsw i32 %v4_1000391c, 660
  %v2_10003940 = inttoptr i32 %v1_10003940 to i32*
  %v3_10003940 = load i32, i32* %v2_10003940, align 4
  %v4_10003940 = icmp eq i32 %v3_10003940, 0
  br i1 %v4_10003940, label %dec_label_pc_10003955, label %dec_label_pc_10003949

dec_label_pc_10003949:                            ; preds = %dec_label_pc_1000393d
  %v1_1000394c = add nsw i32 %v4_1000391c, 668
  %v2_1000394c = inttoptr i32 %v1_1000394c to i32*
  %v3_1000394c = load i32, i32* %v2_1000394c, align 4
  %v4_1000394c = icmp eq i32 %v3_1000394c, 0
  %v1_10003953 = icmp eq i1 %v4_1000394c, false
  br i1 %v1_10003953, label %dec_label_pc_1000395b, label %dec_label_pc_10003955

dec_label_pc_10003955:                            ; preds = %dec_label_pc_10003949, %dec_label_pc_1000393d
  %v1_10003955 = and i32 %v4_1000391c, -65536
  %v2_10003955 = or i32 %v1_10003955, 65515
  br label %dec_label_pc_10003970

dec_label_pc_1000395b:                            ; preds = %dec_label_pc_10003949
  store i32 %v4_1000391c, i32* @edx, align 4
  %v7_10003962 = load i32, i32* %v2_1000394c, align 4
  call void @__pseudo_call(i32 %v7_10003962)
  %sext = mul i32 %v4_1000391c, 65536
  %v4_1000396c = sdiv i32 %sext, 65536
  %v7_1000396c = and i32 %v4_1000391c, -65536
  %v8_1000396c = or i32 %v4_1000396c, %v7_1000396c
  br label %dec_label_pc_10003970

dec_label_pc_10003970:                            ; preds = %dec_label_pc_10003955, %dec_label_pc_1000392f, %dec_label_pc_1000395b
  %v0_10003973 = phi i32 [ %v2_10003955, %dec_label_pc_10003955 ], [ %v2_10003933, %dec_label_pc_1000392f ], [ %v8_1000396c, %dec_label_pc_1000395b ]
  ret i32 %v0_10003973

; uselistorder directives
  uselistorder i32 %v4_1000391c, { 0, 1, 3, 2, 4, 5, 7, 6, 8, 9 }
  uselistorder i32 668, { 1, 0 }
  uselistorder label %dec_label_pc_10003970, { 2, 0, 1 }
}

define i32 @CheckHWStatus(i16 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_10003978 = sext i16 %arg1 to i32
  store i32 %v4_10003978, i32* @eax, align 4
  %v2_1000397c = call i32 @TestFuncStatusAndPtr(i32 %v4_10003978)
  store i32 %v2_1000397c, i32* @eax, align 4
  %v1_10003984 = mul i32 %v2_1000397c, 65536
  %v1_10003984.off = or i32 %v1_10003984, 65535
  %tmp = icmp ult i32 %v1_10003984.off, 131071
  br i1 %tmp, label %dec_label_pc_10003999, label %dec_label_pc_1000398b

dec_label_pc_1000398b:                            ; preds = %entry
  %v2_1000398f = call i32 @GetFuncStatusCode(i32 %v4_10003978)
  br label %dec_label_pc_100039cc

dec_label_pc_10003999:                            ; preds = %entry
  %v1_1000399c = add nsw i32 %v4_10003978, 660
  %v2_1000399c = inttoptr i32 %v1_1000399c to i32*
  %v3_1000399c = load i32, i32* %v2_1000399c, align 4
  %v4_1000399c = icmp eq i32 %v3_1000399c, 0
  br i1 %v4_1000399c, label %dec_label_pc_100039b1, label %dec_label_pc_100039a5

dec_label_pc_100039a5:                            ; preds = %dec_label_pc_10003999
  %v1_100039a8 = add nsw i32 %v4_10003978, 672
  %v2_100039a8 = inttoptr i32 %v1_100039a8 to i32*
  %v3_100039a8 = load i32, i32* %v2_100039a8, align 4
  %v4_100039a8 = icmp eq i32 %v3_100039a8, 0
  %v1_100039af = icmp eq i1 %v4_100039a8, false
  br i1 %v1_100039af, label %dec_label_pc_100039b7, label %dec_label_pc_100039b1

dec_label_pc_100039b1:                            ; preds = %dec_label_pc_100039a5, %dec_label_pc_10003999
  %v1_100039b1 = and i32 %v4_10003978, -65536
  %v2_100039b1 = or i32 %v1_100039b1, 65515
  br label %dec_label_pc_100039cc

dec_label_pc_100039b7:                            ; preds = %dec_label_pc_100039a5
  %v7_100039be = load i32, i32* %v2_100039a8, align 4
  call void @__pseudo_call(i32 %v7_100039be)
  %sext = mul i32 %v4_10003978, 65536
  %v4_100039c8 = sdiv i32 %sext, 65536
  %v7_100039c8 = and i32 %v4_10003978, -65536
  %v8_100039c8 = or i32 %v4_100039c8, %v7_100039c8
  br label %dec_label_pc_100039cc

dec_label_pc_100039cc:                            ; preds = %dec_label_pc_100039b1, %dec_label_pc_1000398b, %dec_label_pc_100039b7
  %v0_100039cf = phi i32 [ %v2_100039b1, %dec_label_pc_100039b1 ], [ %v2_1000398f, %dec_label_pc_1000398b ], [ %v8_100039c8, %dec_label_pc_100039b7 ]
  ret i32 %v0_100039cf

; uselistorder directives
  uselistorder i32 672, { 1, 0 }
  uselistorder label %dec_label_pc_100039cc, { 2, 0, 1 }
}

define i32 @function_100039d0(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100039d0:
  %v4_100039d4 = sext i16 %arg1 to i32
  store i32 %v4_100039d4, i32* @eax, align 4
  %v2_100039d8 = call i32 @TestFuncStatusAndPtr(i32 %v4_100039d4)
  store i32 %v2_100039d8, i32* @eax, align 4
  %v1_100039e0 = mul i32 %v2_100039d8, 65536
  %v1_100039e0.off = or i32 %v1_100039e0, 65535
  %tmp = icmp ult i32 %v1_100039e0.off, 131071
  br i1 %tmp, label %dec_label_pc_100039f5, label %dec_label_pc_100039e7

dec_label_pc_100039e7:                            ; preds = %dec_label_pc_100039d0
  store i32 %v4_100039d4, i32* @edx, align 4
  %v2_100039eb = call i32 @GetFuncStatusCode(i32 %v4_100039d4)
  br label %dec_label_pc_10003a2c

dec_label_pc_100039f5:                            ; preds = %dec_label_pc_100039d0
  %v1_100039f8 = add nsw i32 %v4_100039d4, 660
  %v2_100039f8 = inttoptr i32 %v1_100039f8 to i32*
  %v3_100039f8 = load i32, i32* %v2_100039f8, align 4
  %v4_100039f8 = icmp eq i32 %v3_100039f8, 0
  br i1 %v4_100039f8, label %dec_label_pc_10003a0d, label %dec_label_pc_10003a01

dec_label_pc_10003a01:                            ; preds = %dec_label_pc_100039f5
  %v1_10003a04 = add nsw i32 %v4_100039d4, 680
  %v2_10003a04 = inttoptr i32 %v1_10003a04 to i32*
  %v3_10003a04 = load i32, i32* %v2_10003a04, align 4
  %v4_10003a04 = icmp eq i32 %v3_10003a04, 0
  %v1_10003a0b = icmp eq i1 %v4_10003a04, false
  br i1 %v1_10003a0b, label %dec_label_pc_10003a13, label %dec_label_pc_10003a0d

dec_label_pc_10003a0d:                            ; preds = %dec_label_pc_10003a01, %dec_label_pc_100039f5
  %v1_10003a0d = and i32 %v4_100039d4, -65536
  %v2_10003a0d = or i32 %v1_10003a0d, 65515
  br label %dec_label_pc_10003a2c

dec_label_pc_10003a13:                            ; preds = %dec_label_pc_10003a01
  store i32 %arg2, i32* @edx, align 4
  %v7_10003a1e = load i32, i32* %v2_10003a04, align 4
  call void @__pseudo_call(i32 %v7_10003a1e)
  %sext = mul i32 %v4_100039d4, 65536
  %v4_10003a28 = sdiv i32 %sext, 65536
  %v7_10003a28 = and i32 %v4_100039d4, -65536
  %v8_10003a28 = or i32 %v4_10003a28, %v7_10003a28
  br label %dec_label_pc_10003a2c

dec_label_pc_10003a2c:                            ; preds = %dec_label_pc_10003a0d, %dec_label_pc_100039e7, %dec_label_pc_10003a13
  %v0_10003a2f = phi i32 [ %v2_10003a0d, %dec_label_pc_10003a0d ], [ %v2_100039eb, %dec_label_pc_100039e7 ], [ %v8_10003a28, %dec_label_pc_10003a13 ]
  ret i32 %v0_10003a2f

; uselistorder directives
  uselistorder i32 %v4_100039d4, { 0, 1, 2, 3, 4, 6, 5, 7, 8 }
  uselistorder label %dec_label_pc_10003a2c, { 2, 0, 1 }
}

define i32 @SendWord(i16 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_10003a34 = sext i16 %arg1 to i32
  store i32 %v4_10003a34, i32* @eax, align 4
  %v2_10003a38 = call i32 @TestFuncStatusAndPtr(i32 %v4_10003a34)
  store i32 %v2_10003a38, i32* @eax, align 4
  %v1_10003a40 = mul i32 %v2_10003a38, 65536
  %v1_10003a40.off = or i32 %v1_10003a40, 65535
  %tmp = icmp ult i32 %v1_10003a40.off, 131071
  br i1 %tmp, label %dec_label_pc_10003a55, label %dec_label_pc_10003a47

dec_label_pc_10003a47:                            ; preds = %entry
  %v2_10003a4b = call i32 @GetFuncStatusCode(i32 %v4_10003a34)
  br label %dec_label_pc_10003a8d

dec_label_pc_10003a55:                            ; preds = %entry
  %v1_10003a58 = add nsw i32 %v4_10003a34, 660
  %v2_10003a58 = inttoptr i32 %v1_10003a58 to i32*
  %v3_10003a58 = load i32, i32* %v2_10003a58, align 4
  %v4_10003a58 = icmp eq i32 %v3_10003a58, 0
  br i1 %v4_10003a58, label %dec_label_pc_10003a6d, label %dec_label_pc_10003a61

dec_label_pc_10003a61:                            ; preds = %dec_label_pc_10003a55
  %v1_10003a64 = add nsw i32 %v4_10003a34, 700
  %v2_10003a64 = inttoptr i32 %v1_10003a64 to i32*
  %v3_10003a64 = load i32, i32* %v2_10003a64, align 4
  %v4_10003a64 = icmp eq i32 %v3_10003a64, 0
  %v1_10003a6b = icmp eq i1 %v4_10003a64, false
  br i1 %v1_10003a6b, label %dec_label_pc_10003a73, label %dec_label_pc_10003a6d

dec_label_pc_10003a6d:                            ; preds = %dec_label_pc_10003a61, %dec_label_pc_10003a55
  %v1_10003a6d = and i32 %v4_10003a34, -65536
  %v2_10003a6d = or i32 %v1_10003a6d, 65515
  br label %dec_label_pc_10003a8d

dec_label_pc_10003a73:                            ; preds = %dec_label_pc_10003a61
  %v7_10003a7f = load i32, i32* %v2_10003a64, align 4
  call void @__pseudo_call(i32 %v7_10003a7f)
  %sext = mul i32 %v4_10003a34, 65536
  %v4_10003a89 = sdiv i32 %sext, 65536
  %v7_10003a89 = and i32 %v4_10003a34, -65536
  %v8_10003a89 = or i32 %v4_10003a89, %v7_10003a89
  br label %dec_label_pc_10003a8d

dec_label_pc_10003a8d:                            ; preds = %dec_label_pc_10003a6d, %dec_label_pc_10003a47, %dec_label_pc_10003a73
  %v0_10003a90 = phi i32 [ %v2_10003a6d, %dec_label_pc_10003a6d ], [ %v2_10003a4b, %dec_label_pc_10003a47 ], [ %v8_10003a89, %dec_label_pc_10003a73 ]
  ret i32 %v0_10003a90

; uselistorder directives
  uselistorder i32 700, { 1, 0 }
  uselistorder label %dec_label_pc_10003a8d, { 2, 0, 1 }
}

define i32 @WaitRecvWord(i16 %arg1) local_unnamed_addr {
entry:
  %v4_10003a95 = sext i16 %arg1 to i32
  store i32 %v4_10003a95, i32* @eax, align 4
  %v2_10003a99 = call i32 @TestFuncStatusAndPtr(i32 %v4_10003a95)
  store i32 %v2_10003a99, i32* @eax, align 4
  %v1_10003aa1 = mul i32 %v2_10003a99, 65536
  %v1_10003aa1.off = or i32 %v1_10003aa1, 65535
  %tmp = icmp ult i32 %v1_10003aa1.off, 131071
  br i1 %tmp, label %dec_label_pc_10003ab6, label %dec_label_pc_10003aa8

dec_label_pc_10003aa8:                            ; preds = %entry
  store i32 %v4_10003a95, i32* @edx, align 4
  %v2_10003aac = call i32 @GetFuncStatusCode(i32 %v4_10003a95)
  br label %dec_label_pc_10003ae9

dec_label_pc_10003ab6:                            ; preds = %entry
  %v1_10003ab9 = add nsw i32 %v4_10003a95, 660
  %v2_10003ab9 = inttoptr i32 %v1_10003ab9 to i32*
  %v3_10003ab9 = load i32, i32* %v2_10003ab9, align 4
  %v4_10003ab9 = icmp eq i32 %v3_10003ab9, 0
  br i1 %v4_10003ab9, label %dec_label_pc_10003ace, label %dec_label_pc_10003ac2

dec_label_pc_10003ac2:                            ; preds = %dec_label_pc_10003ab6
  %v1_10003ac5 = add nsw i32 %v4_10003a95, 684
  %v2_10003ac5 = inttoptr i32 %v1_10003ac5 to i32*
  %v3_10003ac5 = load i32, i32* %v2_10003ac5, align 4
  %v4_10003ac5 = icmp eq i32 %v3_10003ac5, 0
  %v1_10003acc = icmp eq i1 %v4_10003ac5, false
  br i1 %v1_10003acc, label %dec_label_pc_10003ad4, label %dec_label_pc_10003ace

dec_label_pc_10003ace:                            ; preds = %dec_label_pc_10003ac2, %dec_label_pc_10003ab6
  %v1_10003ace = and i32 %v4_10003a95, -65536
  %v2_10003ace = or i32 %v1_10003ace, 65515
  br label %dec_label_pc_10003ae9

dec_label_pc_10003ad4:                            ; preds = %dec_label_pc_10003ac2
  store i32 %v4_10003a95, i32* @edx, align 4
  %v7_10003adb = load i32, i32* %v2_10003ac5, align 4
  call void @__pseudo_call(i32 %v7_10003adb)
  %sext = mul i32 %v4_10003a95, 65536
  %v4_10003ae5 = sdiv i32 %sext, 65536
  %v7_10003ae5 = and i32 %v4_10003a95, -65536
  %v8_10003ae5 = or i32 %v4_10003ae5, %v7_10003ae5
  br label %dec_label_pc_10003ae9

dec_label_pc_10003ae9:                            ; preds = %dec_label_pc_10003ace, %dec_label_pc_10003aa8, %dec_label_pc_10003ad4
  %v0_10003aec = phi i32 [ %v2_10003ace, %dec_label_pc_10003ace ], [ %v2_10003aac, %dec_label_pc_10003aa8 ], [ %v8_10003ae5, %dec_label_pc_10003ad4 ]
  ret i32 %v0_10003aec

; uselistorder directives
  uselistorder i32 %v4_10003a95, { 0, 1, 3, 2, 4, 5, 7, 6, 8, 9 }
  uselistorder i32 684, { 1, 0 }
  uselistorder label %dec_label_pc_10003ae9, { 2, 0, 1 }
}

define i32 @function_10003aed(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10003aed:
  %v4_10003af1 = sext i16 %arg1 to i32
  store i32 %v4_10003af1, i32* @eax, align 4
  %v2_10003af5 = call i32 @TestFuncStatusAndPtr(i32 %v4_10003af1)
  store i32 %v2_10003af5, i32* @eax, align 4
  %v1_10003afd = mul i32 %v2_10003af5, 65536
  %v2_10003afd = sdiv i32 %v1_10003afd, 65536
  store i32 %v2_10003afd, i32* @ecx, align 4
  %v1_10003afd.off = or i32 %v1_10003afd, 65535
  %tmp = icmp ult i32 %v1_10003afd.off, 131071
  br i1 %tmp, label %dec_label_pc_10003b12, label %dec_label_pc_10003b04

dec_label_pc_10003b04:                            ; preds = %dec_label_pc_10003aed
  store i32 %v4_10003af1, i32* @edx, align 4
  %v2_10003b08 = call i32 @GetFuncStatusCode(i32 %v4_10003af1)
  br label %dec_label_pc_10003b4a

dec_label_pc_10003b12:                            ; preds = %dec_label_pc_10003aed
  %v1_10003b15 = add nsw i32 %v4_10003af1, 660
  %v2_10003b15 = inttoptr i32 %v1_10003b15 to i32*
  %v3_10003b15 = load i32, i32* %v2_10003b15, align 4
  %v4_10003b15 = icmp eq i32 %v3_10003b15, 0
  br i1 %v4_10003b15, label %dec_label_pc_10003b2a, label %dec_label_pc_10003b1e

dec_label_pc_10003b1e:                            ; preds = %dec_label_pc_10003b12
  store i32 %v4_10003af1, i32* @ecx, align 4
  %v1_10003b21 = add nsw i32 %v4_10003af1, 688
  %v2_10003b21 = inttoptr i32 %v1_10003b21 to i32*
  %v3_10003b21 = load i32, i32* %v2_10003b21, align 4
  %v4_10003b21 = icmp eq i32 %v3_10003b21, 0
  %v1_10003b28 = icmp eq i1 %v4_10003b21, false
  br i1 %v1_10003b28, label %dec_label_pc_10003b30, label %dec_label_pc_10003b2a

dec_label_pc_10003b2a:                            ; preds = %dec_label_pc_10003b1e, %dec_label_pc_10003b12
  %v1_10003b2a = and i32 %v4_10003af1, -65536
  %v2_10003b2a = or i32 %v1_10003b2a, 65515
  br label %dec_label_pc_10003b4a

dec_label_pc_10003b30:                            ; preds = %dec_label_pc_10003b1e
  %v4_10003b30 = and i32 %arg2, 65535
  %v5_10003b30 = load i32, i32* @edx, align 4
  %v6_10003b30 = and i32 %v5_10003b30, -65536
  %v7_10003b30 = or i32 %v6_10003b30, %v4_10003b30
  store i32 %v7_10003b30, i32* @edx, align 4
  store i32 %v4_10003af1, i32* @ecx, align 4
  %v7_10003b3c = load i32, i32* %v2_10003b21, align 4
  call void @__pseudo_call(i32 %v7_10003b3c)
  %sext = mul i32 %v4_10003af1, 65536
  %v4_10003b46 = sdiv i32 %sext, 65536
  %v7_10003b46 = and i32 %v4_10003af1, -65536
  %v8_10003b46 = or i32 %v4_10003b46, %v7_10003b46
  br label %dec_label_pc_10003b4a

dec_label_pc_10003b4a:                            ; preds = %dec_label_pc_10003b2a, %dec_label_pc_10003b04, %dec_label_pc_10003b30
  %v0_10003b4d = phi i32 [ %v2_10003b2a, %dec_label_pc_10003b2a ], [ %v2_10003b08, %dec_label_pc_10003b04 ], [ %v8_10003b46, %dec_label_pc_10003b30 ]
  ret i32 %v0_10003b4d

; uselistorder directives
  uselistorder i32 %v4_10003af1, { 0, 1, 3, 2, 5, 4, 6, 8, 7, 9, 10 }
  uselistorder label %dec_label_pc_10003b4a, { 2, 0, 1 }
}

define i32 @SendCommand(i16 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v4_10003b52 = sext i16 %arg1 to i32
  store i32 %v4_10003b52, i32* @eax, align 4
  %v2_10003b56 = call i32 @TestFuncStatusAndPtr(i32 %v4_10003b52)
  store i32 %v2_10003b56, i32* @eax, align 4
  %v1_10003b5e = mul i32 %v2_10003b56, 65536
  %v2_10003b5e = sdiv i32 %v1_10003b5e, 65536
  store i32 %v2_10003b5e, i32* @ecx, align 4
  %v1_10003b5e.off = or i32 %v1_10003b5e, 65535
  %tmp = icmp ult i32 %v1_10003b5e.off, 131071
  br i1 %tmp, label %dec_label_pc_10003b73, label %dec_label_pc_10003b65

dec_label_pc_10003b65:                            ; preds = %entry
  store i32 %v4_10003b52, i32* @edx, align 4
  %v2_10003b69 = call i32 @GetFuncStatusCode(i32 %v4_10003b52)
  br label %dec_label_pc_10003bb4

dec_label_pc_10003b73:                            ; preds = %entry
  %v1_10003b76 = add nsw i32 %v4_10003b52, 660
  %v2_10003b76 = inttoptr i32 %v1_10003b76 to i32*
  %v3_10003b76 = load i32, i32* %v2_10003b76, align 4
  %v4_10003b76 = icmp eq i32 %v3_10003b76, 0
  br i1 %v4_10003b76, label %dec_label_pc_10003b8b, label %dec_label_pc_10003b7f

dec_label_pc_10003b7f:                            ; preds = %dec_label_pc_10003b73
  store i32 %v4_10003b52, i32* @ecx, align 4
  %v1_10003b82 = add nsw i32 %v4_10003b52, 692
  %v2_10003b82 = inttoptr i32 %v1_10003b82 to i32*
  %v3_10003b82 = load i32, i32* %v2_10003b82, align 4
  %v4_10003b82 = icmp eq i32 %v3_10003b82, 0
  %v1_10003b89 = icmp eq i1 %v4_10003b82, false
  br i1 %v1_10003b89, label %dec_label_pc_10003b91, label %dec_label_pc_10003b8b

dec_label_pc_10003b8b:                            ; preds = %dec_label_pc_10003b7f, %dec_label_pc_10003b73
  %v1_10003b8b = and i32 %v4_10003b52, -65536
  %v2_10003b8b = or i32 %v1_10003b8b, 65515
  br label %dec_label_pc_10003bb4

dec_label_pc_10003b91:                            ; preds = %dec_label_pc_10003b7f
  %v6_10003b95 = and i32 %v4_10003b52, -65536
  %v4_10003b9a = and i32 %arg2, 65535
  %v7_10003b9a = or i32 %v6_10003b95, %v4_10003b9a
  store i32 %v7_10003b9a, i32* @ecx, align 4
  store i32 %v4_10003b52, i32* @edx, align 4
  %v7_10003ba6 = load i32, i32* %v2_10003b82, align 4
  call void @__pseudo_call(i32 %v7_10003ba6)
  %sext = mul i32 %v4_10003b52, 65536
  %v4_10003bb0 = sdiv i32 %sext, 65536
  %v7_10003bb0 = and i32 %v4_10003b52, -65536
  %v8_10003bb0 = or i32 %v4_10003bb0, %v7_10003bb0
  br label %dec_label_pc_10003bb4

dec_label_pc_10003bb4:                            ; preds = %dec_label_pc_10003b8b, %dec_label_pc_10003b65, %dec_label_pc_10003b91
  %v0_10003bb7 = phi i32 [ %v2_10003b8b, %dec_label_pc_10003b8b ], [ %v2_10003b69, %dec_label_pc_10003b65 ], [ %v8_10003bb0, %dec_label_pc_10003b91 ]
  ret i32 %v0_10003bb7

; uselistorder directives
  uselistorder i32 %v4_10003b52, { 0, 1, 4, 3, 2, 6, 5, 7, 9, 8, 10, 11 }
  uselistorder i32 692, { 1, 0 }
  uselistorder label %dec_label_pc_10003bb4, { 2, 0, 1 }
}

define i32 @function_10003bb8(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10003bb8:
  %v4_10003bbc = sext i16 %arg1 to i32
  store i32 %v4_10003bbc, i32* @eax, align 4
  %v2_10003bc0 = call i32 @TestFuncStatusAndPtr(i32 %v4_10003bbc)
  store i32 %v2_10003bc0, i32* @eax, align 4
  %v1_10003bc8 = mul i32 %v2_10003bc0, 65536
  %v1_10003bc8.off = or i32 %v1_10003bc8, 65535
  %tmp = icmp ult i32 %v1_10003bc8.off, 131071
  br i1 %tmp, label %dec_label_pc_10003bdd, label %dec_label_pc_10003bcf

dec_label_pc_10003bcf:                            ; preds = %dec_label_pc_10003bb8
  %v2_10003bd3 = call i32 @GetFuncStatusCode(i32 %v4_10003bbc)
  br label %dec_label_pc_10003c15

dec_label_pc_10003bdd:                            ; preds = %dec_label_pc_10003bb8
  %v1_10003be0 = add nsw i32 %v4_10003bbc, 660
  %v2_10003be0 = inttoptr i32 %v1_10003be0 to i32*
  %v3_10003be0 = load i32, i32* %v2_10003be0, align 4
  %v4_10003be0 = icmp eq i32 %v3_10003be0, 0
  br i1 %v4_10003be0, label %dec_label_pc_10003bf5, label %dec_label_pc_10003be9

dec_label_pc_10003be9:                            ; preds = %dec_label_pc_10003bdd
  %v1_10003bec = add nsw i32 %v4_10003bbc, 696
  %v2_10003bec = inttoptr i32 %v1_10003bec to i32*
  %v3_10003bec = load i32, i32* %v2_10003bec, align 4
  %v4_10003bec = icmp eq i32 %v3_10003bec, 0
  %v1_10003bf3 = icmp eq i1 %v4_10003bec, false
  br i1 %v1_10003bf3, label %dec_label_pc_10003bfb, label %dec_label_pc_10003bf5

dec_label_pc_10003bf5:                            ; preds = %dec_label_pc_10003be9, %dec_label_pc_10003bdd
  %v1_10003bf5 = and i32 %v4_10003bbc, -65536
  %v2_10003bf5 = or i32 %v1_10003bf5, 65515
  br label %dec_label_pc_10003c15

dec_label_pc_10003bfb:                            ; preds = %dec_label_pc_10003be9
  %v7_10003c07 = load i32, i32* %v2_10003bec, align 4
  call void @__pseudo_call(i32 %v7_10003c07)
  %sext = mul i32 %v4_10003bbc, 65536
  %v4_10003c11 = sdiv i32 %sext, 65536
  %v7_10003c11 = and i32 %v4_10003bbc, -65536
  %v8_10003c11 = or i32 %v4_10003c11, %v7_10003c11
  br label %dec_label_pc_10003c15

dec_label_pc_10003c15:                            ; preds = %dec_label_pc_10003bf5, %dec_label_pc_10003bcf, %dec_label_pc_10003bfb
  %v0_10003c18 = phi i32 [ %v2_10003bf5, %dec_label_pc_10003bf5 ], [ %v2_10003bd3, %dec_label_pc_10003bcf ], [ %v8_10003c11, %dec_label_pc_10003bfb ]
  ret i32 %v0_10003c18

; uselistorder directives
  uselistorder label %dec_label_pc_10003c15, { 2, 0, 1 }
}

define i32 @ShutdownEngine(i16 %arg1) local_unnamed_addr {
entry:
  %v4_10003c1d = sext i16 %arg1 to i32
  store i32 %v4_10003c1d, i32* @eax, align 4
  %v2_10003c21 = call i32 @TestFuncStatusAndPtr(i32 %v4_10003c1d)
  store i32 %v2_10003c21, i32* @eax, align 4
  %v1_10003c29 = mul i32 %v2_10003c21, 65536
  %v1_10003c29.off = or i32 %v1_10003c29, 65535
  %tmp = icmp ult i32 %v1_10003c29.off, 131071
  br i1 %tmp, label %dec_label_pc_10003c3e, label %dec_label_pc_10003c30

dec_label_pc_10003c30:                            ; preds = %entry
  %v2_10003c34 = call i32 @GetFuncStatusCode(i32 %v4_10003c1d)
  br label %dec_label_pc_10003c71

dec_label_pc_10003c3e:                            ; preds = %entry
  %v1_10003c41 = add nsw i32 %v4_10003c1d, 660
  %v2_10003c41 = inttoptr i32 %v1_10003c41 to i32*
  %v3_10003c41 = load i32, i32* %v2_10003c41, align 4
  %v4_10003c41 = icmp eq i32 %v3_10003c41, 0
  br i1 %v4_10003c41, label %dec_label_pc_10003c56, label %dec_label_pc_10003c4a

dec_label_pc_10003c4a:                            ; preds = %dec_label_pc_10003c3e
  %v1_10003c4d = add nsw i32 %v4_10003c1d, 708
  %v2_10003c4d = inttoptr i32 %v1_10003c4d to i32*
  %v3_10003c4d = load i32, i32* %v2_10003c4d, align 4
  %v4_10003c4d = icmp eq i32 %v3_10003c4d, 0
  %v1_10003c54 = icmp eq i1 %v4_10003c4d, false
  br i1 %v1_10003c54, label %dec_label_pc_10003c5c, label %dec_label_pc_10003c56

dec_label_pc_10003c56:                            ; preds = %dec_label_pc_10003c4a, %dec_label_pc_10003c3e
  %v1_10003c56 = and i32 %v4_10003c1d, -65536
  %v2_10003c56 = or i32 %v1_10003c56, 65515
  br label %dec_label_pc_10003c71

dec_label_pc_10003c5c:                            ; preds = %dec_label_pc_10003c4a
  %v7_10003c63 = load i32, i32* %v2_10003c4d, align 4
  call void @__pseudo_call(i32 %v7_10003c63)
  %sext = mul i32 %v4_10003c1d, 65536
  %v4_10003c6d = sdiv i32 %sext, 65536
  %v7_10003c6d = and i32 %v4_10003c1d, -65536
  %v8_10003c6d = or i32 %v4_10003c6d, %v7_10003c6d
  br label %dec_label_pc_10003c71

dec_label_pc_10003c71:                            ; preds = %dec_label_pc_10003c56, %dec_label_pc_10003c30, %dec_label_pc_10003c5c
  %v0_10003c74 = phi i32 [ %v2_10003c56, %dec_label_pc_10003c56 ], [ %v2_10003c34, %dec_label_pc_10003c30 ], [ %v8_10003c6d, %dec_label_pc_10003c5c ]
  ret i32 %v0_10003c74

; uselistorder directives
  uselistorder i32 708, { 1, 0 }
  uselistorder label %dec_label_pc_10003c71, { 2, 0, 1 }
}

define i32 @InitEngine(i16 %arg1) local_unnamed_addr {
entry:
  %v4_10003c79 = sext i16 %arg1 to i32
  store i32 %v4_10003c79, i32* @eax, align 4
  %v2_10003c7d = call i32 @TestFuncStatusAndPtr(i32 %v4_10003c79)
  store i32 %v2_10003c7d, i32* @eax, align 4
  %v1_10003c85 = mul i32 %v2_10003c7d, 65536
  %v1_10003c85.off = or i32 %v1_10003c85, 65535
  %tmp = icmp ult i32 %v1_10003c85.off, 131071
  br i1 %tmp, label %dec_label_pc_10003c9a, label %dec_label_pc_10003c8c

dec_label_pc_10003c8c:                            ; preds = %entry
  %v2_10003c90 = call i32 @GetFuncStatusCode(i32 %v4_10003c79)
  br label %dec_label_pc_10003ccd

dec_label_pc_10003c9a:                            ; preds = %entry
  %v1_10003c9d = add nsw i32 %v4_10003c79, 660
  %v2_10003c9d = inttoptr i32 %v1_10003c9d to i32*
  %v3_10003c9d = load i32, i32* %v2_10003c9d, align 4
  %v4_10003c9d = icmp eq i32 %v3_10003c9d, 0
  br i1 %v4_10003c9d, label %dec_label_pc_10003cb2, label %dec_label_pc_10003ca6

dec_label_pc_10003ca6:                            ; preds = %dec_label_pc_10003c9a
  %v1_10003ca9 = add nsw i32 %v4_10003c79, 712
  %v2_10003ca9 = inttoptr i32 %v1_10003ca9 to i32*
  %v3_10003ca9 = load i32, i32* %v2_10003ca9, align 4
  %v4_10003ca9 = icmp eq i32 %v3_10003ca9, 0
  %v1_10003cb0 = icmp eq i1 %v4_10003ca9, false
  br i1 %v1_10003cb0, label %dec_label_pc_10003cb8, label %dec_label_pc_10003cb2

dec_label_pc_10003cb2:                            ; preds = %dec_label_pc_10003ca6, %dec_label_pc_10003c9a
  %v1_10003cb2 = and i32 %v4_10003c79, -65536
  %v2_10003cb2 = or i32 %v1_10003cb2, 65515
  br label %dec_label_pc_10003ccd

dec_label_pc_10003cb8:                            ; preds = %dec_label_pc_10003ca6
  %v7_10003cbf = load i32, i32* %v2_10003ca9, align 4
  call void @__pseudo_call(i32 %v7_10003cbf)
  %sext = mul i32 %v4_10003c79, 65536
  %v4_10003cc9 = sdiv i32 %sext, 65536
  %v7_10003cc9 = and i32 %v4_10003c79, -65536
  %v8_10003cc9 = or i32 %v4_10003cc9, %v7_10003cc9
  br label %dec_label_pc_10003ccd

dec_label_pc_10003ccd:                            ; preds = %dec_label_pc_10003cb2, %dec_label_pc_10003c8c, %dec_label_pc_10003cb8
  %v0_10003cd0 = phi i32 [ %v2_10003cb2, %dec_label_pc_10003cb2 ], [ %v2_10003c90, %dec_label_pc_10003c8c ], [ %v8_10003cc9, %dec_label_pc_10003cb8 ]
  ret i32 %v0_10003cd0

; uselistorder directives
  uselistorder i32 712, { 1, 0 }
  uselistorder label %dec_label_pc_10003ccd, { 2, 0, 1 }
}

define i32 @ResetEngine(i16 %arg1) local_unnamed_addr {
entry:
  %v4_10003cd5 = sext i16 %arg1 to i32
  store i32 %v4_10003cd5, i32* @eax, align 4
  %v2_10003cd9 = call i32 @TestFuncStatusAndPtr(i32 %v4_10003cd5)
  store i32 %v2_10003cd9, i32* @eax, align 4
  %v1_10003ce1 = mul i32 %v2_10003cd9, 65536
  %v1_10003ce1.off = or i32 %v1_10003ce1, 65535
  %tmp = icmp ult i32 %v1_10003ce1.off, 131071
  br i1 %tmp, label %dec_label_pc_10003cf6, label %dec_label_pc_10003ce8

dec_label_pc_10003ce8:                            ; preds = %entry
  %v2_10003cec = call i32 @GetFuncStatusCode(i32 %v4_10003cd5)
  br label %dec_label_pc_10003d29

dec_label_pc_10003cf6:                            ; preds = %entry
  %v1_10003cf9 = add nsw i32 %v4_10003cd5, 660
  %v2_10003cf9 = inttoptr i32 %v1_10003cf9 to i32*
  %v3_10003cf9 = load i32, i32* %v2_10003cf9, align 4
  %v4_10003cf9 = icmp eq i32 %v3_10003cf9, 0
  br i1 %v4_10003cf9, label %dec_label_pc_10003d0e, label %dec_label_pc_10003d02

dec_label_pc_10003d02:                            ; preds = %dec_label_pc_10003cf6
  %v1_10003d05 = add nsw i32 %v4_10003cd5, 716
  %v2_10003d05 = inttoptr i32 %v1_10003d05 to i32*
  %v3_10003d05 = load i32, i32* %v2_10003d05, align 4
  %v4_10003d05 = icmp eq i32 %v3_10003d05, 0
  %v1_10003d0c = icmp eq i1 %v4_10003d05, false
  br i1 %v1_10003d0c, label %dec_label_pc_10003d14, label %dec_label_pc_10003d0e

dec_label_pc_10003d0e:                            ; preds = %dec_label_pc_10003d02, %dec_label_pc_10003cf6
  %v1_10003d0e = and i32 %v4_10003cd5, -65536
  %v2_10003d0e = or i32 %v1_10003d0e, 65515
  br label %dec_label_pc_10003d29

dec_label_pc_10003d14:                            ; preds = %dec_label_pc_10003d02
  %v7_10003d1b = load i32, i32* %v2_10003d05, align 4
  call void @__pseudo_call(i32 %v7_10003d1b)
  %sext = mul i32 %v4_10003cd5, 65536
  %v4_10003d25 = sdiv i32 %sext, 65536
  %v7_10003d25 = and i32 %v4_10003cd5, -65536
  %v8_10003d25 = or i32 %v4_10003d25, %v7_10003d25
  br label %dec_label_pc_10003d29

dec_label_pc_10003d29:                            ; preds = %dec_label_pc_10003d0e, %dec_label_pc_10003ce8, %dec_label_pc_10003d14
  %v0_10003d2c = phi i32 [ %v2_10003d0e, %dec_label_pc_10003d0e ], [ %v2_10003cec, %dec_label_pc_10003ce8 ], [ %v8_10003d25, %dec_label_pc_10003d14 ]
  ret i32 %v0_10003d2c

; uselistorder directives
  uselistorder i32 716, { 1, 0 }
  uselistorder label %dec_label_pc_10003d29, { 2, 0, 1 }
}

define i32 @OpenSession(i32 %arg1, i32 %arg2, i16 %arg3) local_unnamed_addr {
entry:
  %v4_10003d31 = icmp eq i32 %arg1, 0
  %v1_10003d35 = icmp eq i1 %v4_10003d31, false
  br i1 %v1_10003d35, label %dec_label_pc_10003d40, label %dec_label_pc_10003d37

dec_label_pc_10003d37:                            ; preds = %entry
  %v0_10003d37 = load i32, i32* @eax, align 4
  %v1_10003d37 = and i32 %v0_10003d37, -65536
  %v2_10003d37 = or i32 %v1_10003d37, 65526
  br label %dec_label_pc_10003f76

dec_label_pc_10003d40:                            ; preds = %entry
  %v4_10003d40 = icmp eq i32 %arg2, 0
  %v1_10003d44 = icmp eq i1 %v4_10003d40, false
  br i1 %v1_10003d44, label %dec_label_pc_10003d4f, label %dec_label_pc_10003d46

dec_label_pc_10003d46:                            ; preds = %dec_label_pc_10003d40
  %v0_10003d46 = load i32, i32* @eax, align 4
  %v1_10003d46 = and i32 %v0_10003d46, -65536
  %v2_10003d46 = or i32 %v1_10003d46, 65533
  br label %dec_label_pc_10003f76

dec_label_pc_10003d4f:                            ; preds = %dec_label_pc_10003d40
  %v1_10003d52 = add i32 %arg1, 468
  %v2_10003d52 = inttoptr i32 %v1_10003d52 to i32*
  %v3_10003d52 = load i32, i32* %v2_10003d52, align 4
  %v4_10003d52 = icmp eq i32 %v3_10003d52, 0
  br i1 %v4_10003d52, label %dec_label_pc_10003d64, label %dec_label_pc_10003d5b

dec_label_pc_10003d5b:                            ; preds = %dec_label_pc_10003d4f
  %v1_10003d5b = and i32 %arg1, -65536
  %v2_10003d5b = or i32 %v1_10003d5b, 65517
  br label %dec_label_pc_10003f76

dec_label_pc_10003d64:                            ; preds = %dec_label_pc_10003d4f
  %v1_10003d68 = call i32 @ClearFuncStatusCode(i32 %arg1)
  store i32 %arg1, i32* @edx, align 4
  %v1_10003d73 = add i32 %arg1, 200
  %v2_10003d73 = inttoptr i32 %v1_10003d73 to i32*
  store i32 0, i32* %v2_10003d73, align 4
  %v2_10003d85 = call i32 @function_10003844(i32 %arg1, i32 %arg2)
  %v3_10003d85 = trunc i32 %v2_10003d85 to i16
  %sext = mul i32 %v2_10003d85, 65536
  %v4_10003d91 = sdiv i32 %sext, 65536
  store i32 %v4_10003d91, i32* @edx, align 4
  %v2_10003d95 = icmp eq i16 %v3_10003d85, 0
  %v1_10003d97 = icmp eq i1 %v2_10003d95, false
  br i1 %v1_10003d97, label %dec_label_pc_10003dac, label %dec_label_pc_10003d99

dec_label_pc_10003d99:                            ; preds = %dec_label_pc_10003d64
  %v5_10003d9f = call i32 @SetInterfaceType(i32 %arg1, i16 1, i32 %v4_10003d91)
  br label %dec_label_pc_10003f21

dec_label_pc_10003dac:                            ; preds = %dec_label_pc_10003d64
  store i32 %arg1, i32* @edx, align 4
  %v4_10003db4 = call i32 @function_100032ac(i32 %arg1, i32 %arg2, i32 %v4_10003d91)
  %v5_10003db4 = trunc i32 %v4_10003db4 to i16
  %sext3 = mul i32 %v4_10003db4, 65536
  %v4_10003dc0 = sdiv i32 %sext3, 65536
  %v2_10003dc4 = icmp eq i16 %v5_10003db4, 0
  %v1_10003dc6 = icmp eq i1 %v2_10003dc4, false
  br i1 %v1_10003dc6, label %dec_label_pc_10003ddb, label %dec_label_pc_10003dc8

dec_label_pc_10003dc8:                            ; preds = %dec_label_pc_10003dac
  %v5_10003dce = call i32 @SetInterfaceType(i32 %arg1, i16 1, i32 %v4_10003dc0)
  br label %dec_label_pc_10003f21

dec_label_pc_10003ddb:                            ; preds = %dec_label_pc_10003dac
  store i32 %arg1, i32* @eax, align 4
  %v4_10003de3 = call i32 @function_10003838(i32 %arg1, i32 %arg2, i32 %v4_10003dc0)
  %v5_10003de3 = trunc i32 %v4_10003de3 to i16
  %sext4 = mul i32 %v4_10003de3, 65536
  %v4_10003def = sdiv i32 %sext4, 65536
  %v2_10003df3 = icmp eq i16 %v5_10003de3, 0
  %v1_10003df5 = icmp eq i1 %v2_10003df3, false
  br i1 %v1_10003df5, label %dec_label_pc_10003e0a, label %dec_label_pc_10003df7

dec_label_pc_10003df7:                            ; preds = %dec_label_pc_10003ddb
  store i32 %arg1, i32* @edx, align 4
  %v5_10003dfd = call i32 @SetInterfaceType(i32 %arg1, i16 3, i32 %v4_10003def)
  br label %dec_label_pc_10003f21

dec_label_pc_10003e0a:                            ; preds = %dec_label_pc_10003ddb
  store i32 %arg2, i32* @eax, align 4
  %v4_10003e12 = call i32 @function_1000382c(i32 %arg1, i32 %arg2, i32 %v4_10003def)
  %v5_10003e12 = trunc i32 %v4_10003e12 to i16
  store i32 %v4_10003e12, i32* @eax, align 4
  %sext5 = mul i32 %v4_10003e12, 65536
  %v4_10003e1e = sdiv i32 %sext5, 65536
  store i32 %v4_10003e1e, i32* @edx, align 4
  %v2_10003e22 = icmp eq i16 %v5_10003e12, 0
  %v1_10003e24 = icmp eq i1 %v2_10003e22, false
  br i1 %v1_10003e24, label %dec_label_pc_10003e39, label %dec_label_pc_10003e26

dec_label_pc_10003e26:                            ; preds = %dec_label_pc_10003e0a
  %v5_10003e2c = call i32 @SetInterfaceType(i32 %arg1, i16 6, i32 %v4_10003e1e)
  br label %dec_label_pc_10003f21

dec_label_pc_10003e39:                            ; preds = %dec_label_pc_10003e0a
  store i32 %arg1, i32* @edx, align 4
  %v4_10003e41 = call i32 @function_100038c1(i32 %arg1, i32 %arg2, i32 %v4_10003e1e)
  %v5_10003e41 = trunc i32 %v4_10003e41 to i16
  %sext6 = mul i32 %v4_10003e41, 65536
  %v4_10003e4d = sdiv i32 %sext6, 65536
  %v2_10003e51 = icmp eq i16 %v5_10003e41, 0
  %v1_10003e53 = icmp eq i1 %v2_10003e51, false
  br i1 %v1_10003e53, label %dec_label_pc_10003e68, label %dec_label_pc_10003e55

dec_label_pc_10003e55:                            ; preds = %dec_label_pc_10003e39
  %v5_10003e5b = call i32 @SetInterfaceType(i32 %arg1, i16 4, i32 %v4_10003e4d)
  br label %dec_label_pc_10003f21

dec_label_pc_10003e68:                            ; preds = %dec_label_pc_10003e39
  store i32 %arg2, i32* @edx, align 4
  store i32 %arg1, i32* @eax, align 4
  %v4_10003e70 = call i32 @function_100037b7(i32 %arg1, i32 %arg2, i32 %v4_10003e4d)
  %v5_10003e70 = trunc i32 %v4_10003e70 to i16
  %sext7 = mul i32 %v4_10003e70, 65536
  %v4_10003e7c = sdiv i32 %sext7, 65536
  %v2_10003e80 = icmp eq i16 %v5_10003e70, 0
  %v1_10003e82 = icmp eq i1 %v2_10003e80, false
  br i1 %v1_10003e82, label %dec_label_pc_10003e97, label %dec_label_pc_10003e84

dec_label_pc_10003e84:                            ; preds = %dec_label_pc_10003e68
  store i32 %arg1, i32* @edx, align 4
  %v5_10003e8a = call i32 @SetInterfaceType(i32 %arg1, i16 5, i32 %v4_10003e7c)
  br label %dec_label_pc_10003f21

dec_label_pc_10003e97:                            ; preds = %dec_label_pc_10003e68
  %v4_10003e9f = call i32 @function_100037c3(i32 %arg1, i32 %arg2, i32 %v4_10003e7c)
  %v5_10003e9f = trunc i32 %v4_10003e9f to i16
  %sext8 = mul i32 %v4_10003e9f, 65536
  %v4_10003eab = sdiv i32 %sext8, 65536
  store i32 %v4_10003eab, i32* @edx, align 4
  %v2_10003eaf = icmp eq i16 %v5_10003e9f, 0
  %v1_10003eb1 = icmp eq i1 %v2_10003eaf, false
  br i1 %v1_10003eb1, label %dec_label_pc_10003ec3, label %dec_label_pc_10003eb3

dec_label_pc_10003eb3:                            ; preds = %dec_label_pc_10003e97
  %v5_10003eb9 = call i32 @SetInterfaceType(i32 %arg1, i16 7, i32 %v4_10003eab)
  br label %dec_label_pc_10003f21

dec_label_pc_10003ec3:                            ; preds = %dec_label_pc_10003e97
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg1, i32* @edx, align 4
  %v4_10003ecb = inttoptr i32 %arg2 to i8*
  %v5_10003ecb = call i32 @function_100036f0(i32 %arg1, i8* %v4_10003ecb, i32 %v4_10003eab)
  %v6_10003ecb = trunc i32 %v5_10003ecb to i16
  %sext9 = mul i32 %v5_10003ecb, 65536
  %v4_10003ed7 = sdiv i32 %sext9, 65536
  %v2_10003edb = icmp eq i16 %v6_10003ecb, 0
  %v1_10003edd = icmp eq i1 %v2_10003edb, false
  br i1 %v1_10003edd, label %dec_label_pc_10003eef, label %dec_label_pc_10003edf

dec_label_pc_10003edf:                            ; preds = %dec_label_pc_10003ec3
  %v5_10003ee5 = call i32 @SetInterfaceType(i32 %arg1, i16 9, i32 %v4_10003ed7)
  br label %dec_label_pc_10003f21

dec_label_pc_10003eef:                            ; preds = %dec_label_pc_10003ec3
  store i32 %arg2, i32* @edx, align 4
  %v4_10003ef7 = call i32 @function_10003679(i32 %arg1, i32 %arg2, i32 %v4_10003ed7)
  %v5_10003ef7 = trunc i32 %v4_10003ef7 to i16
  %sext10 = mul i32 %v4_10003ef7, 65536
  %v4_10003f03 = sdiv i32 %sext10, 65536
  %v2_10003f07 = icmp eq i16 %v5_10003ef7, 0
  %v1_10003f09 = icmp eq i1 %v2_10003f07, false
  br i1 %v1_10003f09, label %dec_label_pc_10003f1b, label %dec_label_pc_10003f0b

dec_label_pc_10003f0b:                            ; preds = %dec_label_pc_10003eef
  store i32 %arg1, i32* @edx, align 4
  %v5_10003f11 = call i32 @SetInterfaceType(i32 %arg1, i16 2, i32 %v4_10003f03)
  br label %dec_label_pc_10003f21

dec_label_pc_10003f1b:                            ; preds = %dec_label_pc_10003eef
  %v2_10003f1b = and i32 %v4_10003f03, -65536
  %v3_10003f1b = or i32 %v2_10003f1b, 65519
  br label %dec_label_pc_10003f76

dec_label_pc_10003f21:                            ; preds = %dec_label_pc_10003f0b, %dec_label_pc_10003edf, %dec_label_pc_10003eb3, %dec_label_pc_10003e84, %dec_label_pc_10003e55, %dec_label_pc_10003e26, %dec_label_pc_10003df7, %dec_label_pc_10003dc8, %dec_label_pc_10003d99
  %v1_10003f28 = add i32 %arg1, 210
  %v1_10003f2f = call i32 @function_1000d570(i32 %v1_10003f28)
  %v1_10003f3a = add i32 %arg1, 208
  %v2_10003f3a = inttoptr i32 %v1_10003f3a to i16*
  store i16 0, i16* %v2_10003f3a, align 2
  %v4_10003f43 = sext i16 %arg3 to i32
  %v1_10003f47 = icmp eq i16 %arg3, 0
  br i1 %v1_10003f47, label %dec_label_pc_10003f73, label %dec_label_pc_10003f4b.preheader

dec_label_pc_10003f4b.preheader:                  ; preds = %dec_label_pc_10003f21
  %v1_10003f4f = trunc i32 %arg1 to i16
  br label %dec_label_pc_10003f4b

dec_label_pc_10003f4b:                            ; preds = %dec_label_pc_10003f4b.preheader, %dec_label_pc_10003f4b
  %v2_10003f4f = call i32 @function_10003f7a(i16 %v1_10003f4f)
  %v3_10003f4f = trunc i32 %v2_10003f4f to i16
  %sext2 = mul i32 %v2_10003f4f, 65536
  %v4_10003f5b = sdiv i32 %sext2, 65536
  %tmp39 = icmp slt i16 %v3_10003f4f, 1
  br i1 %tmp39, label %dec_label_pc_10003f65, label %dec_label_pc_10003f4b

dec_label_pc_10003f65:                            ; preds = %dec_label_pc_10003f4b
  %v2_10003f5f = icmp ne i16 %v3_10003f4f, 0
  %v2_10003f6b = icmp eq i1 %v2_10003f5f, false
  br i1 %v2_10003f6b, label %dec_label_pc_10003f73, label %dec_label_pc_10003f6d

dec_label_pc_10003f6d:                            ; preds = %dec_label_pc_10003f65
  br label %dec_label_pc_10003f76

dec_label_pc_10003f73:                            ; preds = %dec_label_pc_10003f65, %dec_label_pc_10003f21
  %v11_10003f73 = phi i32 [ %v4_10003f5b, %dec_label_pc_10003f65 ], [ %v4_10003f43, %dec_label_pc_10003f21 ]
  %v12_10003f73 = and i32 %v11_10003f73, -65536
  br label %dec_label_pc_10003f76

dec_label_pc_10003f76:                            ; preds = %dec_label_pc_10003f6d, %dec_label_pc_10003f1b, %dec_label_pc_10003d5b, %dec_label_pc_10003d46, %dec_label_pc_10003d37, %dec_label_pc_10003f73
  %v0_10003f79 = phi i32 [ %v4_10003f5b, %dec_label_pc_10003f6d ], [ %v3_10003f1b, %dec_label_pc_10003f1b ], [ %v2_10003d5b, %dec_label_pc_10003d5b ], [ %v2_10003d46, %dec_label_pc_10003d46 ], [ %v2_10003d37, %dec_label_pc_10003d37 ], [ %v12_10003f73, %dec_label_pc_10003f73 ]
  ret i32 %v0_10003f79

; uselistorder directives
  uselistorder i32 %v4_10003f5b, { 1, 0 }
  uselistorder i32 %v4_10003eab, { 1, 2, 0 }
  uselistorder i32 %v4_10003e1e, { 1, 2, 0 }
  uselistorder i32 %v4_10003e12, { 0, 2, 1 }
  uselistorder i32 %v4_10003d91, { 1, 2, 0 }
  uselistorder i16 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 0, 13, 1, 12, 2, 3, 11, 4, 5, 10, 6, 7, 8, 9 }
  uselistorder i32 %arg1, { 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_10003f76, { 5, 0, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_10003f4b, { 1, 0 }
}

define i32 @function_10003f7a(i16 %arg1) local_unnamed_addr {
dec_label_pc_10003f7a:
  %v4_10003f7e = sext i16 %arg1 to i32
  store i32 %v4_10003f7e, i32* @eax, align 4
  %v2_10003f82 = call i32 @TestFuncStatusAndPtr(i32 %v4_10003f7e)
  store i32 %v2_10003f82, i32* @eax, align 4
  %v1_10003f8a = mul i32 %v2_10003f82, 65536
  %v1_10003f8a.off = or i32 %v1_10003f8a, 65535
  %tmp = icmp ult i32 %v1_10003f8a.off, 131071
  br i1 %tmp, label %dec_label_pc_10003f9f, label %dec_label_pc_10003f91

dec_label_pc_10003f91:                            ; preds = %dec_label_pc_10003f7a
  %v2_10003f95 = call i32 @GetFuncStatusCode(i32 %v4_10003f7e)
  br label %dec_label_pc_10003fd2

dec_label_pc_10003f9f:                            ; preds = %dec_label_pc_10003f7a
  %v1_10003fa2 = add nsw i32 %v4_10003f7e, 660
  %v2_10003fa2 = inttoptr i32 %v1_10003fa2 to i32*
  %v3_10003fa2 = load i32, i32* %v2_10003fa2, align 4
  %v4_10003fa2 = icmp eq i32 %v3_10003fa2, 0
  br i1 %v4_10003fa2, label %dec_label_pc_10003fb7, label %dec_label_pc_10003fab

dec_label_pc_10003fab:                            ; preds = %dec_label_pc_10003f9f
  %v1_10003fae = add nsw i32 %v4_10003f7e, 720
  %v2_10003fae = inttoptr i32 %v1_10003fae to i32*
  %v3_10003fae = load i32, i32* %v2_10003fae, align 4
  %v4_10003fae = icmp eq i32 %v3_10003fae, 0
  %v1_10003fb5 = icmp eq i1 %v4_10003fae, false
  br i1 %v1_10003fb5, label %dec_label_pc_10003fbd, label %dec_label_pc_10003fb7

dec_label_pc_10003fb7:                            ; preds = %dec_label_pc_10003fab, %dec_label_pc_10003f9f
  %v1_10003fb7 = and i32 %v4_10003f7e, -65536
  %v2_10003fb7 = or i32 %v1_10003fb7, 65515
  br label %dec_label_pc_10003fd2

dec_label_pc_10003fbd:                            ; preds = %dec_label_pc_10003fab
  %v7_10003fc4 = load i32, i32* %v2_10003fae, align 4
  call void @__pseudo_call(i32 %v7_10003fc4)
  %sext = mul i32 %v4_10003f7e, 65536
  %v4_10003fce = sdiv i32 %sext, 65536
  %v7_10003fce = and i32 %v4_10003f7e, -65536
  %v8_10003fce = or i32 %v4_10003fce, %v7_10003fce
  br label %dec_label_pc_10003fd2

dec_label_pc_10003fd2:                            ; preds = %dec_label_pc_10003fb7, %dec_label_pc_10003f91, %dec_label_pc_10003fbd
  %v0_10003fd5 = phi i32 [ %v2_10003fb7, %dec_label_pc_10003fb7 ], [ %v2_10003f95, %dec_label_pc_10003f91 ], [ %v8_10003fce, %dec_label_pc_10003fbd ]
  ret i32 %v0_10003fd5

; uselistorder directives
  uselistorder label %dec_label_pc_10003fd2, { 2, 0, 1 }
}

define i32 @IdQuery(i16 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_10003fda = sext i16 %arg1 to i32
  store i32 %v4_10003fda, i32* @eax, align 4
  %v2_10003fde = call i32 @TestFuncStatusAndPtr(i32 %v4_10003fda)
  store i32 %v2_10003fde, i32* @eax, align 4
  %v1_10003fe6 = mul i32 %v2_10003fde, 65536
  %v1_10003fe6.off = or i32 %v1_10003fe6, 65535
  %tmp = icmp ult i32 %v1_10003fe6.off, 131071
  br i1 %tmp, label %dec_label_pc_10003ffb, label %dec_label_pc_10003fed

dec_label_pc_10003fed:                            ; preds = %entry
  %v2_10003ff1 = call i32 @GetFuncStatusCode(i32 %v4_10003fda)
  br label %dec_label_pc_10004032

dec_label_pc_10003ffb:                            ; preds = %entry
  %v1_10003ffe = add nsw i32 %v4_10003fda, 660
  %v2_10003ffe = inttoptr i32 %v1_10003ffe to i32*
  %v3_10003ffe = load i32, i32* %v2_10003ffe, align 4
  %v4_10003ffe = icmp eq i32 %v3_10003ffe, 0
  br i1 %v4_10003ffe, label %dec_label_pc_10004013, label %dec_label_pc_10004007

dec_label_pc_10004007:                            ; preds = %dec_label_pc_10003ffb
  %v1_1000400a = add nsw i32 %v4_10003fda, 728
  %v2_1000400a = inttoptr i32 %v1_1000400a to i32*
  %v3_1000400a = load i32, i32* %v2_1000400a, align 4
  %v4_1000400a = icmp eq i32 %v3_1000400a, 0
  %v1_10004011 = icmp eq i1 %v4_1000400a, false
  br i1 %v1_10004011, label %dec_label_pc_10004019, label %dec_label_pc_10004013

dec_label_pc_10004013:                            ; preds = %dec_label_pc_10004007, %dec_label_pc_10003ffb
  %v1_10004013 = and i32 %v4_10003fda, -65536
  %v2_10004013 = or i32 %v1_10004013, 65515
  br label %dec_label_pc_10004032

dec_label_pc_10004019:                            ; preds = %dec_label_pc_10004007
  %v7_10004024 = load i32, i32* %v2_1000400a, align 4
  call void @__pseudo_call(i32 %v7_10004024)
  %sext = mul i32 %v4_10003fda, 65536
  %v4_1000402e = sdiv i32 %sext, 65536
  %v7_1000402e = and i32 %v4_10003fda, -65536
  %v8_1000402e = or i32 %v4_1000402e, %v7_1000402e
  br label %dec_label_pc_10004032

dec_label_pc_10004032:                            ; preds = %dec_label_pc_10004013, %dec_label_pc_10003fed, %dec_label_pc_10004019
  %v0_10004035 = phi i32 [ %v2_10004013, %dec_label_pc_10004013 ], [ %v2_10003ff1, %dec_label_pc_10003fed ], [ %v8_1000402e, %dec_label_pc_10004019 ]
  ret i32 %v0_10004035

; uselistorder directives
  uselistorder label %dec_label_pc_10004032, { 2, 0, 1 }
}

define i32 @CloseSession(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000403e = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000403e, i32* @eax, align 4
  %v1_10004046 = mul i32 %v1_1000403e, 65536
  %v1_10004046.off = or i32 %v1_10004046, 65535
  %tmp = icmp ult i32 %v1_10004046.off, 131071
  br i1 %tmp, label %dec_label_pc_1000405b, label %dec_label_pc_1000404d

dec_label_pc_1000404d:                            ; preds = %entry
  %v1_10004051 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100040c5

dec_label_pc_1000405b:                            ; preds = %entry
  %v1_1000405e = add i32 %arg1, 660
  %v2_1000405e = inttoptr i32 %v1_1000405e to i32*
  %v3_1000405e = load i32, i32* %v2_1000405e, align 4
  %v4_1000405e = icmp eq i32 %v3_1000405e, 0
  br i1 %v4_1000405e, label %dec_label_pc_10004073, label %dec_label_pc_10004067

dec_label_pc_10004067:                            ; preds = %dec_label_pc_1000405b
  %v1_1000406a = add i32 %arg1, 724
  %v2_1000406a = inttoptr i32 %v1_1000406a to i32*
  %v3_1000406a = load i32, i32* %v2_1000406a, align 4
  %v4_1000406a = icmp eq i32 %v3_1000406a, 0
  %v1_10004071 = icmp eq i1 %v4_1000406a, false
  br i1 %v1_10004071, label %dec_label_pc_10004079, label %dec_label_pc_10004073

dec_label_pc_10004073:                            ; preds = %dec_label_pc_10004067, %dec_label_pc_1000405b
  %v1_10004073 = and i32 %arg1, -65536
  %v2_10004073 = or i32 %v1_10004073, 65515
  br label %dec_label_pc_100040c5

dec_label_pc_10004079:                            ; preds = %dec_label_pc_10004067
  %v7_10004080 = load i32, i32* %v2_1000406a, align 4
  call void @__pseudo_call(i32 %v7_10004080)
  %v1_10004086 = mul i32 %arg1, 65536
  %v1_10004086.off = or i32 %v1_10004086, 65535
  %tmp9 = icmp ult i32 %v1_10004086.off, 131071
  br i1 %tmp9, label %dec_label_pc_10004098, label %dec_label_pc_10004092

dec_label_pc_10004092:                            ; preds = %dec_label_pc_10004079
  %v2_10004086 = sdiv i32 %v1_10004086, 65536
  %v7_10004092 = and i32 %arg1, -65536
  %v8_10004092 = or i32 %v2_10004086, %v7_10004092
  br label %dec_label_pc_100040c5

dec_label_pc_10004098:                            ; preds = %dec_label_pc_10004079
  %v3_1000409b = load i32, i32* %v2_1000405e, align 4
  %v3_100040a2 = inttoptr i32 %v3_1000409b to i32*
  %v4_100040a2 = call i1 @FreeLibrary(i32* %v3_100040a2)
  store i32 0, i32* %v2_1000405e, align 4
  %v1_100040b8 = add i32 %arg1, 468
  %v2_100040b8 = inttoptr i32 %v1_100040b8 to i32*
  store i32 0, i32* %v2_100040b8, align 4
  %v12_100040c2 = select i1 %v4_100040a2, i32 -65536, i32 0
  br label %dec_label_pc_100040c5

dec_label_pc_100040c5:                            ; preds = %dec_label_pc_10004092, %dec_label_pc_10004073, %dec_label_pc_1000404d, %dec_label_pc_10004098
  %v0_100040c8 = phi i32 [ %v8_10004092, %dec_label_pc_10004092 ], [ %v2_10004073, %dec_label_pc_10004073 ], [ %v1_10004051, %dec_label_pc_1000404d ], [ %v12_100040c2, %dec_label_pc_10004098 ]
  ret i32 %v0_100040c8

; uselistorder directives
  uselistorder i32 %v1_10004086, { 1, 0 }
  uselistorder i32 %arg1, { 8, 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder label %dec_label_pc_100040c5, { 3, 0, 1, 2 }
}

define i32 @function_100040c9(i16 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_100040c9:
  %v4_100040cd = sext i16 %arg1 to i32
  store i32 %v4_100040cd, i32* @eax, align 4
  %v2_100040d1 = call i32 @TestFuncStatusAndPtr(i32 %v4_100040cd)
  store i32 %v2_100040d1, i32* @eax, align 4
  %v1_100040d9 = mul i32 %v2_100040d1, 65536
  %v2_100040d9 = sdiv i32 %v1_100040d9, 65536
  store i32 %v2_100040d9, i32* @ecx, align 4
  %v1_100040d9.off = or i32 %v1_100040d9, 65535
  %tmp = icmp ult i32 %v1_100040d9.off, 131071
  br i1 %tmp, label %dec_label_pc_100040ee, label %dec_label_pc_100040e0

dec_label_pc_100040e0:                            ; preds = %dec_label_pc_100040c9
  store i32 %v4_100040cd, i32* @edx, align 4
  %v2_100040e4 = call i32 @GetFuncStatusCode(i32 %v4_100040cd)
  br label %dec_label_pc_10004131

dec_label_pc_100040ee:                            ; preds = %dec_label_pc_100040c9
  %v1_100040f1 = add nsw i32 %v4_100040cd, 660
  %v2_100040f1 = inttoptr i32 %v1_100040f1 to i32*
  %v3_100040f1 = load i32, i32* %v2_100040f1, align 4
  %v4_100040f1 = icmp eq i32 %v3_100040f1, 0
  br i1 %v4_100040f1, label %dec_label_pc_10004106, label %dec_label_pc_100040fa

dec_label_pc_100040fa:                            ; preds = %dec_label_pc_100040ee
  store i32 %v4_100040cd, i32* @ecx, align 4
  %v1_100040fd = add nsw i32 %v4_100040cd, 676
  %v2_100040fd = inttoptr i32 %v1_100040fd to i32*
  %v3_100040fd = load i32, i32* %v2_100040fd, align 4
  %v4_100040fd = icmp eq i32 %v3_100040fd, 0
  %v1_10004104 = icmp eq i1 %v4_100040fd, false
  br i1 %v1_10004104, label %dec_label_pc_1000410c, label %dec_label_pc_10004106

dec_label_pc_10004106:                            ; preds = %dec_label_pc_100040fa, %dec_label_pc_100040ee
  %v1_10004106 = and i32 %v4_100040cd, -65536
  %v2_10004106 = or i32 %v1_10004106, 65515
  br label %dec_label_pc_10004131

dec_label_pc_1000410c:                            ; preds = %dec_label_pc_100040fa
  store i32 %arg2, i32* @edx, align 4
  store i32 %v4_100040cd, i32* @ecx, align 4
  %v7_10004123 = load i32, i32* %v2_100040fd, align 4
  call void @__pseudo_call(i32 %v7_10004123)
  %sext = mul i32 %v4_100040cd, 65536
  %v4_1000412d = sdiv i32 %sext, 65536
  %v7_1000412d = and i32 %v4_100040cd, -65536
  %v8_1000412d = or i32 %v4_1000412d, %v7_1000412d
  br label %dec_label_pc_10004131

dec_label_pc_10004131:                            ; preds = %dec_label_pc_10004106, %dec_label_pc_100040e0, %dec_label_pc_1000410c
  %v0_10004134 = phi i32 [ %v2_10004106, %dec_label_pc_10004106 ], [ %v2_100040e4, %dec_label_pc_100040e0 ], [ %v8_1000412d, %dec_label_pc_1000410c ]
  ret i32 %v0_10004134

; uselistorder directives
  uselistorder i32 %v4_100040cd, { 0, 1, 3, 2, 5, 4, 6, 8, 7, 9, 10 }
  uselistorder label %dec_label_pc_10004131, { 2, 0, 1 }
}

define i32 @CheckSWStatNoTO(i16 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_10004139 = sext i16 %arg1 to i32
  store i32 %v4_10004139, i32* @eax, align 4
  %v2_1000413d = call i32 @TestFuncStatusAndPtr(i32 %v4_10004139)
  store i32 %v2_1000413d, i32* @eax, align 4
  %v1_10004145 = mul i32 %v2_1000413d, 65536
  %v1_10004145.off = or i32 %v1_10004145, 65535
  %tmp = icmp ult i32 %v1_10004145.off, 131071
  br i1 %tmp, label %dec_label_pc_1000415a, label %dec_label_pc_1000414c

dec_label_pc_1000414c:                            ; preds = %entry
  %v2_10004150 = call i32 @GetFuncStatusCode(i32 %v4_10004139)
  br label %dec_label_pc_10004192

dec_label_pc_1000415a:                            ; preds = %entry
  %v1_1000415d = add nsw i32 %v4_10004139, 660
  %v2_1000415d = inttoptr i32 %v1_1000415d to i32*
  %v3_1000415d = load i32, i32* %v2_1000415d, align 4
  %v4_1000415d = icmp eq i32 %v3_1000415d, 0
  br i1 %v4_1000415d, label %dec_label_pc_10004172, label %dec_label_pc_10004166

dec_label_pc_10004166:                            ; preds = %dec_label_pc_1000415a
  %v1_10004169 = add nsw i32 %v4_10004139, 704
  %v2_10004169 = inttoptr i32 %v1_10004169 to i32*
  %v3_10004169 = load i32, i32* %v2_10004169, align 4
  %v4_10004169 = icmp eq i32 %v3_10004169, 0
  %v1_10004170 = icmp eq i1 %v4_10004169, false
  br i1 %v1_10004170, label %dec_label_pc_10004178, label %dec_label_pc_10004172

dec_label_pc_10004172:                            ; preds = %dec_label_pc_10004166, %dec_label_pc_1000415a
  %v1_10004172 = and i32 %v4_10004139, -65536
  %v2_10004172 = or i32 %v1_10004172, 65515
  br label %dec_label_pc_10004192

dec_label_pc_10004178:                            ; preds = %dec_label_pc_10004166
  %v7_10004184 = load i32, i32* %v2_10004169, align 4
  call void @__pseudo_call(i32 %v7_10004184)
  %sext = mul i32 %v4_10004139, 65536
  %v4_1000418e = sdiv i32 %sext, 65536
  %v7_1000418e = and i32 %v4_10004139, -65536
  %v8_1000418e = or i32 %v4_1000418e, %v7_1000418e
  br label %dec_label_pc_10004192

dec_label_pc_10004192:                            ; preds = %dec_label_pc_10004172, %dec_label_pc_1000414c, %dec_label_pc_10004178
  %v0_10004195 = phi i32 [ %v2_10004172, %dec_label_pc_10004172 ], [ %v2_10004150, %dec_label_pc_1000414c ], [ %v8_1000418e, %dec_label_pc_10004178 ]
  ret i32 %v0_10004195

; uselistorder directives
  uselistorder i32 65515, { 4, 2, 5, 6, 7, 13, 14, 15, 0, 20, 3, 19, 16, 1, 17, 18, 12, 10, 9, 8, 11 }
  uselistorder i32 660, { 4, 2, 5, 6, 7, 9, 10, 11, 0, 17, 3, 16, 12, 1, 13, 14, 15, 8 }
  uselistorder label %dec_label_pc_10004192, { 2, 0, 1 }
}

define i32 @IsValidInit(i16 %arg1) local_unnamed_addr {
entry:
  %v4_100041a4 = sext i16 %arg1 to i32
  %v9_100041a8 = icmp eq i16 %arg1, 65
  br i1 %v9_100041a8, label %dec_label_pc_100041ce, label %dec_label_pc_100041ad

dec_label_pc_100041ad:                            ; preds = %entry
  %v9_100041b1 = icmp eq i16 %arg1, 148
  br i1 %v9_100041b1, label %dec_label_pc_100041ce, label %dec_label_pc_100041b9

dec_label_pc_100041b9:                            ; preds = %dec_label_pc_100041ad
  %v9_100041bd = icmp eq i16 %arg1, 149
  br i1 %v9_100041bd, label %dec_label_pc_100041ce, label %dec_label_pc_100041d5

dec_label_pc_100041ce:                            ; preds = %dec_label_pc_100041b9, %dec_label_pc_100041ad, %entry
  br label %dec_label_pc_100041d5

dec_label_pc_100041d5:                            ; preds = %dec_label_pc_100041b9, %dec_label_pc_100041ce
  %storemerge = phi i32 [ 1, %dec_label_pc_100041ce ], [ 0, %dec_label_pc_100041b9 ]
  %v7_100041d5 = and i32 %v4_100041a4, -65536
  %v8_100041d5 = or i32 %storemerge, %v7_100041d5
  ret i32 %v8_100041d5

; uselistorder directives
  uselistorder label %dec_label_pc_100041d5, { 1, 0 }
}

define i32 @function_100041dd(i32 %arg1) local_unnamed_addr {
dec_label_pc_100041dd:
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-20 = alloca i16, align 2
  %stack_var_-4 = alloca i32, align 4
  %v0_100041dd = load i32, i32* @ebp, align 4
  store i32 %v0_100041dd, i32* %stack_var_-4, align 4
  %v4_100041dd = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100041dd, i32* @ebp, align 4
  store i16 4, i16* %stack_var_-20, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_100041f3 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100041f3, i32* @eax, align 4
  %v1_100041fb = mul i32 %v1_100041f3, 65536
  %v1_100041fb.off = or i32 %v1_100041fb, 65535
  %tmp = icmp ult i32 %v1_100041fb.off, 131071
  br i1 %tmp, label %dec_label_pc_10004210, label %dec_label_pc_10004202

dec_label_pc_10004202:                            ; preds = %dec_label_pc_100041dd
  %v1_10004206 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10004250

dec_label_pc_10004210:                            ; preds = %dec_label_pc_100041dd
  store i32 0, i32* %stack_var_-12, align 4
  %v2_10004228 = ptrtoint i32* %stack_var_-12 to i32
  %v3_1000422c = load i16, i16* %stack_var_-20, align 2
  %v4_1000422c = sext i16 %v3_1000422c to i32
  %v4_10004237 = trunc i32 %arg1 to i16
  %v5_10004237 = call i32 @SendCommand(i16 %v4_10004237, i32 0, i32 %v4_1000422c, i32 %v2_10004228)
  %v6_10004237 = trunc i32 %v5_10004237 to i16
  %v2_10004248 = call i32 @FuncStatusFromEngineReply(i16 %v6_10004237)
  br label %dec_label_pc_10004250

dec_label_pc_10004250:                            ; preds = %dec_label_pc_10004202, %dec_label_pc_10004210
  %v0_10004253 = phi i32 [ %v2_10004248, %dec_label_pc_10004210 ], [ %v1_10004206, %dec_label_pc_10004202 ]
  ret i32 %v0_10004253

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i16* %stack_var_-20, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10004250, { 1, 0 }
}

define i32 @StartSweep(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10004254 = load i32, i32* @ebp, align 4
  store i32 %v0_10004254, i32* %stack_var_-4, align 4
  %v4_10004254 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10004254, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10004270 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10004270, i32* @eax, align 4
  %v1_10004278 = mul i32 %v1_10004270, 65536
  %v1_10004278.off = or i32 %v1_10004278, 65535
  %tmp = icmp ult i32 %v1_10004278.off, 131071
  br i1 %tmp, label %dec_label_pc_10004290, label %dec_label_pc_1000427f

dec_label_pc_1000427f:                            ; preds = %entry
  %v1_10004283 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100044ae

dec_label_pc_10004290:                            ; preds = %entry
  %v1_10004297 = add i32 %arg1, 8
  %v2_10004297 = inttoptr i32 %v1_10004297 to i32*
  %v3_10004297 = load i32, i32* %v2_10004297, align 4
  %v2_1000429f = sext i32 %v3_10004297 to i64
  %v3_1000429f = bitcast i64 %v2_1000429f to double
  %v4_1000429f = call i32 @function_10002df9(i32 %arg1, double %v3_1000429f)
  %v1_100042b1 = add i32 %arg1, 16
  %v2_100042b1 = inttoptr i32 %v1_100042b1 to i32*
  %v3_100042b1 = load i32, i32* %v2_100042b1, align 4
  %v2_100042b9 = sext i32 %v3_100042b1 to i64
  %v3_100042b9 = bitcast i64 %v2_100042b9 to double
  %v4_100042b9 = call i32 @function_10002df9(i32 %arg1, double %v3_100042b9)
  %v1_100042cb = add i32 %arg1, 24
  %v2_100042cb = inttoptr i32 %v1_100042cb to i32*
  %v3_100042cb = load i32, i32* %v2_100042cb, align 4
  %v2_100042d3 = sext i32 %v3_100042cb to i64
  %v3_100042d3 = bitcast i64 %v2_100042d3 to double
  %v4_100042d3 = call i32 @function_10002df9(i32 %arg1, double %v3_100042d3)
  store i32 %arg1, i32* @eax, align 4
  %v3_100042e4 = call i32 @BreakSweep(i32 %arg1, i16 0)
  %v1_100042f0 = call i32 @ClearDataFIFO(i32 %arg1)
  %v1_100042fc = call i32 @CommTrigDetect(i32 %arg1)
  %sext = mul i32 %v1_100042fc, 65536
  %tmp46 = icmp eq i32 %sext, 4259840
  br i1 %tmp46, label %dec_label_pc_1000431a, label %dec_label_pc_10004311

dec_label_pc_10004311:                            ; preds = %dec_label_pc_10004290
  %v4_10004308 = sdiv i32 %sext, 65536
  %v4_10004311 = and i32 %v1_100042fc, 65535
  %v6_10004311 = and i32 %v4_10004308, -65536
  %v7_10004311 = or i32 %v6_10004311, %v4_10004311
  br label %dec_label_pc_100044ae

dec_label_pc_1000431a:                            ; preds = %dec_label_pc_10004290
  %v1_1000431d = add i32 %arg1, 76
  %v2_1000431d = inttoptr i32 %v1_1000431d to i16*
  %v3_1000431d = load i16, i16* %v2_1000431d, align 2
  %v2_10004321 = mul i16 %v3_1000431d, 256
  %v1_10004327 = add i32 %arg1, 72
  %v2_10004327 = inttoptr i32 %v1_10004327 to i16*
  %v3_10004327 = load i16, i16* %v2_10004327, align 2
  %v2_1000432b = or i16 %v3_10004327, %v2_10004321
  %v3_10004330 = add i32 %arg1, 80
  %v4_10004330 = inttoptr i32 %v3_10004330 to i16*
  store i16 %v2_1000432b, i16* %v4_10004330, align 2
  %v4_1000433419 = and i32 %v4_1000429f, 65535
  store i32 %v4_1000433419, i32* %stack_var_-36, align 4
  %v1_100043cd = add i32 %arg1, 64
  %v2_100043cd = inttoptr i32 %v1_100043cd to i16*
  %v3_100043cd = load i16, i16* %v2_100043cd, align 2
  %v9_100043d1 = icmp eq i16 %v3_100043cd, 1
  %v1_100043d4 = icmp eq i1 %v9_100043d1, false
  br i1 %v1_100043d4, label %dec_label_pc_100043eb, label %dec_label_pc_100043d6

dec_label_pc_100043d6:                            ; preds = %dec_label_pc_1000431a
  br label %dec_label_pc_100043eb

dec_label_pc_100043eb:                            ; preds = %dec_label_pc_1000431a, %dec_label_pc_100043d6
  store i32 %arg1, i32* @eax, align 4
  %v2_10004407 = call i32 @RdEngOption(i32 %arg1, i32 1)
  %v2_10004424 = ptrtoint i32* %stack_var_-36 to i32
  %v4_10004433 = trunc i32 %arg1 to i16
  %v5_10004433 = call i32 @SendCommand(i16 %v4_10004433, i32 1, i32 12, i32 %v2_10004424)
  %sext11 = mul i32 %v5_10004433, 65536
  %tmp47 = icmp eq i32 %sext11, 65536
  %v1_10004446 = icmp eq i1 %tmp47, false
  br i1 %v1_10004446, label %dec_label_pc_1000449b, label %dec_label_pc_10004448

dec_label_pc_10004448:                            ; preds = %dec_label_pc_100043eb
  %v2_1000444e = call i32 @SetSwpIdx(i32 %arg1, i32 0)
  %v3_1000444e = trunc i32 %v2_1000444e to i16
  %v2_1000445e = icmp eq i16 %v3_1000444e, 0
  br i1 %v2_1000445e, label %dec_label_pc_10004468, label %dec_label_pc_10004462

dec_label_pc_10004462:                            ; preds = %dec_label_pc_10004448
  %sext12 = mul i32 %v2_1000444e, 65536
  %v4_1000445a = sdiv i32 %sext12, 65536
  %v2_10004462 = and i32 %v4_1000445a, -65536
  %v3_10004462 = or i32 %v2_10004462, 65520
  br label %dec_label_pc_100044ae

dec_label_pc_10004468:                            ; preds = %dec_label_pc_10004448
  %v3_10004471 = call i32 @function_10002d12(i32 %arg1, i16 129)
  %v4_10004471 = trunc i32 %v3_10004471 to i16
  store i32 %v3_10004471, i32* @eax, align 4
  %v1_10004481 = icmp eq i16 %v4_10004471, 0
  br i1 %v1_10004481, label %dec_label_pc_1000448b, label %dec_label_pc_10004485

dec_label_pc_10004485:                            ; preds = %dec_label_pc_10004468
  %sext14 = mul i32 %v3_10004471, 65536
  %v4_1000447d = sdiv i32 %sext14, 65536
  %v2_10004485 = and i32 %v4_1000447d, -65536
  %v3_10004485 = or i32 %v2_10004485, 65520
  br label %dec_label_pc_100044ae

dec_label_pc_1000448b:                            ; preds = %dec_label_pc_10004468
  store i32 %arg1, i32* @edx, align 4
  %v3_10004491 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_100044aa = and i32 %v3_10004491, -65536
  %v2_100044aa = or i32 %v1_100044aa, 65
  br label %dec_label_pc_100044ae

dec_label_pc_1000449b:                            ; preds = %dec_label_pc_100043eb
  %v6_10004433 = trunc i32 %v5_10004433 to i16
  %v2_100044a0 = call i32 @FuncStatusFromEngineReply(i16 %v6_10004433)
  br label %dec_label_pc_100044ae

dec_label_pc_100044ae:                            ; preds = %dec_label_pc_1000449b, %dec_label_pc_10004485, %dec_label_pc_10004462, %dec_label_pc_10004311, %dec_label_pc_1000427f, %dec_label_pc_1000448b
  %v0_100044b1 = phi i32 [ %v2_100044a0, %dec_label_pc_1000449b ], [ %v3_10004485, %dec_label_pc_10004485 ], [ %v3_10004462, %dec_label_pc_10004462 ], [ %v7_10004311, %dec_label_pc_10004311 ], [ %v1_10004283, %dec_label_pc_1000427f ], [ %v2_100044aa, %dec_label_pc_1000448b ]
  %v2_100044b0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100044b0, i32* @ebp, align 4
  ret i32 %v0_100044b1

; uselistorder directives
  uselistorder i32 %v3_10004471, { 0, 2, 1 }
  uselistorder i32 %v5_10004433, { 1, 0 }
  uselistorder i32 %sext, { 1, 0 }
  uselistorder i32 %v1_100042fc, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32 %arg1, { 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 0, 7, 1, 6, 2, 5, 4, 3 }
  uselistorder label %dec_label_pc_100044ae, { 0, 5, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_100043eb, { 1, 0 }
}

define i32 @StartZspan(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100044b2 = load i32, i32* @ebp, align 4
  store i32 %v0_100044b2, i32* %stack_var_-4, align 4
  %v4_100044b2 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100044b2, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_100044ce = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100044ce, i32* @eax, align 4
  %v1_100044d6 = mul i32 %v1_100044ce, 65536
  %v1_100044d6.off = or i32 %v1_100044d6, 65535
  %tmp = icmp ult i32 %v1_100044d6.off, 131071
  br i1 %tmp, label %dec_label_pc_100044ee, label %dec_label_pc_100044dd

dec_label_pc_100044dd:                            ; preds = %entry
  %v1_100044e1 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100046e4

dec_label_pc_100044ee:                            ; preds = %entry
  store i32 %arg1, i32* @eax, align 4
  %v3_100044f4 = call i32 @BreakSweep(i32 %arg1, i16 0)
  %v1_10004500 = call i32 @ClearDataFIFO(i32 %arg1)
  %v1_1000450c = call i32 @CommTrigDetect(i32 %arg1)
  %sext3 = mul i32 %v1_1000450c, 65536
  %tmp36 = icmp eq i32 %sext3, 4259840
  br i1 %tmp36, label %dec_label_pc_1000452a, label %dec_label_pc_10004521

dec_label_pc_10004521:                            ; preds = %dec_label_pc_100044ee
  %v4_10004518 = sdiv i32 %sext3, 65536
  %v4_10004521 = and i32 %v1_1000450c, 65535
  %v6_10004521 = and i32 %v4_10004518, -65536
  %v7_10004521 = or i32 %v6_10004521, %v4_10004521
  br label %dec_label_pc_100046e4

dec_label_pc_1000452a:                            ; preds = %dec_label_pc_100044ee
  %v1_10004534 = add i32 %arg1, 144
  %v2_10004534 = inttoptr i32 %v1_10004534 to i32*
  %v3_10004534 = load i32, i32* %v2_10004534, align 4
  %v2_1000453f = sext i32 %v3_10004534 to i64
  %v3_1000453f = bitcast i64 %v2_1000453f to double
  %v4_1000453f = call i32 @function_10002df9(i32 %arg1, double %v3_1000453f)
  %v1_1000454d = add i32 %arg1, 76
  %v2_1000454d = inttoptr i32 %v1_1000454d to i16*
  %v3_1000454d = load i16, i16* %v2_1000454d, align 2
  %v2_10004551 = mul i16 %v3_1000454d, 256
  %v1_10004557 = add i32 %arg1, 72
  %v2_10004557 = inttoptr i32 %v1_10004557 to i16*
  %v3_10004557 = load i16, i16* %v2_10004557, align 2
  %v2_1000455b = or i16 %v3_10004557, %v2_10004551
  %v3_10004560 = add i32 %arg1, 80
  %v4_10004560 = inttoptr i32 %v3_10004560 to i16*
  store i16 %v2_1000455b, i16* %v4_10004560, align 2
  %sext4 = mul i32 %v4_1000453f, 65536
  %v4_10004564 = sdiv i32 %sext4, 65536
  %v1_10004567 = and i32 %v4_10004564, 65535
  store i32 %v1_10004567, i32* %stack_var_-32, align 4
  %v1_100045e3 = add i32 %arg1, 64
  %v2_100045e3 = inttoptr i32 %v1_100045e3 to i16*
  %v3_100045e3 = load i16, i16* %v2_100045e3, align 2
  %v9_100045e7 = icmp eq i16 %v3_100045e3, 1
  %v1_100045ea = icmp eq i1 %v9_100045e7, false
  br i1 %v1_100045ea, label %dec_label_pc_10004601, label %dec_label_pc_100045ec

dec_label_pc_100045ec:                            ; preds = %dec_label_pc_1000452a
  br label %dec_label_pc_10004601

dec_label_pc_10004601:                            ; preds = %dec_label_pc_1000452a, %dec_label_pc_100045ec
  %v1_10004620 = add i32 %arg1, 130
  %v2_10004620 = inttoptr i32 %v1_10004620 to i16*
  %v3_10004620 = load i16, i16* %v2_10004620, align 2
  %v4_10004620 = zext i16 %v3_10004620 to i32
  store i32 %v4_10004620, i32* @eax, align 4
  %v2_10004631 = call i32 @RdEngOption(i32 %arg1, i32 1)
  %v2_1000465a = ptrtoint i32* %stack_var_-32 to i32
  %v4_10004669 = trunc i32 %arg1 to i16
  %v5_10004669 = call i32 @SendCommand(i16 %v4_10004669, i32 2, i32 10, i32 %v2_1000465a)
  %sext7 = mul i32 %v5_10004669, 65536
  %tmp37 = icmp eq i32 %sext7, 65536
  %v1_1000467c = icmp eq i1 %tmp37, false
  br i1 %v1_1000467c, label %dec_label_pc_100046d1, label %dec_label_pc_1000467e

dec_label_pc_1000467e:                            ; preds = %dec_label_pc_10004601
  %v2_10004684 = call i32 @SetSwpIdx(i32 %arg1, i32 0)
  %v3_10004684 = trunc i32 %v2_10004684 to i16
  %v2_10004694 = icmp eq i16 %v3_10004684, 0
  br i1 %v2_10004694, label %dec_label_pc_1000469e, label %dec_label_pc_10004698

dec_label_pc_10004698:                            ; preds = %dec_label_pc_1000467e
  %sext8 = mul i32 %v2_10004684, 65536
  %v4_10004690 = sdiv i32 %sext8, 65536
  %v2_10004698 = and i32 %v4_10004690, -65536
  %v3_10004698 = or i32 %v2_10004698, 65520
  br label %dec_label_pc_100046e4

dec_label_pc_1000469e:                            ; preds = %dec_label_pc_1000467e
  %v3_100046a7 = call i32 @function_10002d12(i32 %arg1, i16 130)
  %v4_100046a7 = trunc i32 %v3_100046a7 to i16
  %sext10 = mul i32 %v3_100046a7, 65536
  %v4_100046b3 = sdiv i32 %sext10, 65536
  store i32 %v4_100046b3, i32* @edx, align 4
  %v1_100046b7 = icmp eq i16 %v4_100046a7, 0
  br i1 %v1_100046b7, label %dec_label_pc_100046c1, label %dec_label_pc_100046bb

dec_label_pc_100046bb:                            ; preds = %dec_label_pc_1000469e
  %v2_100046bb = and i32 %v4_100046b3, -65536
  %v3_100046bb = or i32 %v2_100046bb, 65520
  br label %dec_label_pc_100046e4

dec_label_pc_100046c1:                            ; preds = %dec_label_pc_1000469e
  store i32 %arg1, i32* @eax, align 4
  %v3_100046c7 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_100046e0 = and i32 %v3_100046c7, -65536
  %v2_100046e0 = or i32 %v1_100046e0, 65
  br label %dec_label_pc_100046e4

dec_label_pc_100046d1:                            ; preds = %dec_label_pc_10004601
  %v6_10004669 = trunc i32 %v5_10004669 to i16
  %v2_100046d6 = call i32 @FuncStatusFromEngineReply(i16 %v6_10004669)
  br label %dec_label_pc_100046e4

dec_label_pc_100046e4:                            ; preds = %dec_label_pc_100046d1, %dec_label_pc_100046bb, %dec_label_pc_10004698, %dec_label_pc_10004521, %dec_label_pc_100044dd, %dec_label_pc_100046c1
  %v0_100046e7 = phi i32 [ %v2_100046d6, %dec_label_pc_100046d1 ], [ %v3_100046bb, %dec_label_pc_100046bb ], [ %v3_10004698, %dec_label_pc_10004698 ], [ %v7_10004521, %dec_label_pc_10004521 ], [ %v1_100044e1, %dec_label_pc_100044dd ], [ %v2_100046e0, %dec_label_pc_100046c1 ]
  ret i32 %v0_100046e7

; uselistorder directives
  uselistorder i32 %v4_100046b3, { 1, 0 }
  uselistorder i32 %v5_10004669, { 1, 0 }
  uselistorder i32 %sext3, { 1, 0 }
  uselistorder i32 %v1_1000450c, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-32, { 1, 0 }
  uselistorder i32 (i32)* @ClearDataFIFO, { 1, 0 }
  uselistorder i32 %arg1, { 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_100046e4, { 0, 5, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_10004601, { 1, 0 }
}

define i32 @StartFreqHop(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-28 = alloca i16, align 2
  %stack_var_-4 = alloca i32, align 4
  %v0_100046e8 = load i32, i32* @ebp, align 4
  store i32 %v0_100046e8, i32* %stack_var_-4, align 4
  %v4_100046e8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100046e8, i32* @ebp, align 4
  store i16 5, i16* %stack_var_-28, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10004704 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10004704, i32* @eax, align 4
  %v1_1000470c = mul i32 %v1_10004704, 65536
  %v1_1000470c.off = or i32 %v1_1000470c, 65535
  %tmp = icmp ult i32 %v1_1000470c.off, 131071
  br i1 %tmp, label %dec_label_pc_10004724, label %dec_label_pc_10004713

dec_label_pc_10004713:                            ; preds = %entry
  %v1_10004717 = call i32 @GetFuncStatusCode(i32 %arg1)
  store i32 %v1_10004717, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000486b

dec_label_pc_10004724:                            ; preds = %entry
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10004728 = call i32 @CommTrigDetect(i32 %arg1)
  store i32 %v1_10004728, i32* %eax.global-to-local, align 4
  %sext = mul i32 %v1_10004728, 65536
  %tmp23 = icmp eq i32 %sext, 4259840
  br i1 %tmp23, label %dec_label_pc_10004746, label %dec_label_pc_1000473d

dec_label_pc_1000473d:                            ; preds = %dec_label_pc_10004724
  %v4_10004734 = sdiv i32 %sext, 65536
  %v4_1000473d = and i32 %v1_10004728, 65535
  %v7_1000473d = and i32 %v4_10004734, -65536
  %v8_1000473d = or i32 %v7_1000473d, %v4_1000473d
  store i32 %v8_1000473d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000486b

dec_label_pc_10004746:                            ; preds = %dec_label_pc_10004724
  %v1_10004749 = add i32 %arg1, 76
  %v2_10004749 = inttoptr i32 %v1_10004749 to i16*
  %v3_10004749 = load i16, i16* %v2_10004749, align 2
  %v4_10004749 = sext i16 %v3_10004749 to i32
  %v2_1000474d = mul nsw i32 %v4_10004749, 256
  store i32 %v2_1000474d, i32* %eax.global-to-local, align 4
  %v1_10004753 = add i32 %arg1, 72
  %v2_10004753 = inttoptr i32 %v1_10004753 to i16*
  %v3_10004753 = load i16, i16* %v2_10004753, align 2
  %v4_10004753 = sext i16 %v3_10004753 to i32
  %v2_10004757 = or i32 %v4_10004753, %v2_1000474d
  store i32 %v2_10004757, i32* %eax.global-to-local, align 4
  %v1_1000475c = trunc i32 %v2_10004757 to i16
  %v3_1000475c = add i32 %arg1, 80
  %v4_1000475c = inttoptr i32 %v3_1000475c to i16*
  store i16 %v1_1000475c, i16* %v4_1000475c, align 2
  %v4_10004763 = and i32 %v2_10004757, 65535
  %v5_10004763 = load i32, i32* %eax.global-to-local, align 4
  %v6_10004763 = and i32 %v5_10004763, -65536
  %v7_10004763 = or i32 %v6_10004763, %v4_10004763
  store i32 %v7_10004763, i32* %eax.global-to-local, align 4
  store i32 %v7_10004763, i32* %stack_var_-20, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @eax, align 4
  %v2_100047c4 = call i32 @RdEngOption(i32 %arg1, i32 1)
  %v2_100047e1 = ptrtoint i32* %stack_var_-20 to i32
  %v3_100047e5 = load i16, i16* %stack_var_-28, align 2
  %v4_100047e5 = sext i16 %v3_100047e5 to i32
  store i32 %v4_100047e5, i32* %eax.global-to-local, align 4
  %v4_100047f0 = trunc i32 %arg1 to i16
  %v5_100047f0 = call i32 @SendCommand(i16 %v4_100047f0, i32 3, i32 %v4_100047e5, i32 %v2_100047e1)
  store i32 %v5_100047f0, i32* %eax.global-to-local, align 4
  %sext3 = mul i32 %v5_100047f0, 65536
  %tmp24 = icmp eq i32 %sext3, 65536
  %v1_10004803 = icmp eq i1 %tmp24, false
  br i1 %v1_10004803, label %dec_label_pc_10004858, label %dec_label_pc_10004805

dec_label_pc_10004805:                            ; preds = %dec_label_pc_10004746
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v2_1000480b = call i32 @SetSwpIdx(i32 %arg1, i32 0)
  %v3_1000480b = trunc i32 %v2_1000480b to i16
  store i32 %v2_1000480b, i32* %eax.global-to-local, align 4
  %v2_1000481b = icmp eq i16 %v3_1000480b, 0
  br i1 %v2_1000481b, label %dec_label_pc_10004825, label %dec_label_pc_1000481f

dec_label_pc_1000481f:                            ; preds = %dec_label_pc_10004805
  %sext4 = mul i32 %v2_1000480b, 65536
  %v4_10004817 = sdiv i32 %sext4, 65536
  %v2_1000481f = and i32 %v4_10004817, -65536
  %v3_1000481f = or i32 %v2_1000481f, 65520
  store i32 %v3_1000481f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000486b

dec_label_pc_10004825:                            ; preds = %dec_label_pc_10004805
  %v3_1000482e = call i32 @function_10002d12(i32 %arg1, i16 131)
  %v4_1000482e = trunc i32 %v3_1000482e to i16
  %sext6 = mul i32 %v3_1000482e, 65536
  %v4_1000483a = sdiv i32 %sext6, 65536
  store i32 %v4_1000483a, i32* @eax, align 4
  %v1_1000483e = icmp eq i16 %v4_1000482e, 0
  br i1 %v1_1000483e, label %dec_label_pc_10004848, label %dec_label_pc_10004842

dec_label_pc_10004842:                            ; preds = %dec_label_pc_10004825
  %v1_10004842 = and i32 %v4_1000483a, -65536
  %v2_10004842 = or i32 %v1_10004842, 65520
  store i32 %v2_10004842, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000486b

dec_label_pc_10004848:                            ; preds = %dec_label_pc_10004825
  %v3_1000484e = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10004867 = and i32 %v3_1000484e, -65536
  %v2_10004867 = or i32 %v1_10004867, 65
  store i32 %v2_10004867, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000486b

dec_label_pc_10004858:                            ; preds = %dec_label_pc_10004746
  %v6_100047f0 = trunc i32 %v5_100047f0 to i16
  %v2_1000485d = call i32 @FuncStatusFromEngineReply(i16 %v6_100047f0)
  store i32 %v2_1000485d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000486b

dec_label_pc_1000486b:                            ; preds = %dec_label_pc_10004858, %dec_label_pc_10004842, %dec_label_pc_1000481f, %dec_label_pc_1000473d, %dec_label_pc_10004713, %dec_label_pc_10004848
  %v0_1000486e = phi i32 [ %v2_1000485d, %dec_label_pc_10004858 ], [ %v2_10004842, %dec_label_pc_10004842 ], [ %v3_1000481f, %dec_label_pc_1000481f ], [ %v8_1000473d, %dec_label_pc_1000473d ], [ %v1_10004717, %dec_label_pc_10004713 ], [ %v2_10004867, %dec_label_pc_10004848 ]
  ret i32 %v0_1000486e

; uselistorder directives
  uselistorder i32 %v2_1000480b, { 0, 2, 1 }
  uselistorder i32 %v5_100047f0, { 1, 0, 2 }
  uselistorder i32 %v2_1000474d, { 1, 0 }
  uselistorder i32 %sext, { 1, 0 }
  uselistorder i32 %v1_10004728, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i16* %stack_var_-28, { 1, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 (i32, i32)* @RdEngOption, { 5, 4, 3, 6, 2, 1, 0 }
  uselistorder i32 (i32)* @CommTrigDetect, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %arg1, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2, 4, 1, 0 }
  uselistorder label %dec_label_pc_1000486b, { 0, 5, 1, 2, 3, 4 }
}

define i32 @LoadHopTable(i32 %arg1, i16 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000486f = load i32, i32* @ebp, align 4
  store i32 %v0_1000486f, i32* %stack_var_-4, align 4
  %v4_1000486f = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000486f, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000488b = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000488b, i32* @eax, align 4
  %v1_10004893 = mul i32 %v1_1000488b, 65536
  %v1_10004893.off = or i32 %v1_10004893, 65535
  %tmp = icmp ult i32 %v1_10004893.off, 131071
  br i1 %tmp, label %dec_label_pc_100048ab, label %dec_label_pc_1000489a

dec_label_pc_1000489a:                            ; preds = %entry
  %v1_1000489e = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100049f8

dec_label_pc_100048ab:                            ; preds = %entry
  %v2_100048b1 = trunc i32 %arg1 to i16
  %v3_100048b1 = call i32 @function_10003aed(i16 %v2_100048b1, i32 5)
  %sext = mul i32 %v3_100048b1, 65536
  %v4_100048bd = sdiv i32 %sext, 65536
  %sext.off = or i32 %sext, 65535
  %tmp51 = icmp ult i32 %sext.off, 131071
  %v1_100048c3 = icmp eq i1 %tmp51, false
  br i1 %v1_100048c3, label %dec_label_pc_100048d8, label %dec_label_pc_100048c5

dec_label_pc_100048c5:                            ; preds = %dec_label_pc_100048ab
  %v2_100048c9 = call i32 @CheckSWStatus(i16 %v2_100048b1)
  %v1_100048d1 = mul i32 %v2_100048c9, 65536
  %v2_100048d1 = sdiv i32 %v1_100048d1, 65536
  %v1_100048d1.off = or i32 %v1_100048d1, 65535
  %tmp52 = icmp ult i32 %v1_100048d1.off, 131071
  br i1 %tmp52, label %dec_label_pc_100048e1, label %dec_label_pc_100048d8

dec_label_pc_100048d8:                            ; preds = %dec_label_pc_100048c5, %dec_label_pc_100048ab
  %v0_100048d8 = phi i32 [ %v2_100048d1, %dec_label_pc_100048c5 ], [ %v3_100048b1, %dec_label_pc_100048ab ]
  %v1_100048d8 = and i32 %v0_100048d8, -65536
  %v2_100048d8 = or i32 %v1_100048d8, 65534
  br label %dec_label_pc_100049f8

dec_label_pc_100048e1:                            ; preds = %dec_label_pc_100048c5
  %v4_100048e1 = zext i16 %arg2 to i32
  %v7_100048e1 = and i32 %v4_100048bd, -65536
  %v8_100048e1 = or i32 %v7_100048e1, %v4_100048e1
  store i32 %arg1, i32* @edx, align 4
  %v3_100048ea = call i32 @function_10003aed(i16 %v2_100048b1, i32 %v8_100048e1)
  %v4_100048ea = trunc i32 %v3_100048ea to i16
  %sext8 = mul i32 %v3_100048ea, 65536
  %v4_100048f6 = sdiv i32 %sext8, 65536
  %v1_100048fa = icmp eq i16 %v4_100048ea, 0
  %v1_100048fc = icmp eq i1 %v1_100048fa, false
  br i1 %v1_100048fc, label %dec_label_pc_10004911, label %dec_label_pc_100048fe

dec_label_pc_100048fe:                            ; preds = %dec_label_pc_100048e1
  %v2_10004902 = call i32 @CheckSWStatus(i16 %v2_100048b1)
  %v1_1000490a = mul i32 %v2_10004902, 65536
  %v2_1000490a = sdiv i32 %v1_1000490a, 65536
  store i32 %v2_1000490a, i32* @edx, align 4
  %v1_1000490a.off = or i32 %v1_1000490a, 65535
  %tmp53 = icmp ult i32 %v1_1000490a.off, 131071
  br i1 %tmp53, label %dec_label_pc_1000492e.preheader, label %dec_label_pc_10004911

dec_label_pc_1000492e.preheader:                  ; preds = %dec_label_pc_100048fe
  %v5_10004932 = sext i16 %arg2 to i32
  %v19_1000493243 = icmp sgt i16 %arg2, 0
  br i1 %v19_1000493243, label %dec_label_pc_10004937, label %dec_label_pc_10004988

dec_label_pc_10004911:                            ; preds = %dec_label_pc_100048fe, %dec_label_pc_100048e1
  %v0_10004911 = phi i32 [ %v2_10004902, %dec_label_pc_100048fe ], [ %v4_100048f6, %dec_label_pc_100048e1 ]
  %v1_10004911 = and i32 %v0_10004911, -65536
  %v2_10004911 = or i32 %v1_10004911, 65534
  br label %dec_label_pc_100049f8

dec_label_pc_10004937:                            ; preds = %dec_label_pc_1000492e.preheader, %dec_label_pc_10004937
  %indvars.iv48 = phi i32 [ %indvars.iv.next49, %dec_label_pc_10004937 ], [ 0, %dec_label_pc_1000492e.preheader ]
  %v2_1000493e = mul nuw nsw i32 %indvars.iv48, 4
  %v3_1000493e = add i32 %v2_1000493e, %arg3
  %v4_1000493e = inttoptr i32 %v3_1000493e to i32*
  %v5_1000493e = load i32, i32* %v4_1000493e, align 4
  %v1_10004941 = and i32 %v5_1000493e, 65535
  %v2_10004955 = sdiv i32 %v5_1000493e, 65536
  %v6_1000495c = and i32 %indvars.iv48, -65536
  %v7_1000495c = or i32 %v1_10004941, %v6_1000495c
  store i32 %v7_1000495c, i32* @edx, align 4
  %v3_10004965 = call i32 @function_10003aed(i16 %v2_100048b1, i32 %v7_1000495c)
  %v4_10004971 = and i32 %v2_10004955, 65535
  %v5_10004971 = load i32, i32* @ecx, align 4
  %v6_10004971 = and i32 %v5_10004971, -65536
  %v7_10004971 = or i32 %v6_10004971, %v4_10004971
  store i32 %arg1, i32* @edx, align 4
  %v3_1000497a = call i32 @function_10003aed(i16 %v2_100048b1, i32 %v7_10004971)
  %indvars.iv.next49 = add nuw nsw i32 %indvars.iv48, 1
  %exitcond = icmp eq i32 %indvars.iv.next49, %v5_10004932
  br i1 %exitcond, label %dec_label_pc_10004988, label %dec_label_pc_10004937

dec_label_pc_10004988:                            ; preds = %dec_label_pc_10004937, %dec_label_pc_1000492e.preheader
  %v3_1000498e = call i32 @function_10003aed(i16 %v2_100048b1, i32 3)
  br label %dec_label_pc_100049ba

dec_label_pc_100049ba:                            ; preds = %dec_label_pc_10004988, %dec_label_pc_100049cf
  %indvars.iv = phi i32 [ 0, %dec_label_pc_10004988 ], [ %indvars.iv.next, %dec_label_pc_100049cf ]
  %v12_100049b614 = phi i1 [ false, %dec_label_pc_10004988 ], [ %v12_100049b6, %dec_label_pc_100049cf ]
  %v2_100049be = call i32 @CheckSWStatus(i16 %v2_100048b1)
  %v1_100049c6 = mul i32 %v2_100049be, 65536
  %v2_100049c6 = sdiv i32 %v1_100049c6, 65536
  store i32 %v2_100049c6, i32* @edx, align 4
  %v1_100049c6.off = or i32 %v1_100049c6, 65535
  %tmp54 = icmp ult i32 %v1_100049c6.off, 131071
  br i1 %tmp54, label %dec_label_pc_100049cf, label %dec_label_pc_100049e3

dec_label_pc_100049cf:                            ; preds = %dec_label_pc_100049ba
  %v3_100049d5 = call i32 @function_10003aed(i16 %v2_100048b1, i32 3)
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %v12_100049b6 = icmp eq i32 %indvars.iv.next, 1024
  %v13_100049b6 = icmp slt i32 %indvars.iv.next, 1024
  br i1 %v13_100049b6, label %dec_label_pc_100049ba, label %dec_label_pc_100049e3

dec_label_pc_100049e3:                            ; preds = %dec_label_pc_100049ba, %dec_label_pc_100049cf
  %v11_100049f5 = phi i32 [ %v2_100049be, %dec_label_pc_100049ba ], [ 1024, %dec_label_pc_100049cf ]
  %v12_100049b6.lcssa = phi i1 [ %v12_100049b614, %dec_label_pc_100049ba ], [ %v12_100049b6, %dec_label_pc_100049cf ]
  %v1_100049ed = icmp eq i1 %v12_100049b6.lcssa, false
  br i1 %v1_100049ed, label %dec_label_pc_100049f5, label %dec_label_pc_100049ef

dec_label_pc_100049ef:                            ; preds = %dec_label_pc_100049e3
  %v1_100049ef = and i32 %v11_100049f5, -65536
  %v2_100049ef = or i32 %v1_100049ef, 65534
  br label %dec_label_pc_100049f8

dec_label_pc_100049f5:                            ; preds = %dec_label_pc_100049e3
  %v12_100049f5 = and i32 %v11_100049f5, -65536
  br label %dec_label_pc_100049f8

dec_label_pc_100049f8:                            ; preds = %dec_label_pc_100049ef, %dec_label_pc_10004911, %dec_label_pc_100048d8, %dec_label_pc_1000489a, %dec_label_pc_100049f5
  %v0_100049fb = phi i32 [ %v2_100049ef, %dec_label_pc_100049ef ], [ %v2_10004911, %dec_label_pc_10004911 ], [ %v2_100048d8, %dec_label_pc_100048d8 ], [ %v1_1000489e, %dec_label_pc_1000489a ], [ %v12_100049f5, %dec_label_pc_100049f5 ]
  ret i32 %v0_100049fb

; uselistorder directives
  uselistorder i1 %v12_100049b6, { 1, 0 }
  uselistorder i32 %v2_100049be, { 1, 0 }
  uselistorder i32 %indvars.iv.next49, { 1, 0 }
  uselistorder i32 %indvars.iv48, { 2, 0, 1 }
  uselistorder i32 %v2_10004902, { 1, 0 }
  uselistorder i32 %v3_100048b1, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i16 %arg2, { 0, 2, 1 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100049f8, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_100049e3, { 1, 0 }
  uselistorder label %dec_label_pc_100049ba, { 1, 0 }
  uselistorder label %dec_label_pc_10004937, { 1, 0 }
}

define i32 @BreakSweep(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100049fc = load i32, i32* @ebp, align 4
  store i32 %v0_100049fc, i32* %stack_var_-4, align 4
  %v4_100049fc = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100049fc, i32* @ebp, align 4
  %v4_10004a0e = zext i16 %arg2 to i32
  %v5_10004a0e = load i32, i32* @eax, align 4
  %v6_10004a0e = and i32 %v5_10004a0e, -65536
  %v7_10004a0e = or i32 %v6_10004a0e, %v4_10004a0e
  store i32 %v7_10004a0e, i32* @eax, align 4
  store i32 %v7_10004a0e, i32* %stack_var_-8, align 4
  %v1_10004a1a = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10004a22 = mul i32 %v1_10004a1a, 65536
  %v1_10004a22.off = or i32 %v1_10004a22, 65535
  %tmp = icmp ult i32 %v1_10004a22.off, 131071
  br i1 %tmp, label %dec_label_pc_10004a3a, label %dec_label_pc_10004a29

dec_label_pc_10004a29:                            ; preds = %entry
  store i32 %arg1, i32* @eax, align 4
  %v1_10004a2d = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10004b80

dec_label_pc_10004a3a:                            ; preds = %entry
  %v2_10004a3a = ptrtoint i32* %stack_var_-8 to i32
  store i32 1, i32* @edx, align 4
  %v4_10004a49 = trunc i32 %arg1 to i16
  %v5_10004a49 = call i32 @SendCommand(i16 %v4_10004a49, i32 7, i32 1, i32 %v2_10004a3a)
  store i32 %v5_10004a49, i32* @eax, align 4
  %sext = mul i32 %v5_10004a49, 65536
  %tmp22 = icmp eq i32 %sext, 65536
  br i1 %tmp22, label %dec_label_pc_10004a7d, label %dec_label_pc_10004a5e

dec_label_pc_10004a5e:                            ; preds = %dec_label_pc_10004a3a
  %v1_10004a51 = trunc i32 %v5_10004a49 to i16
  %v2_10004a63 = call i32 @FuncStatusFromEngineReply(i16 %v1_10004a51)
  store i32 %arg1, i32* @eax, align 4
  %v2_10004a70 = trunc i32 %v2_10004a63 to i16
  %v3_10004a70 = call i32 @SetFuncStatusCode(i32 %arg1, i16 %v2_10004a70)
  br label %dec_label_pc_10004b80

dec_label_pc_10004a7d:                            ; preds = %dec_label_pc_10004a3a
  %v4_10004a7d = sext i16 %arg2 to i32
  store i32 %v4_10004a7d, i32* @edx, align 4
  switch i32 %v4_10004a7d, label %dec_label_pc_10004b6c [
    i32 0, label %dec_label_pc_10004adb
    i32 1, label %dec_label_pc_10004b7c
    i32 2, label %dec_label_pc_10004b34
    i32 3, label %dec_label_pc_10004a9d
  ]

dec_label_pc_10004a9d:                            ; preds = %dec_label_pc_10004a7d
  %v1_10004aa0 = add i32 %arg1, 4
  %v2_10004aa0 = inttoptr i32 %v1_10004aa0 to i16*
  %v3_10004aa0 = load i16, i16* %v2_10004aa0, align 2
  %v9_10004aa4 = or i16 %v3_10004aa0, 128
  %v3_10004aac = call i32 @function_10002d12(i32 %arg1, i16 %v9_10004aa4)
  %v4_10004aac = trunc i32 %v3_10004aac to i16
  %sext4 = mul i32 %v3_10004aac, 65536
  %v4_10004ab8 = sdiv i32 %sext4, 65536
  store i32 %v4_10004ab8, i32* @eax, align 4
  %v2_10004abc = icmp slt i16 %v4_10004aac, 0
  %v2_10004abe = icmp eq i1 %v2_10004abc, false
  br i1 %v2_10004abe, label %dec_label_pc_10004b7c, label %dec_label_pc_10004ac0

dec_label_pc_10004ac0:                            ; preds = %dec_label_pc_10004a9d
  store i32 %arg1, i32* @edx, align 4
  %v3_10004ac9 = call i32 @SetFuncStatusCode(i32 %arg1, i16 %v4_10004aac)
  br label %dec_label_pc_10004b80

dec_label_pc_10004adb:                            ; preds = %dec_label_pc_10004a7d
  %v2_10004ae1 = call i32 @SetSwpIdx(i32 %arg1, i32 0)
  %v3_10004ae1 = trunc i32 %v2_10004ae1 to i16
  store i32 %v2_10004ae1, i32* @eax, align 4
  %v2_10004af1 = icmp slt i16 %v3_10004ae1, 0
  %v2_10004af3 = icmp eq i1 %v2_10004af1, false
  br i1 %v2_10004af3, label %dec_label_pc_10004b05, label %dec_label_pc_10004af5

dec_label_pc_10004af5:                            ; preds = %dec_label_pc_10004adb
  store i32 %arg1, i32* @edx, align 4
  %v3_10004afb = call i32 @SetFuncStatusCode(i32 %arg1, i16 -1)
  br label %dec_label_pc_10004b80

dec_label_pc_10004b05:                            ; preds = %dec_label_pc_10004adb
  %v3_10004b0b = call i32 @function_10002d12(i32 %arg1, i16 0)
  %sext3 = mul i32 %v3_10004b0b, 65536
  %v2_10004b1b = icmp slt i32 %sext3, 0
  %v2_10004b1d = icmp eq i1 %v2_10004b1b, false
  br i1 %v2_10004b1d, label %dec_label_pc_10004b7c, label %dec_label_pc_10004b1f

dec_label_pc_10004b1f:                            ; preds = %dec_label_pc_10004b05
  %v4_10004b1f = and i32 %v3_10004b0b, 65535
  %v5_10004b1f = load i32, i32* @edx, align 4
  %v6_10004b1f = and i32 %v5_10004b1f, -65536
  %v7_10004b1f = or i32 %v6_10004b1f, %v4_10004b1f
  store i32 %v7_10004b1f, i32* @edx, align 4
  store i32 %arg1, i32* @eax, align 4
  %v2_10004b28 = trunc i32 %v3_10004b0b to i16
  %v3_10004b28 = call i32 @SetFuncStatusCode(i32 %arg1, i16 %v2_10004b28)
  br label %dec_label_pc_10004b80

dec_label_pc_10004b34:                            ; preds = %dec_label_pc_10004a7d
  %v1_10004b37 = add i32 %arg1, 4
  %v2_10004b37 = inttoptr i32 %v1_10004b37 to i16*
  %v3_10004b37 = load i16, i16* %v2_10004b37, align 2
  %v10_10004b3b = and i16 %v3_10004b37, -129
  %v3_10004b43 = call i32 @function_10002d12(i32 %arg1, i16 %v10_10004b3b)
  %sext2 = mul i32 %v3_10004b43, 65536
  %v2_10004b53 = icmp slt i32 %sext2, 0
  %v2_10004b55 = icmp eq i1 %v2_10004b53, false
  br i1 %v2_10004b55, label %dec_label_pc_10004b7c, label %dec_label_pc_10004b57

dec_label_pc_10004b57:                            ; preds = %dec_label_pc_10004b34
  %v4_10004b57 = and i32 %v3_10004b43, 65535
  %v5_10004b57 = load i32, i32* @edx, align 4
  %v6_10004b57 = and i32 %v5_10004b57, -65536
  %v7_10004b57 = or i32 %v6_10004b57, %v4_10004b57
  store i32 %v7_10004b57, i32* @edx, align 4
  store i32 %arg1, i32* @eax, align 4
  %v2_10004b60 = trunc i32 %v3_10004b43 to i16
  %v3_10004b60 = call i32 @SetFuncStatusCode(i32 %arg1, i16 %v2_10004b60)
  br label %dec_label_pc_10004b80

dec_label_pc_10004b6c:                            ; preds = %dec_label_pc_10004a7d
  %v3_10004b72 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -3)
  br label %dec_label_pc_10004b80

dec_label_pc_10004b7c:                            ; preds = %dec_label_pc_10004b34, %dec_label_pc_10004b05, %dec_label_pc_10004a9d, %dec_label_pc_10004a7d
  %v0_10004b7c = phi i32 [ %v3_10004b43, %dec_label_pc_10004b34 ], [ %v3_10004b0b, %dec_label_pc_10004b05 ], [ %v4_10004ab8, %dec_label_pc_10004a9d ], [ %v5_10004a49, %dec_label_pc_10004a7d ]
  %v1_10004b7c = and i32 %v0_10004b7c, -65536
  %v2_10004b7c = or i32 %v1_10004b7c, 65
  br label %dec_label_pc_10004b80

dec_label_pc_10004b80:                            ; preds = %dec_label_pc_10004b57, %dec_label_pc_10004b1f, %dec_label_pc_10004af5, %dec_label_pc_10004ac0, %dec_label_pc_10004b6c, %dec_label_pc_10004a5e, %dec_label_pc_10004a29, %dec_label_pc_10004b7c
  %v0_10004b83 = phi i32 [ %v3_10004b60, %dec_label_pc_10004b57 ], [ %v3_10004b28, %dec_label_pc_10004b1f ], [ %v3_10004afb, %dec_label_pc_10004af5 ], [ %v3_10004ac9, %dec_label_pc_10004ac0 ], [ %v3_10004b72, %dec_label_pc_10004b6c ], [ %v3_10004a70, %dec_label_pc_10004a5e ], [ %v1_10004a2d, %dec_label_pc_10004a29 ], [ %v2_10004b7c, %dec_label_pc_10004b7c ]
  %v2_10004b82 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10004b82, i32* @ebp, align 4
  ret i32 %v0_10004b83

; uselistorder directives
  uselistorder i32 %v3_10004b43, { 1, 3, 2, 0 }
  uselistorder i32 %v3_10004b0b, { 1, 3, 2, 0 }
  uselistorder i32 %v2_10004ae1, { 1, 0 }
  uselistorder i32 %v4_10004ab8, { 1, 0 }
  uselistorder i32 %v4_10004a7d, { 1, 0 }
  uselistorder i32 %v5_10004a49, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder i32 (i16)* @FuncStatusFromEngineReply, { 5, 3, 4, 6, 0, 1, 2, 7, 8, 9, 10 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10004b80, { 7, 4, 0, 1, 2, 3, 5, 6 }
}

define i32 @InitInstrData(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10004b94 = load i32, i32* @ebp, align 4
  store i32 %v0_10004b94, i32* %stack_var_-4, align 4
  %v4_10004b94 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10004b94, i32* @ebp, align 4
  %v4_10004b97 = icmp eq i32 %arg1, 0
  %v1_10004b9b = icmp eq i1 %v4_10004b97, false
  br i1 %v1_10004b9b, label %dec_label_pc_10004ba6, label %dec_label_pc_10004b9d

dec_label_pc_10004b9d:                            ; preds = %entry
  %v0_10004b9d = load i32, i32* @eax, align 4
  %v1_10004b9d = and i32 %v0_10004b9d, -65536
  %v2_10004b9d = or i32 %v1_10004b9d, 65526
  br label %dec_label_pc_10004ee3

dec_label_pc_10004ba6:                            ; preds = %entry
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10004ba9 = add i32 %arg1, 196
  %v2_10004ba9 = inttoptr i32 %v1_10004ba9 to i16*
  store i16 0, i16* %v2_10004ba9, align 2
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_10004bb5 = add i32 %arg1, 2
  %v2_10004bb5 = inttoptr i32 %v1_10004bb5 to i16*
  %v3_10004bb5 = load i16, i16* %v2_10004bb5, align 2
  %v4_10004bb5 = sext i16 %v3_10004bb5 to i32
  store i32 %v4_10004bb5, i32* %edx.global-to-local, align 4
  %v6_10004bb9 = icmp eq i16 %v3_10004bb5, 256
  br i1 %v6_10004bb9, label %dec_label_pc_10004bf6, label %dec_label_pc_10004bc1

dec_label_pc_10004bc1:                            ; preds = %dec_label_pc_10004ba6
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_10004bc4 = load i16, i16* %v2_10004bb5, align 2
  %v4_10004bc4 = sext i16 %v3_10004bc4 to i32
  store i32 %v4_10004bc4, i32* %ecx.global-to-local, align 4
  %v6_10004bc8 = icmp eq i16 %v3_10004bc4, 512
  br i1 %v6_10004bc8, label %dec_label_pc_10004bf6, label %dec_label_pc_10004bd0

dec_label_pc_10004bd0:                            ; preds = %dec_label_pc_10004bc1
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v3_10004bd3 = load i16, i16* %v2_10004bb5, align 2
  %v4_10004bd3 = sext i16 %v3_10004bd3 to i32
  store i32 %v4_10004bd3, i32* %eax.global-to-local, align 4
  %v6_10004bd7 = icmp eq i16 %v3_10004bd3, 1024
  br i1 %v6_10004bd7, label %dec_label_pc_10004bf6, label %dec_label_pc_10004bde

dec_label_pc_10004bde:                            ; preds = %dec_label_pc_10004bd0
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v3_10004be1 = load i16, i16* %v2_10004bb5, align 2
  %v4_10004be1 = sext i16 %v3_10004be1 to i32
  store i32 %v4_10004be1, i32* %edx.global-to-local, align 4
  %v6_10004be5 = icmp eq i16 %v3_10004be1, 768
  br i1 %v6_10004be5, label %dec_label_pc_10004bf6, label %dec_label_pc_10004bed

dec_label_pc_10004bed:                            ; preds = %dec_label_pc_10004bde
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i16 256, i16* %v2_10004bb5, align 2
  br label %dec_label_pc_10004bf6

dec_label_pc_10004bf6:                            ; preds = %dec_label_pc_10004bde, %dec_label_pc_10004bd0, %dec_label_pc_10004bc1, %dec_label_pc_10004ba6, %dec_label_pc_10004bed
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_10004bf9 = add i32 %arg1, 8
  %v2_10004bf9 = inttoptr i32 %v1_10004bf9 to i32*
  store i32 0, i32* %v2_10004bf9, align 4
  %v0_10004c00 = load i32, i32* %ecx.global-to-local, align 4
  %v1_10004c00 = add i32 %v0_10004c00, 12
  %v2_10004c00 = inttoptr i32 %v1_10004c00 to i32*
  store i32 1100470148, i32* %v2_10004c00, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_10004c0a = add i32 %arg1, 16
  %v2_10004c0a = inttoptr i32 %v1_10004c0a to i32*
  store i32 0, i32* %v2_10004c0a, align 4
  %v0_10004c11 = load i32, i32* %edx.global-to-local, align 4
  %v1_10004c11 = add i32 %v0_10004c11, 20
  %v2_10004c11 = inttoptr i32 %v1_10004c11 to i32*
  store i32 1101518724, i32* %v2_10004c11, align 4
  %v1_10004c1b = add i32 %arg1, 204
  %v2_10004c1b = inttoptr i32 %v1_10004c1b to i16*
  store i16 0, i16* %v2_10004c1b, align 2
  %v1_10004c27 = add i32 %arg1, 206
  %v2_10004c27 = inttoptr i32 %v1_10004c27 to i16*
  store i16 0, i16* %v2_10004c27, align 2
  %v1_10004c33 = add i32 %arg1, 4
  %v2_10004c33 = inttoptr i32 %v1_10004c33 to i16*
  store i16 0, i16* %v2_10004c33, align 2
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10004c3c = add i32 %arg1, 24
  %v2_10004c3c = inttoptr i32 %v1_10004c3c to i32*
  store i32 0, i32* %v2_10004c3c, align 4
  %v0_10004c43 = load i32, i32* %eax.global-to-local, align 4
  %v1_10004c43 = add i32 %v0_10004c43, 28
  %v2_10004c43 = inttoptr i32 %v1_10004c43 to i32*
  store i32 1088973312, i32* %v2_10004c43, align 4
  %v1_10004c4d = add i32 %arg1, 32
  %v2_10004c4d = inttoptr i32 %v1_10004c4d to i16*
  store i16 1, i16* %v2_10004c4d, align 2
  %v1_10004c56 = add i32 %arg1, 34
  %v2_10004c56 = inttoptr i32 %v1_10004c56 to i16*
  store i16 1, i16* %v2_10004c56, align 2
  %v1_10004c5f = add i32 %arg1, 64
  %v2_10004c5f = inttoptr i32 %v1_10004c5f to i16*
  store i16 1, i16* %v2_10004c5f, align 2
  %v1_10004c68 = add i32 %arg1, 66
  %v2_10004c68 = inttoptr i32 %v1_10004c68 to i16*
  store i16 1, i16* %v2_10004c68, align 2
  %v1_10004c71 = add i32 %arg1, 36
  %v2_10004c71 = inttoptr i32 %v1_10004c71 to i32*
  store i32 0, i32* %v2_10004c71, align 4
  %v1_10004c7b = add i32 %arg1, 40
  %v2_10004c7b = inttoptr i32 %v1_10004c7b to i32*
  store i32 0, i32* %v2_10004c7b, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_10004c85 = add i32 %arg1, 48
  %v2_10004c85 = inttoptr i32 %v1_10004c85 to i32*
  store i32 0, i32* %v2_10004c85, align 4
  %v0_10004c8c = load i32, i32* %ecx.global-to-local, align 4
  %v1_10004c8c = add i32 %v0_10004c8c, 52
  %v2_10004c8c = inttoptr i32 %v1_10004c8c to i32*
  store i32 0, i32* %v2_10004c8c, align 4
  %v1_10004c96 = add i32 %arg1, 60
  %v2_10004c96 = inttoptr i32 %v1_10004c96 to i32*
  store i32 120, i32* %v2_10004c96, align 4
  %v1_10004ca0 = add i32 %arg1, 72
  %v2_10004ca0 = inttoptr i32 %v1_10004ca0 to i16*
  store i16 4, i16* %v2_10004ca0, align 2
  %v1_10004ca9 = add i32 %arg1, 74
  %v2_10004ca9 = inttoptr i32 %v1_10004ca9 to i16*
  store i16 1, i16* %v2_10004ca9, align 2
  %v1_10004cb2 = add i32 %arg1, 76
  %v2_10004cb2 = inttoptr i32 %v1_10004cb2 to i16*
  store i16 7, i16* %v2_10004cb2, align 2
  %v1_10004cbb = add i32 %arg1, 78
  %v2_10004cbb = inttoptr i32 %v1_10004cbb to i16*
  store i16 1, i16* %v2_10004cbb, align 2
  %v1_10004cc4 = add i32 %arg1, 80
  %v2_10004cc4 = inttoptr i32 %v1_10004cc4 to i16*
  store i16 0, i16* %v2_10004cc4, align 2
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_10004ccd = add i32 %arg1, 88
  %v2_10004ccd = inttoptr i32 %v1_10004ccd to i32*
  store i32 -1717986918, i32* %v2_10004ccd, align 4
  %v0_10004cd4 = load i32, i32* %edx.global-to-local, align 4
  %v1_10004cd4 = add i32 %v0_10004cd4, 92
  %v2_10004cd4 = inttoptr i32 %v1_10004cd4 to i32*
  store i32 1069128089, i32* %v2_10004cd4, align 4
  %v1_10004cde = add i32 %arg1, 96
  %v2_10004cde = inttoptr i32 %v1_10004cde to i16*
  store i16 20, i16* %v2_10004cde, align 2
  %v1_10004ce7 = add i32 %arg1, 98
  %v2_10004ce7 = inttoptr i32 %v1_10004ce7 to i16*
  store i16 0, i16* %v2_10004ce7, align 2
  %v1_10004cf0 = add i32 %arg1, 108
  %v2_10004cf0 = inttoptr i32 %v1_10004cf0 to i16*
  store i16 0, i16* %v2_10004cf0, align 2
  %v1_10004cf9 = add i32 %arg1, 110
  %v2_10004cf9 = inttoptr i32 %v1_10004cf9 to i16*
  store i16 1, i16* %v2_10004cf9, align 2
  %v1_10004d02 = add i32 %arg1, 112
  %v2_10004d02 = inttoptr i32 %v1_10004d02 to i32*
  store i32 0, i32* %v2_10004d02, align 4
  %v1_10004d0c = add i32 %arg1, 116
  %v2_10004d0c = inttoptr i32 %v1_10004d0c to i16*
  store i16 0, i16* %v2_10004d0c, align 2
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10004d15 = add i32 %arg1, 120
  %v2_10004d15 = inttoptr i32 %v1_10004d15 to i32*
  store i32 0, i32* %v2_10004d15, align 4
  %v0_10004d1c = load i32, i32* %eax.global-to-local, align 4
  %v1_10004d1c = add i32 %v0_10004d1c, 124
  %v2_10004d1c = inttoptr i32 %v1_10004d1c to i32*
  store i32 0, i32* %v2_10004d1c, align 4
  %v1_10004d26 = add i32 %arg1, 128
  %v2_10004d26 = inttoptr i32 %v1_10004d26 to i16*
  store i16 36, i16* %v2_10004d26, align 2
  %v1_10004d32 = add i32 %arg1, 130
  %v2_10004d32 = inttoptr i32 %v1_10004d32 to i16*
  store i16 5, i16* %v2_10004d32, align 2
  %v1_10004d3e = add i32 %arg1, 132
  %v2_10004d3e = inttoptr i32 %v1_10004d3e to i32*
  store i32 501, i32* %v2_10004d3e, align 4
  %v1_10004d4b = add i32 %arg1, 136
  %v2_10004d4b = inttoptr i32 %v1_10004d4b to i16*
  store i16 0, i16* %v2_10004d4b, align 2
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_10004d57 = add i32 %arg1, 144
  %v2_10004d57 = inttoptr i32 %v1_10004d57 to i32*
  store i32 0, i32* %v2_10004d57, align 4
  %v0_10004d61 = load i32, i32* %edx.global-to-local, align 4
  %v1_10004d61 = add i32 %v0_10004d61, 148
  %v2_10004d61 = inttoptr i32 %v1_10004d61 to i32*
  store i32 1092519040, i32* %v2_10004d61, align 4
  %v1_10004d6e = add i32 %arg1, 160
  %v2_10004d6e = inttoptr i32 %v1_10004d6e to i32*
  store i32 0, i32* %v2_10004d6e, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_10004d7b = add i32 %arg1, 68
  %v2_10004d7b = inttoptr i32 %v1_10004d7b to i32*
  store i32 501, i32* %v2_10004d7b, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_10004d85 = add i32 %arg1, 152
  %v2_10004d85 = inttoptr i32 %v1_10004d85 to i32*
  store i32 501, i32* %v2_10004d85, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_10004d98 = call i32 @SetZSamplRate(i32 %arg1, i64 1000000)
  %v1_10004da3 = add i32 %arg1, 164
  %v2_10004da3 = inttoptr i32 %v1_10004da3 to i32*
  store i32 501, i32* %v2_10004da3, align 4
  %v1_10004db0 = add i32 %arg1, 168
  %v2_10004db0 = inttoptr i32 %v1_10004db0 to i32*
  store i32 501, i32* %v2_10004db0, align 4
  %v1_10004dbd = add i32 %arg1, 172
  %v2_10004dbd = inttoptr i32 %v1_10004dbd to i32*
  store i32 501, i32* %v2_10004dbd, align 4
  %v1_10004dca = add i32 %arg1, 176
  %v2_10004dca = inttoptr i32 %v1_10004dca to i16*
  store i16 50, i16* %v2_10004dca, align 2
  %v1_10004dd6 = add i32 %arg1, 184
  %v2_10004dd6 = inttoptr i32 %v1_10004dd6 to i16*
  store i16 0, i16* %v2_10004dd6, align 2
  %v1_10004de2 = add i32 %arg1, 188
  %v2_10004de2 = inttoptr i32 %v1_10004de2 to i32*
  store i32 0, i32* %v2_10004de2, align 4
  %v1_10004def = add i32 %arg1, 472
  %v2_10004def = inttoptr i32 %v1_10004def to i16*
  store i16 880, i16* %v2_10004def, align 2
  %v1_10004dfb = add i32 %arg1, 474
  %v2_10004dfb = inttoptr i32 %v1_10004dfb to i16*
  store i16 5, i16* %v2_10004dfb, align 2
  %v1_10004e07 = add i32 %arg1, 476
  %v2_10004e07 = inttoptr i32 %v1_10004e07 to i16*
  store i16 127, i16* %v2_10004e07, align 2
  %v1_10004e13 = add i32 %arg1, 200
  %v2_10004e13 = inttoptr i32 %v1_10004e13 to i32*
  store i32 0, i32* %v2_10004e13, align 4
  %v1_10004e20 = add i32 %arg1, 480
  %v2_10004e20 = inttoptr i32 %v1_10004e20 to i32*
  store i32 0, i32* %v2_10004e20, align 4
  %v1_10004e2d = add i32 %arg1, 532
  %v2_10004e2d = inttoptr i32 %v1_10004e2d to i16*
  store i16 -1, i16* %v2_10004e2d, align 2
  %v1_10004e39 = add i32 %arg1, 536
  %v2_10004e39 = inttoptr i32 %v1_10004e39 to i16*
  store i16 -1, i16* %v2_10004e39, align 2
  %v1_10004e45 = add i32 %arg1, 534
  %v2_10004e45 = inttoptr i32 %v1_10004e45 to i16*
  store i16 -1, i16* %v2_10004e45, align 2
  %v1_10004e51 = add i32 %arg1, 538
  %v2_10004e51 = inttoptr i32 %v1_10004e51 to i16*
  store i16 -1, i16* %v2_10004e51, align 2
  %v1_10004e5d = add i32 %arg1, 540
  %v2_10004e5d = inttoptr i32 %v1_10004e5d to i16*
  store i16 0, i16* %v2_10004e5d, align 2
  %v1_10004e69 = add i32 %arg1, 542
  %v2_10004e69 = inttoptr i32 %v1_10004e69 to i16*
  store i16 1, i16* %v2_10004e69, align 2
  %v1_10004e75 = add i32 %arg1, 544
  %v2_10004e75 = inttoptr i32 %v1_10004e75 to i8*
  store i8 0, i8* %v2_10004e75, align 1
  %v1_10004e7f = add i32 %arg1, 594
  %v2_10004e7f = inttoptr i32 %v1_10004e7f to i8*
  store i8 0, i8* %v2_10004e7f, align 1
  %v1_10004e89 = add i32 %arg1, 192
  %v2_10004e89 = inttoptr i32 %v1_10004e89 to i32*
  store i32 0, i32* %v2_10004e89, align 4
  %v1_10004e96 = add i32 %arg1, 180
  %v2_10004e96 = inttoptr i32 %v1_10004e96 to i32*
  store i32 55, i32* %v2_10004e96, align 4
  %v1_10004ea3 = add i32 %arg1, 100
  %v2_10004ea3 = inttoptr i32 %v1_10004ea3 to i16*
  store i16 0, i16* %v2_10004ea3, align 2
  %v1_10004eac = add i32 %arg1, 102
  %v2_10004eac = inttoptr i32 %v1_10004eac to i16*
  store i16 0, i16* %v2_10004eac, align 2
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10004eb5 = add i32 %arg1, 104
  %v2_10004eb5 = inttoptr i32 %v1_10004eb5 to i16*
  store i16 10, i16* %v2_10004eb5, align 2
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_10004ebe = add i32 %arg1, 468
  %v2_10004ebe = inttoptr i32 %v1_10004ebe to i32*
  store i32 0, i32* %v2_10004ebe, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_10004ecc = call i32 @function_10001718(i32 %arg1)
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10004ed8 = call i32 @function_10001b13(i32 %arg1)
  store i32 %v1_10004ed8, i32* %eax.global-to-local, align 4
  %v12_10004ee0 = and i32 %v1_10004ed8, -65536
  br label %dec_label_pc_10004ee3

dec_label_pc_10004ee3:                            ; preds = %dec_label_pc_10004b9d, %dec_label_pc_10004bf6
  %storemerge = phi i32 [ %v2_10004b9d, %dec_label_pc_10004b9d ], [ %v12_10004ee0, %dec_label_pc_10004bf6 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 200, { 1, 3, 2, 7, 8, 9, 4, 5, 6, 0 }
  uselistorder i32 204, { 0, 3, 1, 2, 4 }
  uselistorder i32 %arg1, { 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10004ee3, { 1, 0 }
  uselistorder label %dec_label_pc_10004bf6, { 4, 0, 1, 2, 3 }
}

define i32 @RdInterfaceType(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10004eec = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10004eec, i32* @eax, align 4
  %v1_10004ef4 = mul i32 %v1_10004eec, 65536
  %v2_10004ef4 = sdiv i32 %v1_10004ef4, 65536
  store i32 %v2_10004ef4, i32* @ecx, align 4
  %v1_10004ef4.off = or i32 %v1_10004ef4, 65535
  %tmp = icmp ult i32 %v1_10004ef4.off, 131071
  br i1 %tmp, label %dec_label_pc_10004f01, label %dec_label_pc_10004efb

dec_label_pc_10004efb:                            ; preds = %entry
  %v2_10004efb = or i32 %v1_10004eec, 65535
  br label %dec_label_pc_10004f19

dec_label_pc_10004f01:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10004f07 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10004f12 = add i32 %arg1, 196
  %v2_10004f12 = inttoptr i32 %v1_10004f12 to i16*
  %v3_10004f12 = load i16, i16* %v2_10004f12, align 2
  %v4_10004f12 = zext i16 %v3_10004f12 to i32
  %v6_10004f12 = and i32 %arg1, -65536
  %v7_10004f12 = or i32 %v4_10004f12, %v6_10004f12
  br label %dec_label_pc_10004f19

dec_label_pc_10004f19:                            ; preds = %dec_label_pc_10004efb, %dec_label_pc_10004f01
  %storemerge = phi i32 [ %v2_10004efb, %dec_label_pc_10004efb ], [ %v7_10004f12, %dec_label_pc_10004f01 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10004eec, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10004f19, { 1, 0 }
}

define i32 @SetInterfaceType(i32 %arg1, i16 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10004f22 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10004f22, i32* @eax, align 4
  %v1_10004f2a = mul i32 %v1_10004f22, 65536
  %v1_10004f2a.off = or i32 %v1_10004f2a, 65535
  %tmp = icmp ult i32 %v1_10004f2a.off, 131071
  br i1 %tmp, label %dec_label_pc_10004f3f, label %dec_label_pc_10004f31

dec_label_pc_10004f31:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v1_10004f35 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10004f50

dec_label_pc_10004f3f:                            ; preds = %entry
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_10004f46 = add i32 %arg1, 196
  %v4_10004f46 = inttoptr i32 %v3_10004f46 to i16*
  store i16 %arg2, i16* %v4_10004f46, align 2
  %v11_10004f4d = load i32, i32* %eax.global-to-local, align 4
  %v12_10004f4d = and i32 %v11_10004f4d, -65536
  br label %dec_label_pc_10004f50

dec_label_pc_10004f50:                            ; preds = %dec_label_pc_10004f31, %dec_label_pc_10004f3f
  %storemerge = phi i32 [ %v12_10004f4d, %dec_label_pc_10004f3f ], [ %v1_10004f35, %dec_label_pc_10004f31 ]
  %v0_10004f51 = phi i32 [ %v12_10004f4d, %dec_label_pc_10004f3f ], [ %v1_10004f35, %dec_label_pc_10004f31 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_10004f51

; uselistorder directives
  uselistorder i32 %arg1, { 0, 3, 4, 5, 2, 1 }
  uselistorder label %dec_label_pc_10004f50, { 1, 0 }
}

define i32 @function_10004f52(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10004f52:
  %stack_var_-4 = alloca i32, align 4
  %v0_10004f52 = load i32, i32* @ebp, align 4
  store i32 %v0_10004f52, i32* %stack_var_-4, align 4
  %v4_10004f52 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10004f52, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10004f5c = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10004f5c, i32* @eax, align 4
  %v1_10004f64 = mul i32 %v1_10004f5c, 65536
  %v1_10004f64.off = or i32 %v1_10004f64, 65535
  %tmp = icmp ult i32 %v1_10004f64.off, 131071
  br i1 %tmp, label %dec_label_pc_10004f79, label %dec_label_pc_10004f6b

dec_label_pc_10004f6b:                            ; preds = %dec_label_pc_10004f52
  %v1_10004f6f = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10004fcb

dec_label_pc_10004f79:                            ; preds = %dec_label_pc_10004f52
  %v1_10004f7c = add i32 %arg1, 32
  %v2_10004f7c = inttoptr i32 %v1_10004f7c to i16*
  %v3_10004f7c = load i16, i16* %v2_10004f7c, align 2
  %v9_10004f80 = icmp eq i16 %v3_10004f7c, 1
  %v1_10004f83 = icmp eq i1 %v9_10004f80, false
  br i1 %v1_10004f83, label %dec_label_pc_10004f8b, label %dec_label_pc_10004f85

dec_label_pc_10004f85:                            ; preds = %dec_label_pc_10004f79
  %v1_10004f85 = and i32 %arg1, -65536
  %v2_10004f85 = or i32 %v1_10004f85, 65532
  br label %dec_label_pc_10004fcb

dec_label_pc_10004f8b:                            ; preds = %dec_label_pc_10004f79
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_10004fad, label %dec_label_pc_10004f91

dec_label_pc_10004f91:                            ; preds = %dec_label_pc_10004f8b
  %v1_10004f9b = call i32 @RdMaxFreqLimit(i32 %arg1)
  %v3_10004fa8 = and i32 %v1_10004f9b, 16640
  %v4_10004fa8 = icmp eq i32 %v3_10004fa8, 0
  br i1 %v4_10004fa8, label %dec_label_pc_10004fb3, label %dec_label_pc_10004fad

dec_label_pc_10004fad:                            ; preds = %dec_label_pc_10004f91, %dec_label_pc_10004f8b
  %v0_10004fad = phi i32 [ %v1_10004f9b, %dec_label_pc_10004f91 ], [ %arg1, %dec_label_pc_10004f8b ]
  %v1_10004fad = and i32 %v0_10004fad, -65536
  %v2_10004fad = or i32 %v1_10004fad, 65533
  br label %dec_label_pc_10004fcb

dec_label_pc_10004fb3:                            ; preds = %dec_label_pc_10004f91
  %v0_10004fa3 = load i3, i3* @fpu_stat_TOP, align 1
  %storemerge3 = add i3 %v0_10004fa3, 1
  %tmp14 = sitofp i32 %arg2 to double
  %v3_10004fb9 = add i32 %arg1, 24
  %v5_10004fb9 = inttoptr i32 %v3_10004fb9 to double*
  store double %tmp14, double* %v5_10004fb9, align 4
  store i3 %storemerge3, i3* @fpu_stat_TOP, align 1
  %v1_10004fc0 = call i32 @function_10001718(i32 %arg1)
  %v12_10004fc8 = and i32 %v1_10004fc0, -65536
  br label %dec_label_pc_10004fcb

dec_label_pc_10004fcb:                            ; preds = %dec_label_pc_10004fad, %dec_label_pc_10004f85, %dec_label_pc_10004f6b, %dec_label_pc_10004fb3
  %v0_10004fce = phi i32 [ %v2_10004fad, %dec_label_pc_10004fad ], [ %v2_10004f85, %dec_label_pc_10004f85 ], [ %v1_10004f6f, %dec_label_pc_10004f6b ], [ %v12_10004fc8, %dec_label_pc_10004fb3 ]
  ret i32 %v0_10004fce

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 8, 2, 0, 7, 1, 5, 6, 4, 3 }
  uselistorder label %dec_label_pc_10004fcb, { 3, 0, 1, 2 }
}

define i32 @function_10004fcf(i32 %arg1) local_unnamed_addr {
dec_label_pc_10004fcf:
  store i32 %arg1, i32* @eax, align 4
  %v1_10004fd6 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10004fd6, i32* @eax, align 4
  %v1_10004fde = mul i32 %v1_10004fd6, 65536
  %v1_10004fde.off = or i32 %v1_10004fde, 65535
  %tmp = icmp ult i32 %v1_10004fde.off, 131071
  br i1 %tmp, label %dec_label_pc_10004fea, label %dec_label_pc_10004fe5

dec_label_pc_10004fe5:                            ; preds = %dec_label_pc_10004fcf
  br label %dec_label_pc_10005003

dec_label_pc_10004fea:                            ; preds = %dec_label_pc_10004fcf
  store i32 %arg1, i32* @edx, align 4
  %v3_10004ff0 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v5_10004ffb = load i3, i3* @fpu_stat_TOP, align 1
  %v6_10004ffb = add i3 %v5_10004ffb, -1
  store i3 %v6_10004ffb, i3* @fpu_stat_TOP, align 1
  %v1_10004ffe = call i32 @__ftol(i32 %arg1)
  br label %dec_label_pc_10005003

dec_label_pc_10005003:                            ; preds = %dec_label_pc_10004fe5, %dec_label_pc_10004fea
  %storemerge = phi i32 [ %v1_10004ffe, %dec_label_pc_10004fea ], [ -1, %dec_label_pc_10004fe5 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10005003, { 1, 0 }
}

define i32 @StepSizeMode(i32 %arg1, i16 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_10005005 = load i32, i32* @ebp, align 4
  store i32 %v0_10005005, i32* %stack_var_-4, align 4
  %v4_10005005 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10005005, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10005015 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005015, i32* @eax, align 4
  %v1_1000501d = mul i32 %v1_10005015, 65536
  %v1_1000501d.off = or i32 %v1_1000501d, 65535
  %tmp = icmp ult i32 %v1_1000501d.off, 131071
  br i1 %tmp, label %dec_label_pc_10005035, label %dec_label_pc_10005024

dec_label_pc_10005024:                            ; preds = %entry
  %v1_10005028 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100050c2

dec_label_pc_10005035:                            ; preds = %entry
  %v4_10005035 = sext i16 %arg2 to i32
  %v1_10005045 = mul nsw i32 %v4_10005035, 4
  %v2_10005045 = add i32 %v1_10005045, ptrtoint (i32* @global_var_100050c6.55 to i32)
  %v3_10005045 = inttoptr i32 %v2_10005045 to i32*
  %v4_10005045 = load i32, i32* %v3_10005045, align 4
  call void @__pseudo_branch(i32 %v4_10005045)
  %v3_100050ae = add i32 %arg1, 32
  %v4_100050ae = inttoptr i32 %v3_100050ae to i16*
  store i16 1, i16* %v4_100050ae, align 2
  %v1_100050b6 = call i32 @function_10001718(i32 %arg1)
  %v6_100050be = and i32 %v1_100050b6, -65536
  %v7_100050be = or i32 %v6_100050be, 1
  br label %dec_label_pc_100050c2

dec_label_pc_100050c2:                            ; preds = %dec_label_pc_10005024, %dec_label_pc_10005035
  %v0_100050c5 = phi i32 [ %v1_10005028, %dec_label_pc_10005024 ], [ %v7_100050be, %dec_label_pc_10005035 ]
  %v2_100050c4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100050c4, i32* @ebp, align 4
  ret i32 %v0_100050c5

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100050c2, { 1, 0 }
}

define i32 @function_100050c6(i32 %arg1) local_unnamed_addr {
dec_label_pc_100050c6:
  %of.global-to-local = alloca i1, align 1
  %sf.global-to-local = alloca i1, align 1
  %v0_100050c7 = load i32, i32* @eax, align 4
  %v1_100050c8 = inttoptr i32 %v0_100050c7 to i8*
  %v2_100050c8 = load i8, i8* %v1_100050c8, align 1
  %v3_100050c8 = load i32, i32* @edx, align 4
  %v4_100050c8 = trunc i32 %v3_100050c8 to i8
  %v5_100050c8 = add i8 %v4_100050c8, %v2_100050c8
  store i8 %v5_100050c8, i8* %v1_100050c8, align 1
  %v0_100050ca = load i32, i32* @esp, align 4
  %v1_100050ca = add i32 %v0_100050ca, -1
  %v5_100050ca = sub i32 0, %v0_100050ca
  %v6_100050ca = and i32 %v0_100050ca, %v5_100050ca
  %v7_100050ca = icmp slt i32 %v6_100050ca, 0
  store i1 %v7_100050ca, i1* %of.global-to-local, align 1
  %v9_100050ca = icmp slt i32 %v1_100050ca, 0
  store i1 %v9_100050ca, i1* %sf.global-to-local, align 1
  %v0_100050cb = load i32, i32* @eax, align 4
  %v1_100050cc = inttoptr i32 %v0_100050cb to i8*
  %v2_100050cc = load i8, i8* %v1_100050cc, align 1
  %v3_100050cc = load i32, i32* @edx, align 4
  %v4_100050cc = trunc i32 %v3_100050cc to i8
  %v5_100050cc = add i8 %v4_100050cc, %v2_100050cc
  %v11_100050cc = xor i8 %v5_100050cc, %v2_100050cc
  %v12_100050cc = xor i8 %v5_100050cc, %v4_100050cc
  %v13_100050cc = and i8 %v11_100050cc, %v12_100050cc
  %v14_100050cc = icmp slt i8 %v13_100050cc, 0
  store i1 %v14_100050cc, i1* %of.global-to-local, align 1
  %v16_100050cc = icmp slt i8 %v5_100050cc, 0
  store i1 %v16_100050cc, i1* %sf.global-to-local, align 1
  store i8 %v5_100050cc, i8* %v1_100050cc, align 1
  %v0_100050ce = load i1, i1* %sf.global-to-local, align 1
  %v1_100050ce = load i1, i1* %of.global-to-local, align 1
  %v2_100050ce = icmp eq i1 %v0_100050ce, %v1_100050ce
  call void @__pseudo_cond_branch(i1 %v2_100050ce, i32 268456224)
  %v0_100050d0 = load i32, i32* @eax, align 4
  %v1_100050d0 = inttoptr i32 %v0_100050d0 to i8*
  %v2_100050d0 = load i8, i8* %v1_100050d0, align 1
  %v3_100050d0 = load i32, i32* @edx, align 4
  %v4_100050d0 = trunc i32 %v3_100050d0 to i8
  %v5_100050d0 = add i8 %v4_100050d0, %v2_100050d0
  %v11_100050d0 = xor i8 %v5_100050d0, %v2_100050d0
  %v12_100050d0 = xor i8 %v5_100050d0, %v4_100050d0
  %v13_100050d0 = and i8 %v11_100050d0, %v12_100050d0
  %v14_100050d0 = icmp slt i8 %v13_100050d0, 0
  store i1 %v14_100050d0, i1* %of.global-to-local, align 1
  %v16_100050d0 = icmp slt i8 %v5_100050d0, 0
  store i1 %v16_100050d0, i1* %sf.global-to-local, align 1
  store i8 %v5_100050d0, i8* %v1_100050d0, align 1
  %v0_100050d3 = load i32, i32* @eax, align 4
  %v1_100050d4 = inttoptr i32 %v0_100050d3 to i8*
  %v2_100050d4 = load i8, i8* %v1_100050d4, align 1
  %v3_100050d4 = load i32, i32* @edx, align 4
  %v4_100050d4 = trunc i32 %v3_100050d4 to i8
  %v5_100050d4 = add i8 %v4_100050d4, %v2_100050d4
  %v11_100050d4 = xor i8 %v5_100050d4, %v2_100050d4
  %v12_100050d4 = xor i8 %v5_100050d4, %v4_100050d4
  %v13_100050d4 = and i8 %v11_100050d4, %v12_100050d4
  %v14_100050d4 = icmp slt i8 %v13_100050d4, 0
  store i1 %v14_100050d4, i1* %of.global-to-local, align 1
  %v16_100050d4 = icmp slt i8 %v5_100050d4, 0
  store i1 %v16_100050d4, i1* %sf.global-to-local, align 1
  store i8 %v5_100050d4, i8* %v1_100050d4, align 1
  %v22_100050d4 = load i32, i32* @eax, align 4
  ret i32 %v22_100050d4

; uselistorder directives
  uselistorder i8 %v5_100050d4, { 2, 3, 0, 1 }
  uselistorder i8 %v5_100050d0, { 2, 3, 0, 1 }
  uselistorder i8 %v5_100050cc, { 2, 3, 0, 1 }
  uselistorder i32 %v0_100050ca, { 1, 0, 2 }
}

define i32 @SetDefltPts(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i16, align 2
  store i16 0, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_100050e4 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100050e4, i32* @eax, align 4
  %v1_100050ec = mul i32 %v1_100050e4, 65536
  %v1_100050ec.off = or i32 %v1_100050ec, 65535
  %tmp = icmp ult i32 %v1_100050ec.off, 131071
  br i1 %tmp, label %dec_label_pc_10005103, label %dec_label_pc_100050f3

dec_label_pc_100050f3:                            ; preds = %entry
  %v1_100050f7 = call i32 @GetFuncStatusCode(i32 %arg1)
  store i32 %v1_100050f7, i32* %eax.global-to-local, align 4
  %v6_100050ff = trunc i32 %v1_100050f7 to i16
  store i16 %v6_100050ff, i16* %stack_var_-8, align 2
  br label %dec_label_pc_10005103

dec_label_pc_10005103:                            ; preds = %entry, %dec_label_pc_100050f3
  %v6_100051234 = phi i32 [ %v1_100050e4, %entry ], [ %v1_100050f7, %dec_label_pc_100050f3 ]
  %v5_10005107 = icmp slt i32 %arg2, 1
  br i1 %v5_10005107, label %dec_label_pc_10005112, label %dec_label_pc_10005109

dec_label_pc_10005109:                            ; preds = %dec_label_pc_10005103
  %v7_10005110 = icmp sgt i32 %arg2, 1000000000
  br i1 %v7_10005110, label %dec_label_pc_10005112, label %dec_label_pc_1000511a

dec_label_pc_10005112:                            ; preds = %dec_label_pc_10005109, %dec_label_pc_10005103
  store i16 -3, i16* %stack_var_-8, align 2
  br label %dec_label_pc_10005123

dec_label_pc_1000511a:                            ; preds = %dec_label_pc_10005109
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v2_10005120 = add i32 %arg1, 68
  %v3_10005120 = inttoptr i32 %v2_10005120 to i32*
  store i32 %arg2, i32* %v3_10005120, align 4
  %v3_10005123.pre = load i16, i16* %stack_var_-8, align 2
  %v6_10005123.pre = load i32, i32* %eax.global-to-local, align 4
  %phitmp = sext i16 %v3_10005123.pre to i32
  br label %dec_label_pc_10005123

dec_label_pc_10005123:                            ; preds = %dec_label_pc_10005112, %dec_label_pc_1000511a
  %v6_10005123 = phi i32 [ %v6_100051234, %dec_label_pc_10005112 ], [ %v6_10005123.pre, %dec_label_pc_1000511a ]
  %v3_10005123 = phi i32 [ -3, %dec_label_pc_10005112 ], [ %phitmp, %dec_label_pc_1000511a ]
  %v7_10005123 = and i32 %v6_10005123, -65536
  %v8_10005123 = or i32 %v7_10005123, %v3_10005123
  store i32 %v8_10005123, i32* %eax.global-to-local, align 4
  ret i32 %v8_10005123

; uselistorder directives
  uselistorder i32 %v1_100050e4, { 1, 0, 2 }
  uselistorder i16* %stack_var_-8, { 0, 3, 2, 1 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10005123, { 1, 0 }
  uselistorder label %dec_label_pc_10005103, { 1, 0 }
}

define i32 @RdDefltPts(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10005132 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005132, i32* @eax, align 4
  %v1_1000513a = mul i32 %v1_10005132, 65536
  %v1_1000513a.off = or i32 %v1_1000513a, 65535
  %tmp = icmp ult i32 %v1_1000513a.off, 131071
  br i1 %tmp, label %dec_label_pc_10005146, label %dec_label_pc_10005141

dec_label_pc_10005141:                            ; preds = %entry
  br label %dec_label_pc_1000515a

dec_label_pc_10005146:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000514c = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10005157 = add i32 %arg1, 68
  %v2_10005157 = inttoptr i32 %v1_10005157 to i32*
  %v3_10005157 = load i32, i32* %v2_10005157, align 4
  br label %dec_label_pc_1000515a

dec_label_pc_1000515a:                            ; preds = %dec_label_pc_10005141, %dec_label_pc_10005146
  %storemerge = phi i32 [ -1, %dec_label_pc_10005141 ], [ %v3_10005157, %dec_label_pc_10005146 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000515a, { 1, 0 }
}

define i32 @SetNumSwpPts(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i16, align 2
  store i16 0, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_1000516a = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000516a, i32* @eax, align 4
  %v1_10005172 = mul i32 %v1_1000516a, 65536
  %v1_10005172.off = or i32 %v1_10005172, 65535
  %tmp = icmp ult i32 %v1_10005172.off, 131071
  br i1 %tmp, label %dec_label_pc_1000518b, label %dec_label_pc_10005179

dec_label_pc_10005179:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v1_1000517d = call i32 @GetFuncStatusCode(i32 %arg1)
  %v6_10005185 = trunc i32 %v1_1000517d to i16
  store i16 %v6_10005185, i16* %stack_var_-8, align 2
  br label %dec_label_pc_100051e5

dec_label_pc_1000518b:                            ; preds = %entry
  %v1_1000518e = add i32 %arg1, 32
  %v2_1000518e = inttoptr i32 %v1_1000518e to i16*
  %v3_1000518e = load i16, i16* %v2_1000518e, align 2
  %v9_10005192 = icmp eq i16 %v3_1000518e, 1
  %v1_10005195 = icmp eq i1 %v9_10005192, false
  br i1 %v1_10005195, label %dec_label_pc_1000519f, label %dec_label_pc_10005197

dec_label_pc_10005197:                            ; preds = %dec_label_pc_1000518b
  store i16 -4, i16* %stack_var_-8, align 2
  br label %dec_label_pc_100051e5

dec_label_pc_1000519f:                            ; preds = %dec_label_pc_1000518b
  %v5_100051a3 = icmp slt i32 %arg2, 1
  br i1 %v5_100051a3, label %dec_label_pc_100051ae, label %dec_label_pc_100051a5

dec_label_pc_100051a5:                            ; preds = %dec_label_pc_1000519f
  %v7_100051ac = icmp sgt i32 %arg2, 1000000000
  br i1 %v7_100051ac, label %dec_label_pc_100051ae, label %dec_label_pc_100051b6

dec_label_pc_100051ae:                            ; preds = %dec_label_pc_100051a5, %dec_label_pc_1000519f
  store i16 -3, i16* %stack_var_-8, align 2
  br label %dec_label_pc_100051e5

dec_label_pc_100051b6:                            ; preds = %dec_label_pc_100051a5
  %v2_100051bc = add i32 %arg1, 164
  %v3_100051bc = inttoptr i32 %v2_100051bc to i32*
  store i32 %arg2, i32* %v3_100051bc, align 4
  %v1_100051c5 = add i32 %arg1, 64
  %v2_100051c5 = inttoptr i32 %v1_100051c5 to i16*
  %v3_100051c5 = load i16, i16* %v2_100051c5, align 2
  %v1_100051c9 = icmp eq i16 %v3_100051c5, 0
  %v1_100051cb = icmp eq i1 %v1_100051c9, false
  br i1 %v1_100051cb, label %dec_label_pc_100051d9, label %dec_label_pc_100051cd

dec_label_pc_100051cd:                            ; preds = %dec_label_pc_100051b6
  %v2_100051d3 = add i32 %arg1, 168
  %v3_100051d3 = inttoptr i32 %v2_100051d3 to i32*
  store i32 %arg2, i32* %v3_100051d3, align 4
  br label %dec_label_pc_100051d9

dec_label_pc_100051d9:                            ; preds = %dec_label_pc_100051b6, %dec_label_pc_100051cd
  store i32 %arg1, i32* @edx, align 4
  %v1_100051dd = call i32 @function_10001718(i32 %arg1)
  %v3_100051e5.pre = load i16, i16* %stack_var_-8, align 2
  br label %dec_label_pc_100051e5

dec_label_pc_100051e5:                            ; preds = %dec_label_pc_100051ae, %dec_label_pc_10005197, %dec_label_pc_10005179, %dec_label_pc_100051d9
  %v6_100051e5 = phi i32 [ %arg1, %dec_label_pc_100051ae ], [ %arg1, %dec_label_pc_10005197 ], [ %v1_1000517d, %dec_label_pc_10005179 ], [ %v1_100051dd, %dec_label_pc_100051d9 ]
  %v3_100051e5 = phi i16 [ -3, %dec_label_pc_100051ae ], [ -4, %dec_label_pc_10005197 ], [ %v6_10005185, %dec_label_pc_10005179 ], [ %v3_100051e5.pre, %dec_label_pc_100051d9 ]
  %v4_100051e5 = sext i16 %v3_100051e5 to i32
  %v7_100051e5 = and i32 %v6_100051e5, -65536
  %v8_100051e5 = or i32 %v4_100051e5, %v7_100051e5
  store i32 %v8_100051e5, i32* @eax, align 4
  %v3_100051ee = call i32 @SetFuncStatusCode(i32 %arg1, i16 %v3_100051e5)
  ret i32 %v3_100051ee

; uselistorder directives
  uselistorder i16 %v3_100051e5, { 1, 0 }
  uselistorder i16* %stack_var_-8, { 0, 4, 3, 2, 1 }
  uselistorder i32 168, { 0, 4, 1, 2, 3 }
  uselistorder i32 %arg2, { 3, 2, 0, 1 }
  uselistorder i32 %arg1, { 12, 0, 1, 11, 10, 9, 8, 7, 4, 5, 6, 3, 2 }
  uselistorder label %dec_label_pc_100051e5, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_100051d9, { 1, 0 }
}

define i32 @RdSessionHandle(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10005201 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005201, i32* @eax, align 4
  %v1_10005209 = mul i32 %v1_10005201, 65536
  %v1_10005209.off = or i32 %v1_10005209, 65535
  %tmp = icmp ult i32 %v1_10005209.off, 131071
  br i1 %tmp, label %dec_label_pc_10005214, label %dec_label_pc_10005210

dec_label_pc_10005210:                            ; preds = %entry
  br label %dec_label_pc_1000522b

dec_label_pc_10005214:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000521a = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10005225 = add i32 %arg1, 468
  %v2_10005225 = inttoptr i32 %v1_10005225 to i32*
  %v3_10005225 = load i32, i32* %v2_10005225, align 4
  br label %dec_label_pc_1000522b

dec_label_pc_1000522b:                            ; preds = %dec_label_pc_10005210, %dec_label_pc_10005214
  %storemerge = phi i32 [ 0, %dec_label_pc_10005210 ], [ %v3_10005225, %dec_label_pc_10005214 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000522b, { 1, 0 }
}

define i32 @SetSessionHandle(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10005234 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005234, i32* @eax, align 4
  %v1_1000523c = mul i32 %v1_10005234, 65536
  %v1_1000523c.off = or i32 %v1_1000523c, 65535
  %tmp = icmp ult i32 %v1_1000523c.off, 131071
  br i1 %tmp, label %dec_label_pc_10005251, label %dec_label_pc_10005243

dec_label_pc_10005243:                            ; preds = %entry
  %v1_10005247 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10005260

dec_label_pc_10005251:                            ; preds = %entry
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v2_10005257 = add i32 %arg1, 468
  %v3_10005257 = inttoptr i32 %v2_10005257 to i32*
  store i32 %arg2, i32* %v3_10005257, align 4
  %v11_1000525d = load i32, i32* %eax.global-to-local, align 4
  %v12_1000525d = and i32 %v11_1000525d, -65536
  br label %dec_label_pc_10005260

dec_label_pc_10005260:                            ; preds = %dec_label_pc_10005243, %dec_label_pc_10005251
  %storemerge = phi i32 [ %v12_1000525d, %dec_label_pc_10005251 ], [ %v1_10005247, %dec_label_pc_10005243 ]
  %v0_10005261 = phi i32 [ %v12_1000525d, %dec_label_pc_10005251 ], [ %v1_10005247, %dec_label_pc_10005243 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_10005261

; uselistorder directives
  uselistorder i32 %arg1, { 3, 2, 4, 1, 0 }
  uselistorder label %dec_label_pc_10005260, { 1, 0 }
}

define i32 @RdNumSwpPts(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000526a = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10005272 = mul i32 %v1_1000526a, 65536
  %v1_10005272.off = or i32 %v1_10005272, 65535
  %tmp = icmp ult i32 %v1_10005272.off, 131071
  br i1 %tmp, label %dec_label_pc_1000527e, label %dec_label_pc_10005279

dec_label_pc_10005279:                            ; preds = %entry
  br label %dec_label_pc_100052b5

dec_label_pc_1000527e:                            ; preds = %entry
  %v1_10005281 = add i32 %arg1, 64
  %v2_10005281 = inttoptr i32 %v1_10005281 to i16*
  %v3_10005281 = load i16, i16* %v2_10005281, align 2
  %v4_10005281 = sext i16 %v3_10005281 to i32
  store i32 %v4_10005281, i32* @eax, align 4
  %v9_10005285 = icmp eq i16 %v3_10005281, 1
  %v1_10005288 = icmp eq i1 %v9_10005285, false
  br i1 %v1_10005288, label %dec_label_pc_10005298, label %dec_label_pc_1000528a

dec_label_pc_1000528a:                            ; preds = %dec_label_pc_1000527e
  %v1_1000528d = add i32 %arg1, 132
  br label %dec_label_pc_100052a4

dec_label_pc_10005298:                            ; preds = %dec_label_pc_1000527e
  store i32 %arg1, i32* @eax, align 4
  %v1_1000529b = add i32 %arg1, 164
  br label %dec_label_pc_100052a4

dec_label_pc_100052a4:                            ; preds = %dec_label_pc_1000528a, %dec_label_pc_10005298
  %storemerge1.in.in = phi i32 [ %v1_1000529b, %dec_label_pc_10005298 ], [ %v1_1000528d, %dec_label_pc_1000528a ]
  %storemerge1.in = inttoptr i32 %storemerge1.in.in to i32*
  %storemerge1 = load i32, i32* %storemerge1.in, align 4
  store i32 %arg1, i32* @edx, align 4
  %v3_100052aa = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_100052b5

dec_label_pc_100052b5:                            ; preds = %dec_label_pc_10005279, %dec_label_pc_100052a4
  %storemerge = phi i32 [ -1, %dec_label_pc_10005279 ], [ %storemerge1, %dec_label_pc_100052a4 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 7, 6, 4, 3, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_100052b5, { 1, 0 }
  uselistorder label %dec_label_pc_100052a4, { 1, 0 }
}

define i32 @RdNumDataPts(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_100052b9 = load i32, i32* @ebp, align 4
  store i32 %v0_100052b9, i32* %stack_var_-4, align 4
  %v4_100052b9 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100052b9, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_100052c3 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_100052cb = mul i32 %v1_100052c3, 65536
  %v1_100052cb.off = or i32 %v1_100052cb, 65535
  %tmp = icmp ult i32 %v1_100052cb.off, 131071
  br i1 %tmp, label %dec_label_pc_100052da, label %dec_label_pc_100052d2

dec_label_pc_100052d2:                            ; preds = %entry
  br label %dec_label_pc_10005391

dec_label_pc_100052da:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v1_100052dd = add i32 %arg1, 4
  %v2_100052dd = inttoptr i32 %v1_100052dd to i16*
  %v3_100052dd = load i16, i16* %v2_100052dd, align 2
  %v4_100052dd8 = zext i16 %v3_100052dd to i32
  %v1_100052e1 = and i32 %v4_100052dd8, 127
  %v2_100052e1 = icmp eq i32 %v1_100052e1, 0
  store i32 %v1_100052e1, i32* @eax, align 4
  %v1_100052e4 = trunc i32 %v1_100052e1 to i16
  %v1_100052ee = icmp eq i1 %v2_100052e1, false
  br i1 %v1_100052ee, label %dec_label_pc_100052fc, label %dec_label_pc_10005380

dec_label_pc_100052fc:                            ; preds = %dec_label_pc_100052da
  %v1_100052ff = add i32 %arg1, 64
  %v2_100052ff = inttoptr i32 %v1_100052ff to i16*
  %v3_100052ff = load i16, i16* %v2_100052ff, align 2
  %v4_100052ff = sext i16 %v3_100052ff to i32
  store i32 %v4_100052ff, i32* @eax, align 4
  %v9_10005303 = icmp eq i16 %v3_100052ff, 1
  %v1_10005306 = icmp eq i1 %v9_10005303, false
  br i1 %v1_10005306, label %dec_label_pc_10005328, label %dec_label_pc_10005308

dec_label_pc_10005308:                            ; preds = %dec_label_pc_100052fc
  %v9_1000530c = icmp eq i32 %v1_100052e1, 3
  br i1 %v9_1000530c, label %dec_label_pc_10005328, label %dec_label_pc_10005311

dec_label_pc_10005311:                            ; preds = %dec_label_pc_10005308
  store i32 %v1_100052e1, i32* @edx, align 4
  %v9_10005315 = icmp eq i32 %v1_100052e1, 2
  br i1 %v9_10005315, label %dec_label_pc_10005328, label %dec_label_pc_1000531a

dec_label_pc_1000531a:                            ; preds = %dec_label_pc_10005311
  store i32 %arg1, i32* @eax, align 4
  %v1_1000531d = add i32 %arg1, 132
  %v2_1000531d = inttoptr i32 %v1_1000531d to i32*
  %v3_1000531d = load i32, i32* %v2_1000531d, align 4
  br label %dec_label_pc_10005380

dec_label_pc_10005328:                            ; preds = %dec_label_pc_10005311, %dec_label_pc_10005308, %dec_label_pc_100052fc
  store i32 %v1_100052e1, i32* @edx, align 4
  %v13_1000532f = icmp eq i32 %v1_100052e1, 1
  br i1 %v13_1000532f, label %dec_label_pc_10005343, label %dec_label_pc_10005335

dec_label_pc_10005335:                            ; preds = %dec_label_pc_10005328
  %v13_10005335 = icmp eq i16 %v1_100052e4, 2
  br i1 %v13_10005335, label %dec_label_pc_10005351, label %dec_label_pc_1000533b

dec_label_pc_1000533b:                            ; preds = %dec_label_pc_10005335
  %v13_1000533b = icmp eq i16 %v1_100052e4, 3
  br i1 %v13_1000533b, label %dec_label_pc_1000535f, label %dec_label_pc_1000536d

dec_label_pc_10005343:                            ; preds = %dec_label_pc_10005328
  store i32 %arg1, i32* @eax, align 4
  %v1_10005346 = add i32 %arg1, 164
  %v2_10005346 = inttoptr i32 %v1_10005346 to i32*
  %v3_10005346 = load i32, i32* %v2_10005346, align 4
  br label %dec_label_pc_10005380

dec_label_pc_10005351:                            ; preds = %dec_label_pc_10005335
  store i32 %arg1, i32* @edx, align 4
  %v1_10005354 = add i32 %arg1, 152
  %v2_10005354 = inttoptr i32 %v1_10005354 to i32*
  %v3_10005354 = load i32, i32* %v2_10005354, align 4
  store i32 %v3_10005354, i32* @eax, align 4
  br label %dec_label_pc_10005380

dec_label_pc_1000535f:                            ; preds = %dec_label_pc_1000533b
  %v1_10005362 = add i32 %arg1, 172
  %v2_10005362 = inttoptr i32 %v1_10005362 to i32*
  %v3_10005362 = load i32, i32* %v2_10005362, align 4
  store i32 %v3_10005362, i32* @edx, align 4
  br label %dec_label_pc_10005380

dec_label_pc_1000536d:                            ; preds = %dec_label_pc_1000533b
  store i32 %arg1, i32* @eax, align 4
  %v3_10005373 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -14)
  %v1_1000537b = mul i32 %v3_10005373, 65536
  %v2_1000537b = sdiv i32 %v1_1000537b, 65536
  br label %dec_label_pc_10005391

dec_label_pc_10005380:                            ; preds = %dec_label_pc_100052da, %dec_label_pc_1000535f, %dec_label_pc_10005351, %dec_label_pc_10005343, %dec_label_pc_1000531a
  %stack_var_-12.0 = phi i32 [ %v3_10005346, %dec_label_pc_10005343 ], [ %v3_10005354, %dec_label_pc_10005351 ], [ %v3_10005362, %dec_label_pc_1000535f ], [ %v3_1000531d, %dec_label_pc_1000531a ], [ 0, %dec_label_pc_100052da ]
  %v3_10005386 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_10005391

dec_label_pc_10005391:                            ; preds = %dec_label_pc_1000536d, %dec_label_pc_100052d2, %dec_label_pc_10005380
  %v0_10005394 = phi i32 [ %v2_1000537b, %dec_label_pc_1000536d ], [ -1, %dec_label_pc_100052d2 ], [ %stack_var_-12.0, %dec_label_pc_10005380 ]
  %v2_10005393 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10005393, i32* @ebp, align 4
  ret i32 %v0_10005394

; uselistorder directives
  uselistorder i32 %v1_100052e1, { 0, 3, 1, 4, 2, 5, 6, 7 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 %arg1, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10005391, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10005380, { 1, 2, 3, 4, 0 }
}

define i32 @RdSwpIdx(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000539c = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000539c, i32* @eax, align 4
  %v1_100053a4 = mul i32 %v1_1000539c, 65536
  %v1_100053a4.off = or i32 %v1_100053a4, 65535
  %tmp = icmp ult i32 %v1_100053a4.off, 131071
  br i1 %tmp, label %dec_label_pc_100053af, label %dec_label_pc_100053ab

dec_label_pc_100053ab:                            ; preds = %entry
  br label %dec_label_pc_100053c6

dec_label_pc_100053af:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_100053b5 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_100053c0 = add i32 %arg1, 160
  %v2_100053c0 = inttoptr i32 %v1_100053c0 to i32*
  %v3_100053c0 = load i32, i32* %v2_100053c0, align 4
  br label %dec_label_pc_100053c6

dec_label_pc_100053c6:                            ; preds = %dec_label_pc_100053ab, %dec_label_pc_100053af
  %storemerge = phi i32 [ 0, %dec_label_pc_100053ab ], [ %v3_100053c0, %dec_label_pc_100053af ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100053c6, { 1, 0 }
}

define i32 @SetSwpIdx(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100053d6 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100053d6, i32* @eax, align 4
  %v1_100053de = mul i32 %v1_100053d6, 65536
  %v1_100053de.off = or i32 %v1_100053de, 65535
  %tmp = icmp ult i32 %v1_100053de.off, 131071
  br i1 %tmp, label %dec_label_pc_100053f3, label %dec_label_pc_100053e5

dec_label_pc_100053e5:                            ; preds = %entry
  %v1_100053e9 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_1000541f

dec_label_pc_100053f3:                            ; preds = %entry
  %v4_100053f3 = icmp eq i32 %arg2, 0
  br i1 %v4_100053f3, label %dec_label_pc_10005410, label %dec_label_pc_100053f9

dec_label_pc_100053f9:                            ; preds = %dec_label_pc_100053f3
  %v1_100053fd = call i32 @RdNumDataPts(i32 %arg1)
  store i32 %v1_100053fd, i32* @eax, align 4
  %v7_10005408 = icmp slt i32 %v1_100053fd, %arg2
  br i1 %v7_10005408, label %dec_label_pc_1000540a, label %dec_label_pc_10005410

dec_label_pc_1000540a:                            ; preds = %dec_label_pc_100053f9
  %v1_1000540a = and i32 %v1_100053fd, -65536
  %v2_1000540a = or i32 %v1_1000540a, 65533
  br label %dec_label_pc_1000541f

dec_label_pc_10005410:                            ; preds = %dec_label_pc_100053f9, %dec_label_pc_100053f3
  %v2_10005416 = add i32 %arg1, 160
  %v3_10005416 = inttoptr i32 %v2_10005416 to i32*
  store i32 %arg2, i32* %v3_10005416, align 4
  %v11_1000541c = load i32, i32* @eax, align 4
  %v12_1000541c = and i32 %v11_1000541c, -65536
  br label %dec_label_pc_1000541f

dec_label_pc_1000541f:                            ; preds = %dec_label_pc_1000540a, %dec_label_pc_100053e5, %dec_label_pc_10005410
  %v0_10005422 = phi i32 [ %v2_1000540a, %dec_label_pc_1000540a ], [ %v1_100053e9, %dec_label_pc_100053e5 ], [ %v12_1000541c, %dec_label_pc_10005410 ]
  ret i32 %v0_10005422

; uselistorder directives
  uselistorder i32 160, { 2, 0, 1 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000541f, { 2, 0, 1 }
}

define i32 @SwpTimeMode(i32 %arg1, i16 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_10005423 = load i32, i32* @ebp, align 4
  store i32 %v0_10005423, i32* %stack_var_-4, align 4
  %v4_10005423 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10005423, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10005433 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005433, i32* @eax, align 4
  %v1_1000543b = mul i32 %v1_10005433, 65536
  %v1_1000543b.off = or i32 %v1_1000543b, 65535
  %tmp = icmp ult i32 %v1_1000543b.off, 131071
  br i1 %tmp, label %dec_label_pc_10005450, label %dec_label_pc_10005442

dec_label_pc_10005442:                            ; preds = %entry
  %v1_10005446 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100054cc

dec_label_pc_10005450:                            ; preds = %entry
  %v1_10005453 = add i32 %arg1, 36
  %v2_10005453 = inttoptr i32 %v1_10005453 to i32*
  %v3_10005453 = load i32, i32* %v2_10005453, align 4
  %tmp10 = icmp slt i32 %v3_10005453, 1
  %.pre = sext i16 %arg2 to i32
  br i1 %tmp10, label %dec_label_pc_1000546a, label %dec_label_pc_10005459

dec_label_pc_10005459:                            ; preds = %dec_label_pc_10005450
  %v9_1000545d = icmp eq i16 %arg2, 1
  br i1 %v9_1000545d, label %dec_label_pc_1000546a, label %dec_label_pc_100054c8

dec_label_pc_1000546a:                            ; preds = %dec_label_pc_10005450, %dec_label_pc_10005459
  switch i32 %.pre, label %dec_label_pc_100054ad [
    i32 0, label %dec_label_pc_1000548c
    i32 1, label %dec_label_pc_10005481
    i32 2, label %dec_label_pc_10005497
    i32 3, label %dec_label_pc_100054a2
  ]

dec_label_pc_10005481:                            ; preds = %dec_label_pc_1000546a
  %v1_10005484 = add i32 %arg1, 34
  %v2_10005484 = inttoptr i32 %v1_10005484 to i16*
  store i16 1, i16* %v2_10005484, align 2
  br label %dec_label_pc_100054bc

dec_label_pc_1000548c:                            ; preds = %dec_label_pc_1000546a
  %v1_1000548f = add i32 %arg1, 34
  %v2_1000548f = inttoptr i32 %v1_1000548f to i16*
  store i16 0, i16* %v2_1000548f, align 2
  br label %dec_label_pc_100054bc

dec_label_pc_10005497:                            ; preds = %dec_label_pc_1000546a
  %v1_1000549a = add i32 %arg1, 34
  %v2_1000549a = inttoptr i32 %v1_1000549a to i16*
  store i16 2, i16* %v2_1000549a, align 2
  br label %dec_label_pc_100054bc

dec_label_pc_100054a2:                            ; preds = %dec_label_pc_1000546a
  %v1_100054a5 = add i32 %arg1, 34
  %v2_100054a5 = inttoptr i32 %v1_100054a5 to i16*
  store i16 3, i16* %v2_100054a5, align 2
  br label %dec_label_pc_100054bc

dec_label_pc_100054ad:                            ; preds = %dec_label_pc_1000546a
  %v1_100054b0 = add i32 %arg1, 34
  %v2_100054b0 = inttoptr i32 %v1_100054b0 to i16*
  store i16 1, i16* %v2_100054b0, align 2
  br label %dec_label_pc_100054bc

dec_label_pc_100054bc:                            ; preds = %dec_label_pc_100054a2, %dec_label_pc_10005497, %dec_label_pc_1000548c, %dec_label_pc_10005481, %dec_label_pc_100054ad
  %stack_var_-8.0 = phi i32 [ 1, %dec_label_pc_100054ad ], [ 0, %dec_label_pc_100054a2 ], [ 0, %dec_label_pc_10005497 ], [ 0, %dec_label_pc_10005481 ], [ 0, %dec_label_pc_1000548c ]
  %v1_100054c0 = call i32 @function_10001b13(i32 %arg1)
  br label %dec_label_pc_100054c8

dec_label_pc_100054c8:                            ; preds = %dec_label_pc_10005459, %dec_label_pc_100054bc
  %v5_100054c8 = phi i32 [ %v1_100054c0, %dec_label_pc_100054bc ], [ %arg1, %dec_label_pc_10005459 ]
  %stack_var_-8.1 = phi i32 [ %stack_var_-8.0, %dec_label_pc_100054bc ], [ 65529, %dec_label_pc_10005459 ]
  %v4_100054c8 = and i32 %stack_var_-8.1, 65535
  %v6_100054c8 = and i32 %v5_100054c8, -65536
  %v7_100054c8 = or i32 %v4_100054c8, %v6_100054c8
  br label %dec_label_pc_100054cc

dec_label_pc_100054cc:                            ; preds = %dec_label_pc_10005442, %dec_label_pc_100054c8
  %v0_100054cf = phi i32 [ %v1_10005446, %dec_label_pc_10005442 ], [ %v7_100054c8, %dec_label_pc_100054c8 ]
  %v2_100054ce = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100054ce, i32* @ebp, align 4
  ret i32 %v0_100054cf

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 0, 10, 9, 8, 7, 6, 5, 3, 4, 2, 1 }
  uselistorder label %dec_label_pc_100054cc, { 1, 0 }
  uselistorder label %dec_label_pc_100054c8, { 1, 0 }
  uselistorder label %dec_label_pc_100054bc, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_1000546a, { 1, 0 }
}

define i32 @SetSwpTime(i32 %arg1, double %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100054e0 = load i32, i32* @ebp, align 4
  store i32 %v0_100054e0, i32* %stack_var_-4, align 4
  %v4_100054e0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100054e0, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_100054fc = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10005504 = mul i32 %v1_100054fc, 65536
  %v2_10005504 = sdiv i32 %v1_10005504, 65536
  store i32 %v2_10005504, i32* @eax, align 4
  %v1_10005504.off = or i32 %v1_10005504, 65535
  %tmp = icmp ult i32 %v1_10005504.off, 131071
  br i1 %tmp, label %dec_label_pc_10005519, label %dec_label_pc_1000550b

dec_label_pc_1000550b:                            ; preds = %entry
  %v1_1000550f = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10005597

dec_label_pc_10005519:                            ; preds = %entry
  %v1_1000551c = add i32 %arg1, 34
  %v2_1000551c = inttoptr i32 %v1_1000551c to i16*
  %v3_1000551c = load i16, i16* %v2_1000551c, align 2
  %v4_1000551c = sext i16 %v3_1000551c to i32
  store i32 %v4_1000551c, i32* %eax.global-to-local, align 4
  %v9_10005520 = icmp eq i16 %v3_1000551c, 2
  br i1 %v9_10005520, label %dec_label_pc_1000552d, label %dec_label_pc_10005593

dec_label_pc_1000552d:                            ; preds = %dec_label_pc_10005519
  %v3_10005538 = and i32 %v4_1000551c, 16640
  %v4_10005538 = icmp eq i32 %v3_10005538, 0
  br i1 %v4_10005538, label %dec_label_pc_10005593, label %dec_label_pc_1000554d

dec_label_pc_1000554d:                            ; preds = %dec_label_pc_1000552d
  %v3_10005565 = and i32 %v4_1000551c, 256
  %v4_10005565 = icmp eq i32 %v3_10005565, 0
  br i1 %v4_10005565, label %dec_label_pc_10005593, label %dec_label_pc_1000556a

dec_label_pc_1000556a:                            ; preds = %dec_label_pc_1000554d
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_1000556d = fptrunc double %arg2 to float
  %v5_1000556d = bitcast float %v4_1000556d to i32
  %v2_10005570 = add i32 %arg1, 48
  %v3_10005570 = inttoptr i32 %v2_10005570 to i32*
  store i32 %v5_1000556d, i32* %v3_10005570, align 4
  %v1_10005576 = load i32, i32* %eax.global-to-local, align 4
  %v2_10005576 = add i32 %v1_10005576, 52
  %v3_10005576 = inttoptr i32 %v2_10005576 to i32*
  store i32 %arg3, i32* %v3_10005576, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10005583 = call i32 @function_10001b13(i32 %arg1)
  store i32 %v1_10005583, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10005593

dec_label_pc_10005593:                            ; preds = %dec_label_pc_1000552d, %dec_label_pc_1000554d, %dec_label_pc_10005519, %dec_label_pc_1000556a
  %v5_10005593 = phi i32 [ %v1_10005583, %dec_label_pc_1000556a ], [ %v4_1000551c, %dec_label_pc_10005519 ], [ %v4_1000551c, %dec_label_pc_1000554d ], [ %v4_1000551c, %dec_label_pc_1000552d ]
  %stack_var_-12.0 = phi i32 [ 0, %dec_label_pc_1000556a ], [ 65532, %dec_label_pc_10005519 ], [ 65533, %dec_label_pc_1000554d ], [ 65533, %dec_label_pc_1000552d ]
  %v6_10005593 = and i32 %v5_10005593, -65536
  %v7_10005593 = or i32 %v6_10005593, %stack_var_-12.0
  br label %dec_label_pc_10005597

dec_label_pc_10005597:                            ; preds = %dec_label_pc_1000550b, %dec_label_pc_10005593
  %storemerge = phi i32 [ %v7_10005593, %dec_label_pc_10005593 ], [ %v1_1000550f, %dec_label_pc_1000550b ]
  %v0_1000559a = phi i32 [ %v7_10005593, %dec_label_pc_10005593 ], [ %v1_1000550f, %dec_label_pc_1000550b ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000559a

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 7, 6, 5, 4, 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_10005597, { 1, 0 }
  uselistorder label %dec_label_pc_10005593, { 3, 1, 0, 2 }
}

define i32 @RdSwpTime(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %tmp1 = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* @eax, align 4
  %v1_100055a2 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_100055aa = mul i32 %v1_100055a2, 65536
  %v1_100055aa.off = or i32 %v1_100055aa, 65535
  %tmp = icmp ult i32 %v1_100055aa.off, 131071
  br i1 %tmp, label %dec_label_pc_100055c7, label %dec_label_pc_100055b1

dec_label_pc_100055b1:                            ; preds = %entry
  %v4_100055b1 = icmp eq i32* %arg2, null
  br i1 %v4_100055b1, label %dec_label_pc_100055c7, label %dec_label_pc_100055b7

dec_label_pc_100055b7:                            ; preds = %dec_label_pc_100055b1
  store i32 %tmp1, i32* @edx, align 4
  store i32 0, i32* %arg2, align 4
  %v0_100055c0 = load i32, i32* @edx, align 4
  %v1_100055c0 = add i32 %v0_100055c0, 4
  %v2_100055c0 = inttoptr i32 %v1_100055c0 to i32*
  store i32 -1074790400, i32* %v2_100055c0, align 4
  br label %dec_label_pc_100055c7

dec_label_pc_100055c7:                            ; preds = %dec_label_pc_100055b1, %entry, %dec_label_pc_100055b7
  store i32 %arg1, i32* @eax, align 4
  %v3_100055cd = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  store i32 %tmp1, i32* %edx.global-to-local, align 4
  %v1_100055db = add i32 %arg1, 48
  %v2_100055db = inttoptr i32 %v1_100055db to i32*
  %v3_100055db = load i32, i32* %v2_100055db, align 4
  store i32 %v3_100055db, i32* %arg2, align 4
  %v1_100055e0 = add i32 %arg1, 52
  %v2_100055e0 = inttoptr i32 %v1_100055e0 to i32*
  %v3_100055e0 = load i32, i32* %v2_100055e0, align 4
  %v1_100055e3 = load i32, i32* %edx.global-to-local, align 4
  %v2_100055e3 = add i32 %v1_100055e3, 4
  %v3_100055e3 = inttoptr i32 %v2_100055e3 to i32*
  store i32 %v3_100055e0, i32* %v3_100055e3, align 4
  ret i32 %v3_100055db

; uselistorder directives
  uselistorder i32 %tmp1, { 1, 0 }
  uselistorder i32 %arg1, { 0, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_100055c7, { 2, 0, 1 }
}

define i32 @SetDwellTime(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100055f6 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100055f6, i32* @eax, align 4
  %v1_100055fe = mul i32 %v1_100055f6, 65536
  %v1_100055fe.off = or i32 %v1_100055fe, 65535
  %tmp = icmp ult i32 %v1_100055fe.off, 131071
  br i1 %tmp, label %dec_label_pc_10005613, label %dec_label_pc_10005605

dec_label_pc_10005605:                            ; preds = %entry
  %v1_10005609 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10005669

dec_label_pc_10005613:                            ; preds = %entry
  %v1_10005616 = add i32 %arg1, 34
  %v2_10005616 = inttoptr i32 %v1_10005616 to i16*
  %v3_10005616 = load i16, i16* %v2_10005616, align 2
  %v9_1000561a = icmp eq i16 %v3_10005616, 1
  br i1 %v9_1000561a, label %dec_label_pc_10005627, label %dec_label_pc_1000561f

dec_label_pc_1000561f:                            ; preds = %dec_label_pc_10005613
  br label %dec_label_pc_10005665

dec_label_pc_10005627:                            ; preds = %dec_label_pc_10005613
  %v5_10005627 = icmp slt i32 %arg2, 0
  %v2_1000562b = icmp eq i1 %v5_10005627, false
  br i1 %v2_1000562b, label %dec_label_pc_1000562d, label %dec_label_pc_1000565f

dec_label_pc_1000562d:                            ; preds = %dec_label_pc_10005627
  %v4_1000562d = add i32 %arg2, -2000000000
  %v6_1000562d = sub i32 1999999999, %arg2
  %v7_1000562d = and i32 %v6_1000562d, %arg2
  %v8_1000562d = icmp slt i32 %v7_1000562d, 0
  %v9_1000562d = icmp eq i32 %v4_1000562d, 0
  %v10_1000562d = icmp slt i32 %v4_1000562d, 0
  %v3_10005634 = icmp eq i1 %v10_1000562d, %v8_1000562d
  %v4_10005634 = icmp eq i1 %v9_1000562d, false
  %v5_10005634 = and i1 %v4_10005634, %v3_10005634
  br i1 %v5_10005634, label %dec_label_pc_1000565f, label %dec_label_pc_10005636

dec_label_pc_10005636:                            ; preds = %dec_label_pc_1000562d
  %v2_1000563c = add i32 %arg1, 36
  %v3_1000563c = inttoptr i32 %v2_1000563c to i32*
  store i32 %arg2, i32* %v3_1000563c, align 4
  %v2_10005648 = add i32 %arg1, 40
  %v3_10005648 = inttoptr i32 %v2_10005648 to i32*
  store i32 %arg2, i32* %v3_10005648, align 4
  %v1_10005655 = call i32 @function_10001b13(i32 %arg1)
  br label %dec_label_pc_10005665

dec_label_pc_1000565f:                            ; preds = %dec_label_pc_10005627, %dec_label_pc_1000562d
  br label %dec_label_pc_10005665

dec_label_pc_10005665:                            ; preds = %dec_label_pc_10005636, %dec_label_pc_1000561f, %dec_label_pc_1000565f
  %v6_10005665 = phi i32 [ %v1_10005655, %dec_label_pc_10005636 ], [ %arg1, %dec_label_pc_1000561f ], [ %arg1, %dec_label_pc_1000565f ]
  %v3_10005665 = phi i32 [ 0, %dec_label_pc_10005636 ], [ -1, %dec_label_pc_1000561f ], [ -3, %dec_label_pc_1000565f ]
  %v7_10005665 = and i32 %v6_10005665, -65536
  %v8_10005665 = or i32 %v7_10005665, %v3_10005665
  br label %dec_label_pc_10005669

dec_label_pc_10005669:                            ; preds = %dec_label_pc_10005605, %dec_label_pc_10005665
  %v0_1000566c = phi i32 [ %v1_10005609, %dec_label_pc_10005605 ], [ %v8_10005665, %dec_label_pc_10005665 ]
  ret i32 %v0_1000566c

; uselistorder directives
  uselistorder i32 %v4_1000562d, { 1, 0 }
  uselistorder i32 %arg2, { 0, 5, 1, 3, 4, 2 }
  uselistorder i32 %arg1, { 0, 1, 8, 7, 6, 4, 5, 3, 2 }
  uselistorder label %dec_label_pc_10005669, { 1, 0 }
  uselistorder label %dec_label_pc_10005665, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000565f, { 1, 0 }
}

define i32 @RdDwellTime(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10005674 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005674, i32* @eax, align 4
  %v1_1000567c = mul i32 %v1_10005674, 65536
  %v1_1000567c.off = or i32 %v1_1000567c, 65535
  %tmp = icmp ult i32 %v1_1000567c.off, 131071
  br i1 %tmp, label %dec_label_pc_10005688, label %dec_label_pc_10005683

dec_label_pc_10005683:                            ; preds = %entry
  br label %dec_label_pc_1000569c

dec_label_pc_10005688:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000568e = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10005699 = add i32 %arg1, 36
  %v2_10005699 = inttoptr i32 %v1_10005699 to i32*
  %v3_10005699 = load i32, i32* %v2_10005699, align 4
  br label %dec_label_pc_1000569c

dec_label_pc_1000569c:                            ; preds = %dec_label_pc_10005683, %dec_label_pc_10005688
  %storemerge = phi i32 [ -1, %dec_label_pc_10005683 ], [ %v3_10005699, %dec_label_pc_10005688 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000569c, { 1, 0 }
}

define i32 @OverRideSetTime(i32 %arg1, i64 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100056ac = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100056ac, i32* @eax, align 4
  %v1_100056b4 = mul i32 %v1_100056ac, 65536
  %v1_100056b4.off = or i32 %v1_100056b4, 65535
  %tmp = icmp ult i32 %v1_100056b4.off, 131071
  br i1 %tmp, label %dec_label_pc_100056c9, label %dec_label_pc_100056bb

dec_label_pc_100056bb:                            ; preds = %entry
  %v1_100056bf = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10005720

dec_label_pc_100056c9:                            ; preds = %entry
  %v1_100056cc = add i32 %arg1, 34
  %v2_100056cc = inttoptr i32 %v1_100056cc to i16*
  %v3_100056cc = load i16, i16* %v2_100056cc, align 2
  %v9_100056d0 = icmp eq i16 %v3_100056cc, 3
  br i1 %v9_100056d0, label %dec_label_pc_100056dd, label %dec_label_pc_100056d5

dec_label_pc_100056d5:                            ; preds = %dec_label_pc_100056c9
  br label %dec_label_pc_1000571c

dec_label_pc_100056dd:                            ; preds = %dec_label_pc_100056c9
  %v4_100056dd = trunc i64 %arg2 to i32
  %v6_100056dd = icmp slt i32 %v4_100056dd, 0
  %v2_100056e1 = icmp eq i1 %v6_100056dd, false
  br i1 %v2_100056e1, label %dec_label_pc_100056e3, label %dec_label_pc_10005716

dec_label_pc_100056e3:                            ; preds = %dec_label_pc_100056dd
  %v5_100056e3 = add i32 %v4_100056dd, -2000000000
  %v7_100056e3 = sub i32 1999999999, %v4_100056dd
  %v8_100056e3 = and i32 %v7_100056e3, %v4_100056dd
  %v9_100056e3 = icmp slt i32 %v8_100056e3, 0
  %v10_100056e3 = icmp eq i32 %v5_100056e3, 0
  %v11_100056e3 = icmp slt i32 %v5_100056e3, 0
  %v3_100056ea = icmp eq i1 %v11_100056e3, %v9_100056e3
  %v4_100056ea = icmp eq i1 %v10_100056e3, false
  %v5_100056ea = and i1 %v4_100056ea, %v3_100056ea
  br i1 %v5_100056ea, label %dec_label_pc_10005716, label %dec_label_pc_100056ec

dec_label_pc_100056ec:                            ; preds = %dec_label_pc_100056e3
  %sext = mul i64 %arg2, 4294967296
  %v2_100056ef = sdiv i64 %sext, 4294967296
  %v3_100056ef = mul nsw i64 %v2_100056ef, -1
  %v4_100056ef = trunc i64 %v3_100056ef to i32
  %v2_100056f5 = add i32 %arg1, 40
  %v3_100056f5 = inttoptr i32 %v2_100056f5 to i32*
  store i32 %v4_100056ef, i32* %v3_100056f5, align 4
  %v1_100056fb = add i32 %arg1, 36
  %v2_100056fb = inttoptr i32 %v1_100056fb to i32*
  store i32 0, i32* %v2_100056fb, align 4
  %v1_1000570c = call i32 @function_10001b13(i32 %arg1)
  br label %dec_label_pc_1000571c

dec_label_pc_10005716:                            ; preds = %dec_label_pc_100056dd, %dec_label_pc_100056e3
  br label %dec_label_pc_1000571c

dec_label_pc_1000571c:                            ; preds = %dec_label_pc_100056ec, %dec_label_pc_100056d5, %dec_label_pc_10005716
  %v6_1000571c = phi i32 [ %v1_1000570c, %dec_label_pc_100056ec ], [ %arg1, %dec_label_pc_100056d5 ], [ %arg1, %dec_label_pc_10005716 ]
  %v3_1000571c = phi i32 [ 0, %dec_label_pc_100056ec ], [ -4, %dec_label_pc_100056d5 ], [ -3, %dec_label_pc_10005716 ]
  %v7_1000571c = and i32 %v6_1000571c, -65536
  %v8_1000571c = or i32 %v7_1000571c, %v3_1000571c
  br label %dec_label_pc_10005720

dec_label_pc_10005720:                            ; preds = %dec_label_pc_100056bb, %dec_label_pc_1000571c
  %v0_10005723 = phi i32 [ %v1_100056bf, %dec_label_pc_100056bb ], [ %v8_1000571c, %dec_label_pc_1000571c ]
  ret i32 %v0_10005723

; uselistorder directives
  uselistorder i32 %v5_100056e3, { 1, 0 }
  uselistorder i32 %v4_100056dd, { 0, 2, 1, 3 }
  uselistorder i32 %arg1, { 0, 1, 8, 7, 6, 4, 5, 3, 2 }
  uselistorder label %dec_label_pc_10005720, { 1, 0 }
  uselistorder label %dec_label_pc_1000571c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10005716, { 1, 0 }
}

define i32 @RdSettleTime(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000572b = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000572b, i32* @eax, align 4
  %v1_10005733 = mul i32 %v1_1000572b, 65536
  %v1_10005733.off = or i32 %v1_10005733, 65535
  %tmp = icmp ult i32 %v1_10005733.off, 131071
  br i1 %tmp, label %dec_label_pc_1000573f, label %dec_label_pc_1000573a

dec_label_pc_1000573a:                            ; preds = %entry
  br label %dec_label_pc_1000575c

dec_label_pc_1000573f:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10005745 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10005750 = add i32 %arg1, 40
  %v2_10005750 = inttoptr i32 %v1_10005750 to i32*
  %v3_10005750 = load i32, i32* %v2_10005750, align 4
  %v1_10005754 = call i32 @function_1000d563(i32 %v3_10005750)
  br label %dec_label_pc_1000575c

dec_label_pc_1000575c:                            ; preds = %dec_label_pc_1000573a, %dec_label_pc_1000573f
  %v0_1000575d = phi i32 [ -1, %dec_label_pc_1000573a ], [ %v1_10005754, %dec_label_pc_1000573f ]
  ret i32 %v0_1000575d

; uselistorder directives
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000575c, { 1, 0 }
}

define i32 @SetRBW(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000576c = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000576c, i32* @eax, align 4
  %v1_10005774 = mul i32 %v1_1000576c, 65536
  %v1_10005774.off = or i32 %v1_10005774, 65535
  %tmp = icmp ult i32 %v1_10005774.off, 131071
  br i1 %tmp, label %dec_label_pc_10005789, label %dec_label_pc_1000577b

dec_label_pc_1000577b:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v1_1000577f = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100057e3

dec_label_pc_10005789:                            ; preds = %entry
  %v1_1000578c = add i32 %arg1, 74
  %v2_1000578c = inttoptr i32 %v1_1000578c to i16*
  %v3_1000578c = load i16, i16* %v2_1000578c, align 2
  %v9_10005790 = icmp eq i16 %v3_1000578c, 1
  %v1_10005793 = icmp eq i1 %v9_10005790, false
  br i1 %v1_10005793, label %dec_label_pc_1000579d, label %dec_label_pc_10005795

dec_label_pc_10005795:                            ; preds = %dec_label_pc_10005789
  br label %dec_label_pc_100057df

dec_label_pc_1000579d:                            ; preds = %dec_label_pc_10005789
  %v4_1000579d = sext i16 %arg2 to i32
  store i32 %v4_1000579d, i32* @edx, align 4
  %v3_100057a1 = icmp slt i16 %arg2, 0
  %v2_100057a3 = icmp eq i1 %v3_100057a1, false
  br i1 %v2_100057a3, label %dec_label_pc_100057a5, label %dec_label_pc_100057d9

dec_label_pc_100057a5:                            ; preds = %dec_label_pc_1000579d
  %v6_100057a9 = sub nsw i32 3, %v4_1000579d
  %v7_100057a9 = and i32 %v6_100057a9, %v4_1000579d
  %v8_100057a9 = icmp slt i32 %v7_100057a9, 0
  %v9_100057a9 = icmp eq i16 %arg2, 4
  %v10_100057a9 = icmp slt i16 %arg2, 4
  %v3_100057ac = icmp eq i1 %v10_100057a9, %v8_100057a9
  %v4_100057ac = icmp eq i1 %v9_100057a9, false
  %v5_100057ac = and i1 %v4_100057ac, %v3_100057ac
  br i1 %v5_100057ac, label %dec_label_pc_100057d9, label %dec_label_pc_100057ae

dec_label_pc_100057ae:                            ; preds = %dec_label_pc_100057a5
  %v4_100057b1 = zext i16 %arg2 to i32
  %v7_100057b1 = and i32 %v4_1000579d, -65536
  %v8_100057b1 = or i32 %v7_100057b1, %v4_100057b1
  store i32 %v8_100057b1, i32* @edx, align 4
  %v3_100057b5 = add i32 %arg1, 72
  %v4_100057b5 = inttoptr i32 %v3_100057b5 to i16*
  store i16 %arg2, i16* %v4_100057b5, align 2
  %v1_100057c3 = call i32 @function_10001718(i32 %arg1)
  %v1_100057cf = call i32 @function_10001b13(i32 %arg1)
  br label %dec_label_pc_100057df

dec_label_pc_100057d9:                            ; preds = %dec_label_pc_1000579d, %dec_label_pc_100057a5
  %v6_100057df4 = phi i32 [ %arg1, %dec_label_pc_1000579d ], [ %v4_1000579d, %dec_label_pc_100057a5 ]
  br label %dec_label_pc_100057df

dec_label_pc_100057df:                            ; preds = %dec_label_pc_100057ae, %dec_label_pc_10005795, %dec_label_pc_100057d9
  %v6_100057df = phi i32 [ %v1_100057cf, %dec_label_pc_100057ae ], [ %arg1, %dec_label_pc_10005795 ], [ %v6_100057df4, %dec_label_pc_100057d9 ]
  %v3_100057df = phi i32 [ 0, %dec_label_pc_100057ae ], [ -4, %dec_label_pc_10005795 ], [ -3, %dec_label_pc_100057d9 ]
  %v7_100057df = and i32 %v6_100057df, -65536
  %v8_100057df = or i32 %v7_100057df, %v3_100057df
  br label %dec_label_pc_100057e3

dec_label_pc_100057e3:                            ; preds = %dec_label_pc_1000577b, %dec_label_pc_100057df
  %v0_100057e6 = phi i32 [ %v1_1000577f, %dec_label_pc_1000577b ], [ %v8_100057df, %dec_label_pc_100057df ]
  ret i32 %v0_100057e6

; uselistorder directives
  uselistorder i32 %v4_1000579d, { 1, 2, 0, 3, 4 }
  uselistorder i16 %arg2, { 5, 4, 3, 0, 2, 1 }
  uselistorder i32 %arg1, { 0, 1, 9, 8, 2, 5, 6, 7, 4, 3 }
  uselistorder label %dec_label_pc_100057e3, { 1, 0 }
  uselistorder label %dec_label_pc_100057df, { 2, 0, 1 }
  uselistorder label %dec_label_pc_100057d9, { 1, 0 }
}

define i32 @RdRBW(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100057ee = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100057ee, i32* @eax, align 4
  %v1_100057f6 = mul i32 %v1_100057ee, 65536
  %v2_100057f6 = sdiv i32 %v1_100057f6, 65536
  store i32 %v2_100057f6, i32* @ecx, align 4
  %v1_100057f6.off = or i32 %v1_100057f6, 65535
  %tmp = icmp ult i32 %v1_100057f6.off, 131071
  br i1 %tmp, label %dec_label_pc_10005803, label %dec_label_pc_100057fd

dec_label_pc_100057fd:                            ; preds = %entry
  %v2_100057fd = or i32 %v1_100057ee, 65535
  br label %dec_label_pc_10005818

dec_label_pc_10005803:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10005809 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10005814 = add i32 %arg1, 72
  %v2_10005814 = inttoptr i32 %v1_10005814 to i16*
  %v3_10005814 = load i16, i16* %v2_10005814, align 2
  %v4_10005814 = zext i16 %v3_10005814 to i32
  %v6_10005814 = and i32 %arg1, -65536
  %v7_10005814 = or i32 %v4_10005814, %v6_10005814
  br label %dec_label_pc_10005818

dec_label_pc_10005818:                            ; preds = %dec_label_pc_100057fd, %dec_label_pc_10005803
  %storemerge = phi i32 [ %v2_100057fd, %dec_label_pc_100057fd ], [ %v7_10005814, %dec_label_pc_10005803 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_100057ee, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10005818, { 1, 0 }
}

define i32 @SetRBWmode(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i16, align 2
  store i16 0, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10005828 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005828, i32* @eax, align 4
  %v1_10005830 = mul i32 %v1_10005828, 65536
  %v1_10005830.off = or i32 %v1_10005830, 65535
  %tmp = icmp ult i32 %v1_10005830.off, 131071
  br i1 %tmp, label %dec_label_pc_10005845, label %dec_label_pc_10005837

dec_label_pc_10005837:                            ; preds = %entry
  %v1_1000583b = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10005898

dec_label_pc_10005845:                            ; preds = %entry
  %v4_10005845 = sext i16 %arg2 to i32
  store i32 %v4_10005845, i32* %eax.global-to-local, align 4
  %v1_10005849 = icmp eq i16 %arg2, 0
  %v1_1000584b = icmp eq i1 %v1_10005849, false
  br i1 %v1_1000584b, label %dec_label_pc_10005858, label %dec_label_pc_1000584d

dec_label_pc_1000584d:                            ; preds = %dec_label_pc_10005845
  %v1_10005850 = add i32 %arg1, 74
  %v2_10005850 = inttoptr i32 %v1_10005850 to i16*
  store i16 0, i16* %v2_10005850, align 2
  %v6_10005894.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10005894

dec_label_pc_10005858:                            ; preds = %dec_label_pc_10005845
  %v9_1000585c = icmp eq i16 %arg2, 1
  br i1 %v9_1000585c, label %dec_label_pc_10005867, label %dec_label_pc_10005861

dec_label_pc_10005861:                            ; preds = %dec_label_pc_10005858
  store i16 1, i16* %stack_var_-8, align 2
  br label %dec_label_pc_10005867

dec_label_pc_10005867:                            ; preds = %dec_label_pc_10005858, %dec_label_pc_10005861
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_1000586a = add i32 %arg1, 74
  %v2_1000586a = inttoptr i32 %v1_1000586a to i16*
  store i16 1, i16* %v2_1000586a, align 2
  %v1_10005874 = call i32 @function_10001d01(i32 %arg1)
  store i32 %v1_10005874, i32* %eax.global-to-local, align 4
  %v1_10005880 = call i32 @function_10001718(i32 %arg1)
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_1000588c = call i32 @function_10001b13(i32 %arg1)
  store i32 %v1_1000588c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10005894

dec_label_pc_10005894:                            ; preds = %dec_label_pc_1000584d, %dec_label_pc_10005867
  %v6_10005894 = phi i32 [ %v6_10005894.pre, %dec_label_pc_1000584d ], [ %v1_1000588c, %dec_label_pc_10005867 ]
  %v3_10005894 = load i16, i16* %stack_var_-8, align 2
  %v4_10005894 = sext i16 %v3_10005894 to i32
  %v7_10005894 = and i32 %v6_10005894, -65536
  %v8_10005894 = or i32 %v4_10005894, %v7_10005894
  br label %dec_label_pc_10005898

dec_label_pc_10005898:                            ; preds = %dec_label_pc_10005837, %dec_label_pc_10005894
  %storemerge = phi i32 [ %v8_10005894, %dec_label_pc_10005894 ], [ %v1_1000583b, %dec_label_pc_10005837 ]
  %v0_1000589b = phi i32 [ %v8_10005894, %dec_label_pc_10005894 ], [ %v1_1000583b, %dec_label_pc_10005837 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000589b

; uselistorder directives
  uselistorder i16* %stack_var_-8, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_10001d01, { 3, 2, 1, 0 }
  uselistorder i16 %arg2, { 0, 2, 1 }
  uselistorder i32 %arg1, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10005898, { 1, 0 }
  uselistorder label %dec_label_pc_10005894, { 1, 0 }
  uselistorder label %dec_label_pc_10005867, { 1, 0 }
}

define i32 @RdRBWmode(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100058a3 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100058a3, i32* @eax, align 4
  %v1_100058ab = mul i32 %v1_100058a3, 65536
  %v1_100058ab.off = or i32 %v1_100058ab, 65535
  %tmp = icmp ult i32 %v1_100058ab.off, 131071
  br i1 %tmp, label %dec_label_pc_100058b8, label %dec_label_pc_100058b2

dec_label_pc_100058b2:                            ; preds = %entry
  %v2_100058b2 = or i32 %v1_100058a3, 65535
  br label %dec_label_pc_100058cd

dec_label_pc_100058b8:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_100058be = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_100058c9 = add i32 %arg1, 74
  %v2_100058c9 = inttoptr i32 %v1_100058c9 to i16*
  %v3_100058c9 = load i16, i16* %v2_100058c9, align 2
  %v4_100058c9 = zext i16 %v3_100058c9 to i32
  %v6_100058c9 = and i32 %arg1, -65536
  %v7_100058c9 = or i32 %v4_100058c9, %v6_100058c9
  br label %dec_label_pc_100058cd

dec_label_pc_100058cd:                            ; preds = %dec_label_pc_100058b2, %dec_label_pc_100058b8
  %storemerge = phi i32 [ %v2_100058b2, %dec_label_pc_100058b2 ], [ %v7_100058c9, %dec_label_pc_100058b8 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_100058a3, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100058cd, { 1, 0 }
}

define i32 @SetVBW(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100058d7 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100058d7, i32* @eax, align 4
  %v1_100058df = mul i32 %v1_100058d7, 65536
  %v2_100058df = sdiv i32 %v1_100058df, 65536
  store i32 %v2_100058df, i32* @ecx, align 4
  %v1_100058df.off = or i32 %v1_100058df, 65535
  %tmp = icmp ult i32 %v1_100058df.off, 131071
  br i1 %tmp, label %dec_label_pc_100058f8, label %dec_label_pc_100058e6

dec_label_pc_100058e6:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v1_100058ea = call i32 @GetFuncStatusCode(i32 %arg1)
  %sext = shl i32 %v1_100058ea, 16
  %phitmp = ashr exact i32 %sext, 16
  br label %dec_label_pc_10005942

dec_label_pc_100058f8:                            ; preds = %entry
  %v1_100058fb = add i32 %arg1, 78
  %v2_100058fb = inttoptr i32 %v1_100058fb to i16*
  %v3_100058fb = load i16, i16* %v2_100058fb, align 2
  %v4_100058fb = sext i16 %v3_100058fb to i32
  store i32 %v4_100058fb, i32* @ecx, align 4
  %v9_100058ff = icmp eq i16 %v3_100058fb, 1
  %v1_10005902 = icmp eq i1 %v9_100058ff, false
  br i1 %v1_10005902, label %dec_label_pc_1000590c, label %dec_label_pc_10005904

dec_label_pc_10005904:                            ; preds = %dec_label_pc_100058f8
  br label %dec_label_pc_10005942

dec_label_pc_1000590c:                            ; preds = %dec_label_pc_100058f8
  %v4_1000590c = sext i16 %arg2 to i32
  store i32 %v4_1000590c, i32* @edx, align 4
  %v3_10005910 = icmp slt i16 %arg2, 0
  %v2_10005912 = icmp eq i1 %v3_10005910, false
  br i1 %v2_10005912, label %dec_label_pc_10005914, label %dec_label_pc_1000591d

dec_label_pc_10005914:                            ; preds = %dec_label_pc_1000590c
  %v8_1000591b = icmp sgt i16 %arg2, 7
  br i1 %v8_1000591b, label %dec_label_pc_1000591d, label %dec_label_pc_10005925

dec_label_pc_1000591d:                            ; preds = %dec_label_pc_10005914, %dec_label_pc_1000590c
  %v6_100059424 = phi i32 [ %v4_1000590c, %dec_label_pc_10005914 ], [ %arg1, %dec_label_pc_1000590c ]
  br label %dec_label_pc_10005942

dec_label_pc_10005925:                            ; preds = %dec_label_pc_10005914
  %v4_10005928 = zext i16 %arg2 to i32
  %v7_10005928 = and i32 %v4_1000590c, -65536
  %v8_10005928 = or i32 %v7_10005928, %v4_10005928
  store i32 %v8_10005928, i32* @edx, align 4
  %v3_1000592c = add i32 %arg1, 76
  %v4_1000592c = inttoptr i32 %v3_1000592c to i16*
  store i16 %arg2, i16* %v4_1000592c, align 2
  %v1_1000593a = call i32 @function_10001b13(i32 %arg1)
  br label %dec_label_pc_10005942

dec_label_pc_10005942:                            ; preds = %dec_label_pc_1000591d, %dec_label_pc_10005904, %dec_label_pc_100058e6, %dec_label_pc_10005925
  %v6_10005942 = phi i32 [ %v6_100059424, %dec_label_pc_1000591d ], [ %arg1, %dec_label_pc_10005904 ], [ %v1_100058ea, %dec_label_pc_100058e6 ], [ %v1_1000593a, %dec_label_pc_10005925 ]
  %v3_10005942 = phi i32 [ -3, %dec_label_pc_1000591d ], [ -4, %dec_label_pc_10005904 ], [ %phitmp, %dec_label_pc_100058e6 ], [ 0, %dec_label_pc_10005925 ]
  %v7_10005942 = and i32 %v6_10005942, -65536
  %v8_10005942 = or i32 %v3_10005942, %v7_10005942
  ret i32 %v8_10005942

; uselistorder directives
  uselistorder i32 %v4_1000590c, { 1, 0, 2 }
  uselistorder i32 %v1_100058ea, { 1, 0 }
  uselistorder i16 %arg2, { 4, 3, 0, 2, 1 }
  uselistorder i32 %arg1, { 0, 8, 2, 1, 5, 6, 7, 4, 3 }
  uselistorder label %dec_label_pc_10005942, { 3, 0, 1, 2 }
}

define i32 @RdVBW(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10005951 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005951, i32* @eax, align 4
  %v1_10005959 = mul i32 %v1_10005951, 65536
  %v1_10005959.off = or i32 %v1_10005959, 65535
  %tmp = icmp ult i32 %v1_10005959.off, 131071
  br i1 %tmp, label %dec_label_pc_1000596e, label %dec_label_pc_10005960

dec_label_pc_10005960:                            ; preds = %entry
  %v1_10005964 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10005983

dec_label_pc_1000596e:                            ; preds = %entry
  store i32 %arg1, i32* @eax, align 4
  %v3_10005974 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_1000597f = add i32 %arg1, 76
  %v2_1000597f = inttoptr i32 %v1_1000597f to i16*
  %v3_1000597f = load i16, i16* %v2_1000597f, align 2
  %v4_1000597f = zext i16 %v3_1000597f to i32
  %v6_1000597f = and i32 %v3_10005974, -65536
  %v7_1000597f = or i32 %v4_1000597f, %v6_1000597f
  br label %dec_label_pc_10005983

dec_label_pc_10005983:                            ; preds = %dec_label_pc_10005960, %dec_label_pc_1000596e
  %v0_10005984 = phi i32 [ %v1_10005964, %dec_label_pc_10005960 ], [ %v7_1000597f, %dec_label_pc_1000596e ]
  ret i32 %v0_10005984

; uselistorder directives
  uselistorder i32 76, { 1, 2, 6, 7, 8, 9, 0, 10, 11, 3, 4, 5 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10005983, { 1, 0 }
}

define i32 @SetVBWmode(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i16, align 2
  store i16 0, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10005993 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005993, i32* @eax, align 4
  %v1_1000599b = mul i32 %v1_10005993, 65536
  %v2_1000599b = sdiv i32 %v1_1000599b, 65536
  store i32 %v2_1000599b, i32* @ecx, align 4
  %v1_1000599b.off = or i32 %v1_1000599b, 65535
  %tmp = icmp ult i32 %v1_1000599b.off, 131071
  br i1 %tmp, label %dec_label_pc_100059b0, label %dec_label_pc_100059a2

dec_label_pc_100059a2:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v1_100059a6 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100059ea

dec_label_pc_100059b0:                            ; preds = %entry
  %v4_100059b0 = sext i16 %arg2 to i32
  store i32 %v4_100059b0, i32* %eax.global-to-local, align 4
  %v1_100059b4 = icmp eq i16 %arg2, 0
  %v1_100059b6 = icmp eq i1 %v1_100059b4, false
  br i1 %v1_100059b6, label %dec_label_pc_100059c3, label %dec_label_pc_100059b8

dec_label_pc_100059b8:                            ; preds = %dec_label_pc_100059b0
  store i32 %arg1, i32* @ecx, align 4
  %v1_100059bb = add i32 %arg1, 78
  %v2_100059bb = inttoptr i32 %v1_100059bb to i16*
  store i16 0, i16* %v2_100059bb, align 2
  br label %dec_label_pc_100059e6

dec_label_pc_100059c3:                            ; preds = %dec_label_pc_100059b0
  store i32 %v4_100059b0, i32* @edx, align 4
  %v9_100059c7 = icmp eq i16 %arg2, 1
  %v1_100059ca = icmp eq i1 %v9_100059c7, false
  br i1 %v1_100059ca, label %dec_label_pc_100059d7, label %dec_label_pc_100059cc

dec_label_pc_100059cc:                            ; preds = %dec_label_pc_100059c3
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_100059cf = add i32 %arg1, 78
  %v2_100059cf = inttoptr i32 %v1_100059cf to i16*
  store i16 1, i16* %v2_100059cf, align 2
  br label %dec_label_pc_100059e6

dec_label_pc_100059d7:                            ; preds = %dec_label_pc_100059c3
  store i32 %arg1, i32* @ecx, align 4
  %v1_100059da = add i32 %arg1, 78
  %v2_100059da = inttoptr i32 %v1_100059da to i16*
  store i16 1, i16* %v2_100059da, align 2
  store i16 1, i16* %stack_var_-8, align 2
  br label %dec_label_pc_100059e6

dec_label_pc_100059e6:                            ; preds = %dec_label_pc_100059cc, %dec_label_pc_100059b8, %dec_label_pc_100059d7
  %v3_100059e6 = load i16, i16* %stack_var_-8, align 2
  %v4_100059e6 = sext i16 %v3_100059e6 to i32
  %v6_100059e6 = load i32, i32* %eax.global-to-local, align 4
  %v7_100059e6 = and i32 %v6_100059e6, -65536
  %v8_100059e6 = or i32 %v7_100059e6, %v4_100059e6
  br label %dec_label_pc_100059ea

dec_label_pc_100059ea:                            ; preds = %dec_label_pc_100059a2, %dec_label_pc_100059e6
  %storemerge = phi i32 [ %v8_100059e6, %dec_label_pc_100059e6 ], [ %v1_100059a6, %dec_label_pc_100059a2 ]
  %v0_100059ed = phi i32 [ %v8_100059e6, %dec_label_pc_100059e6 ], [ %v1_100059a6, %dec_label_pc_100059a2 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_100059ed

; uselistorder directives
  uselistorder i16* %stack_var_-8, { 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3 }
  uselistorder i16 %arg2, { 0, 2, 1 }
  uselistorder i32 %arg1, { 7, 6, 8, 9, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100059ea, { 1, 0 }
  uselistorder label %dec_label_pc_100059e6, { 2, 0, 1 }
}

define i32 @RdVBWmode(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100059f5 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100059f5, i32* @eax, align 4
  %v1_100059fd = mul i32 %v1_100059f5, 65536
  %v1_100059fd.off = or i32 %v1_100059fd, 65535
  %tmp = icmp ult i32 %v1_100059fd.off, 131071
  br i1 %tmp, label %dec_label_pc_10005a0a, label %dec_label_pc_10005a04

dec_label_pc_10005a04:                            ; preds = %entry
  %v2_10005a04 = or i32 %v1_100059f5, 65535
  br label %dec_label_pc_10005a1f

dec_label_pc_10005a0a:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10005a10 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10005a1b = add i32 %arg1, 78
  %v2_10005a1b = inttoptr i32 %v1_10005a1b to i16*
  %v3_10005a1b = load i16, i16* %v2_10005a1b, align 2
  %v4_10005a1b = zext i16 %v3_10005a1b to i32
  %v6_10005a1b = and i32 %arg1, -65536
  %v7_10005a1b = or i32 %v4_10005a1b, %v6_10005a1b
  br label %dec_label_pc_10005a1f

dec_label_pc_10005a1f:                            ; preds = %dec_label_pc_10005a04, %dec_label_pc_10005a0a
  %storemerge = phi i32 [ %v2_10005a04, %dec_label_pc_10005a04 ], [ %v7_10005a1b, %dec_label_pc_10005a0a ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_100059f5, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10005a1f, { 1, 0 }
}

define i32 @SetFiltRatio(i32 %arg1, double %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10005a21 = load i32, i32* @ebp, align 4
  store i32 %v0_10005a21, i32* %stack_var_-4, align 4
  %v4_10005a21 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10005a21, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10005ad2 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005ad2, i32* @eax, align 4
  %v1_10005ada = mul i32 %v1_10005ad2, 65536
  %v1_10005ada.off = or i32 %v1_10005ada, 65535
  %tmp = icmp ult i32 %v1_10005ada.off, 131071
  br i1 %tmp, label %dec_label_pc_10005aef, label %dec_label_pc_10005ae1

dec_label_pc_10005ae1:                            ; preds = %entry
  %v1_10005ae5 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10005b41

dec_label_pc_10005aef:                            ; preds = %entry
  br label %dec_label_pc_10005b12

dec_label_pc_10005b12:                            ; preds = %dec_label_pc_10005aef, %dec_label_pc_10005b3b
  %v5_10005afd = phi i32 [ %v1_10005ad2, %dec_label_pc_10005aef ], [ %v19_10005b01, %dec_label_pc_10005b3b ]
  %indvars.iv = phi i32 [ 0, %dec_label_pc_10005aef ], [ %indvars.iv.next, %dec_label_pc_10005b3b ]
  %v3_10005b1f = and i32 %v5_10005afd, 16384
  %v4_10005b1f = icmp eq i32 %v3_10005b1f, 0
  br i1 %v4_10005b1f, label %dec_label_pc_10005b3b, label %dec_label_pc_10005b24

dec_label_pc_10005b24:                            ; preds = %dec_label_pc_10005b12
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_10005b27 = fptrunc double %arg2 to float
  %v5_10005b27 = bitcast float %v4_10005b27 to i32
  %v2_10005b2a = add i32 %arg1, 88
  %v3_10005b2a = inttoptr i32 %v2_10005b2a to i32*
  store i32 %v5_10005b27, i32* %v3_10005b2a, align 4
  %v1_10005b30 = load i32, i32* %eax.global-to-local, align 4
  %v2_10005b30 = add i32 %v1_10005b30, 92
  %v3_10005b30 = inttoptr i32 %v2_10005b30 to i32*
  store i32 %arg3, i32* %v3_10005b30, align 4
  %v6_10005b3d.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10005b3d

dec_label_pc_10005b3b:                            ; preds = %dec_label_pc_10005b12
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %v18_10005b01 = and i32 %v5_10005afd, -65536
  %v19_10005b01 = or i32 %indvars.iv.next, %v18_10005b01
  store i32 %v19_10005b01, i32* %eax.global-to-local, align 4
  %v16_10005b0d = icmp slt i32 %indvars.iv.next, 11
  br i1 %v16_10005b0d, label %dec_label_pc_10005b12, label %dec_label_pc_10005b3d.loopexit

dec_label_pc_10005b3d.loopexit:                   ; preds = %dec_label_pc_10005b3b
  br label %dec_label_pc_10005b3d

dec_label_pc_10005b3d:                            ; preds = %dec_label_pc_10005b3d.loopexit, %dec_label_pc_10005b24
  %v6_10005b3d = phi i32 [ %v19_10005b01, %dec_label_pc_10005b3d.loopexit ], [ %v6_10005b3d.pre, %dec_label_pc_10005b24 ]
  %v3_10005b3d = phi i32 [ -3, %dec_label_pc_10005b3d.loopexit ], [ 0, %dec_label_pc_10005b24 ]
  %v7_10005b3d = and i32 %v6_10005b3d, -65536
  %v8_10005b3d = or i32 %v7_10005b3d, %v3_10005b3d
  br label %dec_label_pc_10005b41

dec_label_pc_10005b41:                            ; preds = %dec_label_pc_10005ae1, %dec_label_pc_10005b3d
  %storemerge = phi i32 [ %v8_10005b3d, %dec_label_pc_10005b3d ], [ %v1_10005ae5, %dec_label_pc_10005ae1 ]
  %v0_10005b44 = phi i32 [ %v8_10005b3d, %dec_label_pc_10005b3d ], [ %v1_10005ae5, %dec_label_pc_10005ae1 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_10005b44

; uselistorder directives
  uselistorder i32 %v19_10005b01, { 0, 2, 1 }
  uselistorder i32 %indvars.iv.next, { 1, 0, 2 }
  uselistorder i32 %v1_10005ad2, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10005b41, { 1, 0 }
  uselistorder label %dec_label_pc_10005b12, { 1, 0 }
}

define i32 @RdFiltRatio(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp2 = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* @eax, align 4
  %v1_10005b4c = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005b4c, i32* @eax, align 4
  %v1_10005b54 = mul i32 %v1_10005b4c, 65536
  %v2_10005b54 = sdiv i32 %v1_10005b54, 65536
  store i32 %v2_10005b54, i32* %ecx.global-to-local, align 4
  %v1_10005b54.off = or i32 %v1_10005b54, 65535
  %tmp = icmp ult i32 %v1_10005b54.off, 131071
  br i1 %tmp, label %dec_label_pc_10005b5d, label %dec_label_pc_10005b90

dec_label_pc_10005b5d:                            ; preds = %entry
  %v4_10005b5d = icmp eq i32* %arg2, null
  %v1_10005b61 = icmp eq i1 %v4_10005b5d, false
  br i1 %v1_10005b61, label %dec_label_pc_10005b5d.dec_label_pc_10005b71_crit_edge, label %dec_label_pc_10005b63

dec_label_pc_10005b5d.dec_label_pc_10005b71_crit_edge: ; preds = %dec_label_pc_10005b5d
  br label %dec_label_pc_10005b71

dec_label_pc_10005b63:                            ; preds = %dec_label_pc_10005b5d
  store i32 %arg1, i32* @edx, align 4
  %v3_10005b69 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -3)
  store i32 %v3_10005b69, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10005b71

dec_label_pc_10005b71:                            ; preds = %dec_label_pc_10005b5d.dec_label_pc_10005b71_crit_edge, %dec_label_pc_10005b63
  store i32 %arg1, i32* @eax, align 4
  %v3_10005b77 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  store i32 %v3_10005b77, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  store i32 %tmp2, i32* %edx.global-to-local, align 4
  %v1_10005b85 = add i32 %arg1, 88
  %v2_10005b85 = inttoptr i32 %v1_10005b85 to i32*
  %v3_10005b85 = load i32, i32* %v2_10005b85, align 4
  store i32 %v3_10005b85, i32* %eax.global-to-local, align 4
  store i32 %v3_10005b85, i32* %arg2, align 4
  %v0_10005b8a = load i32, i32* %ecx.global-to-local, align 4
  %v1_10005b8a = add i32 %v0_10005b8a, 92
  %v2_10005b8a = inttoptr i32 %v1_10005b8a to i32*
  %v3_10005b8a = load i32, i32* %v2_10005b8a, align 4
  store i32 %v3_10005b8a, i32* %ecx.global-to-local, align 4
  %v1_10005b8d = load i32, i32* %edx.global-to-local, align 4
  %v2_10005b8d = add i32 %v1_10005b8d, 4
  %v3_10005b8d = inttoptr i32 %v2_10005b8d to i32*
  store i32 %v3_10005b8a, i32* %v3_10005b8d, align 4
  %v0_10005b91.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10005b90

dec_label_pc_10005b90:                            ; preds = %entry, %dec_label_pc_10005b71
  %v0_10005b91 = phi i32 [ %v1_10005b4c, %entry ], [ %v0_10005b91.pre, %dec_label_pc_10005b71 ]
  ret i32 %v0_10005b91

; uselistorder directives
  uselistorder i32 %v1_10005b4c, { 1, 0, 2 }
  uselistorder i32 88, { 1, 2, 4, 3, 0 }
  uselistorder i32 %arg1, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10005b90, { 1, 0 }
  uselistorder label %dec_label_pc_10005b71, { 1, 0 }
}

define i32 @SetDetectCode(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10005b99 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005b99, i32* @eax, align 4
  %v1_10005ba1 = mul i32 %v1_10005b99, 65536
  %v1_10005ba1.off = or i32 %v1_10005ba1, 65535
  %tmp = icmp ult i32 %v1_10005ba1.off, 131071
  br i1 %tmp, label %dec_label_pc_10005bb6, label %dec_label_pc_10005ba8

dec_label_pc_10005ba8:                            ; preds = %entry
  %v1_10005bac = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10005bc7

dec_label_pc_10005bb6:                            ; preds = %entry
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_10005bbd = add i32 %arg1, 128
  %v4_10005bbd = inttoptr i32 %v3_10005bbd to i16*
  store i16 %arg2, i16* %v4_10005bbd, align 2
  %v11_10005bc4 = load i32, i32* %eax.global-to-local, align 4
  %v12_10005bc4 = and i32 %v11_10005bc4, -65536
  br label %dec_label_pc_10005bc7

dec_label_pc_10005bc7:                            ; preds = %dec_label_pc_10005ba8, %dec_label_pc_10005bb6
  %storemerge = phi i32 [ %v12_10005bc4, %dec_label_pc_10005bb6 ], [ %v1_10005bac, %dec_label_pc_10005ba8 ]
  %v0_10005bc8 = phi i32 [ %v12_10005bc4, %dec_label_pc_10005bb6 ], [ %v1_10005bac, %dec_label_pc_10005ba8 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_10005bc8

; uselistorder directives
  uselistorder i32 %arg1, { 0, 3, 4, 2, 1 }
  uselistorder label %dec_label_pc_10005bc7, { 1, 0 }
}

define i32 @SetDetectLog(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10005bd1 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005bd1, i32* @eax, align 4
  %v1_10005bd9 = mul i32 %v1_10005bd1, 65536
  %v2_10005bd9 = sdiv i32 %v1_10005bd9, 65536
  store i32 %v2_10005bd9, i32* %ecx.global-to-local, align 4
  %v1_10005bd9.off = or i32 %v1_10005bd9, 65535
  %tmp = icmp ult i32 %v1_10005bd9.off, 131071
  br i1 %tmp, label %dec_label_pc_10005bee, label %dec_label_pc_10005be0

dec_label_pc_10005be0:                            ; preds = %entry
  %v1_10005be4 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10005c4e

dec_label_pc_10005bee:                            ; preds = %entry
  %v1_10005bf1 = add i32 %arg1, 128
  %v2_10005bf1 = inttoptr i32 %v1_10005bf1 to i16*
  %v3_10005bf1 = load i16, i16* %v2_10005bf1, align 2
  %v4_10005bf1 = sext i16 %v3_10005bf1 to i32
  %v1_10005bfb = or i32 %v4_10005bf1, 6
  store i32 %v1_10005bfb, i32* %ecx.global-to-local, align 4
  %v1_10005c01 = trunc i32 %v1_10005bfb to i16
  store i16 %v1_10005c01, i16* %v2_10005bf1, align 2
  %v1_10005c18 = and i32 %v1_10005bfb, -42
  store i32 %v1_10005c18, i32* %ecx.global-to-local, align 4
  %v1_10005c1e = trunc i32 %v1_10005c18 to i16
  store i16 %v1_10005c1e, i16* %v2_10005bf1, align 2
  %v1_10005c28 = add i32 %arg1, 98
  %v2_10005c28 = inttoptr i32 %v1_10005c28 to i16*
  %v3_10005c28 = load i16, i16* %v2_10005c28, align 2
  %v4_10005c28 = zext i16 %v3_10005c28 to i32
  %v5_10005c28 = load i32, i32* %ecx.global-to-local, align 4
  %v6_10005c28 = and i32 %v5_10005c28, -65536
  %v7_10005c28 = or i32 %v6_10005c28, %v4_10005c28
  store i32 %v7_10005c28, i32* %ecx.global-to-local, align 4
  %v3_10005c31 = call i32 @SetRefLevel(i32 %arg1, i16 %v3_10005c28)
  %v4_10005c31 = trunc i32 %v3_10005c31 to i16
  %sext = mul i32 %v3_10005c31, 65536
  %v4_10005c3d = sdiv i32 %sext, 65536
  %v2_10005c41 = icmp slt i16 %v4_10005c31, 0
  %v2_10005c43 = icmp eq i1 %v2_10005c41, false
  br i1 %v2_10005c43, label %dec_label_pc_10005c4b, label %dec_label_pc_10005c45

dec_label_pc_10005c45:                            ; preds = %dec_label_pc_10005bee
  %v1_10005c45 = and i32 %v4_10005c3d, -65536
  %v2_10005c45 = or i32 %v1_10005c45, 65521
  br label %dec_label_pc_10005c4e

dec_label_pc_10005c4b:                            ; preds = %dec_label_pc_10005bee
  %v12_10005c4b = and i32 %v4_10005c3d, -65536
  br label %dec_label_pc_10005c4e

dec_label_pc_10005c4e:                            ; preds = %dec_label_pc_10005c45, %dec_label_pc_10005be0, %dec_label_pc_10005c4b
  %v0_10005c51 = phi i32 [ %v2_10005c45, %dec_label_pc_10005c45 ], [ %v1_10005be4, %dec_label_pc_10005be0 ], [ %v12_10005c4b, %dec_label_pc_10005c4b ]
  ret i32 %v0_10005c51

; uselistorder directives
  uselistorder i32 %arg1, { 5, 4, 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_10005c4e, { 2, 0, 1 }
}

define i32 @SetDetectLin(i32 %arg1) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10005c5a = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005c5a, i32* @eax, align 4
  %v1_10005c62 = mul i32 %v1_10005c5a, 65536
  %v2_10005c62 = sdiv i32 %v1_10005c62, 65536
  store i32 %v2_10005c62, i32* %ecx.global-to-local, align 4
  %v1_10005c62.off = or i32 %v1_10005c62, 65535
  %tmp = icmp ult i32 %v1_10005c62.off, 131071
  br i1 %tmp, label %dec_label_pc_10005c77, label %dec_label_pc_10005c69

dec_label_pc_10005c69:                            ; preds = %entry
  %v1_10005c6d = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10005cd7

dec_label_pc_10005c77:                            ; preds = %entry
  %v1_10005c7a = add i32 %arg1, 128
  %v2_10005c7a = inttoptr i32 %v1_10005c7a to i16*
  %v3_10005c7a = load i16, i16* %v2_10005c7a, align 2
  %v4_10005c7a = sext i16 %v3_10005c7a to i32
  %v1_10005c84 = or i32 %v4_10005c7a, 36
  store i32 %v1_10005c84, i32* %ecx.global-to-local, align 4
  %v1_10005c8a = trunc i32 %v1_10005c84 to i16
  store i16 %v1_10005c8a, i16* %v2_10005c7a, align 2
  %v1_10005ca1 = and i32 %v1_10005c84, -12
  store i32 %v1_10005ca1, i32* %ecx.global-to-local, align 4
  %v1_10005ca7 = trunc i32 %v1_10005ca1 to i16
  store i16 %v1_10005ca7, i16* %v2_10005c7a, align 2
  %v1_10005cb1 = add i32 %arg1, 98
  %v2_10005cb1 = inttoptr i32 %v1_10005cb1 to i16*
  %v3_10005cb1 = load i16, i16* %v2_10005cb1, align 2
  %v4_10005cb1 = zext i16 %v3_10005cb1 to i32
  %v5_10005cb1 = load i32, i32* %ecx.global-to-local, align 4
  %v6_10005cb1 = and i32 %v5_10005cb1, -65536
  %v7_10005cb1 = or i32 %v6_10005cb1, %v4_10005cb1
  store i32 %v7_10005cb1, i32* %ecx.global-to-local, align 4
  %v3_10005cba = call i32 @SetRefLevel(i32 %arg1, i16 %v3_10005cb1)
  %v4_10005cba = trunc i32 %v3_10005cba to i16
  %sext = mul i32 %v3_10005cba, 65536
  %v4_10005cc6 = sdiv i32 %sext, 65536
  %v2_10005cca = icmp slt i16 %v4_10005cba, 0
  %v2_10005ccc = icmp eq i1 %v2_10005cca, false
  br i1 %v2_10005ccc, label %dec_label_pc_10005cd4, label %dec_label_pc_10005cce

dec_label_pc_10005cce:                            ; preds = %dec_label_pc_10005c77
  %v1_10005cce = and i32 %v4_10005cc6, -65536
  %v2_10005cce = or i32 %v1_10005cce, 65521
  br label %dec_label_pc_10005cd7

dec_label_pc_10005cd4:                            ; preds = %dec_label_pc_10005c77
  %v12_10005cd4 = and i32 %v4_10005cc6, -65536
  br label %dec_label_pc_10005cd7

dec_label_pc_10005cd7:                            ; preds = %dec_label_pc_10005cce, %dec_label_pc_10005c69, %dec_label_pc_10005cd4
  %v0_10005cda = phi i32 [ %v2_10005cce, %dec_label_pc_10005cce ], [ %v1_10005c6d, %dec_label_pc_10005c69 ], [ %v12_10005cd4, %dec_label_pc_10005cd4 ]
  ret i32 %v0_10005cda

; uselistorder directives
  uselistorder i32 %arg1, { 5, 4, 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_10005cd7, { 2, 0, 1 }
}

define i32 @SetDetect3IF(i32 %arg1) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10005ce3 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005ce3, i32* @eax, align 4
  %v1_10005ceb = mul i32 %v1_10005ce3, 65536
  %v2_10005ceb = sdiv i32 %v1_10005ceb, 65536
  store i32 %v2_10005ceb, i32* %ecx.global-to-local, align 4
  %v1_10005ceb.off = or i32 %v1_10005ceb, 65535
  %tmp = icmp ult i32 %v1_10005ceb.off, 131071
  br i1 %tmp, label %dec_label_pc_10005d00, label %dec_label_pc_10005cf2

dec_label_pc_10005cf2:                            ; preds = %entry
  %v1_10005cf6 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10005d60

dec_label_pc_10005d00:                            ; preds = %entry
  %v1_10005d03 = add i32 %arg1, 128
  %v2_10005d03 = inttoptr i32 %v1_10005d03 to i16*
  %v3_10005d03 = load i16, i16* %v2_10005d03, align 2
  %v4_10005d03 = sext i16 %v3_10005d03 to i32
  %v1_10005d0d = or i32 %v4_10005d03, 9
  store i32 %v1_10005d0d, i32* %ecx.global-to-local, align 4
  %v1_10005d13 = trunc i32 %v1_10005d0d to i16
  store i16 %v1_10005d13, i16* %v2_10005d03, align 2
  %v1_10005d2a = and i32 %v1_10005d0d, -39
  store i32 %v1_10005d2a, i32* %ecx.global-to-local, align 4
  %v1_10005d30 = trunc i32 %v1_10005d2a to i16
  store i16 %v1_10005d30, i16* %v2_10005d03, align 2
  %v1_10005d3a = add i32 %arg1, 98
  %v2_10005d3a = inttoptr i32 %v1_10005d3a to i16*
  %v3_10005d3a = load i16, i16* %v2_10005d3a, align 2
  %v4_10005d3a = zext i16 %v3_10005d3a to i32
  %v5_10005d3a = load i32, i32* %ecx.global-to-local, align 4
  %v6_10005d3a = and i32 %v5_10005d3a, -65536
  %v7_10005d3a = or i32 %v6_10005d3a, %v4_10005d3a
  store i32 %v7_10005d3a, i32* %ecx.global-to-local, align 4
  %v3_10005d43 = call i32 @SetRefLevel(i32 %arg1, i16 %v3_10005d3a)
  %v4_10005d43 = trunc i32 %v3_10005d43 to i16
  %sext = mul i32 %v3_10005d43, 65536
  %v4_10005d4f = sdiv i32 %sext, 65536
  %v2_10005d53 = icmp slt i16 %v4_10005d43, 0
  %v2_10005d55 = icmp eq i1 %v2_10005d53, false
  br i1 %v2_10005d55, label %dec_label_pc_10005d5d, label %dec_label_pc_10005d57

dec_label_pc_10005d57:                            ; preds = %dec_label_pc_10005d00
  %v1_10005d57 = and i32 %v4_10005d4f, -65536
  %v2_10005d57 = or i32 %v1_10005d57, 65521
  br label %dec_label_pc_10005d60

dec_label_pc_10005d5d:                            ; preds = %dec_label_pc_10005d00
  %v12_10005d5d = and i32 %v4_10005d4f, -65536
  br label %dec_label_pc_10005d60

dec_label_pc_10005d60:                            ; preds = %dec_label_pc_10005d57, %dec_label_pc_10005cf2, %dec_label_pc_10005d5d
  %v0_10005d63 = phi i32 [ %v2_10005d57, %dec_label_pc_10005d57 ], [ %v1_10005cf6, %dec_label_pc_10005cf2 ], [ %v12_10005d5d, %dec_label_pc_10005d5d ]
  ret i32 %v0_10005d63

; uselistorder directives
  uselistorder i32 %arg1, { 5, 4, 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_10005d60, { 2, 0, 1 }
}

define i32 @RdDetect(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i16, align 2
  store i16 0, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10005d72 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005d72, i32* @eax, align 4
  %v1_10005d7a = mul i32 %v1_10005d72, 65536
  %v1_10005d7a.off = or i32 %v1_10005d7a, 65535
  %tmp = icmp ult i32 %v1_10005d7a.off, 131071
  br i1 %tmp, label %dec_label_pc_10005d8f, label %dec_label_pc_10005d81

dec_label_pc_10005d81:                            ; preds = %entry
  %v1_10005d85 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10005de6

dec_label_pc_10005d8f:                            ; preds = %entry
  %v1_10005d92 = add i32 %arg1, 128
  %v2_10005d92 = inttoptr i32 %v1_10005d92 to i16*
  %v3_10005d92 = load i16, i16* %v2_10005d92, align 2
  %v1_10005d99 = and i16 %v3_10005d92, 2
  %v2_10005d99 = icmp eq i16 %v1_10005d99, 0
  br i1 %v2_10005d99, label %dec_label_pc_10005da6, label %dec_label_pc_10005da0

dec_label_pc_10005da0:                            ; preds = %dec_label_pc_10005d8f
  store i16 2, i16* %stack_var_-8, align 2
  br label %dec_label_pc_10005da6

dec_label_pc_10005da6:                            ; preds = %dec_label_pc_10005d8f, %dec_label_pc_10005da0
  %v3_10005da9 = load i16, i16* %v2_10005d92, align 2
  %v1_10005db0 = and i16 %v3_10005da9, 32
  %v2_10005db0 = icmp eq i16 %v1_10005db0, 0
  br i1 %v2_10005db0, label %dec_label_pc_10005dbd, label %dec_label_pc_10005db7

dec_label_pc_10005db7:                            ; preds = %dec_label_pc_10005da6
  store i16 32, i16* %stack_var_-8, align 2
  br label %dec_label_pc_10005dbd

dec_label_pc_10005dbd:                            ; preds = %dec_label_pc_10005da6, %dec_label_pc_10005db7
  %v3_10005dc0 = load i16, i16* %v2_10005d92, align 2
  %v4_10005dc05 = zext i16 %v3_10005dc0 to i32
  %v1_10005dc7 = and i32 %v4_10005dc05, 8
  %v2_10005dc7 = icmp eq i32 %v1_10005dc7, 0
  store i32 %v1_10005dc7, i32* @edx, align 4
  br i1 %v2_10005dc7, label %dec_label_pc_10005dd4, label %dec_label_pc_10005dce

dec_label_pc_10005dce:                            ; preds = %dec_label_pc_10005dbd
  store i16 8, i16* %stack_var_-8, align 2
  br label %dec_label_pc_10005dd4

dec_label_pc_10005dd4:                            ; preds = %dec_label_pc_10005dbd, %dec_label_pc_10005dce
  store i32 %arg1, i32* @eax, align 4
  %v3_10005dda = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v3_10005de2 = load i16, i16* %stack_var_-8, align 2
  %v4_10005de2 = sext i16 %v3_10005de2 to i32
  %v7_10005de2 = and i32 %v3_10005dda, -65536
  %v8_10005de2 = or i32 %v4_10005de2, %v7_10005de2
  br label %dec_label_pc_10005de6

dec_label_pc_10005de6:                            ; preds = %dec_label_pc_10005d81, %dec_label_pc_10005dd4
  %v0_10005de9 = phi i32 [ %v1_10005d85, %dec_label_pc_10005d81 ], [ %v8_10005de2, %dec_label_pc_10005dd4 ]
  ret i32 %v0_10005de9

; uselistorder directives
  uselistorder i16* %stack_var_-8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 5, 4, 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_10005de6, { 1, 0 }
  uselistorder label %dec_label_pc_10005dd4, { 1, 0 }
  uselistorder label %dec_label_pc_10005dbd, { 1, 0 }
  uselistorder label %dec_label_pc_10005da6, { 1, 0 }
}

define i32 @RdDetectCode(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10005df1 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005df1, i32* @eax, align 4
  %v1_10005df9 = mul i32 %v1_10005df1, 65536
  %v1_10005df9.off = or i32 %v1_10005df9, 65535
  %tmp = icmp ult i32 %v1_10005df9.off, 131071
  br i1 %tmp, label %dec_label_pc_10005e05, label %dec_label_pc_10005e00

dec_label_pc_10005e00:                            ; preds = %entry
  %v12_10005e00 = and i32 %v1_10005df1, -65536
  br label %dec_label_pc_10005e1d

dec_label_pc_10005e05:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10005e0b = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10005e16 = add i32 %arg1, 128
  %v2_10005e16 = inttoptr i32 %v1_10005e16 to i16*
  %v3_10005e16 = load i16, i16* %v2_10005e16, align 2
  %v4_10005e16 = zext i16 %v3_10005e16 to i32
  %v6_10005e16 = and i32 %arg1, -65536
  %v7_10005e16 = or i32 %v4_10005e16, %v6_10005e16
  br label %dec_label_pc_10005e1d

dec_label_pc_10005e1d:                            ; preds = %dec_label_pc_10005e00, %dec_label_pc_10005e05
  %storemerge = phi i32 [ %v12_10005e00, %dec_label_pc_10005e00 ], [ %v7_10005e16, %dec_label_pc_10005e05 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10005df1, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10005e1d, { 1, 0 }
}

define i32 @SetSweepCode(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i16, align 2
  store i16 0, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10005e2d = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005e2d, i32* @eax, align 4
  %v1_10005e35 = mul i32 %v1_10005e2d, 65536
  %v1_10005e35.off = or i32 %v1_10005e35, 65535
  %tmp = icmp ult i32 %v1_10005e35.off, 131071
  br i1 %tmp, label %dec_label_pc_10005e4a, label %dec_label_pc_10005e3c

dec_label_pc_10005e3c:                            ; preds = %entry
  %v1_10005e40 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10005e93

dec_label_pc_10005e4a:                            ; preds = %entry
  %v4_10005e4a = sext i16 %arg2 to i32
  %v9_10005e4e = icmp slt i16 %arg2, 16
  %. = select i1 %v9_10005e4e, i16 0, i16 -3
  store i16 %., i16* %stack_var_-8, align 2
  %v1_10005e67 = icmp eq i1 %v9_10005e4e, false
  br i1 %v1_10005e67, label %dec_label_pc_10005e8f, label %dec_label_pc_10005e69

dec_label_pc_10005e69:                            ; preds = %dec_label_pc_10005e4a
  %v3_10005e70 = add i32 %arg1, 130
  %v4_10005e70 = inttoptr i32 %v3_10005e70 to i16*
  store i16 %arg2, i16* %v4_10005e70, align 2
  %v1_10005e7b = call i32 @function_10001718(i32 %arg1)
  %v1_10005e87 = call i32 @function_10001b13(i32 %arg1)
  %v3_10005e8f.pre = load i16, i16* %stack_var_-8, align 2
  %phitmp = sext i16 %v3_10005e8f.pre to i32
  br label %dec_label_pc_10005e8f

dec_label_pc_10005e8f:                            ; preds = %dec_label_pc_10005e4a, %dec_label_pc_10005e69
  %v6_10005e8f = phi i32 [ %v4_10005e4a, %dec_label_pc_10005e4a ], [ %v1_10005e87, %dec_label_pc_10005e69 ]
  %v3_10005e8f = phi i32 [ -3, %dec_label_pc_10005e4a ], [ %phitmp, %dec_label_pc_10005e69 ]
  %v7_10005e8f = and i32 %v6_10005e8f, -65536
  %v8_10005e8f = or i32 %v7_10005e8f, %v3_10005e8f
  br label %dec_label_pc_10005e93

dec_label_pc_10005e93:                            ; preds = %dec_label_pc_10005e3c, %dec_label_pc_10005e8f
  %v0_10005e96 = phi i32 [ %v1_10005e40, %dec_label_pc_10005e3c ], [ %v8_10005e8f, %dec_label_pc_10005e8f ]
  ret i32 %v0_10005e96

; uselistorder directives
  uselistorder i1 %v9_10005e4e, { 1, 0 }
  uselistorder i32 (i32)* @function_10001b13, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i16 %arg2, { 2, 1, 0 }
  uselistorder i32 %arg1, { 5, 4, 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_10005e93, { 1, 0 }
  uselistorder label %dec_label_pc_10005e8f, { 1, 0 }
}

define i32 @RdSweepCode(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10005e9e = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005e9e, i32* @eax, align 4
  %v1_10005ea6 = mul i32 %v1_10005e9e, 65536
  %v1_10005ea6.off = or i32 %v1_10005ea6, 65535
  %tmp = icmp ult i32 %v1_10005ea6.off, 131071
  br i1 %tmp, label %dec_label_pc_10005eb3, label %dec_label_pc_10005ead

dec_label_pc_10005ead:                            ; preds = %entry
  %v2_10005ead = or i32 %v1_10005e9e, 65535
  br label %dec_label_pc_10005ecb

dec_label_pc_10005eb3:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10005eb9 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10005ec4 = add i32 %arg1, 130
  %v2_10005ec4 = inttoptr i32 %v1_10005ec4 to i16*
  %v3_10005ec4 = load i16, i16* %v2_10005ec4, align 2
  %v4_10005ec4 = zext i16 %v3_10005ec4 to i32
  %v6_10005ec4 = and i32 %arg1, -65536
  %v7_10005ec4 = or i32 %v4_10005ec4, %v6_10005ec4
  br label %dec_label_pc_10005ecb

dec_label_pc_10005ecb:                            ; preds = %dec_label_pc_10005ead, %dec_label_pc_10005eb3
  %storemerge = phi i32 [ %v2_10005ead, %dec_label_pc_10005ead ], [ %v7_10005ec4, %dec_label_pc_10005eb3 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10005e9e, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10005ecb, { 1, 0 }
}

define i32 @CheckForFreqpts(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10005edb = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10005ee3 = mul i32 %v1_10005edb, 65536
  %v1_10005ee3.off = or i32 %v1_10005ee3, 65535
  %tmp = icmp ult i32 %v1_10005ee3.off, 131071
  br i1 %tmp, label %dec_label_pc_10005eef, label %dec_label_pc_10005eea

dec_label_pc_10005eea:                            ; preds = %entry
  %v12_10005eea = and i32 %v1_10005edb, -65536
  br label %dec_label_pc_10005f4f

dec_label_pc_10005eef:                            ; preds = %entry
  %v1_10005ef2 = add i32 %arg1, 130
  %v2_10005ef2 = inttoptr i32 %v1_10005ef2 to i16*
  %v3_10005ef2 = load i16, i16* %v2_10005ef2, align 2
  %v4_10005ef25 = zext i16 %v3_10005ef2 to i32
  %v1_10005ef9 = and i32 %v4_10005ef25, 8
  %v2_10005ef9 = icmp eq i32 %v1_10005ef9, 0
  %v1_10005efe = icmp eq i1 %v2_10005ef9, false
  br i1 %v1_10005efe, label %dec_label_pc_10005f08, label %dec_label_pc_10005f00

dec_label_pc_10005f00:                            ; preds = %dec_label_pc_10005eef
  br label %dec_label_pc_10005f4b

dec_label_pc_10005f08:                            ; preds = %dec_label_pc_10005eef
  %v1_10005f0b = add i32 %arg1, 64
  %v2_10005f0b = inttoptr i32 %v1_10005f0b to i16*
  %v3_10005f0b = load i16, i16* %v2_10005f0b, align 2
  %v1_10005f0f = icmp eq i16 %v3_10005f0b, 0
  %v1_10005f11 = icmp eq i1 %v1_10005f0f, false
  br i1 %v1_10005f11, label %dec_label_pc_10005f1b, label %dec_label_pc_10005f13

dec_label_pc_10005f13:                            ; preds = %dec_label_pc_10005f08
  br label %dec_label_pc_10005f4b

dec_label_pc_10005f1b:                            ; preds = %dec_label_pc_10005f08
  %v3_10005f1e = load i16, i16* %v2_10005ef2, align 2
  %v1_10005f25 = and i16 %v3_10005f1e, 2
  %v2_10005f25 = icmp eq i16 %v1_10005f25, 0
  %v1_10005f2a = icmp eq i1 %v2_10005f25, false
  br i1 %v1_10005f2a, label %dec_label_pc_10005f3d, label %dec_label_pc_10005f2c

dec_label_pc_10005f2c:                            ; preds = %dec_label_pc_10005f1b
  %v3_10005f2f = load i16, i16* %v2_10005ef2, align 2
  %v4_10005f2f7 = zext i16 %v3_10005f2f to i32
  %v1_10005f36 = and i32 %v4_10005f2f7, 4
  %v2_10005f36 = icmp eq i32 %v1_10005f36, 0
  br i1 %v2_10005f36, label %dec_label_pc_10005f45, label %dec_label_pc_10005f3d

dec_label_pc_10005f3d:                            ; preds = %dec_label_pc_10005f2c, %dec_label_pc_10005f1b
  %v6_10005f4b4 = phi i32 [ %v1_10005f36, %dec_label_pc_10005f2c ], [ %arg1, %dec_label_pc_10005f1b ]
  br label %dec_label_pc_10005f4b

dec_label_pc_10005f45:                            ; preds = %dec_label_pc_10005f2c
  br label %dec_label_pc_10005f4b

dec_label_pc_10005f4b:                            ; preds = %dec_label_pc_10005f3d, %dec_label_pc_10005f13, %dec_label_pc_10005f00, %dec_label_pc_10005f45
  %v6_10005f4b = phi i32 [ %v6_10005f4b4, %dec_label_pc_10005f3d ], [ %v1_10005ef9, %dec_label_pc_10005f13 ], [ %v1_10005ef9, %dec_label_pc_10005f00 ], [ 0, %dec_label_pc_10005f45 ]
  %v3_10005f4b = phi i32 [ 1, %dec_label_pc_10005f3d ], [ 0, %dec_label_pc_10005f13 ], [ 0, %dec_label_pc_10005f00 ], [ 0, %dec_label_pc_10005f45 ]
  %v7_10005f4b = and i32 %v6_10005f4b, -65536
  %v8_10005f4b = or i32 %v7_10005f4b, %v3_10005f4b
  br label %dec_label_pc_10005f4f

dec_label_pc_10005f4f:                            ; preds = %dec_label_pc_10005eea, %dec_label_pc_10005f4b
  %storemerge = phi i32 [ %v12_10005eea, %dec_label_pc_10005eea ], [ %v8_10005f4b, %dec_label_pc_10005f4b ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10005edb, { 1, 0 }
  uselistorder i32 %arg1, { 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10005f4f, { 1, 0 }
  uselistorder label %dec_label_pc_10005f4b, { 3, 0, 1, 2 }
}

define i32 @CheckForMinMax(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_10005f53 = load i32, i32* @ebp, align 4
  store i32 %v0_10005f53, i32* %stack_var_-4, align 4
  %v4_10005f53 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10005f53, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10005f64 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005f64, i32* @eax, align 4
  %v1_10005f6c = mul i32 %v1_10005f64, 65536
  %v1_10005f6c.off = or i32 %v1_10005f6c, 65535
  %tmp = icmp ult i32 %v1_10005f6c.off, 131071
  br i1 %tmp, label %dec_label_pc_10005f81, label %dec_label_pc_10005f73

dec_label_pc_10005f73:                            ; preds = %entry
  %v1_10005f77 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10005fc5

dec_label_pc_10005f81:                            ; preds = %entry
  %v1_10005f84 = add i32 %arg1, 130
  %v2_10005f84 = inttoptr i32 %v1_10005f84 to i16*
  %v3_10005f84 = load i16, i16* %v2_10005f84, align 2
  %v4_10005f844 = zext i16 %v3_10005f84 to i32
  %v1_10005f8b = and i32 %v4_10005f844, 6
  %v2_10005f8b = icmp eq i32 %v1_10005f8b, 0
  %v1_10005f95 = icmp eq i1 %v2_10005f8b, false
  br i1 %v1_10005f95, label %dec_label_pc_10005f9f, label %dec_label_pc_10005f97

dec_label_pc_10005f97:                            ; preds = %dec_label_pc_10005f81
  br label %dec_label_pc_10005fc1

dec_label_pc_10005f9f:                            ; preds = %dec_label_pc_10005f81
  %v12_10005f9f = icmp eq i32 %v1_10005f8b, 6
  %v1_10005fa3 = icmp eq i1 %v12_10005f9f, false
  br i1 %v1_10005fa3, label %dec_label_pc_10005fb3, label %dec_label_pc_10005fa5

dec_label_pc_10005fa5:                            ; preds = %dec_label_pc_10005f9f
  br label %dec_label_pc_10005fc1

dec_label_pc_10005fb3:                            ; preds = %dec_label_pc_10005f9f
  br label %dec_label_pc_10005fc1

dec_label_pc_10005fc1:                            ; preds = %dec_label_pc_10005fb3, %dec_label_pc_10005fa5, %dec_label_pc_10005f97
  %v3_10005fc1 = phi i32 [ 1, %dec_label_pc_10005fb3 ], [ 2, %dec_label_pc_10005fa5 ], [ 0, %dec_label_pc_10005f97 ]
  %v7_10005fc1 = and i32 %arg1, -65536
  %v8_10005fc1 = or i32 %v3_10005fc1, %v7_10005fc1
  br label %dec_label_pc_10005fc5

dec_label_pc_10005fc5:                            ; preds = %dec_label_pc_10005f73, %dec_label_pc_10005fc1
  %v0_10005fc8 = phi i32 [ %v1_10005f77, %dec_label_pc_10005f73 ], [ %v8_10005fc1, %dec_label_pc_10005fc1 ]
  %v2_10005fc7 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10005fc7, i32* @ebp, align 4
  ret i32 %v0_10005fc8

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 130, { 0, 1, 5, 2, 3, 4 }
  uselistorder i32 %arg1, { 0, 3, 4, 2, 1 }
  uselistorder label %dec_label_pc_10005fc5, { 1, 0 }
}

define i32 @SetCellMode(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i16, align 2
  store i16 0, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10005fd7 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10005fd7, i32* @eax, align 4
  %v1_10005fdf = mul i32 %v1_10005fd7, 65536
  %v1_10005fdf.off = or i32 %v1_10005fdf, 65535
  %tmp = icmp ult i32 %v1_10005fdf.off, 131071
  br i1 %tmp, label %dec_label_pc_10005ff4, label %dec_label_pc_10005fe6

dec_label_pc_10005fe6:                            ; preds = %entry
  %v1_10005fea = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10006045

dec_label_pc_10005ff4:                            ; preds = %entry
  %v3_10005ffb = add i32 %arg1, 64
  %v4_10005ffb = inttoptr i32 %v3_10005ffb to i16*
  store i16 %arg2, i16* %v4_10005ffb, align 2
  %v2_10006003 = icmp eq i16 %arg2, 0
  %v1_10006005 = icmp eq i1 %v2_10006003, false
  br i1 %v1_10006005, label %dec_label_pc_10006012, label %dec_label_pc_10006007

dec_label_pc_10006007:                            ; preds = %dec_label_pc_10005ff4
  store i16 0, i16* %v4_10005ffb, align 2
  br label %dec_label_pc_10006035

dec_label_pc_10006012:                            ; preds = %dec_label_pc_10005ff4
  %v9_10006016 = icmp eq i16 %arg2, 1
  %v1_10006019 = icmp eq i1 %v9_10006016, false
  br i1 %v1_10006019, label %dec_label_pc_10006026, label %dec_label_pc_1000601b

dec_label_pc_1000601b:                            ; preds = %dec_label_pc_10006012
  store i16 1, i16* %v4_10005ffb, align 2
  br label %dec_label_pc_10006035

dec_label_pc_10006026:                            ; preds = %dec_label_pc_10006012
  store i16 1, i16* %v4_10005ffb, align 2
  store i16 -1, i16* %stack_var_-8, align 2
  br label %dec_label_pc_10006035

dec_label_pc_10006035:                            ; preds = %dec_label_pc_1000601b, %dec_label_pc_10006007, %dec_label_pc_10006026
  %v1_10006039 = call i32 @function_10001718(i32 %arg1)
  %v3_10006041 = load i16, i16* %stack_var_-8, align 2
  %v4_10006041 = sext i16 %v3_10006041 to i32
  %v7_10006041 = and i32 %v1_10006039, -65536
  %v8_10006041 = or i32 %v4_10006041, %v7_10006041
  br label %dec_label_pc_10006045

dec_label_pc_10006045:                            ; preds = %dec_label_pc_10005fe6, %dec_label_pc_10006035
  %v0_10006048 = phi i32 [ %v1_10005fea, %dec_label_pc_10005fe6 ], [ %v8_10006041, %dec_label_pc_10006035 ]
  ret i32 %v0_10006048

; uselistorder directives
  uselistorder i16* %v4_10005ffb, { 2, 1, 0, 3 }
  uselistorder i16* %stack_var_-8, { 2, 1, 0 }
  uselistorder i16 %arg2, { 0, 2, 1 }
  uselistorder i32 %arg1, { 4, 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_10006045, { 1, 0 }
  uselistorder label %dec_label_pc_10006035, { 2, 0, 1 }
}

define i32 @RdCellMode(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10006050 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006050, i32* @eax, align 4
  %v1_10006058 = mul i32 %v1_10006050, 65536
  %v1_10006058.off = or i32 %v1_10006058, 65535
  %tmp = icmp ult i32 %v1_10006058.off, 131071
  br i1 %tmp, label %dec_label_pc_10006065, label %dec_label_pc_1000605f

dec_label_pc_1000605f:                            ; preds = %entry
  %v2_1000605f = or i32 %v1_10006050, 65535
  br label %dec_label_pc_10006080

dec_label_pc_10006065:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000606b = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10006076 = add i32 %arg1, 64
  %v2_10006076 = inttoptr i32 %v1_10006076 to i16*
  %v3_10006076 = load i16, i16* %v2_10006076, align 2
  %v5_1000607a = icmp ne i16 %v3_10006076, 0
  %v7_1000607c = sext i1 %v5_1000607a to i32
  br label %dec_label_pc_10006080

dec_label_pc_10006080:                            ; preds = %dec_label_pc_1000605f, %dec_label_pc_10006065
  %storemerge = phi i32 [ %v2_1000605f, %dec_label_pc_1000605f ], [ %v7_1000607c, %dec_label_pc_10006065 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10006050, { 1, 0, 2 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10006080, { 1, 0 }
}

define i32 @SetAutoCell(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i16, align 2
  store i16 0, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10006090 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006090, i32* @eax, align 4
  %v1_10006098 = mul i32 %v1_10006090, 65536
  %v1_10006098.off = or i32 %v1_10006098, 65535
  %tmp = icmp ult i32 %v1_10006098.off, 131071
  br i1 %tmp, label %dec_label_pc_100060ad, label %dec_label_pc_1000609f

dec_label_pc_1000609f:                            ; preds = %entry
  %v1_100060a3 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100060e7

dec_label_pc_100060ad:                            ; preds = %entry
  %v4_100060ad = sext i16 %arg2 to i32
  store i32 %v4_100060ad, i32* %eax.global-to-local, align 4
  %v1_100060b1 = icmp eq i16 %arg2, 0
  %v1_100060b3 = icmp eq i1 %v1_100060b1, false
  br i1 %v1_100060b3, label %dec_label_pc_100060c0, label %dec_label_pc_100060b5

dec_label_pc_100060b5:                            ; preds = %dec_label_pc_100060ad
  %v1_100060b8 = add i32 %arg1, 66
  %v2_100060b8 = inttoptr i32 %v1_100060b8 to i16*
  store i16 0, i16* %v2_100060b8, align 2
  br label %dec_label_pc_100060e3

dec_label_pc_100060c0:                            ; preds = %dec_label_pc_100060ad
  %v9_100060c4 = icmp eq i16 %arg2, 1
  %v1_100060c7 = icmp eq i1 %v9_100060c4, false
  br i1 %v1_100060c7, label %dec_label_pc_100060d4, label %dec_label_pc_100060c9

dec_label_pc_100060c9:                            ; preds = %dec_label_pc_100060c0
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_100060cc = add i32 %arg1, 66
  %v2_100060cc = inttoptr i32 %v1_100060cc to i16*
  store i16 1, i16* %v2_100060cc, align 2
  br label %dec_label_pc_100060e3

dec_label_pc_100060d4:                            ; preds = %dec_label_pc_100060c0
  %v1_100060d7 = add i32 %arg1, 66
  %v2_100060d7 = inttoptr i32 %v1_100060d7 to i16*
  store i16 1, i16* %v2_100060d7, align 2
  store i16 -1, i16* %stack_var_-8, align 2
  br label %dec_label_pc_100060e3

dec_label_pc_100060e3:                            ; preds = %dec_label_pc_100060c9, %dec_label_pc_100060b5, %dec_label_pc_100060d4
  %v3_100060e3 = load i16, i16* %stack_var_-8, align 2
  %v4_100060e3 = sext i16 %v3_100060e3 to i32
  %v6_100060e3 = load i32, i32* %eax.global-to-local, align 4
  %v7_100060e3 = and i32 %v6_100060e3, -65536
  %v8_100060e3 = or i32 %v7_100060e3, %v4_100060e3
  br label %dec_label_pc_100060e7

dec_label_pc_100060e7:                            ; preds = %dec_label_pc_1000609f, %dec_label_pc_100060e3
  %storemerge = phi i32 [ %v8_100060e3, %dec_label_pc_100060e3 ], [ %v1_100060a3, %dec_label_pc_1000609f ]
  %v0_100060ea = phi i32 [ %v8_100060e3, %dec_label_pc_100060e3 ], [ %v1_100060a3, %dec_label_pc_1000609f ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_100060ea

; uselistorder directives
  uselistorder i16* %stack_var_-8, { 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3 }
  uselistorder i16 %arg2, { 0, 2, 1 }
  uselistorder i32 %arg1, { 4, 5, 6, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100060e7, { 1, 0 }
  uselistorder label %dec_label_pc_100060e3, { 2, 0, 1 }
}

define i32 @RdAutoCell(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100060f2 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100060f2, i32* @eax, align 4
  %v1_100060fa = mul i32 %v1_100060f2, 65536
  %v1_100060fa.off = or i32 %v1_100060fa, 65535
  %tmp = icmp ult i32 %v1_100060fa.off, 131071
  br i1 %tmp, label %dec_label_pc_10006107, label %dec_label_pc_10006101

dec_label_pc_10006101:                            ; preds = %entry
  %v2_10006101 = or i32 %v1_100060f2, 65535
  br label %dec_label_pc_1000611c

dec_label_pc_10006107:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000610d = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10006118 = add i32 %arg1, 66
  %v2_10006118 = inttoptr i32 %v1_10006118 to i16*
  %v3_10006118 = load i16, i16* %v2_10006118, align 2
  %v4_10006118 = zext i16 %v3_10006118 to i32
  %v6_10006118 = and i32 %arg1, -65536
  %v7_10006118 = or i32 %v4_10006118, %v6_10006118
  br label %dec_label_pc_1000611c

dec_label_pc_1000611c:                            ; preds = %dec_label_pc_10006101, %dec_label_pc_10006107
  %storemerge = phi i32 [ %v2_10006101, %dec_label_pc_10006101 ], [ %v7_10006118, %dec_label_pc_10006107 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_100060f2, { 1, 0, 2 }
  uselistorder i32 66, { 1, 2, 3, 4, 6, 5, 0 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000611c, { 1, 0 }
}

define i32 @SetNumCells(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000612c = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000612c, i32* @eax, align 4
  %v1_10006134 = mul i32 %v1_1000612c, 65536
  %v1_10006134.off = or i32 %v1_10006134, 65535
  %tmp = icmp ult i32 %v1_10006134.off, 131071
  br i1 %tmp, label %dec_label_pc_10006149, label %dec_label_pc_1000613b

dec_label_pc_1000613b:                            ; preds = %entry
  %v1_1000613f = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10006182

dec_label_pc_10006149:                            ; preds = %entry
  %v5_1000614d = icmp slt i32 %arg2, 1
  br i1 %v5_1000614d, label %dec_label_pc_1000617e, label %dec_label_pc_1000614f

dec_label_pc_1000614f:                            ; preds = %dec_label_pc_10006149
  %v4_1000614f = add i32 %arg2, -65535
  %v9_1000614f = sub i32 65534, %arg2
  %v10_1000614f = and i32 %v9_1000614f, %arg2
  %v11_1000614f = icmp slt i32 %v10_1000614f, 0
  %v12_1000614f = icmp eq i32 %v4_1000614f, 0
  %v13_1000614f = icmp slt i32 %v4_1000614f, 0
  %v3_10006156 = icmp eq i1 %v13_1000614f, %v11_1000614f
  %v4_10006156 = icmp eq i1 %v12_1000614f, false
  %v5_10006156 = and i1 %v4_10006156, %v3_10006156
  br i1 %v5_10006156, label %dec_label_pc_1000617e, label %dec_label_pc_10006158

dec_label_pc_10006158:                            ; preds = %dec_label_pc_1000614f
  %v2_1000615e = add i32 %arg1, 132
  %v3_1000615e = inttoptr i32 %v2_1000615e to i32*
  store i32 %arg2, i32* %v3_1000615e, align 4
  %v1_10006168 = call i32 @function_10001718(i32 %arg1)
  br label %dec_label_pc_1000617e

dec_label_pc_1000617e:                            ; preds = %dec_label_pc_10006149, %dec_label_pc_1000614f, %dec_label_pc_10006158
  %v6_1000617e = phi i32 [ %v1_10006168, %dec_label_pc_10006158 ], [ %v1_1000612c, %dec_label_pc_1000614f ], [ %v1_1000612c, %dec_label_pc_10006149 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_10006158 ], [ -3, %dec_label_pc_1000614f ], [ -3, %dec_label_pc_10006149 ]
  %v7_1000617e = and i32 %v6_1000617e, -65536
  %v8_1000617e = or i32 %storemerge, %v7_1000617e
  br label %dec_label_pc_10006182

dec_label_pc_10006182:                            ; preds = %dec_label_pc_1000613b, %dec_label_pc_1000617e
  %v0_10006185 = phi i32 [ %v1_1000613f, %dec_label_pc_1000613b ], [ %v8_1000617e, %dec_label_pc_1000617e ]
  ret i32 %v0_10006185

; uselistorder directives
  uselistorder i32 %v4_1000614f, { 1, 0 }
  uselistorder i32 %v1_1000612c, { 1, 2, 0, 3 }
  uselistorder i32 %arg2, { 4, 0, 2, 3, 1 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10006182, { 1, 0 }
  uselistorder label %dec_label_pc_1000617e, { 2, 1, 0 }
}

define i32 @RdNumCells(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000618d = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000618d, i32* @eax, align 4
  %v1_10006195 = mul i32 %v1_1000618d, 65536
  %v1_10006195.off = or i32 %v1_10006195, 65535
  %tmp = icmp ult i32 %v1_10006195.off, 131071
  br i1 %tmp, label %dec_label_pc_100061a1, label %dec_label_pc_1000619c

dec_label_pc_1000619c:                            ; preds = %entry
  br label %dec_label_pc_100061b8

dec_label_pc_100061a1:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_100061a7 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_100061b2 = add i32 %arg1, 132
  %v2_100061b2 = inttoptr i32 %v1_100061b2 to i32*
  %v3_100061b2 = load i32, i32* %v2_100061b2, align 4
  br label %dec_label_pc_100061b8

dec_label_pc_100061b8:                            ; preds = %dec_label_pc_1000619c, %dec_label_pc_100061a1
  %storemerge = phi i32 [ -1, %dec_label_pc_1000619c ], [ %v3_100061b2, %dec_label_pc_100061a1 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100061b8, { 1, 0 }
}

define i32 @SetAttenuatr(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_100061c9 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100061c9, i32* @eax, align 4
  %v1_100061d1 = mul i32 %v1_100061c9, 65536
  %v2_100061d1 = sdiv i32 %v1_100061d1, 65536
  store i32 %v2_100061d1, i32* %ecx.global-to-local, align 4
  %v1_100061d1.off = or i32 %v1_100061d1, 65535
  %tmp = icmp ult i32 %v1_100061d1.off, 131071
  br i1 %tmp, label %dec_label_pc_100061e9, label %dec_label_pc_100061d8

dec_label_pc_100061d8:                            ; preds = %entry
  %v1_100061dc = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_1000629d

dec_label_pc_100061e9:                            ; preds = %entry
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_100061ed = call i32 @RdDetect(i32 %arg1)
  store i32 %v1_100061ed, i32* %eax.global-to-local, align 4
  %v1_100061f5 = mul i32 %v1_100061ed, 65536
  %v2_100061f5 = sdiv i32 %v1_100061f5, 65536
  store i32 %v2_100061f5, i32* %ecx.global-to-local, align 4
  %tmp13 = icmp eq i32 %v1_100061f5, 131072
  br i1 %tmp13, label %dec_label_pc_10006208, label %dec_label_pc_10006299

dec_label_pc_10006208:                            ; preds = %dec_label_pc_100061e9
  store i32 %arg1, i32* @edx, align 4
  %v1_1000620c = call i32 @RdMinAttLimit(i32 %arg1)
  %v1_10006214 = mul i32 %v1_1000620c, 65536
  %v2_10006214 = sdiv i32 %v1_10006214, 65536
  store i32 %v2_10006214, i32* %eax.global-to-local, align 4
  %v4_10006217 = sext i16 %arg2 to i32
  store i32 %v4_10006217, i32* %ecx.global-to-local, align 4
  %v2_1000621b = trunc i32 %v2_10006214 to i16
  %v10_1000621d = icmp sgt i16 %v2_1000621b, %arg2
  br i1 %v10_1000621d, label %dec_label_pc_10006299, label %dec_label_pc_1000621f

dec_label_pc_1000621f:                            ; preds = %dec_label_pc_10006208
  store i32 %arg1, i32* @edx, align 4
  %v1_10006227 = call i32 @RdMaxAttLimit(i32 %arg1)
  %v1_1000622f = mul i32 %v1_10006227, 65536
  %v2_1000622f = sdiv i32 %v1_1000622f, 65536
  store i32 %v2_1000622f, i32* %eax.global-to-local, align 4
  %v3_10006232 = trunc i32 %v2_1000622f to i16
  %v10_10006234 = icmp slt i16 %v3_10006232, %arg2
  br i1 %v10_10006234, label %dec_label_pc_10006299, label %dec_label_pc_10006236

dec_label_pc_10006236:                            ; preds = %dec_label_pc_1000621f
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v3_1000623d = add i32 %arg1, 96
  %v4_1000623d = inttoptr i32 %v3_1000623d to i16*
  store i16 %arg2, i16* %v4_1000623d, align 2
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_10006244 = load i16, i16* %v4_1000623d, align 2
  %v4_10006244 = sext i16 %v3_10006244 to i32
  %v1_10006248 = add nsw i32 %v4_10006244, -40
  store i32 %v1_10006248, i32* %ecx.global-to-local, align 4
  %v1_1000624e = trunc i32 %v1_10006248 to i16
  %v3_1000624e = add i32 %arg1, 98
  %v4_1000624e = inttoptr i32 %v3_1000624e to i16*
  store i16 %v1_1000624e, i16* %v4_1000624e, align 2
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10006255 = add i32 %arg1, 100
  %v2_10006255 = inttoptr i32 %v1_10006255 to i16*
  %v3_10006255 = load i16, i16* %v2_10006255, align 2
  %v4_10006255 = sext i16 %v3_10006255 to i32
  store i32 %v4_10006255, i32* %ecx.global-to-local, align 4
  %v1_10006259 = icmp eq i16 %v3_10006255, 0
  br i1 %v1_10006259, label %dec_label_pc_1000627d, label %dec_label_pc_1000625d

dec_label_pc_1000625d:                            ; preds = %dec_label_pc_10006236
  %v1_10006260 = add i32 %arg1, 102
  %v2_10006260 = inttoptr i32 %v1_10006260 to i16*
  %v3_10006260 = load i16, i16* %v2_10006260, align 2
  %v4_10006260 = sext i16 %v3_10006260 to i32
  store i32 %v4_10006260, i32* %eax.global-to-local, align 4
  %v1_10006264 = icmp eq i16 %v3_10006260, 0
  br i1 %v1_10006264, label %dec_label_pc_1000627d, label %dec_label_pc_10006268

dec_label_pc_10006268:                            ; preds = %dec_label_pc_1000625d
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v3_1000626e = load i16, i16* %v4_1000624e, align 2
  %v4_1000626e = zext i16 %v3_1000626e to i32
  %v6_1000626e = and i32 %v4_10006260, -65536
  %v7_1000626e = or i32 %v4_1000626e, %v6_1000626e
  store i32 %v7_1000626e, i32* %eax.global-to-local, align 4
  %v3_10006272 = add i32 %arg1, 104
  %v4_10006272 = inttoptr i32 %v3_10006272 to i16*
  %v5_10006272 = load i16, i16* %v4_10006272, align 2
  %v6_10006272 = sub i16 %v3_1000626e, %v5_10006272
  %v22_10006272 = zext i16 %v6_10006272 to i32
  %v25_10006272 = or i32 %v22_10006272, %v6_1000626e
  store i32 %v25_10006272, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  store i16 %v6_10006272, i16* %v4_1000624e, align 2
  %v5_10006283.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000627d

dec_label_pc_1000627d:                            ; preds = %dec_label_pc_1000625d, %dec_label_pc_10006236, %dec_label_pc_10006268
  %v5_10006283 = phi i32 [ %v4_10006255, %dec_label_pc_1000625d ], [ %v4_10006255, %dec_label_pc_10006236 ], [ %v5_10006283.pre, %dec_label_pc_10006268 ]
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_10006283 = load i16, i16* %v4_1000624e, align 2
  %v4_10006283 = zext i16 %v3_10006283 to i32
  %v6_10006283 = and i32 %v5_10006283, -65536
  %v7_10006283 = or i32 %v4_10006283, %v6_10006283
  store i32 %v7_10006283, i32* %ecx.global-to-local, align 4
  %v3_10006287 = add i32 %arg1, 106
  %v4_10006287 = inttoptr i32 %v3_10006287 to i16*
  store i16 %v3_10006283, i16* %v4_10006287, align 2
  %v6_10006299.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10006299

dec_label_pc_10006299:                            ; preds = %dec_label_pc_10006208, %dec_label_pc_1000621f, %dec_label_pc_100061e9, %dec_label_pc_1000627d
  %v6_10006299 = phi i32 [ %v6_10006299.pre, %dec_label_pc_1000627d ], [ %v1_100061ed, %dec_label_pc_100061e9 ], [ %v2_1000622f, %dec_label_pc_1000621f ], [ %v2_10006214, %dec_label_pc_10006208 ]
  %v3_10006299 = phi i32 [ 0, %dec_label_pc_1000627d ], [ -8, %dec_label_pc_100061e9 ], [ -3, %dec_label_pc_1000621f ], [ -3, %dec_label_pc_10006208 ]
  %v7_10006299 = and i32 %v6_10006299, -65536
  %v8_10006299 = or i32 %v7_10006299, %v3_10006299
  br label %dec_label_pc_1000629d

dec_label_pc_1000629d:                            ; preds = %dec_label_pc_100061d8, %dec_label_pc_10006299
  %storemerge = phi i32 [ %v8_10006299, %dec_label_pc_10006299 ], [ %v1_100061dc, %dec_label_pc_100061d8 ]
  %v0_100062a1 = phi i32 [ %v8_10006299, %dec_label_pc_10006299 ], [ %v1_100061dc, %dec_label_pc_100061d8 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_100062a1

; uselistorder directives
  uselistorder i16* %v4_1000624e, { 2, 0, 1, 3 }
  uselistorder i32 %v2_1000622f, { 2, 1, 0 }
  uselistorder i32 %v2_10006214, { 2, 1, 0 }
  uselistorder i32 %v1_100061ed, { 1, 0, 2 }
  uselistorder i16 %arg2, { 3, 0, 1, 2 }
  uselistorder i32 %arg1, { 0, 20, 19, 1, 18, 17, 16, 15, 14, 13, 2, 12, 11, 10, 9, 8, 6, 5, 7, 4, 3 }
  uselistorder label %dec_label_pc_1000629d, { 1, 0 }
  uselistorder label %dec_label_pc_10006299, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_1000627d, { 2, 0, 1 }
}

define i32 @RdAttenuatr(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100062a9 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100062a9, i32* @eax, align 4
  %v1_100062b1 = mul i32 %v1_100062a9, 65536
  %v1_100062b1.off = or i32 %v1_100062b1, 65535
  %tmp = icmp ult i32 %v1_100062b1.off, 131071
  br i1 %tmp, label %dec_label_pc_100062be, label %dec_label_pc_100062b8

dec_label_pc_100062b8:                            ; preds = %entry
  %v2_100062b8 = or i32 %v1_100062a9, 65535
  br label %dec_label_pc_100062d3

dec_label_pc_100062be:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_100062c4 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_100062cf = add i32 %arg1, 96
  %v2_100062cf = inttoptr i32 %v1_100062cf to i16*
  %v3_100062cf = load i16, i16* %v2_100062cf, align 2
  %v4_100062cf = zext i16 %v3_100062cf to i32
  %v6_100062cf = and i32 %arg1, -65536
  %v7_100062cf = or i32 %v4_100062cf, %v6_100062cf
  br label %dec_label_pc_100062d3

dec_label_pc_100062d3:                            ; preds = %dec_label_pc_100062b8, %dec_label_pc_100062be
  %storemerge = phi i32 [ %v2_100062b8, %dec_label_pc_100062b8 ], [ %v7_100062cf, %dec_label_pc_100062be ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_100062a9, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100062d3, { 1, 0 }
}

define i32 @RdMinAttLimit(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100062dd = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100062dd, i32* @eax, align 4
  %v1_100062e5 = mul i32 %v1_100062dd, 65536
  %v1_100062e5.off = or i32 %v1_100062e5, 65535
  %tmp = icmp ult i32 %v1_100062e5.off, 131071
  br i1 %tmp, label %dec_label_pc_100062fa, label %dec_label_pc_100062ec

dec_label_pc_100062ec:                            ; preds = %entry
  %v1_100062f0 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_1000635a

dec_label_pc_100062fa:                            ; preds = %entry
  store i32 %arg1, i32* @eax, align 4
  %v1_100062fd = add i32 %arg1, 2
  %v2_100062fd = inttoptr i32 %v1_100062fd to i16*
  %v3_100062fd = load i16, i16* %v2_100062fd, align 2
  %v4_100062fd = sext i16 %v3_100062fd to i32
  %v6_10006304 = sub nsw i32 767, %v4_100062fd
  %v7_10006304 = and i32 %v6_10006304, %v4_100062fd
  %v8_10006304 = icmp slt i32 %v7_10006304, 0
  %v9_10006304 = icmp eq i16 %v3_100062fd, 768
  %v10_10006304 = icmp slt i16 %v3_100062fd, 768
  %v3_1000630b = icmp eq i1 %v10_10006304, %v8_10006304
  %v4_1000630b = icmp eq i1 %v9_10006304, false
  %v5_1000630b = and i1 %v4_1000630b, %v3_1000630b
  br i1 %v5_1000630b, label %dec_label_pc_1000632a, label %dec_label_pc_1000630d

dec_label_pc_1000630d:                            ; preds = %dec_label_pc_100062fa
  br i1 %v9_10006304, label %dec_label_pc_10006335, label %dec_label_pc_10006316

dec_label_pc_10006316:                            ; preds = %dec_label_pc_1000630d
  %v9_10006316 = icmp eq i16 %v3_100062fd, 256
  br i1 %v9_10006316, label %dec_label_pc_10006335, label %dec_label_pc_1000631f

dec_label_pc_1000631f:                            ; preds = %dec_label_pc_10006316
  %v9_1000631f = icmp eq i16 %v3_100062fd, 512
  br i1 %v9_1000631f, label %dec_label_pc_10006335, label %dec_label_pc_10006348

dec_label_pc_1000632a:                            ; preds = %dec_label_pc_100062fa
  %v9_1000632a = icmp eq i16 %v3_100062fd, 1024
  br i1 %v9_1000632a, label %dec_label_pc_10006335, label %dec_label_pc_10006348

dec_label_pc_10006335:                            ; preds = %dec_label_pc_1000632a, %dec_label_pc_1000631f, %dec_label_pc_10006316, %dec_label_pc_1000630d
  store i32 %arg1, i32* @edx, align 4
  %v3_1000633b = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v12_10006343 = and i32 %v3_1000633b, -65536
  br label %dec_label_pc_1000635a

dec_label_pc_10006348:                            ; preds = %dec_label_pc_1000632a, %dec_label_pc_1000631f
  store i32 %arg1, i32* @eax, align 4
  %v3_1000634e = call i32 @SetFuncStatusCode(i32 %arg1, i16 -13)
  %v2_10006356 = or i32 %v3_1000634e, 65535
  br label %dec_label_pc_1000635a

dec_label_pc_1000635a:                            ; preds = %dec_label_pc_10006335, %dec_label_pc_100062ec, %dec_label_pc_10006348
  %v0_1000635d = phi i32 [ %v12_10006343, %dec_label_pc_10006335 ], [ %v1_100062f0, %dec_label_pc_100062ec ], [ %v2_10006356, %dec_label_pc_10006348 ]
  ret i32 %v0_1000635d

; uselistorder directives
  uselistorder i16 %v3_100062fd, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %arg1, { 8, 7, 6, 5, 3, 2, 4, 1, 0 }
  uselistorder label %dec_label_pc_1000635a, { 2, 0, 1 }
}

define i32 @RdMaxAttLimit(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10006366 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006366, i32* @eax, align 4
  %v1_1000636e = mul i32 %v1_10006366, 65536
  %v1_1000636e.off = or i32 %v1_1000636e, 65535
  %tmp = icmp ult i32 %v1_1000636e.off, 131071
  br i1 %tmp, label %dec_label_pc_1000637b, label %dec_label_pc_10006375

dec_label_pc_10006375:                            ; preds = %entry
  %v2_10006375 = or i32 %v1_10006366, 65535
  br label %dec_label_pc_100063e2

dec_label_pc_1000637b:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10006381 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  store i32 %arg1, i32* @eax, align 4
  %v1_1000638c = add i32 %arg1, 2
  %v2_1000638c = inttoptr i32 %v1_1000638c to i16*
  %v3_1000638c = load i16, i16* %v2_1000638c, align 2
  %v4_1000638c = sext i16 %v3_1000638c to i32
  %v6_10006393 = sub nsw i32 767, %v4_1000638c
  %v7_10006393 = and i32 %v6_10006393, %v4_1000638c
  %v8_10006393 = icmp slt i32 %v7_10006393, 0
  %v9_10006393 = icmp eq i16 %v3_1000638c, 768
  %v10_10006393 = icmp slt i16 %v3_1000638c, 768
  %v3_1000639a = icmp eq i1 %v10_10006393, %v8_10006393
  %v4_1000639a = icmp eq i1 %v9_10006393, false
  %v5_1000639a = and i1 %v4_1000639a, %v3_1000639a
  br i1 %v5_1000639a, label %dec_label_pc_100063b9, label %dec_label_pc_1000639c

dec_label_pc_1000639c:                            ; preds = %dec_label_pc_1000637b
  br i1 %v9_10006393, label %dec_label_pc_100063ca, label %dec_label_pc_100063a5

dec_label_pc_100063a5:                            ; preds = %dec_label_pc_1000639c
  %v9_100063a5 = icmp eq i16 %v3_1000638c, 256
  br i1 %v9_100063a5, label %dec_label_pc_100063c4, label %dec_label_pc_100063ae

dec_label_pc_100063ae:                            ; preds = %dec_label_pc_100063a5
  %v9_100063ae = icmp eq i16 %v3_1000638c, 512
  br i1 %v9_100063ae, label %dec_label_pc_100063c4, label %dec_label_pc_100063d0

dec_label_pc_100063b9:                            ; preds = %dec_label_pc_1000637b
  %v9_100063b9 = icmp eq i16 %v3_1000638c, 1024
  br i1 %v9_100063b9, label %dec_label_pc_100063c4, label %dec_label_pc_100063d0

dec_label_pc_100063c4:                            ; preds = %dec_label_pc_100063b9, %dec_label_pc_100063ae, %dec_label_pc_100063a5
  %v1_100063c4 = and i32 %arg1, -65536
  %v2_100063c4 = or i32 %v1_100063c4, 60
  br label %dec_label_pc_100063e2

dec_label_pc_100063ca:                            ; preds = %dec_label_pc_1000639c
  %v1_100063ca = and i32 %arg1, -65536
  %v2_100063ca = or i32 %v1_100063ca, 70
  br label %dec_label_pc_100063e2

dec_label_pc_100063d0:                            ; preds = %dec_label_pc_100063b9, %dec_label_pc_100063ae
  store i32 %arg1, i32* @edx, align 4
  %v3_100063d6 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -13)
  %v2_100063de = or i32 %v3_100063d6, 65535
  br label %dec_label_pc_100063e2

dec_label_pc_100063e2:                            ; preds = %dec_label_pc_100063ca, %dec_label_pc_100063c4, %dec_label_pc_10006375, %dec_label_pc_100063d0
  %v0_100063e5 = phi i32 [ %v2_100063ca, %dec_label_pc_100063ca ], [ %v2_100063c4, %dec_label_pc_100063c4 ], [ %v2_10006375, %dec_label_pc_10006375 ], [ %v2_100063de, %dec_label_pc_100063d0 ]
  ret i32 %v0_100063e5

; uselistorder directives
  uselistorder i16 %v3_1000638c, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v1_10006366, { 1, 0, 2 }
  uselistorder i32 %arg1, { 9, 8, 1, 0, 7, 6, 5, 4, 3, 2 }
  uselistorder label %dec_label_pc_100063e2, { 3, 0, 1, 2 }
}

define i32 @SetRefLevel(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100063e6 = load i32, i32* @ebp, align 4
  store i32 %v0_100063e6, i32* %stack_var_-4, align 4
  %v4_100063e6 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100063e6, i32* @ebp, align 4
  %v0_100063ec = load i32, i32* @esi, align 4
  store i32 %v0_100063ec, i32* %stack_var_-20, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_100063f7 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100063f7, i32* @eax, align 4
  %v1_100063ff = mul i32 %v1_100063f7, 65536
  %v1_100063ff.off = or i32 %v1_100063ff, 65535
  %tmp = icmp ult i32 %v1_100063ff.off, 131071
  br i1 %tmp, label %dec_label_pc_10006417, label %dec_label_pc_10006406

dec_label_pc_10006406:                            ; preds = %entry
  %v1_1000640a = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10006646

dec_label_pc_10006417:                            ; preds = %entry
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_1000641e = add i32 %arg1, 98
  %v4_1000641e = inttoptr i32 %v3_1000641e to i16*
  store i16 %arg2, i16* %v4_1000641e, align 2
  %v1_10006426 = call i32 @RdDetect(i32 %arg1)
  %v1_1000642e = mul i32 %v1_10006426, 65536
  %v2_1000642e = sdiv i32 %v1_1000642e, 65536
  store i32 %v2_1000642e, i32* %eax.global-to-local, align 4
  %tmp23 = icmp eq i32 %v1_1000642e, 2097152
  %v1_10006434 = icmp eq i1 %tmp23, false
  %v4_10006560 = sext i16 %arg2 to i32
  store i32 %v4_10006560, i32* %esi.global-to-local, align 4
  %v1_10006568 = call i32 @RdMaxAttLimit(i32 %arg1)
  store i32 %v1_10006568, i32* %eax.global-to-local, align 4
  %v1_10006570 = mul i32 %v1_10006568, 65536
  %v2_10006570 = sdiv i32 %v1_10006570, 65536
  %v1_10006573 = add nsw i32 %v2_10006570, -40
  store i32 %v1_10006573, i32* @edx, align 4
  %v0_10006576 = load i32, i32* %esi.global-to-local, align 4
  %v2_10006576 = trunc i32 %v0_10006576 to i16
  %v3_10006576 = trunc i32 %v1_10006573 to i16
  %v9_10006578 = icmp sgt i16 %v2_10006576, %v3_10006576
  br i1 %v1_10006434, label %dec_label_pc_10006560, label %dec_label_pc_1000643a

dec_label_pc_1000643a:                            ; preds = %dec_label_pc_10006417
  br i1 %v9_10006578, label %dec_label_pc_10006454, label %dec_label_pc_10006472

dec_label_pc_10006454:                            ; preds = %dec_label_pc_1000643a
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10006458 = call i32 @RdMaxAttLimit(i32 %arg1)
  store i32 %v1_10006458, i32* %eax.global-to-local, align 4
  %v1_10006460 = mul i32 %v1_10006458, 65536
  %v2_10006460 = sdiv i32 %v1_10006460, 65536
  %v1_10006463 = add nsw i32 %v2_10006460, 65496
  %v1_10006466 = trunc i32 %v1_10006463 to i16
  br label %dec_label_pc_100064ae

dec_label_pc_10006472:                            ; preds = %dec_label_pc_1000643a
  store i32 %v4_10006560, i32* @edx, align 4
  store i32 -70, i32* %eax.global-to-local, align 4
  %v15_1000648b = icmp slt i16 %arg2, -70
  br i1 %v15_1000648b, label %dec_label_pc_1000648f, label %dec_label_pc_100064ae

dec_label_pc_1000648f:                            ; preds = %dec_label_pc_10006472
  store i32 0, i32* @edx, align 4
  store i32 -70, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100064ae

dec_label_pc_100064ae:                            ; preds = %dec_label_pc_10006472, %dec_label_pc_10006454, %dec_label_pc_1000648f
  %stack_var_8.0 = phi i16 [ %v1_10006466, %dec_label_pc_10006454 ], [ -70, %dec_label_pc_1000648f ], [ %arg2, %dec_label_pc_10006472 ]
  %stack_var_-8.0 = phi i32 [ 1, %dec_label_pc_10006454 ], [ 1, %dec_label_pc_1000648f ], [ 0, %dec_label_pc_10006472 ]
  %v4_100064ae = sext i16 %stack_var_8.0 to i32
  %v3_100064b2 = add nsw i32 %v4_100064ae, 70
  %v13_100064b2 = icmp slt i16 %stack_var_8.0, -70
  br i1 %v13_100064b2, label %dec_label_pc_100064b7, label %dec_label_pc_100064ae.dec_label_pc_100064cb_crit_edge

dec_label_pc_100064ae.dec_label_pc_100064cb_crit_edge: ; preds = %dec_label_pc_100064ae
  br label %dec_label_pc_100064cb

dec_label_pc_100064b7:                            ; preds = %dec_label_pc_100064ae
  %v1_100064ba = add i32 %arg1, 100
  %v2_100064ba = inttoptr i32 %v1_100064ba to i16*
  %v3_100064ba = load i16, i16* %v2_100064ba, align 2
  %v4_100064ba = sext i16 %v3_100064ba to i32
  store i32 %v4_100064ba, i32* %eax.global-to-local, align 4
  %v1_100064be = icmp eq i16 %v3_100064ba, 0
  br i1 %v1_100064be, label %dec_label_pc_100064cb, label %dec_label_pc_100064d2

dec_label_pc_100064cb:                            ; preds = %dec_label_pc_100064ae.dec_label_pc_100064cb_crit_edge, %dec_label_pc_100064b7
  br label %dec_label_pc_100064d2

dec_label_pc_100064d2:                            ; preds = %dec_label_pc_100064b7, %dec_label_pc_100064cb
  %storemerge = phi i16 [ 0, %dec_label_pc_100064cb ], [ 1, %dec_label_pc_100064b7 ]
  %v3_100064d9 = add i32 %arg1, 102
  %v4_100064d9 = inttoptr i32 %v3_100064d9 to i16*
  store i16 %storemerge, i16* %v4_100064d9, align 2
  store i32 %v4_100064ae, i32* %esi.global-to-local, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_100064e5 = call i32 @RdMaxAttLimit(i32 %arg1)
  store i32 %v1_100064e5, i32* %eax.global-to-local, align 4
  %v1_100064ed = mul i32 %v1_100064e5, 65536
  %v2_100064ed = sdiv i32 %v1_100064ed, 65536
  %v1_100064f0 = add nsw i32 %v2_100064ed, 65466
  %v0_100064f3 = load i32, i32* %esi.global-to-local, align 4
  %v2_100064f3 = trunc i32 %v0_100064f3 to i16
  %v3_100064f3 = trunc i32 %v1_100064f0 to i16
  %v9_100064f5 = icmp sgt i16 %v2_100064f3, %v3_100064f3
  %v1_100064fa = add i32 %arg1, 128
  %v2_100064fa = inttoptr i32 %v1_100064fa to i16*
  %v3_100064fa = load i16, i16* %v2_100064fa, align 2
  %v4_100064fa = sext i16 %v3_100064fa to i32
  store i32 %v4_100064fa, i32* %eax.global-to-local, align 4
  %v1_10006501 = trunc i16 %v3_100064fa to i8
  br i1 %v9_100064f5, label %dec_label_pc_100064f7, label %dec_label_pc_1000650f

dec_label_pc_100064f7:                            ; preds = %dec_label_pc_100064d2
  %v2_10006501 = and i8 %v1_10006501, -65
  %v8_10006501 = zext i8 %v2_10006501 to i32
  %v10_10006501 = and i32 %v4_100064fa, -256
  %v11_10006501 = or i32 %v8_10006501, %v10_10006501
  br label %dec_label_pc_10006525

dec_label_pc_1000650f:                            ; preds = %dec_label_pc_100064d2
  %v2_10006519 = or i8 %v1_10006501, 64
  %v7_10006519 = zext i8 %v2_10006519 to i32
  %v9_10006519 = and i32 %v4_100064fa, -256
  %v10_10006519 = or i32 %v7_10006519, %v9_10006519
  br label %dec_label_pc_10006525

dec_label_pc_10006525:                            ; preds = %dec_label_pc_100064f7, %dec_label_pc_1000650f
  %storemerge7 = phi i32 [ %v11_10006501, %dec_label_pc_100064f7 ], [ %v10_10006519, %dec_label_pc_1000650f ]
  store i32 %storemerge7, i32* %eax.global-to-local, align 4
  %storemerge6 = trunc i32 %storemerge7 to i16
  store i16 %storemerge6, i16* %v2_100064fa, align 2
  store i32 %v3_100064b2, i32* %esi.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v1_10006530 = call i32 @RdLinearAttn(i32 %arg1)
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10006557 = trunc i32 %v3_100064b2 to i16
  %v3_10006557 = add i32 %arg1, 96
  %v4_10006557 = inttoptr i32 %v3_10006557 to i16*
  store i16 %v1_10006557, i16* %v4_10006557, align 2
  br label %dec_label_pc_10006637

dec_label_pc_10006560:                            ; preds = %dec_label_pc_10006417
  br i1 %v9_10006578, label %dec_label_pc_1000657a, label %dec_label_pc_10006598

dec_label_pc_1000657a:                            ; preds = %dec_label_pc_10006560
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_1000657e = call i32 @RdMaxAttLimit(i32 %arg1)
  store i32 %v1_1000657e, i32* %eax.global-to-local, align 4
  %v1_10006586 = mul i32 %v1_1000657e, 65536
  %v2_10006586 = sdiv i32 %v1_10006586, 65536
  %v1_10006589 = add nsw i32 %v2_10006586, 65496
  %v1_1000658c = trunc i32 %v1_10006589 to i16
  br label %dec_label_pc_100065d4

dec_label_pc_10006598:                            ; preds = %dec_label_pc_10006560
  store i32 %v4_10006560, i32* @edx, align 4
  store i32 -40, i32* %eax.global-to-local, align 4
  %v15_100065b1 = icmp slt i16 %arg2, -40
  br i1 %v15_100065b1, label %dec_label_pc_100065b5, label %dec_label_pc_100065d4

dec_label_pc_100065b5:                            ; preds = %dec_label_pc_10006598
  store i32 0, i32* @edx, align 4
  store i32 -40, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100065d4

dec_label_pc_100065d4:                            ; preds = %dec_label_pc_10006598, %dec_label_pc_1000657a, %dec_label_pc_100065b5
  %stack_var_8.1 = phi i16 [ %v1_1000658c, %dec_label_pc_1000657a ], [ -40, %dec_label_pc_100065b5 ], [ %arg2, %dec_label_pc_10006598 ]
  %stack_var_-8.1 = phi i32 [ 1, %dec_label_pc_1000657a ], [ 1, %dec_label_pc_100065b5 ], [ 0, %dec_label_pc_10006598 ]
  %v4_100065d4 = sext i16 %stack_var_8.1 to i32
  %v3_100065d8 = add nsw i32 %v4_100065d4, 40
  %v13_100065d8 = icmp slt i16 %stack_var_8.1, -40
  br i1 %v13_100065d8, label %dec_label_pc_100065dd, label %dec_label_pc_100065d4.dec_label_pc_100065f1_crit_edge

dec_label_pc_100065d4.dec_label_pc_100065f1_crit_edge: ; preds = %dec_label_pc_100065d4
  br label %dec_label_pc_100065f1

dec_label_pc_100065dd:                            ; preds = %dec_label_pc_100065d4
  %v1_100065e0 = add i32 %arg1, 100
  %v2_100065e0 = inttoptr i32 %v1_100065e0 to i16*
  %v3_100065e0 = load i16, i16* %v2_100065e0, align 2
  %v4_100065e0 = sext i16 %v3_100065e0 to i32
  store i32 %v4_100065e0, i32* %eax.global-to-local, align 4
  %v1_100065e4 = icmp eq i16 %v3_100065e0, 0
  br i1 %v1_100065e4, label %dec_label_pc_100065f1, label %dec_label_pc_100065f8

dec_label_pc_100065f1:                            ; preds = %dec_label_pc_100065d4.dec_label_pc_100065f1_crit_edge, %dec_label_pc_100065dd
  br label %dec_label_pc_100065f8

dec_label_pc_100065f8:                            ; preds = %dec_label_pc_100065dd, %dec_label_pc_100065f1
  %storemerge3 = phi i16 [ 0, %dec_label_pc_100065f1 ], [ 1, %dec_label_pc_100065dd ]
  %v3_100065ff = add i32 %arg1, 102
  %v4_100065ff = inttoptr i32 %v3_100065ff to i16*
  store i16 %storemerge3, i16* %v4_100065ff, align 2
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10006606 = add i32 %arg1, 128
  %v2_10006606 = inttoptr i32 %v1_10006606 to i16*
  %v3_10006606 = load i16, i16* %v2_10006606, align 2
  %v1_1000660d = or i16 %v3_10006606, 64
  store i16 %v1_1000660d, i16* %v2_10006606, align 2
  store i32 %v3_100065d8, i32* %eax.global-to-local, align 4
  %v1_10006633 = trunc i32 %v3_100065d8 to i16
  %v3_10006633 = add i32 %arg1, 96
  %v4_10006633 = inttoptr i32 %v3_10006633 to i16*
  store i16 %v1_10006633, i16* %v4_10006633, align 2
  br label %dec_label_pc_10006637

dec_label_pc_10006637:                            ; preds = %dec_label_pc_10006525, %dec_label_pc_100065f8
  %stack_var_8.2 = phi i16 [ %stack_var_8.1, %dec_label_pc_100065f8 ], [ %stack_var_8.0, %dec_label_pc_10006525 ]
  %stack_var_-8.2 = phi i32 [ %stack_var_-8.1, %dec_label_pc_100065f8 ], [ %stack_var_-8.0, %dec_label_pc_10006525 ]
  %v4_1000663a = zext i16 %stack_var_8.2 to i32
  %v5_1000663a = load i32, i32* %eax.global-to-local, align 4
  %v6_1000663a = and i32 %v5_1000663a, -65536
  %v7_1000663a = or i32 %v6_1000663a, %v4_1000663a
  store i32 %v7_1000663a, i32* %eax.global-to-local, align 4
  %v3_1000663e = add i32 %arg1, 106
  %v4_1000663e = inttoptr i32 %v3_1000663e to i16*
  store i16 %stack_var_8.2, i16* %v4_1000663e, align 2
  %v4_10006642 = and i32 %stack_var_-8.2, 65535
  %v5_10006642 = load i32, i32* %eax.global-to-local, align 4
  %v6_10006642 = and i32 %v5_10006642, -65536
  %v7_10006642 = or i32 %v6_10006642, %v4_10006642
  br label %dec_label_pc_10006646

dec_label_pc_10006646:                            ; preds = %dec_label_pc_10006406, %dec_label_pc_10006637
  %storemerge22 = phi i32 [ %v7_10006642, %dec_label_pc_10006637 ], [ %v1_1000640a, %dec_label_pc_10006406 ]
  %v0_1000664a = phi i32 [ %v7_10006642, %dec_label_pc_10006637 ], [ %v1_1000640a, %dec_label_pc_10006406 ]
  store i32 %storemerge22, i32* %eax.global-to-local, align 4
  %v2_10006646 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10006646, i32* @esi, align 4
  %v2_10006649 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10006649, i32* @ebp, align 4
  ret i32 %v0_1000664a

; uselistorder directives
  uselistorder i16 %stack_var_8.2, { 1, 0 }
  uselistorder i32 %v3_100065d8, { 1, 0 }
  uselistorder i16 %stack_var_8.1, { 0, 2, 1 }
  uselistorder i32 %v4_100064fa, { 1, 0, 2 }
  uselistorder i16 %stack_var_8.0, { 0, 2, 1 }
  uselistorder i1 %v9_10006578, { 1, 0 }
  uselistorder i32 %v4_10006560, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32* %esi.global-to-local, { 2, 3, 4, 0, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 3, 12, 4, 5, 6, 7, 8, 9, 10, 13, 1, 14, 15, 16, 17, 18, 19, 20, 21, 11, 22, 23 }
  uselistorder i32 106, { 1, 0, 2, 3, 4, 5 }
  uselistorder i16 -40, { 2, 1, 0 }
  uselistorder i32 70, { 1, 2, 0 }
  uselistorder i16 -70, { 2, 1, 0 }
  uselistorder i32 (i32)* @RdMaxAttLimit, { 3, 1, 0, 2, 4 }
  uselistorder i16 %arg2, { 3, 0, 2, 1, 4, 5 }
  uselistorder i32 %arg1, { 0, 25, 24, 23, 22, 21, 20, 19, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 18, 6, 1, 4, 5, 3, 2 }
  uselistorder label %dec_label_pc_10006646, { 1, 0 }
  uselistorder label %dec_label_pc_10006637, { 1, 0 }
  uselistorder label %dec_label_pc_100065f8, { 1, 0 }
  uselistorder label %dec_label_pc_100065f1, { 1, 0 }
  uselistorder label %dec_label_pc_100065d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10006525, { 1, 0 }
  uselistorder label %dec_label_pc_100064d2, { 1, 0 }
  uselistorder label %dec_label_pc_100064cb, { 1, 0 }
  uselistorder label %dec_label_pc_100064ae, { 2, 0, 1 }
}

define i32 @RdRefLevel(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10006652 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006652, i32* @eax, align 4
  %v1_1000665a = mul i32 %v1_10006652, 65536
  %v1_1000665a.off = or i32 %v1_1000665a, 65535
  %tmp = icmp ult i32 %v1_1000665a.off, 131071
  br i1 %tmp, label %dec_label_pc_10006667, label %dec_label_pc_10006661

dec_label_pc_10006661:                            ; preds = %entry
  %v1_10006661 = and i32 %v1_10006652, -65536
  %v2_10006661 = or i32 %v1_10006661, 32768
  br label %dec_label_pc_1000667c

dec_label_pc_10006667:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000666d = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10006678 = add i32 %arg1, 98
  %v2_10006678 = inttoptr i32 %v1_10006678 to i16*
  %v3_10006678 = load i16, i16* %v2_10006678, align 2
  %v4_10006678 = zext i16 %v3_10006678 to i32
  %v6_10006678 = and i32 %arg1, -65536
  %v7_10006678 = or i32 %v4_10006678, %v6_10006678
  br label %dec_label_pc_1000667c

dec_label_pc_1000667c:                            ; preds = %dec_label_pc_10006661, %dec_label_pc_10006667
  %storemerge = phi i32 [ %v2_10006661, %dec_label_pc_10006661 ], [ %v7_10006678, %dec_label_pc_10006667 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10006652, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000667c, { 1, 0 }
}

define i32 @SetLinRefLevel(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10006685 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006685, i32* @eax, align 4
  %v1_1000668d = mul i32 %v1_10006685, 65536
  %v1_1000668d.off = or i32 %v1_1000668d, 65535
  %tmp = icmp ult i32 %v1_1000668d.off, 131071
  br i1 %tmp, label %dec_label_pc_100066a2, label %dec_label_pc_10006694

dec_label_pc_10006694:                            ; preds = %entry
  %v1_10006698 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100066dd

dec_label_pc_100066a2:                            ; preds = %entry
  %v1_100066a6 = call i32 @RdDetect(i32 %arg1)
  %v1_100066ae = mul i32 %v1_100066a6, 65536
  %tmp9 = icmp eq i32 %v1_100066ae, 2097152
  br i1 %tmp9, label %dec_label_pc_100066bc, label %dec_label_pc_100066b6

dec_label_pc_100066b6:                            ; preds = %dec_label_pc_100066a2
  %v1_100066b6 = and i32 %v1_100066a6, -65536
  %v2_100066b6 = or i32 %v1_100066b6, 65528
  br label %dec_label_pc_100066dd

dec_label_pc_100066bc:                            ; preds = %dec_label_pc_100066a2
  %v3_100066c8 = call i32 @FindEquivDbmRef(i32 %arg1, i32 %arg2, i32 %arg3)
  %v2_100066d5 = trunc i32 %v3_100066c8 to i16
  %v3_100066d5 = call i32 @SetRefLevel(i32 %arg1, i16 %v2_100066d5)
  br label %dec_label_pc_100066dd

dec_label_pc_100066dd:                            ; preds = %dec_label_pc_100066b6, %dec_label_pc_10006694, %dec_label_pc_100066bc
  %v0_100066de = phi i32 [ %v2_100066b6, %dec_label_pc_100066b6 ], [ %v1_10006698, %dec_label_pc_10006694 ], [ %v3_100066d5, %dec_label_pc_100066bc ]
  ret i32 %v0_100066de

; uselistorder directives
  uselistorder i32 %v1_100066a6, { 1, 0 }
  uselistorder i32 (i32)* @RdDetect, { 2, 0, 1 }
  uselistorder i32 %arg1, { 5, 4, 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_100066dd, { 2, 0, 1 }
}

define i32 @RdLinRefLevel(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_100066df = load i32, i32* @ebp, align 4
  store i32 %v0_100066df, i32* %stack_var_-4, align 4
  %v4_100066df = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100066df, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_100066f7 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_100066ff = mul i32 %v1_100066f7, 65536
  %v1_100066ff.off = or i32 %v1_100066ff, 65535
  %tmp = icmp ult i32 %v1_100066ff.off, 131071
  br i1 %tmp, label %dec_label_pc_1000670e, label %dec_label_pc_10006741

dec_label_pc_1000670e:                            ; preds = %entry
  %v1_10006711 = add i32 %arg1, 98
  %v2_10006711 = inttoptr i32 %v1_10006711 to i16*
  %v3_10006711 = load i16, i16* %v2_10006711, align 2
  %tmp14 = sitofp i16 %v3_10006711 to double
  %v4_10006725 = call i32 @GetnVForDbm(i32 %arg1, double %tmp14)
  store i32 %v4_10006725, i32* @eax, align 4
  %v0_1000672d = load i3, i3* @fpu_stat_TOP, align 1
  %v12_1000672d = add i3 %v0_1000672d, 1
  store i3 %v12_1000672d, i3* @fpu_stat_TOP, align 1
  store i32 %arg1, i32* @edx, align 4
  %v3_10006736 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_10006741

dec_label_pc_10006741:                            ; preds = %entry, %dec_label_pc_1000670e
  %v0_10006744 = phi i32 [ %v3_10006736, %dec_label_pc_1000670e ], [ %v1_100066f7, %entry ]
  ret i32 %v0_10006744

; uselistorder directives
  uselistorder i32 %v1_100066f7, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 98, { 0, 1, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10006741, { 1, 0 }
}

define i32 @SetZSamplCnt(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10006753 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006753, i32* @eax, align 4
  %v1_1000675b = mul i32 %v1_10006753, 65536
  %v1_1000675b.off = or i32 %v1_1000675b, 65535
  %tmp = icmp ult i32 %v1_1000675b.off, 131071
  br i1 %tmp, label %dec_label_pc_10006770, label %dec_label_pc_10006762

dec_label_pc_10006762:                            ; preds = %entry
  %v1_10006766 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_1000679d

dec_label_pc_10006770:                            ; preds = %entry
  %v5_10006770 = icmp slt i32 %arg2, 0
  %v2_10006774 = icmp eq i1 %v5_10006770, false
  br i1 %v2_10006774, label %dec_label_pc_10006776, label %dec_label_pc_10006799

dec_label_pc_10006776:                            ; preds = %dec_label_pc_10006770
  %v4_10006776 = add i32 %arg2, -100000000
  %v6_10006776 = sub i32 99999999, %arg2
  %v7_10006776 = and i32 %v6_10006776, %arg2
  %v8_10006776 = icmp slt i32 %v7_10006776, 0
  %v9_10006776 = icmp eq i32 %v4_10006776, 0
  %v10_10006776 = icmp slt i32 %v4_10006776, 0
  %v3_1000677d = icmp eq i1 %v10_10006776, %v8_10006776
  %v4_1000677d = icmp eq i1 %v9_10006776, false
  %v5_1000677d = and i1 %v4_1000677d, %v3_1000677d
  br i1 %v5_1000677d, label %dec_label_pc_10006799, label %dec_label_pc_1000677f

dec_label_pc_1000677f:                            ; preds = %dec_label_pc_10006776
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v2_10006785 = add i32 %arg1, 152
  %v3_10006785 = inttoptr i32 %v2_10006785 to i32*
  store i32 %arg2, i32* %v3_10006785, align 4
  %v6_10006799.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10006799

dec_label_pc_10006799:                            ; preds = %dec_label_pc_10006776, %dec_label_pc_10006770, %dec_label_pc_1000677f
  %v6_10006799 = phi i32 [ %v6_10006799.pre, %dec_label_pc_1000677f ], [ %v1_10006753, %dec_label_pc_10006770 ], [ %v1_10006753, %dec_label_pc_10006776 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_1000677f ], [ -3, %dec_label_pc_10006770 ], [ -3, %dec_label_pc_10006776 ]
  %v7_10006799 = and i32 %v6_10006799, -65536
  %v8_10006799 = or i32 %storemerge, %v7_10006799
  br label %dec_label_pc_1000679d

dec_label_pc_1000679d:                            ; preds = %dec_label_pc_10006762, %dec_label_pc_10006799
  %storemerge9 = phi i32 [ %v8_10006799, %dec_label_pc_10006799 ], [ %v1_10006766, %dec_label_pc_10006762 ]
  %v0_100067a0 = phi i32 [ %v8_10006799, %dec_label_pc_10006799 ], [ %v1_10006766, %dec_label_pc_10006762 ]
  store i32 %storemerge9, i32* %eax.global-to-local, align 4
  ret i32 %v0_100067a0

; uselistorder directives
  uselistorder i32 %v4_10006776, { 1, 0 }
  uselistorder i32 %v1_10006753, { 1, 2, 0, 3 }
  uselistorder i32 %arg2, { 4, 0, 2, 3, 1 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000679d, { 1, 0 }
  uselistorder label %dec_label_pc_10006799, { 2, 0, 1 }
}

define i32 @RdZSamplCnt(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100067a8 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100067a8, i32* @eax, align 4
  %v1_100067b0 = mul i32 %v1_100067a8, 65536
  %v1_100067b0.off = or i32 %v1_100067b0, 65535
  %tmp = icmp ult i32 %v1_100067b0.off, 131071
  br i1 %tmp, label %dec_label_pc_100067bc, label %dec_label_pc_100067b7

dec_label_pc_100067b7:                            ; preds = %entry
  br label %dec_label_pc_100067d3

dec_label_pc_100067bc:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_100067c2 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_100067cd = add i32 %arg1, 152
  %v2_100067cd = inttoptr i32 %v1_100067cd to i32*
  %v3_100067cd = load i32, i32* %v2_100067cd, align 4
  br label %dec_label_pc_100067d3

dec_label_pc_100067d3:                            ; preds = %dec_label_pc_100067b7, %dec_label_pc_100067bc
  %storemerge = phi i32 [ -1, %dec_label_pc_100067b7 ], [ %v3_100067cd, %dec_label_pc_100067bc ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100067d3, { 1, 0 }
}

define i32 @SetZSamplRate(i32 %arg1, i64 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i16, align 2
  store i16 -1, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_100067e3 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100067e3, i32* @eax, align 4
  %v1_100067eb = mul i32 %v1_100067e3, 65536
  %v1_100067eb.off = or i32 %v1_100067eb, 65535
  %tmp = icmp ult i32 %v1_100067eb.off, 131071
  br i1 %tmp, label %dec_label_pc_10006800, label %dec_label_pc_100067f2

dec_label_pc_100067f2:                            ; preds = %entry
  %v1_100067f6 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_1000684e

dec_label_pc_10006800:                            ; preds = %entry
  %v4_10006800 = trunc i64 %arg2 to i32
  %v9_10006800 = icmp ult i32 %v4_10006800, 306
  %v1_10006807 = icmp eq i1 %v9_10006800, false
  br i1 %v1_10006807, label %dec_label_pc_10006818, label %dec_label_pc_10006809

dec_label_pc_10006809:                            ; preds = %dec_label_pc_10006800
  store i16 -3, i16* %stack_var_-8, align 2
  br label %dec_label_pc_10006836

dec_label_pc_10006818:                            ; preds = %dec_label_pc_10006800
  %tmp8 = icmp ult i32 %v4_10006800, 1000001
  br i1 %tmp8, label %dec_label_pc_10006830, label %dec_label_pc_10006821

dec_label_pc_10006821:                            ; preds = %dec_label_pc_10006818
  store i16 -3, i16* %stack_var_-8, align 2
  br label %dec_label_pc_10006836

dec_label_pc_10006830:                            ; preds = %dec_label_pc_10006818
  store i16 0, i16* %stack_var_-8, align 2
  br label %dec_label_pc_10006836

dec_label_pc_10006836:                            ; preds = %dec_label_pc_10006821, %dec_label_pc_10006809, %dec_label_pc_10006830
  %stack_var_8.0 = phi i64 [ %arg2, %dec_label_pc_10006830 ], [ 1000000, %dec_label_pc_10006821 ], [ 306, %dec_label_pc_10006809 ]
  %v12_1000683d = udiv i64 10000000, %stack_var_8.0
  %v13_1000683d = trunc i64 %v12_1000683d to i32
  store i32 %v13_1000683d, i32* %eax.global-to-local, align 4
  %v1_10006843 = trunc i64 %v12_1000683d to i16
  %v3_10006843 = add i32 %arg1, 156
  %v4_10006843 = inttoptr i32 %v3_10006843 to i16*
  store i16 %v1_10006843, i16* %v4_10006843, align 2
  %v3_1000684a = load i16, i16* %stack_var_-8, align 2
  %v4_1000684a = sext i16 %v3_1000684a to i32
  %v6_1000684a = load i32, i32* %eax.global-to-local, align 4
  %v7_1000684a = and i32 %v6_1000684a, -65536
  %v8_1000684a = or i32 %v7_1000684a, %v4_1000684a
  br label %dec_label_pc_1000684e

dec_label_pc_1000684e:                            ; preds = %dec_label_pc_100067f2, %dec_label_pc_10006836
  %storemerge = phi i32 [ %v8_1000684a, %dec_label_pc_10006836 ], [ %v1_100067f6, %dec_label_pc_100067f2 ]
  %v0_10006851 = phi i32 [ %v8_1000684a, %dec_label_pc_10006836 ], [ %v1_100067f6, %dec_label_pc_100067f2 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_10006851

; uselistorder directives
  uselistorder i16* %stack_var_-8, { 4, 3, 2, 1, 0 }
  uselistorder i64 1000000, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000684e, { 1, 0 }
  uselistorder label %dec_label_pc_10006836, { 2, 0, 1 }
}

define i32 @SetZSamplDvdr(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10006860 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006860, i32* @eax, align 4
  %v1_10006868 = mul i32 %v1_10006860, 65536
  %v1_10006868.off = or i32 %v1_10006868, 65535
  %tmp = icmp ult i32 %v1_10006868.off, 131071
  br i1 %tmp, label %dec_label_pc_1000687d, label %dec_label_pc_1000686f

dec_label_pc_1000686f:                            ; preds = %entry
  %v1_10006873 = call i32 @GetFuncStatusCode(i32 %arg1)
  store i32 %v1_10006873, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100068d0

dec_label_pc_1000687d:                            ; preds = %entry
  %v4_1000687d7 = zext i16 %arg2 to i32
  store i32 %v4_1000687d7, i32* %eax.global-to-local, align 4
  %v6_10006885 = icmp ult i16 %arg2, 10
  br i1 %v6_10006885, label %dec_label_pc_1000688a, label %dec_label_pc_1000689c

dec_label_pc_1000688a:                            ; preds = %dec_label_pc_1000687d
  %v1_1000688d = add i32 %arg1, 156
  %v2_1000688d = inttoptr i32 %v1_1000688d to i16*
  store i16 10, i16* %v2_1000688d, align 2
  %v0_10006896 = load i32, i32* %eax.global-to-local, align 4
  %v1_10006896 = and i32 %v0_10006896, -65536
  %v2_10006896 = or i32 %v1_10006896, 65533
  store i32 %v2_10006896, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100068d0

dec_label_pc_1000689c:                            ; preds = %dec_label_pc_1000687d
  %v7_100068ab = icmp slt i16 %arg2, 0
  br i1 %v7_100068ab, label %dec_label_pc_100068ad, label %dec_label_pc_100068bf

dec_label_pc_100068ad:                            ; preds = %dec_label_pc_1000689c
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_100068b0 = add i32 %arg1, 156
  %v2_100068b0 = inttoptr i32 %v1_100068b0 to i16*
  store i16 32767, i16* %v2_100068b0, align 2
  %v0_100068b9 = load i32, i32* %eax.global-to-local, align 4
  %v1_100068b9 = and i32 %v0_100068b9, -65536
  %v2_100068b9 = or i32 %v1_100068b9, 65533
  store i32 %v2_100068b9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100068d0

dec_label_pc_100068bf:                            ; preds = %dec_label_pc_1000689c
  %v3_100068c6 = add i32 %arg1, 156
  %v4_100068c6 = inttoptr i32 %v3_100068c6 to i16*
  store i16 %arg2, i16* %v4_100068c6, align 2
  %v11_100068cd = load i32, i32* %eax.global-to-local, align 4
  %v12_100068cd = and i32 %v11_100068cd, -65536
  store i32 %v12_100068cd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100068d0

dec_label_pc_100068d0:                            ; preds = %dec_label_pc_100068ad, %dec_label_pc_1000688a, %dec_label_pc_1000686f, %dec_label_pc_100068bf
  %v0_100068d3 = phi i32 [ %v2_100068b9, %dec_label_pc_100068ad ], [ %v2_10006896, %dec_label_pc_1000688a ], [ %v1_10006873, %dec_label_pc_1000686f ], [ %v12_100068cd, %dec_label_pc_100068bf ]
  ret i32 %v0_100068d3

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 5, 1, 2, 3, 4, 6, 7, 8 }
  uselistorder i16 %arg2, { 3, 0, 1, 2 }
  uselistorder i32 %arg1, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_100068d0, { 3, 0, 1, 2 }
}

define i32 @RdZSamplRate(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100068db = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100068db, i32* @eax, align 4
  %v1_100068e3 = mul i32 %v1_100068db, 65536
  %v1_100068e3.off = or i32 %v1_100068e3, 65535
  %tmp = icmp ult i32 %v1_100068e3.off, 131071
  br i1 %tmp, label %dec_label_pc_100068ef, label %dec_label_pc_100068ea

dec_label_pc_100068ea:                            ; preds = %entry
  br label %dec_label_pc_10006911

dec_label_pc_100068ef:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_100068f5 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10006902 = add i32 %arg1, 156
  %v2_10006902 = inttoptr i32 %v1_10006902 to i16*
  %v3_10006902 = load i16, i16* %v2_10006902, align 2
  %v7_1000690f = zext i16 %v3_10006902 to i32
  %v8_1000690f = udiv i32 10000000, %v7_1000690f
  br label %dec_label_pc_10006911

dec_label_pc_10006911:                            ; preds = %dec_label_pc_100068ea, %dec_label_pc_100068ef
  %v0_10006912 = phi i32 [ -1, %dec_label_pc_100068ea ], [ %v8_1000690f, %dec_label_pc_100068ef ]
  ret i32 %v0_10006912

; uselistorder directives
  uselistorder i32 %arg1, { 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10006911, { 1, 0 }
}

define i32 @RdZSamplDvdr(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000691a = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000691a, i32* @eax, align 4
  %v1_10006922 = mul i32 %v1_1000691a, 65536
  %v1_10006922.off = or i32 %v1_10006922, 65535
  %tmp = icmp ult i32 %v1_10006922.off, 131071
  br i1 %tmp, label %dec_label_pc_1000692f, label %dec_label_pc_10006929

dec_label_pc_10006929:                            ; preds = %entry
  %v2_10006929 = or i32 %v1_1000691a, 65535
  br label %dec_label_pc_10006947

dec_label_pc_1000692f:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10006935 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10006940 = add i32 %arg1, 156
  %v2_10006940 = inttoptr i32 %v1_10006940 to i16*
  %v3_10006940 = load i16, i16* %v2_10006940, align 2
  %v4_10006940 = zext i16 %v3_10006940 to i32
  %v6_10006940 = and i32 %arg1, -65536
  %v7_10006940 = or i32 %v4_10006940, %v6_10006940
  br label %dec_label_pc_10006947

dec_label_pc_10006947:                            ; preds = %dec_label_pc_10006929, %dec_label_pc_1000692f
  %storemerge = phi i32 [ %v2_10006929, %dec_label_pc_10006929 ], [ %v7_10006940, %dec_label_pc_1000692f ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_1000691a, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10006947, { 1, 0 }
}

define i32 @SetHopTabCnt(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10006957 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006957, i32* @eax, align 4
  %v1_1000695f = mul i32 %v1_10006957, 65536
  %v1_1000695f.off = or i32 %v1_1000695f, 65535
  %tmp = icmp ult i32 %v1_1000695f.off, 131071
  br i1 %tmp, label %dec_label_pc_10006974, label %dec_label_pc_10006966

dec_label_pc_10006966:                            ; preds = %entry
  %v1_1000696a = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100069a1

dec_label_pc_10006974:                            ; preds = %entry
  %v5_10006974 = icmp slt i32 %arg2, 0
  %v2_10006978 = icmp eq i1 %v5_10006974, false
  br i1 %v2_10006978, label %dec_label_pc_1000697a, label %dec_label_pc_1000699d

dec_label_pc_1000697a:                            ; preds = %dec_label_pc_10006974
  %v4_1000697a = add i32 %arg2, -1024
  %v6_1000697a = sub i32 1023, %arg2
  %v7_1000697a = and i32 %v6_1000697a, %arg2
  %v8_1000697a = icmp slt i32 %v7_1000697a, 0
  %v9_1000697a = icmp eq i32 %v4_1000697a, 0
  %v10_1000697a = icmp slt i32 %v4_1000697a, 0
  %v3_10006981 = icmp eq i1 %v10_1000697a, %v8_1000697a
  %v4_10006981 = icmp eq i1 %v9_1000697a, false
  %v5_10006981 = and i1 %v4_10006981, %v3_10006981
  br i1 %v5_10006981, label %dec_label_pc_1000699d, label %dec_label_pc_10006983

dec_label_pc_10006983:                            ; preds = %dec_label_pc_1000697a
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v2_10006989 = add i32 %arg1, 172
  %v3_10006989 = inttoptr i32 %v2_10006989 to i32*
  store i32 %arg2, i32* %v3_10006989, align 4
  %v6_1000699d.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000699d

dec_label_pc_1000699d:                            ; preds = %dec_label_pc_1000697a, %dec_label_pc_10006974, %dec_label_pc_10006983
  %v6_1000699d = phi i32 [ %v6_1000699d.pre, %dec_label_pc_10006983 ], [ %v1_10006957, %dec_label_pc_10006974 ], [ %v1_10006957, %dec_label_pc_1000697a ]
  %storemerge = phi i32 [ 0, %dec_label_pc_10006983 ], [ -3, %dec_label_pc_10006974 ], [ -3, %dec_label_pc_1000697a ]
  %v7_1000699d = and i32 %v6_1000699d, -65536
  %v8_1000699d = or i32 %storemerge, %v7_1000699d
  br label %dec_label_pc_100069a1

dec_label_pc_100069a1:                            ; preds = %dec_label_pc_10006966, %dec_label_pc_1000699d
  %storemerge9 = phi i32 [ %v8_1000699d, %dec_label_pc_1000699d ], [ %v1_1000696a, %dec_label_pc_10006966 ]
  %v0_100069a4 = phi i32 [ %v8_1000699d, %dec_label_pc_1000699d ], [ %v1_1000696a, %dec_label_pc_10006966 ]
  store i32 %storemerge9, i32* %eax.global-to-local, align 4
  ret i32 %v0_100069a4

; uselistorder directives
  uselistorder i32 %v4_1000697a, { 1, 0 }
  uselistorder i32 %v1_10006957, { 1, 2, 0, 3 }
  uselistorder i32 %arg2, { 4, 0, 2, 3, 1 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100069a1, { 1, 0 }
  uselistorder label %dec_label_pc_1000699d, { 2, 0, 1 }
}

define i32 @RdHopTabCnt(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100069ac = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100069ac, i32* @eax, align 4
  %v1_100069b4 = mul i32 %v1_100069ac, 65536
  %v1_100069b4.off = or i32 %v1_100069b4, 65535
  %tmp = icmp ult i32 %v1_100069b4.off, 131071
  br i1 %tmp, label %dec_label_pc_100069c0, label %dec_label_pc_100069bb

dec_label_pc_100069bb:                            ; preds = %entry
  br label %dec_label_pc_100069d7

dec_label_pc_100069c0:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_100069c6 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_100069d1 = add i32 %arg1, 172
  %v2_100069d1 = inttoptr i32 %v1_100069d1 to i32*
  %v3_100069d1 = load i32, i32* %v2_100069d1, align 4
  br label %dec_label_pc_100069d7

dec_label_pc_100069d7:                            ; preds = %dec_label_pc_100069bb, %dec_label_pc_100069c0
  %storemerge = phi i32 [ -1, %dec_label_pc_100069bb ], [ %v3_100069d1, %dec_label_pc_100069c0 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 172, { 0, 1, 3, 2 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100069d7, { 1, 0 }
}

define i32 @SetTrigMode(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp = trunc i32 %arg3 to i16
  %stack_var_-8 = alloca i16, align 2
  store i16 -1, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_100069e7 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100069e7, i32* @eax, align 4
  %v1_100069ef = mul i32 %v1_100069e7, 65536
  %v1_100069ef.off = or i32 %v1_100069ef, 65535
  %tmp10 = icmp ult i32 %v1_100069ef.off, 131071
  br i1 %tmp10, label %dec_label_pc_10006a04, label %dec_label_pc_100069f6

dec_label_pc_100069f6:                            ; preds = %entry
  %v1_100069fa = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10006a56

dec_label_pc_10006a04:                            ; preds = %entry
  %v4_10006a04 = sext i16 %arg2 to i32
  store i32 %v4_10006a04, i32* %eax.global-to-local, align 4
  %v1_10006a08 = icmp eq i16 %arg2, 0
  %v2_10006a08 = icmp slt i16 %arg2, 0
  %v2_10006a0a = icmp eq i1 %v2_10006a08, false
  br i1 %v2_10006a0a, label %dec_label_pc_10006a0c, label %dec_label_pc_10006a4c

dec_label_pc_10006a0c:                            ; preds = %dec_label_pc_10006a04
  %v6_10006a10 = sub nsw i32 5, %v4_10006a04
  %v7_10006a10 = and i32 %v6_10006a10, %v4_10006a04
  %v8_10006a10 = icmp slt i32 %v7_10006a10, 0
  %v9_10006a10 = icmp eq i16 %arg2, 6
  %v10_10006a10 = icmp slt i16 %arg2, 6
  %v3_10006a13 = icmp eq i1 %v10_10006a10, %v8_10006a10
  %v4_10006a13 = icmp eq i1 %v9_10006a10, false
  %v5_10006a13 = and i1 %v4_10006a13, %v3_10006a13
  br i1 %v5_10006a13, label %dec_label_pc_10006a4c, label %dec_label_pc_10006a15

dec_label_pc_10006a15:                            ; preds = %dec_label_pc_10006a0c
  %v4_10006a18 = zext i16 %arg2 to i32
  %v6_10006a18 = and i32 %v4_10006a04, -65536
  %v7_10006a18 = or i32 %v6_10006a18, %v4_10006a18
  store i32 %v7_10006a18, i32* %eax.global-to-local, align 4
  %v3_10006a1c = add i32 %arg1, 108
  %v4_10006a1c = inttoptr i32 %v3_10006a1c to i16*
  store i16 %arg2, i16* %v4_10006a1c, align 2
  store i16 0, i16* %stack_var_-8, align 2
  %v2_10006a2a = icmp eq i16 %tmp, 0
  br i1 %v2_10006a2a, label %dec_label_pc_10006a36, label %dec_label_pc_10006a2e

dec_label_pc_10006a2e:                            ; preds = %dec_label_pc_10006a15
  %v1_10006a34 = icmp eq i1 %v1_10006a08, false
  br i1 %v1_10006a34, label %dec_label_pc_10006a41, label %dec_label_pc_10006a36

dec_label_pc_10006a36:                            ; preds = %dec_label_pc_10006a2e, %dec_label_pc_10006a15
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10006a39 = add i32 %arg1, 110
  %v2_10006a39 = inttoptr i32 %v1_10006a39 to i16*
  store i16 0, i16* %v2_10006a39, align 2
  br label %dec_label_pc_10006a52

dec_label_pc_10006a41:                            ; preds = %dec_label_pc_10006a2e
  %v1_10006a44 = add i32 %arg1, 110
  %v2_10006a44 = inttoptr i32 %v1_10006a44 to i16*
  store i16 1, i16* %v2_10006a44, align 2
  br label %dec_label_pc_10006a52

dec_label_pc_10006a4c:                            ; preds = %dec_label_pc_10006a04, %dec_label_pc_10006a0c
  store i16 -3, i16* %stack_var_-8, align 2
  br label %dec_label_pc_10006a52

dec_label_pc_10006a52:                            ; preds = %dec_label_pc_10006a41, %dec_label_pc_10006a36, %dec_label_pc_10006a4c
  %v3_10006a52 = load i16, i16* %stack_var_-8, align 2
  %v4_10006a52 = sext i16 %v3_10006a52 to i32
  %v6_10006a52 = load i32, i32* %eax.global-to-local, align 4
  %v7_10006a52 = and i32 %v6_10006a52, -65536
  %v8_10006a52 = or i32 %v7_10006a52, %v4_10006a52
  br label %dec_label_pc_10006a56

dec_label_pc_10006a56:                            ; preds = %dec_label_pc_100069f6, %dec_label_pc_10006a52
  %storemerge = phi i32 [ %v8_10006a52, %dec_label_pc_10006a52 ], [ %v1_100069fa, %dec_label_pc_100069f6 ]
  %v0_10006a59 = phi i32 [ %v8_10006a52, %dec_label_pc_10006a52 ], [ %v1_100069fa, %dec_label_pc_100069f6 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_10006a59

; uselistorder directives
  uselistorder i32 %v4_10006a04, { 1, 0, 2, 3 }
  uselistorder i16* %stack_var_-8, { 3, 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i16 6, { 2, 0, 1, 3 }
  uselistorder i16 %arg2, { 6, 5, 4, 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 6, 5, 4, 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_10006a56, { 1, 0 }
  uselistorder label %dec_label_pc_10006a52, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10006a4c, { 1, 0 }
}

define i32 @RdTrigMode(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10006a61 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006a61, i32* @eax, align 4
  %v1_10006a69 = mul i32 %v1_10006a61, 65536
  %v1_10006a69.off = or i32 %v1_10006a69, 65535
  %tmp = icmp ult i32 %v1_10006a69.off, 131071
  br i1 %tmp, label %dec_label_pc_10006a76, label %dec_label_pc_10006a70

dec_label_pc_10006a70:                            ; preds = %entry
  %v2_10006a70 = or i32 %v1_10006a61, 65535
  br label %dec_label_pc_10006a8b

dec_label_pc_10006a76:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10006a7c = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10006a87 = add i32 %arg1, 108
  %v2_10006a87 = inttoptr i32 %v1_10006a87 to i16*
  %v3_10006a87 = load i16, i16* %v2_10006a87, align 2
  %v4_10006a87 = zext i16 %v3_10006a87 to i32
  %v6_10006a87 = and i32 %arg1, -65536
  %v7_10006a87 = or i32 %v4_10006a87, %v6_10006a87
  br label %dec_label_pc_10006a8b

dec_label_pc_10006a8b:                            ; preds = %dec_label_pc_10006a70, %dec_label_pc_10006a76
  %storemerge = phi i32 [ %v2_10006a70, %dec_label_pc_10006a70 ], [ %v7_10006a87, %dec_label_pc_10006a76 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10006a61, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10006a8b, { 1, 0 }
}

define i32 @SetTrigThrsh(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10006a9b = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006a9b, i32* @eax, align 4
  %v1_10006aa3 = mul i32 %v1_10006a9b, 65536
  %v1_10006aa3.off = or i32 %v1_10006aa3, 65535
  %tmp = icmp ult i32 %v1_10006aa3.off, 131071
  br i1 %tmp, label %dec_label_pc_10006ab8, label %dec_label_pc_10006aaa

dec_label_pc_10006aaa:                            ; preds = %entry
  %v1_10006aae = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10006ae7

dec_label_pc_10006ab8:                            ; preds = %entry
  %v4_10006ab8 = sext i16 %arg2 to i32
  store i32 %v4_10006ab8, i32* %eax.global-to-local, align 4
  %v13_10006abc = icmp slt i16 %arg2, -120
  br i1 %v13_10006abc, label %dec_label_pc_10006ae3, label %dec_label_pc_10006ac1

dec_label_pc_10006ac1:                            ; preds = %dec_label_pc_10006ab8
  %v6_10006ac5 = sub nsw i32 19, %v4_10006ab8
  %v7_10006ac5 = and i32 %v6_10006ac5, %v4_10006ab8
  %v8_10006ac5 = icmp slt i32 %v7_10006ac5, 0
  %v9_10006ac5 = icmp eq i16 %arg2, 20
  %v10_10006ac5 = icmp slt i16 %arg2, 20
  %v3_10006ac8 = icmp eq i1 %v10_10006ac5, %v8_10006ac5
  %v4_10006ac8 = icmp eq i1 %v9_10006ac5, false
  %v5_10006ac8 = and i1 %v4_10006ac8, %v3_10006ac8
  br i1 %v5_10006ac8, label %dec_label_pc_10006ae3, label %dec_label_pc_10006aca

dec_label_pc_10006aca:                            ; preds = %dec_label_pc_10006ac1
  %v4_10006acd = zext i16 %arg2 to i32
  %v6_10006acd = and i32 %v4_10006ab8, -65536
  %v7_10006acd = or i32 %v6_10006acd, %v4_10006acd
  store i32 %v7_10006acd, i32* %eax.global-to-local, align 4
  %v3_10006ad1 = add i32 %arg1, 116
  %v4_10006ad1 = inttoptr i32 %v3_10006ad1 to i16*
  store i16 %arg2, i16* %v4_10006ad1, align 2
  %v6_10006ae3.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10006ae3

dec_label_pc_10006ae3:                            ; preds = %dec_label_pc_10006ab8, %dec_label_pc_10006ac1, %dec_label_pc_10006aca
  %v6_10006ae3 = phi i32 [ %v6_10006ae3.pre, %dec_label_pc_10006aca ], [ %v4_10006ab8, %dec_label_pc_10006ac1 ], [ %v4_10006ab8, %dec_label_pc_10006ab8 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_10006aca ], [ -3, %dec_label_pc_10006ac1 ], [ -3, %dec_label_pc_10006ab8 ]
  %v7_10006ae3 = and i32 %v6_10006ae3, -65536
  %v8_10006ae3 = or i32 %storemerge, %v7_10006ae3
  br label %dec_label_pc_10006ae7

dec_label_pc_10006ae7:                            ; preds = %dec_label_pc_10006aaa, %dec_label_pc_10006ae3
  %storemerge9 = phi i32 [ %v8_10006ae3, %dec_label_pc_10006ae3 ], [ %v1_10006aae, %dec_label_pc_10006aaa ]
  %v0_10006aea = phi i32 [ %v8_10006ae3, %dec_label_pc_10006ae3 ], [ %v1_10006aae, %dec_label_pc_10006aaa ]
  store i32 %storemerge9, i32* %eax.global-to-local, align 4
  ret i32 %v0_10006aea

; uselistorder directives
  uselistorder i32 %v4_10006ab8, { 1, 2, 3, 0, 4, 5 }
  uselistorder i16 20, { 1, 0, 3, 2 }
  uselistorder i16 %arg2, { 5, 4, 3, 0, 2, 1 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_10006ae7, { 1, 0 }
  uselistorder label %dec_label_pc_10006ae3, { 2, 1, 0 }
}

define i32 @RdTrigThrsh(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10006af2 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006af2, i32* @eax, align 4
  %v1_10006afa = mul i32 %v1_10006af2, 65536
  %v1_10006afa.off = or i32 %v1_10006afa, 65535
  %tmp = icmp ult i32 %v1_10006afa.off, 131071
  br i1 %tmp, label %dec_label_pc_10006b07, label %dec_label_pc_10006b01

dec_label_pc_10006b01:                            ; preds = %entry
  %v1_10006b01 = and i32 %v1_10006af2, -65536
  %v2_10006b01 = or i32 %v1_10006b01, 32768
  br label %dec_label_pc_10006b1c

dec_label_pc_10006b07:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10006b0d = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10006b18 = add i32 %arg1, 116
  %v2_10006b18 = inttoptr i32 %v1_10006b18 to i16*
  %v3_10006b18 = load i16, i16* %v2_10006b18, align 2
  %v4_10006b18 = zext i16 %v3_10006b18 to i32
  %v6_10006b18 = and i32 %arg1, -65536
  %v7_10006b18 = or i32 %v4_10006b18, %v6_10006b18
  br label %dec_label_pc_10006b1c

dec_label_pc_10006b1c:                            ; preds = %dec_label_pc_10006b01, %dec_label_pc_10006b07
  %storemerge = phi i32 [ %v2_10006b01, %dec_label_pc_10006b01 ], [ %v7_10006b18, %dec_label_pc_10006b07 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10006af2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10006b1c, { 1, 0 }
}

define i32 @SetExternRef(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_10006b21 = load i32, i32* @ecx, align 4
  store i32 %v0_10006b21, i32* %stack_var_-8, align 4
  %v4_10006b21 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %arg1, i32* @eax, align 4
  %v1_10006b26 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006b26, i32* @eax, align 4
  %v1_10006b2e = mul i32 %v1_10006b26, 65536
  %v1_10006b2e.off = or i32 %v1_10006b2e, 65535
  %tmp = icmp ult i32 %v1_10006b2e.off, 131071
  br i1 %tmp, label %dec_label_pc_10006b43, label %dec_label_pc_10006b35

dec_label_pc_10006b35:                            ; preds = %entry
  %v1_10006b39 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10006ba6

dec_label_pc_10006b43:                            ; preds = %entry
  %v2_10006b47 = icmp eq i16 %arg2, 0
  %v1_10006b49 = icmp eq i1 %v2_10006b47, false
  br i1 %v1_10006b49, label %dec_label_pc_10006b59, label %dec_label_pc_10006b4b

dec_label_pc_10006b4b:                            ; preds = %dec_label_pc_10006b43
  %v1_10006b4e = add i32 %arg1, 184
  %v2_10006b4e = inttoptr i32 %v1_10006b4e to i16*
  store i16 0, i16* %v2_10006b4e, align 2
  br label %dec_label_pc_10006b65

dec_label_pc_10006b59:                            ; preds = %dec_label_pc_10006b43
  %v1_10006b5c = add i32 %arg1, 184
  %v2_10006b5c = inttoptr i32 %v1_10006b5c to i16*
  store i16 1, i16* %v2_10006b5c, align 2
  br label %dec_label_pc_10006b65

dec_label_pc_10006b65:                            ; preds = %dec_label_pc_10006b4b, %dec_label_pc_10006b59
  %v1_10006b68 = add i32 %arg1, 176
  %v2_10006b68 = inttoptr i32 %v1_10006b68 to i16*
  %v3_10006b68 = load i16, i16* %v2_10006b68, align 2
  %v9_10006b71 = icmp eq i16 %v3_10006b68, 50
  %v1_10006b74 = icmp eq i1 %v9_10006b71, false
  %v2_10006b74 = zext i1 %v1_10006b74 to i32
  store i32 %v2_10006b74, i32* %stack_var_-8, align 4
  %v4_10006b9b = trunc i32 %arg1 to i16
  %v5_10006b9b = call i32 @SendCommand(i16 %v4_10006b9b, i32 11, i32 2, i32 %v4_10006b21)
  %v12_10006ba3 = and i32 %v5_10006b9b, -65536
  br label %dec_label_pc_10006ba6

dec_label_pc_10006ba6:                            ; preds = %dec_label_pc_10006b35, %dec_label_pc_10006b65
  %v0_10006ba9 = phi i32 [ %v1_10006b39, %dec_label_pc_10006b35 ], [ %v12_10006ba3, %dec_label_pc_10006b65 ]
  ret i32 %v0_10006ba9

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 0, 2, 1 }
  uselistorder i32 (i16, i32, i32, i32)* @SendCommand, { 3, 6, 4, 5, 7, 0, 8, 9, 10, 1, 2, 11, 12, 13, 14 }
  uselistorder i32 %arg1, { 6, 5, 3, 4, 2, 1, 0 }
  uselistorder label %dec_label_pc_10006ba6, { 1, 0 }
  uselistorder label %dec_label_pc_10006b65, { 1, 0 }
}

define i32 @RdExternRef(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10006bb1 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006bb1, i32* @eax, align 4
  %v1_10006bb9 = mul i32 %v1_10006bb1, 65536
  %v1_10006bb9.off = or i32 %v1_10006bb9, 65535
  %tmp = icmp ult i32 %v1_10006bb9.off, 131071
  br i1 %tmp, label %dec_label_pc_10006bc6, label %dec_label_pc_10006bc0

dec_label_pc_10006bc0:                            ; preds = %entry
  %v2_10006bc0 = or i32 %v1_10006bb1, 65535
  br label %dec_label_pc_10006bde

dec_label_pc_10006bc6:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10006bcc = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10006bd7 = add i32 %arg1, 184
  %v2_10006bd7 = inttoptr i32 %v1_10006bd7 to i16*
  %v3_10006bd7 = load i16, i16* %v2_10006bd7, align 2
  %v4_10006bd7 = zext i16 %v3_10006bd7 to i32
  %v6_10006bd7 = and i32 %arg1, -65536
  %v7_10006bd7 = or i32 %v4_10006bd7, %v6_10006bd7
  br label %dec_label_pc_10006bde

dec_label_pc_10006bde:                            ; preds = %dec_label_pc_10006bc0, %dec_label_pc_10006bc6
  %storemerge = phi i32 [ %v2_10006bc0, %dec_label_pc_10006bc0 ], [ %v7_10006bd7, %dec_label_pc_10006bc6 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10006bb1, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10006bde, { 1, 0 }
}

define i32 @SetIntrCode(i32 %arg1, i16 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp = trunc i32 %arg3 to i16
  %stack_var_-12 = alloca i16, align 2
  store i16 -1, i16* %stack_var_-12, align 2
  %v1_10006bf62 = zext i16 %arg2 to i32
  %v2_10006bf6 = and i32 %v1_10006bf62, 255
  store i32 %v2_10006bf6, i32* @eax, align 4
  %v1_10006bfb = trunc i32 %v2_10006bf6 to i16
  %v1_10006c03 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006c03, i32* %eax.global-to-local, align 4
  %v1_10006c0b = mul i32 %v1_10006c03, 65536
  %v1_10006c0b.off = or i32 %v1_10006c0b, 65535
  %tmp25 = icmp ult i32 %v1_10006c0b.off, 131071
  br i1 %tmp25, label %dec_label_pc_10006c23, label %dec_label_pc_10006c12

dec_label_pc_10006c12:                            ; preds = %entry
  store i32 %arg1, i32* @eax, align 4
  %v1_10006c16 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10006cc9

dec_label_pc_10006c23:                            ; preds = %entry
  %v9_10006c27 = icmp eq i32 %v2_10006bf6, 1
  %v1_10006c2a = icmp eq i1 %v9_10006c27, false
  br i1 %v1_10006c2a, label %dec_label_pc_10006c76, label %dec_label_pc_10006c2c

dec_label_pc_10006c2c:                            ; preds = %dec_label_pc_10006c23
  %v6_10006c2f = and i32 %v1_10006c03, -65536
  %v7_10006c2f = or i32 %v6_10006c2f, %v1_10006bf62
  store i32 %v7_10006c2f, i32* %eax.global-to-local, align 4
  %v3_10006c33 = add i32 %arg1, 136
  %v4_10006c33 = inttoptr i32 %v3_10006c33 to i16*
  store i16 %arg2, i16* %v4_10006c33, align 2
  %sext = mul i32 %arg3, 65536
  %v4_10006c3a = sdiv i32 %sext, 65536
  %v12_10006c3e = icmp slt i16 %tmp, 1
  br i1 %v12_10006c3e, label %dec_label_pc_10006c74, label %dec_label_pc_10006c43

dec_label_pc_10006c43:                            ; preds = %dec_label_pc_10006c2c
  %v6_10006c47 = sub nsw i32 254, %v4_10006c3a
  %v7_10006c47 = and i32 %v6_10006c47, %v4_10006c3a
  %v8_10006c47 = icmp slt i32 %v7_10006c47, 0
  %tmp26 = icmp eq i32 %sext, 16711680
  %v10_10006c47 = icmp slt i16 %tmp, 255
  %v3_10006c4d = icmp eq i1 %v10_10006c47, %v8_10006c47
  %v4_10006c4d = icmp eq i1 %tmp26, false
  %v5_10006c4d = and i1 %v4_10006c4d, %v3_10006c4d
  br i1 %v5_10006c4d, label %dec_label_pc_10006c74, label %dec_label_pc_10006c4f

dec_label_pc_10006c4f:                            ; preds = %dec_label_pc_10006c43
  %v2_10006c53 = sdiv i32 %sext, 256
  %v2_10006c5a = or i32 %v2_10006c53, %v2_10006bf6
  store i32 %v2_10006c5a, i32* %eax.global-to-local, align 4
  %v1_10006c5f = trunc i32 %v2_10006c5a to i16
  store i16 %v1_10006c5f, i16* %v4_10006c33, align 2
  br label %dec_label_pc_10006c74

dec_label_pc_10006c74:                            ; preds = %dec_label_pc_10006c2c, %dec_label_pc_10006c43, %dec_label_pc_10006c4f
  %storemerge = phi i16 [ 0, %dec_label_pc_10006c4f ], [ -3, %dec_label_pc_10006c43 ], [ -3, %dec_label_pc_10006c2c ]
  store i16 %storemerge, i16* %stack_var_-12, align 2
  br label %dec_label_pc_10006ca3

dec_label_pc_10006c76:                            ; preds = %dec_label_pc_10006c23
  store i32 %v2_10006bf6, i32* %eax.global-to-local, align 4
  %v5_10006c82 = icmp ult i16 %v1_10006bfb, 5
  %v9_10006c82 = icmp eq i32 %v2_10006bf6, 5
  %tmp22 = or i1 %v9_10006c82, %v5_10006c82
  %tmp23 = icmp eq i1 %tmp22, false
  br i1 %tmp23, label %dec_label_pc_10006c9d, label %dec_label_pc_10006c87

dec_label_pc_10006c87:                            ; preds = %dec_label_pc_10006c76
  store i32 %v2_10006bf6, i32* %eax.global-to-local, align 4
  %v3_10006c8e = add i32 %arg1, 136
  %v4_10006c8e = inttoptr i32 %v3_10006c8e to i16*
  store i16 %v1_10006bfb, i16* %v4_10006c8e, align 2
  store i16 0, i16* %stack_var_-12, align 2
  br label %dec_label_pc_10006ca3

dec_label_pc_10006c9d:                            ; preds = %dec_label_pc_10006c76
  store i16 -3, i16* %stack_var_-12, align 2
  br label %dec_label_pc_10006ca3

dec_label_pc_10006ca3:                            ; preds = %dec_label_pc_10006c87, %dec_label_pc_10006c74, %dec_label_pc_10006c9d
  %v3_10006ca3 = phi i16 [ 0, %dec_label_pc_10006c87 ], [ %storemerge, %dec_label_pc_10006c74 ], [ -3, %dec_label_pc_10006c9d ]
  %v1_10006ca7 = icmp eq i16 %v3_10006ca3, 0
  %v1_10006ca9 = icmp eq i1 %v1_10006ca7, false
  br i1 %v1_10006ca9, label %dec_label_pc_10006ca3.dec_label_pc_10006cc5_crit_edge, label %dec_label_pc_10006cab

dec_label_pc_10006ca3.dec_label_pc_10006cc5_crit_edge: ; preds = %dec_label_pc_10006ca3
  %v6_10006cc5.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10006cc5

dec_label_pc_10006cab:                            ; preds = %dec_label_pc_10006ca3
  %v1_10006caf = call i32 @CommInterrupts(i32 %arg1)
  %v1_10006cb7 = mul i32 %v1_10006caf, 65536
  %v2_10006cb7 = sdiv i32 %v1_10006cb7, 65536
  store i32 %v2_10006cb7, i32* %eax.global-to-local, align 4
  %tmp27 = icmp eq i32 %v1_10006cb7, 4259840
  br i1 %tmp27, label %dec_label_pc_10006cab.dec_label_pc_10006cc5_crit_edge, label %dec_label_pc_10006cbf

dec_label_pc_10006cab.dec_label_pc_10006cc5_crit_edge: ; preds = %dec_label_pc_10006cab
  %v3_10006cc5.pre = load i16, i16* %stack_var_-12, align 2
  br label %dec_label_pc_10006cc5

dec_label_pc_10006cbf:                            ; preds = %dec_label_pc_10006cab
  store i16 -2, i16* %stack_var_-12, align 2
  br label %dec_label_pc_10006cc5

dec_label_pc_10006cc5:                            ; preds = %dec_label_pc_10006ca3.dec_label_pc_10006cc5_crit_edge, %dec_label_pc_10006cab.dec_label_pc_10006cc5_crit_edge, %dec_label_pc_10006cbf
  %v6_10006cc5 = phi i32 [ 65, %dec_label_pc_10006cab.dec_label_pc_10006cc5_crit_edge ], [ %v6_10006cc5.pre, %dec_label_pc_10006ca3.dec_label_pc_10006cc5_crit_edge ], [ %v2_10006cb7, %dec_label_pc_10006cbf ]
  %v3_10006cc5 = phi i16 [ %v3_10006cc5.pre, %dec_label_pc_10006cab.dec_label_pc_10006cc5_crit_edge ], [ %v3_10006ca3, %dec_label_pc_10006ca3.dec_label_pc_10006cc5_crit_edge ], [ -2, %dec_label_pc_10006cbf ]
  %v4_10006cc5 = sext i16 %v3_10006cc5 to i32
  %v7_10006cc5 = and i32 %v6_10006cc5, -65536
  %v8_10006cc5 = or i32 %v4_10006cc5, %v7_10006cc5
  br label %dec_label_pc_10006cc9

dec_label_pc_10006cc9:                            ; preds = %dec_label_pc_10006c12, %dec_label_pc_10006cc5
  %storemerge24 = phi i32 [ %v8_10006cc5, %dec_label_pc_10006cc5 ], [ %v1_10006c16, %dec_label_pc_10006c12 ]
  %v0_10006ccc = phi i32 [ %v8_10006cc5, %dec_label_pc_10006cc5 ], [ %v1_10006c16, %dec_label_pc_10006c12 ]
  store i32 %storemerge24, i32* %eax.global-to-local, align 4
  ret i32 %v0_10006ccc

; uselistorder directives
  uselistorder i32 %v2_10006cb7, { 1, 0 }
  uselistorder i32 %v4_10006c3a, { 1, 0 }
  uselistorder i32 %sext, { 1, 0, 2 }
  uselistorder i32 %v1_10006c03, { 1, 0, 2 }
  uselistorder i32 %v2_10006bf6, { 1, 3, 4, 0, 2, 5, 6 }
  uselistorder i16* %stack_var_-12, { 5, 0, 4, 3, 1, 2 }
  uselistorder i16 %tmp, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 5, 2, 3, 4, 6, 7 }
  uselistorder i16 255, { 1, 0 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 5, 0, 1, 4, 3, 2 }
  uselistorder label %dec_label_pc_10006cc9, { 1, 0 }
  uselistorder label %dec_label_pc_10006cc5, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10006ca3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10006c74, { 2, 1, 0 }
}

define i32 @RdIntrCode(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10006cd4 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006cd4, i32* @eax, align 4
  %v1_10006cdc = mul i32 %v1_10006cd4, 65536
  %v1_10006cdc.off = or i32 %v1_10006cdc, 65535
  %tmp = icmp ult i32 %v1_10006cdc.off, 131071
  br i1 %tmp, label %dec_label_pc_10006ce9, label %dec_label_pc_10006ce3

dec_label_pc_10006ce3:                            ; preds = %entry
  %v2_10006ce3 = or i32 %v1_10006cd4, 65535
  br label %dec_label_pc_10006d01

dec_label_pc_10006ce9:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10006cef = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10006cfa = add i32 %arg1, 136
  %v2_10006cfa = inttoptr i32 %v1_10006cfa to i16*
  %v3_10006cfa = load i16, i16* %v2_10006cfa, align 2
  %v4_10006cfa = zext i16 %v3_10006cfa to i32
  %v6_10006cfa = and i32 %arg1, -65536
  %v7_10006cfa = or i32 %v4_10006cfa, %v6_10006cfa
  br label %dec_label_pc_10006d01

dec_label_pc_10006d01:                            ; preds = %dec_label_pc_10006ce3, %dec_label_pc_10006ce9
  %storemerge = phi i32 [ %v2_10006ce3, %dec_label_pc_10006ce3 ], [ %v7_10006cfa, %dec_label_pc_10006ce9 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10006cd4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10006d01, { 1, 0 }
}

define i32 @IsCalibrated(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_10006d03 = load i32, i32* @ebp, align 4
  store i32 %v0_10006d03, i32* %stack_var_-4, align 4
  %v4_10006d03 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10006d03, i32* @ebp, align 4
  %v1_10006d13 = add i32 %arg1, 40
  %v2_10006d13 = inttoptr i32 %v1_10006d13 to i32*
  %v3_10006d13 = load i32, i32* %v2_10006d13, align 4
  %v1_10006d17 = call i32 @function_1000d563(i32 %v3_10006d13)
  store i32 %v1_10006d17, i32* @eax, align 4
  %v1_10006d26 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10006d2e = mul i32 %v1_10006d26, 65536
  %v1_10006d2e.off = or i32 %v1_10006d2e, 65535
  %tmp = icmp ult i32 %v1_10006d2e.off, 131071
  br i1 %tmp, label %dec_label_pc_10006d3d, label %dec_label_pc_10006d35

dec_label_pc_10006d35:                            ; preds = %entry
  %v2_10006d2e = sdiv i32 %v1_10006d2e, 65536
  %v12_10006d35 = and i32 %v2_10006d2e, -65536
  br label %dec_label_pc_10006dc9

dec_label_pc_10006d3d:                            ; preds = %entry
  %v3_10006d40 = load i32, i32* %v2_10006d13, align 4
  %v4_10006d40 = icmp eq i32 %v3_10006d40, 0
  br i1 %v4_10006d40, label %dec_label_pc_10006d89, label %dec_label_pc_10006d46

dec_label_pc_10006d46:                            ; preds = %dec_label_pc_10006d3d
  store i32 %arg1, i32* @edx, align 4
  %v1_10006d49 = add i32 %arg1, 36
  %v2_10006d49 = inttoptr i32 %v1_10006d49 to i32*
  %v3_10006d49 = load i32, i32* %v2_10006d49, align 4
  %v4_10006d49 = icmp eq i32 %v3_10006d49, 0
  %v1_10006d4d = icmp eq i1 %v4_10006d49, false
  br i1 %v1_10006d4d, label %dec_label_pc_10006d89, label %dec_label_pc_10006d4f

dec_label_pc_10006d4f:                            ; preds = %dec_label_pc_10006d46
  %v1_10006d53 = call i32 @RdRBW(i32 %arg1)
  %v1_10006d5c = trunc i32 %v1_10006d53 to i16
  %v2_10006d5c = call i32 @DefltSetTimeRBW(i16 %v1_10006d5c)
  %v5_10006d67 = icmp slt i32 %v1_10006d17, %v2_10006d5c
  br i1 %v5_10006d67, label %dec_label_pc_10006d83, label %dec_label_pc_10006d69

dec_label_pc_10006d69:                            ; preds = %dec_label_pc_10006d4f
  %v1_10006d6d = call i32 @RdVBW(i32 %arg1)
  %v1_10006d76 = trunc i32 %v1_10006d6d to i16
  %v2_10006d76 = call i32 @DefltSetTimeVBW(i16 %v1_10006d76)
  %v5_10006d81 = icmp slt i32 %v1_10006d17, %v2_10006d76
  br i1 %v5_10006d81, label %dec_label_pc_10006d83, label %dec_label_pc_10006d89

dec_label_pc_10006d83:                            ; preds = %dec_label_pc_10006d69, %dec_label_pc_10006d4f
  br label %dec_label_pc_10006d89

dec_label_pc_10006d89:                            ; preds = %dec_label_pc_10006d69, %dec_label_pc_10006d46, %dec_label_pc_10006d3d, %dec_label_pc_10006d83
  %stack_var_-12.0 = phi i32 [ 1, %dec_label_pc_10006d3d ], [ 1, %dec_label_pc_10006d46 ], [ 0, %dec_label_pc_10006d83 ], [ 1, %dec_label_pc_10006d69 ]
  store i32 %arg1, i32* @edx, align 4
  %v1_10006d90 = call i32 @RdRBW(i32 %arg1)
  %v1_10006d99 = trunc i32 %v1_10006d90 to i16
  %v2_10006d99 = call i32 @RBWFreqFromCode(i16 %v1_10006d99)
  %v3_10006dac = and i32 %v2_10006d99, 256
  %v4_10006dac = icmp eq i32 %v3_10006dac, 0
  %stack_var_-12.0. = select i1 %v4_10006dac, i32 %stack_var_-12.0, i32 0
  store i32 %arg1, i32* @eax, align 4
  %v3_10006dbd = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v7_10006dc5 = and i32 %v3_10006dbd, -65536
  %v8_10006dc5 = or i32 %v7_10006dc5, %stack_var_-12.0.
  br label %dec_label_pc_10006dc9

dec_label_pc_10006dc9:                            ; preds = %dec_label_pc_10006d35, %dec_label_pc_10006d89
  %storemerge = phi i32 [ %v12_10006d35, %dec_label_pc_10006d35 ], [ %v8_10006dc5, %dec_label_pc_10006d89 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10006d2e, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 (i16)* @DefltSetTimeVBW, { 2, 0, 1, 5, 6, 7, 8, 3, 4 }
  uselistorder i32 (i16)* @DefltSetTimeRBW, { 1, 0, 4, 5, 2, 3 }
  uselistorder i32 (i32)* @RdRBW, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_1000d563, { 2, 1, 0 }
  uselistorder i32 %arg1, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10006dc9, { 1, 0 }
  uselistorder label %dec_label_pc_10006d89, { 3, 0, 1, 2 }
}

define i32 @IsValidStep(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_10006dd2 = load i32, i32* @esi, align 4
  store i32 %v0_10006dd2, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10006dd7 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10006ddf = mul i32 %v1_10006dd7, 65536
  %v1_10006ddf.off = or i32 %v1_10006ddf, 65535
  %tmp = icmp ult i32 %v1_10006ddf.off, 131071
  br i1 %tmp, label %dec_label_pc_10006dec, label %dec_label_pc_10006de6

dec_label_pc_10006de6:                            ; preds = %entry
  %v2_10006de6 = or i32 %v1_10006dd7, 65535
  br label %dec_label_pc_10006e20

dec_label_pc_10006dec:                            ; preds = %entry
  %v1_10006df2 = add i32 %arg1, 72
  %v2_10006df2 = inttoptr i32 %v1_10006df2 to i16*
  %v3_10006df2 = load i16, i16* %v2_10006df2, align 2
  %v2_10006df7 = call i32 @GetRBWwide(i16 %v3_10006df2)
  %v3_10006df7 = sext i32 %v2_10006df7 to i64
  %v2_10006dff = ashr i32 %v2_10006df7, 31
  %v5_10006e05 = zext i32 %v2_10006dff to i64
  %v6_10006e05 = mul nuw i64 %v5_10006e05, 4294967296
  %v7_10006e05 = or i64 %v6_10006e05, %v3_10006df7
  %v9_10006e05 = sdiv i64 %v7_10006e05, 3
  %v10_10006e05 = trunc i64 %v9_10006e05 to i32
  %v11_10006e05 = srem i64 %v7_10006e05, 3
  %v12_10006e05 = trunc i64 %v11_10006e05 to i32
  store i32 %v12_10006e05, i32* @edx, align 4
  %v3_10006e12 = and i32 %v10_10006e05, 256
  %v4_10006e12 = icmp eq i32 %v3_10006e12, 0
  br i1 %v4_10006e12, label %dec_label_pc_10006e1c, label %dec_label_pc_10006e17

dec_label_pc_10006e17:                            ; preds = %dec_label_pc_10006dec
  %v12_10006e17 = and i32 %v10_10006e05, -65536
  br label %dec_label_pc_10006e20

dec_label_pc_10006e1c:                            ; preds = %dec_label_pc_10006dec
  %v1_10006e1c = and i32 %v10_10006e05, -65536
  %v2_10006e1c = or i32 %v1_10006e1c, 1
  br label %dec_label_pc_10006e20

dec_label_pc_10006e20:                            ; preds = %dec_label_pc_10006e17, %dec_label_pc_10006de6, %dec_label_pc_10006e1c
  %v0_10006e24 = phi i32 [ %v12_10006e17, %dec_label_pc_10006e17 ], [ %v2_10006de6, %dec_label_pc_10006de6 ], [ %v2_10006e1c, %dec_label_pc_10006e1c ]
  %v2_10006e20 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10006e20, i32* @esi, align 4
  ret i32 %v0_10006e24

; uselistorder directives
  uselistorder i32 %v1_10006dd7, { 1, 0 }
  uselistorder i64 3, { 1, 0, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 72, { 3, 4, 2, 14, 15, 16, 17, 1, 18, 19, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10006e20, { 2, 0, 1 }
}

define i32 @IsSweeping(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_10006e25 = load i32, i32* @ebp, align 4
  store i32 %v0_10006e25, i32* %stack_var_-4, align 4
  %v4_10006e25 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10006e25, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10006e2f = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10006e37 = mul i32 %v1_10006e2f, 65536
  %v1_10006e37.off = or i32 %v1_10006e37, 65535
  %tmp = icmp ult i32 %v1_10006e37.off, 131071
  br i1 %tmp, label %dec_label_pc_10006e43, label %dec_label_pc_10006e3e

dec_label_pc_10006e3e:                            ; preds = %entry
  %v12_10006e3e = and i32 %v1_10006e2f, -65536
  br label %dec_label_pc_10006e73

dec_label_pc_10006e43:                            ; preds = %entry
  %v1_10006e46 = add i32 %arg1, 4
  %v2_10006e46 = inttoptr i32 %v1_10006e46 to i16*
  %v3_10006e46 = load i16, i16* %v2_10006e46, align 2
  %v6_10006e46 = and i32 %v1_10006e2f, -65536
  %tmp8 = trunc i16 %v3_10006e46 to i8
  %v2_10006e52 = icmp sgt i8 %tmp8, -1
  br i1 %v2_10006e52, label %dec_label_pc_10006e6f, label %dec_label_pc_10006e5c

dec_label_pc_10006e5c:                            ; preds = %dec_label_pc_10006e43
  %v4_10006e4e = sext i16 %v3_10006e46 to i32
  %v1_10006e60 = zext i16 %v3_10006e46 to i32
  %v2_10006e60 = and i32 %v1_10006e60, 127
  %v9_10006e60 = and i32 %v4_10006e4e, -256
  %v10_10006e60 = or i32 %v2_10006e60, %v9_10006e60
  br label %dec_label_pc_10006e6f

dec_label_pc_10006e6f:                            ; preds = %dec_label_pc_10006e43, %dec_label_pc_10006e5c
  %storemerge2 = phi i32 [ %v10_10006e60, %dec_label_pc_10006e5c ], [ 0, %dec_label_pc_10006e43 ]
  %v8_10006e6f = or i32 %storemerge2, %v6_10006e46
  br label %dec_label_pc_10006e73

dec_label_pc_10006e73:                            ; preds = %dec_label_pc_10006e3e, %dec_label_pc_10006e6f
  %storemerge = phi i32 [ %v12_10006e3e, %dec_label_pc_10006e3e ], [ %v8_10006e6f, %dec_label_pc_10006e6f ]
  %v2_10006e75 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10006e75, i32* @ebp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i16 %v3_10006e46, { 0, 2, 1 }
  uselistorder i32 %v1_10006e2f, { 2, 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10006e73, { 1, 0 }
  uselistorder label %dec_label_pc_10006e6f, { 1, 0 }
}

define i32 @Recouple(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i16, align 2
  store i16 0, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10006e85 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006e85, i32* @eax, align 4
  %v1_10006e8d = mul i32 %v1_10006e85, 65536
  %v1_10006e8d.off = or i32 %v1_10006e8d, 65535
  %tmp = icmp ult i32 %v1_10006e8d.off, 131071
  br i1 %tmp, label %dec_label_pc_10006ea2, label %dec_label_pc_10006e94

dec_label_pc_10006e94:                            ; preds = %entry
  %v1_10006e98 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10006eca

dec_label_pc_10006ea2:                            ; preds = %entry
  %v1_10006ea5 = add i32 %arg1, 32
  %v2_10006ea5 = inttoptr i32 %v1_10006ea5 to i16*
  store i16 1, i16* %v2_10006ea5, align 2
  %v1_10006eae = add i32 %arg1, 34
  %v2_10006eae = inttoptr i32 %v1_10006eae to i16*
  store i16 1, i16* %v2_10006eae, align 2
  %v1_10006eb7 = add i32 %arg1, 74
  %v2_10006eb7 = inttoptr i32 %v1_10006eb7 to i16*
  store i16 1, i16* %v2_10006eb7, align 2
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10006ec0 = add i32 %arg1, 78
  %v2_10006ec0 = inttoptr i32 %v1_10006ec0 to i16*
  store i16 1, i16* %v2_10006ec0, align 2
  %v3_10006ec6 = load i16, i16* %stack_var_-8, align 2
  %v4_10006ec6 = sext i16 %v3_10006ec6 to i32
  %v6_10006ec6 = load i32, i32* %eax.global-to-local, align 4
  %v7_10006ec6 = and i32 %v6_10006ec6, -65536
  %v8_10006ec6 = or i32 %v7_10006ec6, %v4_10006ec6
  br label %dec_label_pc_10006eca

dec_label_pc_10006eca:                            ; preds = %dec_label_pc_10006e94, %dec_label_pc_10006ea2
  %storemerge = phi i32 [ %v8_10006ec6, %dec_label_pc_10006ea2 ], [ %v1_10006e98, %dec_label_pc_10006e94 ]
  %v0_10006ecd = phi i32 [ %v8_10006ec6, %dec_label_pc_10006ea2 ], [ %v1_10006e98, %dec_label_pc_10006e94 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_10006ecd

; uselistorder directives
  uselistorder i16* %stack_var_-8, { 1, 0 }
  uselistorder i32 78, { 0, 1, 2, 3, 4, 5, 11, 6, 7, 8, 9, 10 }
  uselistorder i32 74, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8 }
  uselistorder i32 %arg1, { 7, 6, 5, 4, 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_10006eca, { 1, 0 }
}

define i32 @SetPortNum(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10006edc = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006edc, i32* @eax, align 4
  %v1_10006ee4 = mul i32 %v1_10006edc, 65536
  %v1_10006ee4.off = or i32 %v1_10006ee4, 65535
  %tmp = icmp ult i32 %v1_10006ee4.off, 131071
  br i1 %tmp, label %dec_label_pc_10006efc, label %dec_label_pc_10006eeb

dec_label_pc_10006eeb:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v1_10006eef = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10006fa6

dec_label_pc_10006efc:                            ; preds = %entry
  %v4_10006efc = sext i16 %arg2 to i32
  %v1_10006eff3 = zext i16 %arg2 to i32
  store i32 %v1_10006eff3, i32* %eax.global-to-local, align 4
  %v3_10006f04 = icmp ult i16 %arg2, 256
  br i1 %v3_10006f04, label %dec_label_pc_10006f4c, label %dec_label_pc_10006f0b

dec_label_pc_10006f0b:                            ; preds = %dec_label_pc_10006efc
  %tmp14 = icmp ult i16 %arg2, 369
  %tmp15 = icmp eq i1 %tmp14, false
  br i1 %tmp15, label %dec_label_pc_10006f4c, label %dec_label_pc_10006f1c

dec_label_pc_10006f1c:                            ; preds = %dec_label_pc_10006f0b
  %v1_10006f25 = and i32 %v4_10006efc, 15
  %v2_10006f25 = icmp eq i32 %v1_10006f25, 0
  store i32 %v1_10006f25, i32* @edx, align 4
  %v1_10006f34 = icmp eq i1 %v2_10006f25, false
  br i1 %v1_10006f34, label %dec_label_pc_10006f4c, label %dec_label_pc_10006f36

dec_label_pc_10006f36:                            ; preds = %dec_label_pc_10006f1c
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_10006f3d = add i32 %arg1, 472
  %v4_10006f3d = inttoptr i32 %v3_10006f3d to i16*
  store i16 %arg2, i16* %v4_10006f3d, align 2
  br label %dec_label_pc_10006fa2

dec_label_pc_10006f4c:                            ; preds = %dec_label_pc_10006f1c, %dec_label_pc_10006f0b, %dec_label_pc_10006efc
  store i32 %v1_10006eff3, i32* @edx, align 4
  %v3_10006f55 = icmp ult i16 %arg2, 768
  br i1 %v3_10006f55, label %dec_label_pc_10006f9c, label %dec_label_pc_10006f5d

dec_label_pc_10006f5d:                            ; preds = %dec_label_pc_10006f4c
  store i32 %v1_10006eff3, i32* %eax.global-to-local, align 4
  %tmp16 = icmp ult i16 %arg2, 881
  %tmp17 = icmp eq i1 %tmp16, false
  br i1 %tmp17, label %dec_label_pc_10006f9c, label %dec_label_pc_10006f6c

dec_label_pc_10006f6c:                            ; preds = %dec_label_pc_10006f5d
  %v1_10006f75 = and i32 %v4_10006efc, 15
  %v2_10006f75 = icmp eq i32 %v1_10006f75, 0
  %v1_10006f84 = icmp eq i1 %v2_10006f75, false
  br i1 %v1_10006f84, label %dec_label_pc_10006f9c, label %dec_label_pc_10006f86

dec_label_pc_10006f86:                            ; preds = %dec_label_pc_10006f6c
  store i32 %arg1, i32* @edx, align 4
  store i32 %v4_10006efc, i32* %eax.global-to-local, align 4
  %v3_10006f8d = add i32 %arg1, 472
  %v4_10006f8d = inttoptr i32 %v3_10006f8d to i16*
  store i16 %arg2, i16* %v4_10006f8d, align 2
  br label %dec_label_pc_10006fa2

dec_label_pc_10006f9c:                            ; preds = %dec_label_pc_10006f6c, %dec_label_pc_10006f5d, %dec_label_pc_10006f4c
  br label %dec_label_pc_10006fa2

dec_label_pc_10006fa2:                            ; preds = %dec_label_pc_10006f86, %dec_label_pc_10006f36, %dec_label_pc_10006f9c
  %v3_10006fa2 = phi i32 [ 0, %dec_label_pc_10006f86 ], [ 0, %dec_label_pc_10006f36 ], [ -3, %dec_label_pc_10006f9c ]
  %v6_10006fa2 = load i32, i32* %eax.global-to-local, align 4
  %v7_10006fa2 = and i32 %v6_10006fa2, -65536
  %v8_10006fa2 = or i32 %v7_10006fa2, %v3_10006fa2
  br label %dec_label_pc_10006fa6

dec_label_pc_10006fa6:                            ; preds = %dec_label_pc_10006eeb, %dec_label_pc_10006fa2
  %storemerge = phi i32 [ %v8_10006fa2, %dec_label_pc_10006fa2 ], [ %v1_10006eef, %dec_label_pc_10006eeb ]
  %v0_10006fa9 = phi i32 [ %v8_10006fa2, %dec_label_pc_10006fa2 ], [ %v1_10006eef, %dec_label_pc_10006eeb ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %v0_10006fa9

; uselistorder directives
  uselistorder i32 %v4_10006efc, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 4, 1, 2, 3, 5 }
  uselistorder i16 %arg2, { 2, 0, 3, 4, 1, 7, 6, 5 }
  uselistorder i32 %arg1, { 0, 7, 1, 6, 5, 4, 3, 2 }
  uselistorder label %dec_label_pc_10006fa6, { 1, 0 }
  uselistorder label %dec_label_pc_10006fa2, { 2, 0, 1 }
}

define i32 @SetLogAddr(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10006fb1 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10006fb1, i32* @eax, align 4
  %v1_10006fb9 = mul i32 %v1_10006fb1, 65536
  %v1_10006fb9.off = or i32 %v1_10006fb9, 65535
  %tmp = icmp ult i32 %v1_10006fb9.off, 131071
  br i1 %tmp, label %dec_label_pc_10006fce, label %dec_label_pc_10006fc0

dec_label_pc_10006fc0:                            ; preds = %entry
  %v1_10006fc4 = call i32 @GetFuncStatusCode(i32 %arg1)
  store i32 %v1_10006fc4, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10006ffa

dec_label_pc_10006fce:                            ; preds = %entry
  %v4_10006fce = sext i16 %arg2 to i32
  store i32 %v4_10006fce, i32* %eax.global-to-local, align 4
  %v12_10006fd2 = icmp slt i16 %arg2, 1
  br i1 %v12_10006fd2, label %dec_label_pc_10006fe3, label %dec_label_pc_10006fd7

dec_label_pc_10006fd7:                            ; preds = %dec_label_pc_10006fce
  %v8_10006fe1 = icmp sgt i16 %arg2, 254
  br i1 %v8_10006fe1, label %dec_label_pc_10006fe3, label %dec_label_pc_10006fe9

dec_label_pc_10006fe3:                            ; preds = %dec_label_pc_10006fd7, %dec_label_pc_10006fce
  %v1_10006fe3 = and i32 %v4_10006fce, -65536
  %v2_10006fe3 = or i32 %v1_10006fe3, 65533
  store i32 %v2_10006fe3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10006ffa

dec_label_pc_10006fe9:                            ; preds = %dec_label_pc_10006fd7
  %v4_10006fec = zext i16 %arg2 to i32
  %v6_10006fec = and i32 %v4_10006fce, -65536
  %v7_10006fec = or i32 %v6_10006fec, %v4_10006fec
  store i32 %v7_10006fec, i32* %eax.global-to-local, align 4
  %v3_10006ff0 = add i32 %arg1, 476
  %v4_10006ff0 = inttoptr i32 %v3_10006ff0 to i16*
  store i16 %arg2, i16* %v4_10006ff0, align 2
  %v11_10006ff7 = load i32, i32* %eax.global-to-local, align 4
  %v12_10006ff7 = and i32 %v11_10006ff7, -65536
  store i32 %v12_10006ff7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10006ffa

dec_label_pc_10006ffa:                            ; preds = %dec_label_pc_10006fe3, %dec_label_pc_10006fc0, %dec_label_pc_10006fe9
  %v0_10006ffb = phi i32 [ %v2_10006fe3, %dec_label_pc_10006fe3 ], [ %v1_10006fc4, %dec_label_pc_10006fc0 ], [ %v12_10006ff7, %dec_label_pc_10006fe9 ]
  ret i32 %v0_10006ffb

; uselistorder directives
  uselistorder i32 %v4_10006fce, { 1, 0, 2 }
  uselistorder i16 %arg2, { 4, 3, 0, 2, 1 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_10006ffa, { 2, 0, 1 }
}

define i32 @RdPortNum(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10007003 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10007003, i32* @eax, align 4
  %v1_1000700b = mul i32 %v1_10007003, 65536
  %v1_1000700b.off = or i32 %v1_1000700b, 65535
  %tmp = icmp ult i32 %v1_1000700b.off, 131071
  br i1 %tmp, label %dec_label_pc_10007018, label %dec_label_pc_10007012

dec_label_pc_10007012:                            ; preds = %entry
  %v2_10007012 = or i32 %v1_10007003, 65535
  br label %dec_label_pc_10007030

dec_label_pc_10007018:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000701e = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10007029 = add i32 %arg1, 472
  %v2_10007029 = inttoptr i32 %v1_10007029 to i16*
  %v3_10007029 = load i16, i16* %v2_10007029, align 2
  %v4_10007029 = zext i16 %v3_10007029 to i32
  %v6_10007029 = and i32 %arg1, -65536
  %v7_10007029 = or i32 %v4_10007029, %v6_10007029
  br label %dec_label_pc_10007030

dec_label_pc_10007030:                            ; preds = %dec_label_pc_10007012, %dec_label_pc_10007018
  %storemerge = phi i32 [ %v2_10007012, %dec_label_pc_10007012 ], [ %v7_10007029, %dec_label_pc_10007018 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10007003, { 1, 0, 2 }
  uselistorder i32 472, { 0, 2, 3, 1 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10007030, { 1, 0 }
}

define i32 @RdLogAddr(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10007039 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10007039, i32* @eax, align 4
  %v1_10007041 = mul i32 %v1_10007039, 65536
  %v1_10007041.off = or i32 %v1_10007041, 65535
  %tmp = icmp ult i32 %v1_10007041.off, 131071
  br i1 %tmp, label %dec_label_pc_1000704e, label %dec_label_pc_10007048

dec_label_pc_10007048:                            ; preds = %entry
  %v2_10007048 = or i32 %v1_10007039, 65535
  br label %dec_label_pc_10007066

dec_label_pc_1000704e:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10007054 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_1000705f = add i32 %arg1, 476
  %v2_1000705f = inttoptr i32 %v1_1000705f to i16*
  %v3_1000705f = load i16, i16* %v2_1000705f, align 2
  %v4_1000705f = zext i16 %v3_1000705f to i32
  %v6_1000705f = and i32 %arg1, -65536
  %v7_1000705f = or i32 %v4_1000705f, %v6_1000705f
  br label %dec_label_pc_10007066

dec_label_pc_10007066:                            ; preds = %dec_label_pc_10007048, %dec_label_pc_1000704e
  %storemerge = phi i32 [ %v2_10007048, %dec_label_pc_10007048 ], [ %v7_1000705f, %dec_label_pc_1000704e ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10007039, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10007066, { 1, 0 }
}

define i32 @SetIrqNum(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10007076 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10007076, i32* @eax, align 4
  %v1_1000707e = mul i32 %v1_10007076, 65536
  %v1_1000707e.off = or i32 %v1_1000707e, 65535
  %tmp = icmp ult i32 %v1_1000707e.off, 131071
  br i1 %tmp, label %dec_label_pc_10007093, label %dec_label_pc_10007085

dec_label_pc_10007085:                            ; preds = %entry
  %v1_10007089 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100070f7

dec_label_pc_10007093:                            ; preds = %entry
  %v4_10007093 = sext i16 %arg2 to i32
  %v2_10007096 = and i32 %v4_10007093, 65535
  %v9_1000709b = icmp eq i32 %v2_10007096, 5
  br i1 %v9_1000709b, label %dec_label_pc_100070c9, label %dec_label_pc_100070a0

dec_label_pc_100070a0:                            ; preds = %dec_label_pc_10007093
  %v9_100070a9 = icmp eq i32 %v2_10007096, 10
  br i1 %v9_100070a9, label %dec_label_pc_100070c9, label %dec_label_pc_100070ae

dec_label_pc_100070ae:                            ; preds = %dec_label_pc_100070a0
  store i32 %v2_10007096, i32* @edx, align 4
  %v9_100070b7 = icmp eq i32 %v2_10007096, 11
  br i1 %v9_100070b7, label %dec_label_pc_100070c9, label %dec_label_pc_100070bc

dec_label_pc_100070bc:                            ; preds = %dec_label_pc_100070ae
  %v9_100070c4 = icmp eq i32 %v2_10007096, 12
  %v1_100070c7 = icmp eq i1 %v9_100070c4, false
  br i1 %v1_100070c7, label %dec_label_pc_100070ed, label %dec_label_pc_100070c9

dec_label_pc_100070c9:                            ; preds = %dec_label_pc_100070bc, %dec_label_pc_100070ae, %dec_label_pc_100070a0, %dec_label_pc_10007093
  %v6_100070cc = load i32, i32* @edx, align 4
  %v7_100070cc = and i32 %v6_100070cc, -65536
  %v8_100070cc = or i32 %v7_100070cc, %v4_10007093
  store i32 %v8_100070cc, i32* @edx, align 4
  %v3_100070d0 = add i32 %arg1, 474
  %v4_100070d0 = inttoptr i32 %v3_100070d0 to i16*
  store i16 %arg2, i16* %v4_100070d0, align 2
  store i32 %arg1, i32* @eax, align 4
  %v3_100070e3 = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  br label %dec_label_pc_100070f3

dec_label_pc_100070ed:                            ; preds = %dec_label_pc_100070bc
  br label %dec_label_pc_100070f3

dec_label_pc_100070f3:                            ; preds = %dec_label_pc_100070c9, %dec_label_pc_100070ed
  %v6_100070f3 = phi i32 [ %v3_100070e3, %dec_label_pc_100070c9 ], [ %v2_10007096, %dec_label_pc_100070ed ]
  %v3_100070f3 = phi i32 [ 0, %dec_label_pc_100070c9 ], [ -3, %dec_label_pc_100070ed ]
  %v7_100070f3 = and i32 %v6_100070f3, -65536
  %v8_100070f3 = or i32 %v7_100070f3, %v3_100070f3
  br label %dec_label_pc_100070f7

dec_label_pc_100070f7:                            ; preds = %dec_label_pc_10007085, %dec_label_pc_100070f3
  %v0_100070fa = phi i32 [ %v1_10007089, %dec_label_pc_10007085 ], [ %v8_100070f3, %dec_label_pc_100070f3 ]
  ret i32 %v0_100070fa

; uselistorder directives
  uselistorder i32 %v2_10007096, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %arg1, { 5, 4, 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_100070f7, { 1, 0 }
  uselistorder label %dec_label_pc_100070f3, { 1, 0 }
}

define i32 @RdIrqNum(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10007102 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10007102, i32* @eax, align 4
  %v1_1000710a = mul i32 %v1_10007102, 65536
  %v1_1000710a.off = or i32 %v1_1000710a, 65535
  %tmp = icmp ult i32 %v1_1000710a.off, 131071
  br i1 %tmp, label %dec_label_pc_10007116, label %dec_label_pc_10007111

dec_label_pc_10007111:                            ; preds = %entry
  %v12_10007111 = and i32 %v1_10007102, -65536
  br label %dec_label_pc_1000712e

dec_label_pc_10007116:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000711c = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  %v1_10007127 = add i32 %arg1, 474
  %v2_10007127 = inttoptr i32 %v1_10007127 to i16*
  %v3_10007127 = load i16, i16* %v2_10007127, align 2
  %v4_10007127 = zext i16 %v3_10007127 to i32
  %v6_10007127 = and i32 %arg1, -65536
  %v7_10007127 = or i32 %v4_10007127, %v6_10007127
  br label %dec_label_pc_1000712e

dec_label_pc_1000712e:                            ; preds = %dec_label_pc_10007111, %dec_label_pc_10007116
  %storemerge = phi i32 [ %v12_10007111, %dec_label_pc_10007111 ], [ %v7_10007127, %dec_label_pc_10007116 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10007102, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000712e, { 1, 0 }
}

define i32 @function_10007130(i32 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_10007130:
  store i32 %arg1, i32* @eax, align 4
  %v1_10007140 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10007140, i32* @eax, align 4
  %v1_10007148 = mul i32 %v1_10007140, 65536
  %v2_10007148 = sdiv i32 %v1_10007148, 65536
  store i32 %v2_10007148, i32* @ecx, align 4
  %v1_10007148.off = or i32 %v1_10007148, 65535
  %tmp = icmp ult i32 %v1_10007148.off, 131071
  br i1 %tmp, label %dec_label_pc_10007157, label %dec_label_pc_1000714f

dec_label_pc_1000714f:                            ; preds = %dec_label_pc_10007130
  br label %dec_label_pc_100071ea

dec_label_pc_10007157:                            ; preds = %dec_label_pc_10007130
  store i32 %arg1, i32* @edx, align 4
  %v3_1000715d = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  store i32 %v3_1000715d, i32* @eax, align 4
  %v4_10007165 = trunc i64 %arg2 to i32
  %v6_10007165 = icmp slt i32 %v4_10007165, 0
  %v2_10007169 = icmp eq i1 %v6_10007165, false
  br i1 %v2_10007169, label %dec_label_pc_1000716b, label %dec_label_pc_1000717c

dec_label_pc_1000716b:                            ; preds = %dec_label_pc_10007157
  %v1_1000716f = call i32 @RdNumSwpPts(i32 %arg1)
  store i32 %v1_1000716f, i32* @eax, align 4
  %v9_1000717a = icmp sgt i32 %v4_10007165, %v1_1000716f
  br i1 %v9_1000717a, label %dec_label_pc_1000717c, label %dec_label_pc_10007193

dec_label_pc_1000717c:                            ; preds = %dec_label_pc_1000716b, %dec_label_pc_10007157
  %v3_10007182 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -3)
  br label %dec_label_pc_100071ea

dec_label_pc_10007193:                            ; preds = %dec_label_pc_1000716b
  %v1_10007197 = call i32 @function_10004fcf(i32 %arg1)
  %sext = mul i64 %arg2, 4294967296
  %v2_100071a2 = sdiv i64 %sext, 4294967296
  %v3_100071a2 = sext i32 %v1_10007197 to i64
  %v4_100071a2 = mul nsw i64 %v3_100071a2, %v2_100071a2
  %v5_100071a2 = trunc i64 %v4_100071a2 to i32
  %v1_100071a9 = call i32 @function_100085f3(i32 %arg1)
  %v2_100071b1 = add i32 %v5_100071a2, %v1_100071a9
  %v2_100071c3 = sext i32 %v2_100071b1 to i64
  %v3_100071c3 = bitcast i64 %v2_100071c3 to double
  %v4_100071c3 = call i32 @FreqInRange(i32 %arg1, double %v3_100071c3)
  %v1_100071cb = mul i32 %v4_100071c3, 65536
  %v2_100071cb = sdiv i32 %v1_100071cb, 65536
  store i32 %v2_100071cb, i32* @edx, align 4
  %v1_100071cb.off = or i32 %v1_100071cb, 65535
  %tmp10 = icmp ult i32 %v1_100071cb.off, 131071
  %v1_100071d0 = icmp eq i1 %tmp10, false
  br i1 %v1_100071d0, label %dec_label_pc_100071ea, label %dec_label_pc_100071d2

dec_label_pc_100071d2:                            ; preds = %dec_label_pc_10007193
  store i32 %arg1, i32* @eax, align 4
  %v3_100071d8 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -1)
  br label %dec_label_pc_100071ea

dec_label_pc_100071ea:                            ; preds = %dec_label_pc_10007193, %dec_label_pc_100071d2, %dec_label_pc_1000717c, %dec_label_pc_1000714f
  %storemerge = phi i32 [ -1, %dec_label_pc_1000714f ], [ -1, %dec_label_pc_1000717c ], [ -1, %dec_label_pc_100071d2 ], [ %v2_100071b1, %dec_label_pc_10007193 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_100071b1, { 1, 0 }
  uselistorder i32 %arg1, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100071ea, { 1, 0, 2, 3 }
}

define i32 @function_100071ef(i32 %arg1, i32 %arg2, i16 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_100071ef:
  %stack_var_-8 = alloca i32, align 4
  store i32 -1, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @eax, align 4
  %v3_10007200 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  store i32 %v3_10007200, i32* @eax, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_1000720c = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000720c, i32* @eax, align 4
  %v1_10007214 = mul i32 %v1_1000720c, 65536
  %v2_10007214 = sdiv i32 %v1_10007214, 65536
  store i32 %v2_10007214, i32* @edx, align 4
  %v1_10007214.off = or i32 %v1_10007214, 65535
  %tmp = icmp ult i32 %v1_10007214.off, 131071
  br i1 %tmp, label %dec_label_pc_10007223, label %dec_label_pc_1000721b

dec_label_pc_1000721b:                            ; preds = %dec_label_pc_100071ef
  br label %dec_label_pc_100072bd

dec_label_pc_10007223:                            ; preds = %dec_label_pc_100071ef
  %v5_10007223 = icmp slt i32 %arg2, 0
  %v2_10007227 = icmp eq i1 %v5_10007223, false
  br i1 %v2_10007227, label %dec_label_pc_10007229, label %dec_label_pc_1000723a

dec_label_pc_10007229:                            ; preds = %dec_label_pc_10007223
  %v1_1000722d = call i32 @RdNumSwpPts(i32 %arg1)
  store i32 %v1_1000722d, i32* @eax, align 4
  %v7_10007238 = icmp slt i32 %v1_1000722d, %arg2
  br i1 %v7_10007238, label %dec_label_pc_1000723a, label %dec_label_pc_10007251

dec_label_pc_1000723a:                            ; preds = %dec_label_pc_10007229, %dec_label_pc_10007223
  store i32 -1, i32* %stack_var_-8, align 4
  %v3_10007247 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -1)
  br label %dec_label_pc_100072ba

dec_label_pc_10007251:                            ; preds = %dec_label_pc_10007229
  %v9_10007255 = icmp eq i16 %arg3, 2
  %v1_10007258 = icmp eq i1 %v9_10007255, false
  br i1 %v1_10007258, label %dec_label_pc_1000726e, label %dec_label_pc_1000725a

dec_label_pc_1000725a:                            ; preds = %dec_label_pc_10007251
  %v4_1000725a = icmp eq i32 %arg4, 0
  br i1 %v4_1000725a, label %dec_label_pc_1000726e, label %dec_label_pc_10007260

dec_label_pc_10007260:                            ; preds = %dec_label_pc_1000725a
  %v2_10007266 = mul i32 %arg2, 4
  %v3_10007266 = add i32 %v2_10007266, %arg4
  %v4_10007266 = inttoptr i32 %v3_10007266 to i32*
  %v5_10007266 = load i32, i32* %v4_10007266, align 4
  store i32 %v5_10007266, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10007289

dec_label_pc_1000726e:                            ; preds = %dec_label_pc_1000725a, %dec_label_pc_10007251
  %v9_10007272 = icmp eq i16 %arg3, 4
  %v1_10007275 = icmp eq i1 %v9_10007272, false
  br i1 %v1_10007275, label %dec_label_pc_10007289, label %dec_label_pc_10007277

dec_label_pc_10007277:                            ; preds = %dec_label_pc_1000726e
  %v4_10007277 = icmp eq i32 %arg5, 0
  br i1 %v4_10007277, label %dec_label_pc_10007289, label %dec_label_pc_1000727d

dec_label_pc_1000727d:                            ; preds = %dec_label_pc_10007277
  %v2_10007283 = mul i32 %arg2, 4
  %v3_10007283 = add i32 %v2_10007283, %arg5
  %v4_10007283 = inttoptr i32 %v3_10007283 to i32*
  %v5_10007283 = load i32, i32* %v4_10007283, align 4
  store i32 %v5_10007283, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10007289

dec_label_pc_10007289:                            ; preds = %dec_label_pc_10007277, %dec_label_pc_1000726e, %dec_label_pc_10007260, %dec_label_pc_1000727d
  %v3_10007289 = load i32, i32* %stack_var_-8, align 4
  %v2_10007296 = sext i32 %v3_10007289 to i64
  %v3_10007296 = bitcast i64 %v2_10007296 to double
  %v4_10007296 = call i32 @FreqInRange(i32 %arg1, double %v3_10007296)
  %v1_1000729e = mul i32 %v4_10007296, 65536
  %v2_1000729e = sdiv i32 %v1_1000729e, 65536
  store i32 %v2_1000729e, i32* @edx, align 4
  %v1_1000729e.off = or i32 %v1_1000729e, 65535
  %tmp11 = icmp ult i32 %v1_1000729e.off, 131071
  %v1_100072a3 = icmp eq i1 %tmp11, false
  br i1 %v1_100072a3, label %dec_label_pc_100072ba, label %dec_label_pc_100072a5

dec_label_pc_100072a5:                            ; preds = %dec_label_pc_10007289
  store i32 %arg1, i32* @eax, align 4
  %v3_100072ab = call i32 @SetFuncStatusCode(i32 %arg1, i16 -1)
  store i32 -1, i32* %stack_var_-8, align 4
  br label %dec_label_pc_100072ba

dec_label_pc_100072ba:                            ; preds = %dec_label_pc_10007289, %dec_label_pc_1000723a, %dec_label_pc_100072a5
  %v3_100072ba = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_100072bd

dec_label_pc_100072bd:                            ; preds = %dec_label_pc_1000721b, %dec_label_pc_100072ba
  %storemerge = phi i32 [ -1, %dec_label_pc_1000721b ], [ %v3_100072ba, %dec_label_pc_100072ba ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg2, { 3, 2, 0, 1 }
  uselistorder i32 %arg1, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100072bd, { 1, 0 }
  uselistorder label %dec_label_pc_100072ba, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10007289, { 3, 0, 1, 2 }
}

define i32 @FindHighPeak(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_100072c7 = icmp eq i32 %arg1, 0
  br i1 %v4_100072c7, label %dec_label_pc_100072d3, label %dec_label_pc_100072cd

dec_label_pc_100072cd:                            ; preds = %entry
  %tmp23 = icmp slt i32 %arg2, 1
  %tmp24 = icmp eq i1 %tmp23, false
  br i1 %tmp24, label %dec_label_pc_100072d8, label %dec_label_pc_100072d3

dec_label_pc_100072d3:                            ; preds = %dec_label_pc_100072cd, %entry
  br label %dec_label_pc_10007332

dec_label_pc_100072d8:                            ; preds = %dec_label_pc_100072cd
  %v4_100072e5 = inttoptr i32 %arg1 to i16*
  %v5_100072e5 = load i16, i16* %v4_100072e5, align 2
  %v5_1000730512 = icmp sgt i32 %arg2, 1
  br i1 %v5_1000730512, label %dec_label_pc_10007307, label %dec_label_pc_10007332

dec_label_pc_10007307:                            ; preds = %dec_label_pc_100072d8, %dec_label_pc_1000732d
  %v3_10007311 = phi i16 [ %v3_1000731115, %dec_label_pc_1000732d ], [ %v5_100072e5, %dec_label_pc_100072d8 ]
  %storemerge314 = phi i32 [ %v1_100072f9, %dec_label_pc_1000732d ], [ 1, %dec_label_pc_100072d8 ]
  %stack_var_-12.013 = phi i32 [ %stack_var_-12.1, %dec_label_pc_1000732d ], [ 0, %dec_label_pc_100072d8 ]
  %v2_1000730d = mul nuw i32 %storemerge314, 2
  %v3_1000730d = add i32 %v2_1000730d, %arg1
  %v4_1000730d = inttoptr i32 %v3_1000730d to i16*
  %v5_1000730d = load i16, i16* %v4_1000730d, align 2
  %v5_10007317 = icmp slt i16 %v5_1000730d, %v3_10007311
  br i1 %v5_10007317, label %dec_label_pc_1000732d, label %dec_label_pc_10007319

dec_label_pc_10007319:                            ; preds = %dec_label_pc_10007307
  %v5_1000731f = load i16, i16* %v4_1000730d, align 2
  br label %dec_label_pc_1000732d

dec_label_pc_1000732d:                            ; preds = %dec_label_pc_10007307, %dec_label_pc_10007319
  %v3_1000731115 = phi i16 [ %v3_10007311, %dec_label_pc_10007307 ], [ %v5_1000731f, %dec_label_pc_10007319 ]
  %stack_var_-12.1 = phi i32 [ %stack_var_-12.013, %dec_label_pc_10007307 ], [ %storemerge314, %dec_label_pc_10007319 ]
  %v1_100072f9 = add nuw nsw i32 %storemerge314, 1
  %exitcond = icmp eq i32 %v1_100072f9, %arg2
  br i1 %exitcond, label %dec_label_pc_100072ff.dec_label_pc_10007332.loopexit_crit_edge, label %dec_label_pc_10007307

dec_label_pc_100072ff.dec_label_pc_10007332.loopexit_crit_edge: ; preds = %dec_label_pc_1000732d
  br label %dec_label_pc_10007332

dec_label_pc_10007332:                            ; preds = %dec_label_pc_100072d8, %dec_label_pc_100072ff.dec_label_pc_10007332.loopexit_crit_edge, %dec_label_pc_100072d3
  %storemerge = phi i32 [ -1, %dec_label_pc_100072d3 ], [ %stack_var_-12.1, %dec_label_pc_100072ff.dec_label_pc_10007332.loopexit_crit_edge ], [ 0, %dec_label_pc_100072d8 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_100072f9, { 1, 0 }
  uselistorder i32 %storemerge314, { 1, 2, 0 }
  uselistorder i16 %v3_10007311, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10007332, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1000732d, { 1, 0 }
  uselistorder label %dec_label_pc_10007307, { 1, 0 }
}

define i32 @FindNextPeak(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg5 to i16
  %tmp45 = trunc i32 %arg4 to i16
  %v1_10007346 = add i32 %arg2, -1
  %v5_1000734c = icmp eq i16* %arg1, null
  br i1 %v5_1000734c, label %dec_label_pc_10007366, label %dec_label_pc_10007352

dec_label_pc_10007352:                            ; preds = %entry
  %tmp56 = icmp slt i32 %arg2, 1
  br i1 %tmp56, label %dec_label_pc_10007366, label %dec_label_pc_10007358

dec_label_pc_10007358:                            ; preds = %dec_label_pc_10007352
  %v5_10007358 = icmp slt i32 %arg3, 0
  %v2_1000735c = icmp eq i1 %v5_10007358, false
  br i1 %v2_1000735c, label %dec_label_pc_1000735e, label %dec_label_pc_10007366

dec_label_pc_1000735e:                            ; preds = %dec_label_pc_10007358
  %v5_10007364 = icmp slt i32 %arg3, %arg2
  br i1 %v5_10007364, label %dec_label_pc_1000736e, label %dec_label_pc_10007366

dec_label_pc_10007366:                            ; preds = %dec_label_pc_10007358, %dec_label_pc_1000735e, %dec_label_pc_10007352, %entry
  br label %dec_label_pc_100074b3

dec_label_pc_1000736e:                            ; preds = %dec_label_pc_1000735e
  %v2_10007372 = icmp eq i16 %tmp45, 0
  %v1_10007374 = icmp eq i1 %v2_10007372, false
  br i1 %v1_10007374, label %dec_label_pc_1000740f, label %dec_label_pc_1000737a

dec_label_pc_1000737a:                            ; preds = %dec_label_pc_1000736e
  %v1_1000737d = add i32 %arg3, -1
  %tmp57 = icmp slt i32 %v1_1000737d, 1
  %.pre38 = ptrtoint i16* %arg1 to i32
  %.pre39 = mul i32 %arg5, 65536
  %.pre40 = sdiv i32 %.pre39, 65536
  br i1 %tmp57, label %dec_label_pc_100073de, label %dec_label_pc_10007394.lr.ph

dec_label_pc_10007394.lr.ph:                      ; preds = %dec_label_pc_1000737a
  %v3_100073b8 = add i32 %.pre38, -2
  %v3_100073cb = add i32 %.pre38, 2
  br label %dec_label_pc_10007394

dec_label_pc_10007394:                            ; preds = %dec_label_pc_10007394.lr.ph, %dec_label_pc_100073dc
  %storemerge25 = phi i32 [ %v1_1000737d, %dec_label_pc_10007394.lr.ph ], [ %v1_10007388, %dec_label_pc_100073dc ]
  %v2_1000739a = mul i32 %storemerge25, 2
  %v3_1000739a = add i32 %v2_1000739a, %.pre38
  %v4_1000739a = inttoptr i32 %v3_1000739a to i16*
  %v5_1000739a = load i16, i16* %v4_1000739a, align 2
  %v7_100073ac = icmp slt i16 %v5_1000739a, %tmp
  br i1 %v7_100073ac, label %dec_label_pc_100073dc, label %dec_label_pc_100073ae

dec_label_pc_100073ae:                            ; preds = %dec_label_pc_10007394
  %v4_100073b8 = add i32 %v3_100073b8, %v2_1000739a
  %v5_100073b8 = inttoptr i32 %v4_100073b8 to i16*
  %v6_100073b8 = load i16, i16* %v5_100073b8, align 2
  %v5_100073bf = icmp slt i16 %v5_1000739a, %v6_100073b8
  br i1 %v5_100073bf, label %dec_label_pc_100073dc, label %dec_label_pc_100073c1

dec_label_pc_100073c1:                            ; preds = %dec_label_pc_100073ae
  %v4_100073cb = add i32 %v3_100073cb, %v2_1000739a
  %v5_100073cb = inttoptr i32 %v4_100073cb to i16*
  %v6_100073cb = load i16, i16* %v5_100073cb, align 2
  %v5_100073d2 = icmp slt i16 %v5_1000739a, %v6_100073cb
  br i1 %v5_100073d2, label %dec_label_pc_100073dc, label %dec_label_pc_100073d4

dec_label_pc_100073d4:                            ; preds = %dec_label_pc_100073c1
  br label %dec_label_pc_100074b3

dec_label_pc_100073dc:                            ; preds = %dec_label_pc_100073c1, %dec_label_pc_100073ae, %dec_label_pc_10007394
  %v1_10007388 = add i32 %storemerge25, -1
  %tmp58 = icmp slt i32 %v1_10007388, 1
  br i1 %tmp58, label %dec_label_pc_1000738e.dec_label_pc_100073de_crit_edge, label %dec_label_pc_10007394

dec_label_pc_1000738e.dec_label_pc_100073de_crit_edge: ; preds = %dec_label_pc_100073dc
  br label %dec_label_pc_100073de

dec_label_pc_100073de:                            ; preds = %dec_label_pc_1000737a, %dec_label_pc_1000738e.dec_label_pc_100073de_crit_edge
  %v2_100073e1 = load i16, i16* %arg1, align 2
  %v4_100073e8 = sext i16 %v2_100073e1 to i32
  %v2_100073f0 = sub nsw i32 %v4_100073e8, %.pre40
  %v8_100073f02 = xor i16 %v2_100073e1, %tmp
  %v8_100073f0 = sext i16 %v8_100073f02 to i32
  %v9_100073f0 = xor i32 %v2_100073f0, %v4_100073e8
  %v10_100073f0 = and i32 %v9_100073f0, %v8_100073f0
  %v11_100073f0 = icmp slt i32 %v10_100073f0, 0
  %v12_100073f0 = icmp eq i32 %v2_100073f0, 0
  %v13_100073f0 = icmp slt i32 %v2_100073f0, 0
  %v3_100073f2 = icmp ne i1 %v13_100073f0, %v11_100073f0
  %v4_100073f2 = or i1 %v12_100073f0, %v3_100073f2
  br i1 %v4_100073f2, label %dec_label_pc_100074b0, label %dec_label_pc_100073f4

dec_label_pc_100073f4:                            ; preds = %dec_label_pc_100073de
  %v1_100073fb = add i32 %.pre38, 2
  %v2_100073fb = inttoptr i32 %v1_100073fb to i16*
  %v3_100073fb = load i16, i16* %v2_100073fb, align 2
  %v4_100073fb = sext i16 %v3_100073fb to i32
  %v2_100073ff = sub nsw i32 %v4_100073e8, %v4_100073fb
  %v8_100073ff42 = xor i16 %v3_100073fb, %v2_100073e1
  %v8_100073ff = sext i16 %v8_100073ff42 to i32
  %v9_100073ff = xor i32 %v2_100073ff, %v4_100073e8
  %v10_100073ff = and i32 %v9_100073ff, %v8_100073ff
  %v11_100073ff = icmp slt i32 %v10_100073ff, 0
  %v13_100073ff = icmp slt i32 %v2_100073ff, 0
  %v2_10007401 = icmp eq i1 %v13_100073ff, %v11_100073ff
  br i1 %v2_10007401, label %dec_label_pc_10007403, label %dec_label_pc_100074b0

dec_label_pc_10007403:                            ; preds = %dec_label_pc_100073f4
  br label %dec_label_pc_100074b3

dec_label_pc_1000740f:                            ; preds = %dec_label_pc_1000736e
  %v1_10007412 = add i32 %arg3, 1
  %v5_1000742921 = icmp slt i32 %v1_10007412, %v1_10007346
  %v4_1000742e = ptrtoint i16* %arg1 to i32
  %sext9 = mul i32 %arg5, 65536
  %v4_1000743d = sdiv i32 %sext9, 65536
  br i1 %v5_1000742921, label %dec_label_pc_1000742b.lr.ph, label %dec_label_pc_1000747e

dec_label_pc_1000742b.lr.ph:                      ; preds = %dec_label_pc_1000740f
  %v3_10007455 = add i32 %v4_1000742e, -2
  %v3_1000746e = add i32 %v4_1000742e, 2
  br label %dec_label_pc_1000742b

dec_label_pc_1000742b:                            ; preds = %dec_label_pc_1000742b.lr.ph, %dec_label_pc_1000747c
  %v7_10007431 = phi i32 [ %v1_10007412, %dec_label_pc_1000742b.lr.ph ], [ %v1_1000741d, %dec_label_pc_1000747c ]
  %v2_10007431 = mul i32 %v7_10007431, 2
  %v3_10007431 = add i32 %v2_10007431, %v4_1000742e
  %v4_10007431 = inttoptr i32 %v3_10007431 to i16*
  %v5_10007431 = load i16, i16* %v4_10007431, align 2
  %v7_10007443 = icmp slt i16 %v5_10007431, %tmp
  br i1 %v7_10007443, label %dec_label_pc_1000747c, label %dec_label_pc_10007445

dec_label_pc_10007445:                            ; preds = %dec_label_pc_1000742b
  %v5_1000744b = load i16, i16* %v4_10007431, align 2
  %v4_10007455 = add i32 %v3_10007455, %v2_10007431
  %v5_10007455 = inttoptr i32 %v4_10007455 to i16*
  %v6_10007455 = load i16, i16* %v5_10007455, align 2
  %v5_1000745c = icmp slt i16 %v5_1000744b, %v6_10007455
  br i1 %v5_1000745c, label %dec_label_pc_1000747c, label %dec_label_pc_1000745e

dec_label_pc_1000745e:                            ; preds = %dec_label_pc_10007445
  %v5_10007464 = load i16, i16* %v4_10007431, align 2
  %v4_1000746e = add i32 %v3_1000746e, %v2_10007431
  %v5_1000746e = inttoptr i32 %v4_1000746e to i16*
  %v6_1000746e = load i16, i16* %v5_1000746e, align 2
  %v5_10007475 = icmp slt i16 %v5_10007464, %v6_1000746e
  br i1 %v5_10007475, label %dec_label_pc_1000747c, label %dec_label_pc_10007477

dec_label_pc_10007477:                            ; preds = %dec_label_pc_1000745e
  br label %dec_label_pc_100074b3

dec_label_pc_1000747c:                            ; preds = %dec_label_pc_1000745e, %dec_label_pc_10007445, %dec_label_pc_1000742b
  %v1_1000741d = add i32 %v7_10007431, 1
  %v5_10007429 = icmp slt i32 %v1_1000741d, %v1_10007346
  br i1 %v5_10007429, label %dec_label_pc_1000742b, label %dec_label_pc_10007423.dec_label_pc_1000747e_crit_edge

dec_label_pc_10007423.dec_label_pc_1000747e_crit_edge: ; preds = %dec_label_pc_1000747c
  br label %dec_label_pc_1000747e

dec_label_pc_1000747e:                            ; preds = %dec_label_pc_1000740f, %dec_label_pc_10007423.dec_label_pc_1000747e_crit_edge
  %v2_10007484 = mul i32 %v1_10007346, 2
  %v3_10007484 = add i32 %v2_10007484, %v4_1000742e
  %v4_10007484 = inttoptr i32 %v3_10007484 to i16*
  %v5_10007484 = load i16, i16* %v4_10007484, align 2
  %v4_1000748c = sext i16 %v5_10007484 to i32
  %v2_10007494 = sub nsw i32 %v4_1000748c, %v4_1000743d
  %v8_100074945 = xor i16 %v5_10007484, %tmp
  %v8_10007494 = sext i16 %v8_100074945 to i32
  %v9_10007494 = xor i32 %v2_10007494, %v4_1000748c
  %v10_10007494 = and i32 %v9_10007494, %v8_10007494
  %v11_10007494 = icmp slt i32 %v10_10007494, 0
  %v12_10007494 = icmp eq i32 %v2_10007494, 0
  %v13_10007494 = icmp slt i32 %v2_10007494, 0
  %v3_10007496 = icmp ne i1 %v13_10007494, %v11_10007494
  %v4_10007496 = or i1 %v12_10007494, %v3_10007496
  br i1 %v4_10007496, label %dec_label_pc_100074b0, label %dec_label_pc_10007498

dec_label_pc_10007498:                            ; preds = %dec_label_pc_1000747e
  %v3_100074a2 = add i32 %v4_1000742e, -2
  %v4_100074a2 = add i32 %v3_100074a2, %v2_10007484
  %v5_100074a2 = inttoptr i32 %v4_100074a2 to i16*
  %v6_100074a2 = load i16, i16* %v5_100074a2, align 2
  %v7_100074a2 = sext i16 %v6_100074a2 to i32
  %v2_100074a7 = sub nsw i32 %v4_1000748c, %v7_100074a2
  %v8_100074a743 = xor i16 %v6_100074a2, %v5_10007484
  %v8_100074a7 = sext i16 %v8_100074a743 to i32
  %v9_100074a7 = xor i32 %v2_100074a7, %v4_1000748c
  %v10_100074a7 = and i32 %v9_100074a7, %v8_100074a7
  %v11_100074a7 = icmp slt i32 %v10_100074a7, 0
  %v13_100074a7 = icmp slt i32 %v2_100074a7, 0
  %v2_100074a9 = icmp eq i1 %v13_100074a7, %v11_100074a7
  br i1 %v2_100074a9, label %dec_label_pc_100074ab, label %dec_label_pc_100074b0

dec_label_pc_100074ab:                            ; preds = %dec_label_pc_10007498
  br label %dec_label_pc_100074b3

dec_label_pc_100074b0:                            ; preds = %dec_label_pc_100073de, %dec_label_pc_100073f4, %dec_label_pc_10007498, %dec_label_pc_1000747e
  br label %dec_label_pc_100074b3

dec_label_pc_100074b3:                            ; preds = %dec_label_pc_100074ab, %dec_label_pc_10007477, %dec_label_pc_10007403, %dec_label_pc_100073d4, %dec_label_pc_10007366, %dec_label_pc_100074b0
  %v0_100074b6 = phi i32 [ %v1_10007346, %dec_label_pc_100074ab ], [ %v7_10007431, %dec_label_pc_10007477 ], [ 0, %dec_label_pc_10007403 ], [ %storemerge25, %dec_label_pc_100073d4 ], [ -1, %dec_label_pc_10007366 ], [ -1, %dec_label_pc_100074b0 ]
  ret i32 %v0_100074b6

; uselistorder directives
  uselistorder i32 %v2_100074a7, { 1, 0 }
  uselistorder i32 %v2_10007494, { 1, 2, 0 }
  uselistorder i32 %v4_1000748c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_10007484, { 1, 0 }
  uselistorder i32 %v2_10007431, { 1, 2, 0 }
  uselistorder i32 %v7_10007431, { 0, 2, 1 }
  uselistorder i32 %v4_1000742e, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_100073ff, { 1, 0 }
  uselistorder i32 %v2_100073f0, { 1, 2, 0 }
  uselistorder i32 %v4_100073e8, { 0, 2, 1, 3 }
  uselistorder i32 %v2_1000739a, { 1, 2, 0 }
  uselistorder i32 %storemerge25, { 0, 2, 1 }
  uselistorder i32 %.pre38, { 1, 0, 3, 2 }
  uselistorder i32 %v1_10007346, { 1, 2, 0, 3 }
  uselistorder i16 %tmp, { 0, 2, 1, 3 }
  uselistorder i32 %arg3, { 2, 3, 0, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i16* %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_100074b3, { 5, 0, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_100074b0, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_1000747e, { 1, 0 }
  uselistorder label %dec_label_pc_1000742b, { 1, 0 }
  uselistorder label %dec_label_pc_100073de, { 1, 0 }
  uselistorder label %dec_label_pc_10007394, { 1, 0 }
  uselistorder label %dec_label_pc_10007366, { 1, 0, 2, 3 }
}

define i32 @GetTraceData(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100074c6 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100074c6, i32* @eax, align 4
  %v1_100074ce = mul i32 %v1_100074c6, 65536
  %v1_100074ce.off = or i32 %v1_100074ce, 65535
  %tmp = icmp ult i32 %v1_100074ce.off, 131071
  br i1 %tmp, label %dec_label_pc_100074e3, label %dec_label_pc_100074d5

dec_label_pc_100074d5:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v1_100074d9 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_1000752c

dec_label_pc_100074e3:                            ; preds = %entry
  %v2_100074e6 = load i32, i32* %arg3, align 4
  %v2_100074ed = call i32 @SetSwpIdx(i32 %arg1, i32 %v2_100074e6)
  %v2_100074fd = call i32 @GetAmplData(i32 %arg1, i32 %arg2)
  %v1_1000750d = call i32 @RdSwpIdx(i32 %arg1)
  store i32 %v1_1000750d, i32* @eax, align 4
  store i32 %v1_1000750d, i32* %arg3, align 4
  store i32 %arg1, i32* @edx, align 4
  %v3_10007520 = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  %sext = shl i32 %v2_100074fd, 16
  %v4_10007528 = ashr exact i32 %sext, 16
  %v7_10007528 = and i32 %v3_10007520, -65536
  %v8_10007528 = or i32 %v4_10007528, %v7_10007528
  br label %dec_label_pc_1000752c

dec_label_pc_1000752c:                            ; preds = %dec_label_pc_100074d5, %dec_label_pc_100074e3
  %v0_1000752f = phi i32 [ %v1_100074d9, %dec_label_pc_100074d5 ], [ %v8_10007528, %dec_label_pc_100074e3 ]
  ret i32 %v0_1000752f

; uselistorder directives
  uselistorder i32 %arg1, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000752c, { 1, 0 }
}

define i32 @GetAmplData(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i16, align 2
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i16, align 2
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10007530 = load i32, i32* @ebp, align 4
  store i32 %v0_10007530, i32* %stack_var_-4, align 4
  %v4_10007530 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10007530, i32* @ebp, align 4
  store i16 0, i16* %stack_var_-32, align 2
  store i16 0, i16* %stack_var_-16, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10007559 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10007559, i32* @eax, align 4
  %v1_10007561 = mul i32 %v1_10007559, 65536
  %v1_10007561.off = or i32 %v1_10007561, 65535
  %tmp = icmp ult i32 %v1_10007561.off, 131071
  br i1 %tmp, label %dec_label_pc_10007579, label %dec_label_pc_10007568

dec_label_pc_10007568:                            ; preds = %entry
  %v1_1000756c = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10007770

dec_label_pc_10007579:                            ; preds = %entry
  %v1_1000757d = call i32 @IsSweeping(i32 %arg1)
  store i32 %v1_1000757d, i32* @eax, align 4
  %v1_10007585 = mul i32 %v1_1000757d, 65536
  %v1_10007585.off = or i32 %v1_10007585, 65535
  %tmp57 = icmp ult i32 %v1_10007585.off, 131071
  %v1_1000758a = icmp eq i1 %tmp57, false
  br i1 %v1_1000758a, label %dec_label_pc_1000759f, label %dec_label_pc_1000758c

dec_label_pc_1000758c:                            ; preds = %dec_label_pc_10007579
  store i32 %arg1, i32* @edx, align 4
  %v3_10007592 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -14)
  br label %dec_label_pc_10007770

dec_label_pc_1000759f:                            ; preds = %dec_label_pc_10007579
  store i32 %arg1, i32* @eax, align 4
  %v1_100075a3 = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_100075a3 = trunc i32 %v1_100075a3 to i16
  %v3_100075b3 = icmp slt i16 %v2_100075a3, 0
  %v2_100075b5 = icmp eq i1 %v3_100075b3, false
  br i1 %v2_100075b5, label %dec_label_pc_100075c0, label %dec_label_pc_100075b7

dec_label_pc_100075b7:                            ; preds = %dec_label_pc_1000759f
  %sext = mul i32 %v1_100075a3, 65536
  %v4_100075af = sdiv i32 %sext, 65536
  %v4_100075b7 = and i32 %v1_100075a3, 65535
  %v7_100075b7 = and i32 %v4_100075af, -65536
  %v8_100075b7 = or i32 %v7_100075b7, %v4_100075b7
  br label %dec_label_pc_10007770

dec_label_pc_100075c0:                            ; preds = %dec_label_pc_1000759f
  %v1_100075c4 = call i32 @RdSwpIdx(i32 %arg1)
  store i32 %arg1, i32* @eax, align 4
  %v1_100075d3 = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_100075d3 = trunc i32 %v1_100075d3 to i16
  %v3_100075e3 = icmp slt i16 %v2_100075d3, 0
  %v2_100075e5 = icmp eq i1 %v3_100075e3, false
  br i1 %v2_100075e5, label %dec_label_pc_100075f0, label %dec_label_pc_100075e7

dec_label_pc_100075e7:                            ; preds = %dec_label_pc_100075c0
  %sext6 = mul i32 %v1_100075d3, 65536
  %v4_100075df = sdiv i32 %sext6, 65536
  %v4_100075e7 = and i32 %v1_100075d3, 65535
  %v7_100075e7 = and i32 %v4_100075df, -65536
  %v8_100075e7 = or i32 %v7_100075e7, %v4_100075e7
  br label %dec_label_pc_10007770

dec_label_pc_100075f0:                            ; preds = %dec_label_pc_100075c0
  %v1_100075f4 = call i32 @RdNumDataPts(i32 %arg1)
  store i32 %arg1, i32* @eax, align 4
  %v1_10007603 = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_10007603 = trunc i32 %v1_10007603 to i16
  store i32 %v1_10007603, i32* @eax, align 4
  %v2_10007613 = icmp slt i16 %v2_10007603, 0
  %v2_10007615 = icmp eq i1 %v2_10007613, false
  br i1 %v2_10007615, label %dec_label_pc_10007620, label %dec_label_pc_10007617

dec_label_pc_10007617:                            ; preds = %dec_label_pc_100075f0
  %sext8 = mul i32 %v1_10007603, 65536
  %v4_1000760f = sdiv i32 %sext8, 65536
  %v4_10007617 = and i32 %v1_10007603, 65535
  %v7_10007617 = and i32 %v4_1000760f, -65536
  %v8_10007617 = or i32 %v7_10007617, %v4_10007617
  br label %dec_label_pc_10007770

dec_label_pc_10007620:                            ; preds = %dec_label_pc_100075f0
  store i32 %v1_100075c4, i32* @edx, align 4
  %v15_10007623 = icmp eq i32 %v1_100075f4, %v1_100075c4
  %v1_10007626 = icmp eq i1 %v15_10007623, false
  br i1 %v1_10007626, label %dec_label_pc_1000763b, label %dec_label_pc_10007628

dec_label_pc_10007628:                            ; preds = %dec_label_pc_10007620
  store i32 %arg1, i32* @eax, align 4
  %v3_1000762e = call i32 @SetFuncStatusCode(i32 %arg1, i16 4)
  br label %dec_label_pc_10007770

dec_label_pc_1000763b:                            ; preds = %dec_label_pc_10007620
  %v7_10007641 = icmp slt i32 %v1_100075f4, %v1_100075c4
  br i1 %v7_10007641, label %dec_label_pc_10007643, label %dec_label_pc_10007656

dec_label_pc_10007643:                            ; preds = %dec_label_pc_1000763b
  store i32 %arg1, i32* @edx, align 4
  %v3_10007649 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -2)
  br label %dec_label_pc_10007770

dec_label_pc_10007656:                            ; preds = %dec_label_pc_1000763b
  %v2_1000765c = mul i32 %v1_100075c4, 2
  %v3_1000765c = add i32 %v2_1000765c, %arg2
  store i32 %v3_1000765c, i32* %stack_var_-48, align 4
  %v2_10007662 = ptrtoint i16* %stack_var_-32 to i32
  %v2_10007666 = ptrtoint i32* %stack_var_-36 to i32
  %v5_10007671 = sub i32 %v1_100075f4, %v1_100075c4
  %v6_10007679 = trunc i32 %arg1 to i16
  %v7_10007679 = call i32 @function_100040c9(i16 %v6_10007679, i32 %v5_10007671, i32 1, i32 %v2_10007666, i32 %v2_10007662, i32 %v3_1000765c)
  %v1_10007681 = mul i32 %v7_10007679, 65536
  %v2_10007681 = sdiv i32 %v1_10007681, 65536
  store i32 %v2_10007681, i32* @edx, align 4
  %v1_10007681.off = or i32 %v1_10007681, 65535
  %tmp58 = icmp ult i32 %v1_10007681.off, 131071
  br i1 %tmp58, label %dec_label_pc_10007691, label %dec_label_pc_10007688

dec_label_pc_10007688:                            ; preds = %dec_label_pc_10007656
  %v2_10007688 = or i32 %v7_10007679, 65535
  br label %dec_label_pc_10007770

dec_label_pc_10007691:                            ; preds = %dec_label_pc_10007656
  %v3_10007691 = load i32, i32* %stack_var_-36, align 4
  %v4_10007691 = icmp eq i32 %v3_10007691, 0
  %v1_10007695 = icmp eq i1 %v4_10007691, false
  br i1 %v1_10007695, label %dec_label_pc_100076b1.preheader, label %dec_label_pc_10007697

dec_label_pc_100076b1.preheader:                  ; preds = %dec_label_pc_10007691
  %v5_100076b728 = icmp sgt i32 %v3_10007691, 0
  br i1 %v5_100076b728, label %dec_label_pc_100076cd.preheader.lr.ph, label %dec_label_pc_100076b1.preheader.dec_label_pc_10007725_crit_edge

dec_label_pc_100076b1.preheader.dec_label_pc_10007725_crit_edge: ; preds = %dec_label_pc_100076b1.preheader
  %v3_10007725.pre = load i16, i16* %stack_var_-32, align 2
  br label %dec_label_pc_10007725

dec_label_pc_100076cd.preheader.lr.ph:            ; preds = %dec_label_pc_100076b1.preheader
  %v2_100076de = ptrtoint i16* %stack_var_-16 to i32
  br label %dec_label_pc_100076cd.preheader

dec_label_pc_10007697:                            ; preds = %dec_label_pc_10007691
  %v12_10007697 = and i32 %v7_10007679, -65536
  br label %dec_label_pc_10007770

dec_label_pc_100076cd.preheader:                  ; preds = %dec_label_pc_100076cd.preheader.lr.ph, %dec_label_pc_1000771b
  %storemerge29 = phi i32 [ 0, %dec_label_pc_100076cd.preheader.lr.ph ], [ %v1_100076ab, %dec_label_pc_1000771b ]
  %v5_100076f4 = mul i32 %storemerge29, 2
  br label %dec_label_pc_100076d6

dec_label_pc_100076d6:                            ; preds = %dec_label_pc_1000770a.dec_label_pc_100076d6_crit_edge, %dec_label_pc_100076cd.preheader
  %indvars.iv = phi i32 [ 0, %dec_label_pc_100076cd.preheader ], [ %indvars.iv.next, %dec_label_pc_1000770a.dec_label_pc_100076d6_crit_edge ]
  %v10_100076d119 = phi i1 [ false, %dec_label_pc_100076cd.preheader ], [ %v10_100076d1, %dec_label_pc_1000770a.dec_label_pc_100076d6_crit_edge ]
  %v3_100076d6 = load i16, i16* %stack_var_-32, align 2
  store i16 %v3_100076d6, i16* %stack_var_-16, align 2
  %v3_100076e6 = call i32 @function_100039d0(i16 %v6_10007679, i32 %v2_100076de)
  %v4_100076e6 = trunc i32 %v3_100076e6 to i16
  %v3_100076f1 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_100076f1, i32* @edx, align 4
  %v6_100076f4 = add i32 %v3_100076f1, %v5_100076f4
  %v7_100076f4 = inttoptr i32 %v6_100076f4 to i16*
  store i16 %v4_100076e6, i16* %v7_100076f4, align 2
  %v1_100076fc = call i32 @RdErrorStatus(i32 %arg1)
  %v1_10007704 = icmp eq i32 %v1_100076fc, 0
  %v1_10007706 = icmp eq i1 %v1_10007704, false
  br i1 %v1_10007706, label %dec_label_pc_1000770a, label %dec_label_pc_1000770c

dec_label_pc_1000770a:                            ; preds = %dec_label_pc_100076d6
  %v5_100076c1 = load i32, i32* @edx, align 4
  %v7_100076c1 = or i32 %v5_100076c1, %indvars.iv
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %v18_100076c5 = and i32 %v7_100076c1, -65536
  %v19_100076c5 = or i32 %v18_100076c5, %indvars.iv.next
  store i32 %v19_100076c5, i32* @edx, align 4
  %v10_100076d1 = icmp eq i32 %indvars.iv.next, 3
  %v11_100076d1 = icmp slt i32 %indvars.iv.next, 3
  br i1 %v11_100076d1, label %dec_label_pc_1000770a.dec_label_pc_100076d6_crit_edge, label %dec_label_pc_1000770c

dec_label_pc_1000770a.dec_label_pc_100076d6_crit_edge: ; preds = %dec_label_pc_1000770a
  br label %dec_label_pc_100076d6

dec_label_pc_1000770c:                            ; preds = %dec_label_pc_100076d6, %dec_label_pc_1000770a
  %v1_10007715 = phi i32 [ %v1_100076fc, %dec_label_pc_100076d6 ], [ %indvars.iv.next, %dec_label_pc_1000770a ]
  %v10_100076d1.lcssa = phi i1 [ %v10_100076d119, %dec_label_pc_100076d6 ], [ %v10_100076d1, %dec_label_pc_1000770a ]
  %v1_10007713 = icmp eq i1 %v10_100076d1.lcssa, false
  br i1 %v1_10007713, label %dec_label_pc_1000771b, label %dec_label_pc_10007715

dec_label_pc_10007715:                            ; preds = %dec_label_pc_1000770c
  %v2_10007715 = or i32 %v1_10007715, 65535
  br label %dec_label_pc_10007770

dec_label_pc_1000771b:                            ; preds = %dec_label_pc_1000770c
  %v3_1000771b = load i16, i16* %stack_var_-16, align 2
  %v4_1000771b = sext i16 %v3_1000771b to i32
  %v6_1000771b = load i32, i32* @edx, align 4
  %v7_1000771b = and i32 %v6_1000771b, -65536
  %v8_1000771b = or i32 %v7_1000771b, %v4_1000771b
  store i32 %v8_1000771b, i32* @edx, align 4
  store i16 %v3_1000771b, i16* %stack_var_-32, align 2
  %v1_100076ab = add i32 %storemerge29, 1
  %v4_100076b4 = load i32, i32* %stack_var_-36, align 4
  %v5_100076b7 = icmp slt i32 %v1_100076ab, %v4_100076b4
  br i1 %v5_100076b7, label %dec_label_pc_100076cd.preheader, label %dec_label_pc_10007725

dec_label_pc_10007725:                            ; preds = %dec_label_pc_1000771b, %dec_label_pc_100076b1.preheader.dec_label_pc_10007725_crit_edge
  %v6_10007725 = phi i32 [ %v7_10007679, %dec_label_pc_100076b1.preheader.dec_label_pc_10007725_crit_edge ], [ %v1_100076ab, %dec_label_pc_1000771b ]
  %v3_10007725 = phi i16 [ %v3_10007725.pre, %dec_label_pc_100076b1.preheader.dec_label_pc_10007725_crit_edge ], [ %v3_1000771b, %dec_label_pc_1000771b ]
  %v4_10007725 = sext i16 %v3_10007725 to i32
  %v7_10007725 = and i32 %v6_10007725, -65536
  %v8_10007725 = or i32 %v4_10007725, %v7_10007725
  %v3_1000772e = call i32 @function_10003bb8(i16 %v6_10007679, i32 %v8_10007725)
  %v4_1000772e = trunc i32 %v3_1000772e to i16
  %v2_1000773e = icmp eq i16 %v4_1000772e, 0
  br i1 %v2_1000773e, label %dec_label_pc_10007748, label %dec_label_pc_10007742

dec_label_pc_10007742:                            ; preds = %dec_label_pc_10007725
  %sext10 = mul i32 %v3_1000772e, 65536
  %v4_1000773a = sdiv i32 %sext10, 65536
  %v4_10007742 = or i32 %v4_1000773a, 65535
  br label %dec_label_pc_10007770

dec_label_pc_10007748:                            ; preds = %dec_label_pc_10007725
  %v4_1000774b = load i32, i32* %stack_var_-36, align 4
  %v5_1000774b = add i32 %v4_1000774b, %v1_100075c4
  %v2_10007753 = call i32 @SetSwpIdx(i32 %arg1, i32 %v5_1000774b)
  %v3_10007753 = trunc i32 %v2_10007753 to i16
  %sext12 = mul i32 %v2_10007753, 65536
  %v4_1000775f = sdiv i32 %sext12, 65536
  %v1_10007763 = icmp eq i16 %v3_10007753, 0
  br i1 %v1_10007763, label %dec_label_pc_1000776d, label %dec_label_pc_10007767

dec_label_pc_10007767:                            ; preds = %dec_label_pc_10007748
  %v4_10007767 = or i32 %v4_1000775f, 65535
  br label %dec_label_pc_10007770

dec_label_pc_1000776d:                            ; preds = %dec_label_pc_10007748
  %v15_1000776d = and i32 %v4_1000775f, -65536
  br label %dec_label_pc_10007770

dec_label_pc_10007770:                            ; preds = %dec_label_pc_10007767, %dec_label_pc_10007742, %dec_label_pc_10007715, %dec_label_pc_10007697, %dec_label_pc_10007688, %dec_label_pc_10007643, %dec_label_pc_10007628, %dec_label_pc_10007617, %dec_label_pc_100075e7, %dec_label_pc_100075b7, %dec_label_pc_1000758c, %dec_label_pc_10007568, %dec_label_pc_1000776d
  %v0_10007773 = phi i32 [ %v4_10007767, %dec_label_pc_10007767 ], [ %v4_10007742, %dec_label_pc_10007742 ], [ %v2_10007715, %dec_label_pc_10007715 ], [ %v12_10007697, %dec_label_pc_10007697 ], [ %v2_10007688, %dec_label_pc_10007688 ], [ %v3_10007649, %dec_label_pc_10007643 ], [ %v3_1000762e, %dec_label_pc_10007628 ], [ %v8_10007617, %dec_label_pc_10007617 ], [ %v8_100075e7, %dec_label_pc_100075e7 ], [ %v8_100075b7, %dec_label_pc_100075b7 ], [ %v3_10007592, %dec_label_pc_1000758c ], [ %v1_1000756c, %dec_label_pc_10007568 ], [ %v15_1000776d, %dec_label_pc_1000776d ]
  %v2_10007772 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10007772, i32* @ebp, align 4
  ret i32 %v0_10007773

; uselistorder directives
  uselistorder i1 %v10_100076d1, { 1, 0 }
  uselistorder i32 %indvars.iv.next, { 1, 2, 3, 0, 4 }
  uselistorder i32 %indvars.iv, { 1, 0 }
  uselistorder i32 %storemerge29, { 1, 0 }
  uselistorder i32 %v7_10007679, { 1, 2, 3, 0 }
  uselistorder i32 %v1_10007603, { 1, 0, 3, 2 }
  uselistorder i32 %v1_100075f4, { 2, 0, 1 }
  uselistorder i32 %v1_100075d3, { 1, 0, 2 }
  uselistorder i32 %v1_100075c4, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 %v1_100075a3, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i16* %stack_var_-32, { 4, 3, 0, 1, 2 }
  uselistorder i16* %stack_var_-16, { 3, 2, 0, 1 }
  uselistorder i32 %arg1, { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_10007770, { 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %dec_label_pc_1000770c, { 1, 0 }
  uselistorder label %dec_label_pc_100076cd.preheader, { 1, 0 }
}

define i32 @function_10007774(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10007774:
  store i32 %arg1, i32* @eax, align 4
  %v1_10007783 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10007783, i32* @eax, align 4
  %v1_1000778b = mul i32 %v1_10007783, 65536
  %v1_1000778b.off = or i32 %v1_1000778b, 65535
  %tmp = icmp ult i32 %v1_1000778b.off, 131071
  br i1 %tmp, label %dec_label_pc_100077a0, label %dec_label_pc_10007792

dec_label_pc_10007792:                            ; preds = %dec_label_pc_10007774
  store i32 %arg1, i32* @edx, align 4
  %v1_10007796 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100077ed

dec_label_pc_100077a0:                            ; preds = %dec_label_pc_10007774
  %v2_100077a3 = load i32, i32* %arg4, align 4
  %v2_100077aa = call i32 @SetSwpIdx(i32 %arg1, i32 %v2_100077a3)
  %v3_100077be = call i32 @GetMinMaxAmpl(i32 %arg1, i32 %arg2, i32 %arg3)
  %v1_100077ce = call i32 @RdSwpIdx(i32 %arg1)
  store i32 %v1_100077ce, i32* @eax, align 4
  store i32 %v1_100077ce, i32* %arg4, align 4
  store i32 %arg1, i32* @edx, align 4
  %v3_100077e1 = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  %sext = shl i32 %v3_100077be, 16
  %v4_100077e9 = ashr exact i32 %sext, 16
  %v7_100077e9 = and i32 %v3_100077e1, -65536
  %v8_100077e9 = or i32 %v4_100077e9, %v7_100077e9
  br label %dec_label_pc_100077ed

dec_label_pc_100077ed:                            ; preds = %dec_label_pc_10007792, %dec_label_pc_100077a0
  %v0_100077f0 = phi i32 [ %v1_10007796, %dec_label_pc_10007792 ], [ %v8_100077e9, %dec_label_pc_100077a0 ]
  ret i32 %v0_100077f0

; uselistorder directives
  uselistorder i32 %arg1, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100077ed, { 1, 0 }
}

define i32 @GetMinMaxAmpl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i16, align 2
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i16, align 2
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100077f1 = load i32, i32* @ebp, align 4
  store i32 %v0_100077f1, i32* %stack_var_-4, align 4
  %v4_100077f1 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100077f1, i32* @ebp, align 4
  store i16 0, i16* %stack_var_-32, align 2
  store i16 0, i16* %stack_var_-16, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_1000781a = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000781a, i32* @eax, align 4
  %v1_10007822 = mul i32 %v1_1000781a, 65536
  %v1_10007822.off = or i32 %v1_10007822, 65535
  %tmp = icmp ult i32 %v1_10007822.off, 131071
  br i1 %tmp, label %dec_label_pc_1000783a, label %dec_label_pc_10007829

dec_label_pc_10007829:                            ; preds = %entry
  %v1_1000782d = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10007ae4

dec_label_pc_1000783a:                            ; preds = %entry
  %v1_1000783e = call i32 @IsSweeping(i32 %arg1)
  store i32 %v1_1000783e, i32* @eax, align 4
  %v1_10007846 = mul i32 %v1_1000783e, 65536
  %v1_10007846.off = or i32 %v1_10007846, 65535
  %tmp69 = icmp ult i32 %v1_10007846.off, 131071
  %v1_1000784b = icmp eq i1 %tmp69, false
  br i1 %v1_1000784b, label %dec_label_pc_10007860, label %dec_label_pc_1000784d

dec_label_pc_1000784d:                            ; preds = %dec_label_pc_1000783a
  store i32 %arg1, i32* @edx, align 4
  %v3_10007853 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -14)
  br label %dec_label_pc_10007ae4

dec_label_pc_10007860:                            ; preds = %dec_label_pc_1000783a
  store i32 %arg1, i32* @eax, align 4
  %v1_10007864 = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_10007864 = trunc i32 %v1_10007864 to i16
  %v3_10007874 = icmp slt i16 %v2_10007864, 0
  %v2_10007876 = icmp eq i1 %v3_10007874, false
  br i1 %v2_10007876, label %dec_label_pc_10007881, label %dec_label_pc_10007878

dec_label_pc_10007878:                            ; preds = %dec_label_pc_10007860
  %sext5 = mul i32 %v1_10007864, 65536
  %v4_10007870 = sdiv i32 %sext5, 65536
  %v4_10007878 = and i32 %v1_10007864, 65535
  %v7_10007878 = and i32 %v4_10007870, -65536
  %v8_10007878 = or i32 %v7_10007878, %v4_10007878
  br label %dec_label_pc_10007ae4

dec_label_pc_10007881:                            ; preds = %dec_label_pc_10007860
  %v1_10007885 = call i32 @RdSwpIdx(i32 %arg1)
  store i32 %arg1, i32* @eax, align 4
  %v1_10007894 = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_10007894 = trunc i32 %v1_10007894 to i16
  %v3_100078a4 = icmp slt i16 %v2_10007894, 0
  %v2_100078a6 = icmp eq i1 %v3_100078a4, false
  br i1 %v2_100078a6, label %dec_label_pc_100078b1, label %dec_label_pc_100078a8

dec_label_pc_100078a8:                            ; preds = %dec_label_pc_10007881
  %sext7 = mul i32 %v1_10007894, 65536
  %v4_100078a0 = sdiv i32 %sext7, 65536
  %v4_100078a8 = and i32 %v1_10007894, 65535
  %v7_100078a8 = and i32 %v4_100078a0, -65536
  %v8_100078a8 = or i32 %v7_100078a8, %v4_100078a8
  br label %dec_label_pc_10007ae4

dec_label_pc_100078b1:                            ; preds = %dec_label_pc_10007881
  %v1_100078b5 = call i32 @RdNumDataPts(i32 %arg1)
  store i32 %arg1, i32* @eax, align 4
  %v1_100078c4 = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_100078c4 = trunc i32 %v1_100078c4 to i16
  store i32 %v1_100078c4, i32* @eax, align 4
  %v2_100078d4 = icmp slt i16 %v2_100078c4, 0
  %v2_100078d6 = icmp eq i1 %v2_100078d4, false
  br i1 %v2_100078d6, label %dec_label_pc_100078e1, label %dec_label_pc_100078d8

dec_label_pc_100078d8:                            ; preds = %dec_label_pc_100078b1
  %sext9 = mul i32 %v1_100078c4, 65536
  %v4_100078d0 = sdiv i32 %sext9, 65536
  %v4_100078d8 = and i32 %v1_100078c4, 65535
  %v7_100078d8 = and i32 %v4_100078d0, -65536
  %v8_100078d8 = or i32 %v7_100078d8, %v4_100078d8
  br label %dec_label_pc_10007ae4

dec_label_pc_100078e1:                            ; preds = %dec_label_pc_100078b1
  store i32 %v1_10007885, i32* @edx, align 4
  %v15_100078e4 = icmp eq i32 %v1_100078b5, %v1_10007885
  %v1_100078e7 = icmp eq i1 %v15_100078e4, false
  br i1 %v1_100078e7, label %dec_label_pc_100078fc, label %dec_label_pc_100078e9

dec_label_pc_100078e9:                            ; preds = %dec_label_pc_100078e1
  store i32 %arg1, i32* @eax, align 4
  %v3_100078ef = call i32 @SetFuncStatusCode(i32 %arg1, i16 4)
  br label %dec_label_pc_10007ae4

dec_label_pc_100078fc:                            ; preds = %dec_label_pc_100078e1
  %v7_10007902 = icmp slt i32 %v1_100078b5, %v1_10007885
  br i1 %v7_10007902, label %dec_label_pc_10007904, label %dec_label_pc_10007917

dec_label_pc_10007904:                            ; preds = %dec_label_pc_100078fc
  store i32 %arg1, i32* @edx, align 4
  %v3_1000790a = call i32 @SetFuncStatusCode(i32 %arg1, i16 -2)
  br label %dec_label_pc_10007ae4

dec_label_pc_10007917:                            ; preds = %dec_label_pc_100078fc
  %v2_1000791d = mul i32 %v1_10007885, 2
  %v3_1000791d = add i32 %v2_1000791d, %arg2
  %v3_10007929 = add i32 %v2_1000791d, %arg3
  store i32 %v3_10007929, i32* %stack_var_-56, align 4
  %v2_1000792f = ptrtoint i16* %stack_var_-32 to i32
  %v2_10007933 = ptrtoint i32* %stack_var_-36 to i32
  %v5_1000793e = sub i32 %v1_100078b5, %v1_10007885
  %v6_10007946 = trunc i32 %arg1 to i16
  %v7_10007946 = call i32 @function_100040c9(i16 %v6_10007946, i32 %v5_1000793e, i32 2, i32 %v2_10007933, i32 %v2_1000792f, i32 %v3_10007929)
  %v1_1000794e = mul i32 %v7_10007946, 65536
  %v2_1000794e = sdiv i32 %v1_1000794e, 65536
  store i32 %v2_1000794e, i32* @edx, align 4
  %v1_1000794e.off = or i32 %v1_1000794e, 65535
  %tmp70 = icmp ult i32 %v1_1000794e.off, 131071
  br i1 %tmp70, label %dec_label_pc_1000795e, label %dec_label_pc_10007955

dec_label_pc_10007955:                            ; preds = %dec_label_pc_10007917
  %v2_10007955 = or i32 %v7_10007946, 65535
  br label %dec_label_pc_10007ae4

dec_label_pc_1000795e:                            ; preds = %dec_label_pc_10007917
  %v3_1000795e = load i32, i32* %stack_var_-36, align 4
  %v4_1000795e = icmp eq i32 %v3_1000795e, 0
  %v1_10007962 = icmp eq i1 %v4_1000795e, false
  br i1 %v1_10007962, label %dec_label_pc_10007980.preheader, label %dec_label_pc_10007964

dec_label_pc_10007980.preheader:                  ; preds = %dec_label_pc_1000795e
  %v2_100079ba = ptrtoint i16* %stack_var_-16 to i32
  %v5_1000798755 = icmp sgt i32 %v3_1000795e, 0
  br i1 %v5_1000798755, label %dec_label_pc_1000798d.lr.ph, label %dec_label_pc_10007aa3

dec_label_pc_1000798d.lr.ph:                      ; preds = %dec_label_pc_10007980.preheader
  %v3_1000798d.pre = load i16, i16* %stack_var_-32, align 2
  br label %dec_label_pc_1000798d

dec_label_pc_10007964:                            ; preds = %dec_label_pc_1000795e
  %v12_10007964 = and i32 %v7_10007946, -65536
  br label %dec_label_pc_10007ae4

dec_label_pc_1000798d:                            ; preds = %dec_label_pc_1000798d.lr.ph, %dec_label_pc_10007a96
  %v3_1000798d = phi i16 [ %v3_1000798d.pre, %dec_label_pc_1000798d.lr.ph ], [ %v3_10007a96, %dec_label_pc_10007a96 ]
  %v4_1000798058 = phi i32 [ 0, %dec_label_pc_1000798d.lr.ph ], [ %v4_10007980, %dec_label_pc_10007a96 ]
  %storemerge57 = phi i16 [ 0, %dec_label_pc_1000798d.lr.ph ], [ %v2_10007978, %dec_label_pc_10007a96 ]
  store i16 %v3_1000798d, i16* %stack_var_-16, align 2
  br label %dec_label_pc_100079b2

dec_label_pc_100079b2:                            ; preds = %dec_label_pc_100079e0.dec_label_pc_100079b2_crit_edge, %dec_label_pc_1000798d
  %v3_100079b2 = phi i16 [ %v3_1000798d, %dec_label_pc_1000798d ], [ %v3_100079b2.pre, %dec_label_pc_100079e0.dec_label_pc_100079b2_crit_edge ]
  %indvars.iv = phi i32 [ 0, %dec_label_pc_1000798d ], [ %indvars.iv.next, %dec_label_pc_100079e0.dec_label_pc_100079b2_crit_edge ]
  store i16 %v3_100079b2, i16* %stack_var_-16, align 2
  %v3_100079c2 = call i32 @function_100039d0(i16 %v6_10007946, i32 %v2_100079ba)
  store i32 %arg1, i32* @edx, align 4
  %v1_100079d2 = call i32 @RdErrorStatus(i32 %arg1)
  %v1_100079da = icmp eq i32 %v1_100079d2, 0
  %v1_100079dc = icmp eq i1 %v1_100079da, false
  br i1 %v1_100079dc, label %dec_label_pc_100079e0, label %dec_label_pc_100079e2

dec_label_pc_100079e0:                            ; preds = %dec_label_pc_100079b2
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %v11_100079ad = icmp slt i32 %indvars.iv.next, 3
  br i1 %v11_100079ad, label %dec_label_pc_100079e0.dec_label_pc_100079b2_crit_edge, label %dec_label_pc_100079e2

dec_label_pc_100079e0.dec_label_pc_100079b2_crit_edge: ; preds = %dec_label_pc_100079e0
  %v3_100079b2.pre = load i16, i16* %stack_var_-32, align 2
  br label %dec_label_pc_100079b2

dec_label_pc_100079e2:                            ; preds = %dec_label_pc_100079b2, %dec_label_pc_100079e0
  %v1_100079e6 = call i32 @RdErrorStatus(i32 %arg1)
  %v1_100079ee = icmp eq i32 %v1_100079e6, 0
  br i1 %v1_100079ee, label %dec_label_pc_100079f7, label %dec_label_pc_10007aa3

dec_label_pc_100079f7:                            ; preds = %dec_label_pc_100079e2
  %v4_100079c2.le = trunc i32 %v3_100079c2 to i16
  %v3_100079f7 = load i16, i16* %stack_var_-16, align 2
  %v4_100079f7 = sext i16 %v3_100079f7 to i32
  %v6_100079f7 = load i32, i32* @ecx, align 4
  %v8_100079f7 = or i32 %v6_100079f7, %v4_100079f7
  store i16 %v3_100079f7, i16* %stack_var_-32, align 2
  %v4_10007a06 = and i32 %v3_100079c2, 65535
  %v6_10007a06 = and i32 %v8_100079f7, -65536
  %v7_10007a06 = or i32 %v6_10007a06, %v4_10007a06
  store i32 %v7_10007a06, i32* @ecx, align 4
  %v4_10007a0a = mul nsw i32 %v4_1000798058, 2
  %v5_10007a0a = add i32 %v3_1000791d, %v4_10007a0a
  %v6_10007a0a = inttoptr i32 %v5_10007a0a to i16*
  store i16 %v4_100079c2.le, i16* %v6_10007a0a, align 2
  br label %dec_label_pc_10007a2b

dec_label_pc_10007a2b:                            ; preds = %dec_label_pc_100079f7, %dec_label_pc_10007a59
  %indvars.iv14 = phi i32 [ 0, %dec_label_pc_100079f7 ], [ %indvars.iv.next15, %dec_label_pc_10007a59 ]
  %v3_10007a2b = load i16, i16* %stack_var_-32, align 2
  store i16 %v3_10007a2b, i16* %stack_var_-16, align 2
  store i32 %v2_100079ba, i32* @edx, align 4
  %v3_10007a3b = call i32 @function_100039d0(i16 %v6_10007946, i32 %v2_100079ba)
  %v1_10007a4b = call i32 @RdErrorStatus(i32 %arg1)
  %v1_10007a53 = icmp eq i32 %v1_10007a4b, 0
  %v1_10007a55 = icmp eq i1 %v1_10007a53, false
  br i1 %v1_10007a55, label %dec_label_pc_10007a59, label %dec_label_pc_10007a5b

dec_label_pc_10007a59:                            ; preds = %dec_label_pc_10007a2b
  %indvars.iv.next15 = add nuw nsw i32 %indvars.iv14, 1
  %v11_10007a26 = icmp slt i32 %indvars.iv.next15, 3
  br i1 %v11_10007a26, label %dec_label_pc_10007a2b, label %dec_label_pc_10007a5b

dec_label_pc_10007a5b:                            ; preds = %dec_label_pc_10007a2b, %dec_label_pc_10007a59
  store i32 %arg1, i32* @edx, align 4
  %v1_10007a5f = call i32 @RdErrorStatus(i32 %arg1)
  %v1_10007a67 = icmp eq i32 %v1_10007a5f, 0
  br i1 %v1_10007a67, label %dec_label_pc_10007a6d, label %dec_label_pc_10007aa3

dec_label_pc_10007a6d:                            ; preds = %dec_label_pc_10007a5b
  %v4_10007a3b.le = trunc i32 %v3_10007a3b to i16
  %v3_10007a6d = load i16, i16* %stack_var_-16, align 2
  store i16 %v3_10007a6d, i16* %stack_var_-32, align 2
  %v3_10007a79 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10007a79, i32* @edx, align 4
  %v5_10007a80 = add i32 %v3_10007a79, %v4_10007a0a
  %v6_10007a80 = inttoptr i32 %v5_10007a80 to i16*
  store i16 %v4_10007a3b.le, i16* %v6_10007a80, align 2
  %v1_10007a88 = call i32 @RdErrorStatus(i32 %arg1)
  %v1_10007a90 = icmp eq i32 %v1_10007a88, 0
  br i1 %v1_10007a90, label %dec_label_pc_10007a96, label %dec_label_pc_10007aa3

dec_label_pc_10007a96:                            ; preds = %dec_label_pc_10007a6d
  %v3_10007a96 = load i16, i16* %stack_var_-16, align 2
  %v4_10007a96 = sext i16 %v3_10007a96 to i32
  %v6_10007a96 = load i32, i32* @edx, align 4
  %v7_10007a96 = and i32 %v6_10007a96, -65536
  %v8_10007a96 = or i32 %v7_10007a96, %v4_10007a96
  store i32 %v8_10007a96, i32* @edx, align 4
  store i16 %v3_10007a96, i16* %stack_var_-32, align 2
  %v2_10007978 = add i16 %storemerge57, 1
  %v16_10007978 = zext i16 %v2_10007978 to i32
  %v4_10007984.pre = load i32, i32* %stack_var_-36, align 4
  %v4_10007980 = sext i16 %v2_10007978 to i32
  %v5_10007987 = icmp slt i32 %v4_10007980, %v4_10007984.pre
  br i1 %v5_10007987, label %dec_label_pc_1000798d, label %dec_label_pc_10007aa3

dec_label_pc_10007aa3:                            ; preds = %dec_label_pc_10007a96, %dec_label_pc_100079e2, %dec_label_pc_10007a5b, %dec_label_pc_10007a6d, %dec_label_pc_10007980.preheader
  %v6_10007aa3 = phi i32 [ %v7_10007946, %dec_label_pc_10007980.preheader ], [ %v1_10007a88, %dec_label_pc_10007a6d ], [ %v1_10007a5f, %dec_label_pc_10007a5b ], [ %v1_100079e6, %dec_label_pc_100079e2 ], [ %v16_10007978, %dec_label_pc_10007a96 ]
  %v3_10007aa3 = load i16, i16* %stack_var_-32, align 2
  %v4_10007aa3 = sext i16 %v3_10007aa3 to i32
  %v7_10007aa3 = and i32 %v6_10007aa3, -65536
  %v8_10007aa3 = or i32 %v4_10007aa3, %v7_10007aa3
  %v3_10007aac = call i32 @function_10003bb8(i16 %v6_10007946, i32 %v8_10007aa3)
  %sext = mul i32 %v3_10007aac, 65536
  %sext.off = or i32 %sext, 65535
  %tmp71 = icmp ult i32 %sext.off, 131071
  %v1_10007abe = icmp eq i1 %tmp71, false
  br i1 %v1_10007abe, label %dec_label_pc_10007ae0, label %dec_label_pc_10007ac0

dec_label_pc_10007ac0:                            ; preds = %dec_label_pc_10007aa3
  %v4_10007ac3 = load i32, i32* %stack_var_-36, align 4
  %v5_10007ac3 = add i32 %v4_10007ac3, %v1_10007885
  %v2_10007acb = call i32 @SetSwpIdx(i32 %arg1, i32 %v5_10007ac3)
  %v1_10007ad3 = mul i32 %v2_10007acb, 65536
  %v1_10007ad3.off = or i32 %v1_10007ad3, 65535
  %tmp72 = icmp ult i32 %v1_10007ad3.off, 131071
  br i1 %tmp72, label %dec_label_pc_10007ae0, label %dec_label_pc_10007ada

dec_label_pc_10007ada:                            ; preds = %dec_label_pc_10007ac0
  %v2_10007ada = or i32 %v2_10007acb, 65535
  br label %dec_label_pc_10007ae4

dec_label_pc_10007ae0:                            ; preds = %dec_label_pc_10007ac0, %dec_label_pc_10007aa3
  %v5_10007ae0 = phi i32 [ %v2_10007acb, %dec_label_pc_10007ac0 ], [ %v3_10007aac, %dec_label_pc_10007aa3 ]
  %v4_10007ae0 = and i32 %v3_10007aac, 65535
  %v6_10007ae0 = and i32 %v5_10007ae0, -65536
  %v7_10007ae0 = or i32 %v6_10007ae0, %v4_10007ae0
  br label %dec_label_pc_10007ae4

dec_label_pc_10007ae4:                            ; preds = %dec_label_pc_10007ada, %dec_label_pc_10007964, %dec_label_pc_10007955, %dec_label_pc_10007904, %dec_label_pc_100078e9, %dec_label_pc_100078d8, %dec_label_pc_100078a8, %dec_label_pc_10007878, %dec_label_pc_1000784d, %dec_label_pc_10007829, %dec_label_pc_10007ae0
  %v0_10007ae7 = phi i32 [ %v2_10007ada, %dec_label_pc_10007ada ], [ %v12_10007964, %dec_label_pc_10007964 ], [ %v2_10007955, %dec_label_pc_10007955 ], [ %v3_1000790a, %dec_label_pc_10007904 ], [ %v3_100078ef, %dec_label_pc_100078e9 ], [ %v8_100078d8, %dec_label_pc_100078d8 ], [ %v8_100078a8, %dec_label_pc_100078a8 ], [ %v8_10007878, %dec_label_pc_10007878 ], [ %v3_10007853, %dec_label_pc_1000784d ], [ %v1_1000782d, %dec_label_pc_10007829 ], [ %v7_10007ae0, %dec_label_pc_10007ae0 ]
  %v2_10007ae6 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10007ae6, i32* @ebp, align 4
  ret i32 %v0_10007ae7

; uselistorder directives
  uselistorder i32 %v2_10007acb, { 1, 2, 0 }
  uselistorder i32 %v3_10007aac, { 2, 1, 0 }
  uselistorder i32 %v4_10007980, { 1, 0 }
  uselistorder i16 %v2_10007978, { 0, 2, 1 }
  uselistorder i16 %v3_10007a96, { 1, 2, 0 }
  uselistorder i16 %v3_1000798d, { 1, 0 }
  uselistorder i32 %v2_100079ba, { 1, 0, 2 }
  uselistorder i32 %v7_10007946, { 1, 2, 3, 0 }
  uselistorder i32 %v2_1000791d, { 1, 0 }
  uselistorder i32 %v1_100078c4, { 1, 0, 3, 2 }
  uselistorder i32 %v1_100078b5, { 2, 0, 1 }
  uselistorder i32 %v1_10007894, { 1, 0, 2 }
  uselistorder i32 %v1_10007885, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 %v1_10007864, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i16* %stack_var_-32, { 8, 7, 6, 5, 4, 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-36, { 1, 0, 2, 3 }
  uselistorder i16* %stack_var_-16, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 %arg1, { 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_10007ae4, { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder label %dec_label_pc_10007aa3, { 0, 3, 2, 1, 4 }
  uselistorder label %dec_label_pc_10007a5b, { 1, 0 }
  uselistorder label %dec_label_pc_10007a2b, { 1, 0 }
  uselistorder label %dec_label_pc_100079e2, { 1, 0 }
  uselistorder label %dec_label_pc_1000798d, { 1, 0 }
}

define i32 @function_10007ae8(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10007ae8:
  store i32 %arg1, i32* @eax, align 4
  %v1_10007af7 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10007af7, i32* @eax, align 4
  %v1_10007aff = mul i32 %v1_10007af7, 65536
  %v1_10007aff.off = or i32 %v1_10007aff, 65535
  %tmp = icmp ult i32 %v1_10007aff.off, 131071
  br i1 %tmp, label %dec_label_pc_10007b14, label %dec_label_pc_10007b06

dec_label_pc_10007b06:                            ; preds = %dec_label_pc_10007ae8
  store i32 %arg1, i32* @edx, align 4
  %v1_10007b0a = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10007b61

dec_label_pc_10007b14:                            ; preds = %dec_label_pc_10007ae8
  %v2_10007b17 = load i32, i32* %arg4, align 4
  %v2_10007b1e = call i32 @SetSwpIdx(i32 %arg1, i32 %v2_10007b17)
  %v3_10007b32 = call i32 @function_10007b65(i32 %arg1, i32 %arg2, i32 %arg3)
  %v1_10007b42 = call i32 @RdSwpIdx(i32 %arg1)
  store i32 %v1_10007b42, i32* @eax, align 4
  store i32 %v1_10007b42, i32* %arg4, align 4
  store i32 %arg1, i32* @edx, align 4
  %v3_10007b55 = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  %sext = shl i32 %v3_10007b32, 16
  %v4_10007b5d = ashr exact i32 %sext, 16
  %v7_10007b5d = and i32 %v3_10007b55, -65536
  %v8_10007b5d = or i32 %v4_10007b5d, %v7_10007b5d
  br label %dec_label_pc_10007b61

dec_label_pc_10007b61:                            ; preds = %dec_label_pc_10007b06, %dec_label_pc_10007b14
  %v0_10007b64 = phi i32 [ %v1_10007b0a, %dec_label_pc_10007b06 ], [ %v8_10007b5d, %dec_label_pc_10007b14 ]
  ret i32 %v0_10007b64

; uselistorder directives
  uselistorder i32 %arg1, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10007b61, { 1, 0 }
}

define i32 @function_10007b65(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10007b65:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i16, align 2
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-36 = alloca i16, align 2
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10007b65 = load i32, i32* @ebp, align 4
  store i32 %v0_10007b65, i32* %stack_var_-4, align 4
  %v4_10007b65 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10007b65, i32* @ebp, align 4
  store i16 0, i16* %stack_var_-20, align 2
  store i16 0, i16* %stack_var_-36, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10007b8e = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10007b8e, i32* @eax, align 4
  %v1_10007b96 = mul i32 %v1_10007b8e, 65536
  %v1_10007b96.off = or i32 %v1_10007b96, 65535
  %tmp = icmp ult i32 %v1_10007b96.off, 131071
  br i1 %tmp, label %dec_label_pc_10007bae, label %dec_label_pc_10007b9d

dec_label_pc_10007b9d:                            ; preds = %dec_label_pc_10007b65
  %v1_10007ba1 = call i32 @GetFuncStatusCode(i32 %arg1)
  store i32 %v1_10007ba1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007f03

dec_label_pc_10007bae:                            ; preds = %dec_label_pc_10007b65
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10007bb2 = call i32 @IsSweeping(i32 %arg1)
  store i32 %v1_10007bb2, i32* @eax, align 4
  %v1_10007bba = mul i32 %v1_10007bb2, 65536
  %v1_10007bba.off = or i32 %v1_10007bba, 65535
  %tmp74 = icmp ult i32 %v1_10007bba.off, 131071
  %v1_10007bbf = icmp eq i1 %tmp74, false
  br i1 %v1_10007bbf, label %dec_label_pc_10007bd4, label %dec_label_pc_10007bc1

dec_label_pc_10007bc1:                            ; preds = %dec_label_pc_10007bae
  store i32 %arg1, i32* @edx, align 4
  %v3_10007bc7 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -14)
  store i32 %v3_10007bc7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007f03

dec_label_pc_10007bd4:                            ; preds = %dec_label_pc_10007bae
  store i32 %arg1, i32* @eax, align 4
  %v1_10007bd8 = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_10007bd8 = trunc i32 %v1_10007bd8 to i16
  store i32 %v1_10007bd8, i32* %eax.global-to-local, align 4
  %v3_10007be8 = icmp slt i16 %v2_10007bd8, 0
  %v2_10007bea = icmp eq i1 %v3_10007be8, false
  br i1 %v2_10007bea, label %dec_label_pc_10007bf5, label %dec_label_pc_10007bec

dec_label_pc_10007bec:                            ; preds = %dec_label_pc_10007bd4
  %sext = mul i32 %v1_10007bd8, 65536
  %v4_10007be4 = sdiv i32 %sext, 65536
  %v4_10007bec = and i32 %v1_10007bd8, 65535
  %v7_10007bec = and i32 %v4_10007be4, -65536
  %v8_10007bec = or i32 %v7_10007bec, %v4_10007bec
  store i32 %v8_10007bec, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007f03

dec_label_pc_10007bf5:                            ; preds = %dec_label_pc_10007bd4
  %v1_10007bf9 = call i32 @RdMaxFreqLimit(i32 %arg1)
  store i32 %v1_10007bf9, i32* %eax.global-to-local, align 4
  %v3_10007c09 = and i32 %v1_10007bf9, 16384
  %v4_10007c09 = icmp eq i32 %v3_10007c09, 0
  br i1 %v4_10007c09, label %dec_label_pc_10007c17, label %dec_label_pc_10007c0e

dec_label_pc_10007c0e:                            ; preds = %dec_label_pc_10007bf5
  %v1_10007c0e = and i32 %v1_10007bf9, -65536
  %v2_10007c0e = or i32 %v1_10007c0e, 65534
  store i32 %v2_10007c0e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007f03

dec_label_pc_10007c17:                            ; preds = %dec_label_pc_10007bf5
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10007c1b = call i32 @RdSwpIdx(i32 %arg1)
  store i32 %v1_10007c1b, i32* @eax, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_10007c2a = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_10007c2a = trunc i32 %v1_10007c2a to i16
  store i32 %v1_10007c2a, i32* %eax.global-to-local, align 4
  %v3_10007c3a = icmp slt i16 %v2_10007c2a, 0
  %v2_10007c3c = icmp eq i1 %v3_10007c3a, false
  br i1 %v2_10007c3c, label %dec_label_pc_10007c47, label %dec_label_pc_10007c3e

dec_label_pc_10007c3e:                            ; preds = %dec_label_pc_10007c17
  %sext11 = mul i32 %v1_10007c2a, 65536
  %v4_10007c36 = sdiv i32 %sext11, 65536
  %v4_10007c3e = and i32 %v1_10007c2a, 65535
  %v7_10007c3e = and i32 %v4_10007c36, -65536
  %v8_10007c3e = or i32 %v7_10007c3e, %v4_10007c3e
  store i32 %v8_10007c3e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007f03

dec_label_pc_10007c47:                            ; preds = %dec_label_pc_10007c17
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10007c4b = call i32 @RdNumSwpPts(i32 %arg1)
  store i32 %v1_10007c4b, i32* @eax, align 4
  %v1_10007c5a = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_10007c5a = trunc i32 %v1_10007c5a to i16
  store i32 %v1_10007c5a, i32* %eax.global-to-local, align 4
  %sext13 = mul i32 %v1_10007c5a, 65536
  %v4_10007c66 = sdiv i32 %sext13, 65536
  store i32 %v4_10007c66, i32* @edx, align 4
  %v2_10007c6a = icmp slt i16 %v2_10007c5a, 0
  %v2_10007c6c = icmp eq i1 %v2_10007c6a, false
  br i1 %v2_10007c6c, label %dec_label_pc_10007c77, label %dec_label_pc_10007c6e

dec_label_pc_10007c6e:                            ; preds = %dec_label_pc_10007c47
  %v4_10007c6e = and i32 %v1_10007c5a, 65535
  %v7_10007c6e = and i32 %v4_10007c66, -65536
  %v8_10007c6e = or i32 %v7_10007c6e, %v4_10007c6e
  store i32 %v8_10007c6e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007f03

dec_label_pc_10007c77:                            ; preds = %dec_label_pc_10007c47
  store i32 %v1_10007c1b, i32* @eax, align 4
  %v15_10007c7a = icmp eq i32 %v1_10007c4b, %v1_10007c1b
  %v1_10007c7d = icmp eq i1 %v15_10007c7a, false
  br i1 %v1_10007c7d, label %dec_label_pc_10007c92, label %dec_label_pc_10007c7f

dec_label_pc_10007c7f:                            ; preds = %dec_label_pc_10007c77
  %v3_10007c85 = call i32 @SetFuncStatusCode(i32 %arg1, i16 4)
  store i32 %v3_10007c85, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007f03

dec_label_pc_10007c92:                            ; preds = %dec_label_pc_10007c77
  store i32 %v1_10007c1b, i32* @edx, align 4
  %v7_10007c98 = icmp slt i32 %v1_10007c4b, %v1_10007c1b
  br i1 %v7_10007c98, label %dec_label_pc_10007c9a, label %dec_label_pc_10007cad

dec_label_pc_10007c9a:                            ; preds = %dec_label_pc_10007c92
  store i32 %arg1, i32* @eax, align 4
  %v3_10007ca0 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -2)
  store i32 %v3_10007ca0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007f03

dec_label_pc_10007cad:                            ; preds = %dec_label_pc_10007c92
  %v2_10007cb3 = mul i32 %v1_10007c1b, 2
  %v3_10007cb3 = add i32 %v2_10007cb3, %arg2
  store i32 %v3_10007cb3, i32* %stack_var_-64, align 4
  %v2_10007cbf = mul i32 %v1_10007c1b, 4
  %v3_10007cbf = add i32 %v2_10007cbf, %arg3
  store i32 %v3_10007cbf, i32* %eax.global-to-local, align 4
  %v5_10007ccb = icmp sgt i32 %v1_10007c4b, %v1_10007c1b
  br i1 %v5_10007ccb, label %dec_label_pc_10007cd6, label %dec_label_pc_10007ccd

dec_label_pc_10007ccd:                            ; preds = %dec_label_pc_10007cad
  %v1_10007ccd = and i32 %v3_10007cbf, -65536
  %v2_10007ccd = or i32 %v1_10007ccd, 65534
  store i32 %v2_10007ccd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007f03

dec_label_pc_10007cd6:                            ; preds = %dec_label_pc_10007cad
  %v2_10007cd6 = ptrtoint i16* %stack_var_-36 to i32
  %v2_10007cda = ptrtoint i32* %stack_var_-40 to i32
  %v5_10007ce5 = sub i32 %v1_10007c4b, %v1_10007c1b
  store i32 %v5_10007ce5, i32* @edx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v6_10007ced = trunc i32 %arg1 to i16
  %v7_10007ced = call i32 @function_100040c9(i16 %v6_10007ced, i32 %v5_10007ce5, i32 3, i32 %v2_10007cda, i32 %v2_10007cd6, i32 %v3_10007cb3)
  store i32 %v7_10007ced, i32* %eax.global-to-local, align 4
  %v1_10007cf5 = mul i32 %v7_10007ced, 65536
  %v1_10007cf5.off = or i32 %v1_10007cf5, 65535
  %tmp75 = icmp ult i32 %v1_10007cf5.off, 131071
  br i1 %tmp75, label %dec_label_pc_10007d05, label %dec_label_pc_10007cfc

dec_label_pc_10007cfc:                            ; preds = %dec_label_pc_10007cd6
  %v1_10007cfc = and i32 %v7_10007ced, -65536
  %v2_10007cfc = or i32 %v1_10007cfc, 65534
  store i32 %v2_10007cfc, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007f03

dec_label_pc_10007d05:                            ; preds = %dec_label_pc_10007cd6
  %v3_10007d05 = load i32, i32* %stack_var_-40, align 4
  %v4_10007d05 = icmp eq i32 %v3_10007d05, 0
  %v1_10007d09 = icmp eq i1 %v4_10007d05, false
  br i1 %v1_10007d09, label %dec_label_pc_10007d13, label %dec_label_pc_10007d0b

dec_label_pc_10007d0b:                            ; preds = %dec_label_pc_10007d05
  %v12_10007d0b = and i32 %v7_10007ced, -65536
  store i32 %v12_10007d0b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007f03

dec_label_pc_10007d13:                            ; preds = %dec_label_pc_10007d05
  %v3_10007d13 = load i16, i16* %stack_var_-36, align 2
  %v4_10007d13 = sext i16 %v3_10007d13 to i32
  %v6_10007d13 = load i32, i32* @edx, align 4
  %v7_10007d13 = and i32 %v6_10007d13, -65536
  %v8_10007d13 = or i32 %v7_10007d13, %v4_10007d13
  store i32 %v8_10007d13, i32* @edx, align 4
  store i16 %v3_10007d13, i16* %stack_var_-20, align 2
  %v5_10007d3326 = icmp sgt i32 %v3_10007d05, 0
  br i1 %v5_10007d3326, label %dec_label_pc_10007d4d.preheader.lr.ph, label %dec_label_pc_10007ebd

dec_label_pc_10007d4d.preheader.lr.ph:            ; preds = %dec_label_pc_10007d13
  %v2_10007d5e = ptrtoint i16* %stack_var_-20 to i32
  br label %dec_label_pc_10007d4d.preheader

dec_label_pc_10007d4d.preheader:                  ; preds = %dec_label_pc_10007d4d.preheader.lr.ph, %dec_label_pc_10007e82
  %v3_10007d5638 = phi i16 [ %v3_10007d13, %dec_label_pc_10007d4d.preheader.lr.ph ], [ %v3_10007e82, %dec_label_pc_10007e82 ]
  %storemerge27 = phi i32 [ 0, %dec_label_pc_10007d4d.preheader.lr.ph ], [ %v1_10007d27, %dec_label_pc_10007e82 ]
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007d56

dec_label_pc_10007d56:                            ; preds = %dec_label_pc_10007d84.dec_label_pc_10007d56_crit_edge, %dec_label_pc_10007d4d.preheader
  %v3_10007d56 = phi i16 [ %v3_10007d5638, %dec_label_pc_10007d4d.preheader ], [ %v3_10007d56.pre, %dec_label_pc_10007d84.dec_label_pc_10007d56_crit_edge ]
  %indvars.iv = phi i32 [ 0, %dec_label_pc_10007d4d.preheader ], [ %indvars.iv.next, %dec_label_pc_10007d84.dec_label_pc_10007d56_crit_edge ]
  store i16 %v3_10007d56, i16* %stack_var_-20, align 2
  store i32 %v2_10007d5e, i32* @edx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_10007d66 = call i32 @function_100039d0(i16 %v6_10007ced, i32 %v2_10007d5e)
  store i32 %v3_10007d66, i32* %eax.global-to-local, align 4
  %v1_10007d76 = call i32 @RdErrorStatus(i32 %arg1)
  store i32 %v1_10007d76, i32* %eax.global-to-local, align 4
  %v1_10007d7e = icmp eq i32 %v1_10007d76, 0
  %v1_10007d80 = icmp eq i1 %v1_10007d7e, false
  br i1 %v1_10007d80, label %dec_label_pc_10007d84, label %dec_label_pc_10007d86

dec_label_pc_10007d84:                            ; preds = %dec_label_pc_10007d56
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %sext47 = mul i32 %indvars.iv.next, 65536
  %v4_10007d4d = sdiv i32 %sext47, 65536
  store i32 %v4_10007d4d, i32* %eax.global-to-local, align 4
  %v11_10007d51 = icmp slt i32 %indvars.iv.next, 3
  br i1 %v11_10007d51, label %dec_label_pc_10007d84.dec_label_pc_10007d56_crit_edge, label %dec_label_pc_10007d86

dec_label_pc_10007d84.dec_label_pc_10007d56_crit_edge: ; preds = %dec_label_pc_10007d84
  %v3_10007d56.pre = load i16, i16* %stack_var_-36, align 2
  br label %dec_label_pc_10007d56

dec_label_pc_10007d86:                            ; preds = %dec_label_pc_10007d56, %dec_label_pc_10007d84
  store i32 %arg1, i32* @edx, align 4
  %v1_10007d8a = call i32 @RdErrorStatus(i32 %arg1)
  store i32 %v1_10007d8a, i32* %eax.global-to-local, align 4
  %v1_10007d92 = icmp eq i32 %v1_10007d8a, 0
  br i1 %v1_10007d92, label %dec_label_pc_10007d9b, label %dec_label_pc_10007ebd.loopexit

dec_label_pc_10007d9b:                            ; preds = %dec_label_pc_10007d86
  %v4_10007d66.le = trunc i32 %v3_10007d66 to i16
  %v3_10007d9b = load i16, i16* %stack_var_-20, align 2
  %v4_10007d9b = sext i16 %v3_10007d9b to i32
  store i16 %v3_10007d9b, i16* %stack_var_-36, align 2
  %v3_10007da6 = load i32, i32* %stack_var_-64, align 4
  %v4_10007da9 = and i32 %v3_10007d66, 65535
  %v6_10007da9 = and i32 %v4_10007d9b, -65536
  %v7_10007da9 = or i32 %v6_10007da9, %v4_10007da9
  store i32 %v7_10007da9, i32* %eax.global-to-local, align 4
  %v4_10007dad = mul i32 %storemerge27, 2
  %v5_10007dad = add i32 %v3_10007da6, %v4_10007dad
  %v6_10007dad = inttoptr i32 %v5_10007dad to i16*
  store i16 %v4_10007d66.le, i16* %v6_10007dad, align 2
  %v6_10007dce.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007dce

dec_label_pc_10007dce:                            ; preds = %dec_label_pc_10007d9b, %dec_label_pc_10007dfc
  %v6_10007dce = phi i32 [ %v6_10007dce.pre, %dec_label_pc_10007d9b ], [ %v1_10007dee, %dec_label_pc_10007dfc ]
  %indvars.iv31 = phi i32 [ 0, %dec_label_pc_10007d9b ], [ %indvars.iv.next32, %dec_label_pc_10007dfc ]
  %v3_10007dce = load i16, i16* %stack_var_-36, align 2
  %v4_10007dce = sext i16 %v3_10007dce to i32
  %v7_10007dce = and i32 %v6_10007dce, -65536
  %v8_10007dce = or i32 %v4_10007dce, %v7_10007dce
  store i32 %v8_10007dce, i32* %eax.global-to-local, align 4
  store i16 %v3_10007dce, i16* %stack_var_-20, align 2
  store i32 %arg1, i32* @edx, align 4
  %v3_10007dde = call i32 @function_100039d0(i16 %v6_10007ced, i32 %v2_10007d5e)
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10007dee = call i32 @RdErrorStatus(i32 %arg1)
  store i32 %v1_10007dee, i32* %eax.global-to-local, align 4
  %v1_10007df6 = icmp eq i32 %v1_10007dee, 0
  %v1_10007df8 = icmp eq i1 %v1_10007df6, false
  br i1 %v1_10007df8, label %dec_label_pc_10007dfc, label %dec_label_pc_10007dfe

dec_label_pc_10007dfc:                            ; preds = %dec_label_pc_10007dce
  %indvars.iv.next32 = add nuw nsw i32 %indvars.iv31, 1
  %sext46 = mul i32 %indvars.iv.next32, 65536
  %v4_10007dc5 = sdiv i32 %sext46, 65536
  store i32 %v4_10007dc5, i32* @edx, align 4
  %v11_10007dc9 = icmp slt i32 %indvars.iv.next32, 3
  br i1 %v11_10007dc9, label %dec_label_pc_10007dce, label %dec_label_pc_10007dfe

dec_label_pc_10007dfe:                            ; preds = %dec_label_pc_10007dce, %dec_label_pc_10007dfc
  %v1_10007e02 = call i32 @RdErrorStatus(i32 %arg1)
  store i32 %v1_10007e02, i32* %eax.global-to-local, align 4
  %v1_10007e0a = icmp eq i32 %v1_10007e02, 0
  br i1 %v1_10007e0a, label %dec_label_pc_10007e13, label %dec_label_pc_10007ebd.loopexit

dec_label_pc_10007e13:                            ; preds = %dec_label_pc_10007dfe
  %v3_10007e13 = load i16, i16* %stack_var_-20, align 2
  store i16 %v3_10007e13, i16* %stack_var_-36, align 2
  %v4_10007e1b = and i32 %v3_10007dde, 65535
  store i32 %v4_10007e1b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007e40

dec_label_pc_10007e40:                            ; preds = %dec_label_pc_10007e6e.dec_label_pc_10007e40_crit_edge, %dec_label_pc_10007e13
  %v6_10007e40 = phi i32 [ %v4_10007e1b, %dec_label_pc_10007e13 ], [ %v1_10007e60, %dec_label_pc_10007e6e.dec_label_pc_10007e40_crit_edge ]
  %v3_10007e40 = phi i16 [ %v3_10007e13, %dec_label_pc_10007e13 ], [ %v3_10007e40.pre, %dec_label_pc_10007e6e.dec_label_pc_10007e40_crit_edge ]
  %indvars.iv34 = phi i32 [ 0, %dec_label_pc_10007e13 ], [ %indvars.iv.next35, %dec_label_pc_10007e6e.dec_label_pc_10007e40_crit_edge ]
  %v4_10007e40 = sext i16 %v3_10007e40 to i32
  %v7_10007e40 = and i32 %v6_10007e40, -65536
  %v8_10007e40 = or i32 %v4_10007e40, %v7_10007e40
  store i32 %v8_10007e40, i32* %eax.global-to-local, align 4
  store i16 %v3_10007e40, i16* %stack_var_-20, align 2
  store i32 %arg1, i32* @edx, align 4
  %v3_10007e50 = call i32 @function_100039d0(i16 %v6_10007ced, i32 %v2_10007d5e)
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10007e60 = call i32 @RdErrorStatus(i32 %arg1)
  store i32 %v1_10007e60, i32* %eax.global-to-local, align 4
  %v1_10007e68 = icmp eq i32 %v1_10007e60, 0
  %v1_10007e6a = icmp eq i1 %v1_10007e68, false
  br i1 %v1_10007e6a, label %dec_label_pc_10007e6e, label %dec_label_pc_10007e70

dec_label_pc_10007e6e:                            ; preds = %dec_label_pc_10007e40
  %indvars.iv.next35 = add nuw nsw i32 %indvars.iv34, 1
  %sext45 = mul i32 %indvars.iv.next35, 65536
  %v4_10007e37 = sdiv i32 %sext45, 65536
  store i32 %v4_10007e37, i32* @edx, align 4
  %v11_10007e3b = icmp slt i32 %indvars.iv.next35, 3
  br i1 %v11_10007e3b, label %dec_label_pc_10007e6e.dec_label_pc_10007e40_crit_edge, label %dec_label_pc_10007e70

dec_label_pc_10007e6e.dec_label_pc_10007e40_crit_edge: ; preds = %dec_label_pc_10007e6e
  %v3_10007e40.pre = load i16, i16* %stack_var_-36, align 2
  br label %dec_label_pc_10007e40

dec_label_pc_10007e70:                            ; preds = %dec_label_pc_10007e40, %dec_label_pc_10007e6e
  %v1_10007e74 = call i32 @RdErrorStatus(i32 %arg1)
  store i32 %v1_10007e74, i32* %eax.global-to-local, align 4
  %v1_10007e7c = icmp eq i32 %v1_10007e74, 0
  br i1 %v1_10007e7c, label %dec_label_pc_10007e82, label %dec_label_pc_10007ebd.loopexit

dec_label_pc_10007e82:                            ; preds = %dec_label_pc_10007e70
  %v3_10007e82 = load i16, i16* %stack_var_-20, align 2
  store i16 %v3_10007e82, i16* %stack_var_-36, align 2
  %sext29 = mul i32 %v3_10007e50, 65536
  %v2_10007ead = or i32 %sext29, %v4_10007e1b
  store i32 %v3_10007cbf, i32* @edx, align 4
  %v3_10007eb5 = mul i32 %storemerge27, 4
  %v4_10007eb5 = add i32 %v3_10007eb5, %v3_10007cbf
  %v5_10007eb5 = inttoptr i32 %v4_10007eb5 to i32*
  store i32 %v2_10007ead, i32* %v5_10007eb5, align 4
  %v1_10007d27 = add i32 %storemerge27, 1
  store i32 %v1_10007d27, i32* %eax.global-to-local, align 4
  %v4_10007d30 = load i32, i32* %stack_var_-40, align 4
  %v5_10007d33 = icmp slt i32 %v1_10007d27, %v4_10007d30
  br i1 %v5_10007d33, label %dec_label_pc_10007d4d.preheader, label %dec_label_pc_10007ebd.loopexit

dec_label_pc_10007ebd.loopexit:                   ; preds = %dec_label_pc_10007e70, %dec_label_pc_10007dfe, %dec_label_pc_10007d86, %dec_label_pc_10007e82
  %v6_10007ebd.ph = phi i32 [ %v1_10007d27, %dec_label_pc_10007e82 ], [ %v1_10007d8a, %dec_label_pc_10007d86 ], [ %v1_10007e02, %dec_label_pc_10007dfe ], [ %v1_10007e74, %dec_label_pc_10007e70 ]
  %v3_10007ebd.pre = load i16, i16* %stack_var_-20, align 2
  br label %dec_label_pc_10007ebd

dec_label_pc_10007ebd:                            ; preds = %dec_label_pc_10007ebd.loopexit, %dec_label_pc_10007d13
  %v3_10007ebd = phi i16 [ %v3_10007d13, %dec_label_pc_10007d13 ], [ %v3_10007ebd.pre, %dec_label_pc_10007ebd.loopexit ]
  %v6_10007ebd = phi i32 [ %v7_10007ced, %dec_label_pc_10007d13 ], [ %v6_10007ebd.ph, %dec_label_pc_10007ebd.loopexit ]
  %v4_10007ebd = sext i16 %v3_10007ebd to i32
  %v7_10007ebd = and i32 %v6_10007ebd, -65536
  %v8_10007ebd = or i32 %v4_10007ebd, %v7_10007ebd
  store i32 %v8_10007ebd, i32* %eax.global-to-local, align 4
  %v3_10007ec6 = call i32 @function_10003bb8(i16 %v6_10007ced, i32 %v8_10007ebd)
  %v4_10007ec6 = trunc i32 %v3_10007ec6 to i16
  store i32 %v3_10007ec6, i32* @eax, align 4
  %v2_10007ed6 = icmp eq i16 %v4_10007ec6, 0
  %v1_10007ed8 = icmp eq i1 %v2_10007ed6, false
  br i1 %v1_10007ed8, label %dec_label_pc_10007ef1, label %dec_label_pc_10007eda

dec_label_pc_10007eda:                            ; preds = %dec_label_pc_10007ebd
  %v4_10007edd = load i32, i32* %stack_var_-40, align 4
  %v5_10007edd = add i32 %v4_10007edd, %v1_10007c1b
  store i32 %v5_10007edd, i32* %eax.global-to-local, align 4
  %v2_10007ee5 = call i32 @SetSwpIdx(i32 %arg1, i32 %v5_10007edd)
  store i32 %v2_10007ee5, i32* @eax, align 4
  br label %dec_label_pc_10007ef1

dec_label_pc_10007ef1:                            ; preds = %dec_label_pc_10007ebd, %dec_label_pc_10007eda
  %stack_var_-52.0 = phi i32 [ %v3_10007ec6, %dec_label_pc_10007ebd ], [ %v2_10007ee5, %dec_label_pc_10007eda ]
  store i32 %arg1, i32* @edx, align 4
  %v3_10007ef7 = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  %v4_10007eff = and i32 %stack_var_-52.0, 65535
  %v6_10007eff = and i32 %v3_10007ef7, -65536
  %v7_10007eff = or i32 %v6_10007eff, %v4_10007eff
  store i32 %v7_10007eff, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007f03

dec_label_pc_10007f03:                            ; preds = %dec_label_pc_10007d0b, %dec_label_pc_10007cfc, %dec_label_pc_10007ccd, %dec_label_pc_10007c9a, %dec_label_pc_10007c7f, %dec_label_pc_10007c6e, %dec_label_pc_10007c3e, %dec_label_pc_10007c0e, %dec_label_pc_10007bec, %dec_label_pc_10007bc1, %dec_label_pc_10007b9d, %dec_label_pc_10007ef1
  %v0_10007f06 = phi i32 [ %v12_10007d0b, %dec_label_pc_10007d0b ], [ %v2_10007cfc, %dec_label_pc_10007cfc ], [ %v2_10007ccd, %dec_label_pc_10007ccd ], [ %v3_10007ca0, %dec_label_pc_10007c9a ], [ %v3_10007c85, %dec_label_pc_10007c7f ], [ %v8_10007c6e, %dec_label_pc_10007c6e ], [ %v8_10007c3e, %dec_label_pc_10007c3e ], [ %v2_10007c0e, %dec_label_pc_10007c0e ], [ %v8_10007bec, %dec_label_pc_10007bec ], [ %v3_10007bc7, %dec_label_pc_10007bc1 ], [ %v1_10007ba1, %dec_label_pc_10007b9d ], [ %v7_10007eff, %dec_label_pc_10007ef1 ]
  %v2_10007f05 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10007f05, i32* @ebp, align 4
  ret i32 %v0_10007f06

; uselistorder directives
  uselistorder i32 %v3_10007ec6, { 0, 2, 1 }
  uselistorder i32 %v1_10007d27, { 0, 1, 3, 2 }
  uselistorder i16 %v3_10007e82, { 1, 0 }
  uselistorder i32 %indvars.iv.next35, { 1, 0, 2 }
  uselistorder i32 %v1_10007e60, { 0, 2, 1 }
  uselistorder i16 %v3_10007e40, { 1, 0 }
  uselistorder i32 %v4_10007e1b, { 0, 2, 1 }
  uselistorder i32 %indvars.iv.next32, { 1, 0, 2 }
  uselistorder i32 %v1_10007dee, { 0, 2, 1 }
  uselistorder i32 %indvars.iv.next, { 1, 0, 2 }
  uselistorder i32 %storemerge27, { 2, 1, 0 }
  uselistorder i32 %v7_10007ced, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v3_10007cbf, { 0, 2, 1, 3 }
  uselistorder i32 %v4_10007c66, { 1, 0 }
  uselistorder i32 %v1_10007c5a, { 1, 0, 3, 2 }
  uselistorder i32 %v1_10007c4b, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_10007c2a, { 1, 0, 3, 2 }
  uselistorder i32 %v1_10007c1b, { 3, 4, 0, 5, 6, 1, 7, 2, 8, 9 }
  uselistorder i32 %v1_10007bf9, { 1, 0, 2 }
  uselistorder i32 %v1_10007bd8, { 1, 0, 3, 2 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i16* %stack_var_-36, { 8, 0, 7, 6, 5, 1, 4, 2, 3 }
  uselistorder i16* %stack_var_-20, { 0, 9, 8, 7, 6, 5, 4, 1, 3, 2 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 16, 17, 18, 41, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %arg1, { 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2, 4, 1, 0 }
  uselistorder label %dec_label_pc_10007f03, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_10007ef1, { 1, 0 }
  uselistorder label %dec_label_pc_10007ebd.loopexit, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_10007e70, { 1, 0 }
  uselistorder label %dec_label_pc_10007dfe, { 1, 0 }
  uselistorder label %dec_label_pc_10007dce, { 1, 0 }
  uselistorder label %dec_label_pc_10007d86, { 1, 0 }
  uselistorder label %dec_label_pc_10007d4d.preheader, { 1, 0 }
}

define i32 @function_10007f07(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_10007f07:
  store i32 %arg1, i32* @eax, align 4
  %v1_10007f16 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10007f16, i32* @eax, align 4
  %v1_10007f1e = mul i32 %v1_10007f16, 65536
  %v1_10007f1e.off = or i32 %v1_10007f1e, 65535
  %tmp = icmp ult i32 %v1_10007f1e.off, 131071
  br i1 %tmp, label %dec_label_pc_10007f33, label %dec_label_pc_10007f25

dec_label_pc_10007f25:                            ; preds = %dec_label_pc_10007f07
  store i32 %arg1, i32* @edx, align 4
  %v1_10007f29 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10007f88

dec_label_pc_10007f33:                            ; preds = %dec_label_pc_10007f07
  %v2_10007f36 = load i32, i32* %arg6, align 4
  %v2_10007f3d = call i32 @SetSwpIdx(i32 %arg1, i32 %v2_10007f36)
  %v5_10007f59 = call i32 @function_10007f8c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5)
  %v1_10007f69 = call i32 @RdSwpIdx(i32 %arg1)
  store i32 %v1_10007f69, i32* @eax, align 4
  store i32 %v1_10007f69, i32* %arg6, align 4
  store i32 %arg1, i32* @edx, align 4
  %v3_10007f7c = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  %sext = shl i32 %v5_10007f59, 16
  %v4_10007f84 = ashr exact i32 %sext, 16
  %v7_10007f84 = and i32 %v3_10007f7c, -65536
  %v8_10007f84 = or i32 %v4_10007f84, %v7_10007f84
  br label %dec_label_pc_10007f88

dec_label_pc_10007f88:                            ; preds = %dec_label_pc_10007f25, %dec_label_pc_10007f33
  %v0_10007f8b = phi i32 [ %v1_10007f29, %dec_label_pc_10007f25 ], [ %v8_10007f84, %dec_label_pc_10007f33 ]
  ret i32 %v0_10007f8b

; uselistorder directives
  uselistorder i32 %arg1, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10007f88, { 1, 0 }
}

define i32 @function_10007f8c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10007f8c:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_1()
  %stack_var_-20 = alloca i16, align 2
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-36 = alloca i16, align 2
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10007f8c = load i32, i32* @ebp, align 4
  store i32 %v0_10007f8c, i32* %stack_var_-4, align 4
  %v4_10007f8c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10007f8c, i32* @ebp, align 4
  %v15_10007f8f = ptrtoint i32* %stack_var_-72 to i32
  store i16 0, i16* %stack_var_-20, align 2
  store i16 0, i16* %stack_var_-36, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10007fb5 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10007fb5, i32* @eax, align 4
  %v1_10007fbd = mul i32 %v1_10007fb5, 65536
  %v1_10007fbd.off = or i32 %v1_10007fbd, 65535
  %tmp132 = icmp ult i32 %v1_10007fbd.off, 131071
  br i1 %tmp132, label %dec_label_pc_10007fd5, label %dec_label_pc_10007fc4

dec_label_pc_10007fc4:                            ; preds = %dec_label_pc_10007f8c
  %v1_10007fc8 = call i32 @GetFuncStatusCode(i32 %arg1)
  store i32 %v1_10007fc8, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008474

dec_label_pc_10007fd5:                            ; preds = %dec_label_pc_10007f8c
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10007fd9 = call i32 @IsSweeping(i32 %arg1)
  store i32 %v1_10007fd9, i32* @eax, align 4
  %v1_10007fe1 = mul i32 %v1_10007fd9, 65536
  %v1_10007fe1.off = or i32 %v1_10007fe1, 65535
  %tmp133 = icmp ult i32 %v1_10007fe1.off, 131071
  %v1_10007fe6 = icmp eq i1 %tmp133, false
  br i1 %v1_10007fe6, label %dec_label_pc_10007ffb, label %dec_label_pc_10007fe8

dec_label_pc_10007fe8:                            ; preds = %dec_label_pc_10007fd5
  store i32 %arg1, i32* @edx, align 4
  %v3_10007fee = call i32 @SetFuncStatusCode(i32 %arg1, i16 -14)
  store i32 %v3_10007fee, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008474

dec_label_pc_10007ffb:                            ; preds = %dec_label_pc_10007fd5
  store i32 %arg1, i32* @eax, align 4
  %v1_10007fff = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_10007fff = trunc i32 %v1_10007fff to i16
  store i32 %v1_10007fff, i32* %eax.global-to-local, align 4
  %v3_1000800f = icmp slt i16 %v2_10007fff, 0
  %v2_10008011 = icmp eq i1 %v3_1000800f, false
  br i1 %v2_10008011, label %dec_label_pc_1000801c, label %dec_label_pc_10008013

dec_label_pc_10008013:                            ; preds = %dec_label_pc_10007ffb
  %sext = mul i32 %v1_10007fff, 65536
  %v4_1000800b = sdiv i32 %sext, 65536
  %v4_10008013 = and i32 %v1_10007fff, 65535
  %v7_10008013 = and i32 %v4_1000800b, -65536
  %v8_10008013 = or i32 %v7_10008013, %v4_10008013
  store i32 %v8_10008013, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008474

dec_label_pc_1000801c:                            ; preds = %dec_label_pc_10007ffb
  %v1_10008020 = call i32 @RdMaxFreqLimit(i32 %arg1)
  store i32 %v1_10008020, i32* %eax.global-to-local, align 4
  %v3_10008030 = and i32 %v1_10008020, 16384
  %v4_10008030 = icmp eq i32 %v3_10008030, 0
  br i1 %v4_10008030, label %dec_label_pc_1000803e, label %dec_label_pc_10008035

dec_label_pc_10008035:                            ; preds = %dec_label_pc_1000801c
  %v1_10008035 = and i32 %v1_10008020, -65536
  %v2_10008035 = or i32 %v1_10008035, 65534
  store i32 %v2_10008035, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008474

dec_label_pc_1000803e:                            ; preds = %dec_label_pc_1000801c
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10008042 = call i32 @RdSwpIdx(i32 %arg1)
  store i32 %v1_10008042, i32* @eax, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_10008051 = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_10008051 = trunc i32 %v1_10008051 to i16
  store i32 %v1_10008051, i32* %eax.global-to-local, align 4
  %v3_10008061 = icmp slt i16 %v2_10008051, 0
  %v2_10008063 = icmp eq i1 %v3_10008061, false
  br i1 %v2_10008063, label %dec_label_pc_1000806e, label %dec_label_pc_10008065

dec_label_pc_10008065:                            ; preds = %dec_label_pc_1000803e
  %sext17 = mul i32 %v1_10008051, 65536
  %v4_1000805d = sdiv i32 %sext17, 65536
  %v4_10008065 = and i32 %v1_10008051, 65535
  %v7_10008065 = and i32 %v4_1000805d, -65536
  %v8_10008065 = or i32 %v7_10008065, %v4_10008065
  store i32 %v8_10008065, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008474

dec_label_pc_1000806e:                            ; preds = %dec_label_pc_1000803e
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10008072 = call i32 @RdNumSwpPts(i32 %arg1)
  store i32 %v1_10008072, i32* @eax, align 4
  %v1_10008081 = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_10008081 = trunc i32 %v1_10008081 to i16
  store i32 %v1_10008081, i32* %eax.global-to-local, align 4
  %sext19 = mul i32 %v1_10008081, 65536
  %v4_1000808d = sdiv i32 %sext19, 65536
  store i32 %v4_1000808d, i32* @edx, align 4
  %v2_10008091 = icmp slt i16 %v2_10008081, 0
  %v2_10008093 = icmp eq i1 %v2_10008091, false
  br i1 %v2_10008093, label %dec_label_pc_1000809e, label %dec_label_pc_10008095

dec_label_pc_10008095:                            ; preds = %dec_label_pc_1000806e
  %v4_10008095 = and i32 %v1_10008081, 65535
  %v7_10008095 = and i32 %v4_1000808d, -65536
  %v8_10008095 = or i32 %v7_10008095, %v4_10008095
  store i32 %v8_10008095, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008474

dec_label_pc_1000809e:                            ; preds = %dec_label_pc_1000806e
  store i32 %v1_10008042, i32* @eax, align 4
  %v15_100080a1 = icmp eq i32 %v1_10008072, %v1_10008042
  %v1_100080a4 = icmp eq i1 %v15_100080a1, false
  br i1 %v1_100080a4, label %dec_label_pc_100080b9, label %dec_label_pc_100080a6

dec_label_pc_100080a6:                            ; preds = %dec_label_pc_1000809e
  %v3_100080ac = call i32 @SetFuncStatusCode(i32 %arg1, i16 4)
  store i32 %v3_100080ac, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008474

dec_label_pc_100080b9:                            ; preds = %dec_label_pc_1000809e
  store i32 %v1_10008042, i32* @edx, align 4
  %v7_100080bf = icmp slt i32 %v1_10008072, %v1_10008042
  br i1 %v7_100080bf, label %dec_label_pc_100080c1, label %dec_label_pc_100080d4

dec_label_pc_100080c1:                            ; preds = %dec_label_pc_100080b9
  store i32 %arg1, i32* @eax, align 4
  %v3_100080c7 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -2)
  store i32 %v3_100080c7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008474

dec_label_pc_100080d4:                            ; preds = %dec_label_pc_100080b9
  %v2_100080da = mul i32 %v1_10008042, 2
  %v3_100080da = add i32 %v2_100080da, %arg2
  %v3_100080e6 = add i32 %v2_100080da, %arg3
  store i32 %v3_100080e6, i32* %stack_var_-72, align 4
  %v2_100080f2 = mul i32 %v1_10008042, 4
  %v3_100080f2 = add i32 %v2_100080f2, %arg4
  %v3_100080fe = add i32 %v2_100080f2, %arg5
  %v2_10008104 = ptrtoint i16* %stack_var_-36 to i32
  %v2_10008108 = ptrtoint i32* %stack_var_-40 to i32
  store i32 6, i32* %eax.global-to-local, align 4
  %v5_10008113 = sub i32 %v1_10008072, %v1_10008042
  store i32 %arg1, i32* @edx, align 4
  %v6_1000811b = trunc i32 %arg1 to i16
  %v7_1000811b = call i32 @function_100040c9(i16 %v6_1000811b, i32 %v5_10008113, i32 6, i32 %v2_10008108, i32 %v2_10008104, i32 %v3_100080e6)
  %v1_10008123 = mul i32 %v7_1000811b, 65536
  %v2_10008123 = sdiv i32 %v1_10008123, 65536
  store i32 %v2_10008123, i32* %eax.global-to-local, align 4
  %v1_10008123.off = or i32 %v1_10008123, 65535
  %tmp134 = icmp ult i32 %v1_10008123.off, 131071
  br i1 %tmp134, label %dec_label_pc_10008133, label %dec_label_pc_1000812a

dec_label_pc_1000812a:                            ; preds = %dec_label_pc_100080d4
  %v1_1000812a = and i32 %v2_10008123, -65536
  %v2_1000812a = or i32 %v1_1000812a, 65534
  store i32 %v2_1000812a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008474

dec_label_pc_10008133:                            ; preds = %dec_label_pc_100080d4
  %v3_10008133 = load i32, i32* %stack_var_-40, align 4
  %v4_10008133 = icmp eq i32 %v3_10008133, 0
  %v1_10008137 = icmp eq i1 %v4_10008133, false
  br i1 %v1_10008137, label %dec_label_pc_10008141, label %dec_label_pc_10008139

dec_label_pc_10008139:                            ; preds = %dec_label_pc_10008133
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008474

dec_label_pc_10008141:                            ; preds = %dec_label_pc_10008133
  %v3_10008141 = load i16, i16* %stack_var_-36, align 2
  store i16 %v3_10008141, i16* %stack_var_-20, align 2
  store i32 0, i32* %eax.global-to-local, align 4
  %v5_1000816146 = icmp sgt i32 %v3_10008133, 0
  br i1 %v5_1000816146, label %dec_label_pc_1000817b.preheader.lr.ph, label %dec_label_pc_10008462

dec_label_pc_1000817b.preheader.lr.ph:            ; preds = %dec_label_pc_10008141
  %v2_1000818c = ptrtoint i16* %stack_var_-20 to i32
  br label %dec_label_pc_1000817b.preheader

dec_label_pc_1000817b.preheader:                  ; preds = %dec_label_pc_10008430, %dec_label_pc_1000817b.preheader.lr.ph
  %v1_1000818f.pre = phi i32 [ %v15_10007f8f, %dec_label_pc_1000817b.preheader.lr.ph ], [ %v1_1000818f.pre.pre, %dec_label_pc_10008430 ]
  %v3_1000818487 = phi i16 [ %v3_10008141, %dec_label_pc_1000817b.preheader.lr.ph ], [ %v3_10008430, %dec_label_pc_10008430 ]
  %storemerge48 = phi i32 [ 0, %dec_label_pc_1000817b.preheader.lr.ph ], [ %v1_10008155, %dec_label_pc_10008430 ]
  %stack_var_-8.047 = phi i32 [ %tmp, %dec_label_pc_1000817b.preheader.lr.ph ], [ %v1_1000843b, %dec_label_pc_10008430 ]
  br label %dec_label_pc_10008184

dec_label_pc_10008184:                            ; preds = %dec_label_pc_100081b2.dec_label_pc_10008184_crit_edge, %dec_label_pc_1000817b.preheader
  %v1_1000818f = phi i32 [ %v1_1000818f.pre, %dec_label_pc_1000817b.preheader ], [ %v1_100081a9, %dec_label_pc_100081b2.dec_label_pc_10008184_crit_edge ]
  %v6_10008184 = phi i32 [ %storemerge48, %dec_label_pc_1000817b.preheader ], [ %v2_100081a4, %dec_label_pc_100081b2.dec_label_pc_10008184_crit_edge ]
  %v3_10008184 = phi i16 [ %v3_1000818487, %dec_label_pc_1000817b.preheader ], [ %v3_10008184.pre, %dec_label_pc_100081b2.dec_label_pc_10008184_crit_edge ]
  %indvars.iv = phi i32 [ 0, %dec_label_pc_1000817b.preheader ], [ %indvars.iv.next, %dec_label_pc_100081b2.dec_label_pc_10008184_crit_edge ]
  %v4_10008184 = sext i16 %v3_10008184 to i32
  %v7_10008184 = and i32 %v6_10008184, -65536
  %v8_10008184 = or i32 %v4_10008184, %v7_10008184
  store i32 %v8_10008184, i32* %eax.global-to-local, align 4
  store i16 %v3_10008184, i16* %stack_var_-20, align 2
  %v2_1000818f = add i32 %v1_1000818f, -4
  %v3_1000818f = inttoptr i32 %v2_1000818f to i32*
  store i32 %v2_1000818c, i32* %v3_1000818f, align 4
  store i32 %arg1, i32* @edx, align 4
  %v2_10008193 = add i32 %v1_1000818f, -8
  %v3_10008193 = inttoptr i32 %v2_10008193 to i32*
  store i32 %arg1, i32* %v3_10008193, align 4
  %v5_10008194 = call i32 @function_100039d0(i16 %v3_10008184, i32 %indvars.iv)
  %v0_10008199 = load i32, i32* @esp, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v2_100081a3 = add i32 %v0_10008199, 4
  %v3_100081a3 = inttoptr i32 %v2_100081a3 to i32*
  store i32 %arg1, i32* %v3_100081a3, align 4
  %sext26 = mul i32 %v5_10008194, 65536
  %v1_100081a4 = sdiv i32 %sext26, 65536
  %v2_100081a4 = call i32 @RdErrorStatus(i32 %v1_100081a4)
  store i32 %v2_100081a4, i32* %eax.global-to-local, align 4
  %v0_100081a9 = load i32, i32* @esp, align 4
  %v1_100081a9 = add i32 %v0_100081a9, 4
  %v1_100081ac = icmp eq i32 %v2_100081a4, 0
  %v1_100081ae = icmp eq i1 %v1_100081ac, false
  br i1 %v1_100081ae, label %dec_label_pc_100081b2, label %dec_label_pc_100081b4

dec_label_pc_100081b2:                            ; preds = %dec_label_pc_10008184
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  store i32 %indvars.iv.next, i32* @edx, align 4
  %v11_1000817f = icmp slt i32 %indvars.iv.next, 3
  br i1 %v11_1000817f, label %dec_label_pc_100081b2.dec_label_pc_10008184_crit_edge, label %dec_label_pc_100081b4

dec_label_pc_100081b2.dec_label_pc_10008184_crit_edge: ; preds = %dec_label_pc_100081b2
  %v3_10008184.pre = load i16, i16* %stack_var_-36, align 2
  br label %dec_label_pc_10008184

dec_label_pc_100081b4:                            ; preds = %dec_label_pc_10008184, %dec_label_pc_100081b2
  %v3_100081b7 = inttoptr i32 %v0_100081a9 to i32*
  store i32 %arg1, i32* %v3_100081b7, align 4
  %v2_100081b8 = call i32 @RdErrorStatus(i32 %v1_100081a4)
  store i32 %v2_100081b8, i32* %eax.global-to-local, align 4
  %v0_100081bd = load i32, i32* @esp, align 4
  %v1_100081bd = add i32 %v0_100081bd, 4
  %v1_100081c0 = icmp eq i32 %v2_100081b8, 0
  br i1 %v1_100081c0, label %dec_label_pc_100081c9, label %dec_label_pc_10008462

dec_label_pc_100081c9:                            ; preds = %dec_label_pc_100081b4
  %v6_10008194.le = trunc i32 %v5_10008194 to i16
  %v3_100081c9 = load i16, i16* %stack_var_-20, align 2
  %v4_100081c9 = sext i16 %v3_100081c9 to i32
  %v6_100081c9 = load i32, i32* @edx, align 4
  %v8_100081c9 = or i32 %v6_100081c9, %v4_100081c9
  store i16 %v3_100081c9, i16* %stack_var_-36, align 2
  store i32 %storemerge48, i32* %eax.global-to-local, align 4
  %v4_100081d7 = and i32 %v5_10008194, 65535
  %v6_100081d7 = and i32 %v8_100081c9, -65536
  %v7_100081d7 = or i32 %v6_100081d7, %v4_100081d7
  store i32 %v7_100081d7, i32* @edx, align 4
  %v4_100081db = mul i32 %storemerge48, 2
  %v5_100081db = add i32 %v3_100080da, %v4_100081db
  %v6_100081db = inttoptr i32 %v5_100081db to i16*
  store i16 %v6_10008194.le, i16* %v6_100081db, align 2
  %v1_10008207.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_100081fc

dec_label_pc_100081fc:                            ; preds = %dec_label_pc_100081c9, %dec_label_pc_1000822a
  %v1_10008207 = phi i32 [ %v1_10008207.pre, %dec_label_pc_100081c9 ], [ %v1_10008221, %dec_label_pc_1000822a ]
  %indvars.iv71 = phi i32 [ 0, %dec_label_pc_100081c9 ], [ %indvars.iv.next72, %dec_label_pc_1000822a ]
  %v3_100081fc = load i16, i16* %stack_var_-36, align 2
  store i16 %v3_100081fc, i16* %stack_var_-20, align 2
  store i32 %v2_1000818c, i32* %eax.global-to-local, align 4
  %v2_10008207 = add i32 %v1_10008207, -4
  %v3_10008207 = inttoptr i32 %v2_10008207 to i32*
  store i32 %v2_1000818c, i32* %v3_10008207, align 4
  %v2_1000820b = add i32 %v1_10008207, -8
  %v3_1000820b = inttoptr i32 %v2_1000820b to i32*
  store i32 %arg1, i32* %v3_1000820b, align 4
  %v5_1000820c = call i32 @function_100039d0(i16 %v3_100081fc, i32 %indvars.iv71)
  store i32 %v5_1000820c, i32* %eax.global-to-local, align 4
  %v0_10008211 = load i32, i32* @esp, align 4
  store i32 %arg1, i32* @edx, align 4
  %v2_1000821b = add i32 %v0_10008211, 4
  %v3_1000821b = inttoptr i32 %v2_1000821b to i32*
  store i32 %arg1, i32* %v3_1000821b, align 4
  %sext25 = mul i32 %v5_1000820c, 65536
  %v1_1000821c = sdiv i32 %sext25, 65536
  %v2_1000821c = call i32 @RdErrorStatus(i32 %v1_1000821c)
  store i32 %v2_1000821c, i32* %eax.global-to-local, align 4
  %v0_10008221 = load i32, i32* @esp, align 4
  %v1_10008224 = icmp eq i32 %v2_1000821c, 0
  %v1_10008226 = icmp eq i1 %v1_10008224, false
  br i1 %v1_10008226, label %dec_label_pc_1000822a, label %dec_label_pc_1000822c

dec_label_pc_1000822a:                            ; preds = %dec_label_pc_100081fc
  %v1_10008221 = add i32 %v0_10008221, 4
  %v7_100081e7 = or i32 %v2_1000821c, %indvars.iv71
  %indvars.iv.next72 = add nuw nsw i32 %indvars.iv71, 1
  %v18_100081eb = and i32 %v7_100081e7, -65536
  %v19_100081eb = or i32 %v18_100081eb, %indvars.iv.next72
  store i32 %v19_100081eb, i32* %eax.global-to-local, align 4
  %v11_100081f7 = icmp slt i32 %indvars.iv.next72, 3
  br i1 %v11_100081f7, label %dec_label_pc_100081fc, label %dec_label_pc_1000822c

dec_label_pc_1000822c:                            ; preds = %dec_label_pc_100081fc, %dec_label_pc_1000822a
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_1000822f = inttoptr i32 %v0_10008221 to i32*
  store i32 %arg1, i32* %v3_1000822f, align 4
  %v2_10008230 = call i32 @RdErrorStatus(i32 %v1_1000821c)
  store i32 %v2_10008230, i32* %eax.global-to-local, align 4
  %v0_10008235 = load i32, i32* @esp, align 4
  %v1_10008235 = add i32 %v0_10008235, 4
  %v1_10008238 = icmp eq i32 %v2_10008230, 0
  br i1 %v1_10008238, label %dec_label_pc_10008241, label %dec_label_pc_10008462

dec_label_pc_10008241:                            ; preds = %dec_label_pc_1000822c
  %v3_10008241 = load i16, i16* %stack_var_-20, align 2
  store i16 %v3_10008241, i16* %stack_var_-36, align 2
  %v1_1000824c5 = and i32 %v5_1000820c, 65535
  br label %dec_label_pc_10008272

dec_label_pc_10008272:                            ; preds = %dec_label_pc_100082a0.dec_label_pc_10008272_crit_edge, %dec_label_pc_10008241
  %v1_1000827d = phi i32 [ %v1_10008235, %dec_label_pc_10008241 ], [ %v1_10008297, %dec_label_pc_100082a0.dec_label_pc_10008272_crit_edge ]
  %v3_10008272 = phi i16 [ %v3_10008241, %dec_label_pc_10008241 ], [ %v3_10008272.pre, %dec_label_pc_100082a0.dec_label_pc_10008272_crit_edge ]
  %indvars.iv74 = phi i32 [ 0, %dec_label_pc_10008241 ], [ %indvars.iv.next75, %dec_label_pc_100082a0.dec_label_pc_10008272_crit_edge ]
  store i16 %v3_10008272, i16* %stack_var_-20, align 2
  store i32 %v2_1000818c, i32* %eax.global-to-local, align 4
  %v2_1000827d = add i32 %v1_1000827d, -4
  %v3_1000827d = inttoptr i32 %v2_1000827d to i32*
  store i32 %v2_1000818c, i32* %v3_1000827d, align 4
  %v2_10008281 = add i32 %v1_1000827d, -8
  %v3_10008281 = inttoptr i32 %v2_10008281 to i32*
  store i32 %arg1, i32* %v3_10008281, align 4
  %v5_10008282 = call i32 @function_100039d0(i16 %v3_10008272, i32 %indvars.iv74)
  store i32 %v5_10008282, i32* %eax.global-to-local, align 4
  %v0_10008287 = load i32, i32* @esp, align 4
  store i32 %arg1, i32* @edx, align 4
  %v2_10008291 = add i32 %v0_10008287, 4
  %v3_10008291 = inttoptr i32 %v2_10008291 to i32*
  store i32 %arg1, i32* %v3_10008291, align 4
  %sext24 = mul i32 %v5_10008282, 65536
  %v1_10008292 = sdiv i32 %sext24, 65536
  %v2_10008292 = call i32 @RdErrorStatus(i32 %v1_10008292)
  store i32 %v2_10008292, i32* %eax.global-to-local, align 4
  %v0_10008297 = load i32, i32* @esp, align 4
  %v1_10008297 = add i32 %v0_10008297, 4
  %v1_1000829a = icmp eq i32 %v2_10008292, 0
  %v1_1000829c = icmp eq i1 %v1_1000829a, false
  br i1 %v1_1000829c, label %dec_label_pc_100082a0, label %dec_label_pc_100082a2

dec_label_pc_100082a0:                            ; preds = %dec_label_pc_10008272
  %v7_1000825d = or i32 %v2_10008292, %indvars.iv74
  %indvars.iv.next75 = add nuw nsw i32 %indvars.iv74, 1
  %v18_10008261 = and i32 %v7_1000825d, -65536
  %v19_10008261 = or i32 %v18_10008261, %indvars.iv.next75
  store i32 %v19_10008261, i32* %eax.global-to-local, align 4
  %v11_1000826d = icmp slt i32 %indvars.iv.next75, 3
  br i1 %v11_1000826d, label %dec_label_pc_100082a0.dec_label_pc_10008272_crit_edge, label %dec_label_pc_100082a2

dec_label_pc_100082a0.dec_label_pc_10008272_crit_edge: ; preds = %dec_label_pc_100082a0
  %v3_10008272.pre = load i16, i16* %stack_var_-36, align 2
  br label %dec_label_pc_10008272

dec_label_pc_100082a2:                            ; preds = %dec_label_pc_10008272, %dec_label_pc_100082a0
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_100082a5 = inttoptr i32 %v0_10008297 to i32*
  store i32 %arg1, i32* %v3_100082a5, align 4
  %v2_100082a6 = call i32 @RdErrorStatus(i32 %v1_10008292)
  store i32 %v2_100082a6, i32* %eax.global-to-local, align 4
  %v0_100082ab = load i32, i32* @esp, align 4
  %v1_100082ab = add i32 %v0_100082ab, 4
  %v1_100082ae = icmp eq i32 %v2_100082a6, 0
  br i1 %v1_100082ae, label %dec_label_pc_100082b7, label %dec_label_pc_10008462

dec_label_pc_100082b7:                            ; preds = %dec_label_pc_100082a2
  %v3_100082b7 = load i16, i16* %stack_var_-20, align 2
  store i16 %v3_100082b7, i16* %stack_var_-36, align 2
  %v1_100082c26 = and i32 %v5_10008282, 65535
  %v2_100082d6 = mul nuw i32 %v1_100082c26, 65536
  %v2_100082d9 = or i32 %v2_100082d6, %v1_1000824c5
  store i32 %v3_100080f2, i32* @ecx, align 4
  %v3_100082e1 = mul i32 %storemerge48, 4
  %v4_100082e1 = add i32 %v3_100082e1, %v3_100080f2
  %v5_100082e1 = inttoptr i32 %v4_100082e1 to i32*
  store i32 %v2_100082d9, i32* %v5_100082e1, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_1000830c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10008301

dec_label_pc_10008301:                            ; preds = %dec_label_pc_1000832f.dec_label_pc_10008301_crit_edge, %dec_label_pc_100082b7
  %v1_1000830c = phi i32 [ %v1_1000830c.pre, %dec_label_pc_100082b7 ], [ %v1_10008326, %dec_label_pc_1000832f.dec_label_pc_10008301_crit_edge ]
  %v3_10008301 = phi i16 [ %v3_100082b7, %dec_label_pc_100082b7 ], [ %v3_10008301.pre, %dec_label_pc_1000832f.dec_label_pc_10008301_crit_edge ]
  %indvars.iv77 = phi i32 [ 0, %dec_label_pc_100082b7 ], [ %indvars.iv.next78, %dec_label_pc_1000832f.dec_label_pc_10008301_crit_edge ]
  store i16 %v3_10008301, i16* %stack_var_-20, align 2
  store i32 %v2_1000818c, i32* @edx, align 4
  %v2_1000830c = add i32 %v1_1000830c, -4
  %v3_1000830c = inttoptr i32 %v2_1000830c to i32*
  store i32 %v2_1000818c, i32* %v3_1000830c, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v2_10008310 = add i32 %v1_1000830c, -8
  %v3_10008310 = inttoptr i32 %v2_10008310 to i32*
  store i32 %arg1, i32* %v3_10008310, align 4
  %v5_10008311 = call i32 @function_100039d0(i16 %v3_10008301, i32 %indvars.iv77)
  store i32 %v5_10008311, i32* %eax.global-to-local, align 4
  %v0_10008316 = load i32, i32* @esp, align 4
  %v2_10008320 = add i32 %v0_10008316, 4
  %v3_10008320 = inttoptr i32 %v2_10008320 to i32*
  store i32 %arg1, i32* %v3_10008320, align 4
  %sext23 = mul i32 %v5_10008311, 65536
  %v1_10008321 = sdiv i32 %sext23, 65536
  %v2_10008321 = call i32 @RdErrorStatus(i32 %v1_10008321)
  store i32 %v2_10008321, i32* %eax.global-to-local, align 4
  %v0_10008326 = load i32, i32* @esp, align 4
  %v1_10008326 = add i32 %v0_10008326, 4
  %v1_10008329 = icmp eq i32 %v2_10008321, 0
  %v1_1000832b = icmp eq i1 %v1_10008329, false
  br i1 %v1_1000832b, label %dec_label_pc_1000832f, label %dec_label_pc_10008331

dec_label_pc_1000832f:                            ; preds = %dec_label_pc_10008301
  %indvars.iv.next78 = add nuw nsw i32 %indvars.iv77, 1
  store i32 %indvars.iv.next78, i32* %eax.global-to-local, align 4
  %v11_100082fc = icmp slt i32 %indvars.iv.next78, 3
  br i1 %v11_100082fc, label %dec_label_pc_1000832f.dec_label_pc_10008301_crit_edge, label %dec_label_pc_10008331

dec_label_pc_1000832f.dec_label_pc_10008301_crit_edge: ; preds = %dec_label_pc_1000832f
  %v3_10008301.pre = load i16, i16* %stack_var_-36, align 2
  br label %dec_label_pc_10008301

dec_label_pc_10008331:                            ; preds = %dec_label_pc_10008301, %dec_label_pc_1000832f
  store i32 %arg1, i32* @edx, align 4
  %v3_10008334 = inttoptr i32 %v0_10008326 to i32*
  store i32 %arg1, i32* %v3_10008334, align 4
  %v2_10008335 = call i32 @RdErrorStatus(i32 %v1_10008321)
  store i32 %v2_10008335, i32* %eax.global-to-local, align 4
  %v0_1000833a = load i32, i32* @esp, align 4
  %v1_1000833a = add i32 %v0_1000833a, 4
  %v1_1000833d = icmp eq i32 %v2_10008335, 0
  br i1 %v1_1000833d, label %dec_label_pc_10008346, label %dec_label_pc_10008462

dec_label_pc_10008346:                            ; preds = %dec_label_pc_10008331
  %v6_10008311.le = trunc i32 %v5_10008311 to i16
  %v3_10008346 = load i16, i16* %stack_var_-20, align 2
  %v4_10008346 = sext i16 %v3_10008346 to i32
  store i16 %v3_10008346, i16* %stack_var_-36, align 2
  %v3_10008351 = load i32, i32* %stack_var_-72, align 4
  %v4_10008354 = and i32 %v5_10008311, 65535
  %v6_10008354 = and i32 %v4_10008346, -65536
  %v7_10008354 = or i32 %v6_10008354, %v4_10008354
  store i32 %v7_10008354, i32* %eax.global-to-local, align 4
  %v5_10008358 = add i32 %v3_10008351, %v4_100081db
  %v6_10008358 = inttoptr i32 %v5_10008358 to i16*
  store i16 %v6_10008311.le, i16* %v6_10008358, align 2
  %v6_10008379.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_10008384.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10008379

dec_label_pc_10008379:                            ; preds = %dec_label_pc_10008346, %dec_label_pc_100083a7
  %v1_10008384 = phi i32 [ %v1_10008384.pre, %dec_label_pc_10008346 ], [ %v1_1000839e, %dec_label_pc_100083a7 ]
  %v6_10008379 = phi i32 [ %v6_10008379.pre, %dec_label_pc_10008346 ], [ %v2_10008399, %dec_label_pc_100083a7 ]
  %indvars.iv80 = phi i32 [ 0, %dec_label_pc_10008346 ], [ %indvars.iv.next81, %dec_label_pc_100083a7 ]
  %v3_10008379 = load i16, i16* %stack_var_-36, align 2
  %v4_10008379 = sext i16 %v3_10008379 to i32
  %v7_10008379 = and i32 %v6_10008379, -65536
  %v8_10008379 = or i32 %v4_10008379, %v7_10008379
  store i32 %v8_10008379, i32* %eax.global-to-local, align 4
  store i16 %v3_10008379, i16* %stack_var_-20, align 2
  %v2_10008384 = add i32 %v1_10008384, -4
  %v3_10008384 = inttoptr i32 %v2_10008384 to i32*
  store i32 %v2_1000818c, i32* %v3_10008384, align 4
  store i32 %arg1, i32* @edx, align 4
  %v2_10008388 = add i32 %v1_10008384, -8
  %v3_10008388 = inttoptr i32 %v2_10008388 to i32*
  store i32 %arg1, i32* %v3_10008388, align 4
  %v5_10008389 = call i32 @function_100039d0(i16 %v3_10008379, i32 %indvars.iv80)
  %v0_1000838e = load i32, i32* @esp, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v2_10008398 = add i32 %v0_1000838e, 4
  %v3_10008398 = inttoptr i32 %v2_10008398 to i32*
  store i32 %arg1, i32* %v3_10008398, align 4
  %sext22 = mul i32 %v5_10008389, 65536
  %v1_10008399 = sdiv i32 %sext22, 65536
  %v2_10008399 = call i32 @RdErrorStatus(i32 %v1_10008399)
  store i32 %v2_10008399, i32* %eax.global-to-local, align 4
  %v0_1000839e = load i32, i32* @esp, align 4
  %v1_100083a1 = icmp eq i32 %v2_10008399, 0
  %v1_100083a3 = icmp eq i1 %v1_100083a1, false
  br i1 %v1_100083a3, label %dec_label_pc_100083a7, label %dec_label_pc_100083a9

dec_label_pc_100083a7:                            ; preds = %dec_label_pc_10008379
  %v1_1000839e = add i32 %v0_1000839e, 4
  %indvars.iv.next81 = add nuw nsw i32 %indvars.iv80, 1
  store i32 %indvars.iv.next81, i32* @edx, align 4
  %v11_10008374 = icmp slt i32 %indvars.iv.next81, 3
  br i1 %v11_10008374, label %dec_label_pc_10008379, label %dec_label_pc_100083a9

dec_label_pc_100083a9:                            ; preds = %dec_label_pc_10008379, %dec_label_pc_100083a7
  %v3_100083ac = inttoptr i32 %v0_1000839e to i32*
  store i32 %arg1, i32* %v3_100083ac, align 4
  %v2_100083ad = call i32 @RdErrorStatus(i32 %v1_10008399)
  store i32 %v2_100083ad, i32* %eax.global-to-local, align 4
  %v0_100083b2 = load i32, i32* @esp, align 4
  %v1_100083b2 = add i32 %v0_100083b2, 4
  %v1_100083b5 = icmp eq i32 %v2_100083ad, 0
  br i1 %v1_100083b5, label %dec_label_pc_100083be, label %dec_label_pc_10008462

dec_label_pc_100083be:                            ; preds = %dec_label_pc_100083a9
  %v3_100083be = load i16, i16* %stack_var_-20, align 2
  store i16 %v3_100083be, i16* %stack_var_-36, align 2
  %v1_100083c97 = and i32 %v5_10008389, 65535
  store i32 %v1_100083c97, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100083ee

dec_label_pc_100083ee:                            ; preds = %dec_label_pc_1000841c.dec_label_pc_100083ee_crit_edge, %dec_label_pc_100083be
  %v1_100083f9 = phi i32 [ %v1_100083b2, %dec_label_pc_100083be ], [ %v1_10008413, %dec_label_pc_1000841c.dec_label_pc_100083ee_crit_edge ]
  %v6_100083ee = phi i32 [ %v1_100083c97, %dec_label_pc_100083be ], [ %v2_1000840e, %dec_label_pc_1000841c.dec_label_pc_100083ee_crit_edge ]
  %v3_100083ee = phi i16 [ %v3_100083be, %dec_label_pc_100083be ], [ %v3_100083ee.pre, %dec_label_pc_1000841c.dec_label_pc_100083ee_crit_edge ]
  %indvars.iv83 = phi i32 [ 0, %dec_label_pc_100083be ], [ %indvars.iv.next84, %dec_label_pc_1000841c.dec_label_pc_100083ee_crit_edge ]
  %v4_100083ee = sext i16 %v3_100083ee to i32
  %v7_100083ee = and i32 %v6_100083ee, -65536
  %v8_100083ee = or i32 %v4_100083ee, %v7_100083ee
  store i32 %v8_100083ee, i32* %eax.global-to-local, align 4
  store i16 %v3_100083ee, i16* %stack_var_-20, align 2
  %v2_100083f9 = add i32 %v1_100083f9, -4
  %v3_100083f9 = inttoptr i32 %v2_100083f9 to i32*
  store i32 %v2_1000818c, i32* %v3_100083f9, align 4
  store i32 %arg1, i32* @edx, align 4
  %v2_100083fd = add i32 %v1_100083f9, -8
  %v3_100083fd = inttoptr i32 %v2_100083fd to i32*
  store i32 %arg1, i32* %v3_100083fd, align 4
  %v5_100083fe = call i32 @function_100039d0(i16 %v3_100083ee, i32 %indvars.iv83)
  %v0_10008403 = load i32, i32* @esp, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v2_1000840d = add i32 %v0_10008403, 4
  %v3_1000840d = inttoptr i32 %v2_1000840d to i32*
  store i32 %arg1, i32* %v3_1000840d, align 4
  %sext21 = mul i32 %v5_100083fe, 65536
  %v1_1000840e = sdiv i32 %sext21, 65536
  %v2_1000840e = call i32 @RdErrorStatus(i32 %v1_1000840e)
  store i32 %v2_1000840e, i32* %eax.global-to-local, align 4
  %v0_10008413 = load i32, i32* @esp, align 4
  %v1_10008413 = add i32 %v0_10008413, 4
  %v1_10008416 = icmp eq i32 %v2_1000840e, 0
  %v1_10008418 = icmp eq i1 %v1_10008416, false
  br i1 %v1_10008418, label %dec_label_pc_1000841c, label %dec_label_pc_1000841e

dec_label_pc_1000841c:                            ; preds = %dec_label_pc_100083ee
  %indvars.iv.next84 = add nuw nsw i32 %indvars.iv83, 1
  store i32 %indvars.iv.next84, i32* @edx, align 4
  %v11_100083e9 = icmp slt i32 %indvars.iv.next84, 3
  br i1 %v11_100083e9, label %dec_label_pc_1000841c.dec_label_pc_100083ee_crit_edge, label %dec_label_pc_1000841e

dec_label_pc_1000841c.dec_label_pc_100083ee_crit_edge: ; preds = %dec_label_pc_1000841c
  %v3_100083ee.pre = load i16, i16* %stack_var_-36, align 2
  br label %dec_label_pc_100083ee

dec_label_pc_1000841e:                            ; preds = %dec_label_pc_100083ee, %dec_label_pc_1000841c
  %v3_10008421 = inttoptr i32 %v0_10008413 to i32*
  store i32 %arg1, i32* %v3_10008421, align 4
  %v2_10008422 = call i32 @RdErrorStatus(i32 %v1_1000840e)
  store i32 %v2_10008422, i32* %eax.global-to-local, align 4
  %v0_10008427 = load i32, i32* @esp, align 4
  %v1_10008427 = add i32 %v0_10008427, 4
  %v1_1000842a = icmp eq i32 %v2_10008422, 0
  br i1 %v1_1000842a, label %dec_label_pc_10008430, label %dec_label_pc_10008462

dec_label_pc_10008430:                            ; preds = %dec_label_pc_1000841e
  %v3_10008430 = load i16, i16* %stack_var_-20, align 2
  store i16 %v3_10008430, i16* %stack_var_-36, align 2
  %v1_1000843b = and i32 %v1_1000840e, 65535
  %v2_10008452 = or i32 %sext21, %v1_100083c97
  %v4_1000845a = add i32 %v3_100080fe, %v3_100082e1
  %v5_1000845a = inttoptr i32 %v4_1000845a to i32*
  store i32 %v2_10008452, i32* %v5_1000845a, align 4
  %v1_10008155 = add i32 %storemerge48, 1
  store i32 %v1_10008155, i32* @edx, align 4
  store i32 %v1_10008155, i32* %eax.global-to-local, align 4
  %v4_1000815e = load i32, i32* %stack_var_-40, align 4
  %v5_10008161 = icmp slt i32 %v1_10008155, %v4_1000815e
  %v1_1000818f.pre.pre = load i32, i32* @esp, align 4
  br i1 %v5_10008161, label %dec_label_pc_1000817b.preheader, label %dec_label_pc_10008462

dec_label_pc_10008462:                            ; preds = %dec_label_pc_10008430, %dec_label_pc_100081b4, %dec_label_pc_1000822c, %dec_label_pc_100082a2, %dec_label_pc_10008331, %dec_label_pc_100083a9, %dec_label_pc_1000841e, %dec_label_pc_10008141
  %v0_10008462 = phi i32 [ %v15_10007f8f, %dec_label_pc_10008141 ], [ %v1_1000818f.pre.pre, %dec_label_pc_10008430 ], [ %v1_100081bd, %dec_label_pc_100081b4 ], [ %v1_10008235, %dec_label_pc_1000822c ], [ %v1_100082ab, %dec_label_pc_100082a2 ], [ %v1_1000833a, %dec_label_pc_10008331 ], [ %v1_100083b2, %dec_label_pc_100083a9 ], [ %v1_10008427, %dec_label_pc_1000841e ]
  %stack_var_-8.1 = phi i32 [ %tmp, %dec_label_pc_10008141 ], [ %v1_1000843b, %dec_label_pc_10008430 ], [ %stack_var_-8.047, %dec_label_pc_100081b4 ], [ %stack_var_-8.047, %dec_label_pc_1000822c ], [ %stack_var_-8.047, %dec_label_pc_100082a2 ], [ %v1_100082c26, %dec_label_pc_10008331 ], [ %v1_100082c26, %dec_label_pc_100083a9 ], [ %v1_100082c26, %dec_label_pc_1000841e ]
  %v1_10008462 = add i32 %v0_10008462, -4
  %v2_10008462 = inttoptr i32 %v1_10008462 to i32*
  store i32 2, i32* %v2_10008462, align 4
  store i32 %arg1, i32* @eax, align 4
  %v2_10008467 = add i32 %v0_10008462, -8
  %v3_10008467 = inttoptr i32 %v2_10008467 to i32*
  store i32 %arg1, i32* %v3_10008467, align 4
  %v1_10008468 = load i32, i32* %stack_var_-4, align 4
  %v2_10008468 = trunc i32 %v1_10008468 to i16
  %v3_10008468 = call i32 @SetFuncStatusCode(i32 %stack_var_-8.1, i16 %v2_10008468)
  %v6_10008470 = and i32 %v3_10008468, -65536
  store i32 %v6_10008470, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008474

dec_label_pc_10008474:                            ; preds = %dec_label_pc_10008139, %dec_label_pc_1000812a, %dec_label_pc_100080c1, %dec_label_pc_100080a6, %dec_label_pc_10008095, %dec_label_pc_10008065, %dec_label_pc_10008035, %dec_label_pc_10008013, %dec_label_pc_10007fe8, %dec_label_pc_10007fc4, %dec_label_pc_10008462
  %v0_10008477 = phi i32 [ 0, %dec_label_pc_10008139 ], [ %v2_1000812a, %dec_label_pc_1000812a ], [ %v3_100080c7, %dec_label_pc_100080c1 ], [ %v3_100080ac, %dec_label_pc_100080a6 ], [ %v8_10008095, %dec_label_pc_10008095 ], [ %v8_10008065, %dec_label_pc_10008065 ], [ %v2_10008035, %dec_label_pc_10008035 ], [ %v8_10008013, %dec_label_pc_10008013 ], [ %v3_10007fee, %dec_label_pc_10007fe8 ], [ %v1_10007fc8, %dec_label_pc_10007fc4 ], [ %v6_10008470, %dec_label_pc_10008462 ]
  %v2_10008476 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10008476, i32* @ebp, align 4
  ret i32 %v0_10008477

; uselistorder directives
  uselistorder i32 %v0_10008462, { 1, 0 }
  uselistorder i32 %v1_10008155, { 2, 1, 3, 0 }
  uselistorder i16 %v3_10008430, { 1, 0 }
  uselistorder i32 %indvars.iv.next84, { 1, 0, 2 }
  uselistorder i32 %v2_1000840e, { 0, 2, 1 }
  uselistorder i32 %v1_1000840e, { 2, 1, 0 }
  uselistorder i32 %indvars.iv83, { 1, 0 }
  uselistorder i16 %v3_100083ee, { 0, 2, 1 }
  uselistorder i32 %v1_100083f9, { 1, 0 }
  uselistorder i32 %indvars.iv.next81, { 1, 0, 2 }
  uselistorder i32 %v2_10008399, { 0, 2, 1 }
  uselistorder i32 %v1_10008399, { 1, 0 }
  uselistorder i32 %v5_10008389, { 1, 0 }
  uselistorder i32 %indvars.iv80, { 1, 0 }
  uselistorder i32 %v1_10008384, { 1, 0 }
  uselistorder i32 %indvars.iv.next78, { 1, 0, 2 }
  uselistorder i32 %v1_10008321, { 1, 0 }
  uselistorder i32 %v5_10008311, { 1, 2, 0, 3 }
  uselistorder i32 %indvars.iv77, { 1, 0 }
  uselistorder i32 %v1_1000830c, { 1, 0 }
  uselistorder i32 %v1_100082c26, { 1, 2, 3, 0 }
  uselistorder i32 %indvars.iv.next75, { 1, 0, 2 }
  uselistorder i32 %v1_10008292, { 1, 0 }
  uselistorder i32 %v5_10008282, { 1, 0, 2 }
  uselistorder i32 %indvars.iv74, { 2, 0, 1 }
  uselistorder i32 %v1_1000827d, { 1, 0 }
  uselistorder i32 %indvars.iv.next72, { 1, 0, 2 }
  uselistorder i32 %v1_1000821c, { 1, 0 }
  uselistorder i32 %v5_1000820c, { 1, 0, 2 }
  uselistorder i32 %indvars.iv71, { 2, 0, 1 }
  uselistorder i32 %v1_10008207, { 1, 0 }
  uselistorder i32 %indvars.iv.next, { 1, 0, 2 }
  uselistorder i32 %v2_100081a4, { 0, 2, 1 }
  uselistorder i32 %v1_100081a4, { 1, 0 }
  uselistorder i32 %v5_10008194, { 1, 2, 0 }
  uselistorder i32 %indvars.iv, { 1, 0 }
  uselistorder i16 %v3_10008184, { 0, 2, 1 }
  uselistorder i32 %v1_1000818f, { 1, 0 }
  uselistorder i32 %storemerge48, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v2_1000818c, { 0, 1, 3, 2, 5, 4, 7, 6, 8 }
  uselistorder i32 %v2_10008123, { 1, 0 }
  uselistorder i32 %v2_100080da, { 1, 0 }
  uselistorder i32 %v4_1000808d, { 1, 0 }
  uselistorder i32 %v1_10008081, { 1, 0, 3, 2 }
  uselistorder i32 %v1_10008072, { 2, 0, 1, 3 }
  uselistorder i32 %v1_10008051, { 1, 0, 3, 2 }
  uselistorder i32 %v1_10008042, { 2, 3, 4, 0, 5, 1, 6, 7 }
  uselistorder i32 %v1_10008020, { 1, 0, 2 }
  uselistorder i32 %v1_10007fff, { 1, 0, 3, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 3, 2 }
  uselistorder i16* %stack_var_-36, { 14, 0, 13, 12, 11, 1, 10, 2, 9, 8, 7, 3, 6, 4, 5 }
  uselistorder i16* %stack_var_-20, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 54, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 55, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32 %arg1, { 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2, 4, 1, 0 }
  uselistorder label %dec_label_pc_10008474, { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder label %dec_label_pc_10008462, { 0, 6, 5, 4, 3, 2, 1, 7 }
  uselistorder label %dec_label_pc_1000841e, { 1, 0 }
  uselistorder label %dec_label_pc_100083a9, { 1, 0 }
  uselistorder label %dec_label_pc_10008379, { 1, 0 }
  uselistorder label %dec_label_pc_10008331, { 1, 0 }
  uselistorder label %dec_label_pc_100082a2, { 1, 0 }
  uselistorder label %dec_label_pc_1000822c, { 1, 0 }
  uselistorder label %dec_label_pc_100081fc, { 1, 0 }
  uselistorder label %dec_label_pc_100081b4, { 1, 0 }
}

define i32 @function_10008478(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_10008478:
  %stack_var_-8 = alloca i16, align 2
  %v0_1000847b = load i32, i32* @ecx, align 4
  %v5_1000847b = trunc i32 %v0_1000847b to i16
  store i16 %v5_1000847b, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10008480 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008480, i32* @eax, align 4
  %v1_10008488 = mul i32 %v1_10008480, 65536
  %v1_10008488.off = or i32 %v1_10008488, 65535
  %tmp = icmp ult i32 %v1_10008488.off, 131071
  br i1 %tmp, label %dec_label_pc_100084a0, label %dec_label_pc_1000848f

dec_label_pc_1000848f:                            ; preds = %dec_label_pc_10008478
  %v1_10008493 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10008578

dec_label_pc_100084a0:                            ; preds = %dec_label_pc_10008478
  %v1_100084a4 = call i32 @CheckForMinMax(i32 %arg1)
  %v1_100084ac = mul i32 %v1_100084a4, 65536
  %tmp25 = icmp eq i32 %v1_100084ac, 131072
  br i1 %tmp25, label %dec_label_pc_10008514, label %dec_label_pc_100084b4

dec_label_pc_100084b4:                            ; preds = %dec_label_pc_100084a0
  %v1_100084b8 = call i32 @CheckForFreqpts(i32 %arg1)
  %v1_100084c0 = mul i32 %v1_100084b8, 65536
  %tmp26 = icmp eq i32 %v1_100084c0, 65536
  %v1_100084c6 = icmp eq i1 %tmp26, false
  br i1 %v1_100084c6, label %dec_label_pc_100084f2, label %dec_label_pc_100084c8

dec_label_pc_100084c8:                            ; preds = %dec_label_pc_100084b4
  store i32 %arg1, i32* @ecx, align 4
  %v7_100084e4 = inttoptr i32 %arg6 to i32*
  %v8_100084e4 = call i32 @function_10007f07(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* %v7_100084e4, i32 %arg7)
  br label %dec_label_pc_10008512

dec_label_pc_100084f2:                            ; preds = %dec_label_pc_100084b4
  store i32 %arg3, i32* @ecx, align 4
  %v5_10008506 = inttoptr i32 %arg6 to i32*
  %v6_10008506 = call i32 @function_10007774(i32 %arg1, i32 %arg2, i32 %arg3, i32* %v5_10008506, i32 %arg7)
  br label %dec_label_pc_10008512

dec_label_pc_10008512:                            ; preds = %dec_label_pc_100084c8, %dec_label_pc_100084f2
  %storemerge.in = phi i32 [ %v8_100084e4, %dec_label_pc_100084c8 ], [ %v6_10008506, %dec_label_pc_100084f2 ]
  %storemerge = trunc i32 %storemerge.in to i16
  store i16 %storemerge, i16* %stack_var_-8, align 2
  br label %dec_label_pc_10008566

dec_label_pc_10008514:                            ; preds = %dec_label_pc_100084a0
  %v1_10008518 = call i32 @CheckForFreqpts(i32 %arg1)
  %v1_10008520 = mul i32 %v1_10008518, 65536
  %tmp27 = icmp eq i32 %v1_10008520, 65536
  %v1_10008526 = icmp eq i1 %tmp27, false
  br i1 %v1_10008526, label %dec_label_pc_1000854a, label %dec_label_pc_10008528

dec_label_pc_10008528:                            ; preds = %dec_label_pc_10008514
  store i32 %arg1, i32* @ecx, align 4
  %v5_1000853c = inttoptr i32 %arg6 to i32*
  %v6_1000853c = call i32 @function_10007ae8(i32 %arg1, i32 %arg2, i32 %arg4, i32* %v5_1000853c, i32 %arg7)
  %v7_1000853c = trunc i32 %v6_1000853c to i16
  store i16 %v7_1000853c, i16* %stack_var_-8, align 2
  br label %dec_label_pc_10008566

dec_label_pc_1000854a:                            ; preds = %dec_label_pc_10008514
  store i32 %arg2, i32* @ecx, align 4
  %v4_1000855a = inttoptr i32 %arg6 to i32*
  %v5_1000855a = call i32 @GetTraceData(i32 %arg1, i32 %arg2, i32* %v4_1000855a, i32 %arg7)
  %v6_1000855a = trunc i32 %v5_1000855a to i16
  store i16 %v6_1000855a, i16* %stack_var_-8, align 2
  br label %dec_label_pc_10008566

dec_label_pc_10008566:                            ; preds = %dec_label_pc_10008528, %dec_label_pc_10008512, %dec_label_pc_1000854a
  store i32 %arg1, i32* @eax, align 4
  %v3_1000856c = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  %v3_10008574 = load i16, i16* %stack_var_-8, align 2
  %v4_10008574 = sext i16 %v3_10008574 to i32
  %v7_10008574 = and i32 %v3_1000856c, -65536
  %v8_10008574 = or i32 %v4_10008574, %v7_10008574
  br label %dec_label_pc_10008578

dec_label_pc_10008578:                            ; preds = %dec_label_pc_1000848f, %dec_label_pc_10008566
  %v0_1000857b = phi i32 [ %v1_10008493, %dec_label_pc_1000848f ], [ %v8_10008574, %dec_label_pc_10008566 ]
  ret i32 %v0_1000857b

; uselistorder directives
  uselistorder i16* %stack_var_-8, { 4, 3, 2, 0, 1 }
  uselistorder i32 (i32)* @CheckForFreqpts, { 1, 0 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 4, 1, 2, 3 }
  uselistorder i32 %arg1, { 13, 12, 11, 10, 9, 7, 6, 5, 4, 8, 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_10008578, { 1, 0 }
  uselistorder label %dec_label_pc_10008566, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10008512, { 1, 0 }
}

define i32 @RdErrorStatus(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000858b = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000858b, i32* @eax, align 4
  %v1_10008593 = mul i32 %v1_1000858b, 65536
  %v2_10008593 = sdiv i32 %v1_10008593, 65536
  store i32 %v2_10008593, i32* @ecx, align 4
  %v1_10008593.off = or i32 %v1_10008593, 65535
  %tmp = icmp ult i32 %v1_10008593.off, 131071
  br i1 %tmp, label %dec_label_pc_100085ab, label %dec_label_pc_1000859a

dec_label_pc_1000859a:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v1_1000859e = call i32 @GetFuncStatusCode(i32 %arg1)
  %v1_100085a6 = mul i32 %v1_1000859e, 65536
  %v2_100085a6 = sdiv i32 %v1_100085a6, 65536
  br label %dec_label_pc_100085ba

dec_label_pc_100085ab:                            ; preds = %entry
  %v1_100085ae = add i32 %arg1, 192
  %v2_100085ae = inttoptr i32 %v1_100085ae to i32*
  %v3_100085ae = load i32, i32* %v2_100085ae, align 4
  store i32 %v3_100085ae, i32* @ecx, align 4
  br label %dec_label_pc_100085ba

dec_label_pc_100085ba:                            ; preds = %dec_label_pc_1000859a, %dec_label_pc_100085ab
  %storemerge = phi i32 [ %v2_100085a6, %dec_label_pc_1000859a ], [ %v3_100085ae, %dec_label_pc_100085ab ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 192, { 2, 0, 1 }
  uselistorder i32 %arg1, { 2, 3, 4, 1, 0 }
  uselistorder label %dec_label_pc_100085ba, { 1, 0 }
}

define i32 @GetErrorStatus(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_100085c5 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100085c5, i32* @eax, align 4
  %v1_100085cd = mul i32 %v1_100085c5, 65536
  %v1_100085cd.off = or i32 %v1_100085cd, 65535
  %tmp = icmp ult i32 %v1_100085cd.off, 131071
  br i1 %tmp, label %dec_label_pc_100085e5, label %dec_label_pc_100085d4

dec_label_pc_100085d4:                            ; preds = %entry
  %v1_100085d8 = call i32 @GetFuncStatusCode(i32 %arg1)
  %v1_100085e0 = mul i32 %v1_100085d8, 65536
  %v2_100085e0 = sdiv i32 %v1_100085e0, 65536
  br label %dec_label_pc_100085f1

dec_label_pc_100085e5:                            ; preds = %entry
  %v1_100085e9 = call i32 @RdErrorStatus(i32 %arg1)
  br label %dec_label_pc_100085f1

dec_label_pc_100085f1:                            ; preds = %dec_label_pc_100085d4, %dec_label_pc_100085e5
  %v0_100085f2 = phi i32 [ %v2_100085e0, %dec_label_pc_100085d4 ], [ %v1_100085e9, %dec_label_pc_100085e5 ]
  ret i32 %v0_100085f2

; uselistorder directives
  uselistorder i32 %arg1, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_100085f1, { 1, 0 }
}

define i32 @function_100085f3(i32 %arg1) local_unnamed_addr {
dec_label_pc_100085f3:
  store i32 %arg1, i32* @eax, align 4
  %v1_100085fa = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100085fa, i32* @eax, align 4
  %v1_10008602 = mul i32 %v1_100085fa, 65536
  %v1_10008602.off = or i32 %v1_10008602, 65535
  %tmp = icmp ult i32 %v1_10008602.off, 131071
  br i1 %tmp, label %dec_label_pc_1000860e, label %dec_label_pc_10008609

dec_label_pc_10008609:                            ; preds = %dec_label_pc_100085f3
  br label %dec_label_pc_10008627

dec_label_pc_1000860e:                            ; preds = %dec_label_pc_100085f3
  store i32 %arg1, i32* @edx, align 4
  %v3_10008614 = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  %v5_1000861f = load i3, i3* @fpu_stat_TOP, align 1
  %v6_1000861f = add i3 %v5_1000861f, -1
  store i3 %v6_1000861f, i3* @fpu_stat_TOP, align 1
  %v1_10008622 = call i32 @__ftol(i32 %arg1)
  br label %dec_label_pc_10008627

dec_label_pc_10008627:                            ; preds = %dec_label_pc_10008609, %dec_label_pc_1000860e
  %storemerge = phi i32 [ %v1_10008622, %dec_label_pc_1000860e ], [ -1, %dec_label_pc_10008609 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10008627, { 1, 0 }
}

define i32 @function_10008629(i32 %arg1) local_unnamed_addr {
dec_label_pc_10008629:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008630 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008630, i32* @eax, align 4
  %v1_10008638 = mul i32 %v1_10008630, 65536
  %v1_10008638.off = or i32 %v1_10008638, 65535
  %tmp = icmp ult i32 %v1_10008638.off, 131071
  br i1 %tmp, label %dec_label_pc_10008644, label %dec_label_pc_1000863f

dec_label_pc_1000863f:                            ; preds = %dec_label_pc_10008629
  br label %dec_label_pc_1000865d

dec_label_pc_10008644:                            ; preds = %dec_label_pc_10008629
  store i32 %arg1, i32* @edx, align 4
  %v3_1000864a = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  %v1_10008658 = call i32 @__ftol(i32 %arg1)
  br label %dec_label_pc_1000865d

dec_label_pc_1000865d:                            ; preds = %dec_label_pc_1000863f, %dec_label_pc_10008644
  %storemerge = phi i32 [ %v1_10008658, %dec_label_pc_10008644 ], [ -1, %dec_label_pc_1000863f ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1000865d, { 1, 0 }
}

define i32 @RdEngineModel(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008666 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008666, i32* @eax, align 4
  %v1_1000866e = mul i32 %v1_10008666, 65536
  %v2_1000866e = sdiv i32 %v1_1000866e, 65536
  store i32 %v2_1000866e, i32* @ecx, align 4
  %v1_1000866e.off = or i32 %v1_1000866e, 65535
  %tmp = icmp ult i32 %v1_1000866e.off, 131071
  br i1 %tmp, label %dec_label_pc_1000867a, label %dec_label_pc_10008675

dec_label_pc_10008675:                            ; preds = %entry
  %v12_10008675 = and i32 %v1_10008666, -65536
  br label %dec_label_pc_1000868f

dec_label_pc_1000867a:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10008680 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_1000868b = add i32 %arg1, 2
  %v2_1000868b = inttoptr i32 %v1_1000868b to i16*
  %v3_1000868b = load i16, i16* %v2_1000868b, align 2
  %v4_1000868b = zext i16 %v3_1000868b to i32
  %v6_1000868b = and i32 %arg1, -65536
  %v7_1000868b = or i32 %v4_1000868b, %v6_1000868b
  br label %dec_label_pc_1000868f

dec_label_pc_1000868f:                            ; preds = %dec_label_pc_10008675, %dec_label_pc_1000867a
  %storemerge = phi i32 [ %v12_10008675, %dec_label_pc_10008675 ], [ %v7_1000868b, %dec_label_pc_1000867a ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10008666, { 1, 0, 2 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000868f, { 1, 0 }
}

define i32 @SetEngineModel(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10008698 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008698, i32* @eax, align 4
  %v1_100086a0 = mul i32 %v1_10008698, 65536
  %v1_100086a0.off = or i32 %v1_100086a0, 65535
  %tmp = icmp ult i32 %v1_100086a0.off, 131071
  br i1 %tmp, label %dec_label_pc_100086b5, label %dec_label_pc_100086a7

dec_label_pc_100086a7:                            ; preds = %entry
  %v1_100086ab = call i32 @GetFuncStatusCode(i32 %arg1)
  store i32 %v1_100086ab, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100086f7

dec_label_pc_100086b5:                            ; preds = %entry
  %v4_100086b5 = sext i16 %arg2 to i32
  store i32 %v4_100086b5, i32* %eax.global-to-local, align 4
  %v6_100086b9 = icmp eq i16 %arg2, 256
  br i1 %v6_100086b9, label %dec_label_pc_100086e3, label %dec_label_pc_100086c0

dec_label_pc_100086c0:                            ; preds = %dec_label_pc_100086b5
  %v6_100086c4 = icmp eq i16 %arg2, 512
  br i1 %v6_100086c4, label %dec_label_pc_100086e3, label %dec_label_pc_100086cc

dec_label_pc_100086cc:                            ; preds = %dec_label_pc_100086c0
  store i32 %v4_100086b5, i32* @edx, align 4
  %v6_100086d0 = icmp eq i16 %arg2, 768
  br i1 %v6_100086d0, label %dec_label_pc_100086e3, label %dec_label_pc_100086d8

dec_label_pc_100086d8:                            ; preds = %dec_label_pc_100086cc
  store i32 %v4_100086b5, i32* %eax.global-to-local, align 4
  %v6_100086dc = icmp eq i16 %arg2, 1024
  %v1_100086e1 = icmp eq i1 %v6_100086dc, false
  br i1 %v1_100086e1, label %dec_label_pc_100086f3, label %dec_label_pc_100086e3

dec_label_pc_100086e3:                            ; preds = %dec_label_pc_100086d8, %dec_label_pc_100086cc, %dec_label_pc_100086c0, %dec_label_pc_100086b5
  %v3_100086ea = add i32 %arg1, 2
  %v4_100086ea = inttoptr i32 %v3_100086ea to i16*
  store i16 %arg2, i16* %v4_100086ea, align 2
  %v11_100086ee = load i32, i32* %eax.global-to-local, align 4
  %v12_100086ee = and i32 %v11_100086ee, -65536
  store i32 %v12_100086ee, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100086f7

dec_label_pc_100086f3:                            ; preds = %dec_label_pc_100086d8
  %v1_100086f3 = and i32 %v4_100086b5, -65536
  %v2_100086f3 = or i32 %v1_100086f3, 65533
  store i32 %v2_100086f3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100086f7

dec_label_pc_100086f7:                            ; preds = %dec_label_pc_100086e3, %dec_label_pc_100086a7, %dec_label_pc_100086f3
  %v0_100086f8 = phi i32 [ %v12_100086ee, %dec_label_pc_100086e3 ], [ %v1_100086ab, %dec_label_pc_100086a7 ], [ %v2_100086f3, %dec_label_pc_100086f3 ]
  ret i32 %v0_100086f8

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i16 1024, { 2, 0, 1, 3, 4, 5 }
  uselistorder i16 768, { 0, 6, 7, 1, 8, 2, 3, 9, 4, 10, 5 }
  uselistorder i16 512, { 2, 0, 1, 3, 4, 5 }
  uselistorder i16 256, { 4, 8, 2, 3, 9, 5, 0, 1, 6, 7 }
  uselistorder i16 %arg2, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_100086f7, { 2, 0, 1 }
}

define i32 @function_100086f9(i32 %arg1) local_unnamed_addr {
dec_label_pc_100086f9:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008700 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008700, i32* @eax, align 4
  %v1_10008708 = mul i32 %v1_10008700, 65536
  %v1_10008708.off = or i32 %v1_10008708, 65535
  %tmp = icmp ult i32 %v1_10008708.off, 131071
  br i1 %tmp, label %dec_label_pc_10008714, label %dec_label_pc_1000870f

dec_label_pc_1000870f:                            ; preds = %dec_label_pc_100086f9
  br label %dec_label_pc_1000872d

dec_label_pc_10008714:                            ; preds = %dec_label_pc_100086f9
  store i32 %arg1, i32* @edx, align 4
  %v3_1000871a = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  %v1_10008728 = call i32 @__ftol(i32 %arg1)
  br label %dec_label_pc_1000872d

dec_label_pc_1000872d:                            ; preds = %dec_label_pc_1000870f, %dec_label_pc_10008714
  %storemerge = phi i32 [ %v1_10008728, %dec_label_pc_10008714 ], [ -1, %dec_label_pc_1000870f ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1000872d, { 1, 0 }
}

define i32 @RdZspanFreq(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008736 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008736, i32* @eax, align 4
  %v1_1000873e = mul i32 %v1_10008736, 65536
  %v1_1000873e.off = or i32 %v1_1000873e, 65535
  %tmp = icmp ult i32 %v1_1000873e.off, 131071
  br i1 %tmp, label %dec_label_pc_1000874a, label %dec_label_pc_10008745

dec_label_pc_10008745:                            ; preds = %entry
  br label %dec_label_pc_10008766

dec_label_pc_1000874a:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10008750 = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  %v1_10008761 = call i32 @__ftol(i32 %arg1)
  br label %dec_label_pc_10008766

dec_label_pc_10008766:                            ; preds = %dec_label_pc_10008745, %dec_label_pc_1000874a
  %storemerge = phi i32 [ %v1_10008761, %dec_label_pc_1000874a ], [ -1, %dec_label_pc_10008745 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10008766, { 1, 0 }
}

define i32 @RdMaxFreqLimit(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008770 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008770, i32* @eax, align 4
  %v1_10008778 = mul i32 %v1_10008770, 65536
  %v1_10008778.off = or i32 %v1_10008778, 65535
  %tmp = icmp ult i32 %v1_10008778.off, 131071
  br i1 %tmp, label %dec_label_pc_10008787, label %dec_label_pc_1000877f

dec_label_pc_1000877f:                            ; preds = %entry
  %v2_1000877f = load i3, i3* @fpu_stat_TOP, align 1
  %v3_1000877f = add i3 %v2_1000877f, -1
  store x86_fp80 0xKBFFF8000000000000000, x86_fp80* @st0, align 4
  store i3 %v3_1000877f, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_10008804

dec_label_pc_10008787:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000878d = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10008799 = call i32 @RdEngineModel(i32 %arg1)
  store i32 %v1_10008799, i32* @eax, align 4
  %v1_100087a1 = mul i32 %v1_10008799, 65536
  %v2_100087a1 = sdiv i32 %v1_100087a1, 65536
  %v6_100087a7 = sub nsw i32 767, %v2_100087a1
  %v7_100087a7 = and i32 %v6_100087a7, %v2_100087a1
  %v8_100087a7 = icmp slt i32 %v7_100087a7, 0
  %tmp7 = icmp eq i32 %v1_100087a1, 50331648
  %v10_100087a7 = icmp slt i32 %v1_100087a1, 50331648
  %v3_100087ae = icmp eq i1 %v10_100087a7, %v8_100087a7
  %v4_100087ae = icmp eq i1 %tmp7, false
  %v5_100087ae = and i1 %v4_100087ae, %v3_100087ae
  br i1 %v5_100087ae, label %dec_label_pc_100087cd, label %dec_label_pc_100087b0

dec_label_pc_100087b0:                            ; preds = %dec_label_pc_10008787
  br i1 %tmp7, label %dec_label_pc_100087e0, label %dec_label_pc_100087b9

dec_label_pc_100087b9:                            ; preds = %dec_label_pc_100087b0
  %tmp8 = icmp eq i32 %v1_100087a1, 16777216
  br i1 %tmp8, label %dec_label_pc_100087d8, label %dec_label_pc_100087c2

dec_label_pc_100087c2:                            ; preds = %dec_label_pc_100087b9
  %tmp9 = icmp eq i32 %v1_100087a1, 33554432
  br i1 %tmp9, label %dec_label_pc_100087d8, label %dec_label_pc_100087f0

dec_label_pc_100087cd:                            ; preds = %dec_label_pc_10008787
  %tmp10 = icmp eq i32 %v1_100087a1, 67108864
  br i1 %tmp10, label %dec_label_pc_100087e8, label %dec_label_pc_100087f0

dec_label_pc_100087d8:                            ; preds = %dec_label_pc_100087c2, %dec_label_pc_100087b9
  %v2_100087d8 = load i3, i3* @fpu_stat_TOP, align 1
  %v3_100087d8 = add i3 %v2_100087d8, -1
  store x86_fp80 0xK401DBEBC200000000000, x86_fp80* @st0, align 4
  store i3 %v3_100087d8, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_10008804

dec_label_pc_100087e0:                            ; preds = %dec_label_pc_100087b0
  %v2_100087e0 = load i3, i3* @fpu_stat_TOP, align 1
  %v3_100087e0 = add i3 %v2_100087e0, -1
  store x86_fp80 0xK401FFD51DA8000000000, x86_fp80* @st0, align 4
  store i3 %v3_100087e0, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_10008804

dec_label_pc_100087e8:                            ; preds = %dec_label_pc_100087cd
  %v2_100087e8 = load i3, i3* @fpu_stat_TOP, align 1
  %v3_100087e8 = add i3 %v2_100087e8, -1
  store x86_fp80 0xK401ECAA7E20000000000, x86_fp80* @st0, align 4
  store i3 %v3_100087e8, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_10008804

dec_label_pc_100087f0:                            ; preds = %dec_label_pc_100087cd, %dec_label_pc_100087c2
  store i32 %arg1, i32* @edx, align 4
  %v3_100087f6 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -13)
  %v2_100087fe = load i3, i3* @fpu_stat_TOP, align 1
  %v3_100087fe = add i3 %v2_100087fe, -1
  store x86_fp80 0xKBFFF8000000000000000, x86_fp80* @st0, align 4
  store i3 %v3_100087fe, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_10008804

dec_label_pc_10008804:                            ; preds = %dec_label_pc_100087e8, %dec_label_pc_100087e0, %dec_label_pc_100087d8, %dec_label_pc_1000877f, %dec_label_pc_100087f0
  %v0_10008807 = phi i32 [ %v1_10008799, %dec_label_pc_100087e8 ], [ %v1_10008799, %dec_label_pc_100087e0 ], [ %v1_10008799, %dec_label_pc_100087d8 ], [ %v1_10008770, %dec_label_pc_1000877f ], [ %v3_100087f6, %dec_label_pc_100087f0 ]
  ret i32 %v0_10008807

; uselistorder directives
  uselistorder i32 %v2_100087a1, { 1, 0 }
  uselistorder i32 %v1_100087a1, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v1_10008799, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_10008770, { 1, 0, 2 }
  uselistorder i32 %arg1, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10008804, { 4, 0, 1, 2, 3 }
}

define i32 @RdMinFreqLimit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_10008808 = load i32, i32* @ebp, align 4
  store i32 %v0_10008808, i32* %stack_var_-4, align 4
  %v4_10008808 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10008808, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10008812 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008812, i32* @eax, align 4
  %v1_1000881a = mul i32 %v1_10008812, 65536
  %v1_1000881a.off = or i32 %v1_1000881a, 65535
  %tmp = icmp ult i32 %v1_1000881a.off, 131071
  br i1 %tmp, label %dec_label_pc_10008838, label %dec_label_pc_10008821

dec_label_pc_10008821:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v1_10008825 = call i32 @GetFuncStatusCode(i32 %arg1)
  %v1_1000882d = mul i32 %v1_10008825, 65536
  %v2_1000882d = sdiv i32 %v1_1000882d, 65536
  %v4_10008833 = sitofp i32 %v2_1000882d to x86_fp80
  %v5_10008833 = load i3, i3* @fpu_stat_TOP, align 1
  %v6_10008833 = add i3 %v5_10008833, -1
  store x86_fp80 %v4_10008833, x86_fp80* @st0, align 4
  store i3 %v6_10008833, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_100088a5

dec_label_pc_10008838:                            ; preds = %entry
  %v1_1000883c = call i32 @RdEngineModel(i32 %arg1)
  store i32 %v1_1000883c, i32* @eax, align 4
  %v1_10008844 = mul i32 %v1_1000883c, 65536
  %v2_10008844 = sdiv i32 %v1_10008844, 65536
  store i32 %v2_10008844, i32* @edx, align 4
  %v6_1000884a = sub nsw i32 767, %v2_10008844
  %v7_1000884a = and i32 %v6_1000884a, %v2_10008844
  %v8_1000884a = icmp slt i32 %v7_1000884a, 0
  %tmp8 = icmp eq i32 %v1_10008844, 50331648
  %v10_1000884a = icmp slt i32 %v1_10008844, 50331648
  %v3_10008851 = icmp eq i1 %v10_1000884a, %v8_1000884a
  %v4_10008851 = icmp eq i1 %tmp8, false
  %v5_10008851 = and i1 %v4_10008851, %v3_10008851
  br i1 %v5_10008851, label %dec_label_pc_10008870, label %dec_label_pc_10008853

dec_label_pc_10008853:                            ; preds = %dec_label_pc_10008838
  br i1 %tmp8, label %dec_label_pc_1000887b, label %dec_label_pc_1000885c

dec_label_pc_1000885c:                            ; preds = %dec_label_pc_10008853
  %tmp9 = icmp eq i32 %v1_10008844, 16777216
  br i1 %tmp9, label %dec_label_pc_1000887b, label %dec_label_pc_10008865

dec_label_pc_10008865:                            ; preds = %dec_label_pc_1000885c
  %tmp10 = icmp eq i32 %v1_10008844, 33554432
  br i1 %tmp10, label %dec_label_pc_1000887b, label %dec_label_pc_10008891

dec_label_pc_10008870:                            ; preds = %dec_label_pc_10008838
  %tmp11 = icmp eq i32 %v1_10008844, 67108864
  br i1 %tmp11, label %dec_label_pc_1000887b, label %dec_label_pc_10008891

dec_label_pc_1000887b:                            ; preds = %dec_label_pc_10008870, %dec_label_pc_10008865, %dec_label_pc_1000885c, %dec_label_pc_10008853
  store i32 %arg1, i32* @eax, align 4
  %v3_10008881 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v2_10008889 = load i3, i3* @fpu_stat_TOP, align 1
  %v3_10008889 = add i3 %v2_10008889, -1
  store x86_fp80 0xK400FC350000000000000, x86_fp80* @st0, align 4
  store i3 %v3_10008889, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_100088a5

dec_label_pc_10008891:                            ; preds = %dec_label_pc_10008870, %dec_label_pc_10008865
  %v3_10008897 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -13)
  %v2_1000889f = load i3, i3* @fpu_stat_TOP, align 1
  %v3_1000889f = add i3 %v2_1000889f, -1
  store x86_fp80 0xKBFFF8000000000000000, x86_fp80* @st0, align 4
  store i3 %v3_1000889f, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_100088a5

dec_label_pc_100088a5:                            ; preds = %dec_label_pc_1000887b, %dec_label_pc_10008821, %dec_label_pc_10008891
  %v0_100088a8 = phi i32 [ %v3_10008881, %dec_label_pc_1000887b ], [ %v2_1000882d, %dec_label_pc_10008821 ], [ %v3_10008897, %dec_label_pc_10008891 ]
  %v2_100088a7 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100088a7, i32* @ebp, align 4
  ret i32 %v0_100088a8

; uselistorder directives
  uselistorder i32 %v2_10008844, { 2, 1, 0 }
  uselistorder i32 %v1_10008844, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v2_1000882d, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 50331648, { 7, 0, 8, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32)* @RdEngineModel, { 5, 4, 2, 0, 6, 3, 1 }
  uselistorder i32 %arg1, { 7, 6, 5, 2, 3, 4, 1, 0 }
  uselistorder label %dec_label_pc_100088a5, { 2, 0, 1 }
}

define i32 @function_100088a9(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100088a9:
  %stack_var_-8 = alloca i16, align 2
  store i16 -1, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_100088b7 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100088b7, i32* @eax, align 4
  %v1_100088bf = mul i32 %v1_100088b7, 65536
  %v1_100088bf.off = or i32 %v1_100088bf, 65535
  %tmp = icmp ult i32 %v1_100088bf.off, 131071
  br i1 %tmp, label %dec_label_pc_100088d4, label %dec_label_pc_100088c6

dec_label_pc_100088c6:                            ; preds = %dec_label_pc_100088a9
  %v1_100088ca = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_1000894f

dec_label_pc_100088d4:                            ; preds = %dec_label_pc_100088a9
  %v2_100088e1 = sext i32 %arg2 to i64
  %v3_100088e1 = bitcast i64 %v2_100088e1 to double
  %v4_100088e1 = call i32 @FreqInRange(i32 %arg1, double %v3_100088e1)
  store i32 %v4_100088e1, i32* @eax, align 4
  %v1_100088e9 = mul i32 %v4_100088e1, 65536
  %v1_100088e9.off = or i32 %v1_100088e9, 65535
  %tmp13 = icmp ult i32 %v1_100088e9.off, 131071
  br i1 %tmp13, label %dec_label_pc_10008937, label %dec_label_pc_100088f0

dec_label_pc_100088f0:                            ; preds = %dec_label_pc_100088d4
  %v4_100088d4 = sitofp i32 %arg2 to x86_fp80
  store i32 %arg1, i32* @edx, align 4
  %v3_100088f6 = add i32 %arg1, 8
  %v4_100088f6 = fptrunc x86_fp80 %v4_100088d4 to double
  %v5_100088f6 = inttoptr i32 %v3_100088f6 to double*
  store double %v4_100088f6, double* %v5_100088f6, align 4
  store i32 %arg1, i32* @eax, align 4
  %v3_10008907 = and i32 %arg1, 16640
  %v4_10008907 = icmp eq i32 %v3_10008907, 0
  %v1_1000890a = icmp eq i1 %v4_10008907, false
  br i1 %v1_1000890a, label %dec_label_pc_10008914, label %dec_label_pc_1000890c

dec_label_pc_1000890c:                            ; preds = %dec_label_pc_100088f0
  store i16 3, i16* %stack_var_-8, align 2
  br label %dec_label_pc_1000893d

dec_label_pc_10008914:                            ; preds = %dec_label_pc_100088f0
  store i32 %arg1, i32* @edx, align 4
  %v1_10008918 = call i32 @function_10001718(i32 %arg1)
  %v1_10008920 = mul i32 %v1_10008918, 65536
  %v2_10008920 = sdiv i32 %v1_10008920, 65536
  store i32 %v2_10008920, i32* @eax, align 4
  %v1_10008920.off = or i32 %v1_10008920, 65535
  %tmp14 = icmp ult i32 %v1_10008920.off, 131071
  %v1_10008925 = icmp eq i1 %tmp14, false
  br i1 %v1_10008925, label %dec_label_pc_1000892f, label %dec_label_pc_10008927

dec_label_pc_10008927:                            ; preds = %dec_label_pc_10008914
  store i16 0, i16* %stack_var_-8, align 2
  br label %dec_label_pc_1000893d

dec_label_pc_1000892f:                            ; preds = %dec_label_pc_10008914
  store i16 -6, i16* %stack_var_-8, align 2
  br label %dec_label_pc_1000893d

dec_label_pc_10008937:                            ; preds = %dec_label_pc_100088d4
  store i16 -3, i16* %stack_var_-8, align 2
  br label %dec_label_pc_1000893d

dec_label_pc_1000893d:                            ; preds = %dec_label_pc_1000892f, %dec_label_pc_1000890c, %dec_label_pc_10008927, %dec_label_pc_10008937
  %v3_10008943 = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  %v3_1000894b = load i16, i16* %stack_var_-8, align 2
  %v4_1000894b = sext i16 %v3_1000894b to i32
  %v7_1000894b = and i32 %v3_10008943, -65536
  %v8_1000894b = or i32 %v4_1000894b, %v7_1000894b
  br label %dec_label_pc_1000894f

dec_label_pc_1000894f:                            ; preds = %dec_label_pc_100088c6, %dec_label_pc_1000893d
  %v0_10008952 = phi i32 [ %v1_100088ca, %dec_label_pc_100088c6 ], [ %v8_1000894b, %dec_label_pc_1000893d ]
  ret i32 %v0_10008952

; uselistorder directives
  uselistorder i16* %stack_var_-8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 10, 9, 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1000894f, { 1, 0 }
  uselistorder label %dec_label_pc_1000893d, { 3, 0, 2, 1 }
}

define i32 @function_10008953(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10008953:
  %stack_var_-8 = alloca i16, align 2
  store i16 -1, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_10008961 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008961, i32* @eax, align 4
  %v1_10008969 = mul i32 %v1_10008961, 65536
  %v1_10008969.off = or i32 %v1_10008969, 65535
  %tmp = icmp ult i32 %v1_10008969.off, 131071
  br i1 %tmp, label %dec_label_pc_1000897e, label %dec_label_pc_10008970

dec_label_pc_10008970:                            ; preds = %dec_label_pc_10008953
  %v1_10008974 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_100089f9

dec_label_pc_1000897e:                            ; preds = %dec_label_pc_10008953
  %v2_1000898b = sext i32 %arg2 to i64
  %v3_1000898b = bitcast i64 %v2_1000898b to double
  %v4_1000898b = call i32 @FreqInRange(i32 %arg1, double %v3_1000898b)
  store i32 %v4_1000898b, i32* @eax, align 4
  %v1_10008993 = mul i32 %v4_1000898b, 65536
  %v1_10008993.off = or i32 %v1_10008993, 65535
  %tmp13 = icmp ult i32 %v1_10008993.off, 131071
  br i1 %tmp13, label %dec_label_pc_100089e1, label %dec_label_pc_1000899a

dec_label_pc_1000899a:                            ; preds = %dec_label_pc_1000897e
  %v4_1000897e = sitofp i32 %arg2 to x86_fp80
  store i32 %arg1, i32* @edx, align 4
  %v3_100089a0 = add i32 %arg1, 16
  %v4_100089a0 = fptrunc x86_fp80 %v4_1000897e to double
  %v5_100089a0 = inttoptr i32 %v3_100089a0 to double*
  store double %v4_100089a0, double* %v5_100089a0, align 4
  store i32 %arg1, i32* @eax, align 4
  %v3_100089b1 = and i32 %arg1, 16640
  %v4_100089b1 = icmp eq i32 %v3_100089b1, 0
  %v1_100089b4 = icmp eq i1 %v4_100089b1, false
  br i1 %v1_100089b4, label %dec_label_pc_100089be, label %dec_label_pc_100089b6

dec_label_pc_100089b6:                            ; preds = %dec_label_pc_1000899a
  store i16 3, i16* %stack_var_-8, align 2
  br label %dec_label_pc_100089e7

dec_label_pc_100089be:                            ; preds = %dec_label_pc_1000899a
  store i32 %arg1, i32* @edx, align 4
  %v1_100089c2 = call i32 @function_10001718(i32 %arg1)
  %v1_100089ca = mul i32 %v1_100089c2, 65536
  %v2_100089ca = sdiv i32 %v1_100089ca, 65536
  store i32 %v2_100089ca, i32* @eax, align 4
  %v1_100089ca.off = or i32 %v1_100089ca, 65535
  %tmp14 = icmp ult i32 %v1_100089ca.off, 131071
  %v1_100089cf = icmp eq i1 %tmp14, false
  br i1 %v1_100089cf, label %dec_label_pc_100089d9, label %dec_label_pc_100089d1

dec_label_pc_100089d1:                            ; preds = %dec_label_pc_100089be
  store i16 0, i16* %stack_var_-8, align 2
  br label %dec_label_pc_100089e7

dec_label_pc_100089d9:                            ; preds = %dec_label_pc_100089be
  store i16 -6, i16* %stack_var_-8, align 2
  br label %dec_label_pc_100089e7

dec_label_pc_100089e1:                            ; preds = %dec_label_pc_1000897e
  store i16 -3, i16* %stack_var_-8, align 2
  br label %dec_label_pc_100089e7

dec_label_pc_100089e7:                            ; preds = %dec_label_pc_100089d9, %dec_label_pc_100089b6, %dec_label_pc_100089d1, %dec_label_pc_100089e1
  %v3_100089ed = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  %v3_100089f5 = load i16, i16* %stack_var_-8, align 2
  %v4_100089f5 = sext i16 %v3_100089f5 to i32
  %v7_100089f5 = and i32 %v3_100089ed, -65536
  %v8_100089f5 = or i32 %v4_100089f5, %v7_100089f5
  br label %dec_label_pc_100089f9

dec_label_pc_100089f9:                            ; preds = %dec_label_pc_10008970, %dec_label_pc_100089e7
  %v0_100089fc = phi i32 [ %v1_10008974, %dec_label_pc_10008970 ], [ %v8_100089f5, %dec_label_pc_100089e7 ]
  ret i32 %v0_100089fc

; uselistorder directives
  uselistorder i16* %stack_var_-8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 10, 9, 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_100089f9, { 1, 0 }
  uselistorder label %dec_label_pc_100089e7, { 3, 0, 2, 1 }
}

define i32 @FreqInRange(i32 %arg1, double %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_100089fd = load i32, i32* @ebp, align 4
  store i32 %v0_100089fd, i32* %stack_var_-4, align 4
  %v4_100089fd = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100089fd, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10008a07 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008a07, i32* @eax, align 4
  %v1_10008a0f = mul i32 %v1_10008a07, 65536
  %v1_10008a0f.off = or i32 %v1_10008a0f, 65535
  %tmp = icmp ult i32 %v1_10008a0f.off, 131071
  br i1 %tmp, label %dec_label_pc_10008a1c, label %dec_label_pc_10008a16

dec_label_pc_10008a16:                            ; preds = %entry
  %v2_10008a16 = or i32 %v1_10008a07, 65535
  br label %dec_label_pc_10008a76

dec_label_pc_10008a1c:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_10008a22 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10008a2e = call i32 @RdMinFreqLimit(i32 %arg1)
  %v0_10008a36 = load i3, i3* @fpu_stat_TOP, align 1
  %v6_10008a36 = add i3 %v0_10008a36, 1
  store i3 %v6_10008a36, i3* @fpu_stat_TOP, align 1
  %v1_10008a3d = call i32 @RdMaxFreqLimit(i32 %arg1)
  %v0_10008a45 = load i3, i3* @fpu_stat_TOP, align 1
  %v6_10008a45 = add i3 %v0_10008a45, 1
  store i3 %v6_10008a45, i3* @fpu_stat_TOP, align 1
  %v3_10008a50 = and i32 %v1_10008a3d, 256
  %v4_10008a50 = icmp eq i32 %v3_10008a50, 0
  %v1_10008a53 = icmp eq i1 %v4_10008a50, false
  br i1 %v1_10008a53, label %dec_label_pc_10008a6b, label %dec_label_pc_10008a55

dec_label_pc_10008a55:                            ; preds = %dec_label_pc_10008a1c
  store i3 %v6_10008a45, i3* @fpu_stat_TOP, align 1
  %v3_10008a5d = and i32 %v1_10008a3d, 16640
  %v4_10008a5d = icmp eq i32 %v3_10008a5d, 0
  br i1 %v4_10008a5d, label %dec_label_pc_10008a6b, label %dec_label_pc_10008a72

dec_label_pc_10008a6b:                            ; preds = %dec_label_pc_10008a55, %dec_label_pc_10008a1c
  br label %dec_label_pc_10008a72

dec_label_pc_10008a72:                            ; preds = %dec_label_pc_10008a55, %dec_label_pc_10008a6b
  %storemerge8 = phi i32 [ 0, %dec_label_pc_10008a6b ], [ 1, %dec_label_pc_10008a55 ]
  %v7_10008a72 = and i32 %v1_10008a3d, -65536
  %v8_10008a72 = or i32 %storemerge8, %v7_10008a72
  br label %dec_label_pc_10008a76

dec_label_pc_10008a76:                            ; preds = %dec_label_pc_10008a16, %dec_label_pc_10008a72
  %storemerge = phi i32 [ %v2_10008a16, %dec_label_pc_10008a16 ], [ %v8_10008a72, %dec_label_pc_10008a72 ]
  %v2_10008a78 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10008a78, i32* @ebp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10008a3d, { 2, 0, 1 }
  uselistorder i32 %v1_10008a07, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10008a76, { 1, 0 }
  uselistorder label %dec_label_pc_10008a72, { 1, 0 }
}

define i32 @function_10008a7a(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10008a7a:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008a88 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008a88, i32* @eax, align 4
  %v1_10008a90 = mul i32 %v1_10008a88, 65536
  %v1_10008a90.off = or i32 %v1_10008a90, 65535
  %tmp = icmp ult i32 %v1_10008a90.off, 131071
  br i1 %tmp, label %dec_label_pc_10008aa5, label %dec_label_pc_10008a97

dec_label_pc_10008a97:                            ; preds = %dec_label_pc_10008a7a
  %v1_10008a9b = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10008aed

dec_label_pc_10008aa5:                            ; preds = %dec_label_pc_10008a7a
  %v2_10008ab2 = sext i32 %arg2 to i64
  %v3_10008ab2 = bitcast i64 %v2_10008ab2 to double
  %v4_10008ab2 = call i32 @FreqInRange(i32 %arg1, double %v3_10008ab2)
  %v1_10008aba = mul i32 %v4_10008ab2, 65536
  %v1_10008aba.off = or i32 %v1_10008aba, 65535
  %tmp10 = icmp ult i32 %v1_10008aba.off, 131071
  br i1 %tmp10, label %dec_label_pc_10008adb, label %dec_label_pc_10008ac1

dec_label_pc_10008ac1:                            ; preds = %dec_label_pc_10008aa5
  %v4_10008aa5 = sitofp i32 %arg2 to x86_fp80
  store i32 %arg1, i32* @edx, align 4
  %v3_10008ac7 = add i32 %arg1, 144
  %v4_10008ac7 = fptrunc x86_fp80 %v4_10008aa5 to double
  %v5_10008ac7 = inttoptr i32 %v3_10008ac7 to double*
  store double %v4_10008ac7, double* %v5_10008ac7, align 4
  br label %dec_label_pc_10008adb

dec_label_pc_10008adb:                            ; preds = %dec_label_pc_10008aa5, %dec_label_pc_10008ac1
  %storemerge = phi i32 [ 0, %dec_label_pc_10008ac1 ], [ -3, %dec_label_pc_10008aa5 ]
  store i32 %arg1, i32* @eax, align 4
  %v3_10008ae1 = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  %v7_10008ae9 = and i32 %v3_10008ae1, -65536
  %v8_10008ae9 = or i32 %storemerge, %v7_10008ae9
  br label %dec_label_pc_10008aed

dec_label_pc_10008aed:                            ; preds = %dec_label_pc_10008a97, %dec_label_pc_10008adb
  %v0_10008af0 = phi i32 [ %v1_10008a9b, %dec_label_pc_10008a97 ], [ %v8_10008ae9, %dec_label_pc_10008adb ]
  ret i32 %v0_10008af0

; uselistorder directives
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 7, 6, 0, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10008aed, { 1, 0 }
  uselistorder label %dec_label_pc_10008adb, { 1, 0 }
}

define i32 @function_10008af1(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10008af1:
  %stack_var_-4 = alloca i32, align 4
  %v0_10008af1 = load i32, i32* @ebp, align 4
  store i32 %v0_10008af1, i32* %stack_var_-4, align 4
  %v4_10008af1 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10008af1, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10008af8 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008af8, i32* @eax, align 4
  %v1_10008b00 = mul i32 %v1_10008af8, 65536
  %v1_10008b00.off = or i32 %v1_10008b00, 65535
  %tmp = icmp ult i32 %v1_10008b00.off, 131071
  br i1 %tmp, label %dec_label_pc_10008b15, label %dec_label_pc_10008b07

dec_label_pc_10008b07:                            ; preds = %dec_label_pc_10008af1
  %v1_10008b0b = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10008b43

dec_label_pc_10008b15:                            ; preds = %dec_label_pc_10008af1
  %v2_10008b22 = sext i32 %arg2 to i64
  %v3_10008b22 = bitcast i64 %v2_10008b22 to double
  %v4_10008b22 = call i32 @FreqInRange(i32 %arg1, double %v3_10008b22)
  %v1_10008b2a = mul i32 %v4_10008b22, 65536
  %v1_10008b2a.off = or i32 %v1_10008b2a, 65535
  %tmp8 = icmp ult i32 %v1_10008b2a.off, 131071
  %v1_10008b2f = icmp eq i1 %tmp8, false
  br i1 %v1_10008b2f, label %dec_label_pc_10008b37, label %dec_label_pc_10008b31

dec_label_pc_10008b31:                            ; preds = %dec_label_pc_10008b15
  %v1_10008b31 = and i32 %v4_10008b22, -65536
  %v2_10008b31 = or i32 %v1_10008b31, 65533
  br label %dec_label_pc_10008b43

dec_label_pc_10008b37:                            ; preds = %dec_label_pc_10008b15
  %v4_10008b15 = sitofp i32 %arg2 to x86_fp80
  %v3_10008b3d = add i32 %arg1, 120
  %v4_10008b3d = fptrunc x86_fp80 %v4_10008b15 to double
  %v5_10008b3d = inttoptr i32 %v3_10008b3d to double*
  store double %v4_10008b3d, double* %v5_10008b3d, align 4
  %v12_10008b40 = and i32 %v4_10008b22, -65536
  br label %dec_label_pc_10008b43

dec_label_pc_10008b43:                            ; preds = %dec_label_pc_10008b31, %dec_label_pc_10008b07, %dec_label_pc_10008b37
  %v0_10008b44 = phi i32 [ %v2_10008b31, %dec_label_pc_10008b31 ], [ %v1_10008b0b, %dec_label_pc_10008b07 ], [ %v12_10008b40, %dec_label_pc_10008b37 ]
  ret i32 %v0_10008b44

; uselistorder directives
  uselistorder i32 %v4_10008b22, { 2, 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10008b43, { 2, 0, 1 }
}

define i32 @function_10008b45(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10008b45:
  %stack_var_-4 = alloca i32, align 4
  %v0_10008b45 = load i32, i32* @ebp, align 4
  store i32 %v0_10008b45, i32* %stack_var_-4, align 4
  %v4_10008b45 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10008b45, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10008b56 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10008b5e = mul i32 %v1_10008b56, 65536
  %v1_10008b5e.off = or i32 %v1_10008b5e, 65535
  %tmp = icmp ult i32 %v1_10008b5e.off, 131071
  br i1 %tmp, label %dec_label_pc_10008b6d, label %dec_label_pc_10008b65

dec_label_pc_10008b65:                            ; preds = %dec_label_pc_10008b45
  br label %dec_label_pc_10008c6c

dec_label_pc_10008b6d:                            ; preds = %dec_label_pc_10008b45
  %v4_10008b6d = icmp eq i32 %arg2, 0
  %v1_10008b71 = icmp eq i1 %v4_10008b6d, false
  br i1 %v1_10008b71, label %dec_label_pc_10008b7b, label %dec_label_pc_10008b73

dec_label_pc_10008b73:                            ; preds = %dec_label_pc_10008b6d
  br label %dec_label_pc_10008c6c

dec_label_pc_10008b7b:                            ; preds = %dec_label_pc_10008b6d
  %v1_10008b7e = add i32 %arg1, 164
  %v2_10008b7e = inttoptr i32 %v1_10008b7e to i32*
  %v3_10008b7e = load i32, i32* %v2_10008b7e, align 4
  %v1_10008b8a = add i32 %arg1, 8
  %v2_10008b8a = inttoptr i32 %v1_10008b8a to i32*
  %v3_10008b8a = load i32, i32* %v2_10008b8a, align 4
  %v6_10008b8d = sext i32 %v3_10008b8a to i64
  %v7_10008b8d = bitcast i64 %v6_10008b8d to double
  %v1_10008b99 = add i32 %arg1, 24
  %v2_10008b99 = inttoptr i32 %v1_10008b99 to i32*
  %v3_10008b99 = load i32, i32* %v2_10008b99, align 4
  store i32 %v3_10008b99, i32* @edx, align 4
  %v6_10008b9c = sext i32 %v3_10008b99 to i64
  %v7_10008b9c = bitcast i64 %v6_10008b9c to double
  %v1_10008b9f = add i32 %arg1, 28
  %v2_10008b9f = inttoptr i32 %v1_10008b9f to i32*
  %v3_10008b9f = load i32, i32* %v2_10008b9f, align 4
  %v4_10008ba5 = sitofp i32 %arg3 to x86_fp80
  %v1_10008bab = add i32 %v3_10008b7e, -1
  store i32 %v1_10008bab, i32* @ecx, align 4
  %tmp53 = fpext double %v7_10008b9c to x86_fp80
  %tmp54 = fpext double %v7_10008b8d to x86_fp80
  %v3_10008bbe = and i32 %v3_10008b9f, 16640
  %v4_10008bbe = icmp eq i32 %v3_10008bbe, 0
  br i1 %v4_10008bbe, label %dec_label_pc_10008be2, label %dec_label_pc_10008bc3

dec_label_pc_10008bc3:                            ; preds = %dec_label_pc_10008b7b
  br label %dec_label_pc_10008c6c

dec_label_pc_10008be2:                            ; preds = %dec_label_pc_10008b7b
  %v11_10008be5 = fsub x86_fp80 %tmp54, %v4_10008ba5
  %tmp55 = fptrunc x86_fp80 %v11_10008be5 to double
  %v3_10008bee = call i32 @function_1000d83e(double %tmp55)
  %v0_10008bf6 = load i3, i3* @fpu_stat_TOP, align 1
  store i32 1, i32* @eax, align 4
  %v5_10008c1829 = icmp sgt i32 %v3_10008b7e, 1
  br i1 %v5_10008c1829, label %dec_label_pc_10008c1a, label %dec_label_pc_10008c5b

dec_label_pc_10008c1a:                            ; preds = %dec_label_pc_10008be2, %dec_label_pc_10008c59
  %v5_10008c1a.in = phi i3 [ %v0_10008c3d, %dec_label_pc_10008c59 ], [ %v0_10008bf6, %dec_label_pc_10008be2 ]
  %storemerge1031 = phi i32 [ %v1_10008c0c, %dec_label_pc_10008c59 ], [ 1, %dec_label_pc_10008be2 ]
  %stack_var_-24.030 = phi i32 [ %stack_var_-24.1, %dec_label_pc_10008c59 ], [ 0, %dec_label_pc_10008be2 ]
  %v5_10008c1a = add i3 %v5_10008c1a.in, 1
  %v4_10008c1a = sitofp i32 %storemerge1031 to x86_fp80
  %v11_10008c1d = fmul x86_fp80 %tmp53, %v4_10008c1a
  %v11_10008c20 = fadd x86_fp80 %tmp54, %v11_10008c1d
  %v7_10008c29 = fsub x86_fp80 %v11_10008c20, %v4_10008ba5
  store i3 %v5_10008c1a, i3* @fpu_stat_TOP, align 1
  %tmp56 = fptrunc x86_fp80 %v7_10008c29 to double
  %v3_10008c32 = call i32 @function_1000d83e(double %tmp56)
  %v0_10008c3d = load i3, i3* @fpu_stat_TOP, align 1
  %v3_10008c42 = and i32 %v3_10008c32, 16640
  %v4_10008c42 = icmp eq i32 %v3_10008c42, 0
  br i1 %v4_10008c42, label %dec_label_pc_10008c59, label %dec_label_pc_10008c47

dec_label_pc_10008c47:                            ; preds = %dec_label_pc_10008c1a
  %v1_10008c3a = load x86_fp80, x86_fp80* @st0, align 4
  %v4_10008c3a = fptrunc x86_fp80 %v1_10008c3a to double
  %v4_10008c47 = fptrunc double %v4_10008c3a to float
  %v5_10008c47 = bitcast float %v4_10008c47 to i32
  store i32 %v5_10008c47, i32* @ecx, align 4
  br label %dec_label_pc_10008c59

dec_label_pc_10008c59:                            ; preds = %dec_label_pc_10008c1a, %dec_label_pc_10008c47
  %stack_var_-24.1 = phi i32 [ %stack_var_-24.030, %dec_label_pc_10008c1a ], [ %storemerge1031, %dec_label_pc_10008c47 ]
  %v1_10008c0c = add nuw nsw i32 %storemerge1031, 1
  store i32 %v1_10008c0c, i32* @edx, align 4
  store i32 %v1_10008c0c, i32* @eax, align 4
  %exitcond = icmp eq i32 %v1_10008c0c, %v3_10008b7e
  br i1 %exitcond, label %dec_label_pc_10008c5b, label %dec_label_pc_10008c1a

dec_label_pc_10008c5b:                            ; preds = %dec_label_pc_10008c59, %dec_label_pc_10008be2
  %stack_var_-24.0.lcssa = phi i32 [ 0, %dec_label_pc_10008be2 ], [ %stack_var_-24.1, %dec_label_pc_10008c59 ]
  %v3_10008c61 = call i32 @SetFuncStatusCode(i32 %arg1, i16 2)
  br label %dec_label_pc_10008c6c

dec_label_pc_10008c6c:                            ; preds = %dec_label_pc_10008bc3, %dec_label_pc_10008b73, %dec_label_pc_10008b65, %dec_label_pc_10008c5b
  %v0_10008c6f = phi i32 [ %v1_10008bab, %dec_label_pc_10008bc3 ], [ -1, %dec_label_pc_10008b73 ], [ -1, %dec_label_pc_10008b65 ], [ %stack_var_-24.0.lcssa, %dec_label_pc_10008c5b ]
  ret i32 %v0_10008c6f

; uselistorder directives
  uselistorder i32 %v1_10008c0c, { 1, 2, 3, 0 }
  uselistorder i32 %storemerge1031, { 1, 2, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 6, 0, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10008c6c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_10008c59, { 1, 0 }
  uselistorder label %dec_label_pc_10008c1a, { 1, 0 }
}

define i32 @RdCommHandle(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008c77 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10008c7f = mul i32 %v1_10008c77, 65536
  %v1_10008c7f.off = or i32 %v1_10008c7f, 65535
  %tmp = icmp ult i32 %v1_10008c7f.off, 131071
  br i1 %tmp, label %dec_label_pc_10008c8a, label %dec_label_pc_10008c86

dec_label_pc_10008c86:                            ; preds = %entry
  br label %dec_label_pc_10008c93

dec_label_pc_10008c8a:                            ; preds = %entry
  %v1_10008c8d = add i32 %arg1, 480
  %v2_10008c8d = inttoptr i32 %v1_10008c8d to i32*
  %v3_10008c8d = load i32, i32* %v2_10008c8d, align 4
  br label %dec_label_pc_10008c93

dec_label_pc_10008c93:                            ; preds = %dec_label_pc_10008c86, %dec_label_pc_10008c8a
  %storemerge = phi i32 [ 0, %dec_label_pc_10008c86 ], [ %v3_10008c8d, %dec_label_pc_10008c8a ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10008c93, { 1, 0 }
}

define i32 @RdCommInitString(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008c9c = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10008ca4 = mul i32 %v1_10008c9c, 65536
  %v1_10008ca4.off = or i32 %v1_10008ca4, 65535
  %tmp = icmp ult i32 %v1_10008ca4.off, 131071
  br i1 %tmp, label %dec_label_pc_10008cb1, label %dec_label_pc_10008cab

dec_label_pc_10008cab:                            ; preds = %entry
  %v2_10008cab = or i32 %v1_10008c9c, 65535
  br label %dec_label_pc_10008cd6

dec_label_pc_10008cb1:                            ; preds = %entry
  %v4_10008cb1 = icmp eq i32 %arg2, 0
  %v1_10008cb5 = icmp eq i1 %v4_10008cb1, false
  br i1 %v1_10008cb5, label %dec_label_pc_10008cbd, label %dec_label_pc_10008cb7

dec_label_pc_10008cb7:                            ; preds = %dec_label_pc_10008cb1
  %v2_10008cb7 = or i32 %v1_10008c9c, 65535
  br label %dec_label_pc_10008cd6

dec_label_pc_10008cbd:                            ; preds = %dec_label_pc_10008cb1
  %v1_10008cc0 = add i32 %arg1, 594
  store i32 %v1_10008cc0, i32* @edx, align 4
  %v1_10008ccb = call i32 @function_1000d570(i32 %arg2)
  %v12_10008cd3 = and i32 %v1_10008ccb, -65536
  br label %dec_label_pc_10008cd6

dec_label_pc_10008cd6:                            ; preds = %dec_label_pc_10008cb7, %dec_label_pc_10008cab, %dec_label_pc_10008cbd
  %v0_10008cd7 = phi i32 [ %v2_10008cb7, %dec_label_pc_10008cb7 ], [ %v2_10008cab, %dec_label_pc_10008cab ], [ %v12_10008cd3, %dec_label_pc_10008cbd ]
  ret i32 %v0_10008cd7

; uselistorder directives
  uselistorder i32 %v1_10008c9c, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10008cd6, { 2, 0, 1 }
}

define i32 @RdCommNumber(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008cdf = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10008ce7 = mul i32 %v1_10008cdf, 65536
  %v1_10008ce7.off = or i32 %v1_10008ce7, 65535
  %tmp = icmp ult i32 %v1_10008ce7.off, 131071
  br i1 %tmp, label %dec_label_pc_10008cf4, label %dec_label_pc_10008cee

dec_label_pc_10008cee:                            ; preds = %entry
  %v2_10008cee = or i32 %v1_10008cdf, 65535
  br label %dec_label_pc_10008cfe

dec_label_pc_10008cf4:                            ; preds = %entry
  %v1_10008cf7 = add i32 %arg1, 532
  %v2_10008cf7 = inttoptr i32 %v1_10008cf7 to i16*
  %v3_10008cf7 = load i16, i16* %v2_10008cf7, align 2
  %v4_10008cf7 = zext i16 %v3_10008cf7 to i32
  %v6_10008cf7 = and i32 %v1_10008cdf, -65536
  %v7_10008cf7 = or i32 %v4_10008cf7, %v6_10008cf7
  br label %dec_label_pc_10008cfe

dec_label_pc_10008cfe:                            ; preds = %dec_label_pc_10008cee, %dec_label_pc_10008cf4
  %storemerge = phi i32 [ %v2_10008cee, %dec_label_pc_10008cee ], [ %v7_10008cf7, %dec_label_pc_10008cf4 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10008cdf, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10008cfe, { 1, 0 }
}

define i32 @SetCommHandle(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10008d07 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008d07, i32* %eax.global-to-local, align 4
  %v1_10008d0f = mul i32 %v1_10008d07, 65536
  %v1_10008d0f.off = or i32 %v1_10008d0f, 65535
  %tmp = icmp ult i32 %v1_10008d0f.off, 131071
  br i1 %tmp, label %dec_label_pc_10008d1c, label %dec_label_pc_10008d16

dec_label_pc_10008d16:                            ; preds = %entry
  %v2_10008d16 = or i32 %v1_10008d07, 65535
  store i32 %v2_10008d16, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008d37

dec_label_pc_10008d1c:                            ; preds = %entry
  %v4_10008d1c = icmp eq i32 %arg2, 0
  %v1_10008d20 = icmp eq i1 %v4_10008d1c, false
  br i1 %v1_10008d20, label %dec_label_pc_10008d28, label %dec_label_pc_10008d22

dec_label_pc_10008d22:                            ; preds = %dec_label_pc_10008d1c
  %v2_10008d22 = or i32 %v1_10008d07, 65535
  store i32 %v2_10008d22, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008d37

dec_label_pc_10008d28:                            ; preds = %dec_label_pc_10008d1c
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_10008d2e = add i32 %arg1, 480
  %v3_10008d2e = inttoptr i32 %v2_10008d2e to i32*
  store i32 %arg2, i32* %v3_10008d2e, align 4
  %v11_10008d34 = load i32, i32* %eax.global-to-local, align 4
  %v12_10008d34 = and i32 %v11_10008d34, -65536
  store i32 %v12_10008d34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008d37

dec_label_pc_10008d37:                            ; preds = %dec_label_pc_10008d22, %dec_label_pc_10008d16, %dec_label_pc_10008d28
  %v0_10008d38 = phi i32 [ %v2_10008d22, %dec_label_pc_10008d22 ], [ %v2_10008d16, %dec_label_pc_10008d16 ], [ %v12_10008d34, %dec_label_pc_10008d28 ]
  ret i32 %v0_10008d38

; uselistorder directives
  uselistorder i32 %v1_10008d07, { 1, 2, 0, 3 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10008d37, { 2, 0, 1 }
}

define i32 @function_10008d39(i32 %arg1, i16 %arg2) local_unnamed_addr {
dec_label_pc_10008d39:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10008d40 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008d40, i32* %eax.global-to-local, align 4
  %v1_10008d48 = mul i32 %v1_10008d40, 65536
  %v1_10008d48.off = or i32 %v1_10008d48, 65535
  %tmp = icmp ult i32 %v1_10008d48.off, 131071
  br i1 %tmp, label %dec_label_pc_10008d55, label %dec_label_pc_10008d4f

dec_label_pc_10008d4f:                            ; preds = %dec_label_pc_10008d39
  %v2_10008d4f = or i32 %v1_10008d40, 65535
  br label %dec_label_pc_10008d66

dec_label_pc_10008d55:                            ; preds = %dec_label_pc_10008d39
  %v4_10008d58 = zext i16 %arg2 to i32
  %v6_10008d58 = and i32 %v1_10008d40, -65536
  %v7_10008d58 = or i32 %v6_10008d58, %v4_10008d58
  store i32 %v7_10008d58, i32* %eax.global-to-local, align 4
  %v3_10008d5c = add i32 %arg1, 532
  %v4_10008d5c = inttoptr i32 %v3_10008d5c to i16*
  store i16 %arg2, i16* %v4_10008d5c, align 2
  %v11_10008d63 = load i32, i32* %eax.global-to-local, align 4
  %v12_10008d63 = and i32 %v11_10008d63, -65536
  br label %dec_label_pc_10008d66

dec_label_pc_10008d66:                            ; preds = %dec_label_pc_10008d4f, %dec_label_pc_10008d55
  %storemerge = phi i32 [ %v2_10008d4f, %dec_label_pc_10008d4f ], [ %v12_10008d63, %dec_label_pc_10008d55 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10008d40, { 2, 1, 0, 3 }
  uselistorder i32* %eax.global-to-local, { 3, 0, 1, 2 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10008d66, { 1, 0 }
}

define i32 @RdSessionString(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008d6f = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008d6f, i32* @eax, align 4
  %v1_10008d77 = mul i32 %v1_10008d6f, 65536
  %v1_10008d77.off = or i32 %v1_10008d77, 65535
  %tmp = icmp ult i32 %v1_10008d77.off, 131071
  br i1 %tmp, label %dec_label_pc_10008d8c, label %dec_label_pc_10008d7e

dec_label_pc_10008d7e:                            ; preds = %entry
  %v1_10008d82 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10008dbb

dec_label_pc_10008d8c:                            ; preds = %entry
  %v4_10008d8c = icmp eq i32 %arg2, 0
  %v1_10008d90 = icmp eq i1 %v4_10008d8c, false
  br i1 %v1_10008d90, label %dec_label_pc_10008da2, label %dec_label_pc_10008d92

dec_label_pc_10008d92:                            ; preds = %dec_label_pc_10008d8c
  store i32 %arg1, i32* @eax, align 4
  %v3_10008d98 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -3)
  br label %dec_label_pc_10008dbb

dec_label_pc_10008da2:                            ; preds = %dec_label_pc_10008d8c
  store i32 %arg2, i32* @edx, align 4
  %v1_10008db0 = call i32 @function_1000d570(i32 %arg2)
  %v12_10008db8 = and i32 %v1_10008db0, -65536
  br label %dec_label_pc_10008dbb

dec_label_pc_10008dbb:                            ; preds = %dec_label_pc_10008d92, %dec_label_pc_10008d7e, %dec_label_pc_10008da2
  %v0_10008dbc = phi i32 [ %v3_10008d98, %dec_label_pc_10008d92 ], [ %v1_10008d82, %dec_label_pc_10008d7e ], [ %v12_10008db8, %dec_label_pc_10008da2 ]
  ret i32 %v0_10008dbc

; uselistorder directives
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10008dbb, { 2, 0, 1 }
}

define i32 @function_10008dbd(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10008dbd:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008dc4 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10008dcc = mul i32 %v1_10008dc4, 65536
  %v1_10008dcc.off = or i32 %v1_10008dcc, 65535
  %tmp = icmp ult i32 %v1_10008dcc.off, 131071
  br i1 %tmp, label %dec_label_pc_10008dd9, label %dec_label_pc_10008dd3

dec_label_pc_10008dd3:                            ; preds = %dec_label_pc_10008dbd
  %v2_10008dd3 = or i32 %v1_10008dc4, 65535
  br label %dec_label_pc_10008dfe

dec_label_pc_10008dd9:                            ; preds = %dec_label_pc_10008dbd
  %v4_10008dd9 = icmp eq i32 %arg2, 0
  %v1_10008ddd = icmp eq i1 %v4_10008dd9, false
  br i1 %v1_10008ddd, label %dec_label_pc_10008de5, label %dec_label_pc_10008ddf

dec_label_pc_10008ddf:                            ; preds = %dec_label_pc_10008dd9
  %v2_10008ddf = or i32 %v1_10008dc4, 65535
  br label %dec_label_pc_10008dfe

dec_label_pc_10008de5:                            ; preds = %dec_label_pc_10008dd9
  %v1_10008de8 = add i32 %arg1, 544
  store i32 %v1_10008de8, i32* @edx, align 4
  %v1_10008df3 = call i32 @function_1000d570(i32 %arg2)
  %v12_10008dfb = and i32 %v1_10008df3, -65536
  br label %dec_label_pc_10008dfe

dec_label_pc_10008dfe:                            ; preds = %dec_label_pc_10008ddf, %dec_label_pc_10008dd3, %dec_label_pc_10008de5
  %v0_10008dff = phi i32 [ %v2_10008ddf, %dec_label_pc_10008ddf ], [ %v2_10008dd3, %dec_label_pc_10008dd3 ], [ %v12_10008dfb, %dec_label_pc_10008de5 ]
  ret i32 %v0_10008dff

; uselistorder directives
  uselistorder i32 %v1_10008dc4, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10008dfe, { 2, 0, 1 }
}

define i32 @function_10008e00(i32 %arg1) local_unnamed_addr {
dec_label_pc_10008e00:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008e07 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10008e0f = mul i32 %v1_10008e07, 65536
  %v1_10008e0f.off = or i32 %v1_10008e0f, 65535
  %tmp = icmp ult i32 %v1_10008e0f.off, 131071
  br i1 %tmp, label %dec_label_pc_10008e1c, label %dec_label_pc_10008e16

dec_label_pc_10008e16:                            ; preds = %dec_label_pc_10008e00
  %v2_10008e16 = or i32 %v1_10008e07, 65535
  br label %dec_label_pc_10008e26

dec_label_pc_10008e1c:                            ; preds = %dec_label_pc_10008e00
  %v1_10008e1f = add i32 %arg1, 540
  %v2_10008e1f = inttoptr i32 %v1_10008e1f to i16*
  %v3_10008e1f = load i16, i16* %v2_10008e1f, align 2
  %v4_10008e1f = zext i16 %v3_10008e1f to i32
  %v6_10008e1f = and i32 %v1_10008e07, -65536
  %v7_10008e1f = or i32 %v4_10008e1f, %v6_10008e1f
  br label %dec_label_pc_10008e26

dec_label_pc_10008e26:                            ; preds = %dec_label_pc_10008e16, %dec_label_pc_10008e1c
  %storemerge = phi i32 [ %v2_10008e16, %dec_label_pc_10008e16 ], [ %v7_10008e1f, %dec_label_pc_10008e1c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10008e07, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10008e26, { 1, 0 }
}

define i32 @function_10008e28(i32 %arg1, i16 %arg2) local_unnamed_addr {
dec_label_pc_10008e28:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10008e2f = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008e2f, i32* %eax.global-to-local, align 4
  %v1_10008e37 = mul i32 %v1_10008e2f, 65536
  %v1_10008e37.off = or i32 %v1_10008e37, 65535
  %tmp = icmp ult i32 %v1_10008e37.off, 131071
  br i1 %tmp, label %dec_label_pc_10008e44, label %dec_label_pc_10008e3e

dec_label_pc_10008e3e:                            ; preds = %dec_label_pc_10008e28
  %v2_10008e3e = or i32 %v1_10008e2f, 65535
  br label %dec_label_pc_10008e55

dec_label_pc_10008e44:                            ; preds = %dec_label_pc_10008e28
  %v4_10008e47 = zext i16 %arg2 to i32
  %v6_10008e47 = and i32 %v1_10008e2f, -65536
  %v7_10008e47 = or i32 %v6_10008e47, %v4_10008e47
  store i32 %v7_10008e47, i32* %eax.global-to-local, align 4
  %v3_10008e4b = add i32 %arg1, 540
  %v4_10008e4b = inttoptr i32 %v3_10008e4b to i16*
  store i16 %arg2, i16* %v4_10008e4b, align 2
  %v11_10008e52 = load i32, i32* %eax.global-to-local, align 4
  %v12_10008e52 = and i32 %v11_10008e52, -65536
  br label %dec_label_pc_10008e55

dec_label_pc_10008e55:                            ; preds = %dec_label_pc_10008e3e, %dec_label_pc_10008e44
  %storemerge = phi i32 [ %v2_10008e3e, %dec_label_pc_10008e3e ], [ %v12_10008e52, %dec_label_pc_10008e44 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10008e2f, { 1, 2, 0, 3 }
  uselistorder i32* %eax.global-to-local, { 3, 0, 1, 2 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10008e55, { 1, 0 }
}

define i32 @function_10008e57(i32 %arg1) local_unnamed_addr {
dec_label_pc_10008e57:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008e5e = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10008e66 = mul i32 %v1_10008e5e, 65536
  %v1_10008e66.off = or i32 %v1_10008e66, 65535
  %tmp = icmp ult i32 %v1_10008e66.off, 131071
  br i1 %tmp, label %dec_label_pc_10008e73, label %dec_label_pc_10008e6d

dec_label_pc_10008e6d:                            ; preds = %dec_label_pc_10008e57
  %v2_10008e6d = or i32 %v1_10008e5e, 65535
  br label %dec_label_pc_10008e7d

dec_label_pc_10008e73:                            ; preds = %dec_label_pc_10008e57
  %v1_10008e76 = add i32 %arg1, 644
  %v2_10008e76 = inttoptr i32 %v1_10008e76 to i16*
  %v3_10008e76 = load i16, i16* %v2_10008e76, align 2
  %v4_10008e76 = zext i16 %v3_10008e76 to i32
  %v6_10008e76 = and i32 %v1_10008e5e, -65536
  %v7_10008e76 = or i32 %v4_10008e76, %v6_10008e76
  br label %dec_label_pc_10008e7d

dec_label_pc_10008e7d:                            ; preds = %dec_label_pc_10008e6d, %dec_label_pc_10008e73
  %storemerge = phi i32 [ %v2_10008e6d, %dec_label_pc_10008e6d ], [ %v7_10008e76, %dec_label_pc_10008e73 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10008e5e, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10008e7d, { 1, 0 }
}

define i32 @function_10008e7f(i32 %arg1, i16 %arg2) local_unnamed_addr {
dec_label_pc_10008e7f:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008e86 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008e86, i32* @eax, align 4
  %v1_10008e8e = mul i32 %v1_10008e86, 65536
  %v1_10008e8e.off = or i32 %v1_10008e8e, 65535
  %tmp = icmp ult i32 %v1_10008e8e.off, 131071
  br i1 %tmp, label %dec_label_pc_10008ea3, label %dec_label_pc_10008e95

dec_label_pc_10008e95:                            ; preds = %dec_label_pc_10008e7f
  %v1_10008e99 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_10008ebf

dec_label_pc_10008ea3:                            ; preds = %dec_label_pc_10008e7f
  store i32 %arg1, i32* @eax, align 4
  %v3_10008eaa = add i32 %arg1, 644
  %v4_10008eaa = inttoptr i32 %v3_10008eaa to i16*
  store i16 %arg2, i16* %v4_10008eaa, align 2
  store i32 %arg1, i32* @edx, align 4
  %v3_10008eb7 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_10008ebf

dec_label_pc_10008ebf:                            ; preds = %dec_label_pc_10008e95, %dec_label_pc_10008ea3
  %v0_10008ec0 = phi i32 [ %v3_10008eb7, %dec_label_pc_10008ea3 ], [ %v1_10008e99, %dec_label_pc_10008e95 ]
  ret i32 %v0_10008ec0

; uselistorder directives
  uselistorder i32 %arg1, { 6, 5, 0, 3, 4, 2, 1 }
  uselistorder label %dec_label_pc_10008ebf, { 1, 0 }
}

define i32 @function_10008ec1(i32 %arg1, i16 %arg2) local_unnamed_addr {
dec_label_pc_10008ec1:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10008ec8 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10008ec8, i32* %eax.global-to-local, align 4
  %v1_10008ed0 = mul i32 %v1_10008ec8, 65536
  %v1_10008ed0.off = or i32 %v1_10008ed0, 65535
  %tmp = icmp ult i32 %v1_10008ed0.off, 131071
  br i1 %tmp, label %dec_label_pc_10008edd, label %dec_label_pc_10008ed7

dec_label_pc_10008ed7:                            ; preds = %dec_label_pc_10008ec1
  %v2_10008ed7 = or i32 %v1_10008ec8, 65535
  br label %dec_label_pc_10008eee

dec_label_pc_10008edd:                            ; preds = %dec_label_pc_10008ec1
  %v4_10008ee0 = zext i16 %arg2 to i32
  %v6_10008ee0 = and i32 %v1_10008ec8, -65536
  %v7_10008ee0 = or i32 %v6_10008ee0, %v4_10008ee0
  store i32 %v7_10008ee0, i32* %eax.global-to-local, align 4
  %v3_10008ee4 = add i32 %arg1, 542
  %v4_10008ee4 = inttoptr i32 %v3_10008ee4 to i16*
  store i16 %arg2, i16* %v4_10008ee4, align 2
  %v11_10008eeb = load i32, i32* %eax.global-to-local, align 4
  %v12_10008eeb = and i32 %v11_10008eeb, -65536
  br label %dec_label_pc_10008eee

dec_label_pc_10008eee:                            ; preds = %dec_label_pc_10008ed7, %dec_label_pc_10008edd
  %storemerge = phi i32 [ %v2_10008ed7, %dec_label_pc_10008ed7 ], [ %v12_10008eeb, %dec_label_pc_10008edd ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10008ec8, { 2, 1, 0, 3 }
  uselistorder i32* %eax.global-to-local, { 3, 0, 1, 2 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10008eee, { 1, 0 }
}

define i32 @function_10008ef0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10008ef0:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008ef7 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10008eff = mul i32 %v1_10008ef7, 65536
  %v1_10008eff.off = or i32 %v1_10008eff, 65535
  %tmp = icmp ult i32 %v1_10008eff.off, 131071
  br i1 %tmp, label %dec_label_pc_10008f0c, label %dec_label_pc_10008f06

dec_label_pc_10008f06:                            ; preds = %dec_label_pc_10008ef0
  %v2_10008f06 = or i32 %v1_10008ef7, 65535
  br label %dec_label_pc_10008f48

dec_label_pc_10008f0c:                            ; preds = %dec_label_pc_10008ef0
  %v4_10008f0c = icmp eq i32 %arg2, 0
  %v1_10008f10 = icmp eq i1 %v4_10008f0c, false
  br i1 %v1_10008f10, label %dec_label_pc_10008f18, label %dec_label_pc_10008f12

dec_label_pc_10008f12:                            ; preds = %dec_label_pc_10008f0c
  %v2_10008f12 = or i32 %v1_10008ef7, 65535
  br label %dec_label_pc_10008f48

dec_label_pc_10008f18:                            ; preds = %dec_label_pc_10008f0c
  store i32 %arg2, i32* @edx, align 4
  %v1_10008f1c = inttoptr i32 %arg2 to i8*
  %v2_10008f1c = call i32 @function_1000d900(i8* %v1_10008f1c)
  %v5_10008f24 = icmp ult i32 %v2_10008f1c, 50
  br i1 %v5_10008f24, label %dec_label_pc_10008f2f, label %dec_label_pc_10008f29

dec_label_pc_10008f29:                            ; preds = %dec_label_pc_10008f18
  %v2_10008f29 = or i32 %v2_10008f1c, 65535
  br label %dec_label_pc_10008f48

dec_label_pc_10008f2f:                            ; preds = %dec_label_pc_10008f18
  %v1_10008f36 = add i32 %arg1, 544
  %v1_10008f3d = call i32 @function_1000d570(i32 %v1_10008f36)
  %v12_10008f45 = and i32 %v1_10008f3d, -65536
  br label %dec_label_pc_10008f48

dec_label_pc_10008f48:                            ; preds = %dec_label_pc_10008f12, %dec_label_pc_10008f06, %dec_label_pc_10008f29, %dec_label_pc_10008f2f
  %v0_10008f49 = phi i32 [ %v2_10008f12, %dec_label_pc_10008f12 ], [ %v2_10008f06, %dec_label_pc_10008f06 ], [ %v2_10008f29, %dec_label_pc_10008f29 ], [ %v12_10008f45, %dec_label_pc_10008f2f ]
  ret i32 %v0_10008f49

; uselistorder directives
  uselistorder i32 %v2_10008f1c, { 1, 0 }
  uselistorder i32 %v1_10008ef7, { 1, 2, 0 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10008f48, { 3, 2, 0, 1 }
}

define i32 @function_10008f4a(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10008f4a:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008f51 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10008f59 = mul i32 %v1_10008f51, 65536
  %v1_10008f59.off = or i32 %v1_10008f59, 65535
  %tmp = icmp ult i32 %v1_10008f59.off, 131071
  br i1 %tmp, label %dec_label_pc_10008f66, label %dec_label_pc_10008f60

dec_label_pc_10008f60:                            ; preds = %dec_label_pc_10008f4a
  %v2_10008f60 = or i32 %v1_10008f51, 65535
  br label %dec_label_pc_10008fa2

dec_label_pc_10008f66:                            ; preds = %dec_label_pc_10008f4a
  %v4_10008f66 = icmp eq i32 %arg2, 0
  %v1_10008f6a = icmp eq i1 %v4_10008f66, false
  br i1 %v1_10008f6a, label %dec_label_pc_10008f72, label %dec_label_pc_10008f6c

dec_label_pc_10008f6c:                            ; preds = %dec_label_pc_10008f66
  %v2_10008f6c = or i32 %v1_10008f51, 65535
  br label %dec_label_pc_10008fa2

dec_label_pc_10008f72:                            ; preds = %dec_label_pc_10008f66
  store i32 %arg2, i32* @edx, align 4
  %v1_10008f76 = inttoptr i32 %arg2 to i8*
  %v2_10008f76 = call i32 @function_1000d900(i8* %v1_10008f76)
  %v2_10008f7e = icmp ult i32 %v2_10008f76, 80
  br i1 %v2_10008f7e, label %dec_label_pc_10008f89, label %dec_label_pc_10008f83

dec_label_pc_10008f83:                            ; preds = %dec_label_pc_10008f72
  %v2_10008f83 = or i32 %v2_10008f76, 65535
  br label %dec_label_pc_10008fa2

dec_label_pc_10008f89:                            ; preds = %dec_label_pc_10008f72
  %v1_10008f90 = add i32 %arg1, 594
  %v1_10008f97 = call i32 @function_1000d570(i32 %v1_10008f90)
  %v12_10008f9f = and i32 %v1_10008f97, -65536
  br label %dec_label_pc_10008fa2

dec_label_pc_10008fa2:                            ; preds = %dec_label_pc_10008f83, %dec_label_pc_10008f6c, %dec_label_pc_10008f60, %dec_label_pc_10008f89
  %v0_10008fa3 = phi i32 [ %v2_10008f83, %dec_label_pc_10008f83 ], [ %v2_10008f6c, %dec_label_pc_10008f6c ], [ %v2_10008f60, %dec_label_pc_10008f60 ], [ %v12_10008f9f, %dec_label_pc_10008f89 ]
  ret i32 %v0_10008fa3

; uselistorder directives
  uselistorder i32 %v2_10008f76, { 1, 0 }
  uselistorder i32 %v1_10008f51, { 1, 2, 0 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10008fa2, { 3, 0, 1, 2 }
}

define i32 @function_10008fa4(i32 %arg1) local_unnamed_addr {
dec_label_pc_10008fa4:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008fab = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10008fb3 = mul i32 %v1_10008fab, 65536
  %v1_10008fb3.off = or i32 %v1_10008fb3, 65535
  %tmp = icmp ult i32 %v1_10008fb3.off, 131071
  br i1 %tmp, label %dec_label_pc_10008fc0, label %dec_label_pc_10008fba

dec_label_pc_10008fba:                            ; preds = %dec_label_pc_10008fa4
  %v2_10008fba = or i32 %v1_10008fab, 65535
  br label %dec_label_pc_10008fca

dec_label_pc_10008fc0:                            ; preds = %dec_label_pc_10008fa4
  %v1_10008fc3 = add i32 %arg1, 542
  %v2_10008fc3 = inttoptr i32 %v1_10008fc3 to i16*
  %v3_10008fc3 = load i16, i16* %v2_10008fc3, align 2
  %v4_10008fc3 = zext i16 %v3_10008fc3 to i32
  %v6_10008fc3 = and i32 %v1_10008fab, -65536
  %v7_10008fc3 = or i32 %v4_10008fc3, %v6_10008fc3
  br label %dec_label_pc_10008fca

dec_label_pc_10008fca:                            ; preds = %dec_label_pc_10008fba, %dec_label_pc_10008fc0
  %storemerge = phi i32 [ %v2_10008fba, %dec_label_pc_10008fba ], [ %v7_10008fc3, %dec_label_pc_10008fc0 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10008fab, { 1, 2, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10008fca, { 1, 0 }
}

define i32 @function_10008fcc(i32 %arg1) local_unnamed_addr {
dec_label_pc_10008fcc:
  store i32 %arg1, i32* @eax, align 4
  %v1_10008fd3 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10008fdb = mul i32 %v1_10008fd3, 65536
  %v1_10008fdb.off = or i32 %v1_10008fdb, 65535
  %tmp = icmp ult i32 %v1_10008fdb.off, 131071
  br i1 %tmp, label %dec_label_pc_10008fe8, label %dec_label_pc_10008fe2

dec_label_pc_10008fe2:                            ; preds = %dec_label_pc_10008fcc
  %v2_10008fe2 = or i32 %v1_10008fd3, 65535
  br label %dec_label_pc_10008ff2

dec_label_pc_10008fe8:                            ; preds = %dec_label_pc_10008fcc
  %v1_10008feb = add i32 %arg1, 538
  %v2_10008feb = inttoptr i32 %v1_10008feb to i16*
  %v3_10008feb = load i16, i16* %v2_10008feb, align 2
  %v4_10008feb = zext i16 %v3_10008feb to i32
  %v6_10008feb = and i32 %v1_10008fd3, -65536
  %v7_10008feb = or i32 %v4_10008feb, %v6_10008feb
  br label %dec_label_pc_10008ff2

dec_label_pc_10008ff2:                            ; preds = %dec_label_pc_10008fe2, %dec_label_pc_10008fe8
  %storemerge = phi i32 [ %v2_10008fe2, %dec_label_pc_10008fe2 ], [ %v7_10008feb, %dec_label_pc_10008fe8 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10008fd3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10008ff2, { 1, 0 }
}

define i32 @function_10008ff4(i32 %arg1) local_unnamed_addr {
dec_label_pc_10008ff4:
  %v0_10008ff7 = load i16, i16* @global_var_10018290.63, align 16
  %v1_10008ff7 = sext i16 %v0_10008ff7 to i32
  %v10_10008ffe = icmp eq i16 %v0_10008ff7, -1
  %v1_10009001 = icmp eq i1 %v10_10008ffe, false
  br i1 %v1_10009001, label %dec_label_pc_10009033, label %dec_label_pc_10009020.preheader

dec_label_pc_10009020.preheader:                  ; preds = %dec_label_pc_10008ff4
  %v4_100090273 = load i32, i32* @global_var_10018228.65, align 4
  %v14_100090274 = icmp eq i32 %v4_100090273, -1
  br i1 %v14_100090274, label %dec_label_pc_10009033.loopexit, label %dec_label_pc_10009031.lr.ph

dec_label_pc_10009031.lr.ph:                      ; preds = %dec_label_pc_10009020.preheader
  %v2_1000900e.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10009031

dec_label_pc_10009031:                            ; preds = %dec_label_pc_10009031.lr.ph, %dec_label_pc_10009031
  %v2_1000900e = phi i32 [ %v2_1000900e.pre, %dec_label_pc_10009031.lr.ph ], [ %v19_10009015, %dec_label_pc_10009031 ]
  %storemerge5 = phi i16 [ 0, %dec_label_pc_10009031.lr.ph ], [ %v2_10009015, %dec_label_pc_10009031 ]
  %v2_10009015 = add i16 %storemerge5, 1
  %v16_10009015 = zext i16 %v2_10009015 to i32
  %v18_10009015 = and i32 %v2_1000900e, -65536
  %v19_10009015 = or i32 %v18_10009015, %v16_10009015
  store i32 %v19_10009015, i32* @ecx, align 4
  %v1_10009020 = sext i16 %v2_10009015 to i32
  %v1_10009027 = mul nsw i32 %v1_10009020, 4
  %v2_10009027 = add i32 %v1_10009027, ptrtoint (i32* @global_var_10018228.65 to i32)
  %v3_10009027 = inttoptr i32 %v2_10009027 to i32*
  %v4_10009027 = load i32, i32* %v3_10009027, align 4
  %v14_10009027 = icmp eq i32 %v4_10009027, -1
  br i1 %v14_10009027, label %dec_label_pc_10009033.loopexit, label %dec_label_pc_10009031

dec_label_pc_10009033.loopexit:                   ; preds = %dec_label_pc_10009031, %dec_label_pc_10009020.preheader
  %storemerge.lcssa = phi i16 [ 0, %dec_label_pc_10009020.preheader ], [ %v2_10009015, %dec_label_pc_10009031 ]
  store i16 %storemerge.lcssa, i16* @global_var_10018290.63, align 16
  br label %dec_label_pc_10009033

dec_label_pc_10009033:                            ; preds = %dec_label_pc_10009033.loopexit, %dec_label_pc_10008ff4
  %v0_10009033 = phi i16 [ %storemerge.lcssa, %dec_label_pc_10009033.loopexit ], [ %v0_10008ff7, %dec_label_pc_10008ff4 ]
  %v1_10009033 = zext i16 %v0_10009033 to i32
  %v3_10009033 = and i32 %v1_10008ff7, -65536
  %v4_10009033 = or i32 %v1_10009033, %v3_10009033
  ret i32 %v4_10009033

; uselistorder directives
  uselistorder i16 %storemerge.lcssa, { 1, 0 }
  uselistorder i32 %v19_10009015, { 1, 0 }
  uselistorder i16 %v2_10009015, { 0, 1, 3, 2 }
  uselistorder i16 %v0_10008ff7, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10009031, { 1, 0 }
}

define i32 @function_1000903b(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000903b:
  store i32 %arg1, i32* @eax, align 4
  %v1_10009043 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000904b = mul i32 %v1_10009043, 65536
  %v2_1000904b = sdiv i32 %v1_1000904b, 65536
  store i32 %v2_1000904b, i32* @ecx, align 4
  %v1_1000904b.off = or i32 %v1_1000904b, 65535
  %tmp = icmp ult i32 %v1_1000904b.off, 131071
  br i1 %tmp, label %dec_label_pc_10009058, label %dec_label_pc_10009052

dec_label_pc_10009052:                            ; preds = %dec_label_pc_1000903b
  %v2_10009052 = or i32 %v1_10009043, 65535
  br label %dec_label_pc_1000908a

dec_label_pc_10009058:                            ; preds = %dec_label_pc_1000903b
  %v1_1000905c = call i32 @RdInterfaceType(i32 %arg1)
  %v1_10009064 = mul i32 %v1_1000905c, 65536
  %v2_10009064 = sdiv i32 %v1_10009064, 65536
  %tmp6 = icmp eq i32 %v1_10009064, 196608
  br i1 %tmp6, label %dec_label_pc_10009078, label %dec_label_pc_10009070

dec_label_pc_10009070:                            ; preds = %dec_label_pc_10009058
  %tmp7 = icmp eq i32 %v1_10009064, 393216
  br i1 %tmp7, label %dec_label_pc_1000907f, label %dec_label_pc_10009086

dec_label_pc_10009078:                            ; preds = %dec_label_pc_10009058
  %v1_10009078 = call i32 @function_10008ff4(i32 3)
  br label %dec_label_pc_1000908a

dec_label_pc_1000907f:                            ; preds = %dec_label_pc_10009070
  %v1_1000907f = call i32 @function_1000908e(i32 6)
  br label %dec_label_pc_1000908a

dec_label_pc_10009086:                            ; preds = %dec_label_pc_10009070
  %v2_10009086 = or i32 %v2_10009064, 65535
  br label %dec_label_pc_1000908a

dec_label_pc_1000908a:                            ; preds = %dec_label_pc_1000907f, %dec_label_pc_10009078, %dec_label_pc_10009052, %dec_label_pc_10009086
  %v0_1000908d = phi i32 [ %v1_1000907f, %dec_label_pc_1000907f ], [ %v1_10009078, %dec_label_pc_10009078 ], [ %v2_10009052, %dec_label_pc_10009052 ], [ %v2_10009086, %dec_label_pc_10009086 ]
  ret i32 %v0_1000908d

; uselistorder directives
  uselistorder i32 %v1_10009043, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1000908a, { 3, 0, 1, 2 }
}

define i32 @function_1000908e(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000908e:
  %v0_10009091 = load i16, i16* @global_var_10018292.66, align 2
  %v1_10009091 = sext i16 %v0_10009091 to i32
  %v10_10009098 = icmp eq i16 %v0_10009091, -1
  %v1_1000909b = icmp eq i1 %v10_10009098, false
  br i1 %v1_1000909b, label %dec_label_pc_100090cd, label %dec_label_pc_100090ba.preheader

dec_label_pc_100090ba.preheader:                  ; preds = %dec_label_pc_1000908e
  %v4_100090c13 = load i32, i32* @global_var_10018240.68, align 4
  %v14_100090c14 = icmp eq i32 %v4_100090c13, -1
  br i1 %v14_100090c14, label %dec_label_pc_100090cd.loopexit, label %dec_label_pc_100090cb.lr.ph

dec_label_pc_100090cb.lr.ph:                      ; preds = %dec_label_pc_100090ba.preheader
  %v2_100090a8.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_100090cb

dec_label_pc_100090cb:                            ; preds = %dec_label_pc_100090cb.lr.ph, %dec_label_pc_100090cb
  %v2_100090a8 = phi i32 [ %v2_100090a8.pre, %dec_label_pc_100090cb.lr.ph ], [ %v19_100090af, %dec_label_pc_100090cb ]
  %storemerge5 = phi i16 [ 0, %dec_label_pc_100090cb.lr.ph ], [ %v2_100090af, %dec_label_pc_100090cb ]
  %v2_100090af = add i16 %storemerge5, 1
  %v16_100090af = zext i16 %v2_100090af to i32
  %v18_100090af = and i32 %v2_100090a8, -65536
  %v19_100090af = or i32 %v18_100090af, %v16_100090af
  store i32 %v19_100090af, i32* @ecx, align 4
  %v1_100090ba = sext i16 %v2_100090af to i32
  %v1_100090c1 = mul nsw i32 %v1_100090ba, 4
  %v2_100090c1 = add i32 %v1_100090c1, ptrtoint (i32* @global_var_10018240.68 to i32)
  %v3_100090c1 = inttoptr i32 %v2_100090c1 to i32*
  %v4_100090c1 = load i32, i32* %v3_100090c1, align 4
  %v14_100090c1 = icmp eq i32 %v4_100090c1, -1
  br i1 %v14_100090c1, label %dec_label_pc_100090cd.loopexit, label %dec_label_pc_100090cb

dec_label_pc_100090cd.loopexit:                   ; preds = %dec_label_pc_100090cb, %dec_label_pc_100090ba.preheader
  %storemerge.lcssa = phi i16 [ 0, %dec_label_pc_100090ba.preheader ], [ %v2_100090af, %dec_label_pc_100090cb ]
  store i16 %storemerge.lcssa, i16* @global_var_10018292.66, align 2
  br label %dec_label_pc_100090cd

dec_label_pc_100090cd:                            ; preds = %dec_label_pc_100090cd.loopexit, %dec_label_pc_1000908e
  %v0_100090cd = phi i16 [ %storemerge.lcssa, %dec_label_pc_100090cd.loopexit ], [ %v0_10009091, %dec_label_pc_1000908e ]
  %v1_100090cd = zext i16 %v0_100090cd to i32
  %v3_100090cd = and i32 %v1_10009091, -65536
  %v4_100090cd = or i32 %v1_100090cd, %v3_100090cd
  ret i32 %v4_100090cd

; uselistorder directives
  uselistorder i16 %storemerge.lcssa, { 1, 0 }
  uselistorder i32 %v19_100090af, { 1, 0 }
  uselistorder i16 %v2_100090af, { 0, 1, 3, 2 }
  uselistorder i16 %v0_10009091, { 1, 0, 2 }
  uselistorder label %dec_label_pc_100090cb, { 1, 0 }
}

define i32 @function_100090d5(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100090d5:
  %v5_100090db = icmp slt i32 %arg1, 0
  %v2_100090df = icmp eq i1 %v5_100090db, false
  br i1 %v2_100090df, label %dec_label_pc_100090e7, label %dec_label_pc_100090e1

dec_label_pc_100090e1:                            ; preds = %dec_label_pc_100090d5
  %v1_100090e1 = load i32, i32* @eax, align 4
  %v2_100090e1 = or i32 %v1_100090e1, 65535
  br label %dec_label_pc_1000912c

dec_label_pc_100090e7:                            ; preds = %dec_label_pc_100090d5
  %v2_100090ed = call i32 @function_1000908e(i32 0)
  %sext = mul i32 %v2_100090ed, 65536
  %v4_10009108 = sdiv i32 %sext, 65536
  %v5_1000910e16 = icmp sgt i32 %sext, 65535
  br i1 %v5_1000910e16, label %dec_label_pc_10009110, label %dec_label_pc_10009128

dec_label_pc_10009110:                            ; preds = %dec_label_pc_100090e7, %dec_label_pc_10009126
  %v4_1000910418 = phi i32 [ %v4_10009104, %dec_label_pc_10009126 ], [ 0, %dec_label_pc_100090e7 ]
  %v3_100090f817 = phi i16 [ %v2_100090fc, %dec_label_pc_10009126 ], [ 0, %dec_label_pc_100090e7 ]
  %v2_10009117 = mul nsw i32 %v4_1000910418, 4
  %v3_10009117 = add i32 %v2_10009117, ptrtoint (i32* @global_var_10018240.68 to i32)
  %v4_10009117 = inttoptr i32 %v3_10009117 to i32*
  %v5_10009117 = load i32, i32* %v4_10009117, align 4
  %v16_10009117 = icmp eq i32 %v5_10009117, %arg1
  %v1_1000911e = icmp eq i1 %v16_10009117, false
  br i1 %v1_1000911e, label %dec_label_pc_10009126, label %dec_label_pc_1000912c.loopexit

dec_label_pc_10009126:                            ; preds = %dec_label_pc_10009110
  %v7_100090f8 = and i32 %v4_1000910418, -65536
  %v2_100090fc = add i16 %v3_100090f817, 1
  %v16_100090fc = zext i16 %v2_100090fc to i32
  %v19_100090fc = or i32 %v7_100090f8, %v16_100090fc
  %v4_10009104 = sext i16 %v2_100090fc to i32
  %v5_1000910e = icmp slt i32 %v4_10009104, %v4_10009108
  br i1 %v5_1000910e, label %dec_label_pc_10009110, label %dec_label_pc_10009128

dec_label_pc_10009128:                            ; preds = %dec_label_pc_10009126, %dec_label_pc_100090e7
  %v1_10009128.lcssa = phi i32 [ %v2_100090ed, %dec_label_pc_100090e7 ], [ %v19_100090fc, %dec_label_pc_10009126 ]
  %v2_10009128 = or i32 %v1_10009128.lcssa, 65535
  br label %dec_label_pc_1000912c

dec_label_pc_1000912c.loopexit:                   ; preds = %dec_label_pc_10009110
  br label %dec_label_pc_1000912c

dec_label_pc_1000912c:                            ; preds = %dec_label_pc_1000912c.loopexit, %dec_label_pc_100090e1, %dec_label_pc_10009128
  %v0_1000912f = phi i32 [ %v4_1000910418, %dec_label_pc_1000912c.loopexit ], [ %v2_100090e1, %dec_label_pc_100090e1 ], [ %v2_10009128, %dec_label_pc_10009128 ]
  ret i32 %v0_1000912f

; uselistorder directives
  uselistorder i32 %v4_10009104, { 1, 0 }
  uselistorder i16 %v2_100090fc, { 1, 2, 0 }
  uselistorder i32 %v4_1000910418, { 0, 2, 1 }
  uselistorder i32 %v2_100090ed, { 1, 0 }
  uselistorder label %dec_label_pc_1000912c, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10009110, { 1, 0 }
}

define i32 @function_10009130(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10009130:
  %v5_10009136 = icmp slt i32 %arg1, 0
  %v2_1000913a = icmp eq i1 %v5_10009136, false
  br i1 %v2_1000913a, label %dec_label_pc_10009142, label %dec_label_pc_1000913c

dec_label_pc_1000913c:                            ; preds = %dec_label_pc_10009130
  %v1_1000913c = load i32, i32* @eax, align 4
  %v2_1000913c = or i32 %v1_1000913c, 65535
  br label %dec_label_pc_10009187

dec_label_pc_10009142:                            ; preds = %dec_label_pc_10009130
  %v2_10009148 = call i32 @function_10008ff4(i32 0)
  %sext = mul i32 %v2_10009148, 65536
  %v4_10009163 = sdiv i32 %sext, 65536
  %v5_1000916916 = icmp sgt i32 %sext, 65535
  br i1 %v5_1000916916, label %dec_label_pc_1000916b, label %dec_label_pc_10009183

dec_label_pc_1000916b:                            ; preds = %dec_label_pc_10009142, %dec_label_pc_10009181
  %v4_1000915f18 = phi i32 [ %v4_1000915f, %dec_label_pc_10009181 ], [ 0, %dec_label_pc_10009142 ]
  %v3_1000915317 = phi i16 [ %v2_10009157, %dec_label_pc_10009181 ], [ 0, %dec_label_pc_10009142 ]
  %v2_10009172 = mul nsw i32 %v4_1000915f18, 4
  %v3_10009172 = add i32 %v2_10009172, ptrtoint (i32* @global_var_10018228.65 to i32)
  %v4_10009172 = inttoptr i32 %v3_10009172 to i32*
  %v5_10009172 = load i32, i32* %v4_10009172, align 4
  %v16_10009172 = icmp eq i32 %v5_10009172, %arg1
  %v1_10009179 = icmp eq i1 %v16_10009172, false
  br i1 %v1_10009179, label %dec_label_pc_10009181, label %dec_label_pc_10009187.loopexit

dec_label_pc_10009181:                            ; preds = %dec_label_pc_1000916b
  %v7_10009153 = and i32 %v4_1000915f18, -65536
  %v2_10009157 = add i16 %v3_1000915317, 1
  %v16_10009157 = zext i16 %v2_10009157 to i32
  %v19_10009157 = or i32 %v7_10009153, %v16_10009157
  %v4_1000915f = sext i16 %v2_10009157 to i32
  %v5_10009169 = icmp slt i32 %v4_1000915f, %v4_10009163
  br i1 %v5_10009169, label %dec_label_pc_1000916b, label %dec_label_pc_10009183

dec_label_pc_10009183:                            ; preds = %dec_label_pc_10009181, %dec_label_pc_10009142
  %v1_10009183.lcssa = phi i32 [ %v2_10009148, %dec_label_pc_10009142 ], [ %v19_10009157, %dec_label_pc_10009181 ]
  %v2_10009183 = or i32 %v1_10009183.lcssa, 65535
  br label %dec_label_pc_10009187

dec_label_pc_10009187.loopexit:                   ; preds = %dec_label_pc_1000916b
  br label %dec_label_pc_10009187

dec_label_pc_10009187:                            ; preds = %dec_label_pc_10009187.loopexit, %dec_label_pc_1000913c, %dec_label_pc_10009183
  %v0_1000918a = phi i32 [ %v4_1000915f18, %dec_label_pc_10009187.loopexit ], [ %v2_1000913c, %dec_label_pc_1000913c ], [ %v2_10009183, %dec_label_pc_10009183 ]
  ret i32 %v0_1000918a

; uselistorder directives
  uselistorder i32 %v4_1000915f, { 1, 0 }
  uselistorder i16 %v2_10009157, { 1, 2, 0 }
  uselistorder i32 %v4_1000915f18, { 0, 2, 1 }
  uselistorder i32 %v2_10009148, { 1, 0 }
  uselistorder label %dec_label_pc_10009187, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1000916b, { 1, 0 }
}

define i32 @function_1000918b(i32 %arg1, i16 %arg2) local_unnamed_addr {
dec_label_pc_1000918b:
  store i32 %arg1, i32* @eax, align 4
  %v1_10009193 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000919b = mul i32 %v1_10009193, 65536
  %v1_1000919b.off = or i32 %v1_1000919b, 65535
  %tmp = icmp ult i32 %v1_1000919b.off, 131071
  br i1 %tmp, label %dec_label_pc_100091a7, label %dec_label_pc_100091a2

dec_label_pc_100091a2:                            ; preds = %dec_label_pc_1000918b
  br label %dec_label_pc_100091e8

dec_label_pc_100091a7:                            ; preds = %dec_label_pc_1000918b
  store i32 %arg1, i32* @edx, align 4
  %v1_100091ab = call i32 @RdInterfaceType(i32 %arg1)
  %v1_100091b3 = mul i32 %v1_100091ab, 65536
  %tmp7 = icmp eq i32 %v1_100091b3, 196608
  br i1 %tmp7, label %dec_label_pc_100091c7, label %dec_label_pc_100091bf

dec_label_pc_100091bf:                            ; preds = %dec_label_pc_100091a7
  %tmp8 = icmp eq i32 %v1_100091b3, 393216
  br i1 %tmp8, label %dec_label_pc_100091d6, label %dec_label_pc_100091e5

dec_label_pc_100091c7:                            ; preds = %dec_label_pc_100091a7
  %v4_100091c7 = zext i16 %arg2 to i32
  store i32 %v4_100091c7, i32* @ecx, align 4
  %v3_100091cc = call i32 @function_100091ec(i16 %arg2, i32 3)
  br label %dec_label_pc_100091e8

dec_label_pc_100091d6:                            ; preds = %dec_label_pc_100091bf
  %v3_100091db = call i32 @function_10009213(i16 %arg2, i32 6)
  br label %dec_label_pc_100091e8

dec_label_pc_100091e5:                            ; preds = %dec_label_pc_100091bf
  br label %dec_label_pc_100091e8

dec_label_pc_100091e8:                            ; preds = %dec_label_pc_100091d6, %dec_label_pc_100091c7, %dec_label_pc_100091a2, %dec_label_pc_100091e5
  %v0_100091eb = phi i32 [ %v3_100091db, %dec_label_pc_100091d6 ], [ %v3_100091cc, %dec_label_pc_100091c7 ], [ -1, %dec_label_pc_100091a2 ], [ -1, %dec_label_pc_100091e5 ]
  ret i32 %v0_100091eb

; uselistorder directives
  uselistorder i16 %arg2, { 2, 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100091e8, { 3, 0, 1, 2 }
}

define i32 @function_100091ec(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100091ec:
  %stack_var_-8 = alloca i32, align 4
  %v0_100091ef = load i32, i32* @esi, align 4
  store i32 %v0_100091ef, i32* %stack_var_-8, align 4
  %v1_100091f4 = call i32 @function_10008ff4(i32 %v0_100091ef)
  %v1_100091f9 = mul i32 %v1_100091f4, 65536
  %v2_100091f9 = sdiv i32 %v1_100091f9, 65536
  %v3_100091fc = trunc i32 %v2_100091f9 to i16
  %v7_100091fe = icmp sgt i16 %v3_100091fc, %arg1
  br i1 %v7_100091fe, label %dec_label_pc_10009205, label %dec_label_pc_10009200

dec_label_pc_10009200:                            ; preds = %dec_label_pc_100091ec
  br label %dec_label_pc_10009210

dec_label_pc_10009205:                            ; preds = %dec_label_pc_100091ec
  %v4_100091f0 = sext i16 %arg1 to i32
  %v1_10009209 = mul nsw i32 %v4_100091f0, 4
  %v2_10009209 = add i32 %v1_10009209, ptrtoint (i32* @global_var_10018228.65 to i32)
  %v3_10009209 = inttoptr i32 %v2_10009209 to i32*
  %v4_10009209 = load i32, i32* %v3_10009209, align 4
  br label %dec_label_pc_10009210

dec_label_pc_10009210:                            ; preds = %dec_label_pc_10009200, %dec_label_pc_10009205
  %storemerge = phi i32 [ -1, %dec_label_pc_10009200 ], [ %v4_10009209, %dec_label_pc_10009205 ]
  %v2_10009210 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10009210, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32* @global_var_10018228.65, { 1, 0 }
  uselistorder i32 (i32)* @function_10008ff4, { 2, 1, 0 }
  uselistorder i16 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_10009210, { 1, 0 }
}

define i32 @function_10009213(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10009213:
  %stack_var_-8 = alloca i32, align 4
  %v0_10009216 = load i32, i32* @esi, align 4
  store i32 %v0_10009216, i32* %stack_var_-8, align 4
  %v1_1000921b = call i32 @function_1000908e(i32 %v0_10009216)
  %v1_10009220 = mul i32 %v1_1000921b, 65536
  %v2_10009220 = sdiv i32 %v1_10009220, 65536
  %v3_10009223 = trunc i32 %v2_10009220 to i16
  %v7_10009225 = icmp sgt i16 %v3_10009223, %arg1
  br i1 %v7_10009225, label %dec_label_pc_1000922c, label %dec_label_pc_10009227

dec_label_pc_10009227:                            ; preds = %dec_label_pc_10009213
  br label %dec_label_pc_10009237

dec_label_pc_1000922c:                            ; preds = %dec_label_pc_10009213
  %v4_10009217 = sext i16 %arg1 to i32
  %v1_10009230 = mul nsw i32 %v4_10009217, 4
  %v2_10009230 = add i32 %v1_10009230, ptrtoint (i32* @global_var_10018240.68 to i32)
  %v3_10009230 = inttoptr i32 %v2_10009230 to i32*
  %v4_10009230 = load i32, i32* %v3_10009230, align 4
  br label %dec_label_pc_10009237

dec_label_pc_10009237:                            ; preds = %dec_label_pc_10009227, %dec_label_pc_1000922c
  %storemerge = phi i32 [ -1, %dec_label_pc_10009227 ], [ %v4_10009230, %dec_label_pc_1000922c ]
  %v2_10009237 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10009237, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 110, { 1, 2, 3, 4, 0 }
  uselistorder i32* @global_var_10018240.68, { 1, 0 }
  uselistorder i32 (i32)* @function_1000908e, { 2, 1, 0 }
  uselistorder i16 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_10009237, { 1, 0 }
}

define i32 @function_1000923a(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000923a:
  store i32 %arg1, i32* @eax, align 4
  %v1_10009242 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000924a = mul i32 %v1_10009242, 65536
  %v1_1000924a.off = or i32 %v1_1000924a, 65535
  %tmp = icmp ult i32 %v1_1000924a.off, 131071
  br i1 %tmp, label %dec_label_pc_10009257, label %dec_label_pc_10009251

dec_label_pc_10009251:                            ; preds = %dec_label_pc_1000923a
  %v2_10009251 = or i32 %v1_10009242, 65535
  br label %dec_label_pc_10009297

dec_label_pc_10009257:                            ; preds = %dec_label_pc_1000923a
  %v1_1000925b = call i32 @RdInterfaceType(i32 %arg1)
  %v1_10009263 = mul i32 %v1_1000925b, 65536
  %v2_10009263 = sdiv i32 %v1_10009263, 65536
  store i32 %v2_10009263, i32* @eax, align 4
  %tmp7 = icmp eq i32 %v1_10009263, 196608
  br i1 %tmp7, label %dec_label_pc_10009277, label %dec_label_pc_1000926f

dec_label_pc_1000926f:                            ; preds = %dec_label_pc_10009257
  %tmp8 = icmp eq i32 %v1_10009263, 393216
  br i1 %tmp8, label %dec_label_pc_10009285, label %dec_label_pc_10009293

dec_label_pc_10009277:                            ; preds = %dec_label_pc_10009257
  store i32 %arg2, i32* @ecx, align 4
  %v2_1000927b = call i32 @function_10009130(i32 %arg2, i32 3)
  br label %dec_label_pc_10009297

dec_label_pc_10009285:                            ; preds = %dec_label_pc_1000926f
  %v2_10009289 = call i32 @function_100090d5(i32 %arg2, i32 6)
  br label %dec_label_pc_10009297

dec_label_pc_10009293:                            ; preds = %dec_label_pc_1000926f
  %v2_10009293 = or i32 %v2_10009263, 65535
  br label %dec_label_pc_10009297

dec_label_pc_10009297:                            ; preds = %dec_label_pc_10009285, %dec_label_pc_10009277, %dec_label_pc_10009251, %dec_label_pc_10009293
  %v0_1000929a = phi i32 [ %v2_10009289, %dec_label_pc_10009285 ], [ %v2_1000927b, %dec_label_pc_10009277 ], [ %v2_10009251, %dec_label_pc_10009251 ], [ %v2_10009293, %dec_label_pc_10009293 ]
  ret i32 %v0_1000929a

; uselistorder directives
  uselistorder i32 %v2_10009263, { 1, 0 }
  uselistorder i32 %v1_10009242, { 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10009297, { 3, 0, 1, 2 }
}

define i32 @function_1000929b(i32 %arg1, i16 %arg2) local_unnamed_addr {
dec_label_pc_1000929b:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_100092a2 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100092a2, i32* %eax.global-to-local, align 4
  %v1_100092aa = mul i32 %v1_100092a2, 65536
  %v1_100092aa.off = or i32 %v1_100092aa, 65535
  %tmp = icmp ult i32 %v1_100092aa.off, 131071
  br i1 %tmp, label %dec_label_pc_100092b7, label %dec_label_pc_100092b1

dec_label_pc_100092b1:                            ; preds = %dec_label_pc_1000929b
  %v2_100092b1 = or i32 %v1_100092a2, 65535
  br label %dec_label_pc_100092c8

dec_label_pc_100092b7:                            ; preds = %dec_label_pc_1000929b
  %v4_100092ba = zext i16 %arg2 to i32
  %v6_100092ba = and i32 %v1_100092a2, -65536
  %v7_100092ba = or i32 %v6_100092ba, %v4_100092ba
  store i32 %v7_100092ba, i32* %eax.global-to-local, align 4
  %v3_100092be = add i32 %arg1, 534
  %v4_100092be = inttoptr i32 %v3_100092be to i16*
  store i16 %arg2, i16* %v4_100092be, align 2
  %v11_100092c5 = load i32, i32* %eax.global-to-local, align 4
  %v12_100092c5 = and i32 %v11_100092c5, -65536
  br label %dec_label_pc_100092c8

dec_label_pc_100092c8:                            ; preds = %dec_label_pc_100092b1, %dec_label_pc_100092b7
  %storemerge = phi i32 [ %v2_100092b1, %dec_label_pc_100092b1 ], [ %v12_100092c5, %dec_label_pc_100092b7 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_100092a2, { 1, 2, 0, 3 }
  uselistorder i32* %eax.global-to-local, { 3, 0, 1, 2 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_100092c8, { 1, 0 }
}

define i32 @function_100092ca(i32 %arg1, i16 %arg2) local_unnamed_addr {
dec_label_pc_100092ca:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_100092d1 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100092d1, i32* %eax.global-to-local, align 4
  %v1_100092d9 = mul i32 %v1_100092d1, 65536
  %v1_100092d9.off = or i32 %v1_100092d9, 65535
  %tmp = icmp ult i32 %v1_100092d9.off, 131071
  br i1 %tmp, label %dec_label_pc_100092e6, label %dec_label_pc_100092e0

dec_label_pc_100092e0:                            ; preds = %dec_label_pc_100092ca
  %v2_100092e0 = or i32 %v1_100092d1, 65535
  br label %dec_label_pc_100092f7

dec_label_pc_100092e6:                            ; preds = %dec_label_pc_100092ca
  %v4_100092e9 = zext i16 %arg2 to i32
  %v6_100092e9 = and i32 %v1_100092d1, -65536
  %v7_100092e9 = or i32 %v6_100092e9, %v4_100092e9
  store i32 %v7_100092e9, i32* %eax.global-to-local, align 4
  %v3_100092ed = add i32 %arg1, 536
  %v4_100092ed = inttoptr i32 %v3_100092ed to i16*
  store i16 %arg2, i16* %v4_100092ed, align 2
  %v11_100092f4 = load i32, i32* %eax.global-to-local, align 4
  %v12_100092f4 = and i32 %v11_100092f4, -65536
  br label %dec_label_pc_100092f7

dec_label_pc_100092f7:                            ; preds = %dec_label_pc_100092e0, %dec_label_pc_100092e6
  %storemerge = phi i32 [ %v2_100092e0, %dec_label_pc_100092e0 ], [ %v12_100092f4, %dec_label_pc_100092e6 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_100092d1, { 1, 2, 0, 3 }
  uselistorder i32* %eax.global-to-local, { 3, 0, 1, 2 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_100092f7, { 1, 0 }
}

define i32 @function_100092f9(i32 %arg1, i16 %arg2) local_unnamed_addr {
dec_label_pc_100092f9:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10009301 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10009301, i32* @eax, align 4
  %v1_10009309 = mul i32 %v1_10009301, 65536
  %v1_10009309.off = or i32 %v1_10009309, 65535
  %tmp = icmp ult i32 %v1_10009309.off, 131071
  br i1 %tmp, label %dec_label_pc_1000931e, label %dec_label_pc_10009310

dec_label_pc_10009310:                            ; preds = %dec_label_pc_100092f9
  %v1_10009314 = call i32 @GetFuncStatusCode(i32 %arg1)
  store i32 %v1_10009314, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009354

dec_label_pc_1000931e:                            ; preds = %dec_label_pc_100092f9
  %v4_1000931e = sext i16 %arg2 to i32
  store i32 %v4_1000931e, i32* %eax.global-to-local, align 4
  %v2_10009322 = icmp slt i16 %arg2, 0
  %v2_10009324 = icmp eq i1 %v2_10009322, false
  br i1 %v2_10009324, label %dec_label_pc_10009326, label %dec_label_pc_1000933d

dec_label_pc_10009326:                            ; preds = %dec_label_pc_1000931e
  %v1_1000932e = call i32 @function_1000903b(i32 %arg1)
  store i32 %v1_1000932e, i32* %eax.global-to-local, align 4
  %v1_10009336 = mul i32 %v1_1000932e, 65536
  %v2_10009336 = sdiv i32 %v1_10009336, 65536
  %v3_10009339 = trunc i32 %v2_10009336 to i16
  %v7_1000933b = icmp sgt i16 %v3_10009339, %arg2
  br i1 %v7_1000933b, label %dec_label_pc_10009343, label %dec_label_pc_1000933d

dec_label_pc_1000933d:                            ; preds = %dec_label_pc_1000931e, %dec_label_pc_10009326
  %v0_1000933d = phi i32 [ %v4_1000931e, %dec_label_pc_1000931e ], [ %v1_1000932e, %dec_label_pc_10009326 ]
  %v1_1000933d = and i32 %v0_1000933d, -65536
  %v2_1000933d = or i32 %v1_1000933d, 65533
  store i32 %v2_1000933d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009354

dec_label_pc_10009343:                            ; preds = %dec_label_pc_10009326
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_1000934a = add i32 %arg1, 538
  %v4_1000934a = inttoptr i32 %v3_1000934a to i16*
  store i16 %arg2, i16* %v4_1000934a, align 2
  %v11_10009351 = load i32, i32* %eax.global-to-local, align 4
  %v12_10009351 = and i32 %v11_10009351, -65536
  store i32 %v12_10009351, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009354

dec_label_pc_10009354:                            ; preds = %dec_label_pc_1000933d, %dec_label_pc_10009310, %dec_label_pc_10009343
  %v0_10009356 = phi i32 [ %v2_1000933d, %dec_label_pc_1000933d ], [ %v1_10009314, %dec_label_pc_10009310 ], [ %v12_10009351, %dec_label_pc_10009343 ]
  ret i32 %v0_10009356

; uselistorder directives
  uselistorder i32 %v1_1000932e, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i16 %arg2, { 3, 0, 2, 1 }
  uselistorder i32 %arg1, { 0, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10009354, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000933d, { 1, 0 }
}

define i32 @function_10009357(i32 %arg1) local_unnamed_addr {
dec_label_pc_10009357:
  %stack_var_-4 = alloca i32, align 4
  %v0_10009357 = load i32, i32* @ebp, align 4
  store i32 %v0_10009357, i32* %stack_var_-4, align 4
  %v4_10009357 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10009357, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_10009361 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_10009369 = mul i32 %v1_10009361, 65536
  %v1_10009369.off = or i32 %v1_10009369, 65535
  %tmp = icmp ult i32 %v1_10009369.off, 131071
  br i1 %tmp, label %dec_label_pc_10009375, label %dec_label_pc_10009370

dec_label_pc_10009370:                            ; preds = %dec_label_pc_10009357
  br label %dec_label_pc_100093d3

dec_label_pc_10009375:                            ; preds = %dec_label_pc_10009357
  %v1_10009379 = call i32 @function_10008fcc(i32 %arg1)
  %v2_10009379 = trunc i32 %v1_10009379 to i16
  %v2_10009389 = icmp slt i16 %v2_10009379, 0
  %v2_1000938b = icmp eq i1 %v2_10009389, false
  br i1 %v2_1000938b, label %dec_label_pc_10009392, label %dec_label_pc_1000938d

dec_label_pc_1000938d:                            ; preds = %dec_label_pc_10009375
  br label %dec_label_pc_100093d3

dec_label_pc_10009392:                            ; preds = %dec_label_pc_10009375
  %v1_10009396 = call i32 @RdInterfaceType(i32 %arg1)
  %v1_1000939e = mul i32 %v1_10009396, 65536
  %tmp7 = icmp eq i32 %v1_1000939e, 196608
  br i1 %tmp7, label %dec_label_pc_100093b2, label %dec_label_pc_100093aa

dec_label_pc_100093aa:                            ; preds = %dec_label_pc_10009392
  %tmp8 = icmp eq i32 %v1_1000939e, 393216
  br i1 %tmp8, label %dec_label_pc_100093c1, label %dec_label_pc_100093d0

dec_label_pc_100093b2:                            ; preds = %dec_label_pc_10009392
  %v3_100093b7 = call i32 @function_100091ec(i16 %v2_10009379, i32 3)
  br label %dec_label_pc_100093d3

dec_label_pc_100093c1:                            ; preds = %dec_label_pc_100093aa
  %v4_100093c1 = and i32 %v1_10009379, 65535
  %v5_100093c1 = load i32, i32* @ecx, align 4
  %v6_100093c1 = and i32 %v5_100093c1, -65536
  %v7_100093c1 = or i32 %v6_100093c1, %v4_100093c1
  store i32 %v7_100093c1, i32* @ecx, align 4
  %v3_100093c6 = call i32 @function_10009213(i16 %v2_10009379, i32 6)
  br label %dec_label_pc_100093d3

dec_label_pc_100093d0:                            ; preds = %dec_label_pc_100093aa
  br label %dec_label_pc_100093d3

dec_label_pc_100093d3:                            ; preds = %dec_label_pc_100093c1, %dec_label_pc_100093b2, %dec_label_pc_1000938d, %dec_label_pc_10009370, %dec_label_pc_100093d0
  %v0_100093d6 = phi i32 [ %v3_100093c6, %dec_label_pc_100093c1 ], [ %v3_100093b7, %dec_label_pc_100093b2 ], [ -1, %dec_label_pc_1000938d ], [ -1, %dec_label_pc_10009370 ], [ -1, %dec_label_pc_100093d0 ]
  ret i32 %v0_100093d6

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 (i32)* @RdInterfaceType, { 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_100093d3, { 4, 0, 1, 2, 3 }
}

define i32 @function_100093d7() local_unnamed_addr {
dec_label_pc_100093d7:
  %v0_100093da = load i32, i32* @eax, align 4
  %v1_100093da = and i32 %v0_100093da, -65536
  %v2_100093da = or i32 %v1_100093da, 65519
  ret i32 %v2_100093da

; uselistorder directives
  uselistorder i32 65519, { 0, 1, 3, 2, 4 }
}

define i32 @SetZCellSize(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_100093e7 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_100093e7, i32* %eax.global-to-local, align 4
  %v1_100093ef = mul i32 %v1_100093e7, 65536
  %v1_100093ef.off = or i32 %v1_100093ef, 65535
  %tmp = icmp ult i32 %v1_100093ef.off, 131071
  br i1 %tmp, label %dec_label_pc_100093fc, label %dec_label_pc_100093f6

dec_label_pc_100093f6:                            ; preds = %entry
  %v1_100093f6 = and i32 %v1_100093e7, -65536
  %v2_100093f6 = or i32 %v1_100093f6, 65526
  store i32 %v2_100093f6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000941a

dec_label_pc_100093fc:                            ; preds = %entry
  %tmp6 = icmp ult i32 %arg2, 100000001
  br i1 %tmp6, label %dec_label_pc_1000940b, label %dec_label_pc_10009405

dec_label_pc_10009405:                            ; preds = %dec_label_pc_100093fc
  %v1_10009405 = and i32 %v1_100093e7, -65536
  %v2_10009405 = or i32 %v1_10009405, 65533
  store i32 %v2_10009405, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000941a

dec_label_pc_1000940b:                            ; preds = %dec_label_pc_100093fc
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_10009411 = add i32 %arg1, 188
  %v3_10009411 = inttoptr i32 %v2_10009411 to i32*
  store i32 %arg2, i32* %v3_10009411, align 4
  %v11_10009417 = load i32, i32* %eax.global-to-local, align 4
  %v12_10009417 = and i32 %v11_10009417, -65536
  store i32 %v12_10009417, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000941a

dec_label_pc_1000941a:                            ; preds = %dec_label_pc_10009405, %dec_label_pc_100093f6, %dec_label_pc_1000940b
  %v0_1000941b = phi i32 [ %v2_10009405, %dec_label_pc_10009405 ], [ %v2_100093f6, %dec_label_pc_100093f6 ], [ %v12_10009417, %dec_label_pc_1000940b ]
  ret i32 %v0_1000941b

; uselistorder directives
  uselistorder i32 %v1_100093e7, { 1, 2, 0, 3 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1000941a, { 2, 0, 1 }
}

define i32 @RdZCellSize(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_10009423 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_10009423, i32* @eax, align 4
  %v1_1000942b = mul i32 %v1_10009423, 65536
  %v1_1000942b.off = or i32 %v1_1000942b, 65535
  %tmp = icmp ult i32 %v1_1000942b.off, 131071
  br i1 %tmp, label %dec_label_pc_10009437, label %dec_label_pc_10009432

dec_label_pc_10009432:                            ; preds = %entry
  br label %dec_label_pc_1000944e

dec_label_pc_10009437:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000943d = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_10009448 = add i32 %arg1, 188
  %v2_10009448 = inttoptr i32 %v1_10009448 to i32*
  %v3_10009448 = load i32, i32* %v2_10009448, align 4
  br label %dec_label_pc_1000944e

dec_label_pc_1000944e:                            ; preds = %dec_label_pc_10009432, %dec_label_pc_10009437
  %storemerge = phi i32 [ -1, %dec_label_pc_10009432 ], [ %v3_10009448, %dec_label_pc_10009437 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000944e, { 1, 0 }
}

define i32 @InitDataCapZspan(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg3 to i16
  %v4_1000945a = icmp eq i32 %arg1, 0
  %v1_1000945e = icmp eq i1 %v4_1000945a, false
  br i1 %v1_1000945e, label %dec_label_pc_10009469, label %dec_label_pc_10009460

dec_label_pc_10009460:                            ; preds = %entry
  %v0_10009460 = load i32, i32* @eax, align 4
  %v1_10009460 = and i32 %v0_10009460, -65536
  %v2_10009460 = or i32 %v1_10009460, 65526
  br label %dec_label_pc_1000973e

dec_label_pc_10009469:                            ; preds = %entry
  %v2_10009475 = sext i32 %arg4 to i64
  %v3_10009475 = bitcast i64 %v2_10009475 to double
  %v4_10009475 = call i32 @FreqInRange(i32 %arg1, double %v3_10009475)
  %v1_1000947d = mul i32 %v4_10009475, 65536
  %v2_1000947d = sdiv i32 %v1_1000947d, 65536
  %v1_1000947d.off = or i32 %v1_1000947d, 65535
  %tmp56 = icmp ult i32 %v1_1000947d.off, 131071
  %v1_10009482 = icmp eq i1 %tmp56, false
  br i1 %v1_10009482, label %dec_label_pc_1000948d, label %dec_label_pc_10009484

dec_label_pc_10009484:                            ; preds = %dec_label_pc_10009469
  %v1_10009484 = and i32 %v2_1000947d, -65536
  %v2_10009484 = or i32 %v1_10009484, 65533
  br label %dec_label_pc_1000973e

dec_label_pc_1000948d:                            ; preds = %dec_label_pc_10009469
  %v5_1000948d = icmp slt i32 %arg6, 0
  %v2_10009491 = icmp eq i1 %v5_1000948d, false
  br i1 %v2_10009491, label %dec_label_pc_10009493, label %dec_label_pc_1000949c

dec_label_pc_10009493:                            ; preds = %dec_label_pc_1000948d
  %v7_1000949a = icmp sgt i32 %arg6, 100000000
  br i1 %v7_1000949a, label %dec_label_pc_1000949c, label %dec_label_pc_100094a5

dec_label_pc_1000949c:                            ; preds = %dec_label_pc_10009493, %dec_label_pc_1000948d
  %v1_1000949c = and i32 %v2_1000947d, -65536
  %v2_1000949c = or i32 %v1_1000949c, 65533
  br label %dec_label_pc_1000973e

dec_label_pc_100094a5:                            ; preds = %dec_label_pc_10009493
  %v3_100094ab = call i32 @SetAutoCell(i32 %arg1, i16 0)
  %v4_100094ab = trunc i32 %v3_100094ab to i16
  %v2_100094bb = icmp eq i16 %v4_100094ab, 0
  br i1 %v2_100094bb, label %dec_label_pc_100094c8, label %dec_label_pc_100094bf

dec_label_pc_100094bf:                            ; preds = %dec_label_pc_100094a5
  %sext = mul i32 %v3_100094ab, 65536
  %v4_100094b7 = sdiv i32 %sext, 65536
  %v4_100094bf = or i32 %v4_100094b7, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_100094c8:                            ; preds = %dec_label_pc_100094a5
  %v3_100094ce = call i32 @SetCellMode(i32 %arg1, i16 0)
  %v4_100094ce = trunc i32 %v3_100094ce to i16
  %v2_100094de = icmp eq i16 %v4_100094ce, 0
  br i1 %v2_100094de, label %dec_label_pc_100094eb, label %dec_label_pc_100094e2

dec_label_pc_100094e2:                            ; preds = %dec_label_pc_100094c8
  %sext4 = mul i32 %v3_100094ce, 65536
  %v4_100094da = sdiv i32 %sext4, 65536
  %v4_100094e2 = or i32 %v4_100094da, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_100094eb:                            ; preds = %dec_label_pc_100094c8
  %v5_100094f1 = call i32 @SwpTimeMode(i32 %arg1, i16 1, i32 0)
  %v6_100094f1 = trunc i32 %v5_100094f1 to i16
  %v2_10009501 = icmp eq i16 %v6_100094f1, 0
  br i1 %v2_10009501, label %dec_label_pc_1000950e, label %dec_label_pc_10009505

dec_label_pc_10009505:                            ; preds = %dec_label_pc_100094eb
  %sext6 = mul i32 %v5_100094f1, 65536
  %v4_100094fd = sdiv i32 %sext6, 65536
  %v4_10009505 = or i32 %v4_100094fd, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_1000950e:                            ; preds = %dec_label_pc_100094eb
  %v5_10009514 = call i32 @StepSizeMode(i32 %arg1, i16 1, i32 0)
  %v6_10009514 = trunc i32 %v5_10009514 to i16
  %sext8 = mul i32 %v5_10009514, 65536
  %v4_10009520 = sdiv i32 %sext8, 65536
  %v2_10009524 = icmp eq i16 %v6_10009514, 0
  br i1 %v2_10009524, label %dec_label_pc_10009531, label %dec_label_pc_10009528

dec_label_pc_10009528:                            ; preds = %dec_label_pc_1000950e
  %v4_10009528 = or i32 %v4_10009520, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_10009531:                            ; preds = %dec_label_pc_1000950e
  %v9_10009535 = icmp eq i16 %arg2, 5
  %v1_10009538 = icmp eq i1 %v9_10009535, false
  br i1 %v1_10009538, label %dec_label_pc_1000955f, label %dec_label_pc_1000953a

dec_label_pc_1000953a:                            ; preds = %dec_label_pc_10009531
  %v3_10009540 = call i32 @SetRBWmode(i32 %arg1, i16 1)
  %v4_10009540 = trunc i32 %v3_10009540 to i16
  %sext10 = mul i32 %v3_10009540, 65536
  %v4_1000954c = sdiv i32 %sext10, 65536
  store i32 %v4_1000954c, i32* @edx, align 4
  %v1_10009550 = icmp eq i16 %v4_10009540, 0
  br i1 %v1_10009550, label %dec_label_pc_100095ba, label %dec_label_pc_10009554

dec_label_pc_10009554:                            ; preds = %dec_label_pc_1000953a
  %v4_10009554 = or i32 %v4_1000954c, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_1000955f:                            ; preds = %dec_label_pc_10009531
  %v3_10009565 = call i32 @SetRBWmode(i32 %arg1, i16 0)
  %v4_10009565 = trunc i32 %v3_10009565 to i16
  %v2_10009575 = icmp eq i16 %v4_10009565, 0
  br i1 %v2_10009575, label %dec_label_pc_10009582, label %dec_label_pc_10009579

dec_label_pc_10009579:                            ; preds = %dec_label_pc_1000955f
  %sext35 = mul i32 %v3_10009565, 65536
  %v4_10009571 = sdiv i32 %sext35, 65536
  %v4_10009579 = or i32 %v4_10009571, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_10009582:                            ; preds = %dec_label_pc_1000955f
  %v4_10009582 = zext i16 %arg2 to i32
  %v7_10009582 = and i32 %v4_10009520, -65536
  %v8_10009582 = or i32 %v7_10009582, %v4_10009582
  store i32 %v8_10009582, i32* @edx, align 4
  %v3_1000958b = call i32 @SetRBW(i32 %arg1, i16 %arg2)
  %v4_1000958b = trunc i32 %v3_1000958b to i16
  %sext38 = mul i32 %v3_1000958b, 65536
  %v4_10009597 = sdiv i32 %sext38, 65536
  %v2_1000959b = icmp eq i16 %v4_1000958b, 0
  br i1 %v2_1000959b, label %dec_label_pc_100095ba, label %dec_label_pc_1000959f

dec_label_pc_1000959f:                            ; preds = %dec_label_pc_10009582
  %tmp57 = icmp eq i32 %sext38, -196608
  %v1_100095a6 = icmp eq i1 %tmp57, false
  br i1 %v1_100095a6, label %dec_label_pc_100095b1, label %dec_label_pc_100095a8

dec_label_pc_100095a8:                            ; preds = %dec_label_pc_1000959f
  br label %dec_label_pc_1000973e

dec_label_pc_100095b1:                            ; preds = %dec_label_pc_1000959f
  %v4_100095b1 = or i32 %v4_10009597, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_100095ba:                            ; preds = %dec_label_pc_1000953a, %dec_label_pc_10009582
  %sext12 = mul i32 %arg3, 65536
  %tmp58 = icmp eq i32 %sext12, 524288
  %v1_100095c1 = icmp eq i1 %tmp58, false
  br i1 %v1_100095c1, label %dec_label_pc_100095e8, label %dec_label_pc_100095c3

dec_label_pc_100095c3:                            ; preds = %dec_label_pc_100095ba
  %v3_100095c9 = call i32 @SetVBWmode(i32 %arg1, i16 1)
  %v4_100095c9 = trunc i32 %v3_100095c9 to i16
  %v2_100095d9 = icmp eq i16 %v4_100095c9, 0
  br i1 %v2_100095d9, label %dec_label_pc_10009643, label %dec_label_pc_100095dd

dec_label_pc_100095dd:                            ; preds = %dec_label_pc_100095c3
  %sext13 = mul i32 %v3_100095c9, 65536
  %v4_100095d5 = sdiv i32 %sext13, 65536
  %v4_100095dd = or i32 %v4_100095d5, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_100095e8:                            ; preds = %dec_label_pc_100095ba
  %v3_100095ee = call i32 @SetVBWmode(i32 %arg1, i16 0)
  %v4_100095ee = trunc i32 %v3_100095ee to i16
  %sext30 = mul i32 %v3_100095ee, 65536
  %v4_100095fa = sdiv i32 %sext30, 65536
  store i32 %v4_100095fa, i32* @ecx, align 4
  %v2_100095fe = icmp eq i16 %v4_100095ee, 0
  br i1 %v2_100095fe, label %dec_label_pc_1000960b, label %dec_label_pc_10009602

dec_label_pc_10009602:                            ; preds = %dec_label_pc_100095e8
  %v4_10009602 = or i32 %v4_100095fa, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_1000960b:                            ; preds = %dec_label_pc_100095e8
  %v3_10009614 = call i32 @SetVBW(i32 %arg1, i16 %tmp)
  %v4_10009614 = trunc i32 %v3_10009614 to i16
  %sext32 = mul i32 %v3_10009614, 65536
  %v4_10009620 = sdiv i32 %sext32, 65536
  %v2_10009624 = icmp eq i16 %v4_10009614, 0
  br i1 %v2_10009624, label %dec_label_pc_10009643, label %dec_label_pc_10009628

dec_label_pc_10009628:                            ; preds = %dec_label_pc_1000960b
  %tmp59 = icmp eq i32 %sext32, -196608
  %v1_1000962f = icmp eq i1 %tmp59, false
  br i1 %v1_1000962f, label %dec_label_pc_1000963a, label %dec_label_pc_10009631

dec_label_pc_10009631:                            ; preds = %dec_label_pc_10009628
  br label %dec_label_pc_1000973e

dec_label_pc_1000963a:                            ; preds = %dec_label_pc_10009628
  %v4_1000963a = or i32 %v4_10009620, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_10009643:                            ; preds = %dec_label_pc_100095c3, %dec_label_pc_1000960b
  %v3_1000964f = call i32 @ConfigZspanFreq(i32 %arg1, i32 %arg4, i32 %arg5)
  %v4_1000964f = trunc i32 %v3_1000964f to i16
  %v2_1000965f = icmp eq i16 %v4_1000964f, 0
  br i1 %v2_1000965f, label %dec_label_pc_1000966c, label %dec_label_pc_10009663

dec_label_pc_10009663:                            ; preds = %dec_label_pc_10009643
  %sext15 = mul i32 %v3_1000964f, 65536
  %v4_1000965b = sdiv i32 %sext15, 65536
  %v4_10009663 = or i32 %v4_1000965b, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_1000966c:                            ; preds = %dec_label_pc_10009643
  %v4_10009674 = call i32 @SetZSamplCnt(i32 %arg1, i32 %arg6, i32 0)
  %v5_10009674 = trunc i32 %v4_10009674 to i16
  %v2_10009684 = icmp eq i16 %v5_10009674, 0
  br i1 %v2_10009684, label %dec_label_pc_10009691, label %dec_label_pc_10009688

dec_label_pc_10009688:                            ; preds = %dec_label_pc_1000966c
  %sext17 = mul i32 %v4_10009674, 65536
  %v4_10009680 = sdiv i32 %sext17, 65536
  %v4_10009688 = or i32 %v4_10009680, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_10009691:                            ; preds = %dec_label_pc_1000966c
  %v2_10009697 = call i32 @SetSwpIdx(i32 %arg1, i32 0)
  %v3_10009697 = trunc i32 %v2_10009697 to i16
  %v2_100096a7 = icmp eq i16 %v3_10009697, 0
  br i1 %v2_100096a7, label %dec_label_pc_100096b4, label %dec_label_pc_100096ab

dec_label_pc_100096ab:                            ; preds = %dec_label_pc_10009691
  %sext19 = mul i32 %v2_10009697, 65536
  %v4_100096a3 = sdiv i32 %sext19, 65536
  %v4_100096ab = or i32 %v4_100096a3, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_100096b4:                            ; preds = %dec_label_pc_10009691
  %v3_100096c1 = call i32 @SetZSamplRate(i32 %arg1, i64 50000)
  %v4_100096c1 = trunc i32 %v3_100096c1 to i16
  %v2_100096d1 = icmp eq i16 %v4_100096c1, 0
  br i1 %v2_100096d1, label %dec_label_pc_100096db, label %dec_label_pc_100096d5

dec_label_pc_100096d5:                            ; preds = %dec_label_pc_100096b4
  %sext21 = mul i32 %v3_100096c1, 65536
  %v4_100096cd = sdiv i32 %sext21, 65536
  %v4_100096d5 = or i32 %v4_100096cd, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_100096db:                            ; preds = %dec_label_pc_100096b4
  %v3_100096df = call i32 @SetDetectLog(i32 %arg1, i32 0)
  %v4_100096df = trunc i32 %v3_100096df to i16
  %v2_100096ef = icmp eq i16 %v4_100096df, 0
  br i1 %v2_100096ef, label %dec_label_pc_100096f9, label %dec_label_pc_100096f3

dec_label_pc_100096f3:                            ; preds = %dec_label_pc_100096db
  %sext23 = mul i32 %v3_100096df, 65536
  %v4_100096eb = sdiv i32 %sext23, 65536
  %v4_100096f3 = or i32 %v4_100096eb, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_100096f9:                            ; preds = %dec_label_pc_100096db
  %v3_100096ff = call i32 @SetSweepCode(i32 %arg1, i16 1)
  %v4_100096ff = trunc i32 %v3_100096ff to i16
  %v2_1000970f = icmp eq i16 %v4_100096ff, 0
  br i1 %v2_1000970f, label %dec_label_pc_10009719, label %dec_label_pc_10009713

dec_label_pc_10009713:                            ; preds = %dec_label_pc_100096f9
  %sext25 = mul i32 %v3_100096ff, 65536
  %v4_1000970b = sdiv i32 %sext25, 65536
  %v4_10009713 = or i32 %v4_1000970b, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_10009719:                            ; preds = %dec_label_pc_100096f9
  %v6_10009721 = call i32 @SetTrigMode(i32 %arg1, i16 0, i32 1, i32 0)
  %v7_10009721 = trunc i32 %v6_10009721 to i16
  %sext27 = mul i32 %v6_10009721, 65536
  %v4_1000972d = sdiv i32 %sext27, 65536
  %v1_10009731 = icmp eq i16 %v7_10009721, 0
  br i1 %v1_10009731, label %dec_label_pc_1000973b, label %dec_label_pc_10009735

dec_label_pc_10009735:                            ; preds = %dec_label_pc_10009719
  %v4_10009735 = or i32 %v4_1000972d, 65535
  br label %dec_label_pc_1000973e

dec_label_pc_1000973b:                            ; preds = %dec_label_pc_10009719
  %v15_1000973b = and i32 %v4_1000972d, -65536
  br label %dec_label_pc_1000973e

dec_label_pc_1000973e:                            ; preds = %dec_label_pc_10009735, %dec_label_pc_10009713, %dec_label_pc_100096f3, %dec_label_pc_100096d5, %dec_label_pc_100096ab, %dec_label_pc_10009688, %dec_label_pc_10009663, %dec_label_pc_1000963a, %dec_label_pc_10009631, %dec_label_pc_10009602, %dec_label_pc_100095dd, %dec_label_pc_100095b1, %dec_label_pc_100095a8, %dec_label_pc_10009579, %dec_label_pc_10009554, %dec_label_pc_10009528, %dec_label_pc_10009505, %dec_label_pc_100094e2, %dec_label_pc_100094bf, %dec_label_pc_1000949c, %dec_label_pc_10009484, %dec_label_pc_10009460, %dec_label_pc_1000973b
  %v0_10009741 = phi i32 [ %v4_10009735, %dec_label_pc_10009735 ], [ %v4_10009713, %dec_label_pc_10009713 ], [ %v4_100096f3, %dec_label_pc_100096f3 ], [ %v4_100096d5, %dec_label_pc_100096d5 ], [ %v4_100096ab, %dec_label_pc_100096ab ], [ %v4_10009688, %dec_label_pc_10009688 ], [ %v4_10009663, %dec_label_pc_10009663 ], [ %v4_1000963a, %dec_label_pc_1000963a ], [ %v4_10009620, %dec_label_pc_10009631 ], [ %v4_10009602, %dec_label_pc_10009602 ], [ %v4_100095dd, %dec_label_pc_100095dd ], [ %v4_100095b1, %dec_label_pc_100095b1 ], [ %v4_10009597, %dec_label_pc_100095a8 ], [ %v4_10009579, %dec_label_pc_10009579 ], [ %v4_10009554, %dec_label_pc_10009554 ], [ %v4_10009528, %dec_label_pc_10009528 ], [ %v4_10009505, %dec_label_pc_10009505 ], [ %v4_100094e2, %dec_label_pc_100094e2 ], [ %v4_100094bf, %dec_label_pc_100094bf ], [ %v2_1000949c, %dec_label_pc_1000949c ], [ %v2_10009484, %dec_label_pc_10009484 ], [ %v2_10009460, %dec_label_pc_10009460 ], [ %v15_1000973b, %dec_label_pc_1000973b ]
  ret i32 %v0_10009741

; uselistorder directives
  uselistorder i32 %v4_10009620, { 1, 0 }
  uselistorder i32 %v4_100095fa, { 1, 0 }
  uselistorder i32 %v4_10009597, { 1, 0 }
  uselistorder i32 %v4_1000954c, { 1, 0 }
  uselistorder i32 %v2_1000947d, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i16 %arg2, { 1, 2, 0 }
  uselistorder i32 %arg1, { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000973e, { 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder label %dec_label_pc_10009643, { 1, 0 }
  uselistorder label %dec_label_pc_100095ba, { 1, 0 }
}

define i32 @InitDataCapSweep(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg3 to i16
  %v4_1000974c = icmp eq i32 %arg1, 0
  %v1_10009750 = icmp eq i1 %v4_1000974c, false
  br i1 %v1_10009750, label %dec_label_pc_1000975b, label %dec_label_pc_10009752

dec_label_pc_10009752:                            ; preds = %entry
  %v0_10009752 = load i32, i32* @eax, align 4
  %v1_10009752 = and i32 %v0_10009752, -65536
  %v2_10009752 = or i32 %v1_10009752, 65526
  br label %dec_label_pc_10009a3e

dec_label_pc_1000975b:                            ; preds = %entry
  %v2_10009767 = sext i32 %arg4 to i64
  %v3_10009767 = bitcast i64 %v2_10009767 to double
  %v4_10009767 = call i32 @FreqInRange(i32 %arg1, double %v3_10009767)
  %v1_1000976f = mul i32 %v4_10009767, 65536
  %v1_1000976f.off = or i32 %v1_1000976f, 65535
  %tmp50 = icmp ult i32 %v1_1000976f.off, 131071
  %v1_10009774 = icmp eq i1 %tmp50, false
  br i1 %v1_10009774, label %dec_label_pc_1000977f, label %dec_label_pc_10009776

dec_label_pc_10009776:                            ; preds = %dec_label_pc_1000975b
  %v2_1000976f = sdiv i32 %v1_1000976f, 65536
  %v1_10009776 = and i32 %v2_1000976f, -65536
  %v2_10009776 = or i32 %v1_10009776, 65533
  br label %dec_label_pc_10009a3e

dec_label_pc_1000977f:                            ; preds = %dec_label_pc_1000975b
  %v2_1000978b = sext i32 %arg6 to i64
  %v3_1000978b = bitcast i64 %v2_1000978b to double
  %v4_1000978b = call i32 @FreqInRange(i32 %arg1, double %v3_1000978b)
  %v1_10009793 = mul i32 %v4_1000978b, 65536
  %v1_10009793.off = or i32 %v1_10009793, 65535
  %tmp51 = icmp ult i32 %v1_10009793.off, 131071
  %v1_10009798 = icmp eq i1 %tmp51, false
  br i1 %v1_10009798, label %dec_label_pc_100097a3, label %dec_label_pc_1000979a

dec_label_pc_1000979a:                            ; preds = %dec_label_pc_1000977f
  %v1_1000979a = and i32 %v4_1000978b, -65536
  %v2_1000979a = or i32 %v1_1000979a, 65533
  br label %dec_label_pc_10009a3e

dec_label_pc_100097a3:                            ; preds = %dec_label_pc_1000977f
  %v5_100097a7 = icmp slt i32 %arg8, 1
  br i1 %v5_100097a7, label %dec_label_pc_100097b2, label %dec_label_pc_100097a9

dec_label_pc_100097a9:                            ; preds = %dec_label_pc_100097a3
  %v7_100097b0 = icmp sgt i32 %arg8, 1000000000
  br i1 %v7_100097b0, label %dec_label_pc_100097b2, label %dec_label_pc_100097bb

dec_label_pc_100097b2:                            ; preds = %dec_label_pc_100097a9, %dec_label_pc_100097a3
  %v1_100097b2 = and i32 %v4_1000978b, -65536
  %v2_100097b2 = or i32 %v1_100097b2, 65533
  br label %dec_label_pc_10009a3e

dec_label_pc_100097bb:                            ; preds = %dec_label_pc_100097a9
  %v3_100097c1 = call i32 @SetAutoCell(i32 %arg1, i16 0)
  %v4_100097c1 = trunc i32 %v3_100097c1 to i16
  %v2_100097d1 = icmp eq i16 %v4_100097c1, 0
  br i1 %v2_100097d1, label %dec_label_pc_100097de, label %dec_label_pc_100097d5

dec_label_pc_100097d5:                            ; preds = %dec_label_pc_100097bb
  %sext = mul i32 %v3_100097c1, 65536
  %v4_100097cd = sdiv i32 %sext, 65536
  %v4_100097d5 = or i32 %v4_100097cd, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_100097de:                            ; preds = %dec_label_pc_100097bb
  %v3_100097e4 = call i32 @SetCellMode(i32 %arg1, i16 0)
  %v4_100097e4 = trunc i32 %v3_100097e4 to i16
  %v2_100097f4 = icmp eq i16 %v4_100097e4, 0
  br i1 %v2_100097f4, label %dec_label_pc_10009801, label %dec_label_pc_100097f8

dec_label_pc_100097f8:                            ; preds = %dec_label_pc_100097de
  %sext3 = mul i32 %v3_100097e4, 65536
  %v4_100097f0 = sdiv i32 %sext3, 65536
  %v4_100097f8 = or i32 %v4_100097f0, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_10009801:                            ; preds = %dec_label_pc_100097de
  %v5_10009807 = call i32 @StepSizeMode(i32 %arg1, i16 1, i32 0)
  %v6_10009807 = trunc i32 %v5_10009807 to i16
  %v2_10009817 = icmp eq i16 %v6_10009807, 0
  br i1 %v2_10009817, label %dec_label_pc_10009824, label %dec_label_pc_1000981b

dec_label_pc_1000981b:                            ; preds = %dec_label_pc_10009801
  %sext5 = mul i32 %v5_10009807, 65536
  %v4_10009813 = sdiv i32 %sext5, 65536
  %v4_1000981b = or i32 %v4_10009813, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_10009824:                            ; preds = %dec_label_pc_10009801
  %v5_1000982a = call i32 @SwpTimeMode(i32 %arg1, i16 1, i32 0)
  %v6_1000982a = trunc i32 %v5_1000982a to i16
  %v2_1000983a = icmp eq i16 %v6_1000982a, 0
  br i1 %v2_1000983a, label %dec_label_pc_10009847, label %dec_label_pc_1000983e

dec_label_pc_1000983e:                            ; preds = %dec_label_pc_10009824
  %sext7 = mul i32 %v5_1000982a, 65536
  %v4_10009836 = sdiv i32 %sext7, 65536
  %v4_1000983e = or i32 %v4_10009836, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_10009847:                            ; preds = %dec_label_pc_10009824
  %v9_1000984b = icmp eq i16 %arg2, 5
  %v1_1000984e = icmp eq i1 %v9_1000984b, false
  br i1 %v1_1000984e, label %dec_label_pc_10009875, label %dec_label_pc_10009850

dec_label_pc_10009850:                            ; preds = %dec_label_pc_10009847
  %v3_10009856 = call i32 @SetRBWmode(i32 %arg1, i16 1)
  %v4_10009856 = trunc i32 %v3_10009856 to i16
  %v2_10009866 = icmp eq i16 %v4_10009856, 0
  br i1 %v2_10009866, label %dec_label_pc_100098d0, label %dec_label_pc_1000986a

dec_label_pc_1000986a:                            ; preds = %dec_label_pc_10009850
  %sext9 = mul i32 %v3_10009856, 65536
  %v4_10009862 = sdiv i32 %sext9, 65536
  %v4_1000986a = or i32 %v4_10009862, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_10009875:                            ; preds = %dec_label_pc_10009847
  %v3_1000987b = call i32 @SetRBWmode(i32 %arg1, i16 0)
  %v4_1000987b = trunc i32 %v3_1000987b to i16
  %v2_1000988b = icmp eq i16 %v4_1000987b, 0
  br i1 %v2_1000988b, label %dec_label_pc_10009898, label %dec_label_pc_1000988f

dec_label_pc_1000988f:                            ; preds = %dec_label_pc_10009875
  %sext29 = mul i32 %v3_1000987b, 65536
  %v4_10009887 = sdiv i32 %sext29, 65536
  %v4_1000988f = or i32 %v4_10009887, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_10009898:                            ; preds = %dec_label_pc_10009875
  %v3_100098a1 = call i32 @SetRBW(i32 %arg1, i16 %arg2)
  %v4_100098a1 = trunc i32 %v3_100098a1 to i16
  %sext32 = mul i32 %v3_100098a1, 65536
  %v4_100098ad = sdiv i32 %sext32, 65536
  %v2_100098b1 = icmp eq i16 %v4_100098a1, 0
  br i1 %v2_100098b1, label %dec_label_pc_100098d0, label %dec_label_pc_100098b5

dec_label_pc_100098b5:                            ; preds = %dec_label_pc_10009898
  %tmp52 = icmp eq i32 %sext32, -196608
  %v1_100098bc = icmp eq i1 %tmp52, false
  br i1 %v1_100098bc, label %dec_label_pc_100098c7, label %dec_label_pc_100098be

dec_label_pc_100098be:                            ; preds = %dec_label_pc_100098b5
  br label %dec_label_pc_10009a3e

dec_label_pc_100098c7:                            ; preds = %dec_label_pc_100098b5
  %v2_100098c7 = or i32 %v4_100098ad, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_100098d0:                            ; preds = %dec_label_pc_10009850, %dec_label_pc_10009898
  %sext11 = mul i32 %arg3, 65536
  %tmp53 = icmp eq i32 %sext11, 524288
  %v1_100098d7 = icmp eq i1 %tmp53, false
  br i1 %v1_100098d7, label %dec_label_pc_100098fe, label %dec_label_pc_100098d9

dec_label_pc_100098d9:                            ; preds = %dec_label_pc_100098d0
  %v3_100098df = call i32 @SetVBWmode(i32 %arg1, i16 1)
  %v4_100098df = trunc i32 %v3_100098df to i16
  %v2_100098ef = icmp eq i16 %v4_100098df, 0
  br i1 %v2_100098ef, label %dec_label_pc_10009959, label %dec_label_pc_100098f3

dec_label_pc_100098f3:                            ; preds = %dec_label_pc_100098d9
  %sext12 = mul i32 %v3_100098df, 65536
  %v4_100098eb = sdiv i32 %sext12, 65536
  %v4_100098f3 = or i32 %v4_100098eb, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_100098fe:                            ; preds = %dec_label_pc_100098d0
  %v3_10009904 = call i32 @SetVBWmode(i32 %arg1, i16 0)
  %v4_10009904 = trunc i32 %v3_10009904 to i16
  %v2_10009914 = icmp eq i16 %v4_10009904, 0
  br i1 %v2_10009914, label %dec_label_pc_10009921, label %dec_label_pc_10009918

dec_label_pc_10009918:                            ; preds = %dec_label_pc_100098fe
  %sext25 = mul i32 %v3_10009904, 65536
  %v4_10009910 = sdiv i32 %sext25, 65536
  %v4_10009918 = or i32 %v4_10009910, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_10009921:                            ; preds = %dec_label_pc_100098fe
  store i32 %arg1, i32* @ecx, align 4
  %v3_1000992a = call i32 @SetVBW(i32 %arg1, i16 %tmp)
  %v4_1000992a = trunc i32 %v3_1000992a to i16
  %sext28 = mul i32 %v3_1000992a, 65536
  %v4_10009936 = sdiv i32 %sext28, 65536
  %v2_1000993a = icmp eq i16 %v4_1000992a, 0
  br i1 %v2_1000993a, label %dec_label_pc_10009959, label %dec_label_pc_1000993e

dec_label_pc_1000993e:                            ; preds = %dec_label_pc_10009921
  %tmp54 = icmp eq i32 %sext28, -196608
  %v1_10009945 = icmp eq i1 %tmp54, false
  br i1 %v1_10009945, label %dec_label_pc_10009950, label %dec_label_pc_10009947

dec_label_pc_10009947:                            ; preds = %dec_label_pc_1000993e
  br label %dec_label_pc_10009a3e

dec_label_pc_10009950:                            ; preds = %dec_label_pc_1000993e
  %v2_10009950 = or i32 %v4_10009936, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_10009959:                            ; preds = %dec_label_pc_100098d9, %dec_label_pc_10009921
  %v3_10009965 = call i32 @ConfigStartFreq(i32 %arg1, i32 %arg4, i32 %arg5)
  %v3_10009979 = call i32 @ConfigStopFreq(i32 %arg1, i32 %arg6, i32 %arg7)
  %v4_10009979 = trunc i32 %v3_10009979 to i16
  %v2_10009989 = icmp eq i16 %v4_10009979, 0
  br i1 %v2_10009989, label %dec_label_pc_10009996, label %dec_label_pc_1000998d

dec_label_pc_1000998d:                            ; preds = %dec_label_pc_10009959
  %sext14 = mul i32 %v3_10009979, 65536
  %v4_10009985 = sdiv i32 %sext14, 65536
  %v4_1000998d = or i32 %v4_10009985, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_10009996:                            ; preds = %dec_label_pc_10009959
  %v4_1000999e = call i32 @SetDefltPts(i32 %arg1, i32 %arg8, i32 0)
  %v5_1000999e = trunc i32 %v4_1000999e to i16
  %v2_100099ae = icmp eq i16 %v5_1000999e, 0
  br i1 %v2_100099ae, label %dec_label_pc_100099bb, label %dec_label_pc_100099b2

dec_label_pc_100099b2:                            ; preds = %dec_label_pc_10009996
  %sext16 = mul i32 %v4_1000999e, 65536
  %v4_100099aa = sdiv i32 %sext16, 65536
  %v4_100099b2 = or i32 %v4_100099aa, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_100099bb:                            ; preds = %dec_label_pc_10009996
  %v2_100099c1 = call i32 @SetSwpIdx(i32 %arg1, i32 0)
  %v3_100099c1 = trunc i32 %v2_100099c1 to i16
  %v2_100099d1 = icmp eq i16 %v3_100099c1, 0
  br i1 %v2_100099d1, label %dec_label_pc_100099db, label %dec_label_pc_100099d5

dec_label_pc_100099d5:                            ; preds = %dec_label_pc_100099bb
  %sext18 = mul i32 %v2_100099c1, 65536
  %v4_100099cd = sdiv i32 %sext18, 65536
  %v4_100099d5 = or i32 %v4_100099cd, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_100099db:                            ; preds = %dec_label_pc_100099bb
  %v3_100099df = call i32 @SetDetectLog(i32 %arg1, i32 0)
  %v4_100099df = trunc i32 %v3_100099df to i16
  %v2_100099ef = icmp eq i16 %v4_100099df, 0
  br i1 %v2_100099ef, label %dec_label_pc_100099f9, label %dec_label_pc_100099f3

dec_label_pc_100099f3:                            ; preds = %dec_label_pc_100099db
  %sext20 = mul i32 %v3_100099df, 65536
  %v4_100099eb = sdiv i32 %sext20, 65536
  %v4_100099f3 = or i32 %v4_100099eb, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_100099f9:                            ; preds = %dec_label_pc_100099db
  %v3_100099ff = call i32 @SetSweepCode(i32 %arg1, i16 1)
  %v4_100099ff = trunc i32 %v3_100099ff to i16
  %v2_10009a0f = icmp eq i16 %v4_100099ff, 0
  br i1 %v2_10009a0f, label %dec_label_pc_10009a19, label %dec_label_pc_10009a13

dec_label_pc_10009a13:                            ; preds = %dec_label_pc_100099f9
  %sext22 = mul i32 %v3_100099ff, 65536
  %v4_10009a0b = sdiv i32 %sext22, 65536
  %v4_10009a13 = or i32 %v4_10009a0b, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_10009a19:                            ; preds = %dec_label_pc_100099f9
  %v6_10009a21 = call i32 @SetTrigMode(i32 %arg1, i16 0, i32 1, i32 0)
  %v7_10009a21 = trunc i32 %v6_10009a21 to i16
  %sext24 = mul i32 %v6_10009a21, 65536
  %v4_10009a2d = sdiv i32 %sext24, 65536
  %v1_10009a31 = icmp eq i16 %v7_10009a21, 0
  br i1 %v1_10009a31, label %dec_label_pc_10009a3b, label %dec_label_pc_10009a35

dec_label_pc_10009a35:                            ; preds = %dec_label_pc_10009a19
  %v2_10009a35 = or i32 %v4_10009a2d, 65535
  br label %dec_label_pc_10009a3e

dec_label_pc_10009a3b:                            ; preds = %dec_label_pc_10009a19
  %v12_10009a3b = and i32 %v4_10009a2d, -65536
  br label %dec_label_pc_10009a3e

dec_label_pc_10009a3e:                            ; preds = %dec_label_pc_10009a35, %dec_label_pc_10009a13, %dec_label_pc_100099f3, %dec_label_pc_100099d5, %dec_label_pc_100099b2, %dec_label_pc_1000998d, %dec_label_pc_10009950, %dec_label_pc_10009947, %dec_label_pc_10009918, %dec_label_pc_100098f3, %dec_label_pc_100098c7, %dec_label_pc_100098be, %dec_label_pc_1000988f, %dec_label_pc_1000986a, %dec_label_pc_1000983e, %dec_label_pc_1000981b, %dec_label_pc_100097f8, %dec_label_pc_100097d5, %dec_label_pc_100097b2, %dec_label_pc_1000979a, %dec_label_pc_10009776, %dec_label_pc_10009752, %dec_label_pc_10009a3b
  %v0_10009a41 = phi i32 [ %v2_10009a35, %dec_label_pc_10009a35 ], [ %v4_10009a13, %dec_label_pc_10009a13 ], [ %v4_100099f3, %dec_label_pc_100099f3 ], [ %v4_100099d5, %dec_label_pc_100099d5 ], [ %v4_100099b2, %dec_label_pc_100099b2 ], [ %v4_1000998d, %dec_label_pc_1000998d ], [ %v2_10009950, %dec_label_pc_10009950 ], [ %v4_10009936, %dec_label_pc_10009947 ], [ %v4_10009918, %dec_label_pc_10009918 ], [ %v4_100098f3, %dec_label_pc_100098f3 ], [ %v2_100098c7, %dec_label_pc_100098c7 ], [ %v4_100098ad, %dec_label_pc_100098be ], [ %v4_1000988f, %dec_label_pc_1000988f ], [ %v4_1000986a, %dec_label_pc_1000986a ], [ %v4_1000983e, %dec_label_pc_1000983e ], [ %v4_1000981b, %dec_label_pc_1000981b ], [ %v4_100097f8, %dec_label_pc_100097f8 ], [ %v4_100097d5, %dec_label_pc_100097d5 ], [ %v2_100097b2, %dec_label_pc_100097b2 ], [ %v2_1000979a, %dec_label_pc_1000979a ], [ %v2_10009776, %dec_label_pc_10009776 ], [ %v2_10009752, %dec_label_pc_10009752 ], [ %v12_10009a3b, %dec_label_pc_10009a3b ]
  ret i32 %v0_10009a41

; uselistorder directives
  uselistorder i32 %v4_10009936, { 1, 0 }
  uselistorder i32 %v4_100098ad, { 1, 0 }
  uselistorder i32 %v4_1000978b, { 1, 2, 0 }
  uselistorder i32 %v1_1000976f, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10009a3e, { 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder label %dec_label_pc_10009959, { 1, 0 }
  uselistorder label %dec_label_pc_100098d0, { 1, 0 }
}

define i32 @InitGuiZspan(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg3 to i16
  %v4_10009a4c = icmp eq i32 %arg1, 0
  %v1_10009a50 = icmp eq i1 %v4_10009a4c, false
  br i1 %v1_10009a50, label %dec_label_pc_10009a5b, label %dec_label_pc_10009a52

dec_label_pc_10009a52:                            ; preds = %entry
  %v0_10009a52 = load i32, i32* @eax, align 4
  %v1_10009a52 = and i32 %v0_10009a52, -65536
  %v2_10009a52 = or i32 %v1_10009a52, 65526
  br label %dec_label_pc_10009d7d

dec_label_pc_10009a5b:                            ; preds = %entry
  %v2_10009a67 = sext i32 %arg4 to i64
  %v3_10009a67 = bitcast i64 %v2_10009a67 to double
  %v4_10009a67 = call i32 @FreqInRange(i32 %arg1, double %v3_10009a67)
  %v1_10009a6f = mul i32 %v4_10009a67, 65536
  %v2_10009a6f = sdiv i32 %v1_10009a6f, 65536
  %v1_10009a6f.off = or i32 %v1_10009a6f, 65535
  %tmp61 = icmp ult i32 %v1_10009a6f.off, 131071
  %v1_10009a74 = icmp eq i1 %tmp61, false
  br i1 %v1_10009a74, label %dec_label_pc_10009a7f, label %dec_label_pc_10009a76

dec_label_pc_10009a76:                            ; preds = %dec_label_pc_10009a5b
  %v1_10009a76 = and i32 %v2_10009a6f, -65536
  %v2_10009a76 = or i32 %v1_10009a76, 65533
  br label %dec_label_pc_10009d7d

dec_label_pc_10009a7f:                            ; preds = %dec_label_pc_10009a5b
  %v5_10009a83 = icmp slt i32 %arg7, 1
  br i1 %v5_10009a83, label %dec_label_pc_10009a8e, label %dec_label_pc_10009a85

dec_label_pc_10009a85:                            ; preds = %dec_label_pc_10009a7f
  %v7_10009a8c = icmp sgt i32 %arg7, 65535
  br i1 %v7_10009a8c, label %dec_label_pc_10009a8e, label %dec_label_pc_10009a97

dec_label_pc_10009a8e:                            ; preds = %dec_label_pc_10009a85, %dec_label_pc_10009a7f
  %v1_10009a8e = and i32 %v2_10009a6f, -65536
  %v2_10009a8e = or i32 %v1_10009a8e, 65533
  br label %dec_label_pc_10009d7d

dec_label_pc_10009a97:                            ; preds = %dec_label_pc_10009a85
  %v3_10009a9d = call i32 @SetAutoCell(i32 %arg1, i16 0)
  %v4_10009a9d = trunc i32 %v3_10009a9d to i16
  %v2_10009aad = icmp eq i16 %v4_10009a9d, 0
  br i1 %v2_10009aad, label %dec_label_pc_10009aba, label %dec_label_pc_10009ab1

dec_label_pc_10009ab1:                            ; preds = %dec_label_pc_10009a97
  %sext = mul i32 %v3_10009a9d, 65536
  %v4_10009aa9 = sdiv i32 %sext, 65536
  %v4_10009ab1 = or i32 %v4_10009aa9, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009aba:                            ; preds = %dec_label_pc_10009a97
  %v3_10009ac0 = call i32 @SetCellMode(i32 %arg1, i16 1)
  %v4_10009ac0 = trunc i32 %v3_10009ac0 to i16
  %v2_10009ad0 = icmp eq i16 %v4_10009ac0, 0
  br i1 %v2_10009ad0, label %dec_label_pc_10009add, label %dec_label_pc_10009ad4

dec_label_pc_10009ad4:                            ; preds = %dec_label_pc_10009aba
  %sext4 = mul i32 %v3_10009ac0, 65536
  %v4_10009acc = sdiv i32 %sext4, 65536
  %v4_10009ad4 = or i32 %v4_10009acc, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009add:                            ; preds = %dec_label_pc_10009aba
  %v5_10009ae3 = call i32 @SwpTimeMode(i32 %arg1, i16 1, i32 0)
  %v6_10009ae3 = trunc i32 %v5_10009ae3 to i16
  %v2_10009af3 = icmp eq i16 %v6_10009ae3, 0
  br i1 %v2_10009af3, label %dec_label_pc_10009b00, label %dec_label_pc_10009af7

dec_label_pc_10009af7:                            ; preds = %dec_label_pc_10009add
  %sext6 = mul i32 %v5_10009ae3, 65536
  %v4_10009aef = sdiv i32 %sext6, 65536
  %v4_10009af7 = or i32 %v4_10009aef, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009b00:                            ; preds = %dec_label_pc_10009add
  %v5_10009b06 = call i32 @StepSizeMode(i32 %arg1, i16 1, i32 0)
  %v6_10009b06 = trunc i32 %v5_10009b06 to i16
  %sext8 = mul i32 %v5_10009b06, 65536
  %v4_10009b12 = sdiv i32 %sext8, 65536
  %v2_10009b16 = icmp eq i16 %v6_10009b06, 0
  br i1 %v2_10009b16, label %dec_label_pc_10009b23, label %dec_label_pc_10009b1a

dec_label_pc_10009b1a:                            ; preds = %dec_label_pc_10009b00
  %v4_10009b1a = or i32 %v4_10009b12, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009b23:                            ; preds = %dec_label_pc_10009b00
  %v9_10009b27 = icmp eq i16 %arg2, 5
  %v1_10009b2a = icmp eq i1 %v9_10009b27, false
  br i1 %v1_10009b2a, label %dec_label_pc_10009b51, label %dec_label_pc_10009b2c

dec_label_pc_10009b2c:                            ; preds = %dec_label_pc_10009b23
  %v3_10009b32 = call i32 @SetRBWmode(i32 %arg1, i16 1)
  %v4_10009b32 = trunc i32 %v3_10009b32 to i16
  %sext10 = mul i32 %v3_10009b32, 65536
  %v4_10009b3e = sdiv i32 %sext10, 65536
  store i32 %v4_10009b3e, i32* @edx, align 4
  %v1_10009b42 = icmp eq i16 %v4_10009b32, 0
  br i1 %v1_10009b42, label %dec_label_pc_10009bac, label %dec_label_pc_10009b46

dec_label_pc_10009b46:                            ; preds = %dec_label_pc_10009b2c
  %v4_10009b46 = or i32 %v4_10009b3e, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009b51:                            ; preds = %dec_label_pc_10009b23
  %v3_10009b57 = call i32 @SetRBWmode(i32 %arg1, i16 0)
  %v4_10009b57 = trunc i32 %v3_10009b57 to i16
  %v2_10009b67 = icmp eq i16 %v4_10009b57, 0
  br i1 %v2_10009b67, label %dec_label_pc_10009b74, label %dec_label_pc_10009b6b

dec_label_pc_10009b6b:                            ; preds = %dec_label_pc_10009b51
  %sext39 = mul i32 %v3_10009b57, 65536
  %v4_10009b63 = sdiv i32 %sext39, 65536
  %v4_10009b6b = or i32 %v4_10009b63, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009b74:                            ; preds = %dec_label_pc_10009b51
  %v4_10009b74 = zext i16 %arg2 to i32
  %v7_10009b74 = and i32 %v4_10009b12, -65536
  %v8_10009b74 = or i32 %v7_10009b74, %v4_10009b74
  store i32 %v8_10009b74, i32* @edx, align 4
  %v3_10009b7d = call i32 @SetRBW(i32 %arg1, i16 %arg2)
  %v4_10009b7d = trunc i32 %v3_10009b7d to i16
  %sext42 = mul i32 %v3_10009b7d, 65536
  %v4_10009b89 = sdiv i32 %sext42, 65536
  %v2_10009b8d = icmp eq i16 %v4_10009b7d, 0
  br i1 %v2_10009b8d, label %dec_label_pc_10009bac, label %dec_label_pc_10009b91

dec_label_pc_10009b91:                            ; preds = %dec_label_pc_10009b74
  %tmp62 = icmp eq i32 %sext42, -196608
  %v1_10009b98 = icmp eq i1 %tmp62, false
  br i1 %v1_10009b98, label %dec_label_pc_10009ba3, label %dec_label_pc_10009b9a

dec_label_pc_10009b9a:                            ; preds = %dec_label_pc_10009b91
  br label %dec_label_pc_10009d7d

dec_label_pc_10009ba3:                            ; preds = %dec_label_pc_10009b91
  %v4_10009ba3 = or i32 %v4_10009b89, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009bac:                            ; preds = %dec_label_pc_10009b2c, %dec_label_pc_10009b74
  %sext12 = mul i32 %arg3, 65536
  %tmp63 = icmp eq i32 %sext12, 524288
  %v1_10009bb3 = icmp eq i1 %tmp63, false
  br i1 %v1_10009bb3, label %dec_label_pc_10009bda, label %dec_label_pc_10009bb5

dec_label_pc_10009bb5:                            ; preds = %dec_label_pc_10009bac
  %v3_10009bbb = call i32 @SetVBWmode(i32 %arg1, i16 1)
  %v4_10009bbb = trunc i32 %v3_10009bbb to i16
  %v2_10009bcb = icmp eq i16 %v4_10009bbb, 0
  br i1 %v2_10009bcb, label %dec_label_pc_10009c35, label %dec_label_pc_10009bcf

dec_label_pc_10009bcf:                            ; preds = %dec_label_pc_10009bb5
  %sext13 = mul i32 %v3_10009bbb, 65536
  %v4_10009bc7 = sdiv i32 %sext13, 65536
  %v4_10009bcf = or i32 %v4_10009bc7, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009bda:                            ; preds = %dec_label_pc_10009bac
  %v3_10009be0 = call i32 @SetVBWmode(i32 %arg1, i16 0)
  %v4_10009be0 = trunc i32 %v3_10009be0 to i16
  %sext34 = mul i32 %v3_10009be0, 65536
  %v4_10009bec = sdiv i32 %sext34, 65536
  store i32 %v4_10009bec, i32* @ecx, align 4
  %v2_10009bf0 = icmp eq i16 %v4_10009be0, 0
  br i1 %v2_10009bf0, label %dec_label_pc_10009bfd, label %dec_label_pc_10009bf4

dec_label_pc_10009bf4:                            ; preds = %dec_label_pc_10009bda
  %v4_10009bf4 = or i32 %v4_10009bec, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009bfd:                            ; preds = %dec_label_pc_10009bda
  %v3_10009c06 = call i32 @SetVBW(i32 %arg1, i16 %tmp)
  %v4_10009c06 = trunc i32 %v3_10009c06 to i16
  %sext36 = mul i32 %v3_10009c06, 65536
  %v4_10009c12 = sdiv i32 %sext36, 65536
  %v2_10009c16 = icmp eq i16 %v4_10009c06, 0
  br i1 %v2_10009c16, label %dec_label_pc_10009c35, label %dec_label_pc_10009c1a

dec_label_pc_10009c1a:                            ; preds = %dec_label_pc_10009bfd
  %tmp64 = icmp eq i32 %sext36, -196608
  %v1_10009c21 = icmp eq i1 %tmp64, false
  br i1 %v1_10009c21, label %dec_label_pc_10009c2c, label %dec_label_pc_10009c23

dec_label_pc_10009c23:                            ; preds = %dec_label_pc_10009c1a
  br label %dec_label_pc_10009d7d

dec_label_pc_10009c2c:                            ; preds = %dec_label_pc_10009c1a
  %v4_10009c2c = or i32 %v4_10009c12, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009c35:                            ; preds = %dec_label_pc_10009bb5, %dec_label_pc_10009bfd
  %v3_10009c41 = call i32 @ConfigZspanFreq(i32 %arg1, i32 %arg4, i32 %arg5)
  %v4_10009c41 = trunc i32 %v3_10009c41 to i16
  %v2_10009c51 = icmp eq i16 %v4_10009c41, 0
  br i1 %v2_10009c51, label %dec_label_pc_10009c5e, label %dec_label_pc_10009c55

dec_label_pc_10009c55:                            ; preds = %dec_label_pc_10009c35
  %sext15 = mul i32 %v3_10009c41, 65536
  %v4_10009c4d = sdiv i32 %sext15, 65536
  %v4_10009c55 = or i32 %v4_10009c4d, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009c5e:                            ; preds = %dec_label_pc_10009c35
  %v2_10009c67 = trunc i32 %arg6 to i16
  %v3_10009c67 = call i32 @SetRefLevel(i32 %arg1, i16 %v2_10009c67)
  %v4_10009c67 = trunc i32 %v3_10009c67 to i16
  %v3_10009c77 = icmp slt i16 %v4_10009c67, 0
  %v2_10009c79 = icmp eq i1 %v3_10009c77, false
  br i1 %v2_10009c79, label %dec_label_pc_10009c84, label %dec_label_pc_10009c7b

dec_label_pc_10009c7b:                            ; preds = %dec_label_pc_10009c5e
  %sext17 = mul i32 %v3_10009c67, 65536
  %v4_10009c73 = sdiv i32 %sext17, 65536
  %v4_10009c7b = or i32 %v4_10009c73, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009c84:                            ; preds = %dec_label_pc_10009c5e
  %v2_10009c8c = call i32 @SetNumCells(i32 %arg1, i32 %arg7)
  %v3_10009c8c = trunc i32 %v2_10009c8c to i16
  %v2_10009c9c = icmp eq i16 %v3_10009c8c, 0
  br i1 %v2_10009c9c, label %dec_label_pc_10009ca9, label %dec_label_pc_10009ca0

dec_label_pc_10009ca0:                            ; preds = %dec_label_pc_10009c84
  %sext19 = mul i32 %v2_10009c8c, 65536
  %v4_10009c98 = sdiv i32 %sext19, 65536
  %v4_10009ca0 = or i32 %v4_10009c98, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009ca9:                            ; preds = %dec_label_pc_10009c84
  %v2_10009caf = call i32 @SetSwpIdx(i32 %arg1, i32 0)
  %v3_10009caf = trunc i32 %v2_10009caf to i16
  %v2_10009cbf = icmp eq i16 %v3_10009caf, 0
  br i1 %v2_10009cbf, label %dec_label_pc_10009ccc, label %dec_label_pc_10009cc3

dec_label_pc_10009cc3:                            ; preds = %dec_label_pc_10009ca9
  %sext21 = mul i32 %v2_10009caf, 65536
  %v4_10009cbb = sdiv i32 %sext21, 65536
  %v4_10009cc3 = or i32 %v4_10009cbb, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009ccc:                            ; preds = %dec_label_pc_10009ca9
  %v4_10009cd6 = call i32 @SetZSamplCnt(i32 %arg1, i32 501, i32 0)
  %v5_10009cd6 = trunc i32 %v4_10009cd6 to i16
  %v2_10009ce6 = icmp eq i16 %v5_10009cd6, 0
  br i1 %v2_10009ce6, label %dec_label_pc_10009cf3, label %dec_label_pc_10009cea

dec_label_pc_10009cea:                            ; preds = %dec_label_pc_10009ccc
  %sext23 = mul i32 %v4_10009cd6, 65536
  %v4_10009ce2 = sdiv i32 %sext23, 65536
  %v4_10009cea = or i32 %v4_10009ce2, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009cf3:                            ; preds = %dec_label_pc_10009ccc
  %v3_10009d00 = call i32 @SetZSamplRate(i32 %arg1, i64 50000)
  %v4_10009d00 = trunc i32 %v3_10009d00 to i16
  %v2_10009d10 = icmp eq i16 %v4_10009d00, 0
  br i1 %v2_10009d10, label %dec_label_pc_10009d1a, label %dec_label_pc_10009d14

dec_label_pc_10009d14:                            ; preds = %dec_label_pc_10009cf3
  %sext25 = mul i32 %v3_10009d00, 65536
  %v4_10009d0c = sdiv i32 %sext25, 65536
  %v4_10009d14 = or i32 %v4_10009d0c, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009d1a:                            ; preds = %dec_label_pc_10009cf3
  %v3_10009d1e = call i32 @SetDetectLog(i32 %arg1, i32 0)
  %v4_10009d1e = trunc i32 %v3_10009d1e to i16
  %v2_10009d2e = icmp eq i16 %v4_10009d1e, 0
  br i1 %v2_10009d2e, label %dec_label_pc_10009d38, label %dec_label_pc_10009d32

dec_label_pc_10009d32:                            ; preds = %dec_label_pc_10009d1a
  %sext27 = mul i32 %v3_10009d1e, 65536
  %v4_10009d2a = sdiv i32 %sext27, 65536
  %v4_10009d32 = or i32 %v4_10009d2a, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009d38:                            ; preds = %dec_label_pc_10009d1a
  %v3_10009d3e = call i32 @SetSweepCode(i32 %arg1, i16 5)
  %v4_10009d3e = trunc i32 %v3_10009d3e to i16
  %v2_10009d4e = icmp eq i16 %v4_10009d3e, 0
  br i1 %v2_10009d4e, label %dec_label_pc_10009d58, label %dec_label_pc_10009d52

dec_label_pc_10009d52:                            ; preds = %dec_label_pc_10009d38
  %sext29 = mul i32 %v3_10009d3e, 65536
  %v4_10009d4a = sdiv i32 %sext29, 65536
  %v4_10009d52 = or i32 %v4_10009d4a, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009d58:                            ; preds = %dec_label_pc_10009d38
  %v6_10009d60 = call i32 @SetTrigMode(i32 %arg1, i16 0, i32 1, i32 0)
  %v7_10009d60 = trunc i32 %v6_10009d60 to i16
  %sext31 = mul i32 %v6_10009d60, 65536
  %v4_10009d6c = sdiv i32 %sext31, 65536
  %v1_10009d70 = icmp eq i16 %v7_10009d60, 0
  br i1 %v1_10009d70, label %dec_label_pc_10009d7a, label %dec_label_pc_10009d74

dec_label_pc_10009d74:                            ; preds = %dec_label_pc_10009d58
  %v4_10009d74 = or i32 %v4_10009d6c, 65535
  br label %dec_label_pc_10009d7d

dec_label_pc_10009d7a:                            ; preds = %dec_label_pc_10009d58
  %v15_10009d7a = and i32 %v4_10009d6c, -65536
  br label %dec_label_pc_10009d7d

dec_label_pc_10009d7d:                            ; preds = %dec_label_pc_10009d74, %dec_label_pc_10009d52, %dec_label_pc_10009d32, %dec_label_pc_10009d14, %dec_label_pc_10009cea, %dec_label_pc_10009cc3, %dec_label_pc_10009ca0, %dec_label_pc_10009c7b, %dec_label_pc_10009c55, %dec_label_pc_10009c2c, %dec_label_pc_10009c23, %dec_label_pc_10009bf4, %dec_label_pc_10009bcf, %dec_label_pc_10009ba3, %dec_label_pc_10009b9a, %dec_label_pc_10009b6b, %dec_label_pc_10009b46, %dec_label_pc_10009b1a, %dec_label_pc_10009af7, %dec_label_pc_10009ad4, %dec_label_pc_10009ab1, %dec_label_pc_10009a8e, %dec_label_pc_10009a76, %dec_label_pc_10009a52, %dec_label_pc_10009d7a
  %v0_10009d80 = phi i32 [ %v4_10009d74, %dec_label_pc_10009d74 ], [ %v4_10009d52, %dec_label_pc_10009d52 ], [ %v4_10009d32, %dec_label_pc_10009d32 ], [ %v4_10009d14, %dec_label_pc_10009d14 ], [ %v4_10009cea, %dec_label_pc_10009cea ], [ %v4_10009cc3, %dec_label_pc_10009cc3 ], [ %v4_10009ca0, %dec_label_pc_10009ca0 ], [ %v4_10009c7b, %dec_label_pc_10009c7b ], [ %v4_10009c55, %dec_label_pc_10009c55 ], [ %v4_10009c2c, %dec_label_pc_10009c2c ], [ %v4_10009c12, %dec_label_pc_10009c23 ], [ %v4_10009bf4, %dec_label_pc_10009bf4 ], [ %v4_10009bcf, %dec_label_pc_10009bcf ], [ %v4_10009ba3, %dec_label_pc_10009ba3 ], [ %v4_10009b89, %dec_label_pc_10009b9a ], [ %v4_10009b6b, %dec_label_pc_10009b6b ], [ %v4_10009b46, %dec_label_pc_10009b46 ], [ %v4_10009b1a, %dec_label_pc_10009b1a ], [ %v4_10009af7, %dec_label_pc_10009af7 ], [ %v4_10009ad4, %dec_label_pc_10009ad4 ], [ %v4_10009ab1, %dec_label_pc_10009ab1 ], [ %v2_10009a8e, %dec_label_pc_10009a8e ], [ %v2_10009a76, %dec_label_pc_10009a76 ], [ %v2_10009a52, %dec_label_pc_10009a52 ], [ %v15_10009d7a, %dec_label_pc_10009d7a ]
  ret i32 %v0_10009d80

; uselistorder directives
  uselistorder i32 %v4_10009c12, { 1, 0 }
  uselistorder i32 %v4_10009bec, { 1, 0 }
  uselistorder i32 %v4_10009b89, { 1, 0 }
  uselistorder i32 %v4_10009b3e, { 1, 0 }
  uselistorder i32 (i32, i64)* @SetZSamplRate, { 2, 0, 1 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i16 %arg2, { 1, 2, 0 }
  uselistorder i32 %arg1, { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10009d7d, { 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder label %dec_label_pc_10009c35, { 1, 0 }
  uselistorder label %dec_label_pc_10009bac, { 1, 0 }
}

define i32 @InitGuiSweep(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg8 to i16
  %tmp44 = trunc i32 %arg3 to i16
  %v4_10009d8b = icmp eq i32 %arg1, 0
  %v1_10009d8f = icmp eq i1 %v4_10009d8b, false
  br i1 %v1_10009d8f, label %dec_label_pc_10009d9a, label %dec_label_pc_10009d91

dec_label_pc_10009d91:                            ; preds = %entry
  %v0_10009d91 = load i32, i32* @eax, align 4
  %v1_10009d91 = and i32 %v0_10009d91, -65536
  %v2_10009d91 = or i32 %v1_10009d91, 65526
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009d9a:                            ; preds = %entry
  %v2_10009da6 = sext i32 %arg4 to i64
  %v3_10009da6 = bitcast i64 %v2_10009da6 to double
  %v4_10009da6 = call i32 @FreqInRange(i32 %arg1, double %v3_10009da6)
  %v1_10009dae = mul i32 %v4_10009da6, 65536
  %v1_10009dae.off = or i32 %v1_10009dae, 65535
  %tmp60 = icmp ult i32 %v1_10009dae.off, 131071
  %v1_10009db3 = icmp eq i1 %tmp60, false
  br i1 %v1_10009db3, label %dec_label_pc_10009dbe, label %dec_label_pc_10009db5

dec_label_pc_10009db5:                            ; preds = %dec_label_pc_10009d9a
  %v2_10009dae = sdiv i32 %v1_10009dae, 65536
  %v1_10009db5 = and i32 %v2_10009dae, -65536
  %v2_10009db5 = or i32 %v1_10009db5, 65533
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009dbe:                            ; preds = %dec_label_pc_10009d9a
  %v2_10009dca = sext i32 %arg6 to i64
  %v3_10009dca = bitcast i64 %v2_10009dca to double
  %v4_10009dca = call i32 @FreqInRange(i32 %arg1, double %v3_10009dca)
  %v1_10009dd2 = mul i32 %v4_10009dca, 65536
  %v1_10009dd2.off = or i32 %v1_10009dd2, 65535
  %tmp61 = icmp ult i32 %v1_10009dd2.off, 131071
  %v1_10009dd7 = icmp eq i1 %tmp61, false
  br i1 %v1_10009dd7, label %dec_label_pc_10009de2, label %dec_label_pc_10009dd9

dec_label_pc_10009dd9:                            ; preds = %dec_label_pc_10009dbe
  %v1_10009dd9 = and i32 %v4_10009dca, -65536
  %v2_10009dd9 = or i32 %v1_10009dd9, 65533
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009de2:                            ; preds = %dec_label_pc_10009dbe
  %v5_10009de6 = icmp slt i32 %arg9, 1
  br i1 %v5_10009de6, label %dec_label_pc_10009df1, label %dec_label_pc_10009de8

dec_label_pc_10009de8:                            ; preds = %dec_label_pc_10009de2
  %v7_10009def = icmp sgt i32 %arg9, 65535
  br i1 %v7_10009def, label %dec_label_pc_10009df1, label %dec_label_pc_10009dfa

dec_label_pc_10009df1:                            ; preds = %dec_label_pc_10009de8, %dec_label_pc_10009de2
  %v1_10009df1 = and i32 %v4_10009dca, -65536
  %v2_10009df1 = or i32 %v1_10009df1, 65533
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009dfa:                            ; preds = %dec_label_pc_10009de8
  %v4_10009e00 = call i32 @SetAutoCell(i32 %arg1, i16 0)
  %v5_10009e00 = trunc i32 %v4_10009e00 to i16
  %v2_10009e10 = icmp eq i16 %v5_10009e00, 0
  br i1 %v2_10009e10, label %dec_label_pc_10009e1d, label %dec_label_pc_10009e14

dec_label_pc_10009e14:                            ; preds = %dec_label_pc_10009dfa
  %sext2 = mul i32 %v4_10009e00, 65536
  %v4_10009e0c = sdiv i32 %sext2, 65536
  %v4_10009e14 = or i32 %v4_10009e0c, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009e1d:                            ; preds = %dec_label_pc_10009dfa
  %v4_10009e23 = call i32 @SetCellMode(i32 %arg1, i16 1)
  %v5_10009e23 = trunc i32 %v4_10009e23 to i16
  %v2_10009e33 = icmp eq i16 %v5_10009e23, 0
  br i1 %v2_10009e33, label %dec_label_pc_10009e40, label %dec_label_pc_10009e37

dec_label_pc_10009e37:                            ; preds = %dec_label_pc_10009e1d
  %sext4 = mul i32 %v4_10009e23, 65536
  %v4_10009e2f = sdiv i32 %sext4, 65536
  %v4_10009e37 = or i32 %v4_10009e2f, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009e40:                            ; preds = %dec_label_pc_10009e1d
  %v6_10009e46 = call i32 @StepSizeMode(i32 %arg1, i16 1, i32 0)
  %v7_10009e46 = trunc i32 %v6_10009e46 to i16
  %v2_10009e56 = icmp eq i16 %v7_10009e46, 0
  br i1 %v2_10009e56, label %dec_label_pc_10009e63, label %dec_label_pc_10009e5a

dec_label_pc_10009e5a:                            ; preds = %dec_label_pc_10009e40
  %sext6 = mul i32 %v6_10009e46, 65536
  %v4_10009e52 = sdiv i32 %sext6, 65536
  %v4_10009e5a = or i32 %v4_10009e52, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009e63:                            ; preds = %dec_label_pc_10009e40
  %v6_10009e69 = call i32 @SwpTimeMode(i32 %arg1, i16 1, i32 0)
  %v7_10009e69 = trunc i32 %v6_10009e69 to i16
  %v2_10009e79 = icmp eq i16 %v7_10009e69, 0
  br i1 %v2_10009e79, label %dec_label_pc_10009e86, label %dec_label_pc_10009e7d

dec_label_pc_10009e7d:                            ; preds = %dec_label_pc_10009e63
  %sext8 = mul i32 %v6_10009e69, 65536
  %v4_10009e75 = sdiv i32 %sext8, 65536
  %v4_10009e7d = or i32 %v4_10009e75, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009e86:                            ; preds = %dec_label_pc_10009e63
  %v9_10009e8a = icmp eq i16 %arg2, 5
  %v1_10009e8d = icmp eq i1 %v9_10009e8a, false
  br i1 %v1_10009e8d, label %dec_label_pc_10009eb4, label %dec_label_pc_10009e8f

dec_label_pc_10009e8f:                            ; preds = %dec_label_pc_10009e86
  %v4_10009e95 = call i32 @SetRBWmode(i32 %arg1, i16 1)
  %v5_10009e95 = trunc i32 %v4_10009e95 to i16
  %v2_10009ea5 = icmp eq i16 %v5_10009e95, 0
  br i1 %v2_10009ea5, label %dec_label_pc_10009f0f, label %dec_label_pc_10009ea9

dec_label_pc_10009ea9:                            ; preds = %dec_label_pc_10009e8f
  %sext10 = mul i32 %v4_10009e95, 65536
  %v4_10009ea1 = sdiv i32 %sext10, 65536
  %v4_10009ea9 = or i32 %v4_10009ea1, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009eb4:                            ; preds = %dec_label_pc_10009e86
  %v4_10009eba = call i32 @SetRBWmode(i32 %arg1, i16 0)
  %v5_10009eba = trunc i32 %v4_10009eba to i16
  %v2_10009eca = icmp eq i16 %v5_10009eba, 0
  br i1 %v2_10009eca, label %dec_label_pc_10009ed7, label %dec_label_pc_10009ece

dec_label_pc_10009ece:                            ; preds = %dec_label_pc_10009eb4
  %sext35 = mul i32 %v4_10009eba, 65536
  %v4_10009ec6 = sdiv i32 %sext35, 65536
  %v4_10009ece = or i32 %v4_10009ec6, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009ed7:                            ; preds = %dec_label_pc_10009eb4
  %v4_10009ee0 = call i32 @SetRBW(i32 %arg1, i16 %arg2)
  %v5_10009ee0 = trunc i32 %v4_10009ee0 to i16
  %sext38 = mul i32 %v4_10009ee0, 65536
  %v4_10009eec = sdiv i32 %sext38, 65536
  %v2_10009ef0 = icmp eq i16 %v5_10009ee0, 0
  br i1 %v2_10009ef0, label %dec_label_pc_10009f0f, label %dec_label_pc_10009ef4

dec_label_pc_10009ef4:                            ; preds = %dec_label_pc_10009ed7
  %tmp62 = icmp eq i32 %sext38, -196608
  %v1_10009efb = icmp eq i1 %tmp62, false
  br i1 %v1_10009efb, label %dec_label_pc_10009f06, label %dec_label_pc_10009efd

dec_label_pc_10009efd:                            ; preds = %dec_label_pc_10009ef4
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009f06:                            ; preds = %dec_label_pc_10009ef4
  %v2_10009f06 = or i32 %v4_10009eec, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009f0f:                            ; preds = %dec_label_pc_10009e8f, %dec_label_pc_10009ed7
  %sext12 = mul i32 %arg3, 65536
  %tmp63 = icmp eq i32 %sext12, 524288
  %v1_10009f16 = icmp eq i1 %tmp63, false
  br i1 %v1_10009f16, label %dec_label_pc_10009f3d, label %dec_label_pc_10009f18

dec_label_pc_10009f18:                            ; preds = %dec_label_pc_10009f0f
  %v4_10009f1e = call i32 @SetVBWmode(i32 %arg1, i16 1)
  %v5_10009f1e = trunc i32 %v4_10009f1e to i16
  %v2_10009f2e = icmp eq i16 %v5_10009f1e, 0
  br i1 %v2_10009f2e, label %dec_label_pc_10009f98, label %dec_label_pc_10009f32

dec_label_pc_10009f32:                            ; preds = %dec_label_pc_10009f18
  %sext13 = mul i32 %v4_10009f1e, 65536
  %v4_10009f2a = sdiv i32 %sext13, 65536
  %v4_10009f32 = or i32 %v4_10009f2a, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009f3d:                            ; preds = %dec_label_pc_10009f0f
  %v4_10009f43 = call i32 @SetVBWmode(i32 %arg1, i16 0)
  %v5_10009f43 = trunc i32 %v4_10009f43 to i16
  %v2_10009f53 = icmp eq i16 %v5_10009f43, 0
  br i1 %v2_10009f53, label %dec_label_pc_10009f60, label %dec_label_pc_10009f57

dec_label_pc_10009f57:                            ; preds = %dec_label_pc_10009f3d
  %sext31 = mul i32 %v4_10009f43, 65536
  %v4_10009f4f = sdiv i32 %sext31, 65536
  %v4_10009f57 = or i32 %v4_10009f4f, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009f60:                            ; preds = %dec_label_pc_10009f3d
  store i32 %arg1, i32* @ecx, align 4
  %v4_10009f69 = call i32 @SetVBW(i32 %arg1, i16 %tmp44)
  %v5_10009f69 = trunc i32 %v4_10009f69 to i16
  %sext34 = mul i32 %v4_10009f69, 65536
  %v4_10009f75 = sdiv i32 %sext34, 65536
  %v2_10009f79 = icmp eq i16 %v5_10009f69, 0
  br i1 %v2_10009f79, label %dec_label_pc_10009f98, label %dec_label_pc_10009f7d

dec_label_pc_10009f7d:                            ; preds = %dec_label_pc_10009f60
  %tmp64 = icmp eq i32 %sext34, -196608
  %v1_10009f84 = icmp eq i1 %tmp64, false
  br i1 %v1_10009f84, label %dec_label_pc_10009f8f, label %dec_label_pc_10009f86

dec_label_pc_10009f86:                            ; preds = %dec_label_pc_10009f7d
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009f8f:                            ; preds = %dec_label_pc_10009f7d
  %v2_10009f8f = or i32 %v4_10009f75, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009f98:                            ; preds = %dec_label_pc_10009f18, %dec_label_pc_10009f60
  %sext40 = mul i32 %arg5, 65536
  %v3_10009fa4 = sdiv i32 %sext40, 65536
  %v4_10009fa4 = call i32 @ConfigStartFreq(i32 %arg1, i32 %arg4, i32 %v3_10009fa4)
  %sext41 = mul i32 %arg7, 65536
  %v3_10009fb8 = sdiv i32 %sext41, 65536
  %v4_10009fb8 = call i32 @ConfigStopFreq(i32 %arg1, i32 %arg6, i32 %v3_10009fb8)
  %v5_10009fb8 = trunc i32 %v4_10009fb8 to i16
  %v2_10009fc8 = icmp eq i16 %v5_10009fb8, 0
  br i1 %v2_10009fc8, label %dec_label_pc_10009fd5, label %dec_label_pc_10009fcc

dec_label_pc_10009fcc:                            ; preds = %dec_label_pc_10009f98
  %sext15 = mul i32 %v4_10009fb8, 65536
  %v4_10009fc4 = sdiv i32 %sext15, 65536
  %v4_10009fcc = or i32 %v4_10009fc4, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009fd5:                            ; preds = %dec_label_pc_10009f98
  %v4_10009fde = call i32 @SetRefLevel(i32 %arg1, i16 %tmp)
  %v5_10009fde = trunc i32 %v4_10009fde to i16
  %v3_10009fee = icmp slt i16 %v5_10009fde, 0
  %v2_10009ff0 = icmp eq i1 %v3_10009fee, false
  br i1 %v2_10009ff0, label %dec_label_pc_10009ffb, label %dec_label_pc_10009ff2

dec_label_pc_10009ff2:                            ; preds = %dec_label_pc_10009fd5
  %sext17 = mul i32 %v4_10009fde, 65536
  %v4_10009fea = sdiv i32 %sext17, 65536
  %v4_10009ff2 = or i32 %v4_10009fea, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_10009ffb:                            ; preds = %dec_label_pc_10009fd5
  %sext19 = mul i32 %arg9, 65536
  %v2_1000a003 = sdiv i32 %sext19, 65536
  %v3_1000a003 = call i32 @SetNumCells(i32 %arg1, i32 %v2_1000a003)
  %v4_1000a003 = trunc i32 %v3_1000a003 to i16
  %v2_1000a013 = icmp eq i16 %v4_1000a003, 0
  br i1 %v2_1000a013, label %dec_label_pc_1000a020, label %dec_label_pc_1000a017

dec_label_pc_1000a017:                            ; preds = %dec_label_pc_10009ffb
  %sext20 = mul i32 %v3_1000a003, 65536
  %v4_1000a00f = sdiv i32 %sext20, 65536
  %v4_1000a017 = or i32 %v4_1000a00f, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_1000a020:                            ; preds = %dec_label_pc_10009ffb
  %v3_1000a026 = call i32 @SetSwpIdx(i32 %arg1, i32 0)
  %v4_1000a026 = trunc i32 %v3_1000a026 to i16
  %v2_1000a036 = icmp eq i16 %v4_1000a026, 0
  br i1 %v2_1000a036, label %dec_label_pc_1000a043, label %dec_label_pc_1000a03a

dec_label_pc_1000a03a:                            ; preds = %dec_label_pc_1000a020
  %sext22 = mul i32 %v3_1000a026, 65536
  %v4_1000a032 = sdiv i32 %sext22, 65536
  %v4_1000a03a = or i32 %v4_1000a032, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_1000a043:                            ; preds = %dec_label_pc_1000a020
  %v5_1000a04f = call i32 @SetDefltPts(i32 %arg1, i32 501, i32 0)
  %v6_1000a04f = trunc i32 %v5_1000a04f to i16
  %v2_1000a05f = icmp eq i16 %v6_1000a04f, 0
  br i1 %v2_1000a05f, label %dec_label_pc_1000a069, label %dec_label_pc_1000a063

dec_label_pc_1000a063:                            ; preds = %dec_label_pc_1000a043
  %sext24 = mul i32 %v5_1000a04f, 65536
  %v4_1000a05b = sdiv i32 %sext24, 65536
  %v4_1000a063 = or i32 %v4_1000a05b, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_1000a069:                            ; preds = %dec_label_pc_1000a043
  %sext = mul i32 %arg1, 65536
  %v1_1000a06d = sdiv i32 %sext, 65536
  %v4_1000a06d = call i32 @SetDetectLog(i32 %v1_1000a06d, i32 0)
  %v5_1000a06d = trunc i32 %v4_1000a06d to i16
  %v2_1000a07d = icmp eq i16 %v5_1000a06d, 0
  br i1 %v2_1000a07d, label %dec_label_pc_1000a087, label %dec_label_pc_1000a081

dec_label_pc_1000a081:                            ; preds = %dec_label_pc_1000a069
  %sext26 = mul i32 %v4_1000a06d, 65536
  %v4_1000a079 = sdiv i32 %sext26, 65536
  %v4_1000a081 = or i32 %v4_1000a079, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_1000a087:                            ; preds = %dec_label_pc_1000a069
  %v4_1000a08d = call i32 @SetSweepCode(i32 %arg1, i16 5)
  %v5_1000a08d = trunc i32 %v4_1000a08d to i16
  %v2_1000a09d = icmp eq i16 %v5_1000a08d, 0
  br i1 %v2_1000a09d, label %dec_label_pc_1000a0a7, label %dec_label_pc_1000a0a1

dec_label_pc_1000a0a1:                            ; preds = %dec_label_pc_1000a087
  %sext28 = mul i32 %v4_1000a08d, 65536
  %v4_1000a099 = sdiv i32 %sext28, 65536
  %v4_1000a0a1 = or i32 %v4_1000a099, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_1000a0a7:                            ; preds = %dec_label_pc_1000a087
  %v7_1000a0af = call i32 @SetTrigMode(i32 %arg1, i16 0, i32 1, i32 0)
  %v8_1000a0af = trunc i32 %v7_1000a0af to i16
  %sext30 = mul i32 %v7_1000a0af, 65536
  %v4_1000a0bb = sdiv i32 %sext30, 65536
  %v1_1000a0bf = icmp eq i16 %v8_1000a0af, 0
  br i1 %v1_1000a0bf, label %dec_label_pc_1000a0c9, label %dec_label_pc_1000a0c3

dec_label_pc_1000a0c3:                            ; preds = %dec_label_pc_1000a0a7
  %v2_1000a0c3 = or i32 %v4_1000a0bb, 65535
  br label %dec_label_pc_1000a0cc

dec_label_pc_1000a0c9:                            ; preds = %dec_label_pc_1000a0a7
  %v12_1000a0c9 = and i32 %v4_1000a0bb, -65536
  br label %dec_label_pc_1000a0cc

dec_label_pc_1000a0cc:                            ; preds = %dec_label_pc_1000a0c3, %dec_label_pc_1000a0a1, %dec_label_pc_1000a081, %dec_label_pc_1000a063, %dec_label_pc_1000a03a, %dec_label_pc_1000a017, %dec_label_pc_10009ff2, %dec_label_pc_10009fcc, %dec_label_pc_10009f8f, %dec_label_pc_10009f86, %dec_label_pc_10009f57, %dec_label_pc_10009f32, %dec_label_pc_10009f06, %dec_label_pc_10009efd, %dec_label_pc_10009ece, %dec_label_pc_10009ea9, %dec_label_pc_10009e7d, %dec_label_pc_10009e5a, %dec_label_pc_10009e37, %dec_label_pc_10009e14, %dec_label_pc_10009df1, %dec_label_pc_10009dd9, %dec_label_pc_10009db5, %dec_label_pc_10009d91, %dec_label_pc_1000a0c9
  %v0_1000a0cf = phi i32 [ %v2_1000a0c3, %dec_label_pc_1000a0c3 ], [ %v4_1000a0a1, %dec_label_pc_1000a0a1 ], [ %v4_1000a081, %dec_label_pc_1000a081 ], [ %v4_1000a063, %dec_label_pc_1000a063 ], [ %v4_1000a03a, %dec_label_pc_1000a03a ], [ %v4_1000a017, %dec_label_pc_1000a017 ], [ %v4_10009ff2, %dec_label_pc_10009ff2 ], [ %v4_10009fcc, %dec_label_pc_10009fcc ], [ %v2_10009f8f, %dec_label_pc_10009f8f ], [ %v4_10009f75, %dec_label_pc_10009f86 ], [ %v4_10009f57, %dec_label_pc_10009f57 ], [ %v4_10009f32, %dec_label_pc_10009f32 ], [ %v2_10009f06, %dec_label_pc_10009f06 ], [ %v4_10009eec, %dec_label_pc_10009efd ], [ %v4_10009ece, %dec_label_pc_10009ece ], [ %v4_10009ea9, %dec_label_pc_10009ea9 ], [ %v4_10009e7d, %dec_label_pc_10009e7d ], [ %v4_10009e5a, %dec_label_pc_10009e5a ], [ %v4_10009e37, %dec_label_pc_10009e37 ], [ %v4_10009e14, %dec_label_pc_10009e14 ], [ %v2_10009df1, %dec_label_pc_10009df1 ], [ %v2_10009dd9, %dec_label_pc_10009dd9 ], [ %v2_10009db5, %dec_label_pc_10009db5 ], [ %v2_10009d91, %dec_label_pc_10009d91 ], [ %v12_1000a0c9, %dec_label_pc_1000a0c9 ]
  ret i32 %v0_1000a0cf

; uselistorder directives
  uselistorder i32 %v4_1000a0bb, { 1, 0 }
  uselistorder i32 %v4_10009f75, { 1, 0 }
  uselistorder i32 %v4_10009eec, { 1, 0 }
  uselistorder i32 %v4_10009dca, { 1, 2, 0 }
  uselistorder i32 %v1_10009dae, { 1, 0 }
  uselistorder i32 (i32, i16, i32, i32)* @SetTrigMode, { 0, 3, 1, 2 }
  uselistorder i32 (i32, i32, i32)* @SetDefltPts, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 22, 21, 0, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1000a0cc, { 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder label %dec_label_pc_10009f98, { 1, 0 }
  uselistorder label %dec_label_pc_10009f0f, { 1, 0 }
}

define i32 @InitFreqHop(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg3 to i16
  %v4_1000a0da = icmp eq i32 %arg1, 0
  %v1_1000a0de = icmp eq i1 %v4_1000a0da, false
  br i1 %v1_1000a0de, label %dec_label_pc_1000a0e9, label %dec_label_pc_1000a0e0

dec_label_pc_1000a0e0:                            ; preds = %entry
  %v0_1000a0e0 = load i32, i32* @eax, align 4
  %v1_1000a0e0 = and i32 %v0_1000a0e0, -65536
  %v2_1000a0e0 = or i32 %v1_1000a0e0, 65526
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a0e9:                            ; preds = %entry
  %v5_1000a0e9 = icmp slt i32 %arg5, 0
  %v2_1000a0ed = icmp eq i1 %v5_1000a0e9, false
  br i1 %v2_1000a0ed, label %dec_label_pc_1000a101, label %dec_label_pc_1000a0ef

dec_label_pc_1000a0ef:                            ; preds = %dec_label_pc_1000a0e9
  %v7_1000a0f6 = icmp sgt i32 %arg5, 1024
  br i1 %v7_1000a0f6, label %dec_label_pc_1000a0f8, label %dec_label_pc_1000a101

dec_label_pc_1000a0f8:                            ; preds = %dec_label_pc_1000a0ef
  %v0_1000a0f8 = load i32, i32* @eax, align 4
  %v1_1000a0f8 = and i32 %v0_1000a0f8, -65536
  %v2_1000a0f8 = or i32 %v1_1000a0f8, 65533
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a101:                            ; preds = %dec_label_pc_1000a0ef, %dec_label_pc_1000a0e9
  %v3_1000a107 = call i32 @SetAutoCell(i32 %arg1, i16 0)
  %v4_1000a107 = trunc i32 %v3_1000a107 to i16
  %v2_1000a117 = icmp eq i16 %v4_1000a107, 0
  br i1 %v2_1000a117, label %dec_label_pc_1000a124, label %dec_label_pc_1000a11b

dec_label_pc_1000a11b:                            ; preds = %dec_label_pc_1000a101
  %sext = mul i32 %v3_1000a107, 65536
  %v4_1000a113 = sdiv i32 %sext, 65536
  %v4_1000a11b = or i32 %v4_1000a113, 65535
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a124:                            ; preds = %dec_label_pc_1000a101
  %v3_1000a12a = call i32 @SetCellMode(i32 %arg1, i16 0)
  %v4_1000a12a = trunc i32 %v3_1000a12a to i16
  %v2_1000a13a = icmp eq i16 %v4_1000a12a, 0
  br i1 %v2_1000a13a, label %dec_label_pc_1000a147, label %dec_label_pc_1000a13e

dec_label_pc_1000a13e:                            ; preds = %dec_label_pc_1000a124
  %sext3 = mul i32 %v3_1000a12a, 65536
  %v4_1000a136 = sdiv i32 %sext3, 65536
  %v4_1000a13e = or i32 %v4_1000a136, 65535
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a147:                            ; preds = %dec_label_pc_1000a124
  %v5_1000a14d = call i32 @SwpTimeMode(i32 %arg1, i16 1, i32 0)
  %v6_1000a14d = trunc i32 %v5_1000a14d to i16
  %v2_1000a15d = icmp eq i16 %v6_1000a14d, 0
  br i1 %v2_1000a15d, label %dec_label_pc_1000a16a, label %dec_label_pc_1000a161

dec_label_pc_1000a161:                            ; preds = %dec_label_pc_1000a147
  %sext5 = mul i32 %v5_1000a14d, 65536
  %v4_1000a159 = sdiv i32 %sext5, 65536
  %v4_1000a161 = or i32 %v4_1000a159, 65535
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a16a:                            ; preds = %dec_label_pc_1000a147
  %v5_1000a170 = call i32 @StepSizeMode(i32 %arg1, i16 1, i32 0)
  %v6_1000a170 = trunc i32 %v5_1000a170 to i16
  %v2_1000a180 = icmp eq i16 %v6_1000a170, 0
  br i1 %v2_1000a180, label %dec_label_pc_1000a18d, label %dec_label_pc_1000a184

dec_label_pc_1000a184:                            ; preds = %dec_label_pc_1000a16a
  %sext7 = mul i32 %v5_1000a170, 65536
  %v4_1000a17c = sdiv i32 %sext7, 65536
  %v4_1000a184 = or i32 %v4_1000a17c, 65535
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a18d:                            ; preds = %dec_label_pc_1000a16a
  %v9_1000a191 = icmp eq i16 %arg2, 5
  %v1_1000a194 = icmp eq i1 %v9_1000a191, false
  br i1 %v1_1000a194, label %dec_label_pc_1000a1bb, label %dec_label_pc_1000a196

dec_label_pc_1000a196:                            ; preds = %dec_label_pc_1000a18d
  %v3_1000a19c = call i32 @SetRBWmode(i32 %arg1, i16 1)
  %v4_1000a19c = trunc i32 %v3_1000a19c to i16
  %v1_1000a1ac = icmp eq i16 %v4_1000a19c, 0
  br i1 %v1_1000a1ac, label %dec_label_pc_1000a216, label %dec_label_pc_1000a1b0

dec_label_pc_1000a1b0:                            ; preds = %dec_label_pc_1000a196
  %sext9 = mul i32 %v3_1000a19c, 65536
  %v4_1000a1a8 = sdiv i32 %sext9, 65536
  %v4_1000a1b0 = or i32 %v4_1000a1a8, 65535
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a1bb:                            ; preds = %dec_label_pc_1000a18d
  %v3_1000a1c1 = call i32 @SetRBWmode(i32 %arg1, i16 0)
  %v4_1000a1c1 = trunc i32 %v3_1000a1c1 to i16
  %v2_1000a1d1 = icmp eq i16 %v4_1000a1c1, 0
  br i1 %v2_1000a1d1, label %dec_label_pc_1000a1de, label %dec_label_pc_1000a1d5

dec_label_pc_1000a1d5:                            ; preds = %dec_label_pc_1000a1bb
  %sext25 = mul i32 %v3_1000a1c1, 65536
  %v4_1000a1cd = sdiv i32 %sext25, 65536
  %v4_1000a1d5 = or i32 %v4_1000a1cd, 65535
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a1de:                            ; preds = %dec_label_pc_1000a1bb
  %v3_1000a1e7 = call i32 @SetRBW(i32 %arg1, i16 %arg2)
  %v4_1000a1e7 = trunc i32 %v3_1000a1e7 to i16
  %sext28 = mul i32 %v3_1000a1e7, 65536
  %v4_1000a1f3 = sdiv i32 %sext28, 65536
  %v2_1000a1f7 = icmp eq i16 %v4_1000a1e7, 0
  br i1 %v2_1000a1f7, label %dec_label_pc_1000a216, label %dec_label_pc_1000a1fb

dec_label_pc_1000a1fb:                            ; preds = %dec_label_pc_1000a1de
  %tmp45 = icmp eq i32 %sext28, -196608
  %v1_1000a202 = icmp eq i1 %tmp45, false
  br i1 %v1_1000a202, label %dec_label_pc_1000a20d, label %dec_label_pc_1000a204

dec_label_pc_1000a204:                            ; preds = %dec_label_pc_1000a1fb
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a20d:                            ; preds = %dec_label_pc_1000a1fb
  %v4_1000a20d = or i32 %v4_1000a1f3, 65535
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a216:                            ; preds = %dec_label_pc_1000a196, %dec_label_pc_1000a1de
  %sext11 = mul i32 %arg3, 65536
  %v4_1000a216 = sdiv i32 %sext11, 65536
  store i32 %v4_1000a216, i32* @edx, align 4
  %tmp46 = icmp eq i32 %sext11, 524288
  %v1_1000a21d = icmp eq i1 %tmp46, false
  br i1 %v1_1000a21d, label %dec_label_pc_1000a244, label %dec_label_pc_1000a21f

dec_label_pc_1000a21f:                            ; preds = %dec_label_pc_1000a216
  %v3_1000a225 = call i32 @SetVBWmode(i32 %arg1, i16 1)
  %v4_1000a225 = trunc i32 %v3_1000a225 to i16
  %v2_1000a235 = icmp eq i16 %v4_1000a225, 0
  br i1 %v2_1000a235, label %dec_label_pc_1000a2b6, label %dec_label_pc_1000a239

dec_label_pc_1000a239:                            ; preds = %dec_label_pc_1000a21f
  %sext12 = mul i32 %v3_1000a225, 65536
  %v4_1000a231 = sdiv i32 %sext12, 65536
  %v4_1000a239 = or i32 %v4_1000a231, 65535
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a244:                            ; preds = %dec_label_pc_1000a216
  %v3_1000a24a = call i32 @SetVBWmode(i32 %arg1, i16 0)
  %v4_1000a24a = trunc i32 %v3_1000a24a to i16
  %v2_1000a25a = icmp eq i16 %v4_1000a24a, 0
  br i1 %v2_1000a25a, label %dec_label_pc_1000a267, label %dec_label_pc_1000a25e

dec_label_pc_1000a25e:                            ; preds = %dec_label_pc_1000a244
  %sext19 = mul i32 %v3_1000a24a, 65536
  %v4_1000a256 = sdiv i32 %sext19, 65536
  %v4_1000a25e = or i32 %v4_1000a256, 65535
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a267:                            ; preds = %dec_label_pc_1000a244
  %v4_1000a267 = and i32 %arg3, 65535
  %v5_1000a267 = load i32, i32* @ecx, align 4
  %v6_1000a267 = and i32 %v5_1000a267, -65536
  %v7_1000a267 = or i32 %v6_1000a267, %v4_1000a267
  store i32 %v7_1000a267, i32* @ecx, align 4
  store i32 %arg1, i32* @edx, align 4
  %v3_1000a270 = call i32 @SetVBW(i32 %arg1, i16 %tmp)
  %v4_1000a270 = trunc i32 %v3_1000a270 to i16
  %v2_1000a280 = icmp eq i16 %v4_1000a270, 0
  br i1 %v2_1000a280, label %dec_label_pc_1000a2b6, label %dec_label_pc_1000a284

dec_label_pc_1000a284:                            ; preds = %dec_label_pc_1000a267
  store i32 %arg1, i32* @edx, align 4
  %v3_1000a28d = call i32 @SetRBW(i32 %arg1, i16 %arg2)
  %v4_1000a28d = trunc i32 %v3_1000a28d to i16
  %sext22 = mul i32 %v3_1000a28d, 65536
  %v4_1000a299 = sdiv i32 %sext22, 65536
  %v2_1000a29d = icmp eq i16 %v4_1000a28d, 0
  br i1 %v2_1000a29d, label %dec_label_pc_1000a2b6, label %dec_label_pc_1000a2a1

dec_label_pc_1000a2a1:                            ; preds = %dec_label_pc_1000a284
  %tmp47 = icmp eq i32 %sext22, -196608
  %v1_1000a2a8 = icmp eq i1 %tmp47, false
  br i1 %v1_1000a2a8, label %dec_label_pc_1000a2b0, label %dec_label_pc_1000a2aa

dec_label_pc_1000a2aa:                            ; preds = %dec_label_pc_1000a2a1
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a2b0:                            ; preds = %dec_label_pc_1000a2a1
  %v4_1000a2b0 = or i32 %v4_1000a299, 65535
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a2b6:                            ; preds = %dec_label_pc_1000a21f, %dec_label_pc_1000a284, %dec_label_pc_1000a267
  %v2_1000a2bf = trunc i32 %arg4 to i16
  %v3_1000a2bf = call i32 @SetRefLevel(i32 %arg1, i16 %v2_1000a2bf)
  %v4_1000a2bf = trunc i32 %v3_1000a2bf to i16
  %sext14 = mul i32 %v3_1000a2bf, 65536
  %v4_1000a2cb = sdiv i32 %sext14, 65536
  %v3_1000a2cf = icmp slt i16 %v4_1000a2bf, 0
  %v2_1000a2d1 = icmp eq i1 %v3_1000a2cf, false
  br i1 %v2_1000a2d1, label %dec_label_pc_1000a2d9, label %dec_label_pc_1000a2d3

dec_label_pc_1000a2d3:                            ; preds = %dec_label_pc_1000a2b6
  %v4_1000a2d3 = or i32 %v4_1000a2cb, 65535
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a2d9:                            ; preds = %dec_label_pc_1000a2b6
  %v4_1000a2e1 = call i32 @SetHopTabCnt(i32 %arg1, i32 %arg5, i32 %v4_1000a2cb)
  %v5_1000a2e1 = trunc i32 %v4_1000a2e1 to i16
  %v2_1000a2f1 = icmp eq i16 %v5_1000a2e1, 0
  br i1 %v2_1000a2f1, label %dec_label_pc_1000a2fb, label %dec_label_pc_1000a2f5

dec_label_pc_1000a2f5:                            ; preds = %dec_label_pc_1000a2d9
  %sext16 = mul i32 %v4_1000a2e1, 65536
  %v4_1000a2ed = sdiv i32 %sext16, 65536
  %v4_1000a2f5 = or i32 %v4_1000a2ed, 65535
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a2fb:                            ; preds = %dec_label_pc_1000a2d9
  %v3_1000a2ff = call i32 @SetDetectLog(i32 %arg1, i32 0)
  %v4_1000a2ff = trunc i32 %v3_1000a2ff to i16
  %sext18 = mul i32 %v3_1000a2ff, 65536
  %v4_1000a30b = sdiv i32 %sext18, 65536
  %v1_1000a30f = icmp eq i16 %v4_1000a2ff, 0
  br i1 %v1_1000a30f, label %dec_label_pc_1000a319, label %dec_label_pc_1000a313

dec_label_pc_1000a313:                            ; preds = %dec_label_pc_1000a2fb
  %v2_1000a313 = or i32 %v4_1000a30b, 65535
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a319:                            ; preds = %dec_label_pc_1000a2fb
  %v12_1000a319 = and i32 %v4_1000a30b, -65536
  br label %dec_label_pc_1000a31c

dec_label_pc_1000a31c:                            ; preds = %dec_label_pc_1000a313, %dec_label_pc_1000a2f5, %dec_label_pc_1000a2d3, %dec_label_pc_1000a2b0, %dec_label_pc_1000a2aa, %dec_label_pc_1000a25e, %dec_label_pc_1000a239, %dec_label_pc_1000a20d, %dec_label_pc_1000a204, %dec_label_pc_1000a1d5, %dec_label_pc_1000a1b0, %dec_label_pc_1000a184, %dec_label_pc_1000a161, %dec_label_pc_1000a13e, %dec_label_pc_1000a11b, %dec_label_pc_1000a0f8, %dec_label_pc_1000a0e0, %dec_label_pc_1000a319
  %v0_1000a31f = phi i32 [ %v2_1000a313, %dec_label_pc_1000a313 ], [ %v4_1000a2f5, %dec_label_pc_1000a2f5 ], [ %v4_1000a2d3, %dec_label_pc_1000a2d3 ], [ %v4_1000a2b0, %dec_label_pc_1000a2b0 ], [ %v4_1000a299, %dec_label_pc_1000a2aa ], [ %v4_1000a25e, %dec_label_pc_1000a25e ], [ %v4_1000a239, %dec_label_pc_1000a239 ], [ %v4_1000a20d, %dec_label_pc_1000a20d ], [ %v4_1000a1f3, %dec_label_pc_1000a204 ], [ %v4_1000a1d5, %dec_label_pc_1000a1d5 ], [ %v4_1000a1b0, %dec_label_pc_1000a1b0 ], [ %v4_1000a184, %dec_label_pc_1000a184 ], [ %v4_1000a161, %dec_label_pc_1000a161 ], [ %v4_1000a13e, %dec_label_pc_1000a13e ], [ %v4_1000a11b, %dec_label_pc_1000a11b ], [ %v2_1000a0f8, %dec_label_pc_1000a0f8 ], [ %v2_1000a0e0, %dec_label_pc_1000a0e0 ], [ %v12_1000a319, %dec_label_pc_1000a319 ]
  ret i32 %v0_1000a31f

; uselistorder directives
  uselistorder i32 %v4_1000a2cb, { 1, 0 }
  uselistorder i32 %v4_1000a299, { 1, 0 }
  uselistorder i32 %v4_1000a1f3, { 1, 0 }
  uselistorder i32 (i32, i32)* @SetDetectLog, { 4, 3, 0, 2, 1 }
  uselistorder i32 (i32, i16, i32)* @StepSizeMode, { 0, 3, 4, 1, 2 }
  uselistorder i32 (i32, i16, i32)* @SwpTimeMode, { 0, 3, 4, 1, 2 }
  uselistorder i32 (i32, i16)* @SetCellMode, { 0, 4, 5, 1, 2, 3 }
  uselistorder i32 (i32, i16)* @SetAutoCell, { 0, 3, 4, 1, 2 }
  uselistorder i32 65526, { 0, 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 11 }
  uselistorder i32 %arg3, { 1, 0, 2 }
  uselistorder i16 %arg2, { 2, 1, 0 }
  uselistorder i32 %arg1, { 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000a31c, { 17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder label %dec_label_pc_1000a2b6, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1000a216, { 1, 0 }
}

define i32 @MeasureAmplWithFreq(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg11 to i16
  %tmp63 = trunc i32 %arg3 to i16
  %v4_1000a332 = icmp eq i32 %arg13, 0
  br i1 %v4_1000a332, label %dec_label_pc_1000a33e, label %dec_label_pc_1000a338

dec_label_pc_1000a338:                            ; preds = %entry
  %v4_1000a338 = icmp eq i32 %arg12, 0
  %v1_1000a33c = icmp eq i1 %v4_1000a338, false
  br i1 %v1_1000a33c, label %dec_label_pc_1000a347, label %dec_label_pc_1000a33e

dec_label_pc_1000a33e:                            ; preds = %dec_label_pc_1000a338, %entry
  %v0_1000a33e = load i32, i32* @eax, align 4
  %v1_1000a33e = and i32 %v0_1000a33e, -65536
  %v2_1000a33e = or i32 %v1_1000a33e, 65533
  br label %dec_label_pc_1000a743

dec_label_pc_1000a347:                            ; preds = %dec_label_pc_1000a338
  %v0_1000a34f = load i32, i32* @eax, align 4
  %v3_1000a34f = and i32 %v0_1000a34f, 16640
  %v4_1000a34f = icmp eq i32 %v3_1000a34f, 0
  %v1_1000a352 = icmp eq i1 %v4_1000a34f, false
  br i1 %v1_1000a352, label %dec_label_pc_1000a35d, label %dec_label_pc_1000a354

dec_label_pc_1000a354:                            ; preds = %dec_label_pc_1000a347
  %v1_1000a354 = and i32 %v0_1000a34f, -65536
  %v2_1000a354 = or i32 %v1_1000a354, 65531
  br label %dec_label_pc_1000a743

dec_label_pc_1000a35d:                            ; preds = %dec_label_pc_1000a347
  %v2_1000a369 = sext i32 %arg4 to i64
  %v3_1000a369 = bitcast i64 %v2_1000a369 to double
  %v4_1000a369 = call i32 @FreqInRange(i32 %arg1, double %v3_1000a369)
  %v1_1000a371 = mul i32 %v4_1000a369, 65536
  %v1_1000a371.off = or i32 %v1_1000a371, 65535
  %tmp94 = icmp ult i32 %v1_1000a371.off, 131071
  %v1_1000a376 = icmp eq i1 %tmp94, false
  br i1 %v1_1000a376, label %dec_label_pc_1000a381, label %dec_label_pc_1000a378

dec_label_pc_1000a378:                            ; preds = %dec_label_pc_1000a35d
  %v2_1000a371 = sdiv i32 %v1_1000a371, 65536
  %v1_1000a378 = and i32 %v2_1000a371, -65536
  %v2_1000a378 = or i32 %v1_1000a378, 65533
  br label %dec_label_pc_1000a743

dec_label_pc_1000a381:                            ; preds = %dec_label_pc_1000a35d
  %v2_1000a38d = sext i32 %arg6 to i64
  %v3_1000a38d = bitcast i64 %v2_1000a38d to double
  %v4_1000a38d = call i32 @FreqInRange(i32 %arg1, double %v3_1000a38d)
  %v1_1000a395 = mul i32 %v4_1000a38d, 65536
  %v1_1000a395.off = or i32 %v1_1000a395, 65535
  %tmp95 = icmp ult i32 %v1_1000a395.off, 131071
  %v1_1000a39a = icmp eq i1 %tmp95, false
  br i1 %v1_1000a39a, label %dec_label_pc_1000a3a5, label %dec_label_pc_1000a39c

dec_label_pc_1000a39c:                            ; preds = %dec_label_pc_1000a381
  %v1_1000a39c = and i32 %v4_1000a38d, -65536
  %v2_1000a39c = or i32 %v1_1000a39c, 65533
  br label %dec_label_pc_1000a743

dec_label_pc_1000a3a5:                            ; preds = %dec_label_pc_1000a381
  %sext = mul i32 %arg10, 65536
  %v4_1000a3a5 = sdiv i32 %sext, 65536
  %tmp96 = icmp eq i32 %sext, 131072
  br i1 %tmp96, label %dec_label_pc_1000a3c0, label %dec_label_pc_1000a3ae

dec_label_pc_1000a3ae:                            ; preds = %dec_label_pc_1000a3a5
  %tmp97 = icmp eq i32 %sext, 262144
  br i1 %tmp97, label %dec_label_pc_1000a3c0, label %dec_label_pc_1000a3b7

dec_label_pc_1000a3b7:                            ; preds = %dec_label_pc_1000a3ae
  %v1_1000a3b7 = and i32 %v4_1000a3a5, -65536
  %v2_1000a3b7 = or i32 %v1_1000a3b7, 65533
  br label %dec_label_pc_1000a743

dec_label_pc_1000a3c0:                            ; preds = %dec_label_pc_1000a3ae, %dec_label_pc_1000a3a5
  %sext7 = mul i32 %arg11, 65536
  %v4_1000a3c0 = sdiv i32 %sext7, 65536
  %v2_1000a3c4 = icmp eq i16 %tmp, 0
  br i1 %v2_1000a3c4, label %dec_label_pc_1000a3e3, label %dec_label_pc_1000a3c8

dec_label_pc_1000a3c8:                            ; preds = %dec_label_pc_1000a3c0
  %tmp98 = icmp eq i32 %sext7, 65536
  br i1 %tmp98, label %dec_label_pc_1000a3e3, label %dec_label_pc_1000a3d1

dec_label_pc_1000a3d1:                            ; preds = %dec_label_pc_1000a3c8
  %tmp99 = icmp eq i32 %sext7, 131072
  br i1 %tmp99, label %dec_label_pc_1000a3e3, label %dec_label_pc_1000a3da

dec_label_pc_1000a3da:                            ; preds = %dec_label_pc_1000a3d1
  %v1_1000a3da = and i32 %v4_1000a3c0, -65536
  %v2_1000a3da = or i32 %v1_1000a3da, 65533
  br label %dec_label_pc_1000a743

dec_label_pc_1000a3e3:                            ; preds = %dec_label_pc_1000a3d1, %dec_label_pc_1000a3c8, %dec_label_pc_1000a3c0
  %v1_1000a3e7 = or i32 %v4_1000a3a5, 9
  %v2_1000a3ef = trunc i32 %v1_1000a3e7 to i16
  %v3_1000a3ef = call i32 @SetSweepCode(i32 %arg1, i16 %v2_1000a3ef)
  %v4_1000a3ef = trunc i32 %v3_1000a3ef to i16
  %v2_1000a3ff = icmp eq i16 %v4_1000a3ef, 0
  br i1 %v2_1000a3ff, label %dec_label_pc_1000a40c, label %dec_label_pc_1000a403

dec_label_pc_1000a403:                            ; preds = %dec_label_pc_1000a3e3
  %sext11 = mul i32 %v3_1000a3ef, 65536
  %v4_1000a3fb = sdiv i32 %sext11, 65536
  %v4_1000a403 = or i32 %v4_1000a3fb, 65535
  br label %dec_label_pc_1000a743

dec_label_pc_1000a40c:                            ; preds = %dec_label_pc_1000a3e3
  %v9_1000a410 = icmp eq i16 %arg2, 5
  %v1_1000a413 = icmp eq i1 %v9_1000a410, false
  br i1 %v1_1000a413, label %dec_label_pc_1000a43a, label %dec_label_pc_1000a415

dec_label_pc_1000a415:                            ; preds = %dec_label_pc_1000a40c
  %v3_1000a41b = call i32 @SetRBWmode(i32 %arg1, i16 1)
  %v4_1000a41b = trunc i32 %v3_1000a41b to i16
  %v2_1000a42b = icmp eq i16 %v4_1000a41b, 0
  br i1 %v2_1000a42b, label %dec_label_pc_1000a495, label %dec_label_pc_1000a42f

dec_label_pc_1000a42f:                            ; preds = %dec_label_pc_1000a415
  %sext13 = mul i32 %v3_1000a41b, 65536
  %v4_1000a427 = sdiv i32 %sext13, 65536
  %v4_1000a42f = or i32 %v4_1000a427, 65535
  br label %dec_label_pc_1000a743

dec_label_pc_1000a43a:                            ; preds = %dec_label_pc_1000a40c
  %v3_1000a440 = call i32 @SetRBWmode(i32 %arg1, i16 0)
  %v4_1000a440 = trunc i32 %v3_1000a440 to i16
  %v2_1000a450 = icmp eq i16 %v4_1000a440, 0
  br i1 %v2_1000a450, label %dec_label_pc_1000a45d, label %dec_label_pc_1000a454

dec_label_pc_1000a454:                            ; preds = %dec_label_pc_1000a43a
  %sext36 = mul i32 %v3_1000a440, 65536
  %v4_1000a44c = sdiv i32 %sext36, 65536
  %v4_1000a454 = or i32 %v4_1000a44c, 65535
  br label %dec_label_pc_1000a743

dec_label_pc_1000a45d:                            ; preds = %dec_label_pc_1000a43a
  %v3_1000a466 = call i32 @SetRBW(i32 %arg1, i16 %arg2)
  %v4_1000a466 = trunc i32 %v3_1000a466 to i16
  %sext39 = mul i32 %v3_1000a466, 65536
  %v4_1000a472 = sdiv i32 %sext39, 65536
  %v2_1000a476 = icmp eq i16 %v4_1000a466, 0
  br i1 %v2_1000a476, label %dec_label_pc_1000a495, label %dec_label_pc_1000a47a

dec_label_pc_1000a47a:                            ; preds = %dec_label_pc_1000a45d
  %tmp100 = icmp eq i32 %sext39, -196608
  %v1_1000a481 = icmp eq i1 %tmp100, false
  br i1 %v1_1000a481, label %dec_label_pc_1000a48c, label %dec_label_pc_1000a483

dec_label_pc_1000a483:                            ; preds = %dec_label_pc_1000a47a
  %v4_1000a483 = and i32 %v3_1000a466, 65535
  %v6_1000a483 = and i32 %v4_1000a472, -65536
  %v7_1000a483 = or i32 %v6_1000a483, %v4_1000a483
  br label %dec_label_pc_1000a743

dec_label_pc_1000a48c:                            ; preds = %dec_label_pc_1000a47a
  %v2_1000a48c = or i32 %v4_1000a472, 65535
  br label %dec_label_pc_1000a743

dec_label_pc_1000a495:                            ; preds = %dec_label_pc_1000a415, %dec_label_pc_1000a45d
  %sext15 = mul i32 %arg3, 65536
  %tmp101 = icmp eq i32 %sext15, 524288
  %v1_1000a49c = icmp eq i1 %tmp101, false
  br i1 %v1_1000a49c, label %dec_label_pc_1000a4c3, label %dec_label_pc_1000a49e

dec_label_pc_1000a49e:                            ; preds = %dec_label_pc_1000a495
  %v3_1000a4a4 = call i32 @SetVBWmode(i32 %arg1, i16 1)
  %v4_1000a4a4 = trunc i32 %v3_1000a4a4 to i16
  %v2_1000a4b4 = icmp eq i16 %v4_1000a4a4, 0
  br i1 %v2_1000a4b4, label %dec_label_pc_1000a51e, label %dec_label_pc_1000a4b8

dec_label_pc_1000a4b8:                            ; preds = %dec_label_pc_1000a49e
  %sext16 = mul i32 %v3_1000a4a4, 65536
  %v4_1000a4b0 = sdiv i32 %sext16, 65536
  %v4_1000a4b8 = or i32 %v4_1000a4b0, 65535
  br label %dec_label_pc_1000a743

dec_label_pc_1000a4c3:                            ; preds = %dec_label_pc_1000a495
  %v3_1000a4c9 = call i32 @SetVBWmode(i32 %arg1, i16 0)
  %v4_1000a4c9 = trunc i32 %v3_1000a4c9 to i16
  %v2_1000a4d9 = icmp eq i16 %v4_1000a4c9, 0
  br i1 %v2_1000a4d9, label %dec_label_pc_1000a4e6, label %dec_label_pc_1000a4dd

dec_label_pc_1000a4dd:                            ; preds = %dec_label_pc_1000a4c3
  %sext31 = mul i32 %v3_1000a4c9, 65536
  %v4_1000a4d5 = sdiv i32 %sext31, 65536
  %v4_1000a4dd = or i32 %v4_1000a4d5, 65535
  br label %dec_label_pc_1000a743

dec_label_pc_1000a4e6:                            ; preds = %dec_label_pc_1000a4c3
  store i32 %arg1, i32* @ecx, align 4
  %v3_1000a4ef = call i32 @SetVBW(i32 %arg1, i16 %tmp63)
  %v4_1000a4ef = trunc i32 %v3_1000a4ef to i16
  %sext34 = mul i32 %v3_1000a4ef, 65536
  %v4_1000a4fb = sdiv i32 %sext34, 65536
  %v2_1000a4ff = icmp eq i16 %v4_1000a4ef, 0
  br i1 %v2_1000a4ff, label %dec_label_pc_1000a51e, label %dec_label_pc_1000a503

dec_label_pc_1000a503:                            ; preds = %dec_label_pc_1000a4e6
  %tmp102 = icmp eq i32 %sext34, -196608
  %v1_1000a50a = icmp eq i1 %tmp102, false
  br i1 %v1_1000a50a, label %dec_label_pc_1000a515, label %dec_label_pc_1000a50c

dec_label_pc_1000a50c:                            ; preds = %dec_label_pc_1000a503
  %v4_1000a50c = and i32 %v3_1000a4ef, 65535
  %v6_1000a50c = and i32 %v4_1000a4fb, -65536
  %v7_1000a50c = or i32 %v6_1000a50c, %v4_1000a50c
  br label %dec_label_pc_1000a743

dec_label_pc_1000a515:                            ; preds = %dec_label_pc_1000a503
  %v2_1000a515 = or i32 %v4_1000a4fb, 65535
  br label %dec_label_pc_1000a743

dec_label_pc_1000a51e:                            ; preds = %dec_label_pc_1000a49e, %dec_label_pc_1000a4e6
  %v3_1000a52a = call i32 @ConfigStartFreq(i32 %arg1, i32 %arg4, i32 %arg5)
  %v3_1000a53e = call i32 @ConfigStopFreq(i32 %arg1, i32 %arg6, i32 %arg7)
  %v4_1000a53e = trunc i32 %v3_1000a53e to i16
  %v2_1000a54e = icmp eq i16 %v4_1000a53e, 0
  br i1 %v2_1000a54e, label %dec_label_pc_1000a55b, label %dec_label_pc_1000a552

dec_label_pc_1000a552:                            ; preds = %dec_label_pc_1000a51e
  %sext18 = mul i32 %v3_1000a53e, 65536
  %v4_1000a54a = sdiv i32 %sext18, 65536
  %v4_1000a552 = or i32 %v4_1000a54a, 65535
  br label %dec_label_pc_1000a743

dec_label_pc_1000a55b:                            ; preds = %dec_label_pc_1000a51e
  %v2_1000a564 = trunc i32 %arg8 to i16
  %v3_1000a564 = call i32 @SetRefLevel(i32 %arg1, i16 %v2_1000a564)
  %v4_1000a564 = trunc i32 %v3_1000a564 to i16
  %v3_1000a574 = icmp slt i16 %v4_1000a564, 0
  %v2_1000a576 = icmp eq i1 %v3_1000a574, false
  br i1 %v2_1000a576, label %dec_label_pc_1000a581, label %dec_label_pc_1000a578

dec_label_pc_1000a578:                            ; preds = %dec_label_pc_1000a55b
  %sext20 = mul i32 %v3_1000a564, 65536
  %v4_1000a570 = sdiv i32 %sext20, 65536
  %v4_1000a578 = or i32 %v4_1000a570, 65535
  br label %dec_label_pc_1000a743

dec_label_pc_1000a581:                            ; preds = %dec_label_pc_1000a55b
  %v2_1000a589 = call i32 @SetNumCells(i32 %arg1, i32 %arg9)
  %v3_1000a589 = trunc i32 %v2_1000a589 to i16
  %sext22 = mul i32 %v2_1000a589, 65536
  %v4_1000a595 = sdiv i32 %sext22, 65536
  store i32 %v4_1000a595, i32* @ecx, align 4
  %v2_1000a599 = icmp eq i16 %v3_1000a589, 0
  br i1 %v2_1000a599, label %dec_label_pc_1000a5b8, label %dec_label_pc_1000a59d

dec_label_pc_1000a59d:                            ; preds = %dec_label_pc_1000a581
  %tmp103 = icmp eq i32 %sext22, -196608
  %v1_1000a5a4 = icmp eq i1 %tmp103, false
  br i1 %v1_1000a5a4, label %dec_label_pc_1000a5af, label %dec_label_pc_1000a5a6

dec_label_pc_1000a5a6:                            ; preds = %dec_label_pc_1000a59d
  %v4_1000a5a6 = and i32 %v2_1000a589, 65535
  %v7_1000a5a6 = and i32 %v4_1000a595, -65536
  %v8_1000a5a6 = or i32 %v7_1000a5a6, %v4_1000a5a6
  br label %dec_label_pc_1000a743

dec_label_pc_1000a5af:                            ; preds = %dec_label_pc_1000a59d
  %v4_1000a5af = or i32 %v4_1000a595, 65535
  br label %dec_label_pc_1000a743

dec_label_pc_1000a5b8:                            ; preds = %dec_label_pc_1000a581
  %v1_1000a5bc = call i32 @RdNumSwpPts(i32 %arg1)
  %factor = mul i32 %v1_1000a5bc, 2
  %v3_1000a5ca = add i32 %factor, 2
  %v1_1000a5cf = call i32 @function_1000da64(i32 %v3_1000a5ca)
  %v4_1000a5da = icmp eq i32 %v1_1000a5cf, 0
  %v1_1000a5de = icmp eq i1 %v4_1000a5da, false
  br i1 %v1_1000a5de, label %dec_label_pc_1000a5e9, label %dec_label_pc_1000a5e0

dec_label_pc_1000a5e0:                            ; preds = %dec_label_pc_1000a5b8
  %v2_1000a5e0 = or i32 %v1_1000a5cf, 65535
  br label %dec_label_pc_1000a743

dec_label_pc_1000a5e9:                            ; preds = %dec_label_pc_1000a5b8
  store i32 %arg1, i32* @eax, align 4
  %v3_1000a5ef = call i32 @BreakSweep(i32 %arg1, i16 0)
  %sext26 = mul i32 %v3_1000a5ef, 65536
  %tmp104 = icmp eq i32 %sext26, 4259840
  br i1 %tmp104, label %dec_label_pc_1000a60f, label %dec_label_pc_1000a733

dec_label_pc_1000a60f:                            ; preds = %dec_label_pc_1000a5e9
  %v1_1000a613 = call i32 @StartSweep(i32 %arg1)
  %sext27 = mul i32 %v1_1000a613, 65536
  %tmp105 = icmp eq i32 %sext27, 4259840
  br i1 %tmp105, label %dec_label_pc_1000a633, label %dec_label_pc_1000a733

dec_label_pc_1000a633:                            ; preds = %dec_label_pc_1000a60f, %dec_label_pc_1000a65b
  %v3_1000a63f = call i32 @GetAmplWithFreqExt(i32 %arg1, i32 %v1_1000a5cf, i32 %arg13)
  %v4_1000a63f = trunc i32 %v3_1000a63f to i16
  %v1_1000a64f = icmp eq i16 %v4_1000a63f, 0
  br i1 %v1_1000a64f, label %dec_label_pc_1000a65b, label %dec_label_pc_1000a672

dec_label_pc_1000a65b:                            ; preds = %dec_label_pc_1000a633
  %v1_1000a65f = call i32 @RdSwpIdx(i32 %arg1)
  %v5_1000a670 = icmp slt i32 %v1_1000a65f, %v1_1000a5bc
  br i1 %v5_1000a670, label %dec_label_pc_1000a633, label %dec_label_pc_1000a672.thread

dec_label_pc_1000a672.thread:                     ; preds = %dec_label_pc_1000a65b
  %v5_1000a69751 = icmp sgt i32 %v1_1000a5bc, 0
  br i1 %v5_1000a69751, label %dec_label_pc_1000a69d.preheader, label %dec_label_pc_1000a727

dec_label_pc_1000a69d.preheader:                  ; preds = %dec_label_pc_1000a672.thread
  %v13_1000a6aa = icmp eq i16 %tmp, 1
  %v13_1000a6b0 = icmp eq i16 %tmp, 2
  br label %dec_label_pc_1000a69d

dec_label_pc_1000a672:                            ; preds = %dec_label_pc_1000a633
  br label %dec_label_pc_1000a733

dec_label_pc_1000a69d:                            ; preds = %dec_label_pc_1000a69d.preheader, %dec_label_pc_1000a722
  %storemerge452 = phi i32 [ %v1_1000a68b, %dec_label_pc_1000a722 ], [ 0, %dec_label_pc_1000a69d.preheader ]
  br i1 %v2_1000a3c4, label %dec_label_pc_1000a6b8, label %dec_label_pc_1000a6aa

dec_label_pc_1000a6aa:                            ; preds = %dec_label_pc_1000a69d
  br i1 %v13_1000a6aa, label %dec_label_pc_1000a6da, label %dec_label_pc_1000a6b0

dec_label_pc_1000a6b0:                            ; preds = %dec_label_pc_1000a6aa
  br i1 %v13_1000a6b0, label %dec_label_pc_1000a702, label %dec_label_pc_1000a722

dec_label_pc_1000a6b8:                            ; preds = %dec_label_pc_1000a69d
  %v2_1000a6be = mul nuw i32 %storemerge452, 2
  %v3_1000a6be = add i32 %v2_1000a6be, %v1_1000a5cf
  %v4_1000a6be = inttoptr i32 %v3_1000a6be to i16*
  %v5_1000a6be = load i16, i16* %v4_1000a6be, align 2
  %v3_1000a6c7 = call i32 @GetDbmForAmpl(i32 %arg1, i16 %v5_1000a6be)
  %v0_1000a6d5 = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000a6d5 = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000a6d5 = mul i32 %storemerge452, 8
  %v5_1000a6d5 = add i32 %v4_1000a6d5, %arg12
  %v6_1000a6d5 = fptrunc x86_fp80 %v1_1000a6d5 to double
  %v7_1000a6d5 = inttoptr i32 %v5_1000a6d5 to double*
  store double %v6_1000a6d5, double* %v7_1000a6d5, align 4
  %v8_1000a6d5 = add i3 %v0_1000a6d5, 1
  store i3 %v8_1000a6d5, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000a722

dec_label_pc_1000a6da:                            ; preds = %dec_label_pc_1000a6aa
  %v2_1000a6e0 = mul nuw i32 %storemerge452, 2
  %v3_1000a6e0 = add i32 %v2_1000a6e0, %v1_1000a5cf
  %v4_1000a6e0 = inttoptr i32 %v3_1000a6e0 to i16*
  %v5_1000a6e0 = load i16, i16* %v4_1000a6e0, align 2
  %v3_1000a6e9 = call i32 @GetnVForAmpl(i32 %arg1, i16 %v5_1000a6e0)
  %v3_1000a6f1 = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000a6f1 = fdiv x86_fp80 0xK4008FA00000000000000, %v3_1000a6f1
  %v0_1000a6fd = load i3, i3* @fpu_stat_TOP, align 1
  %v4_1000a6fd = mul i32 %storemerge452, 8
  %v5_1000a6fd = add i32 %v4_1000a6fd, %arg12
  %v6_1000a6fd = fptrunc x86_fp80 %v4_1000a6f1 to double
  %v7_1000a6fd = inttoptr i32 %v5_1000a6fd to double*
  store double %v6_1000a6fd, double* %v7_1000a6fd, align 4
  %v8_1000a6fd = add i3 %v0_1000a6fd, 1
  store i3 %v8_1000a6fd, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000a722

dec_label_pc_1000a702:                            ; preds = %dec_label_pc_1000a6b0
  %v2_1000a708 = mul nuw i32 %storemerge452, 2
  %v3_1000a708 = add i32 %v2_1000a708, %v1_1000a5cf
  %v4_1000a708 = inttoptr i32 %v3_1000a708 to i16*
  %v5_1000a708 = load i16, i16* %v4_1000a708, align 2
  %v3_1000a711 = call i32 @GetnVForAmpl(i32 %arg1, i16 %v5_1000a708)
  %v0_1000a71f = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000a71f = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000a71f = mul i32 %storemerge452, 8
  %v5_1000a71f = add i32 %v4_1000a71f, %arg12
  %v6_1000a71f = fptrunc x86_fp80 %v1_1000a71f to double
  %v7_1000a71f = inttoptr i32 %v5_1000a71f to double*
  store double %v6_1000a71f, double* %v7_1000a71f, align 4
  %v8_1000a71f = add i3 %v0_1000a71f, 1
  store i3 %v8_1000a71f, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000a722

dec_label_pc_1000a722:                            ; preds = %dec_label_pc_1000a6b0, %dec_label_pc_1000a6da, %dec_label_pc_1000a6b8, %dec_label_pc_1000a702
  %v1_1000a68b = add nuw nsw i32 %storemerge452, 1
  %exitcond = icmp eq i32 %v1_1000a68b, %v1_1000a5bc
  br i1 %exitcond, label %dec_label_pc_1000a727, label %dec_label_pc_1000a69d

dec_label_pc_1000a727:                            ; preds = %dec_label_pc_1000a722, %dec_label_pc_1000a672.thread
  br label %dec_label_pc_1000a733

dec_label_pc_1000a733:                            ; preds = %dec_label_pc_1000a672, %dec_label_pc_1000a60f, %dec_label_pc_1000a5e9, %dec_label_pc_1000a727
  %stack_var_-20.2 = phi i32 [ 0, %dec_label_pc_1000a727 ], [ 65535, %dec_label_pc_1000a672 ], [ 65535, %dec_label_pc_1000a5e9 ], [ 65535, %dec_label_pc_1000a60f ]
  %v1_1000a737 = call i32 @function_1000d97b(i32 %v1_1000a5cf)
  %v6_1000a73f = and i32 %v1_1000a737, -65536
  %v7_1000a73f = or i32 %v6_1000a73f, %stack_var_-20.2
  br label %dec_label_pc_1000a743

dec_label_pc_1000a743:                            ; preds = %dec_label_pc_1000a5e0, %dec_label_pc_1000a5af, %dec_label_pc_1000a5a6, %dec_label_pc_1000a578, %dec_label_pc_1000a552, %dec_label_pc_1000a515, %dec_label_pc_1000a50c, %dec_label_pc_1000a4dd, %dec_label_pc_1000a4b8, %dec_label_pc_1000a48c, %dec_label_pc_1000a483, %dec_label_pc_1000a454, %dec_label_pc_1000a42f, %dec_label_pc_1000a403, %dec_label_pc_1000a3da, %dec_label_pc_1000a3b7, %dec_label_pc_1000a39c, %dec_label_pc_1000a378, %dec_label_pc_1000a354, %dec_label_pc_1000a33e, %dec_label_pc_1000a733
  %v0_1000a746 = phi i32 [ %v2_1000a5e0, %dec_label_pc_1000a5e0 ], [ %v4_1000a5af, %dec_label_pc_1000a5af ], [ %v8_1000a5a6, %dec_label_pc_1000a5a6 ], [ %v4_1000a578, %dec_label_pc_1000a578 ], [ %v4_1000a552, %dec_label_pc_1000a552 ], [ %v2_1000a515, %dec_label_pc_1000a515 ], [ %v7_1000a50c, %dec_label_pc_1000a50c ], [ %v4_1000a4dd, %dec_label_pc_1000a4dd ], [ %v4_1000a4b8, %dec_label_pc_1000a4b8 ], [ %v2_1000a48c, %dec_label_pc_1000a48c ], [ %v7_1000a483, %dec_label_pc_1000a483 ], [ %v4_1000a454, %dec_label_pc_1000a454 ], [ %v4_1000a42f, %dec_label_pc_1000a42f ], [ %v4_1000a403, %dec_label_pc_1000a403 ], [ %v2_1000a3da, %dec_label_pc_1000a3da ], [ %v2_1000a3b7, %dec_label_pc_1000a3b7 ], [ %v2_1000a39c, %dec_label_pc_1000a39c ], [ %v2_1000a378, %dec_label_pc_1000a378 ], [ %v2_1000a354, %dec_label_pc_1000a354 ], [ %v2_1000a33e, %dec_label_pc_1000a33e ], [ %v7_1000a73f, %dec_label_pc_1000a733 ]
  ret i32 %v0_1000a746

; uselistorder directives
  uselistorder i32 %v1_1000a68b, { 1, 0 }
  uselistorder i32 %storemerge452, { 2, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_1000a5cf, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 %v1_1000a5bc, { 0, 1, 3, 2 }
  uselistorder i32 %v4_1000a595, { 1, 2, 0 }
  uselistorder i32 %v2_1000a589, { 1, 0, 2 }
  uselistorder i32 %v4_1000a4fb, { 1, 0 }
  uselistorder i32 %v3_1000a4ef, { 1, 0, 2 }
  uselistorder i32 %v4_1000a472, { 1, 0 }
  uselistorder i32 %v3_1000a466, { 1, 0, 2 }
  uselistorder i32 %v4_1000a38d, { 1, 0 }
  uselistorder i32 %v1_1000a371, { 1, 0 }
  uselistorder i32 %arg6, { 1, 0 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000a743, { 20, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder label %dec_label_pc_1000a733, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1000a722, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_1000a69d, { 1, 0 }
  uselistorder label %dec_label_pc_1000a633, { 1, 0 }
  uselistorder label %dec_label_pc_1000a51e, { 1, 0 }
  uselistorder label %dec_label_pc_1000a495, { 1, 0 }
}

define i32 @MeasureAmplData(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg11 to i16
  %tmp63 = trunc i32 %arg3 to i16
  %v4_1000a759 = icmp eq i32 %arg12, 0
  %v1_1000a75d = icmp eq i1 %v4_1000a759, false
  br i1 %v1_1000a75d, label %dec_label_pc_1000a768, label %dec_label_pc_1000a75f

dec_label_pc_1000a75f:                            ; preds = %entry
  %v0_1000a75f = load i32, i32* @eax, align 4
  %v1_1000a75f = and i32 %v0_1000a75f, -65536
  %v2_1000a75f = or i32 %v1_1000a75f, 65533
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a768:                            ; preds = %entry
  %v0_1000a770 = load i32, i32* @eax, align 4
  %v3_1000a770 = and i32 %v0_1000a770, 16640
  %v4_1000a770 = icmp eq i32 %v3_1000a770, 0
  %v1_1000a773 = icmp eq i1 %v4_1000a770, false
  br i1 %v1_1000a773, label %dec_label_pc_1000a77e, label %dec_label_pc_1000a775

dec_label_pc_1000a775:                            ; preds = %dec_label_pc_1000a768
  %v1_1000a775 = and i32 %v0_1000a770, -65536
  %v2_1000a775 = or i32 %v1_1000a775, 65531
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a77e:                            ; preds = %dec_label_pc_1000a768
  %v2_1000a78a = sext i32 %arg4 to i64
  %v3_1000a78a = bitcast i64 %v2_1000a78a to double
  %v4_1000a78a = call i32 @FreqInRange(i32 %arg1, double %v3_1000a78a)
  %v1_1000a792 = mul i32 %v4_1000a78a, 65536
  %v1_1000a792.off = or i32 %v1_1000a792, 65535
  %tmp93 = icmp ult i32 %v1_1000a792.off, 131071
  %v1_1000a797 = icmp eq i1 %tmp93, false
  br i1 %v1_1000a797, label %dec_label_pc_1000a7a2, label %dec_label_pc_1000a799

dec_label_pc_1000a799:                            ; preds = %dec_label_pc_1000a77e
  %v2_1000a792 = sdiv i32 %v1_1000a792, 65536
  %v1_1000a799 = and i32 %v2_1000a792, -65536
  %v2_1000a799 = or i32 %v1_1000a799, 65533
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a7a2:                            ; preds = %dec_label_pc_1000a77e
  %v2_1000a7ae = sext i32 %arg6 to i64
  %v3_1000a7ae = bitcast i64 %v2_1000a7ae to double
  %v4_1000a7ae = call i32 @FreqInRange(i32 %arg1, double %v3_1000a7ae)
  %v1_1000a7b6 = mul i32 %v4_1000a7ae, 65536
  %v1_1000a7b6.off = or i32 %v1_1000a7b6, 65535
  %tmp94 = icmp ult i32 %v1_1000a7b6.off, 131071
  %v1_1000a7bb = icmp eq i1 %tmp94, false
  br i1 %v1_1000a7bb, label %dec_label_pc_1000a7c6, label %dec_label_pc_1000a7bd

dec_label_pc_1000a7bd:                            ; preds = %dec_label_pc_1000a7a2
  %v1_1000a7bd = and i32 %v4_1000a7ae, -65536
  %v2_1000a7bd = or i32 %v1_1000a7bd, 65533
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a7c6:                            ; preds = %dec_label_pc_1000a7a2
  %sext = mul i32 %arg10, 65536
  %v4_1000a7c6 = sdiv i32 %sext, 65536
  %tmp95 = icmp eq i32 %sext, 131072
  br i1 %tmp95, label %dec_label_pc_1000a7e1, label %dec_label_pc_1000a7cf

dec_label_pc_1000a7cf:                            ; preds = %dec_label_pc_1000a7c6
  %tmp96 = icmp eq i32 %sext, 262144
  br i1 %tmp96, label %dec_label_pc_1000a7e1, label %dec_label_pc_1000a7d8

dec_label_pc_1000a7d8:                            ; preds = %dec_label_pc_1000a7cf
  %v1_1000a7d8 = and i32 %v4_1000a7c6, -65536
  %v2_1000a7d8 = or i32 %v1_1000a7d8, 65533
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a7e1:                            ; preds = %dec_label_pc_1000a7cf, %dec_label_pc_1000a7c6
  %sext7 = mul i32 %arg11, 65536
  %v4_1000a7e1 = sdiv i32 %sext7, 65536
  %v2_1000a7e5 = icmp eq i16 %tmp, 0
  br i1 %v2_1000a7e5, label %dec_label_pc_1000a804, label %dec_label_pc_1000a7e9

dec_label_pc_1000a7e9:                            ; preds = %dec_label_pc_1000a7e1
  %tmp97 = icmp eq i32 %sext7, 65536
  br i1 %tmp97, label %dec_label_pc_1000a804, label %dec_label_pc_1000a7f2

dec_label_pc_1000a7f2:                            ; preds = %dec_label_pc_1000a7e9
  %tmp98 = icmp eq i32 %sext7, 131072
  br i1 %tmp98, label %dec_label_pc_1000a804, label %dec_label_pc_1000a7fb

dec_label_pc_1000a7fb:                            ; preds = %dec_label_pc_1000a7f2
  %v1_1000a7fb = and i32 %v4_1000a7e1, -65536
  %v2_1000a7fb = or i32 %v1_1000a7fb, 65533
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a804:                            ; preds = %dec_label_pc_1000a7f2, %dec_label_pc_1000a7e9, %dec_label_pc_1000a7e1
  %v1_1000a808 = or i32 %v4_1000a7c6, 1
  %v2_1000a810 = trunc i32 %v1_1000a808 to i16
  %v3_1000a810 = call i32 @SetSweepCode(i32 %arg1, i16 %v2_1000a810)
  %v4_1000a810 = trunc i32 %v3_1000a810 to i16
  %v2_1000a820 = icmp eq i16 %v4_1000a810, 0
  br i1 %v2_1000a820, label %dec_label_pc_1000a82d, label %dec_label_pc_1000a824

dec_label_pc_1000a824:                            ; preds = %dec_label_pc_1000a804
  %sext11 = mul i32 %v3_1000a810, 65536
  %v4_1000a81c = sdiv i32 %sext11, 65536
  %v4_1000a824 = or i32 %v4_1000a81c, 65535
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a82d:                            ; preds = %dec_label_pc_1000a804
  %v9_1000a831 = icmp eq i16 %arg2, 5
  %v1_1000a834 = icmp eq i1 %v9_1000a831, false
  br i1 %v1_1000a834, label %dec_label_pc_1000a85b, label %dec_label_pc_1000a836

dec_label_pc_1000a836:                            ; preds = %dec_label_pc_1000a82d
  %v3_1000a83c = call i32 @SetRBWmode(i32 %arg1, i16 1)
  %v4_1000a83c = trunc i32 %v3_1000a83c to i16
  %v2_1000a84c = icmp eq i16 %v4_1000a83c, 0
  br i1 %v2_1000a84c, label %dec_label_pc_1000a8b6, label %dec_label_pc_1000a850

dec_label_pc_1000a850:                            ; preds = %dec_label_pc_1000a836
  %sext13 = mul i32 %v3_1000a83c, 65536
  %v4_1000a848 = sdiv i32 %sext13, 65536
  %v4_1000a850 = or i32 %v4_1000a848, 65535
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a85b:                            ; preds = %dec_label_pc_1000a82d
  %v3_1000a861 = call i32 @SetRBWmode(i32 %arg1, i16 0)
  %v4_1000a861 = trunc i32 %v3_1000a861 to i16
  %v2_1000a871 = icmp eq i16 %v4_1000a861, 0
  br i1 %v2_1000a871, label %dec_label_pc_1000a87e, label %dec_label_pc_1000a875

dec_label_pc_1000a875:                            ; preds = %dec_label_pc_1000a85b
  %sext36 = mul i32 %v3_1000a861, 65536
  %v4_1000a86d = sdiv i32 %sext36, 65536
  %v4_1000a875 = or i32 %v4_1000a86d, 65535
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a87e:                            ; preds = %dec_label_pc_1000a85b
  %v3_1000a887 = call i32 @SetRBW(i32 %arg1, i16 %arg2)
  %v4_1000a887 = trunc i32 %v3_1000a887 to i16
  %sext39 = mul i32 %v3_1000a887, 65536
  %v4_1000a893 = sdiv i32 %sext39, 65536
  %v2_1000a897 = icmp eq i16 %v4_1000a887, 0
  br i1 %v2_1000a897, label %dec_label_pc_1000a8b6, label %dec_label_pc_1000a89b

dec_label_pc_1000a89b:                            ; preds = %dec_label_pc_1000a87e
  %tmp99 = icmp eq i32 %sext39, -196608
  %v1_1000a8a2 = icmp eq i1 %tmp99, false
  br i1 %v1_1000a8a2, label %dec_label_pc_1000a8ad, label %dec_label_pc_1000a8a4

dec_label_pc_1000a8a4:                            ; preds = %dec_label_pc_1000a89b
  %v4_1000a8a4 = and i32 %v3_1000a887, 65535
  %v6_1000a8a4 = and i32 %v4_1000a893, -65536
  %v7_1000a8a4 = or i32 %v6_1000a8a4, %v4_1000a8a4
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a8ad:                            ; preds = %dec_label_pc_1000a89b
  %v2_1000a8ad = or i32 %v4_1000a893, 65535
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a8b6:                            ; preds = %dec_label_pc_1000a836, %dec_label_pc_1000a87e
  %sext15 = mul i32 %arg3, 65536
  %tmp100 = icmp eq i32 %sext15, 524288
  %v1_1000a8bd = icmp eq i1 %tmp100, false
  br i1 %v1_1000a8bd, label %dec_label_pc_1000a8e4, label %dec_label_pc_1000a8bf

dec_label_pc_1000a8bf:                            ; preds = %dec_label_pc_1000a8b6
  %v3_1000a8c5 = call i32 @SetVBWmode(i32 %arg1, i16 1)
  %v4_1000a8c5 = trunc i32 %v3_1000a8c5 to i16
  %v2_1000a8d5 = icmp eq i16 %v4_1000a8c5, 0
  br i1 %v2_1000a8d5, label %dec_label_pc_1000a93f, label %dec_label_pc_1000a8d9

dec_label_pc_1000a8d9:                            ; preds = %dec_label_pc_1000a8bf
  %sext16 = mul i32 %v3_1000a8c5, 65536
  %v4_1000a8d1 = sdiv i32 %sext16, 65536
  %v4_1000a8d9 = or i32 %v4_1000a8d1, 65535
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a8e4:                            ; preds = %dec_label_pc_1000a8b6
  %v3_1000a8ea = call i32 @SetVBWmode(i32 %arg1, i16 0)
  %v4_1000a8ea = trunc i32 %v3_1000a8ea to i16
  %v2_1000a8fa = icmp eq i16 %v4_1000a8ea, 0
  br i1 %v2_1000a8fa, label %dec_label_pc_1000a907, label %dec_label_pc_1000a8fe

dec_label_pc_1000a8fe:                            ; preds = %dec_label_pc_1000a8e4
  %sext31 = mul i32 %v3_1000a8ea, 65536
  %v4_1000a8f6 = sdiv i32 %sext31, 65536
  %v4_1000a8fe = or i32 %v4_1000a8f6, 65535
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a907:                            ; preds = %dec_label_pc_1000a8e4
  store i32 %arg1, i32* @ecx, align 4
  %v3_1000a910 = call i32 @SetVBW(i32 %arg1, i16 %tmp63)
  %v4_1000a910 = trunc i32 %v3_1000a910 to i16
  %sext34 = mul i32 %v3_1000a910, 65536
  %v4_1000a91c = sdiv i32 %sext34, 65536
  %v2_1000a920 = icmp eq i16 %v4_1000a910, 0
  br i1 %v2_1000a920, label %dec_label_pc_1000a93f, label %dec_label_pc_1000a924

dec_label_pc_1000a924:                            ; preds = %dec_label_pc_1000a907
  %tmp101 = icmp eq i32 %sext34, -196608
  %v1_1000a92b = icmp eq i1 %tmp101, false
  br i1 %v1_1000a92b, label %dec_label_pc_1000a936, label %dec_label_pc_1000a92d

dec_label_pc_1000a92d:                            ; preds = %dec_label_pc_1000a924
  %v4_1000a92d = and i32 %v3_1000a910, 65535
  %v6_1000a92d = and i32 %v4_1000a91c, -65536
  %v7_1000a92d = or i32 %v6_1000a92d, %v4_1000a92d
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a936:                            ; preds = %dec_label_pc_1000a924
  %v2_1000a936 = or i32 %v4_1000a91c, 65535
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a93f:                            ; preds = %dec_label_pc_1000a8bf, %dec_label_pc_1000a907
  %v3_1000a94b = call i32 @ConfigStartFreq(i32 %arg1, i32 %arg4, i32 %arg5)
  %v3_1000a95f = call i32 @ConfigStopFreq(i32 %arg1, i32 %arg6, i32 %arg7)
  %v4_1000a95f = trunc i32 %v3_1000a95f to i16
  %v2_1000a96f = icmp eq i16 %v4_1000a95f, 0
  br i1 %v2_1000a96f, label %dec_label_pc_1000a97c, label %dec_label_pc_1000a973

dec_label_pc_1000a973:                            ; preds = %dec_label_pc_1000a93f
  %sext18 = mul i32 %v3_1000a95f, 65536
  %v4_1000a96b = sdiv i32 %sext18, 65536
  %v4_1000a973 = or i32 %v4_1000a96b, 65535
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a97c:                            ; preds = %dec_label_pc_1000a93f
  %v2_1000a985 = trunc i32 %arg8 to i16
  %v3_1000a985 = call i32 @SetRefLevel(i32 %arg1, i16 %v2_1000a985)
  %v4_1000a985 = trunc i32 %v3_1000a985 to i16
  %v3_1000a995 = icmp slt i16 %v4_1000a985, 0
  %v2_1000a997 = icmp eq i1 %v3_1000a995, false
  br i1 %v2_1000a997, label %dec_label_pc_1000a9a2, label %dec_label_pc_1000a999

dec_label_pc_1000a999:                            ; preds = %dec_label_pc_1000a97c
  %sext20 = mul i32 %v3_1000a985, 65536
  %v4_1000a991 = sdiv i32 %sext20, 65536
  %v4_1000a999 = or i32 %v4_1000a991, 65535
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a9a2:                            ; preds = %dec_label_pc_1000a97c
  %v2_1000a9aa = call i32 @SetNumCells(i32 %arg1, i32 %arg9)
  %v3_1000a9aa = trunc i32 %v2_1000a9aa to i16
  %sext22 = mul i32 %v2_1000a9aa, 65536
  %v4_1000a9b6 = sdiv i32 %sext22, 65536
  store i32 %v4_1000a9b6, i32* @ecx, align 4
  %v2_1000a9ba = icmp eq i16 %v3_1000a9aa, 0
  br i1 %v2_1000a9ba, label %dec_label_pc_1000a9d9, label %dec_label_pc_1000a9be

dec_label_pc_1000a9be:                            ; preds = %dec_label_pc_1000a9a2
  %tmp102 = icmp eq i32 %sext22, -196608
  %v1_1000a9c5 = icmp eq i1 %tmp102, false
  br i1 %v1_1000a9c5, label %dec_label_pc_1000a9d0, label %dec_label_pc_1000a9c7

dec_label_pc_1000a9c7:                            ; preds = %dec_label_pc_1000a9be
  %v4_1000a9c7 = and i32 %v2_1000a9aa, 65535
  %v7_1000a9c7 = and i32 %v4_1000a9b6, -65536
  %v8_1000a9c7 = or i32 %v7_1000a9c7, %v4_1000a9c7
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a9d0:                            ; preds = %dec_label_pc_1000a9be
  %v4_1000a9d0 = or i32 %v4_1000a9b6, 65535
  br label %dec_label_pc_1000ab60

dec_label_pc_1000a9d9:                            ; preds = %dec_label_pc_1000a9a2
  %v1_1000a9dd = call i32 @RdNumSwpPts(i32 %arg1)
  %factor = mul i32 %v1_1000a9dd, 2
  %v3_1000a9eb = add i32 %factor, 2
  %v1_1000a9f0 = call i32 @function_1000da64(i32 %v3_1000a9eb)
  %v4_1000a9fb = icmp eq i32 %v1_1000a9f0, 0
  %v1_1000a9ff = icmp eq i1 %v4_1000a9fb, false
  br i1 %v1_1000a9ff, label %dec_label_pc_1000aa0a, label %dec_label_pc_1000aa01

dec_label_pc_1000aa01:                            ; preds = %dec_label_pc_1000a9d9
  %v2_1000aa01 = or i32 %v1_1000a9f0, 65535
  br label %dec_label_pc_1000ab60

dec_label_pc_1000aa0a:                            ; preds = %dec_label_pc_1000a9d9
  store i32 %arg1, i32* @eax, align 4
  %v3_1000aa10 = call i32 @BreakSweep(i32 %arg1, i16 0)
  %sext26 = mul i32 %v3_1000aa10, 65536
  %tmp103 = icmp eq i32 %sext26, 4259840
  br i1 %tmp103, label %dec_label_pc_1000aa30, label %dec_label_pc_1000ab50

dec_label_pc_1000aa30:                            ; preds = %dec_label_pc_1000aa0a
  %v1_1000aa34 = call i32 @StartSweep(i32 %arg1)
  %sext27 = mul i32 %v1_1000aa34, 65536
  %tmp104 = icmp eq i32 %sext27, 4259840
  br i1 %tmp104, label %dec_label_pc_1000aa54, label %dec_label_pc_1000ab50

dec_label_pc_1000aa54:                            ; preds = %dec_label_pc_1000aa30, %dec_label_pc_1000aa78
  %v2_1000aa5c = call i32 @GetAmplData(i32 %arg1, i32 %v1_1000a9f0)
  %v3_1000aa5c = trunc i32 %v2_1000aa5c to i16
  %v1_1000aa6c = icmp eq i16 %v3_1000aa5c, 0
  br i1 %v1_1000aa6c, label %dec_label_pc_1000aa78, label %dec_label_pc_1000aa8f

dec_label_pc_1000aa78:                            ; preds = %dec_label_pc_1000aa54
  %v1_1000aa7c = call i32 @RdSwpIdx(i32 %arg1)
  %v5_1000aa8d = icmp slt i32 %v1_1000aa7c, %v1_1000a9dd
  br i1 %v5_1000aa8d, label %dec_label_pc_1000aa54, label %dec_label_pc_1000aa8f.thread

dec_label_pc_1000aa8f.thread:                     ; preds = %dec_label_pc_1000aa78
  %v5_1000aab451 = icmp sgt i32 %v1_1000a9dd, 0
  br i1 %v5_1000aab451, label %dec_label_pc_1000aaba.preheader, label %dec_label_pc_1000ab44

dec_label_pc_1000aaba.preheader:                  ; preds = %dec_label_pc_1000aa8f.thread
  %v13_1000aac7 = icmp eq i16 %tmp, 1
  %v13_1000aacd = icmp eq i16 %tmp, 2
  br label %dec_label_pc_1000aaba

dec_label_pc_1000aa8f:                            ; preds = %dec_label_pc_1000aa54
  br label %dec_label_pc_1000ab50

dec_label_pc_1000aaba:                            ; preds = %dec_label_pc_1000aaba.preheader, %dec_label_pc_1000ab3f
  %storemerge452 = phi i32 [ %v1_1000aaa8, %dec_label_pc_1000ab3f ], [ 0, %dec_label_pc_1000aaba.preheader ]
  br i1 %v2_1000a7e5, label %dec_label_pc_1000aad5, label %dec_label_pc_1000aac7

dec_label_pc_1000aac7:                            ; preds = %dec_label_pc_1000aaba
  br i1 %v13_1000aac7, label %dec_label_pc_1000aaf7, label %dec_label_pc_1000aacd

dec_label_pc_1000aacd:                            ; preds = %dec_label_pc_1000aac7
  br i1 %v13_1000aacd, label %dec_label_pc_1000ab1f, label %dec_label_pc_1000ab3f

dec_label_pc_1000aad5:                            ; preds = %dec_label_pc_1000aaba
  %v2_1000aadb = mul nuw i32 %storemerge452, 2
  %v3_1000aadb = add i32 %v2_1000aadb, %v1_1000a9f0
  %v4_1000aadb = inttoptr i32 %v3_1000aadb to i16*
  %v5_1000aadb = load i16, i16* %v4_1000aadb, align 2
  %v3_1000aae4 = call i32 @GetDbmForAmpl(i32 %arg1, i16 %v5_1000aadb)
  %v0_1000aaf2 = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000aaf2 = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000aaf2 = mul i32 %storemerge452, 8
  %v5_1000aaf2 = add i32 %v4_1000aaf2, %arg12
  %v6_1000aaf2 = fptrunc x86_fp80 %v1_1000aaf2 to double
  %v7_1000aaf2 = inttoptr i32 %v5_1000aaf2 to double*
  store double %v6_1000aaf2, double* %v7_1000aaf2, align 4
  %v8_1000aaf2 = add i3 %v0_1000aaf2, 1
  store i3 %v8_1000aaf2, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000ab3f

dec_label_pc_1000aaf7:                            ; preds = %dec_label_pc_1000aac7
  %v2_1000aafd = mul nuw i32 %storemerge452, 2
  %v3_1000aafd = add i32 %v2_1000aafd, %v1_1000a9f0
  %v4_1000aafd = inttoptr i32 %v3_1000aafd to i16*
  %v5_1000aafd = load i16, i16* %v4_1000aafd, align 2
  %v3_1000ab06 = call i32 @GetnVForAmpl(i32 %arg1, i16 %v5_1000aafd)
  %v3_1000ab0e = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000ab0e = fdiv x86_fp80 0xK4008FA00000000000000, %v3_1000ab0e
  %v0_1000ab1a = load i3, i3* @fpu_stat_TOP, align 1
  %v4_1000ab1a = mul i32 %storemerge452, 8
  %v5_1000ab1a = add i32 %v4_1000ab1a, %arg12
  %v6_1000ab1a = fptrunc x86_fp80 %v4_1000ab0e to double
  %v7_1000ab1a = inttoptr i32 %v5_1000ab1a to double*
  store double %v6_1000ab1a, double* %v7_1000ab1a, align 4
  %v8_1000ab1a = add i3 %v0_1000ab1a, 1
  store i3 %v8_1000ab1a, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000ab3f

dec_label_pc_1000ab1f:                            ; preds = %dec_label_pc_1000aacd
  %v2_1000ab25 = mul nuw i32 %storemerge452, 2
  %v3_1000ab25 = add i32 %v2_1000ab25, %v1_1000a9f0
  %v4_1000ab25 = inttoptr i32 %v3_1000ab25 to i16*
  %v5_1000ab25 = load i16, i16* %v4_1000ab25, align 2
  %v3_1000ab2e = call i32 @GetnVForAmpl(i32 %arg1, i16 %v5_1000ab25)
  %v0_1000ab3c = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000ab3c = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000ab3c = mul i32 %storemerge452, 8
  %v5_1000ab3c = add i32 %v4_1000ab3c, %arg12
  %v6_1000ab3c = fptrunc x86_fp80 %v1_1000ab3c to double
  %v7_1000ab3c = inttoptr i32 %v5_1000ab3c to double*
  store double %v6_1000ab3c, double* %v7_1000ab3c, align 4
  %v8_1000ab3c = add i3 %v0_1000ab3c, 1
  store i3 %v8_1000ab3c, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000ab3f

dec_label_pc_1000ab3f:                            ; preds = %dec_label_pc_1000aacd, %dec_label_pc_1000aaf7, %dec_label_pc_1000aad5, %dec_label_pc_1000ab1f
  %v1_1000aaa8 = add nuw nsw i32 %storemerge452, 1
  %exitcond = icmp eq i32 %v1_1000aaa8, %v1_1000a9dd
  br i1 %exitcond, label %dec_label_pc_1000ab44, label %dec_label_pc_1000aaba

dec_label_pc_1000ab44:                            ; preds = %dec_label_pc_1000ab3f, %dec_label_pc_1000aa8f.thread
  br label %dec_label_pc_1000ab50

dec_label_pc_1000ab50:                            ; preds = %dec_label_pc_1000aa8f, %dec_label_pc_1000aa30, %dec_label_pc_1000aa0a, %dec_label_pc_1000ab44
  %stack_var_-20.2 = phi i32 [ 0, %dec_label_pc_1000ab44 ], [ 65535, %dec_label_pc_1000aa8f ], [ 65535, %dec_label_pc_1000aa0a ], [ 65535, %dec_label_pc_1000aa30 ]
  %v1_1000ab54 = call i32 @function_1000d97b(i32 %v1_1000a9f0)
  %v6_1000ab5c = and i32 %v1_1000ab54, -65536
  %v7_1000ab5c = or i32 %v6_1000ab5c, %stack_var_-20.2
  br label %dec_label_pc_1000ab60

dec_label_pc_1000ab60:                            ; preds = %dec_label_pc_1000aa01, %dec_label_pc_1000a9d0, %dec_label_pc_1000a9c7, %dec_label_pc_1000a999, %dec_label_pc_1000a973, %dec_label_pc_1000a936, %dec_label_pc_1000a92d, %dec_label_pc_1000a8fe, %dec_label_pc_1000a8d9, %dec_label_pc_1000a8ad, %dec_label_pc_1000a8a4, %dec_label_pc_1000a875, %dec_label_pc_1000a850, %dec_label_pc_1000a824, %dec_label_pc_1000a7fb, %dec_label_pc_1000a7d8, %dec_label_pc_1000a7bd, %dec_label_pc_1000a799, %dec_label_pc_1000a775, %dec_label_pc_1000a75f, %dec_label_pc_1000ab50
  %v0_1000ab63 = phi i32 [ %v2_1000aa01, %dec_label_pc_1000aa01 ], [ %v4_1000a9d0, %dec_label_pc_1000a9d0 ], [ %v8_1000a9c7, %dec_label_pc_1000a9c7 ], [ %v4_1000a999, %dec_label_pc_1000a999 ], [ %v4_1000a973, %dec_label_pc_1000a973 ], [ %v2_1000a936, %dec_label_pc_1000a936 ], [ %v7_1000a92d, %dec_label_pc_1000a92d ], [ %v4_1000a8fe, %dec_label_pc_1000a8fe ], [ %v4_1000a8d9, %dec_label_pc_1000a8d9 ], [ %v2_1000a8ad, %dec_label_pc_1000a8ad ], [ %v7_1000a8a4, %dec_label_pc_1000a8a4 ], [ %v4_1000a875, %dec_label_pc_1000a875 ], [ %v4_1000a850, %dec_label_pc_1000a850 ], [ %v4_1000a824, %dec_label_pc_1000a824 ], [ %v2_1000a7fb, %dec_label_pc_1000a7fb ], [ %v2_1000a7d8, %dec_label_pc_1000a7d8 ], [ %v2_1000a7bd, %dec_label_pc_1000a7bd ], [ %v2_1000a799, %dec_label_pc_1000a799 ], [ %v2_1000a775, %dec_label_pc_1000a775 ], [ %v2_1000a75f, %dec_label_pc_1000a75f ], [ %v7_1000ab5c, %dec_label_pc_1000ab50 ]
  ret i32 %v0_1000ab63

; uselistorder directives
  uselistorder i32 %v1_1000aaa8, { 1, 0 }
  uselistorder i32 %storemerge452, { 2, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_1000a9f0, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32 %v1_1000a9dd, { 0, 1, 3, 2 }
  uselistorder i32 %v4_1000a9b6, { 1, 2, 0 }
  uselistorder i32 %v2_1000a9aa, { 1, 0, 2 }
  uselistorder i32 %v4_1000a91c, { 1, 0 }
  uselistorder i32 %v3_1000a910, { 1, 0, 2 }
  uselistorder i32 %v4_1000a893, { 1, 0 }
  uselistorder i32 %v3_1000a887, { 1, 0, 2 }
  uselistorder i32 %v4_1000a7ae, { 1, 0 }
  uselistorder i32 %v1_1000a792, { 1, 0 }
  uselistorder i32 (i32, i32)* @GetAmplData, { 1, 0 }
  uselistorder i32 %arg6, { 1, 0 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000ab60, { 20, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder label %dec_label_pc_1000ab50, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1000ab3f, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_1000aaba, { 1, 0 }
  uselistorder label %dec_label_pc_1000aa54, { 1, 0 }
  uselistorder label %dec_label_pc_1000a93f, { 1, 0 }
  uselistorder label %dec_label_pc_1000a8b6, { 1, 0 }
}

define i32 @MeasureMinMaxAmplWithFreq(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg10 to i16
  %tmp67 = trunc i32 %arg3 to i16
  %stack_var_-40 = alloca i16, align 2
  %stack_var_-4 = alloca i32, align 4
  %v0_1000ab64 = load i32, i32* @ebp, align 4
  store i32 %v0_1000ab64, i32* %stack_var_-4, align 4
  %v4_1000ab64 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000ab64, i32* @ebp, align 4
  %v15_1000ab67 = ptrtoint i16* %stack_var_-40 to i32
  %v4_1000ab76 = icmp eq i32 %arg13, 0
  br i1 %v4_1000ab76, label %dec_label_pc_1000ab8e, label %dec_label_pc_1000ab7c

dec_label_pc_1000ab7c:                            ; preds = %entry
  %v4_1000ab7c = icmp eq i32 %arg11, 0
  br i1 %v4_1000ab7c, label %dec_label_pc_1000ab8e, label %dec_label_pc_1000ab82

dec_label_pc_1000ab82:                            ; preds = %dec_label_pc_1000ab7c
  %v4_1000ab82 = icmp eq i32 %arg14, 0
  br i1 %v4_1000ab82, label %dec_label_pc_1000ab8e, label %dec_label_pc_1000ab88

dec_label_pc_1000ab88:                            ; preds = %dec_label_pc_1000ab82
  %v4_1000ab88 = icmp eq i32 %arg12, 0
  %v1_1000ab8c = icmp eq i1 %v4_1000ab88, false
  br i1 %v1_1000ab8c, label %dec_label_pc_1000ab97, label %dec_label_pc_1000ab8e

dec_label_pc_1000ab8e:                            ; preds = %dec_label_pc_1000ab88, %dec_label_pc_1000ab82, %dec_label_pc_1000ab7c, %entry
  %v0_1000ab8e = load i32, i32* @eax, align 4
  %v1_1000ab8e = and i32 %v0_1000ab8e, -65536
  %v2_1000ab8e = or i32 %v1_1000ab8e, 65533
  br label %dec_label_pc_1000b00f

dec_label_pc_1000ab97:                            ; preds = %dec_label_pc_1000ab88
  %v0_1000ab9f = load i32, i32* @eax, align 4
  %v3_1000ab9f = and i32 %v0_1000ab9f, 16640
  %v4_1000ab9f = icmp eq i32 %v3_1000ab9f, 0
  %v1_1000aba2 = icmp eq i1 %v4_1000ab9f, false
  br i1 %v1_1000aba2, label %dec_label_pc_1000abad, label %dec_label_pc_1000aba4

dec_label_pc_1000aba4:                            ; preds = %dec_label_pc_1000ab97
  %v1_1000aba4 = and i32 %v0_1000ab9f, -65536
  %v2_1000aba4 = or i32 %v1_1000aba4, 65531
  br label %dec_label_pc_1000b00f

dec_label_pc_1000abad:                            ; preds = %dec_label_pc_1000ab97
  %v2_1000abb9 = sext i32 %arg4 to i64
  %v3_1000abb9 = bitcast i64 %v2_1000abb9 to double
  %v4_1000abb9 = call i32 @FreqInRange(i32 %arg1, double %v3_1000abb9)
  %v1_1000abc1 = mul i32 %v4_1000abb9, 65536
  %v1_1000abc1.off = or i32 %v1_1000abc1, 65535
  %tmp102 = icmp ult i32 %v1_1000abc1.off, 131071
  %v1_1000abc6 = icmp eq i1 %tmp102, false
  br i1 %v1_1000abc6, label %dec_label_pc_1000abd1, label %dec_label_pc_1000abc8

dec_label_pc_1000abc8:                            ; preds = %dec_label_pc_1000abad
  %v2_1000abc1 = sdiv i32 %v1_1000abc1, 65536
  %v1_1000abc8 = and i32 %v2_1000abc1, -65536
  %v2_1000abc8 = or i32 %v1_1000abc8, 65533
  br label %dec_label_pc_1000b00f

dec_label_pc_1000abd1:                            ; preds = %dec_label_pc_1000abad
  %v2_1000abdd = sext i32 %arg6 to i64
  %v3_1000abdd = bitcast i64 %v2_1000abdd to double
  %v4_1000abdd = call i32 @FreqInRange(i32 %arg1, double %v3_1000abdd)
  %v1_1000abe5 = mul i32 %v4_1000abdd, 65536
  %v1_1000abe5.off = or i32 %v1_1000abe5, 65535
  %tmp103 = icmp ult i32 %v1_1000abe5.off, 131071
  %v1_1000abea = icmp eq i1 %tmp103, false
  br i1 %v1_1000abea, label %dec_label_pc_1000abf5, label %dec_label_pc_1000abec

dec_label_pc_1000abec:                            ; preds = %dec_label_pc_1000abd1
  %v1_1000abec = and i32 %v4_1000abdd, -65536
  %v2_1000abec = or i32 %v1_1000abec, 65533
  br label %dec_label_pc_1000b00f

dec_label_pc_1000abf5:                            ; preds = %dec_label_pc_1000abd1
  %sext = mul i32 %arg10, 65536
  %v4_1000abf5 = sdiv i32 %sext, 65536
  %v2_1000abf9 = icmp eq i16 %tmp, 0
  br i1 %v2_1000abf9, label %dec_label_pc_1000ac18, label %dec_label_pc_1000abfd

dec_label_pc_1000abfd:                            ; preds = %dec_label_pc_1000abf5
  %tmp104 = icmp eq i32 %sext, 65536
  br i1 %tmp104, label %dec_label_pc_1000ac18, label %dec_label_pc_1000ac06

dec_label_pc_1000ac06:                            ; preds = %dec_label_pc_1000abfd
  %tmp105 = icmp eq i32 %sext, 131072
  br i1 %tmp105, label %dec_label_pc_1000ac18, label %dec_label_pc_1000ac0f

dec_label_pc_1000ac0f:                            ; preds = %dec_label_pc_1000ac06
  %v1_1000ac0f = and i32 %v4_1000abf5, -65536
  %v2_1000ac0f = or i32 %v1_1000ac0f, 65533
  br label %dec_label_pc_1000b00f

dec_label_pc_1000ac18:                            ; preds = %dec_label_pc_1000ac06, %dec_label_pc_1000abfd, %dec_label_pc_1000abf5
  %v3_1000ac1e = call i32 @SetSweepCode(i32 %arg1, i16 15)
  %v4_1000ac1e = trunc i32 %v3_1000ac1e to i16
  %v2_1000ac2e = icmp eq i16 %v4_1000ac1e, 0
  br i1 %v2_1000ac2e, label %dec_label_pc_1000ac3b, label %dec_label_pc_1000ac32

dec_label_pc_1000ac32:                            ; preds = %dec_label_pc_1000ac18
  %sext8 = mul i32 %v3_1000ac1e, 65536
  %v4_1000ac2a = sdiv i32 %sext8, 65536
  %v4_1000ac32 = or i32 %v4_1000ac2a, 65535
  br label %dec_label_pc_1000b00f

dec_label_pc_1000ac3b:                            ; preds = %dec_label_pc_1000ac18
  %v9_1000ac3f = icmp eq i16 %arg2, 5
  %v1_1000ac42 = icmp eq i1 %v9_1000ac3f, false
  br i1 %v1_1000ac42, label %dec_label_pc_1000ac69, label %dec_label_pc_1000ac44

dec_label_pc_1000ac44:                            ; preds = %dec_label_pc_1000ac3b
  %v3_1000ac4a = call i32 @SetRBWmode(i32 %arg1, i16 1)
  %v4_1000ac4a = trunc i32 %v3_1000ac4a to i16
  %v2_1000ac5a = icmp eq i16 %v4_1000ac4a, 0
  br i1 %v2_1000ac5a, label %dec_label_pc_1000acc4, label %dec_label_pc_1000ac5e

dec_label_pc_1000ac5e:                            ; preds = %dec_label_pc_1000ac44
  %sext10 = mul i32 %v3_1000ac4a, 65536
  %v4_1000ac56 = sdiv i32 %sext10, 65536
  %v4_1000ac5e = or i32 %v4_1000ac56, 65535
  br label %dec_label_pc_1000b00f

dec_label_pc_1000ac69:                            ; preds = %dec_label_pc_1000ac3b
  %v3_1000ac6f = call i32 @SetRBWmode(i32 %arg1, i16 0)
  %v4_1000ac6f = trunc i32 %v3_1000ac6f to i16
  %v2_1000ac7f = icmp eq i16 %v4_1000ac6f, 0
  br i1 %v2_1000ac7f, label %dec_label_pc_1000ac8c, label %dec_label_pc_1000ac83

dec_label_pc_1000ac83:                            ; preds = %dec_label_pc_1000ac69
  %sext36 = mul i32 %v3_1000ac6f, 65536
  %v4_1000ac7b = sdiv i32 %sext36, 65536
  %v4_1000ac83 = or i32 %v4_1000ac7b, 65535
  br label %dec_label_pc_1000b00f

dec_label_pc_1000ac8c:                            ; preds = %dec_label_pc_1000ac69
  %v3_1000ac95 = call i32 @SetRBW(i32 %arg1, i16 %arg2)
  %v4_1000ac95 = trunc i32 %v3_1000ac95 to i16
  %sext39 = mul i32 %v3_1000ac95, 65536
  %v4_1000aca1 = sdiv i32 %sext39, 65536
  %v2_1000aca5 = icmp eq i16 %v4_1000ac95, 0
  br i1 %v2_1000aca5, label %dec_label_pc_1000acc4, label %dec_label_pc_1000aca9

dec_label_pc_1000aca9:                            ; preds = %dec_label_pc_1000ac8c
  %tmp106 = icmp eq i32 %sext39, -196608
  %v1_1000acb0 = icmp eq i1 %tmp106, false
  br i1 %v1_1000acb0, label %dec_label_pc_1000acbb, label %dec_label_pc_1000acb2

dec_label_pc_1000acb2:                            ; preds = %dec_label_pc_1000aca9
  %v4_1000acb2 = and i32 %v3_1000ac95, 65535
  %v6_1000acb2 = and i32 %v4_1000aca1, -65536
  %v7_1000acb2 = or i32 %v6_1000acb2, %v4_1000acb2
  br label %dec_label_pc_1000b00f

dec_label_pc_1000acbb:                            ; preds = %dec_label_pc_1000aca9
  %v2_1000acbb = or i32 %v4_1000aca1, 65535
  br label %dec_label_pc_1000b00f

dec_label_pc_1000acc4:                            ; preds = %dec_label_pc_1000ac44, %dec_label_pc_1000ac8c
  %sext12 = mul i32 %arg3, 65536
  %tmp107 = icmp eq i32 %sext12, 524288
  %v1_1000accb = icmp eq i1 %tmp107, false
  br i1 %v1_1000accb, label %dec_label_pc_1000acf2, label %dec_label_pc_1000accd

dec_label_pc_1000accd:                            ; preds = %dec_label_pc_1000acc4
  %v3_1000acd3 = call i32 @SetVBWmode(i32 %arg1, i16 1)
  %v4_1000acd3 = trunc i32 %v3_1000acd3 to i16
  %v2_1000ace3 = icmp eq i16 %v4_1000acd3, 0
  br i1 %v2_1000ace3, label %dec_label_pc_1000ad4d, label %dec_label_pc_1000ace7

dec_label_pc_1000ace7:                            ; preds = %dec_label_pc_1000accd
  %sext13 = mul i32 %v3_1000acd3, 65536
  %v4_1000acdf = sdiv i32 %sext13, 65536
  %v4_1000ace7 = or i32 %v4_1000acdf, 65535
  br label %dec_label_pc_1000b00f

dec_label_pc_1000acf2:                            ; preds = %dec_label_pc_1000acc4
  %v3_1000acf8 = call i32 @SetVBWmode(i32 %arg1, i16 0)
  %v4_1000acf8 = trunc i32 %v3_1000acf8 to i16
  %v2_1000ad08 = icmp eq i16 %v4_1000acf8, 0
  br i1 %v2_1000ad08, label %dec_label_pc_1000ad15, label %dec_label_pc_1000ad0c

dec_label_pc_1000ad0c:                            ; preds = %dec_label_pc_1000acf2
  %sext31 = mul i32 %v3_1000acf8, 65536
  %v4_1000ad04 = sdiv i32 %sext31, 65536
  %v4_1000ad0c = or i32 %v4_1000ad04, 65535
  br label %dec_label_pc_1000b00f

dec_label_pc_1000ad15:                            ; preds = %dec_label_pc_1000acf2
  store i32 %arg1, i32* @ecx, align 4
  %v3_1000ad1e = call i32 @SetVBW(i32 %arg1, i16 %tmp67)
  %v4_1000ad1e = trunc i32 %v3_1000ad1e to i16
  %sext34 = mul i32 %v3_1000ad1e, 65536
  %v4_1000ad2a = sdiv i32 %sext34, 65536
  %v2_1000ad2e = icmp eq i16 %v4_1000ad1e, 0
  br i1 %v2_1000ad2e, label %dec_label_pc_1000ad4d, label %dec_label_pc_1000ad32

dec_label_pc_1000ad32:                            ; preds = %dec_label_pc_1000ad15
  %tmp108 = icmp eq i32 %sext34, -196608
  %v1_1000ad39 = icmp eq i1 %tmp108, false
  br i1 %v1_1000ad39, label %dec_label_pc_1000ad44, label %dec_label_pc_1000ad3b

dec_label_pc_1000ad3b:                            ; preds = %dec_label_pc_1000ad32
  %v4_1000ad3b = and i32 %v3_1000ad1e, 65535
  %v6_1000ad3b = and i32 %v4_1000ad2a, -65536
  %v7_1000ad3b = or i32 %v6_1000ad3b, %v4_1000ad3b
  br label %dec_label_pc_1000b00f

dec_label_pc_1000ad44:                            ; preds = %dec_label_pc_1000ad32
  %v2_1000ad44 = or i32 %v4_1000ad2a, 65535
  br label %dec_label_pc_1000b00f

dec_label_pc_1000ad4d:                            ; preds = %dec_label_pc_1000accd, %dec_label_pc_1000ad15
  %v3_1000ad59 = call i32 @ConfigStartFreq(i32 %arg1, i32 %arg4, i32 %arg5)
  %v3_1000ad6d = call i32 @ConfigStopFreq(i32 %arg1, i32 %arg6, i32 %arg7)
  %v4_1000ad6d = trunc i32 %v3_1000ad6d to i16
  %v2_1000ad7d = icmp eq i16 %v4_1000ad6d, 0
  br i1 %v2_1000ad7d, label %dec_label_pc_1000ad8a, label %dec_label_pc_1000ad81

dec_label_pc_1000ad81:                            ; preds = %dec_label_pc_1000ad4d
  %sext15 = mul i32 %v3_1000ad6d, 65536
  %v4_1000ad79 = sdiv i32 %sext15, 65536
  %v4_1000ad81 = or i32 %v4_1000ad79, 65535
  br label %dec_label_pc_1000b00f

dec_label_pc_1000ad8a:                            ; preds = %dec_label_pc_1000ad4d
  %v2_1000ad93 = trunc i32 %arg8 to i16
  %v3_1000ad93 = call i32 @SetRefLevel(i32 %arg1, i16 %v2_1000ad93)
  %v4_1000ad93 = trunc i32 %v3_1000ad93 to i16
  %v3_1000ada3 = icmp slt i16 %v4_1000ad93, 0
  %v2_1000ada5 = icmp eq i1 %v3_1000ada3, false
  br i1 %v2_1000ada5, label %dec_label_pc_1000adb0, label %dec_label_pc_1000ada7

dec_label_pc_1000ada7:                            ; preds = %dec_label_pc_1000ad8a
  %sext17 = mul i32 %v3_1000ad93, 65536
  %v4_1000ad9f = sdiv i32 %sext17, 65536
  %v4_1000ada7 = or i32 %v4_1000ad9f, 65535
  br label %dec_label_pc_1000b00f

dec_label_pc_1000adb0:                            ; preds = %dec_label_pc_1000ad8a
  %v2_1000adb8 = call i32 @SetNumCells(i32 %arg1, i32 %arg9)
  %v3_1000adb8 = trunc i32 %v2_1000adb8 to i16
  %sext19 = mul i32 %v2_1000adb8, 65536
  %v4_1000adc4 = sdiv i32 %sext19, 65536
  store i32 %v4_1000adc4, i32* @ecx, align 4
  %v2_1000adc8 = icmp eq i16 %v3_1000adb8, 0
  br i1 %v2_1000adc8, label %dec_label_pc_1000ade7, label %dec_label_pc_1000adcc

dec_label_pc_1000adcc:                            ; preds = %dec_label_pc_1000adb0
  %tmp109 = icmp eq i32 %sext19, -196608
  %v1_1000add3 = icmp eq i1 %tmp109, false
  br i1 %v1_1000add3, label %dec_label_pc_1000adde, label %dec_label_pc_1000add5

dec_label_pc_1000add5:                            ; preds = %dec_label_pc_1000adcc
  %v4_1000add5 = and i32 %v2_1000adb8, 65535
  %v7_1000add5 = and i32 %v4_1000adc4, -65536
  %v8_1000add5 = or i32 %v7_1000add5, %v4_1000add5
  br label %dec_label_pc_1000b00f

dec_label_pc_1000adde:                            ; preds = %dec_label_pc_1000adcc
  %v4_1000adde = or i32 %v4_1000adc4, 65535
  br label %dec_label_pc_1000b00f

dec_label_pc_1000ade7:                            ; preds = %dec_label_pc_1000adb0
  %v2_1000adea = add i32 %v15_1000ab67, -4
  %v3_1000adea = inttoptr i32 %v2_1000adea to i32*
  store i32 %arg1, i32* %v3_1000adea, align 4
  %v2_1000adeb = call i32 @RdNumSwpPts(i32 %v4_1000adc4)
  %v0_1000adf0 = load i32, i32* @esp, align 4
  %factor = mul i32 %v2_1000adeb, 2
  %v3_1000adf9 = add i32 %factor, 2
  %v3_1000adfd = inttoptr i32 %v0_1000adf0 to i32*
  store i32 %v3_1000adf9, i32* %v3_1000adfd, align 4
  %v1_1000adfe = call i32 @function_1000da64(i32 %v2_1000adeb)
  %v0_1000ae03 = load i32, i32* @esp, align 4
  %v3_1000ae10 = inttoptr i32 %v0_1000ae03 to i32*
  store i32 %v3_1000adf9, i32* %v3_1000ae10, align 4
  %v1_1000ae11 = call i32 @function_1000da64(i32 %v1_1000adfe)
  store i32 %v1_1000ae11, i32* @eax, align 4
  %v0_1000ae16 = load i32, i32* @esp, align 4
  %v4_1000ae1c = icmp eq i32 %v1_1000adfe, 0
  br i1 %v4_1000ae1c, label %dec_label_pc_1000ae28, label %dec_label_pc_1000ae22

dec_label_pc_1000ae22:                            ; preds = %dec_label_pc_1000ade7
  %v4_1000ae22 = icmp eq i32 %v1_1000ae11, 0
  %v1_1000ae26 = icmp eq i1 %v4_1000ae22, false
  br i1 %v1_1000ae26, label %dec_label_pc_1000ae31, label %dec_label_pc_1000ae28

dec_label_pc_1000ae28:                            ; preds = %dec_label_pc_1000ae22, %dec_label_pc_1000ade7
  %v2_1000ae28 = or i32 %v1_1000ae11, 65535
  br label %dec_label_pc_1000b00f

dec_label_pc_1000ae31:                            ; preds = %dec_label_pc_1000ae22
  %v2_1000ae31 = inttoptr i32 %v0_1000ae16 to i32*
  store i32 0, i32* %v2_1000ae31, align 4
  %v2_1000ae36 = add i32 %v0_1000ae16, -4
  %v3_1000ae36 = inttoptr i32 %v2_1000ae36 to i32*
  store i32 %arg1, i32* %v3_1000ae36, align 4
  %v1_1000ae37 = load i32, i32* %stack_var_-4, align 4
  %v2_1000ae37 = trunc i32 %v1_1000ae37 to i16
  %v3_1000ae37 = call i32 @BreakSweep(i32 %v1_1000ae11, i16 %v2_1000ae37)
  %v0_1000ae3c = load i32, i32* @esp, align 4
  %v1_1000ae3c = add i32 %v0_1000ae3c, 8
  %sext24 = mul i32 %v3_1000ae37, 65536
  %tmp110 = icmp eq i32 %sext24, 4259840
  br i1 %tmp110, label %dec_label_pc_1000ae57, label %dec_label_pc_1000aff3

dec_label_pc_1000ae57:                            ; preds = %dec_label_pc_1000ae31
  %v2_1000ae5a = add i32 %v0_1000ae3c, 4
  %v3_1000ae5a = inttoptr i32 %v2_1000ae5a to i32*
  store i32 %arg1, i32* %v3_1000ae5a, align 4
  %v2_1000ae5b = call i32 @StartSweep(i32 65)
  %v0_1000ae60 = load i32, i32* @esp, align 4
  %v1_1000ae60 = add i32 %v0_1000ae60, 4
  %sext26 = mul i32 %v2_1000ae5b, 65536
  %tmp111 = icmp eq i32 %sext26, 4259840
  br i1 %tmp111, label %dec_label_pc_1000ae7b, label %dec_label_pc_1000aff3

dec_label_pc_1000ae7b:                            ; preds = %dec_label_pc_1000ae57, %dec_label_pc_1000aeab
  %v1_1000ae7e = phi i32 [ %v1_1000aeb4, %dec_label_pc_1000aeab ], [ %v1_1000ae60, %dec_label_pc_1000ae57 ]
  %v2_1000ae7e = add i32 %v1_1000ae7e, -4
  %v3_1000ae7e = inttoptr i32 %v2_1000ae7e to i32*
  store i32 %arg14, i32* %v3_1000ae7e, align 4
  %v2_1000ae82 = add i32 %v1_1000ae7e, -8
  %v3_1000ae82 = inttoptr i32 %v2_1000ae82 to i32*
  store i32 %arg13, i32* %v3_1000ae82, align 4
  %v2_1000ae86 = add i32 %v1_1000ae7e, -12
  %v3_1000ae86 = inttoptr i32 %v2_1000ae86 to i32*
  store i32 %v1_1000ae11, i32* %v3_1000ae86, align 4
  %v2_1000ae8a = add i32 %v1_1000ae7e, -16
  %v3_1000ae8a = inttoptr i32 %v2_1000ae8a to i32*
  store i32 %v1_1000adfe, i32* %v3_1000ae8a, align 4
  %v2_1000ae8e = add i32 %v1_1000ae7e, -20
  %v3_1000ae8e = inttoptr i32 %v2_1000ae8e to i32*
  store i32 %arg1, i32* %v3_1000ae8e, align 4
  %v0_1000ae8f = call i32 @GetMinMaxAmplWithFreqExt()
  %v1_1000ae8f = trunc i32 %v0_1000ae8f to i16
  %v0_1000ae94 = load i32, i32* @esp, align 4
  %v1_1000ae9f = icmp eq i16 %v1_1000ae8f, 0
  br i1 %v1_1000ae9f, label %dec_label_pc_1000aeab, label %dec_label_pc_1000aec2

dec_label_pc_1000aeab:                            ; preds = %dec_label_pc_1000ae7b
  %sext27 = mul i32 %v0_1000ae8f, 65536
  %v4_1000ae9b = sdiv i32 %sext27, 65536
  %v2_1000aeae = add i32 %v0_1000ae94, 16
  %v3_1000aeae = inttoptr i32 %v2_1000aeae to i32*
  store i32 %arg1, i32* %v3_1000aeae, align 4
  %v2_1000aeaf = call i32 @RdSwpIdx(i32 %v4_1000ae9b)
  %v0_1000aeb4 = load i32, i32* @esp, align 4
  %v1_1000aeb4 = add i32 %v0_1000aeb4, 4
  %v5_1000aec0 = icmp slt i32 %v2_1000aeaf, %v2_1000adeb
  br i1 %v5_1000aec0, label %dec_label_pc_1000ae7b, label %dec_label_pc_1000aec2.thread

dec_label_pc_1000aec2.thread:                     ; preds = %dec_label_pc_1000aeab
  %v5_1000aee751 = icmp sgt i32 %v2_1000adeb, 0
  br i1 %v5_1000aee751, label %dec_label_pc_1000aeed.lr.ph, label %dec_label_pc_1000afe7

dec_label_pc_1000aeed.lr.ph:                      ; preds = %dec_label_pc_1000aec2.thread
  %v3_1000af1e = trunc i32 %v1_1000adfe to i16
  %v8_1000af15 = and i32 %v4_1000abf5, -65536
  %v8_1000af35 = and i32 %arg11, -65536
  %v13_1000aefa = icmp eq i16 %tmp, 1
  %v13_1000af00 = icmp eq i16 %tmp, 2
  br label %dec_label_pc_1000aeed

dec_label_pc_1000aec2:                            ; preds = %dec_label_pc_1000ae7b
  %v1_1000ae94 = add i32 %v0_1000ae94, 20
  br label %dec_label_pc_1000aff3

dec_label_pc_1000aeed:                            ; preds = %dec_label_pc_1000afe2, %dec_label_pc_1000aeed.lr.ph
  %v1_1000af19 = phi i32 [ %v1_1000aeb4, %dec_label_pc_1000aeed.lr.ph ], [ %v1_1000afac58, %dec_label_pc_1000afe2 ]
  %storemerge452 = phi i32 [ 0, %dec_label_pc_1000aeed.lr.ph ], [ %v1_1000aedb, %dec_label_pc_1000afe2 ]
  store i16 %tmp, i16* %stack_var_-40, align 2
  br i1 %v2_1000abf9, label %dec_label_pc_1000af0f, label %dec_label_pc_1000aefa

dec_label_pc_1000aefa:                            ; preds = %dec_label_pc_1000aeed
  br i1 %v13_1000aefa, label %dec_label_pc_1000af54, label %dec_label_pc_1000af00

dec_label_pc_1000af00:                            ; preds = %dec_label_pc_1000aefa
  br i1 %v13_1000af00, label %dec_label_pc_1000afa2, label %dec_label_pc_1000afe2

dec_label_pc_1000af0f:                            ; preds = %dec_label_pc_1000aeed
  %v2_1000af15 = mul nuw i32 %storemerge452, 2
  %v3_1000af15 = add i32 %v2_1000af15, %v1_1000adfe
  %v4_1000af15 = inttoptr i32 %v3_1000af15 to i16*
  %v5_1000af15 = load i16, i16* %v4_1000af15, align 2
  %v6_1000af15 = zext i16 %v5_1000af15 to i32
  %v9_1000af15 = or i32 %v6_1000af15, %v8_1000af15
  %v2_1000af19 = add i32 %v1_1000af19, -4
  %v3_1000af19 = inttoptr i32 %v2_1000af19 to i32*
  store i32 %v9_1000af15, i32* %v3_1000af19, align 4
  %v2_1000af1d = add i32 %v1_1000af19, -8
  %v3_1000af1d = inttoptr i32 %v2_1000af1d to i32*
  store i32 %arg1, i32* %v3_1000af1d, align 4
  %v4_1000af1e = call i32 @GetDbmForAmpl(i32 0, i16 %v3_1000af1e)
  %v0_1000af23 = load i32, i32* @esp, align 4
  %v0_1000af2c = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000af2c = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000af2c = mul i32 %storemerge452, 8
  %v5_1000af2c = add i32 %v4_1000af2c, %arg11
  %v6_1000af2c = fptrunc x86_fp80 %v1_1000af2c to double
  %v7_1000af2c = inttoptr i32 %v5_1000af2c to double*
  store double %v6_1000af2c, double* %v7_1000af2c, align 4
  %v8_1000af2c = add i3 %v0_1000af2c, 1
  store i3 %v8_1000af2c, i3* @fpu_stat_TOP, align 1
  %v3_1000af35 = add i32 %v2_1000af15, %v1_1000ae11
  %v4_1000af35 = inttoptr i32 %v3_1000af35 to i16*
  %v5_1000af35 = load i16, i16* %v4_1000af35, align 2
  %v6_1000af35 = zext i16 %v5_1000af35 to i32
  %v9_1000af35 = or i32 %v6_1000af35, %v8_1000af35
  %v2_1000af39 = add i32 %v0_1000af23, 4
  %v3_1000af39 = inttoptr i32 %v2_1000af39 to i32*
  store i32 %v9_1000af35, i32* %v3_1000af39, align 4
  %v3_1000af3d = inttoptr i32 %v0_1000af23 to i32*
  store i32 %arg1, i32* %v3_1000af3d, align 4
  %v0_1000af3e = load i16, i16* %stack_var_-40, align 2
  %v1_1000af3e = sext i16 %v0_1000af3e to i32
  %v4_1000af3e = call i32 @GetDbmForAmpl(i32 %v1_1000af3e, i16 %v3_1000af1e)
  %v0_1000af43 = load i32, i32* @esp, align 4
  %v1_1000af43 = add i32 %v0_1000af43, 8
  %v0_1000af4c = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000af4c = load x86_fp80, x86_fp80* @st0, align 4
  %v5_1000af4c = add i32 %v4_1000af2c, %arg12
  %v6_1000af4c = fptrunc x86_fp80 %v1_1000af4c to double
  %v7_1000af4c = inttoptr i32 %v5_1000af4c to double*
  store double %v6_1000af4c, double* %v7_1000af4c, align 4
  %v8_1000af4c = add i3 %v0_1000af4c, 1
  store i3 %v8_1000af4c, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000afe2

dec_label_pc_1000af54:                            ; preds = %dec_label_pc_1000aefa
  %v2_1000af5a = mul nuw i32 %storemerge452, 2
  %v3_1000af5a = add i32 %v2_1000af5a, %v1_1000adfe
  %v4_1000af5a = inttoptr i32 %v3_1000af5a to i16*
  %v5_1000af5a = load i16, i16* %v4_1000af5a, align 2
  %v6_1000af5a = zext i16 %v5_1000af5a to i32
  %v9_1000af5a = or i32 %v6_1000af5a, %v8_1000af15
  %v2_1000af5e = add i32 %v1_1000af19, -4
  %v3_1000af5e = inttoptr i32 %v2_1000af5e to i32*
  store i32 %v9_1000af5a, i32* %v3_1000af5e, align 4
  %v2_1000af62 = add i32 %v1_1000af19, -8
  %v3_1000af62 = inttoptr i32 %v2_1000af62 to i32*
  store i32 %arg1, i32* %v3_1000af62, align 4
  %v4_1000af63 = call i32 @GetnVForAmpl(i32 %v4_1000abf5, i16 %v3_1000af1e)
  %v0_1000af68 = load i32, i32* @esp, align 4
  %v3_1000af6b = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000af6b = fdiv x86_fp80 0xK4008FA00000000000000, %v3_1000af6b
  %v0_1000af77 = load i3, i3* @fpu_stat_TOP, align 1
  %v4_1000af77 = mul i32 %storemerge452, 8
  %v5_1000af77 = add i32 %v4_1000af77, %arg11
  %v6_1000af77 = fptrunc x86_fp80 %v4_1000af6b to double
  %v7_1000af77 = inttoptr i32 %v5_1000af77 to double*
  store double %v6_1000af77, double* %v7_1000af77, align 4
  %v8_1000af77 = add i3 %v0_1000af77, 1
  store i3 %v8_1000af77, i3* @fpu_stat_TOP, align 1
  %v3_1000af80 = add i32 %v2_1000af5a, %v1_1000ae11
  %v4_1000af80 = inttoptr i32 %v3_1000af80 to i16*
  %v5_1000af80 = load i16, i16* %v4_1000af80, align 2
  %v6_1000af80 = zext i16 %v5_1000af80 to i32
  %v9_1000af80 = or i32 %v6_1000af80, %v8_1000af35
  %v2_1000af84 = add i32 %v0_1000af68, 4
  %v3_1000af84 = inttoptr i32 %v2_1000af84 to i32*
  store i32 %v9_1000af80, i32* %v3_1000af84, align 4
  %v3_1000af88 = inttoptr i32 %v0_1000af68 to i32*
  store i32 %arg1, i32* %v3_1000af88, align 4
  %v0_1000af89 = load i16, i16* %stack_var_-40, align 2
  %v1_1000af89 = sext i16 %v0_1000af89 to i32
  %v4_1000af89 = call i32 @GetnVForAmpl(i32 %v1_1000af89, i16 %v3_1000af1e)
  %v0_1000af8e = load i32, i32* @esp, align 4
  %v1_1000af8e = add i32 %v0_1000af8e, 8
  %v3_1000af91 = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000af91 = fdiv x86_fp80 0xK4008FA00000000000000, %v3_1000af91
  %v0_1000af9d = load i3, i3* @fpu_stat_TOP, align 1
  %v5_1000af9d = add i32 %v4_1000af77, %arg12
  %v6_1000af9d = fptrunc x86_fp80 %v4_1000af91 to double
  %v7_1000af9d = inttoptr i32 %v5_1000af9d to double*
  store double %v6_1000af9d, double* %v7_1000af9d, align 4
  %v8_1000af9d = add i3 %v0_1000af9d, 1
  store i3 %v8_1000af9d, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000afe2

dec_label_pc_1000afa2:                            ; preds = %dec_label_pc_1000af00
  %v2_1000afa8 = mul nuw i32 %storemerge452, 2
  %v3_1000afa8 = add i32 %v2_1000afa8, %v1_1000adfe
  %v4_1000afa8 = inttoptr i32 %v3_1000afa8 to i16*
  %v5_1000afa8 = load i16, i16* %v4_1000afa8, align 2
  %v6_1000afa8 = zext i16 %v5_1000afa8 to i32
  %v9_1000afa8 = or i32 %v6_1000afa8, %v8_1000af15
  %v2_1000afac = add i32 %v1_1000af19, -4
  %v3_1000afac = inttoptr i32 %v2_1000afac to i32*
  store i32 %v9_1000afa8, i32* %v3_1000afac, align 4
  %v2_1000afb0 = add i32 %v1_1000af19, -8
  %v3_1000afb0 = inttoptr i32 %v2_1000afb0 to i32*
  store i32 %arg1, i32* %v3_1000afb0, align 4
  %v4_1000afb1 = call i32 @GetnVForAmpl(i32 %v4_1000abf5, i16 %v3_1000af1e)
  %v0_1000afb6 = load i32, i32* @esp, align 4
  %v0_1000afbf = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000afbf = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000afbf = mul i32 %storemerge452, 8
  %v5_1000afbf = add i32 %v4_1000afbf, %arg11
  %v6_1000afbf = fptrunc x86_fp80 %v1_1000afbf to double
  %v7_1000afbf = inttoptr i32 %v5_1000afbf to double*
  store double %v6_1000afbf, double* %v7_1000afbf, align 4
  %v8_1000afbf = add i3 %v0_1000afbf, 1
  store i3 %v8_1000afbf, i3* @fpu_stat_TOP, align 1
  %v3_1000afc8 = add i32 %v2_1000afa8, %v1_1000ae11
  %v4_1000afc8 = inttoptr i32 %v3_1000afc8 to i16*
  %v5_1000afc8 = load i16, i16* %v4_1000afc8, align 2
  %v6_1000afc8 = zext i16 %v5_1000afc8 to i32
  %v9_1000afc8 = or i32 %v6_1000afc8, %v8_1000af35
  %v2_1000afcc = add i32 %v0_1000afb6, 4
  %v3_1000afcc = inttoptr i32 %v2_1000afcc to i32*
  store i32 %v9_1000afc8, i32* %v3_1000afcc, align 4
  %v3_1000afd0 = inttoptr i32 %v0_1000afb6 to i32*
  store i32 %arg1, i32* %v3_1000afd0, align 4
  %v0_1000afd1 = load i16, i16* %stack_var_-40, align 2
  %v1_1000afd1 = sext i16 %v0_1000afd1 to i32
  %v4_1000afd1 = call i32 @GetnVForAmpl(i32 %v1_1000afd1, i16 %v3_1000af1e)
  %v0_1000afd6 = load i32, i32* @esp, align 4
  %v1_1000afd6 = add i32 %v0_1000afd6, 8
  %v0_1000afdf = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000afdf = load x86_fp80, x86_fp80* @st0, align 4
  %v5_1000afdf = add i32 %v4_1000afbf, %arg12
  %v6_1000afdf = fptrunc x86_fp80 %v1_1000afdf to double
  %v7_1000afdf = inttoptr i32 %v5_1000afdf to double*
  store double %v6_1000afdf, double* %v7_1000afdf, align 4
  %v8_1000afdf = add i3 %v0_1000afdf, 1
  store i3 %v8_1000afdf, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000afe2

dec_label_pc_1000afe2:                            ; preds = %dec_label_pc_1000af00, %dec_label_pc_1000af54, %dec_label_pc_1000af0f, %dec_label_pc_1000afa2
  %v1_1000afac58 = phi i32 [ %v1_1000af19, %dec_label_pc_1000af00 ], [ %v1_1000af8e, %dec_label_pc_1000af54 ], [ %v1_1000af43, %dec_label_pc_1000af0f ], [ %v1_1000afd6, %dec_label_pc_1000afa2 ]
  %v1_1000aedb = add nuw nsw i32 %storemerge452, 1
  %exitcond = icmp eq i32 %v1_1000aedb, %v2_1000adeb
  br i1 %exitcond, label %dec_label_pc_1000afe7, label %dec_label_pc_1000aeed

dec_label_pc_1000afe7:                            ; preds = %dec_label_pc_1000afe2, %dec_label_pc_1000aec2.thread
  %v1_1000aff660 = phi i32 [ %v1_1000aeb4, %dec_label_pc_1000aec2.thread ], [ %v1_1000afac58, %dec_label_pc_1000afe2 ]
  br label %dec_label_pc_1000aff3

dec_label_pc_1000aff3:                            ; preds = %dec_label_pc_1000aec2, %dec_label_pc_1000ae57, %dec_label_pc_1000ae31, %dec_label_pc_1000afe7
  %v1_1000aff6 = phi i32 [ %v1_1000aff660, %dec_label_pc_1000afe7 ], [ %v1_1000ae94, %dec_label_pc_1000aec2 ], [ %v1_1000ae3c, %dec_label_pc_1000ae31 ], [ %v1_1000ae60, %dec_label_pc_1000ae57 ]
  %stack_var_-24.2 = phi i32 [ 0, %dec_label_pc_1000afe7 ], [ 65535, %dec_label_pc_1000aec2 ], [ 65535, %dec_label_pc_1000ae31 ], [ 65535, %dec_label_pc_1000ae57 ]
  %v2_1000aff6 = add i32 %v1_1000aff6, -4
  %v3_1000aff6 = inttoptr i32 %v2_1000aff6 to i32*
  store i32 %v1_1000adfe, i32* %v3_1000aff6, align 4
  %v0_1000aff7 = load i16, i16* %stack_var_-40, align 2
  %v1_1000aff7 = sext i16 %v0_1000aff7 to i32
  %v2_1000aff7 = call i32 @function_1000d97b(i32 %v1_1000aff7)
  %v0_1000affc = load i32, i32* @esp, align 4
  %v3_1000b002 = inttoptr i32 %v0_1000affc to i32*
  store i32 %v1_1000ae11, i32* %v3_1000b002, align 4
  %v0_1000b003 = load i16, i16* %stack_var_-40, align 2
  %v1_1000b003 = sext i16 %v0_1000b003 to i32
  %v2_1000b003 = call i32 @function_1000d97b(i32 %v1_1000b003)
  %v6_1000b00b = and i32 %v2_1000b003, -65536
  %v7_1000b00b = or i32 %v6_1000b00b, %stack_var_-24.2
  br label %dec_label_pc_1000b00f

dec_label_pc_1000b00f:                            ; preds = %dec_label_pc_1000ae28, %dec_label_pc_1000adde, %dec_label_pc_1000add5, %dec_label_pc_1000ada7, %dec_label_pc_1000ad81, %dec_label_pc_1000ad44, %dec_label_pc_1000ad3b, %dec_label_pc_1000ad0c, %dec_label_pc_1000ace7, %dec_label_pc_1000acbb, %dec_label_pc_1000acb2, %dec_label_pc_1000ac83, %dec_label_pc_1000ac5e, %dec_label_pc_1000ac32, %dec_label_pc_1000ac0f, %dec_label_pc_1000abec, %dec_label_pc_1000abc8, %dec_label_pc_1000aba4, %dec_label_pc_1000ab8e, %dec_label_pc_1000aff3
  %v0_1000b012 = phi i32 [ %v2_1000ae28, %dec_label_pc_1000ae28 ], [ %v4_1000adde, %dec_label_pc_1000adde ], [ %v8_1000add5, %dec_label_pc_1000add5 ], [ %v4_1000ada7, %dec_label_pc_1000ada7 ], [ %v4_1000ad81, %dec_label_pc_1000ad81 ], [ %v2_1000ad44, %dec_label_pc_1000ad44 ], [ %v7_1000ad3b, %dec_label_pc_1000ad3b ], [ %v4_1000ad0c, %dec_label_pc_1000ad0c ], [ %v4_1000ace7, %dec_label_pc_1000ace7 ], [ %v2_1000acbb, %dec_label_pc_1000acbb ], [ %v7_1000acb2, %dec_label_pc_1000acb2 ], [ %v4_1000ac83, %dec_label_pc_1000ac83 ], [ %v4_1000ac5e, %dec_label_pc_1000ac5e ], [ %v4_1000ac32, %dec_label_pc_1000ac32 ], [ %v2_1000ac0f, %dec_label_pc_1000ac0f ], [ %v2_1000abec, %dec_label_pc_1000abec ], [ %v2_1000abc8, %dec_label_pc_1000abc8 ], [ %v2_1000aba4, %dec_label_pc_1000aba4 ], [ %v2_1000ab8e, %dec_label_pc_1000ab8e ], [ %v7_1000b00b, %dec_label_pc_1000aff3 ]
  ret i32 %v0_1000b012

; uselistorder directives
  uselistorder i32 %v0_1000afb6, { 1, 0 }
  uselistorder i32 %v0_1000af68, { 1, 0 }
  uselistorder i32 %v0_1000af23, { 1, 0 }
  uselistorder i32 %storemerge452, { 2, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_1000af19, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i16 %v3_1000af1e, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v0_1000ae94, { 1, 0 }
  uselistorder i32 %v1_1000ae7e, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_1000ae60, { 1, 0 }
  uselistorder i32 %v1_1000ae11, { 3, 0, 1, 2, 4, 5, 7, 6, 8 }
  uselistorder i32 %v1_1000adfe, { 3, 0, 1, 2, 4, 5, 6, 7 }
  uselistorder i32 %v2_1000adeb, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v4_1000adc4, { 1, 2, 3, 0 }
  uselistorder i32 %v2_1000adb8, { 1, 0, 2 }
  uselistorder i32 %v4_1000ad2a, { 1, 0 }
  uselistorder i32 %v3_1000ad1e, { 1, 0, 2 }
  uselistorder i32 %v4_1000aca1, { 1, 0 }
  uselistorder i32 %v3_1000ac95, { 1, 0, 2 }
  uselistorder i32 %v4_1000abf5, { 2, 3, 1, 0 }
  uselistorder i32 %v4_1000abdd, { 1, 0 }
  uselistorder i32 %v1_1000abc1, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i16* %stack_var_-40, { 5, 6, 3, 4, 2, 1, 0 }
  uselistorder i16 %tmp, { 3, 0, 1, 2 }
  uselistorder i32 %arg14, { 1, 0 }
  uselistorder i32 %arg13, { 1, 0 }
  uselistorder i32 %arg6, { 1, 0 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000b00f, { 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder label %dec_label_pc_1000aff3, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1000afe2, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_1000ae7b, { 1, 0 }
  uselistorder label %dec_label_pc_1000ad4d, { 1, 0 }
  uselistorder label %dec_label_pc_1000acc4, { 1, 0 }
}

define i32 @MeasureMinMaxAmpl(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg10 to i16
  %tmp67 = trunc i32 %arg3 to i16
  %tmp68 = call i32 @__decompiler_undefined_function_1()
  %tmp69 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-40 = alloca i16, align 2
  %stack_var_-4 = alloca i32, align 4
  %v0_1000b013 = load i32, i32* @ebp, align 4
  store i32 %v0_1000b013, i32* %stack_var_-4, align 4
  %v4_1000b013 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000b013, i32* @ebp, align 4
  %v15_1000b016 = ptrtoint i16* %stack_var_-40 to i32
  %v4_1000b025 = icmp eq i32 %arg11, 0
  br i1 %v4_1000b025, label %dec_label_pc_1000b031, label %dec_label_pc_1000b02b

dec_label_pc_1000b02b:                            ; preds = %entry
  %v4_1000b02b = icmp eq i32 %arg12, 0
  %v1_1000b02f = icmp eq i1 %v4_1000b02b, false
  br i1 %v1_1000b02f, label %dec_label_pc_1000b03a, label %dec_label_pc_1000b031

dec_label_pc_1000b031:                            ; preds = %dec_label_pc_1000b02b, %entry
  %v0_1000b031 = load i32, i32* @eax, align 4
  %v1_1000b031 = and i32 %v0_1000b031, -65536
  %v2_1000b031 = or i32 %v1_1000b031, 65533
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b03a:                            ; preds = %dec_label_pc_1000b02b
  %v0_1000b042 = load i32, i32* @eax, align 4
  %v3_1000b042 = and i32 %v0_1000b042, 16640
  %v4_1000b042 = icmp eq i32 %v3_1000b042, 0
  %v1_1000b045 = icmp eq i1 %v4_1000b042, false
  br i1 %v1_1000b045, label %dec_label_pc_1000b050, label %dec_label_pc_1000b047

dec_label_pc_1000b047:                            ; preds = %dec_label_pc_1000b03a
  %v1_1000b047 = and i32 %v0_1000b042, -65536
  %v2_1000b047 = or i32 %v1_1000b047, 65531
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b050:                            ; preds = %dec_label_pc_1000b03a
  %v2_1000b05c = sext i32 %arg4 to i64
  %v3_1000b05c = bitcast i64 %v2_1000b05c to double
  %v4_1000b05c = call i32 @FreqInRange(i32 %arg1, double %v3_1000b05c)
  %v1_1000b064 = mul i32 %v4_1000b05c, 65536
  %v1_1000b064.off = or i32 %v1_1000b064, 65535
  %tmp100 = icmp ult i32 %v1_1000b064.off, 131071
  %v1_1000b069 = icmp eq i1 %tmp100, false
  br i1 %v1_1000b069, label %dec_label_pc_1000b074, label %dec_label_pc_1000b06b

dec_label_pc_1000b06b:                            ; preds = %dec_label_pc_1000b050
  %v2_1000b064 = sdiv i32 %v1_1000b064, 65536
  %v1_1000b06b = and i32 %v2_1000b064, -65536
  %v2_1000b06b = or i32 %v1_1000b06b, 65533
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b074:                            ; preds = %dec_label_pc_1000b050
  %v2_1000b080 = sext i32 %arg6 to i64
  %v3_1000b080 = bitcast i64 %v2_1000b080 to double
  %v4_1000b080 = call i32 @FreqInRange(i32 %arg1, double %v3_1000b080)
  %v1_1000b088 = mul i32 %v4_1000b080, 65536
  %v1_1000b088.off = or i32 %v1_1000b088, 65535
  %tmp101 = icmp ult i32 %v1_1000b088.off, 131071
  %v1_1000b08d = icmp eq i1 %tmp101, false
  br i1 %v1_1000b08d, label %dec_label_pc_1000b098, label %dec_label_pc_1000b08f

dec_label_pc_1000b08f:                            ; preds = %dec_label_pc_1000b074
  %v1_1000b08f = and i32 %v4_1000b080, -65536
  %v2_1000b08f = or i32 %v1_1000b08f, 65533
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b098:                            ; preds = %dec_label_pc_1000b074
  %sext = mul i32 %arg10, 65536
  %v4_1000b098 = sdiv i32 %sext, 65536
  %v2_1000b09c = icmp eq i16 %tmp, 0
  br i1 %v2_1000b09c, label %dec_label_pc_1000b0bb, label %dec_label_pc_1000b0a0

dec_label_pc_1000b0a0:                            ; preds = %dec_label_pc_1000b098
  %tmp102 = icmp eq i32 %sext, 65536
  br i1 %tmp102, label %dec_label_pc_1000b0bb, label %dec_label_pc_1000b0a9

dec_label_pc_1000b0a9:                            ; preds = %dec_label_pc_1000b0a0
  %tmp103 = icmp eq i32 %sext, 131072
  br i1 %tmp103, label %dec_label_pc_1000b0bb, label %dec_label_pc_1000b0b2

dec_label_pc_1000b0b2:                            ; preds = %dec_label_pc_1000b0a9
  %v1_1000b0b2 = and i32 %v4_1000b098, -65536
  %v2_1000b0b2 = or i32 %v1_1000b0b2, 65533
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b0bb:                            ; preds = %dec_label_pc_1000b0a9, %dec_label_pc_1000b0a0, %dec_label_pc_1000b098
  %v3_1000b0c1 = call i32 @SetSweepCode(i32 %arg1, i16 7)
  %v4_1000b0c1 = trunc i32 %v3_1000b0c1 to i16
  %v2_1000b0d1 = icmp eq i16 %v4_1000b0c1, 0
  br i1 %v2_1000b0d1, label %dec_label_pc_1000b0de, label %dec_label_pc_1000b0d5

dec_label_pc_1000b0d5:                            ; preds = %dec_label_pc_1000b0bb
  %sext8 = mul i32 %v3_1000b0c1, 65536
  %v4_1000b0cd = sdiv i32 %sext8, 65536
  %v4_1000b0d5 = or i32 %v4_1000b0cd, 65535
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b0de:                            ; preds = %dec_label_pc_1000b0bb
  %v9_1000b0e2 = icmp eq i16 %arg2, 5
  %v1_1000b0e5 = icmp eq i1 %v9_1000b0e2, false
  br i1 %v1_1000b0e5, label %dec_label_pc_1000b10c, label %dec_label_pc_1000b0e7

dec_label_pc_1000b0e7:                            ; preds = %dec_label_pc_1000b0de
  %v3_1000b0ed = call i32 @SetRBWmode(i32 %arg1, i16 1)
  %v4_1000b0ed = trunc i32 %v3_1000b0ed to i16
  %v2_1000b0fd = icmp eq i16 %v4_1000b0ed, 0
  br i1 %v2_1000b0fd, label %dec_label_pc_1000b167, label %dec_label_pc_1000b101

dec_label_pc_1000b101:                            ; preds = %dec_label_pc_1000b0e7
  %sext10 = mul i32 %v3_1000b0ed, 65536
  %v4_1000b0f9 = sdiv i32 %sext10, 65536
  %v4_1000b101 = or i32 %v4_1000b0f9, 65535
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b10c:                            ; preds = %dec_label_pc_1000b0de
  %v3_1000b112 = call i32 @SetRBWmode(i32 %arg1, i16 0)
  %v4_1000b112 = trunc i32 %v3_1000b112 to i16
  %v2_1000b122 = icmp eq i16 %v4_1000b112, 0
  br i1 %v2_1000b122, label %dec_label_pc_1000b12f, label %dec_label_pc_1000b126

dec_label_pc_1000b126:                            ; preds = %dec_label_pc_1000b10c
  %sext36 = mul i32 %v3_1000b112, 65536
  %v4_1000b11e = sdiv i32 %sext36, 65536
  %v4_1000b126 = or i32 %v4_1000b11e, 65535
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b12f:                            ; preds = %dec_label_pc_1000b10c
  %v3_1000b138 = call i32 @SetRBW(i32 %arg1, i16 %arg2)
  %v4_1000b138 = trunc i32 %v3_1000b138 to i16
  %sext39 = mul i32 %v3_1000b138, 65536
  %v4_1000b144 = sdiv i32 %sext39, 65536
  %v2_1000b148 = icmp eq i16 %v4_1000b138, 0
  br i1 %v2_1000b148, label %dec_label_pc_1000b167, label %dec_label_pc_1000b14c

dec_label_pc_1000b14c:                            ; preds = %dec_label_pc_1000b12f
  %tmp104 = icmp eq i32 %sext39, -196608
  %v1_1000b153 = icmp eq i1 %tmp104, false
  br i1 %v1_1000b153, label %dec_label_pc_1000b15e, label %dec_label_pc_1000b155

dec_label_pc_1000b155:                            ; preds = %dec_label_pc_1000b14c
  %v4_1000b155 = and i32 %v3_1000b138, 65535
  %v6_1000b155 = and i32 %v4_1000b144, -65536
  %v7_1000b155 = or i32 %v6_1000b155, %v4_1000b155
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b15e:                            ; preds = %dec_label_pc_1000b14c
  %v2_1000b15e = or i32 %v4_1000b144, 65535
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b167:                            ; preds = %dec_label_pc_1000b0e7, %dec_label_pc_1000b12f
  %sext12 = mul i32 %arg3, 65536
  %tmp105 = icmp eq i32 %sext12, 524288
  %v1_1000b16e = icmp eq i1 %tmp105, false
  br i1 %v1_1000b16e, label %dec_label_pc_1000b195, label %dec_label_pc_1000b170

dec_label_pc_1000b170:                            ; preds = %dec_label_pc_1000b167
  %v3_1000b176 = call i32 @SetVBWmode(i32 %arg1, i16 1)
  %v4_1000b176 = trunc i32 %v3_1000b176 to i16
  %v2_1000b186 = icmp eq i16 %v4_1000b176, 0
  br i1 %v2_1000b186, label %dec_label_pc_1000b1f0, label %dec_label_pc_1000b18a

dec_label_pc_1000b18a:                            ; preds = %dec_label_pc_1000b170
  %sext13 = mul i32 %v3_1000b176, 65536
  %v4_1000b182 = sdiv i32 %sext13, 65536
  %v4_1000b18a = or i32 %v4_1000b182, 65535
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b195:                            ; preds = %dec_label_pc_1000b167
  %v3_1000b19b = call i32 @SetVBWmode(i32 %arg1, i16 0)
  %v4_1000b19b = trunc i32 %v3_1000b19b to i16
  %v2_1000b1ab = icmp eq i16 %v4_1000b19b, 0
  br i1 %v2_1000b1ab, label %dec_label_pc_1000b1b8, label %dec_label_pc_1000b1af

dec_label_pc_1000b1af:                            ; preds = %dec_label_pc_1000b195
  %sext31 = mul i32 %v3_1000b19b, 65536
  %v4_1000b1a7 = sdiv i32 %sext31, 65536
  %v4_1000b1af = or i32 %v4_1000b1a7, 65535
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b1b8:                            ; preds = %dec_label_pc_1000b195
  store i32 %arg1, i32* @ecx, align 4
  %v3_1000b1c1 = call i32 @SetVBW(i32 %arg1, i16 %tmp67)
  %v4_1000b1c1 = trunc i32 %v3_1000b1c1 to i16
  %sext34 = mul i32 %v3_1000b1c1, 65536
  %v4_1000b1cd = sdiv i32 %sext34, 65536
  %v2_1000b1d1 = icmp eq i16 %v4_1000b1c1, 0
  br i1 %v2_1000b1d1, label %dec_label_pc_1000b1f0, label %dec_label_pc_1000b1d5

dec_label_pc_1000b1d5:                            ; preds = %dec_label_pc_1000b1b8
  %tmp106 = icmp eq i32 %sext34, -196608
  %v1_1000b1dc = icmp eq i1 %tmp106, false
  br i1 %v1_1000b1dc, label %dec_label_pc_1000b1e7, label %dec_label_pc_1000b1de

dec_label_pc_1000b1de:                            ; preds = %dec_label_pc_1000b1d5
  %v4_1000b1de = and i32 %v3_1000b1c1, 65535
  %v6_1000b1de = and i32 %v4_1000b1cd, -65536
  %v7_1000b1de = or i32 %v6_1000b1de, %v4_1000b1de
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b1e7:                            ; preds = %dec_label_pc_1000b1d5
  %v2_1000b1e7 = or i32 %v4_1000b1cd, 65535
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b1f0:                            ; preds = %dec_label_pc_1000b170, %dec_label_pc_1000b1b8
  %v3_1000b1fc = call i32 @ConfigStartFreq(i32 %arg1, i32 %arg4, i32 %arg5)
  %v3_1000b210 = call i32 @ConfigStopFreq(i32 %arg1, i32 %arg6, i32 %arg7)
  %v4_1000b210 = trunc i32 %v3_1000b210 to i16
  %v2_1000b220 = icmp eq i16 %v4_1000b210, 0
  br i1 %v2_1000b220, label %dec_label_pc_1000b22d, label %dec_label_pc_1000b224

dec_label_pc_1000b224:                            ; preds = %dec_label_pc_1000b1f0
  %sext15 = mul i32 %v3_1000b210, 65536
  %v4_1000b21c = sdiv i32 %sext15, 65536
  %v4_1000b224 = or i32 %v4_1000b21c, 65535
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b22d:                            ; preds = %dec_label_pc_1000b1f0
  %v2_1000b236 = trunc i32 %arg8 to i16
  %v3_1000b236 = call i32 @SetRefLevel(i32 %arg1, i16 %v2_1000b236)
  %v4_1000b236 = trunc i32 %v3_1000b236 to i16
  %v3_1000b246 = icmp slt i16 %v4_1000b236, 0
  %v2_1000b248 = icmp eq i1 %v3_1000b246, false
  br i1 %v2_1000b248, label %dec_label_pc_1000b253, label %dec_label_pc_1000b24a

dec_label_pc_1000b24a:                            ; preds = %dec_label_pc_1000b22d
  %sext17 = mul i32 %v3_1000b236, 65536
  %v4_1000b242 = sdiv i32 %sext17, 65536
  %v4_1000b24a = or i32 %v4_1000b242, 65535
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b253:                            ; preds = %dec_label_pc_1000b22d
  %v2_1000b25b = call i32 @SetNumCells(i32 %arg1, i32 %arg9)
  %v3_1000b25b = trunc i32 %v2_1000b25b to i16
  %sext19 = mul i32 %v2_1000b25b, 65536
  %v4_1000b267 = sdiv i32 %sext19, 65536
  store i32 %v4_1000b267, i32* @ecx, align 4
  %v2_1000b26b = icmp eq i16 %v3_1000b25b, 0
  br i1 %v2_1000b26b, label %dec_label_pc_1000b28a, label %dec_label_pc_1000b26f

dec_label_pc_1000b26f:                            ; preds = %dec_label_pc_1000b253
  %tmp107 = icmp eq i32 %sext19, -196608
  %v1_1000b276 = icmp eq i1 %tmp107, false
  br i1 %v1_1000b276, label %dec_label_pc_1000b281, label %dec_label_pc_1000b278

dec_label_pc_1000b278:                            ; preds = %dec_label_pc_1000b26f
  %v4_1000b278 = and i32 %v2_1000b25b, 65535
  %v7_1000b278 = and i32 %v4_1000b267, -65536
  %v8_1000b278 = or i32 %v7_1000b278, %v4_1000b278
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b281:                            ; preds = %dec_label_pc_1000b26f
  %v4_1000b281 = or i32 %v4_1000b267, 65535
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b28a:                            ; preds = %dec_label_pc_1000b253
  %v2_1000b28d = add i32 %v15_1000b016, -4
  %v3_1000b28d = inttoptr i32 %v2_1000b28d to i32*
  store i32 %arg1, i32* %v3_1000b28d, align 4
  %v2_1000b28e = call i32 @RdNumSwpPts(i32 %v4_1000b267)
  %v0_1000b293 = load i32, i32* @esp, align 4
  %factor = mul i32 %v2_1000b28e, 2
  %v3_1000b29c = add i32 %factor, 2
  %v3_1000b2a0 = inttoptr i32 %v0_1000b293 to i32*
  store i32 %v3_1000b29c, i32* %v3_1000b2a0, align 4
  %v1_1000b2a1 = call i32 @function_1000da64(i32 %v2_1000b28e)
  %v0_1000b2a6 = load i32, i32* @esp, align 4
  %v3_1000b2b3 = inttoptr i32 %v0_1000b2a6 to i32*
  store i32 %v3_1000b29c, i32* %v3_1000b2b3, align 4
  %v1_1000b2b4 = call i32 @function_1000da64(i32 %v1_1000b2a1)
  store i32 %v1_1000b2b4, i32* @eax, align 4
  %v0_1000b2b9 = load i32, i32* @esp, align 4
  %v4_1000b2bf = icmp eq i32 %v1_1000b2a1, 0
  br i1 %v4_1000b2bf, label %dec_label_pc_1000b2cb, label %dec_label_pc_1000b2c5

dec_label_pc_1000b2c5:                            ; preds = %dec_label_pc_1000b28a
  %v4_1000b2c5 = icmp eq i32 %v1_1000b2b4, 0
  %v1_1000b2c9 = icmp eq i1 %v4_1000b2c5, false
  br i1 %v1_1000b2c9, label %dec_label_pc_1000b2d4, label %dec_label_pc_1000b2cb

dec_label_pc_1000b2cb:                            ; preds = %dec_label_pc_1000b2c5, %dec_label_pc_1000b28a
  %v2_1000b2cb = or i32 %v1_1000b2b4, 65535
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b2d4:                            ; preds = %dec_label_pc_1000b2c5
  %v2_1000b2d4 = inttoptr i32 %v0_1000b2b9 to i32*
  store i32 0, i32* %v2_1000b2d4, align 4
  %v2_1000b2d9 = add i32 %v0_1000b2b9, -4
  %v3_1000b2d9 = inttoptr i32 %v2_1000b2d9 to i32*
  store i32 %arg1, i32* %v3_1000b2d9, align 4
  %v1_1000b2da = load i32, i32* %stack_var_-4, align 4
  %v2_1000b2da = trunc i32 %v1_1000b2da to i16
  %v3_1000b2da = call i32 @BreakSweep(i32 %v1_1000b2b4, i16 %v2_1000b2da)
  %v0_1000b2df = load i32, i32* @esp, align 4
  %v1_1000b2df = add i32 %v0_1000b2df, 8
  %sext24 = mul i32 %v3_1000b2da, 65536
  %tmp108 = icmp eq i32 %sext24, 4259840
  br i1 %tmp108, label %dec_label_pc_1000b2fa, label %dec_label_pc_1000b48e

dec_label_pc_1000b2fa:                            ; preds = %dec_label_pc_1000b2d4
  %v2_1000b2fd = add i32 %v0_1000b2df, 4
  %v3_1000b2fd = inttoptr i32 %v2_1000b2fd to i32*
  store i32 %arg1, i32* %v3_1000b2fd, align 4
  %v2_1000b2fe = call i32 @StartSweep(i32 65)
  %v0_1000b303 = load i32, i32* @esp, align 4
  %v1_1000b303 = add i32 %v0_1000b303, 4
  %sext26 = mul i32 %v2_1000b2fe, 65536
  %tmp109 = icmp eq i32 %sext26, 4259840
  br i1 %tmp109, label %dec_label_pc_1000b31e, label %dec_label_pc_1000b48e

dec_label_pc_1000b31e:                            ; preds = %dec_label_pc_1000b2fa, %dec_label_pc_1000b346
  %v1_1000b321 = phi i32 [ %v1_1000b34f, %dec_label_pc_1000b346 ], [ %v1_1000b303, %dec_label_pc_1000b2fa ]
  %stack_var_-16.1 = phi i32 [ %v2_1000b34a, %dec_label_pc_1000b346 ], [ %tmp69, %dec_label_pc_1000b2fa ]
  %v2_1000b321 = add i32 %v1_1000b321, -4
  %v3_1000b321 = inttoptr i32 %v2_1000b321 to i32*
  store i32 %v1_1000b2b4, i32* %v3_1000b321, align 4
  %v2_1000b325 = add i32 %v1_1000b321, -8
  %v3_1000b325 = inttoptr i32 %v2_1000b325 to i32*
  store i32 %v1_1000b2a1, i32* %v3_1000b325, align 4
  %v2_1000b329 = add i32 %v1_1000b321, -12
  %v3_1000b329 = inttoptr i32 %v2_1000b329 to i32*
  store i32 %arg1, i32* %v3_1000b329, align 4
  %v4_1000b32a = call i32 @GetMinMaxAmpl(i32 0, i32 %tmp68, i32 %stack_var_-16.1)
  %v5_1000b32a = trunc i32 %v4_1000b32a to i16
  %v0_1000b32f = load i32, i32* @esp, align 4
  %v1_1000b33a = icmp eq i16 %v5_1000b32a, 0
  br i1 %v1_1000b33a, label %dec_label_pc_1000b346, label %dec_label_pc_1000b35d

dec_label_pc_1000b346:                            ; preds = %dec_label_pc_1000b31e
  %sext27 = mul i32 %v4_1000b32a, 65536
  %v4_1000b336 = sdiv i32 %sext27, 65536
  %v2_1000b349 = add i32 %v0_1000b32f, 8
  %v3_1000b349 = inttoptr i32 %v2_1000b349 to i32*
  store i32 %arg1, i32* %v3_1000b349, align 4
  %v2_1000b34a = call i32 @RdSwpIdx(i32 %v4_1000b336)
  %v0_1000b34f = load i32, i32* @esp, align 4
  %v1_1000b34f = add i32 %v0_1000b34f, 4
  %v5_1000b35b = icmp slt i32 %v2_1000b34a, %v2_1000b28e
  br i1 %v5_1000b35b, label %dec_label_pc_1000b31e, label %dec_label_pc_1000b35d.thread

dec_label_pc_1000b35d.thread:                     ; preds = %dec_label_pc_1000b346
  %v5_1000b38251 = icmp sgt i32 %v2_1000b28e, 0
  br i1 %v5_1000b38251, label %dec_label_pc_1000b388.lr.ph, label %dec_label_pc_1000b482

dec_label_pc_1000b388.lr.ph:                      ; preds = %dec_label_pc_1000b35d.thread
  %v3_1000b3b9 = trunc i32 %v1_1000b2a1 to i16
  %v8_1000b3b0 = and i32 %v4_1000b098, -65536
  %v8_1000b3d0 = and i32 %arg11, -65536
  %v13_1000b395 = icmp eq i16 %tmp, 1
  %v13_1000b39b = icmp eq i16 %tmp, 2
  br label %dec_label_pc_1000b388

dec_label_pc_1000b35d:                            ; preds = %dec_label_pc_1000b31e
  %v1_1000b32f = add i32 %v0_1000b32f, 12
  br label %dec_label_pc_1000b48e

dec_label_pc_1000b388:                            ; preds = %dec_label_pc_1000b47d, %dec_label_pc_1000b388.lr.ph
  %v1_1000b3b4 = phi i32 [ %v1_1000b34f, %dec_label_pc_1000b388.lr.ph ], [ %v1_1000b44758, %dec_label_pc_1000b47d ]
  %storemerge452 = phi i32 [ 0, %dec_label_pc_1000b388.lr.ph ], [ %v1_1000b376, %dec_label_pc_1000b47d ]
  store i16 %tmp, i16* %stack_var_-40, align 2
  br i1 %v2_1000b09c, label %dec_label_pc_1000b3aa, label %dec_label_pc_1000b395

dec_label_pc_1000b395:                            ; preds = %dec_label_pc_1000b388
  br i1 %v13_1000b395, label %dec_label_pc_1000b3ef, label %dec_label_pc_1000b39b

dec_label_pc_1000b39b:                            ; preds = %dec_label_pc_1000b395
  br i1 %v13_1000b39b, label %dec_label_pc_1000b43d, label %dec_label_pc_1000b47d

dec_label_pc_1000b3aa:                            ; preds = %dec_label_pc_1000b388
  %v2_1000b3b0 = mul nuw i32 %storemerge452, 2
  %v3_1000b3b0 = add i32 %v2_1000b3b0, %v1_1000b2a1
  %v4_1000b3b0 = inttoptr i32 %v3_1000b3b0 to i16*
  %v5_1000b3b0 = load i16, i16* %v4_1000b3b0, align 2
  %v6_1000b3b0 = zext i16 %v5_1000b3b0 to i32
  %v9_1000b3b0 = or i32 %v6_1000b3b0, %v8_1000b3b0
  %v2_1000b3b4 = add i32 %v1_1000b3b4, -4
  %v3_1000b3b4 = inttoptr i32 %v2_1000b3b4 to i32*
  store i32 %v9_1000b3b0, i32* %v3_1000b3b4, align 4
  %v2_1000b3b8 = add i32 %v1_1000b3b4, -8
  %v3_1000b3b8 = inttoptr i32 %v2_1000b3b8 to i32*
  store i32 %arg1, i32* %v3_1000b3b8, align 4
  %v4_1000b3b9 = call i32 @GetDbmForAmpl(i32 0, i16 %v3_1000b3b9)
  %v0_1000b3be = load i32, i32* @esp, align 4
  %v0_1000b3c7 = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000b3c7 = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000b3c7 = mul i32 %storemerge452, 8
  %v5_1000b3c7 = add i32 %v4_1000b3c7, %arg11
  %v6_1000b3c7 = fptrunc x86_fp80 %v1_1000b3c7 to double
  %v7_1000b3c7 = inttoptr i32 %v5_1000b3c7 to double*
  store double %v6_1000b3c7, double* %v7_1000b3c7, align 4
  %v8_1000b3c7 = add i3 %v0_1000b3c7, 1
  store i3 %v8_1000b3c7, i3* @fpu_stat_TOP, align 1
  %v3_1000b3d0 = add i32 %v2_1000b3b0, %v1_1000b2b4
  %v4_1000b3d0 = inttoptr i32 %v3_1000b3d0 to i16*
  %v5_1000b3d0 = load i16, i16* %v4_1000b3d0, align 2
  %v6_1000b3d0 = zext i16 %v5_1000b3d0 to i32
  %v9_1000b3d0 = or i32 %v6_1000b3d0, %v8_1000b3d0
  %v2_1000b3d4 = add i32 %v0_1000b3be, 4
  %v3_1000b3d4 = inttoptr i32 %v2_1000b3d4 to i32*
  store i32 %v9_1000b3d0, i32* %v3_1000b3d4, align 4
  %v3_1000b3d8 = inttoptr i32 %v0_1000b3be to i32*
  store i32 %arg1, i32* %v3_1000b3d8, align 4
  %v0_1000b3d9 = load i16, i16* %stack_var_-40, align 2
  %v1_1000b3d9 = sext i16 %v0_1000b3d9 to i32
  %v4_1000b3d9 = call i32 @GetDbmForAmpl(i32 %v1_1000b3d9, i16 %v3_1000b3b9)
  %v0_1000b3de = load i32, i32* @esp, align 4
  %v1_1000b3de = add i32 %v0_1000b3de, 8
  %v0_1000b3e7 = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000b3e7 = load x86_fp80, x86_fp80* @st0, align 4
  %v5_1000b3e7 = add i32 %v4_1000b3c7, %arg12
  %v6_1000b3e7 = fptrunc x86_fp80 %v1_1000b3e7 to double
  %v7_1000b3e7 = inttoptr i32 %v5_1000b3e7 to double*
  store double %v6_1000b3e7, double* %v7_1000b3e7, align 4
  %v8_1000b3e7 = add i3 %v0_1000b3e7, 1
  store i3 %v8_1000b3e7, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000b47d

dec_label_pc_1000b3ef:                            ; preds = %dec_label_pc_1000b395
  %v2_1000b3f5 = mul nuw i32 %storemerge452, 2
  %v3_1000b3f5 = add i32 %v2_1000b3f5, %v1_1000b2a1
  %v4_1000b3f5 = inttoptr i32 %v3_1000b3f5 to i16*
  %v5_1000b3f5 = load i16, i16* %v4_1000b3f5, align 2
  %v6_1000b3f5 = zext i16 %v5_1000b3f5 to i32
  %v9_1000b3f5 = or i32 %v6_1000b3f5, %v8_1000b3b0
  %v2_1000b3f9 = add i32 %v1_1000b3b4, -4
  %v3_1000b3f9 = inttoptr i32 %v2_1000b3f9 to i32*
  store i32 %v9_1000b3f5, i32* %v3_1000b3f9, align 4
  %v2_1000b3fd = add i32 %v1_1000b3b4, -8
  %v3_1000b3fd = inttoptr i32 %v2_1000b3fd to i32*
  store i32 %arg1, i32* %v3_1000b3fd, align 4
  %v4_1000b3fe = call i32 @GetnVForAmpl(i32 %v4_1000b098, i16 %v3_1000b3b9)
  %v0_1000b403 = load i32, i32* @esp, align 4
  %v3_1000b406 = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000b406 = fdiv x86_fp80 0xK4008FA00000000000000, %v3_1000b406
  %v0_1000b412 = load i3, i3* @fpu_stat_TOP, align 1
  %v4_1000b412 = mul i32 %storemerge452, 8
  %v5_1000b412 = add i32 %v4_1000b412, %arg11
  %v6_1000b412 = fptrunc x86_fp80 %v4_1000b406 to double
  %v7_1000b412 = inttoptr i32 %v5_1000b412 to double*
  store double %v6_1000b412, double* %v7_1000b412, align 4
  %v8_1000b412 = add i3 %v0_1000b412, 1
  store i3 %v8_1000b412, i3* @fpu_stat_TOP, align 1
  %v3_1000b41b = add i32 %v2_1000b3f5, %v1_1000b2b4
  %v4_1000b41b = inttoptr i32 %v3_1000b41b to i16*
  %v5_1000b41b = load i16, i16* %v4_1000b41b, align 2
  %v6_1000b41b = zext i16 %v5_1000b41b to i32
  %v9_1000b41b = or i32 %v6_1000b41b, %v8_1000b3d0
  %v2_1000b41f = add i32 %v0_1000b403, 4
  %v3_1000b41f = inttoptr i32 %v2_1000b41f to i32*
  store i32 %v9_1000b41b, i32* %v3_1000b41f, align 4
  %v3_1000b423 = inttoptr i32 %v0_1000b403 to i32*
  store i32 %arg1, i32* %v3_1000b423, align 4
  %v0_1000b424 = load i16, i16* %stack_var_-40, align 2
  %v1_1000b424 = sext i16 %v0_1000b424 to i32
  %v4_1000b424 = call i32 @GetnVForAmpl(i32 %v1_1000b424, i16 %v3_1000b3b9)
  %v0_1000b429 = load i32, i32* @esp, align 4
  %v1_1000b429 = add i32 %v0_1000b429, 8
  %v3_1000b42c = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000b42c = fdiv x86_fp80 0xK4008FA00000000000000, %v3_1000b42c
  %v0_1000b438 = load i3, i3* @fpu_stat_TOP, align 1
  %v5_1000b438 = add i32 %v4_1000b412, %arg12
  %v6_1000b438 = fptrunc x86_fp80 %v4_1000b42c to double
  %v7_1000b438 = inttoptr i32 %v5_1000b438 to double*
  store double %v6_1000b438, double* %v7_1000b438, align 4
  %v8_1000b438 = add i3 %v0_1000b438, 1
  store i3 %v8_1000b438, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000b47d

dec_label_pc_1000b43d:                            ; preds = %dec_label_pc_1000b39b
  %v2_1000b443 = mul nuw i32 %storemerge452, 2
  %v3_1000b443 = add i32 %v2_1000b443, %v1_1000b2a1
  %v4_1000b443 = inttoptr i32 %v3_1000b443 to i16*
  %v5_1000b443 = load i16, i16* %v4_1000b443, align 2
  %v6_1000b443 = zext i16 %v5_1000b443 to i32
  %v9_1000b443 = or i32 %v6_1000b443, %v8_1000b3b0
  %v2_1000b447 = add i32 %v1_1000b3b4, -4
  %v3_1000b447 = inttoptr i32 %v2_1000b447 to i32*
  store i32 %v9_1000b443, i32* %v3_1000b447, align 4
  %v2_1000b44b = add i32 %v1_1000b3b4, -8
  %v3_1000b44b = inttoptr i32 %v2_1000b44b to i32*
  store i32 %arg1, i32* %v3_1000b44b, align 4
  %v4_1000b44c = call i32 @GetnVForAmpl(i32 %v4_1000b098, i16 %v3_1000b3b9)
  %v0_1000b451 = load i32, i32* @esp, align 4
  %v0_1000b45a = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000b45a = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000b45a = mul i32 %storemerge452, 8
  %v5_1000b45a = add i32 %v4_1000b45a, %arg11
  %v6_1000b45a = fptrunc x86_fp80 %v1_1000b45a to double
  %v7_1000b45a = inttoptr i32 %v5_1000b45a to double*
  store double %v6_1000b45a, double* %v7_1000b45a, align 4
  %v8_1000b45a = add i3 %v0_1000b45a, 1
  store i3 %v8_1000b45a, i3* @fpu_stat_TOP, align 1
  %v3_1000b463 = add i32 %v2_1000b443, %v1_1000b2b4
  %v4_1000b463 = inttoptr i32 %v3_1000b463 to i16*
  %v5_1000b463 = load i16, i16* %v4_1000b463, align 2
  %v6_1000b463 = zext i16 %v5_1000b463 to i32
  %v9_1000b463 = or i32 %v6_1000b463, %v8_1000b3d0
  %v2_1000b467 = add i32 %v0_1000b451, 4
  %v3_1000b467 = inttoptr i32 %v2_1000b467 to i32*
  store i32 %v9_1000b463, i32* %v3_1000b467, align 4
  %v3_1000b46b = inttoptr i32 %v0_1000b451 to i32*
  store i32 %arg1, i32* %v3_1000b46b, align 4
  %v0_1000b46c = load i16, i16* %stack_var_-40, align 2
  %v1_1000b46c = sext i16 %v0_1000b46c to i32
  %v4_1000b46c = call i32 @GetnVForAmpl(i32 %v1_1000b46c, i16 %v3_1000b3b9)
  %v0_1000b471 = load i32, i32* @esp, align 4
  %v1_1000b471 = add i32 %v0_1000b471, 8
  %v0_1000b47a = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000b47a = load x86_fp80, x86_fp80* @st0, align 4
  %v5_1000b47a = add i32 %v4_1000b45a, %arg12
  %v6_1000b47a = fptrunc x86_fp80 %v1_1000b47a to double
  %v7_1000b47a = inttoptr i32 %v5_1000b47a to double*
  store double %v6_1000b47a, double* %v7_1000b47a, align 4
  %v8_1000b47a = add i3 %v0_1000b47a, 1
  store i3 %v8_1000b47a, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000b47d

dec_label_pc_1000b47d:                            ; preds = %dec_label_pc_1000b39b, %dec_label_pc_1000b3ef, %dec_label_pc_1000b3aa, %dec_label_pc_1000b43d
  %v1_1000b44758 = phi i32 [ %v1_1000b3b4, %dec_label_pc_1000b39b ], [ %v1_1000b429, %dec_label_pc_1000b3ef ], [ %v1_1000b3de, %dec_label_pc_1000b3aa ], [ %v1_1000b471, %dec_label_pc_1000b43d ]
  %v1_1000b376 = add nuw nsw i32 %storemerge452, 1
  %exitcond = icmp eq i32 %v1_1000b376, %v2_1000b28e
  br i1 %exitcond, label %dec_label_pc_1000b482, label %dec_label_pc_1000b388

dec_label_pc_1000b482:                            ; preds = %dec_label_pc_1000b47d, %dec_label_pc_1000b35d.thread
  %v1_1000b49160 = phi i32 [ %v1_1000b34f, %dec_label_pc_1000b35d.thread ], [ %v1_1000b44758, %dec_label_pc_1000b47d ]
  br label %dec_label_pc_1000b48e

dec_label_pc_1000b48e:                            ; preds = %dec_label_pc_1000b35d, %dec_label_pc_1000b2fa, %dec_label_pc_1000b2d4, %dec_label_pc_1000b482
  %v1_1000b491 = phi i32 [ %v1_1000b49160, %dec_label_pc_1000b482 ], [ %v1_1000b32f, %dec_label_pc_1000b35d ], [ %v1_1000b2df, %dec_label_pc_1000b2d4 ], [ %v1_1000b303, %dec_label_pc_1000b2fa ]
  %stack_var_-24.2 = phi i32 [ 0, %dec_label_pc_1000b482 ], [ 65535, %dec_label_pc_1000b35d ], [ 65535, %dec_label_pc_1000b2d4 ], [ 65535, %dec_label_pc_1000b2fa ]
  %v2_1000b491 = add i32 %v1_1000b491, -4
  %v3_1000b491 = inttoptr i32 %v2_1000b491 to i32*
  store i32 %v1_1000b2a1, i32* %v3_1000b491, align 4
  %v0_1000b492 = load i16, i16* %stack_var_-40, align 2
  %v1_1000b492 = sext i16 %v0_1000b492 to i32
  %v2_1000b492 = call i32 @function_1000d97b(i32 %v1_1000b492)
  %v0_1000b497 = load i32, i32* @esp, align 4
  %v3_1000b49d = inttoptr i32 %v0_1000b497 to i32*
  store i32 %v1_1000b2b4, i32* %v3_1000b49d, align 4
  %v0_1000b49e = load i16, i16* %stack_var_-40, align 2
  %v1_1000b49e = sext i16 %v0_1000b49e to i32
  %v2_1000b49e = call i32 @function_1000d97b(i32 %v1_1000b49e)
  %v6_1000b4a6 = and i32 %v2_1000b49e, -65536
  %v7_1000b4a6 = or i32 %v6_1000b4a6, %stack_var_-24.2
  br label %dec_label_pc_1000b4aa

dec_label_pc_1000b4aa:                            ; preds = %dec_label_pc_1000b2cb, %dec_label_pc_1000b281, %dec_label_pc_1000b278, %dec_label_pc_1000b24a, %dec_label_pc_1000b224, %dec_label_pc_1000b1e7, %dec_label_pc_1000b1de, %dec_label_pc_1000b1af, %dec_label_pc_1000b18a, %dec_label_pc_1000b15e, %dec_label_pc_1000b155, %dec_label_pc_1000b126, %dec_label_pc_1000b101, %dec_label_pc_1000b0d5, %dec_label_pc_1000b0b2, %dec_label_pc_1000b08f, %dec_label_pc_1000b06b, %dec_label_pc_1000b047, %dec_label_pc_1000b031, %dec_label_pc_1000b48e
  %v0_1000b4ad = phi i32 [ %v2_1000b2cb, %dec_label_pc_1000b2cb ], [ %v4_1000b281, %dec_label_pc_1000b281 ], [ %v8_1000b278, %dec_label_pc_1000b278 ], [ %v4_1000b24a, %dec_label_pc_1000b24a ], [ %v4_1000b224, %dec_label_pc_1000b224 ], [ %v2_1000b1e7, %dec_label_pc_1000b1e7 ], [ %v7_1000b1de, %dec_label_pc_1000b1de ], [ %v4_1000b1af, %dec_label_pc_1000b1af ], [ %v4_1000b18a, %dec_label_pc_1000b18a ], [ %v2_1000b15e, %dec_label_pc_1000b15e ], [ %v7_1000b155, %dec_label_pc_1000b155 ], [ %v4_1000b126, %dec_label_pc_1000b126 ], [ %v4_1000b101, %dec_label_pc_1000b101 ], [ %v4_1000b0d5, %dec_label_pc_1000b0d5 ], [ %v2_1000b0b2, %dec_label_pc_1000b0b2 ], [ %v2_1000b08f, %dec_label_pc_1000b08f ], [ %v2_1000b06b, %dec_label_pc_1000b06b ], [ %v2_1000b047, %dec_label_pc_1000b047 ], [ %v2_1000b031, %dec_label_pc_1000b031 ], [ %v7_1000b4a6, %dec_label_pc_1000b48e ]
  ret i32 %v0_1000b4ad

; uselistorder directives
  uselistorder i32 %v0_1000b451, { 1, 0 }
  uselistorder i32 %v0_1000b403, { 1, 0 }
  uselistorder i32 %v0_1000b3be, { 1, 0 }
  uselistorder i32 %storemerge452, { 2, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_1000b3b4, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i16 %v3_1000b3b9, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v2_1000b34a, { 1, 0 }
  uselistorder i32 %v0_1000b32f, { 1, 0 }
  uselistorder i32 %v1_1000b321, { 2, 1, 0 }
  uselistorder i32 %v1_1000b303, { 1, 0 }
  uselistorder i32 %v1_1000b2b4, { 3, 0, 1, 2, 4, 5, 7, 6, 8 }
  uselistorder i32 %v1_1000b2a1, { 3, 0, 1, 2, 4, 5, 6, 7 }
  uselistorder i32 %v2_1000b28e, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v4_1000b267, { 1, 2, 3, 0 }
  uselistorder i32 %v2_1000b25b, { 1, 0, 2 }
  uselistorder i32 %v4_1000b1cd, { 1, 0 }
  uselistorder i32 %v3_1000b1c1, { 1, 0, 2 }
  uselistorder i32 %v4_1000b144, { 1, 0 }
  uselistorder i32 %v3_1000b138, { 1, 0, 2 }
  uselistorder i32 %v4_1000b098, { 2, 3, 1, 0 }
  uselistorder i32 %v4_1000b080, { 1, 0 }
  uselistorder i32 %v1_1000b064, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i16* %stack_var_-40, { 5, 6, 3, 4, 2, 1, 0 }
  uselistorder i16 %tmp, { 3, 0, 1, 2 }
  uselistorder i32 (i32)* @StartSweep, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @SetNumCells, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i16)* @SetRefLevel, { 0, 1, 2, 3, 4, 5, 10, 6, 7, 8, 9 }
  uselistorder i32 (i32, i32, i32)* @ConfigStopFreq, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @ConfigStartFreq, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i16)* @SetVBW, { 0, 1, 2, 3, 4, 5, 8, 6, 7 }
  uselistorder i32 (i32, i16)* @SetVBWmode, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 12, 13, 14, 15 }
  uselistorder i32 -196608, { 2, 1, 0, 5, 4, 3, 8, 7, 6, 11, 10, 9, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20 }
  uselistorder i32 (i32, i16)* @SetRBW, { 0, 1, 2, 3, 4, 5, 6, 9, 7, 8 }
  uselistorder i32 (i32, i16)* @SetRBWmode, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 12, 13, 14, 15 }
  uselistorder i16 5, { 0, 1, 2, 3, 4, 6, 5, 8, 7, 9, 10, 12, 14, 15, 13, 11 }
  uselistorder i32 (i32, i16)* @SetSweepCode, { 0, 1, 2, 3, 4, 7, 5, 6 }
  uselistorder i32 %arg6, { 1, 0 }
  uselistorder i16 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000b4aa, { 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder label %dec_label_pc_1000b48e, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1000b47d, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_1000b31e, { 1, 0 }
  uselistorder label %dec_label_pc_1000b1f0, { 1, 0 }
  uselistorder label %dec_label_pc_1000b167, { 1, 0 }
}

define i32 @RBWCodeFromFreq(double %arg1) local_unnamed_addr {
entry:
  %eax.promoted = load i32, i32* @eax, align 4
  br label %dec_label_pc_1000b4d9

dec_label_pc_1000b4d9:                            ; preds = %entry, %dec_label_pc_1000b4f8
  %v19_1000b4c812 = phi i32 [ %eax.promoted, %entry ], [ %v19_1000b4c8, %dec_label_pc_1000b4f8 ]
  %storemerge47 = phi i16 [ 0, %entry ], [ %v2_1000b4c8, %dec_label_pc_1000b4f8 ]
  %v3_1000b4e9 = and i32 %v19_1000b4c812, 16384
  %v4_1000b4e9 = icmp eq i32 %v3_1000b4e9, 0
  br i1 %v4_1000b4e9, label %dec_label_pc_1000b4f8, label %dec_label_pc_1000b4ee

dec_label_pc_1000b4ee:                            ; preds = %dec_label_pc_1000b4d9
  %v6_1000b4c4 = and i32 %v19_1000b4c812, -65536
  %v4_1000b4c4 = zext i16 %storemerge47 to i32
  %v7_1000b4c4 = or i32 %v4_1000b4c4, %v6_1000b4c4
  br label %dec_label_pc_1000b4fa

dec_label_pc_1000b4f8:                            ; preds = %dec_label_pc_1000b4d9
  %v2_1000b4c8 = add i16 %storemerge47, 1
  %v16_1000b4c8 = zext i16 %v2_1000b4c8 to i32
  %v18_1000b4c8 = and i32 %v19_1000b4c812, -65536
  %v19_1000b4c8 = or i32 %v16_1000b4c8, %v18_1000b4c8
  %v4_1000b4d0 = sext i16 %v2_1000b4c8 to i32
  %v6_1000b4d4 = sub nsw i32 3, %v4_1000b4d0
  %v7_1000b4d4 = and i32 %v6_1000b4d4, %v4_1000b4d0
  %v8_1000b4d4 = icmp slt i32 %v7_1000b4d4, 0
  %v9_1000b4d4 = icmp eq i16 %v2_1000b4c8, 4
  %v10_1000b4d4 = icmp slt i16 %v2_1000b4c8, 4
  %v3_1000b4d7 = icmp eq i1 %v10_1000b4d4, %v8_1000b4d4
  %v4_1000b4d7 = icmp eq i1 %v9_1000b4d4, false
  %v5_1000b4d7 = and i1 %v4_1000b4d7, %v3_1000b4d7
  br i1 %v5_1000b4d7, label %dec_label_pc_1000b4fa.loopexit, label %dec_label_pc_1000b4d9

dec_label_pc_1000b4fa.loopexit:                   ; preds = %dec_label_pc_1000b4f8
  br label %dec_label_pc_1000b4fa

dec_label_pc_1000b4fa:                            ; preds = %dec_label_pc_1000b4fa.loopexit, %dec_label_pc_1000b4ee
  %v6_1000b4fa = phi i32 [ %v7_1000b4c4, %dec_label_pc_1000b4ee ], [ %v19_1000b4c8, %dec_label_pc_1000b4fa.loopexit ]
  %v3_1000b4fa = phi i16 [ %storemerge47, %dec_label_pc_1000b4ee ], [ -3, %dec_label_pc_1000b4fa.loopexit ]
  %v4_1000b4fa = sext i16 %v3_1000b4fa to i32
  %v7_1000b4fa = and i32 %v6_1000b4fa, -65536
  %v8_1000b4fa = or i32 %v4_1000b4fa, %v7_1000b4fa
  ret i32 %v8_1000b4fa

; uselistorder directives
  uselistorder i16 %v2_1000b4c8, { 0, 2, 1, 4, 3 }
  uselistorder i16 %storemerge47, { 0, 2, 1 }
  uselistorder i32 %v19_1000b4c812, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1000b4d9, { 1, 0 }
}

define i32 @VBWCodeFromFreq(double %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 1, i32* @ecx, align 4
  %eax.promoted = load i32, i32* @eax, align 4
  br label %dec_label_pc_1000b52b

dec_label_pc_1000b52b:                            ; preds = %entry, %dec_label_pc_1000b54a
  %v19_1000b51a12 = phi i32 [ %eax.promoted, %entry ], [ %v19_1000b51a, %dec_label_pc_1000b54a ]
  %storemerge47 = phi i16 [ 1, %entry ], [ %v2_1000b51a, %dec_label_pc_1000b54a ]
  %v3_1000b53b = and i32 %v19_1000b51a12, 16384
  %v4_1000b53b = icmp eq i32 %v3_1000b53b, 0
  br i1 %v4_1000b53b, label %dec_label_pc_1000b54a, label %dec_label_pc_1000b540

dec_label_pc_1000b540:                            ; preds = %dec_label_pc_1000b52b
  %v6_1000b516 = and i32 %v19_1000b51a12, -65536
  %v4_1000b516 = zext i16 %storemerge47 to i32
  %v7_1000b516 = or i32 %v4_1000b516, %v6_1000b516
  br label %dec_label_pc_1000b54c

dec_label_pc_1000b54a:                            ; preds = %dec_label_pc_1000b52b
  %v2_1000b51a = add i16 %storemerge47, 1
  %v16_1000b51a = zext i16 %v2_1000b51a to i32
  %v18_1000b51a = and i32 %v19_1000b51a12, -65536
  %v19_1000b51a = or i32 %v16_1000b51a, %v18_1000b51a
  %v4_1000b522 = sext i16 %v2_1000b51a to i32
  store i32 %v4_1000b522, i32* @ecx, align 4
  %v6_1000b526 = sub nsw i32 6, %v4_1000b522
  %v7_1000b526 = and i32 %v6_1000b526, %v4_1000b522
  %v8_1000b526 = icmp slt i32 %v7_1000b526, 0
  %v9_1000b526 = icmp eq i16 %v2_1000b51a, 7
  %v10_1000b526 = icmp slt i16 %v2_1000b51a, 7
  %v3_1000b529 = icmp eq i1 %v10_1000b526, %v8_1000b526
  %v4_1000b529 = icmp eq i1 %v9_1000b526, false
  %v5_1000b529 = and i1 %v4_1000b529, %v3_1000b529
  br i1 %v5_1000b529, label %dec_label_pc_1000b54c.loopexit, label %dec_label_pc_1000b52b

dec_label_pc_1000b54c.loopexit:                   ; preds = %dec_label_pc_1000b54a
  br label %dec_label_pc_1000b54c

dec_label_pc_1000b54c:                            ; preds = %dec_label_pc_1000b54c.loopexit, %dec_label_pc_1000b540
  %v6_1000b54c = phi i32 [ %v7_1000b516, %dec_label_pc_1000b540 ], [ %v19_1000b51a, %dec_label_pc_1000b54c.loopexit ]
  %v3_1000b54c = phi i16 [ %storemerge47, %dec_label_pc_1000b540 ], [ -3, %dec_label_pc_1000b54c.loopexit ]
  %v4_1000b54c = sext i16 %v3_1000b54c to i32
  %v7_1000b54c = and i32 %v6_1000b54c, -65536
  %v8_1000b54c = or i32 %v4_1000b54c, %v7_1000b54c
  ret i32 %v8_1000b54c

; uselistorder directives
  uselistorder i16 %v2_1000b51a, { 0, 2, 1, 4, 3 }
  uselistorder i16 %storemerge47, { 0, 2, 1 }
  uselistorder i32 %v19_1000b51a12, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1000b52b, { 1, 0 }
}

define i32 @RBWFreqFromCode(i16 %arg1) local_unnamed_addr {
entry:
  %v4_1000b557 = sext i16 %arg1 to i32
  %v3_1000b55b = icmp slt i16 %arg1, 0
  %v2_1000b55d = icmp eq i1 %v3_1000b55b, false
  br i1 %v2_1000b55d, label %dec_label_pc_1000b55f, label %dec_label_pc_1000b57b

dec_label_pc_1000b55f:                            ; preds = %entry
  store i32 %v4_1000b557, i32* @ecx, align 4
  %v8_1000b566 = icmp sgt i16 %arg1, 4
  br i1 %v8_1000b566, label %dec_label_pc_1000b57b, label %dec_label_pc_1000b570

dec_label_pc_1000b570:                            ; preds = %dec_label_pc_1000b55f
  store i32 %v4_1000b557, i32* @edx, align 4
  %v1_1000b574 = mul nsw i32 %v4_1000b557, 8
  %v2_1000b574 = add i32 %v1_1000b574, ptrtoint (double** @global_var_10018298.73 to i32)
  %v3_1000b574 = inttoptr i32 %v2_1000b574 to double*
  %v4_1000b574 = load double, double* %v3_1000b574, align 8
  %v5_1000b574 = fpext double %v4_1000b574 to x86_fp80
  br label %dec_label_pc_1000b57b

dec_label_pc_1000b57b:                            ; preds = %entry, %dec_label_pc_1000b55f, %dec_label_pc_1000b570
  %storemerge1 = phi x86_fp80 [ %v5_1000b574, %dec_label_pc_1000b570 ], [ 0xKC000C000000000000000, %dec_label_pc_1000b55f ], [ 0xKC000C000000000000000, %entry ]
  %storemerge.in = load i3, i3* @fpu_stat_TOP, align 1
  store x86_fp80 %storemerge1, x86_fp80* @st0, align 4
  %storemerge = add i3 %storemerge.in, -1
  store i3 %storemerge, i3* @fpu_stat_TOP, align 1
  ret i32 %v4_1000b557

; uselistorder directives
  uselistorder i32 %v4_1000b557, { 0, 2, 1, 3 }
  uselistorder i16 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1000b57b, { 2, 1, 0 }
}

define i32 @VBWFreqFromCode(i16 %arg1) local_unnamed_addr {
entry:
  %v4_1000b580 = sext i16 %arg1 to i32
  %v3_1000b584 = icmp slt i16 %arg1, 0
  %v2_1000b586 = icmp eq i1 %v3_1000b584, false
  br i1 %v2_1000b586, label %dec_label_pc_1000b588, label %dec_label_pc_1000b5a4

dec_label_pc_1000b588:                            ; preds = %entry
  store i32 %v4_1000b580, i32* @ecx, align 4
  %v8_1000b58f = icmp sgt i16 %arg1, 7
  br i1 %v8_1000b58f, label %dec_label_pc_1000b5a4, label %dec_label_pc_1000b599

dec_label_pc_1000b599:                            ; preds = %dec_label_pc_1000b588
  br label %dec_label_pc_1000b5a4

dec_label_pc_1000b5a4:                            ; preds = %entry, %dec_label_pc_1000b588, %dec_label_pc_1000b599
  %storemerge.in = load i3, i3* @fpu_stat_TOP, align 1
  %storemerge = add i3 %storemerge.in, -1
  store i3 %storemerge, i3* @fpu_stat_TOP, align 1
  ret i32 %v4_1000b580

; uselistorder directives
  uselistorder i16 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1000b5a4, { 2, 1, 0 }
}

define i32 @LoadHopTableExt(i32 %arg1, i16 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000b5a6 = load i32, i32* @ebp, align 4
  store i32 %v0_1000b5a6, i32* %stack_var_-4, align 4
  %v4_1000b5a6 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000b5a6, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000b5c2 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000b5c2, i32* @eax, align 4
  %v1_1000b5ca = mul i32 %v1_1000b5c2, 65536
  %v1_1000b5ca.off = or i32 %v1_1000b5ca, 65535
  %tmp = icmp ult i32 %v1_1000b5ca.off, 131071
  br i1 %tmp, label %dec_label_pc_1000b5e2, label %dec_label_pc_1000b5d1

dec_label_pc_1000b5d1:                            ; preds = %entry
  %v1_1000b5d5 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_1000b740

dec_label_pc_1000b5e2:                            ; preds = %entry
  %v2_1000b5e8 = trunc i32 %arg1 to i16
  %v3_1000b5e8 = call i32 @function_10003aed(i16 %v2_1000b5e8, i32 5)
  %sext = mul i32 %v3_1000b5e8, 65536
  %v4_1000b5f4 = sdiv i32 %sext, 65536
  %sext.off = or i32 %sext, 65535
  %tmp56 = icmp ult i32 %sext.off, 131071
  %v1_1000b5fa = icmp eq i1 %tmp56, false
  br i1 %v1_1000b5fa, label %dec_label_pc_1000b60f, label %dec_label_pc_1000b5fc

dec_label_pc_1000b5fc:                            ; preds = %dec_label_pc_1000b5e2
  %v2_1000b600 = call i32 @CheckSWStatus(i16 %v2_1000b5e8)
  %v1_1000b608 = mul i32 %v2_1000b600, 65536
  %v2_1000b608 = sdiv i32 %v1_1000b608, 65536
  %v1_1000b608.off = or i32 %v1_1000b608, 65535
  %tmp57 = icmp ult i32 %v1_1000b608.off, 131071
  br i1 %tmp57, label %dec_label_pc_1000b618, label %dec_label_pc_1000b60f

dec_label_pc_1000b60f:                            ; preds = %dec_label_pc_1000b5fc, %dec_label_pc_1000b5e2
  %v0_1000b60f = phi i32 [ %v2_1000b608, %dec_label_pc_1000b5fc ], [ %v3_1000b5e8, %dec_label_pc_1000b5e2 ]
  %v1_1000b60f = and i32 %v0_1000b60f, -65536
  %v2_1000b60f = or i32 %v1_1000b60f, 65534
  br label %dec_label_pc_1000b740

dec_label_pc_1000b618:                            ; preds = %dec_label_pc_1000b5fc
  %v4_1000b618 = zext i16 %arg2 to i32
  %v7_1000b618 = and i32 %v4_1000b5f4, -65536
  %v8_1000b618 = or i32 %v7_1000b618, %v4_1000b618
  store i32 %arg1, i32* @edx, align 4
  %v3_1000b621 = call i32 @function_10003aed(i16 %v2_1000b5e8, i32 %v8_1000b618)
  %v4_1000b621 = trunc i32 %v3_1000b621 to i16
  %sext9 = mul i32 %v3_1000b621, 65536
  %v4_1000b62d = sdiv i32 %sext9, 65536
  %v1_1000b631 = icmp eq i16 %v4_1000b621, 0
  %v1_1000b633 = icmp eq i1 %v1_1000b631, false
  br i1 %v1_1000b633, label %dec_label_pc_1000b648, label %dec_label_pc_1000b635

dec_label_pc_1000b635:                            ; preds = %dec_label_pc_1000b618
  %v2_1000b639 = call i32 @CheckSWStatus(i16 %v2_1000b5e8)
  %v1_1000b641 = mul i32 %v2_1000b639, 65536
  %v2_1000b641 = sdiv i32 %v1_1000b641, 65536
  store i32 %v2_1000b641, i32* @edx, align 4
  %v1_1000b641.off = or i32 %v1_1000b641, 65535
  %tmp58 = icmp ult i32 %v1_1000b641.off, 131071
  br i1 %tmp58, label %dec_label_pc_1000b665.preheader, label %dec_label_pc_1000b648

dec_label_pc_1000b665.preheader:                  ; preds = %dec_label_pc_1000b635
  %v5_1000b669 = sext i16 %arg2 to i32
  %v19_1000b66948 = icmp sgt i16 %arg2, 0
  br i1 %v19_1000b66948, label %dec_label_pc_1000b66e, label %dec_label_pc_1000b6d0

dec_label_pc_1000b648:                            ; preds = %dec_label_pc_1000b635, %dec_label_pc_1000b618
  %v0_1000b648 = phi i32 [ %v2_1000b639, %dec_label_pc_1000b635 ], [ %v4_1000b62d, %dec_label_pc_1000b618 ]
  %v1_1000b648 = and i32 %v0_1000b648, -65536
  %v2_1000b648 = or i32 %v1_1000b648, 65534
  br label %dec_label_pc_1000b740

dec_label_pc_1000b66e:                            ; preds = %dec_label_pc_1000b665.preheader, %dec_label_pc_1000b66e
  %indvars.iv53 = phi i32 [ %indvars.iv.next54, %dec_label_pc_1000b66e ], [ 0, %dec_label_pc_1000b665.preheader ]
  %v2_1000b675 = mul nuw nsw i32 %indvars.iv53, 8
  %v3_1000b67a = add i32 %v2_1000b675, %arg3
  %v4_1000b67a = inttoptr i32 %v3_1000b67a to i32*
  %v5_1000b67a = load i32, i32* %v4_1000b67a, align 4
  %v2_1000b682 = sext i32 %v5_1000b67a to i64
  %v3_1000b682 = bitcast i64 %v2_1000b682 to double
  %v4_1000b682 = call i32 @function_10002df9(i32 %arg1, double %v3_1000b682)
  %sext10 = mul i32 %v4_1000b682, 65536
  %v4_1000b68d = sdiv i32 %sext10, 65536
  %v2_1000b69d = udiv i32 %v4_1000b68d, 65536
  store i32 %v2_1000b69d, i32* @edx, align 4
  %v4_1000b6a4 = and i32 %v4_1000b682, 65535
  %v7_1000b6a4 = and i32 %v4_1000b68d, -65536
  %v8_1000b6a4 = or i32 %v7_1000b6a4, %v4_1000b6a4
  %v3_1000b6ad = call i32 @function_10003aed(i16 %v2_1000b5e8, i32 %v8_1000b6a4)
  %v5_1000b6b9 = load i32, i32* @edx, align 4
  %v6_1000b6b9 = and i32 %v5_1000b6b9, -65536
  %v7_1000b6b9 = or i32 %v6_1000b6b9, %v2_1000b69d
  store i32 %v7_1000b6b9, i32* @edx, align 4
  %v3_1000b6c2 = call i32 @function_10003aed(i16 %v2_1000b5e8, i32 %v7_1000b6b9)
  %indvars.iv.next54 = add nuw nsw i32 %indvars.iv53, 1
  %exitcond = icmp eq i32 %indvars.iv.next54, %v5_1000b669
  br i1 %exitcond, label %dec_label_pc_1000b6d0, label %dec_label_pc_1000b66e

dec_label_pc_1000b6d0:                            ; preds = %dec_label_pc_1000b66e, %dec_label_pc_1000b665.preheader
  %v3_1000b6d6 = call i32 @function_10003aed(i16 %v2_1000b5e8, i32 3)
  br label %dec_label_pc_1000b702

dec_label_pc_1000b702:                            ; preds = %dec_label_pc_1000b6d0, %dec_label_pc_1000b717
  %indvars.iv = phi i32 [ 0, %dec_label_pc_1000b6d0 ], [ %indvars.iv.next, %dec_label_pc_1000b717 ]
  %v12_1000b6fe18 = phi i1 [ false, %dec_label_pc_1000b6d0 ], [ %v12_1000b6fe, %dec_label_pc_1000b717 ]
  store i32 %arg1, i32* @edx, align 4
  %v2_1000b706 = call i32 @CheckSWStatus(i16 %v2_1000b5e8)
  %v1_1000b70e = mul i32 %v2_1000b706, 65536
  %v1_1000b70e.off = or i32 %v1_1000b70e, 65535
  %tmp59 = icmp ult i32 %v1_1000b70e.off, 131071
  br i1 %tmp59, label %dec_label_pc_1000b717, label %dec_label_pc_1000b72b

dec_label_pc_1000b717:                            ; preds = %dec_label_pc_1000b702
  %v3_1000b71d = call i32 @function_10003aed(i16 %v2_1000b5e8, i32 3)
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %v12_1000b6fe = icmp eq i32 %indvars.iv.next, 1024
  %v13_1000b6fe = icmp slt i32 %indvars.iv.next, 1024
  br i1 %v13_1000b6fe, label %dec_label_pc_1000b702, label %dec_label_pc_1000b72b

dec_label_pc_1000b72b:                            ; preds = %dec_label_pc_1000b702, %dec_label_pc_1000b717
  %v12_1000b6fe.lcssa = phi i1 [ %v12_1000b6fe18, %dec_label_pc_1000b702 ], [ %v12_1000b6fe, %dec_label_pc_1000b717 ]
  %v1_1000b735 = icmp eq i1 %v12_1000b6fe.lcssa, false
  br i1 %v1_1000b735, label %dec_label_pc_1000b73d, label %dec_label_pc_1000b737

dec_label_pc_1000b737:                            ; preds = %dec_label_pc_1000b72b
  br label %dec_label_pc_1000b740

dec_label_pc_1000b73d:                            ; preds = %dec_label_pc_1000b72b
  br label %dec_label_pc_1000b740

dec_label_pc_1000b740:                            ; preds = %dec_label_pc_1000b737, %dec_label_pc_1000b648, %dec_label_pc_1000b60f, %dec_label_pc_1000b5d1, %dec_label_pc_1000b73d
  %v0_1000b743 = phi i32 [ 65534, %dec_label_pc_1000b737 ], [ %v2_1000b648, %dec_label_pc_1000b648 ], [ %v2_1000b60f, %dec_label_pc_1000b60f ], [ %v1_1000b5d5, %dec_label_pc_1000b5d1 ], [ 0, %dec_label_pc_1000b73d ]
  ret i32 %v0_1000b743

; uselistorder directives
  uselistorder i1 %v12_1000b6fe, { 1, 0 }
  uselistorder i32 %indvars.iv.next54, { 1, 0 }
  uselistorder i32 %v2_1000b69d, { 1, 0 }
  uselistorder i32 %v4_1000b68d, { 1, 0 }
  uselistorder i32 %v4_1000b682, { 1, 0 }
  uselistorder i32 %indvars.iv53, { 1, 0 }
  uselistorder i32 %v2_1000b639, { 1, 0 }
  uselistorder i32 %v3_1000b5e8, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 (i32, double)* @function_10002df9, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i16 %arg2, { 0, 2, 1 }
  uselistorder i32 %arg1, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000b740, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_1000b72b, { 1, 0 }
  uselistorder label %dec_label_pc_1000b702, { 1, 0 }
  uselistorder label %dec_label_pc_1000b66e, { 1, 0 }
}

define i32 @ConfigStartFreq(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @edx, align 4
  %v2_1000b753 = sext i32 %arg2 to i64
  %v3_1000b753 = bitcast i64 %v2_1000b753 to double
  %v4_1000b753 = call i32 @FreqInRange(i32 %arg1, double %v3_1000b753)
  %v1_1000b75b = mul i32 %v4_1000b753, 65536
  %v2_1000b75b = sdiv i32 %v1_1000b75b, 65536
  store i32 %v2_1000b75b, i32* @eax, align 4
  %v1_1000b75b.off = or i32 %v1_1000b75b, 65535
  %tmp = icmp ult i32 %v1_1000b75b.off, 131071
  %v1_1000b760 = icmp eq i1 %tmp, false
  br i1 %v1_1000b760, label %dec_label_pc_1000b772, label %dec_label_pc_1000b762

dec_label_pc_1000b762:                            ; preds = %entry
  %v3_1000b768 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -3)
  br label %dec_label_pc_1000b7d5

dec_label_pc_1000b772:                            ; preds = %entry
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v2_1000b778 = add i32 %arg1, 8
  %v3_1000b778 = inttoptr i32 %v2_1000b778 to i32*
  store i32 %arg2, i32* %v3_1000b778, align 4
  %v1_1000b77e = load i32, i32* %edx.global-to-local, align 4
  %v2_1000b77e = add i32 %v1_1000b77e, 12
  %v3_1000b77e = inttoptr i32 %v2_1000b77e to i32*
  store i32 %arg3, i32* %v3_1000b77e, align 4
  store i32 %arg1, i32* @edx, align 4
  store i32 %arg1, i32* @eax, align 4
  %v3_1000b78f = and i32 %arg1, 16640
  %v4_1000b78f = icmp eq i32 %v3_1000b78f, 0
  %v1_1000b792 = icmp eq i1 %v4_1000b78f, false
  br i1 %v1_1000b792, label %dec_label_pc_1000b7a4, label %dec_label_pc_1000b794

dec_label_pc_1000b794:                            ; preds = %dec_label_pc_1000b772
  %v3_1000b79a = call i32 @SetFuncStatusCode(i32 %arg1, i16 3)
  br label %dec_label_pc_1000b7d5

dec_label_pc_1000b7a4:                            ; preds = %dec_label_pc_1000b772
  store i32 %arg1, i32* @edx, align 4
  %v1_1000b7a8 = call i32 @function_10001718(i32 %arg1)
  %v1_1000b7b0 = mul i32 %v1_1000b7a8, 65536
  %v2_1000b7b0 = sdiv i32 %v1_1000b7b0, 65536
  store i32 %v2_1000b7b0, i32* @eax, align 4
  %v1_1000b7b0.off = or i32 %v1_1000b7b0, 65535
  %tmp12 = icmp ult i32 %v1_1000b7b0.off, 131071
  br i1 %tmp12, label %dec_label_pc_1000b7c7, label %dec_label_pc_1000b7b7

dec_label_pc_1000b7b7:                            ; preds = %dec_label_pc_1000b7a4
  %v3_1000b7bd = call i32 @SetFuncStatusCode(i32 %arg1, i16 -6)
  br label %dec_label_pc_1000b7d5

dec_label_pc_1000b7c7:                            ; preds = %dec_label_pc_1000b7a4
  store i32 %arg1, i32* @edx, align 4
  %v3_1000b7cd = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_1000b7d5

dec_label_pc_1000b7d5:                            ; preds = %dec_label_pc_1000b762, %dec_label_pc_1000b7b7, %dec_label_pc_1000b794, %dec_label_pc_1000b7c7
  %v0_1000b7d6 = phi i32 [ %v3_1000b768, %dec_label_pc_1000b762 ], [ %v3_1000b7bd, %dec_label_pc_1000b7b7 ], [ %v3_1000b79a, %dec_label_pc_1000b794 ], [ %v3_1000b7cd, %dec_label_pc_1000b7c7 ]
  ret i32 %v0_1000b7d6

; uselistorder directives
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 13, 12, 11, 10, 9, 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1000b7d5, { 3, 1, 2, 0 }
}

define i32 @ConfigStepSize(i32 %arg1, double %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000b7d7 = load i32, i32* @ebp, align 4
  store i32 %v0_1000b7d7, i32* %stack_var_-4, align 4
  %v4_1000b7d7 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000b7d7, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000b7e1 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000b7e1, i32* @eax, align 4
  %v1_1000b7e9 = mul i32 %v1_1000b7e1, 65536
  %v1_1000b7e9.off = or i32 %v1_1000b7e9, 65535
  %tmp = icmp ult i32 %v1_1000b7e9.off, 131071
  br i1 %tmp, label %dec_label_pc_1000b801, label %dec_label_pc_1000b7f0

dec_label_pc_1000b7f0:                            ; preds = %entry
  %v1_1000b7f4 = call i32 @GetFuncStatusCode(i32 %arg1)
  store i32 %v1_1000b7f4, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b882

dec_label_pc_1000b801:                            ; preds = %entry
  store i32 %arg1, i32* @eax, align 4
  %v1_1000b804 = add i32 %arg1, 32
  %v2_1000b804 = inttoptr i32 %v1_1000b804 to i16*
  %v3_1000b804 = load i16, i16* %v2_1000b804, align 2
  %v9_1000b808 = icmp eq i16 %v3_1000b804, 1
  %v1_1000b80b = icmp eq i1 %v9_1000b808, false
  br i1 %v1_1000b80b, label %dec_label_pc_1000b81d, label %dec_label_pc_1000b80d

dec_label_pc_1000b80d:                            ; preds = %dec_label_pc_1000b801
  store i32 %arg1, i32* @edx, align 4
  %v3_1000b813 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -4)
  store i32 %v3_1000b813, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b882

dec_label_pc_1000b81d:                            ; preds = %dec_label_pc_1000b801
  %v3_1000b828 = and i32 %arg1, 16640
  %v4_1000b828 = icmp eq i32 %v3_1000b828, 0
  %v1_1000b82b = icmp eq i1 %v4_1000b828, false
  br i1 %v1_1000b82b, label %dec_label_pc_1000b855, label %dec_label_pc_1000b82d

dec_label_pc_1000b82d:                            ; preds = %dec_label_pc_1000b81d
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_1000b831 = call i32 @RdMaxFreqLimit(i32 %arg1)
  store i32 %v1_1000b831, i32* %eax.global-to-local, align 4
  %v0_1000b836 = load i3, i3* @fpu_stat_TOP, align 1
  %v12_1000b836 = add i3 %v0_1000b836, 1
  store i3 %v12_1000b836, i3* @fpu_stat_TOP, align 1
  %v1_1000b840 = call i32 @RdMinFreqLimit(i32 %arg1)
  store i32 %v1_1000b840, i32* @eax, align 4
  %v3_1000b850 = and i32 %v1_1000b840, 256
  %v4_1000b850 = icmp eq i32 %v3_1000b850, 0
  br i1 %v4_1000b850, label %dec_label_pc_1000b865, label %dec_label_pc_1000b855

dec_label_pc_1000b855:                            ; preds = %dec_label_pc_1000b82d, %dec_label_pc_1000b81d
  store i32 %arg1, i32* @edx, align 4
  %v3_1000b85b = call i32 @SetFuncStatusCode(i32 %arg1, i16 -3)
  store i32 %v3_1000b85b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b882

dec_label_pc_1000b865:                            ; preds = %dec_label_pc_1000b82d
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_1000b868 = fptrunc double %arg2 to float
  %v5_1000b868 = bitcast float %v4_1000b868 to i32
  %v2_1000b86b = add i32 %arg1, 24
  %v3_1000b86b = inttoptr i32 %v2_1000b86b to i32*
  store i32 %v5_1000b868, i32* %v3_1000b86b, align 4
  store i32 %arg3, i32* @edx, align 4
  %v1_1000b871 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000b871 = add i32 %v1_1000b871, 28
  %v3_1000b871 = inttoptr i32 %v2_1000b871 to i32*
  store i32 %arg3, i32* %v3_1000b871, align 4
  store i32 %arg1, i32* @eax, align 4
  %v3_1000b87a = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  store i32 %v3_1000b87a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b882

dec_label_pc_1000b882:                            ; preds = %dec_label_pc_1000b855, %dec_label_pc_1000b80d, %dec_label_pc_1000b7f0, %dec_label_pc_1000b865
  %v0_1000b885 = phi i32 [ %v3_1000b85b, %dec_label_pc_1000b855 ], [ %v3_1000b813, %dec_label_pc_1000b80d ], [ %v1_1000b7f4, %dec_label_pc_1000b7f0 ], [ %v3_1000b87a, %dec_label_pc_1000b865 ]
  ret i32 %v0_1000b885

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 (i32)* @RdMinFreqLimit, { 1, 0 }
  uselistorder i32 (i32)* @RdMaxFreqLimit, { 1, 0, 4, 3, 2 }
  uselistorder i16 -4, { 1, 0, 2 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg1, { 16, 15, 14, 13, 12, 11, 10, 9, 8, 0, 7, 6, 4, 3, 5, 2, 1 }
  uselistorder label %dec_label_pc_1000b882, { 3, 0, 1, 2 }
}

define i32 @ConfigStopFreq(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @edx, align 4
  %v2_1000b895 = sext i32 %arg2 to i64
  %v3_1000b895 = bitcast i64 %v2_1000b895 to double
  %v4_1000b895 = call i32 @FreqInRange(i32 %arg1, double %v3_1000b895)
  %v1_1000b89d = mul i32 %v4_1000b895, 65536
  %v2_1000b89d = sdiv i32 %v1_1000b89d, 65536
  store i32 %v2_1000b89d, i32* @eax, align 4
  %v1_1000b89d.off = or i32 %v1_1000b89d, 65535
  %tmp = icmp ult i32 %v1_1000b89d.off, 131071
  %v1_1000b8a2 = icmp eq i1 %tmp, false
  br i1 %v1_1000b8a2, label %dec_label_pc_1000b8b4, label %dec_label_pc_1000b8a4

dec_label_pc_1000b8a4:                            ; preds = %entry
  %v3_1000b8aa = call i32 @SetFuncStatusCode(i32 %arg1, i16 -3)
  br label %dec_label_pc_1000b917

dec_label_pc_1000b8b4:                            ; preds = %entry
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v2_1000b8ba = add i32 %arg1, 16
  %v3_1000b8ba = inttoptr i32 %v2_1000b8ba to i32*
  store i32 %arg2, i32* %v3_1000b8ba, align 4
  %v1_1000b8c0 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000b8c0 = add i32 %v1_1000b8c0, 20
  %v3_1000b8c0 = inttoptr i32 %v2_1000b8c0 to i32*
  store i32 %arg3, i32* %v3_1000b8c0, align 4
  store i32 %arg1, i32* @edx, align 4
  store i32 %arg1, i32* @eax, align 4
  %v3_1000b8d1 = and i32 %arg1, 16640
  %v4_1000b8d1 = icmp eq i32 %v3_1000b8d1, 0
  %v1_1000b8d4 = icmp eq i1 %v4_1000b8d1, false
  br i1 %v1_1000b8d4, label %dec_label_pc_1000b8e6, label %dec_label_pc_1000b8d6

dec_label_pc_1000b8d6:                            ; preds = %dec_label_pc_1000b8b4
  %v3_1000b8dc = call i32 @SetFuncStatusCode(i32 %arg1, i16 3)
  br label %dec_label_pc_1000b917

dec_label_pc_1000b8e6:                            ; preds = %dec_label_pc_1000b8b4
  store i32 %arg1, i32* @edx, align 4
  %v1_1000b8ea = call i32 @function_10001718(i32 %arg1)
  %v1_1000b8f2 = mul i32 %v1_1000b8ea, 65536
  %v2_1000b8f2 = sdiv i32 %v1_1000b8f2, 65536
  store i32 %v2_1000b8f2, i32* @eax, align 4
  %v1_1000b8f2.off = or i32 %v1_1000b8f2, 65535
  %tmp12 = icmp ult i32 %v1_1000b8f2.off, 131071
  br i1 %tmp12, label %dec_label_pc_1000b909, label %dec_label_pc_1000b8f9

dec_label_pc_1000b8f9:                            ; preds = %dec_label_pc_1000b8e6
  %v3_1000b8ff = call i32 @SetFuncStatusCode(i32 %arg1, i16 -6)
  br label %dec_label_pc_1000b917

dec_label_pc_1000b909:                            ; preds = %dec_label_pc_1000b8e6
  store i32 %arg1, i32* @edx, align 4
  %v3_1000b90f = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_1000b917

dec_label_pc_1000b917:                            ; preds = %dec_label_pc_1000b8f9, %dec_label_pc_1000b8d6, %dec_label_pc_1000b8a4, %dec_label_pc_1000b909
  %v0_1000b918 = phi i32 [ %v3_1000b8ff, %dec_label_pc_1000b8f9 ], [ %v3_1000b8dc, %dec_label_pc_1000b8d6 ], [ %v3_1000b8aa, %dec_label_pc_1000b8a4 ], [ %v3_1000b90f, %dec_label_pc_1000b909 ]
  ret i32 %v0_1000b918

; uselistorder directives
  uselistorder i32 (i32)* @function_10001718, { 1, 0, 12, 11, 9, 3, 8, 7, 6, 5, 4, 10, 2 }
  uselistorder i16 3, { 0, 1, 7, 8, 2, 10, 3, 4, 11, 9, 5, 6 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 13, 12, 11, 10, 9, 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1000b917, { 3, 0, 1, 2 }
}

define i32 @ConfigTrigFreq(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000b920 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000b920, i32* @eax, align 4
  %v1_1000b928 = mul i32 %v1_1000b920, 65536
  %v1_1000b928.off = or i32 %v1_1000b928, 65535
  %tmp = icmp ult i32 %v1_1000b928.off, 131071
  br i1 %tmp, label %dec_label_pc_1000b93d, label %dec_label_pc_1000b92f

dec_label_pc_1000b92f:                            ; preds = %entry
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_1000b933 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_1000b985

dec_label_pc_1000b93d:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v2_1000b949 = sext i32 %arg2 to i64
  %v3_1000b949 = bitcast i64 %v2_1000b949 to double
  %v4_1000b949 = call i32 @FreqInRange(i32 %arg1, double %v3_1000b949)
  %v1_1000b951 = mul i32 %v4_1000b949, 65536
  %v2_1000b951 = sdiv i32 %v1_1000b951, 65536
  store i32 %v2_1000b951, i32* @eax, align 4
  %v1_1000b951.off = or i32 %v1_1000b951, 65535
  %tmp9 = icmp ult i32 %v1_1000b951.off, 131071
  %v1_1000b956 = icmp eq i1 %tmp9, false
  br i1 %v1_1000b956, label %dec_label_pc_1000b968, label %dec_label_pc_1000b958

dec_label_pc_1000b958:                            ; preds = %dec_label_pc_1000b93d
  %v3_1000b95e = call i32 @SetFuncStatusCode(i32 %arg1, i16 -3)
  br label %dec_label_pc_1000b985

dec_label_pc_1000b968:                            ; preds = %dec_label_pc_1000b93d
  store i32 %arg1, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* @eax, align 4
  %v2_1000b96e = add i32 %arg1, 120
  %v3_1000b96e = inttoptr i32 %v2_1000b96e to i32*
  store i32 %arg2, i32* %v3_1000b96e, align 4
  %v1_1000b974 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000b974 = add i32 %v1_1000b974, 124
  %v3_1000b974 = inttoptr i32 %v2_1000b974 to i32*
  store i32 %arg3, i32* %v3_1000b974, align 4
  store i32 %arg1, i32* @edx, align 4
  %v3_1000b97d = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_1000b985

dec_label_pc_1000b985:                            ; preds = %dec_label_pc_1000b958, %dec_label_pc_1000b92f, %dec_label_pc_1000b968
  %v0_1000b986 = phi i32 [ %v3_1000b95e, %dec_label_pc_1000b958 ], [ %v1_1000b933, %dec_label_pc_1000b92f ], [ %v3_1000b97d, %dec_label_pc_1000b968 ]
  ret i32 %v0_1000b986

; uselistorder directives
  uselistorder i32 120, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder i32 %arg1, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000b985, { 2, 0, 1 }
}

define i32 @ConfigZspanFreq(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000b98e = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000b98e, i32* @eax, align 4
  %v1_1000b996 = mul i32 %v1_1000b98e, 65536
  %v2_1000b996 = sdiv i32 %v1_1000b996, 65536
  store i32 %v2_1000b996, i32* @ecx, align 4
  %v1_1000b996.off = or i32 %v1_1000b996, 65535
  %tmp = icmp ult i32 %v1_1000b996.off, 131071
  br i1 %tmp, label %dec_label_pc_1000b9ab, label %dec_label_pc_1000b99d

dec_label_pc_1000b99d:                            ; preds = %entry
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_1000b9a1 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_1000b9f9

dec_label_pc_1000b9ab:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v2_1000b9b7 = sext i32 %arg2 to i64
  %v3_1000b9b7 = bitcast i64 %v2_1000b9b7 to double
  %v4_1000b9b7 = call i32 @FreqInRange(i32 %arg1, double %v3_1000b9b7)
  %v1_1000b9bf = mul i32 %v4_1000b9b7, 65536
  %v2_1000b9bf = sdiv i32 %v1_1000b9bf, 65536
  store i32 %v2_1000b9bf, i32* @eax, align 4
  %v1_1000b9bf.off = or i32 %v1_1000b9bf, 65535
  %tmp9 = icmp ult i32 %v1_1000b9bf.off, 131071
  %v1_1000b9c4 = icmp eq i1 %tmp9, false
  br i1 %v1_1000b9c4, label %dec_label_pc_1000b9d6, label %dec_label_pc_1000b9c6

dec_label_pc_1000b9c6:                            ; preds = %dec_label_pc_1000b9ab
  store i32 %arg1, i32* @ecx, align 4
  %v3_1000b9cc = call i32 @SetFuncStatusCode(i32 %arg1, i16 -3)
  br label %dec_label_pc_1000b9f9

dec_label_pc_1000b9d6:                            ; preds = %dec_label_pc_1000b9ab
  store i32 %arg1, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* @eax, align 4
  %v2_1000b9dc = add i32 %arg1, 144
  %v3_1000b9dc = inttoptr i32 %v2_1000b9dc to i32*
  store i32 %arg2, i32* %v3_1000b9dc, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v1_1000b9e5 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000b9e5 = add i32 %v1_1000b9e5, 148
  %v3_1000b9e5 = inttoptr i32 %v2_1000b9e5 to i32*
  store i32 %arg3, i32* %v3_1000b9e5, align 4
  store i32 %arg1, i32* @edx, align 4
  %v3_1000b9f1 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_1000b9f9

dec_label_pc_1000b9f9:                            ; preds = %dec_label_pc_1000b9c6, %dec_label_pc_1000b99d, %dec_label_pc_1000b9d6
  %v0_1000b9fa = phi i32 [ %v3_1000b9cc, %dec_label_pc_1000b9c6 ], [ %v1_1000b9a1, %dec_label_pc_1000b99d ], [ %v3_1000b9f1, %dec_label_pc_1000b9d6 ]
  ret i32 %v0_1000b9fa

; uselistorder directives
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder i32 %arg1, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000b9f9, { 2, 0, 1 }
}

define i32 @FindIdxForSwpFreq(i32 %arg1, i32 %arg2, double %arg3) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000b9fb = load i32, i32* @ebp, align 4
  store i32 %v0_1000b9fb, i32* %stack_var_-4, align 4
  %v4_1000b9fb = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000b9fb, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000ba0c = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000ba0c, i32* @eax, align 4
  %v1_1000ba14 = mul i32 %v1_1000ba0c, 65536
  %v1_1000ba14.off = or i32 %v1_1000ba14, 65535
  %tmp = icmp ult i32 %v1_1000ba14.off, 131071
  br i1 %tmp, label %dec_label_pc_1000ba2f, label %dec_label_pc_1000ba1b

dec_label_pc_1000ba1b:                            ; preds = %entry
  %v1_1000ba1f = call i32 @GetFuncStatusCode(i32 %arg1)
  %v1_1000ba27 = mul i32 %v1_1000ba1f, 65536
  %v2_1000ba27 = sdiv i32 %v1_1000ba27, 65536
  br label %dec_label_pc_1000bb18

dec_label_pc_1000ba2f:                            ; preds = %entry
  %v4_1000ba2f = icmp eq i32 %arg2, 0
  %v1_1000ba33 = icmp eq i1 %v4_1000ba2f, false
  br i1 %v1_1000ba33, label %dec_label_pc_1000ba3d, label %dec_label_pc_1000ba35

dec_label_pc_1000ba35:                            ; preds = %dec_label_pc_1000ba2f
  br label %dec_label_pc_1000bb18

dec_label_pc_1000ba3d:                            ; preds = %dec_label_pc_1000ba2f
  %v1_1000ba40 = add i32 %arg1, 164
  %v2_1000ba40 = inttoptr i32 %v1_1000ba40 to i32*
  %v3_1000ba40 = load i32, i32* %v2_1000ba40, align 4
  %v1_1000ba4c = add i32 %arg1, 8
  %v2_1000ba4c = inttoptr i32 %v1_1000ba4c to i32*
  %v3_1000ba4c = load i32, i32* %v2_1000ba4c, align 4
  %v6_1000ba4f = sext i32 %v3_1000ba4c to i64
  %v7_1000ba4f = bitcast i64 %v6_1000ba4f to double
  %v1_1000ba5b = add i32 %arg1, 24
  %v2_1000ba5b = inttoptr i32 %v1_1000ba5b to i32*
  %v3_1000ba5b = load i32, i32* %v2_1000ba5b, align 4
  %v6_1000ba5e = sext i32 %v3_1000ba5b to i64
  %v7_1000ba5e = bitcast i64 %v6_1000ba5e to double
  %v1_1000ba61 = add i32 %arg1, 28
  %v2_1000ba61 = inttoptr i32 %v1_1000ba61 to i32*
  %v3_1000ba61 = load i32, i32* %v2_1000ba61, align 4
  store i32 %v3_1000ba61, i32* @ecx, align 4
  %tmp50 = fpext double %v7_1000ba5e to x86_fp80
  %tmp51 = fpext double %v7_1000ba4f to x86_fp80
  %v5_1000ba79 = fpext double %arg3 to x86_fp80
  %v3_1000ba7e = and i32 %v3_1000ba5b, 16640
  %v4_1000ba7e = icmp eq i32 %v3_1000ba7e, 0
  br i1 %v4_1000ba7e, label %dec_label_pc_1000ba9f, label %dec_label_pc_1000ba83

dec_label_pc_1000ba83:                            ; preds = %dec_label_pc_1000ba3d
  %v1_1000ba6a = add i32 %v3_1000ba40, -1
  br label %dec_label_pc_1000bb18

dec_label_pc_1000ba9f:                            ; preds = %dec_label_pc_1000ba3d
  %v7_1000baa2 = fsub x86_fp80 %v5_1000ba79, %tmp51
  %tmp52 = fptrunc x86_fp80 %v7_1000baa2 to double
  %v3_1000baab = call i32 @function_1000d83e(double %tmp52)
  %v0_1000bab3 = load i3, i3* @fpu_stat_TOP, align 1
  store i32 1, i32* @ecx, align 4
  %v5_1000bad526 = icmp sgt i32 %v3_1000ba40, 1
  br i1 %v5_1000bad526, label %dec_label_pc_1000bad7, label %dec_label_pc_1000bb15

dec_label_pc_1000bad7:                            ; preds = %dec_label_pc_1000ba9f, %dec_label_pc_1000bb13
  %v5_1000bad7.in = phi i3 [ %v0_1000baf7, %dec_label_pc_1000bb13 ], [ %v0_1000bab3, %dec_label_pc_1000ba9f ]
  %storemerge1028 = phi i32 [ %v1_1000bac9, %dec_label_pc_1000bb13 ], [ 1, %dec_label_pc_1000ba9f ]
  %stack_var_-24.027 = phi i32 [ %stack_var_-24.1, %dec_label_pc_1000bb13 ], [ 0, %dec_label_pc_1000ba9f ]
  %v5_1000bad7 = add i3 %v5_1000bad7.in, 1
  %v4_1000bad7 = sitofp i32 %storemerge1028 to x86_fp80
  %v11_1000bada = fmul x86_fp80 %tmp50, %v4_1000bad7
  %v11_1000badd = fadd x86_fp80 %tmp51, %v11_1000bada
  %v7_1000bae3 = fsub x86_fp80 %v5_1000ba79, %v11_1000badd
  store i3 %v5_1000bad7, i3* @fpu_stat_TOP, align 1
  %tmp53 = fptrunc x86_fp80 %v7_1000bae3 to double
  %v3_1000baec = call i32 @function_1000d83e(double %tmp53)
  %v0_1000baf7 = load i3, i3* @fpu_stat_TOP, align 1
  %v3_1000bafc = and i32 %v3_1000baec, 16640
  %v4_1000bafc = icmp eq i32 %v3_1000bafc, 0
  br i1 %v4_1000bafc, label %dec_label_pc_1000bb13, label %dec_label_pc_1000bb01

dec_label_pc_1000bb01:                            ; preds = %dec_label_pc_1000bad7
  br label %dec_label_pc_1000bb13

dec_label_pc_1000bb13:                            ; preds = %dec_label_pc_1000bad7, %dec_label_pc_1000bb01
  %stack_var_-24.1 = phi i32 [ %stack_var_-24.027, %dec_label_pc_1000bad7 ], [ %storemerge1028, %dec_label_pc_1000bb01 ]
  %v1_1000bac9 = add nuw nsw i32 %storemerge1028, 1
  store i32 %v1_1000bac9, i32* @ecx, align 4
  %exitcond = icmp eq i32 %v1_1000bac9, %v3_1000ba40
  br i1 %exitcond, label %dec_label_pc_1000bb15, label %dec_label_pc_1000bad7

dec_label_pc_1000bb15:                            ; preds = %dec_label_pc_1000bb13, %dec_label_pc_1000ba9f
  %stack_var_-24.0.lcssa = phi i32 [ 0, %dec_label_pc_1000ba9f ], [ %stack_var_-24.1, %dec_label_pc_1000bb13 ]
  br label %dec_label_pc_1000bb18

dec_label_pc_1000bb18:                            ; preds = %dec_label_pc_1000ba83, %dec_label_pc_1000ba35, %dec_label_pc_1000ba1b, %dec_label_pc_1000bb15
  %v0_1000bb1b = phi i32 [ %v1_1000ba6a, %dec_label_pc_1000ba83 ], [ -1, %dec_label_pc_1000ba35 ], [ %v2_1000ba27, %dec_label_pc_1000ba1b ], [ %stack_var_-24.0.lcssa, %dec_label_pc_1000bb15 ]
  ret i32 %v0_1000bb1b

; uselistorder directives
  uselistorder i32 %v1_1000bac9, { 1, 2, 0 }
  uselistorder i32 %storemerge1028, { 1, 2, 0 }
  uselistorder x86_fp80 %tmp51, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 (double)* @function_1000d83e, { 2, 3, 0, 1 }
  uselistorder i32 164, { 1, 0, 7, 2, 3, 6, 4, 5 }
  uselistorder i32 %arg1, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1000bb18, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1000bb13, { 1, 0 }
  uselistorder label %dec_label_pc_1000bad7, { 1, 0 }
}

define i32 @GetAmplWithFreqExt(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i16, align 2
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i16, align 2
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000bb1c = load i32, i32* @ebp, align 4
  store i32 %v0_1000bb1c, i32* %stack_var_-4, align 4
  %v4_1000bb1c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000bb1c, i32* @ebp, align 4
  store i16 0, i16* %stack_var_-20, align 2
  store i16 0, i16* %stack_var_-40, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_1000bb45 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000bb45, i32* @eax, align 4
  %v1_1000bb4d = mul i32 %v1_1000bb45, 65536
  %v1_1000bb4d.off = or i32 %v1_1000bb4d, 65535
  %tmp = icmp ult i32 %v1_1000bb4d.off, 131071
  br i1 %tmp, label %dec_label_pc_1000bb65, label %dec_label_pc_1000bb54

dec_label_pc_1000bb54:                            ; preds = %entry
  %v1_1000bb58 = call i32 @GetFuncStatusCode(i32 %arg1)
  br label %dec_label_pc_1000be96

dec_label_pc_1000bb65:                            ; preds = %entry
  %v1_1000bb69 = call i32 @IsSweeping(i32 %arg1)
  store i32 %v1_1000bb69, i32* @eax, align 4
  %v1_1000bb71 = mul i32 %v1_1000bb69, 65536
  %v1_1000bb71.off = or i32 %v1_1000bb71, 65535
  %tmp68 = icmp ult i32 %v1_1000bb71.off, 131071
  %v1_1000bb76 = icmp eq i1 %tmp68, false
  br i1 %v1_1000bb76, label %dec_label_pc_1000bb8b, label %dec_label_pc_1000bb78

dec_label_pc_1000bb78:                            ; preds = %dec_label_pc_1000bb65
  store i32 %arg1, i32* @edx, align 4
  %v3_1000bb7e = call i32 @SetFuncStatusCode(i32 %arg1, i16 -14)
  br label %dec_label_pc_1000be96

dec_label_pc_1000bb8b:                            ; preds = %dec_label_pc_1000bb65
  store i32 %arg1, i32* @eax, align 4
  %v1_1000bb8f = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_1000bb8f = trunc i32 %v1_1000bb8f to i16
  %v3_1000bb9f = icmp slt i16 %v2_1000bb8f, 0
  %v2_1000bba1 = icmp eq i1 %v3_1000bb9f, false
  br i1 %v2_1000bba1, label %dec_label_pc_1000bbac, label %dec_label_pc_1000bba3

dec_label_pc_1000bba3:                            ; preds = %dec_label_pc_1000bb8b
  %sext7 = mul i32 %v1_1000bb8f, 65536
  %v4_1000bb9b = sdiv i32 %sext7, 65536
  %v4_1000bba3 = and i32 %v1_1000bb8f, 65535
  %v7_1000bba3 = and i32 %v4_1000bb9b, -65536
  %v8_1000bba3 = or i32 %v7_1000bba3, %v4_1000bba3
  br label %dec_label_pc_1000be96

dec_label_pc_1000bbac:                            ; preds = %dec_label_pc_1000bb8b
  %v1_1000bbb0 = call i32 @RdSwpIdx(i32 %arg1)
  store i32 %arg1, i32* @eax, align 4
  %v1_1000bbbf = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_1000bbbf = trunc i32 %v1_1000bbbf to i16
  %v3_1000bbcf = icmp slt i16 %v2_1000bbbf, 0
  %v2_1000bbd1 = icmp eq i1 %v3_1000bbcf, false
  br i1 %v2_1000bbd1, label %dec_label_pc_1000bbdc, label %dec_label_pc_1000bbd3

dec_label_pc_1000bbd3:                            ; preds = %dec_label_pc_1000bbac
  %sext9 = mul i32 %v1_1000bbbf, 65536
  %v4_1000bbcb = sdiv i32 %sext9, 65536
  %v4_1000bbd3 = and i32 %v1_1000bbbf, 65535
  %v7_1000bbd3 = and i32 %v4_1000bbcb, -65536
  %v8_1000bbd3 = or i32 %v7_1000bbd3, %v4_1000bbd3
  br label %dec_label_pc_1000be96

dec_label_pc_1000bbdc:                            ; preds = %dec_label_pc_1000bbac
  %v1_1000bbe0 = call i32 @RdNumDataPts(i32 %arg1)
  store i32 %arg1, i32* @eax, align 4
  %v1_1000bbef = call i32 @GetFuncStatusCode(i32 %arg1)
  %v2_1000bbef = trunc i32 %v1_1000bbef to i16
  store i32 %v1_1000bbef, i32* @eax, align 4
  %v2_1000bbff = icmp slt i16 %v2_1000bbef, 0
  %v2_1000bc01 = icmp eq i1 %v2_1000bbff, false
  br i1 %v2_1000bc01, label %dec_label_pc_1000bc0c, label %dec_label_pc_1000bc03

dec_label_pc_1000bc03:                            ; preds = %dec_label_pc_1000bbdc
  %sext11 = mul i32 %v1_1000bbef, 65536
  %v4_1000bbfb = sdiv i32 %sext11, 65536
  %v4_1000bc03 = and i32 %v1_1000bbef, 65535
  %v7_1000bc03 = and i32 %v4_1000bbfb, -65536
  %v8_1000bc03 = or i32 %v7_1000bc03, %v4_1000bc03
  br label %dec_label_pc_1000be96

dec_label_pc_1000bc0c:                            ; preds = %dec_label_pc_1000bbdc
  store i32 %v1_1000bbb0, i32* @edx, align 4
  %v15_1000bc0f = icmp eq i32 %v1_1000bbe0, %v1_1000bbb0
  %v1_1000bc12 = icmp eq i1 %v15_1000bc0f, false
  br i1 %v1_1000bc12, label %dec_label_pc_1000bc27, label %dec_label_pc_1000bc14

dec_label_pc_1000bc14:                            ; preds = %dec_label_pc_1000bc0c
  store i32 %arg1, i32* @eax, align 4
  %v3_1000bc1a = call i32 @SetFuncStatusCode(i32 %arg1, i16 4)
  br label %dec_label_pc_1000be96

dec_label_pc_1000bc27:                            ; preds = %dec_label_pc_1000bc0c
  %v7_1000bc2d = icmp slt i32 %v1_1000bbe0, %v1_1000bbb0
  br i1 %v7_1000bc2d, label %dec_label_pc_1000bc2f, label %dec_label_pc_1000bc42

dec_label_pc_1000bc2f:                            ; preds = %dec_label_pc_1000bc27
  store i32 %arg1, i32* @edx, align 4
  %v3_1000bc35 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -2)
  br label %dec_label_pc_1000be96

dec_label_pc_1000bc42:                            ; preds = %dec_label_pc_1000bc27
  %v2_1000bc48 = mul i32 %v1_1000bbb0, 2
  %v3_1000bc48 = add i32 %v2_1000bc48, %arg2
  store i32 %v3_1000bc48, i32* %stack_var_-68, align 4
  %v2_1000bc54 = mul i32 %v1_1000bbb0, 8
  %v3_1000bc54 = add i32 %v2_1000bc54, %arg3
  %v2_1000bc5a = ptrtoint i16* %stack_var_-40 to i32
  %v2_1000bc5e = ptrtoint i32* %stack_var_-44 to i32
  %v5_1000bc69 = sub i32 %v1_1000bbe0, %v1_1000bbb0
  %v6_1000bc71 = trunc i32 %arg1 to i16
  %v7_1000bc71 = call i32 @function_100040c9(i16 %v6_1000bc71, i32 %v5_1000bc69, i32 3, i32 %v2_1000bc5e, i32 %v2_1000bc5a, i32 %v3_1000bc48)
  %v1_1000bc79 = mul i32 %v7_1000bc71, 65536
  %v1_1000bc79.off = or i32 %v1_1000bc79, 65535
  %tmp69 = icmp ult i32 %v1_1000bc79.off, 131071
  br i1 %tmp69, label %dec_label_pc_1000bc89, label %dec_label_pc_1000bc80

dec_label_pc_1000bc80:                            ; preds = %dec_label_pc_1000bc42
  %v1_1000bc80 = and i32 %v7_1000bc71, -65536
  %v2_1000bc80 = or i32 %v1_1000bc80, 65534
  br label %dec_label_pc_1000be96

dec_label_pc_1000bc89:                            ; preds = %dec_label_pc_1000bc42
  %v3_1000bc89 = load i32, i32* %stack_var_-44, align 4
  %v4_1000bc89 = icmp eq i32 %v3_1000bc89, 0
  %v1_1000bc8d = icmp eq i1 %v4_1000bc89, false
  br i1 %v1_1000bc8d, label %dec_label_pc_1000bc97, label %dec_label_pc_1000bc8f

dec_label_pc_1000bc8f:                            ; preds = %dec_label_pc_1000bc89
  %v12_1000bc8f = and i32 %v7_1000bc71, -65536
  br label %dec_label_pc_1000be96

dec_label_pc_1000bc97:                            ; preds = %dec_label_pc_1000bc89
  %v3_1000bc97 = load i16, i16* %stack_var_-40, align 2
  store i16 %v3_1000bc97, i16* %stack_var_-20, align 2
  %v2_1000bce5 = ptrtoint i16* %stack_var_-20 to i32
  store i32 0, i32* @edx, align 4
  %v5_1000bcba65 = icmp sgt i32 %v3_1000bc89, 0
  br i1 %v5_1000bcba65, label %dec_label_pc_1000bcd4.preheader.lr.ph, label %dec_label_pc_1000be55

dec_label_pc_1000bcd4.preheader.lr.ph:            ; preds = %dec_label_pc_1000bc97
  br label %dec_label_pc_1000bcd4.preheader

dec_label_pc_1000bcd4.preheader:                  ; preds = %dec_label_pc_1000bcd4.preheader.lr.ph, %dec_label_pc_1000be0e
  %v4_1000bcb367 = phi i32 [ 0, %dec_label_pc_1000bcd4.preheader.lr.ph ], [ %v4_1000bcb3, %dec_label_pc_1000be0e ]
  %storemerge66 = phi i16 [ 0, %dec_label_pc_1000bcd4.preheader.lr.ph ], [ %v2_1000bcab, %dec_label_pc_1000be0e ]
  br label %dec_label_pc_1000bcdd

dec_label_pc_1000bcdd:                            ; preds = %dec_label_pc_1000bd0b.dec_label_pc_1000bcdd_crit_edge, %dec_label_pc_1000bcd4.preheader
  %indvars.iv = phi i32 [ 0, %dec_label_pc_1000bcd4.preheader ], [ %indvars.iv.next, %dec_label_pc_1000bd0b.dec_label_pc_1000bcdd_crit_edge ]
  %v3_1000bcdd = load i16, i16* %stack_var_-40, align 2
  store i16 %v3_1000bcdd, i16* %stack_var_-20, align 2
  %v3_1000bced = call i32 @function_100039d0(i16 %v6_1000bc71, i32 %v2_1000bce5)
  store i32 %arg1, i32* @edx, align 4
  %v1_1000bcfd = call i32 @RdErrorStatus(i32 %arg1)
  %v1_1000bd05 = icmp eq i32 %v1_1000bcfd, 0
  %v1_1000bd07 = icmp eq i1 %v1_1000bd05, false
  br i1 %v1_1000bd07, label %dec_label_pc_1000bd0b, label %dec_label_pc_1000bd0d

dec_label_pc_1000bd0b:                            ; preds = %dec_label_pc_1000bcdd
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %v11_1000bcd8 = icmp slt i32 %indvars.iv.next, 3
  br i1 %v11_1000bcd8, label %dec_label_pc_1000bd0b.dec_label_pc_1000bcdd_crit_edge, label %dec_label_pc_1000bd0d

dec_label_pc_1000bd0b.dec_label_pc_1000bcdd_crit_edge: ; preds = %dec_label_pc_1000bd0b
  br label %dec_label_pc_1000bcdd

dec_label_pc_1000bd0d:                            ; preds = %dec_label_pc_1000bcdd, %dec_label_pc_1000bd0b
  %v1_1000bd11 = call i32 @RdErrorStatus(i32 %arg1)
  %v1_1000bd19 = icmp eq i32 %v1_1000bd11, 0
  br i1 %v1_1000bd19, label %dec_label_pc_1000bd22, label %dec_label_pc_1000be55

dec_label_pc_1000bd22:                            ; preds = %dec_label_pc_1000bd0d
  %v4_1000bced.le = trunc i32 %v3_1000bced to i16
  %v3_1000bd22 = load i16, i16* %stack_var_-20, align 2
  %v4_1000bd22 = sext i16 %v3_1000bd22 to i32
  %v6_1000bd22 = load i32, i32* @ecx, align 4
  %v8_1000bd22 = or i32 %v6_1000bd22, %v4_1000bd22
  store i16 %v3_1000bd22, i16* %stack_var_-40, align 2
  %v3_1000bd2e = load i32, i32* %stack_var_-68, align 4
  %v4_1000bd31 = and i32 %v3_1000bced, 65535
  %v6_1000bd31 = and i32 %v8_1000bd22, -65536
  %v7_1000bd31 = or i32 %v6_1000bd31, %v4_1000bd31
  store i32 %v7_1000bd31, i32* @ecx, align 4
  %v4_1000bd35 = mul nsw i32 %v4_1000bcb367, 2
  %v5_1000bd35 = add i32 %v3_1000bd2e, %v4_1000bd35
  %v6_1000bd35 = inttoptr i32 %v5_1000bd35 to i16*
  store i16 %v4_1000bced.le, i16* %v6_1000bd35, align 2
  br label %dec_label_pc_1000bd56

dec_label_pc_1000bd56:                            ; preds = %dec_label_pc_1000bd22, %dec_label_pc_1000bd84
  %indvars.iv19 = phi i32 [ 0, %dec_label_pc_1000bd22 ], [ %indvars.iv.next20, %dec_label_pc_1000bd84 ]
  %v3_1000bd56 = load i16, i16* %stack_var_-40, align 2
  store i16 %v3_1000bd56, i16* %stack_var_-20, align 2
  store i32 %v2_1000bce5, i32* @edx, align 4
  %v3_1000bd66 = call i32 @function_100039d0(i16 %v6_1000bc71, i32 %v2_1000bce5)
  %v1_1000bd76 = call i32 @RdErrorStatus(i32 %arg1)
  %v1_1000bd7e = icmp eq i32 %v1_1000bd76, 0
  %v1_1000bd80 = icmp eq i1 %v1_1000bd7e, false
  br i1 %v1_1000bd80, label %dec_label_pc_1000bd84, label %dec_label_pc_1000bd86

dec_label_pc_1000bd84:                            ; preds = %dec_label_pc_1000bd56
  %indvars.iv.next20 = add nuw nsw i32 %indvars.iv19, 1
  %v11_1000bd51 = icmp slt i32 %indvars.iv.next20, 3
  br i1 %v11_1000bd51, label %dec_label_pc_1000bd56, label %dec_label_pc_1000bd86

dec_label_pc_1000bd86:                            ; preds = %dec_label_pc_1000bd56, %dec_label_pc_1000bd84
  store i32 %arg1, i32* @edx, align 4
  %v1_1000bd8a = call i32 @RdErrorStatus(i32 %arg1)
  %v1_1000bd92 = icmp eq i32 %v1_1000bd8a, 0
  br i1 %v1_1000bd92, label %dec_label_pc_1000bd9b, label %dec_label_pc_1000be55

dec_label_pc_1000bd9b:                            ; preds = %dec_label_pc_1000bd86
  %v3_1000bd9b = load i16, i16* %stack_var_-20, align 2
  store i16 %v3_1000bd9b, i16* %stack_var_-40, align 2
  %v1_1000bda63 = and i32 %v3_1000bd66, 65535
  br label %dec_label_pc_1000bdcc

dec_label_pc_1000bdcc:                            ; preds = %dec_label_pc_1000bdfa.dec_label_pc_1000bdcc_crit_edge, %dec_label_pc_1000bd9b
  %v3_1000bdcc = phi i16 [ %v3_1000bd9b, %dec_label_pc_1000bd9b ], [ %v3_1000bdcc.pre, %dec_label_pc_1000bdfa.dec_label_pc_1000bdcc_crit_edge ]
  %indvars.iv22 = phi i32 [ 0, %dec_label_pc_1000bd9b ], [ %indvars.iv.next23, %dec_label_pc_1000bdfa.dec_label_pc_1000bdcc_crit_edge ]
  store i16 %v3_1000bdcc, i16* %stack_var_-20, align 2
  store i32 %v2_1000bce5, i32* @edx, align 4
  %v3_1000bddc = call i32 @function_100039d0(i16 %v6_1000bc71, i32 %v2_1000bce5)
  %v1_1000bdec = call i32 @RdErrorStatus(i32 %arg1)
  %v1_1000bdf4 = icmp eq i32 %v1_1000bdec, 0
  %v1_1000bdf6 = icmp eq i1 %v1_1000bdf4, false
  br i1 %v1_1000bdf6, label %dec_label_pc_1000bdfa, label %dec_label_pc_1000bdfc

dec_label_pc_1000bdfa:                            ; preds = %dec_label_pc_1000bdcc
  %indvars.iv.next23 = add nuw nsw i32 %indvars.iv22, 1
  %v11_1000bdc7 = icmp slt i32 %indvars.iv.next23, 3
  br i1 %v11_1000bdc7, label %dec_label_pc_1000bdfa.dec_label_pc_1000bdcc_crit_edge, label %dec_label_pc_1000bdfc

dec_label_pc_1000bdfa.dec_label_pc_1000bdcc_crit_edge: ; preds = %dec_label_pc_1000bdfa
  %v3_1000bdcc.pre = load i16, i16* %stack_var_-40, align 2
  br label %dec_label_pc_1000bdcc

dec_label_pc_1000bdfc:                            ; preds = %dec_label_pc_1000bdcc, %dec_label_pc_1000bdfa
  store i32 %arg1, i32* @edx, align 4
  %v1_1000be00 = call i32 @RdErrorStatus(i32 %arg1)
  %v1_1000be08 = icmp eq i32 %v1_1000be00, 0
  br i1 %v1_1000be08, label %dec_label_pc_1000be0e, label %dec_label_pc_1000be55

dec_label_pc_1000be0e:                            ; preds = %dec_label_pc_1000bdfc
  %v3_1000be0e = load i16, i16* %stack_var_-20, align 2
  store i16 %v3_1000be0e, i16* %stack_var_-40, align 2
  %sext17 = mul i32 %v3_1000bddc, 65536
  %v2_1000be31 = or i32 %sext17, %v1_1000bda63
  %v2_1000be3e = sext i32 %v2_1000be31 to i64
  %v3_1000be3e = call i32 @function_10002ea6(i32 %arg1, i64 %v2_1000be3e)
  %v0_1000be4d = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000be4d = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000be4d = mul nsw i32 %v4_1000bcb367, 8
  %v5_1000be4d = add i32 %v4_1000be4d, %v3_1000bc54
  %v6_1000be4d = fptrunc x86_fp80 %v1_1000be4d to double
  %v7_1000be4d = inttoptr i32 %v5_1000be4d to double*
  store double %v6_1000be4d, double* %v7_1000be4d, align 4
  %v8_1000be4d = add i3 %v0_1000be4d, 1
  store i3 %v8_1000be4d, i3* @fpu_stat_TOP, align 1
  %v2_1000bcab = add i16 %storemerge66, 1
  %v4_1000bcb7.pre = load i32, i32* %stack_var_-44, align 4
  %v4_1000bcb3 = sext i16 %v2_1000bcab to i32
  store i32 %v4_1000bcb3, i32* @edx, align 4
  %v5_1000bcba = icmp slt i32 %v4_1000bcb3, %v4_1000bcb7.pre
  br i1 %v5_1000bcba, label %dec_label_pc_1000bcd4.preheader, label %dec_label_pc_1000be55

dec_label_pc_1000be55:                            ; preds = %dec_label_pc_1000be0e, %dec_label_pc_1000bd0d, %dec_label_pc_1000bd86, %dec_label_pc_1000bdfc, %dec_label_pc_1000bc97
  %v3_1000be55 = load i16, i16* %stack_var_-40, align 2
  %v4_1000be55 = sext i16 %v3_1000be55 to i32
  %v6_1000be55 = load i32, i32* @edx, align 4
  %v7_1000be55 = and i32 %v6_1000be55, -65536
  %v8_1000be55 = or i32 %v7_1000be55, %v4_1000be55
  store i32 %v8_1000be55, i32* @edx, align 4
  %v3_1000be5e = call i32 @function_10003bb8(i16 %v6_1000bc71, i32 %v8_1000be55)
  %sext = mul i32 %v3_1000be5e, 65536
  %sext.off = or i32 %sext, 65535
  %tmp70 = icmp ult i32 %sext.off, 131071
  %v1_1000be70 = icmp eq i1 %tmp70, false
  br i1 %v1_1000be70, label %dec_label_pc_1000be92, label %dec_label_pc_1000be72

dec_label_pc_1000be72:                            ; preds = %dec_label_pc_1000be55
  %v4_1000be75 = load i32, i32* %stack_var_-44, align 4
  %v5_1000be75 = add i32 %v4_1000be75, %v1_1000bbb0
  %v2_1000be7d = call i32 @SetSwpIdx(i32 %arg1, i32 %v5_1000be75)
  %v1_1000be85 = mul i32 %v2_1000be7d, 65536
  %v1_1000be85.off = or i32 %v1_1000be85, 65535
  %tmp71 = icmp ult i32 %v1_1000be85.off, 131071
  br i1 %tmp71, label %dec_label_pc_1000be92, label %dec_label_pc_1000be8c

dec_label_pc_1000be8c:                            ; preds = %dec_label_pc_1000be72
  %v2_1000be8c = or i32 %v2_1000be7d, 65535
  br label %dec_label_pc_1000be96

dec_label_pc_1000be92:                            ; preds = %dec_label_pc_1000be72, %dec_label_pc_1000be55
  %v5_1000be92 = phi i32 [ %v2_1000be7d, %dec_label_pc_1000be72 ], [ %v3_1000be5e, %dec_label_pc_1000be55 ]
  %v4_1000be92 = and i32 %v3_1000be5e, 65535
  %v6_1000be92 = and i32 %v5_1000be92, -65536
  %v7_1000be92 = or i32 %v6_1000be92, %v4_1000be92
  br label %dec_label_pc_1000be96

dec_label_pc_1000be96:                            ; preds = %dec_label_pc_1000be8c, %dec_label_pc_1000bc8f, %dec_label_pc_1000bc80, %dec_label_pc_1000bc2f, %dec_label_pc_1000bc14, %dec_label_pc_1000bc03, %dec_label_pc_1000bbd3, %dec_label_pc_1000bba3, %dec_label_pc_1000bb78, %dec_label_pc_1000bb54, %dec_label_pc_1000be92
  %v0_1000be99 = phi i32 [ %v2_1000be8c, %dec_label_pc_1000be8c ], [ %v12_1000bc8f, %dec_label_pc_1000bc8f ], [ %v2_1000bc80, %dec_label_pc_1000bc80 ], [ %v3_1000bc35, %dec_label_pc_1000bc2f ], [ %v3_1000bc1a, %dec_label_pc_1000bc14 ], [ %v8_1000bc03, %dec_label_pc_1000bc03 ], [ %v8_1000bbd3, %dec_label_pc_1000bbd3 ], [ %v8_1000bba3, %dec_label_pc_1000bba3 ], [ %v3_1000bb7e, %dec_label_pc_1000bb78 ], [ %v1_1000bb58, %dec_label_pc_1000bb54 ], [ %v7_1000be92, %dec_label_pc_1000be92 ]
  %v2_1000be98 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000be98, i32* @ebp, align 4
  ret i32 %v0_1000be99

; uselistorder directives
  uselistorder i32 %v2_1000be7d, { 1, 2, 0 }
  uselistorder i32 %v3_1000be5e, { 2, 1, 0 }
  uselistorder i32 %v4_1000bcb3, { 1, 2, 0 }
  uselistorder i32 %v2_1000bce5, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v7_1000bc71, { 2, 1, 0 }
  uselistorder i32 %v1_1000bbef, { 1, 0, 3, 2 }
  uselistorder i32 %v1_1000bbe0, { 2, 0, 1 }
  uselistorder i32 %v1_1000bbbf, { 1, 0, 2 }
  uselistorder i32 %v1_1000bbb0, { 2, 3, 4, 5, 0, 1, 6 }
  uselistorder i32 %v1_1000bb8f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i16* %stack_var_-40, { 9, 8, 0, 7, 6, 5, 4, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i16* %stack_var_-20, { 8, 7, 6, 5, 4, 3, 0, 2, 1 }
  uselistorder i32 %arg1, { 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_1000be96, { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder label %dec_label_pc_1000be55, { 0, 3, 2, 1, 4 }
  uselistorder label %dec_label_pc_1000bdfc, { 1, 0 }
  uselistorder label %dec_label_pc_1000bd86, { 1, 0 }
  uselistorder label %dec_label_pc_1000bd56, { 1, 0 }
  uselistorder label %dec_label_pc_1000bd0d, { 1, 0 }
  uselistorder label %dec_label_pc_1000bcd4.preheader, { 1, 0 }
}

define i32 @GetMinMaxAmplWithFreqExt() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_1()
  %tmp85 = call i32 @__decompiler_undefined_function_1()
  %tmp87 = call i32 @__decompiler_undefined_function_1()
  %tmp88 = call i32 @__decompiler_undefined_function_1()
  %tmp90 = call i32 @__decompiler_undefined_function_1()
  %tmp94 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-20 = alloca i16, align 2
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i16, align 2
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000be9a = load i32, i32* @ebp, align 4
  store i32 %v0_1000be9a, i32* %stack_var_-4, align 4
  %v4_1000be9a = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000be9a, i32* @ebp, align 4
  %v15_1000be9d = ptrtoint i32* %stack_var_-76 to i32
  store i16 0, i16* %stack_var_-40, align 2
  store i16 0, i16* %stack_var_-20, align 2
  store i32 %tmp94, i32* @eax, align 4
  %v1_1000bec3 = call i32 @TestFuncStatusAndPtr(i32 %tmp94)
  store i32 %v1_1000bec3, i32* @eax, align 4
  %v1_1000becb = mul i32 %v1_1000bec3, 65536
  %v1_1000becb.off = or i32 %v1_1000becb, 65535
  %tmp163 = icmp ult i32 %v1_1000becb.off, 131071
  br i1 %tmp163, label %dec_label_pc_1000bee3, label %dec_label_pc_1000bed2

dec_label_pc_1000bed2:                            ; preds = %entry
  %v1_1000bed6 = call i32 @GetFuncStatusCode(i32 %tmp94)
  store i32 %v1_1000bed6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c3bd

dec_label_pc_1000bee3:                            ; preds = %entry
  store i32 %tmp94, i32* %eax.global-to-local, align 4
  %v1_1000bee7 = call i32 @IsSweeping(i32 %tmp94)
  store i32 %v1_1000bee7, i32* @eax, align 4
  %v1_1000beef = mul i32 %v1_1000bee7, 65536
  %v1_1000beef.off = or i32 %v1_1000beef, 65535
  %tmp164 = icmp ult i32 %v1_1000beef.off, 131071
  %v1_1000bef4 = icmp eq i1 %tmp164, false
  br i1 %v1_1000bef4, label %dec_label_pc_1000bf09, label %dec_label_pc_1000bef6

dec_label_pc_1000bef6:                            ; preds = %dec_label_pc_1000bee3
  store i32 %tmp94, i32* @edx, align 4
  %v3_1000befc = call i32 @SetFuncStatusCode(i32 %tmp94, i16 -14)
  store i32 %v3_1000befc, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c3bd

dec_label_pc_1000bf09:                            ; preds = %dec_label_pc_1000bee3
  store i32 %tmp94, i32* @eax, align 4
  %v1_1000bf0d = call i32 @GetFuncStatusCode(i32 %tmp94)
  %v2_1000bf0d = trunc i32 %v1_1000bf0d to i16
  store i32 %v1_1000bf0d, i32* %eax.global-to-local, align 4
  %v3_1000bf1d = icmp slt i16 %v2_1000bf0d, 0
  %v2_1000bf1f = icmp eq i1 %v3_1000bf1d, false
  br i1 %v2_1000bf1f, label %dec_label_pc_1000bf2a, label %dec_label_pc_1000bf21

dec_label_pc_1000bf21:                            ; preds = %dec_label_pc_1000bf09
  %sext = mul i32 %v1_1000bf0d, 65536
  %v4_1000bf19 = sdiv i32 %sext, 65536
  %v4_1000bf21 = and i32 %v1_1000bf0d, 65535
  %v7_1000bf21 = and i32 %v4_1000bf19, -65536
  %v8_1000bf21 = or i32 %v7_1000bf21, %v4_1000bf21
  store i32 %v8_1000bf21, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c3bd

dec_label_pc_1000bf2a:                            ; preds = %dec_label_pc_1000bf09
  %v1_1000bf2e = call i32 @RdSwpIdx(i32 %tmp94)
  store i32 %tmp94, i32* @eax, align 4
  %v1_1000bf3d = call i32 @GetFuncStatusCode(i32 %tmp94)
  %v2_1000bf3d = trunc i32 %v1_1000bf3d to i16
  store i32 %v1_1000bf3d, i32* %eax.global-to-local, align 4
  %v3_1000bf4d = icmp slt i16 %v2_1000bf3d, 0
  %v2_1000bf4f = icmp eq i1 %v3_1000bf4d, false
  br i1 %v2_1000bf4f, label %dec_label_pc_1000bf5a, label %dec_label_pc_1000bf51

dec_label_pc_1000bf51:                            ; preds = %dec_label_pc_1000bf2a
  %sext16 = mul i32 %v1_1000bf3d, 65536
  %v4_1000bf49 = sdiv i32 %sext16, 65536
  %v4_1000bf51 = and i32 %v1_1000bf3d, 65535
  %v7_1000bf51 = and i32 %v4_1000bf49, -65536
  %v8_1000bf51 = or i32 %v7_1000bf51, %v4_1000bf51
  store i32 %v8_1000bf51, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c3bd

dec_label_pc_1000bf5a:                            ; preds = %dec_label_pc_1000bf2a
  %v1_1000bf5e = call i32 @RdNumDataPts(i32 %tmp94)
  store i32 %tmp94, i32* @eax, align 4
  %v1_1000bf6d = call i32 @GetFuncStatusCode(i32 %tmp94)
  %v2_1000bf6d = trunc i32 %v1_1000bf6d to i16
  store i32 %v1_1000bf6d, i32* @eax, align 4
  %v2_1000bf7d = icmp slt i16 %v2_1000bf6d, 0
  %v2_1000bf7f = icmp eq i1 %v2_1000bf7d, false
  br i1 %v2_1000bf7f, label %dec_label_pc_1000bf8a, label %dec_label_pc_1000bf81

dec_label_pc_1000bf81:                            ; preds = %dec_label_pc_1000bf5a
  %sext18 = mul i32 %v1_1000bf6d, 65536
  %v4_1000bf79 = sdiv i32 %sext18, 65536
  %v4_1000bf81 = and i32 %v1_1000bf6d, 65535
  %v7_1000bf81 = and i32 %v4_1000bf79, -65536
  %v8_1000bf81 = or i32 %v7_1000bf81, %v4_1000bf81
  store i32 %v8_1000bf81, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c3bd

dec_label_pc_1000bf8a:                            ; preds = %dec_label_pc_1000bf5a
  store i32 %v1_1000bf2e, i32* @edx, align 4
  %v15_1000bf8d = icmp eq i32 %v1_1000bf5e, %v1_1000bf2e
  %v1_1000bf90 = icmp eq i1 %v15_1000bf8d, false
  br i1 %v1_1000bf90, label %dec_label_pc_1000bfa5, label %dec_label_pc_1000bf92

dec_label_pc_1000bf92:                            ; preds = %dec_label_pc_1000bf8a
  store i32 %tmp94, i32* @eax, align 4
  %v3_1000bf98 = call i32 @SetFuncStatusCode(i32 %tmp94, i16 4)
  store i32 %v3_1000bf98, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c3bd

dec_label_pc_1000bfa5:                            ; preds = %dec_label_pc_1000bf8a
  %v7_1000bfab = icmp slt i32 %v1_1000bf5e, %v1_1000bf2e
  br i1 %v7_1000bfab, label %dec_label_pc_1000bfad, label %dec_label_pc_1000bfc0

dec_label_pc_1000bfad:                            ; preds = %dec_label_pc_1000bfa5
  store i32 %tmp94, i32* @edx, align 4
  %v3_1000bfb3 = call i32 @SetFuncStatusCode(i32 %tmp94, i16 -2)
  store i32 %v3_1000bfb3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c3bd

dec_label_pc_1000bfc0:                            ; preds = %dec_label_pc_1000bfa5
  %v2_1000bfc6 = mul i32 %v1_1000bf2e, 2
  %v3_1000bfc6 = add i32 %v2_1000bfc6, %tmp90
  %v3_1000bfd2 = add i32 %v2_1000bfc6, %tmp88
  store i32 %v3_1000bfd2, i32* %stack_var_-76, align 4
  %v2_1000bfde = mul i32 %v1_1000bf2e, 8
  %v3_1000bfde = add i32 %v2_1000bfde, %tmp87
  %v3_1000bfea = add i32 %v2_1000bfde, %tmp85
  %v2_1000bff0 = ptrtoint i16* %stack_var_-40 to i32
  %v2_1000bff4 = ptrtoint i32* %stack_var_-44 to i32
  %v5_1000bfff = sub i32 %v1_1000bf5e, %v1_1000bf2e
  store i32 %v5_1000bfff, i32* %eax.global-to-local, align 4
  %v6_1000c007 = trunc i32 %tmp94 to i16
  %v7_1000c007 = call i32 @function_100040c9(i16 %v6_1000c007, i32 %v5_1000bfff, i32 6, i32 %v2_1000bff4, i32 %v2_1000bff0, i32 %v3_1000bfd2)
  store i32 %v7_1000c007, i32* %eax.global-to-local, align 4
  %v1_1000c00f = mul i32 %v7_1000c007, 65536
  %v1_1000c00f.off = or i32 %v1_1000c00f, 65535
  %tmp165 = icmp ult i32 %v1_1000c00f.off, 131071
  br i1 %tmp165, label %dec_label_pc_1000c01f, label %dec_label_pc_1000c016

dec_label_pc_1000c016:                            ; preds = %dec_label_pc_1000bfc0
  %v1_1000c016 = and i32 %v7_1000c007, -65536
  %v2_1000c016 = or i32 %v1_1000c016, 65534
  store i32 %v2_1000c016, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c3bd

dec_label_pc_1000c01f:                            ; preds = %dec_label_pc_1000bfc0
  %v3_1000c01f = load i32, i32* %stack_var_-44, align 4
  %v4_1000c01f = icmp eq i32 %v3_1000c01f, 0
  %v1_1000c023 = icmp eq i1 %v4_1000c01f, false
  br i1 %v1_1000c023, label %dec_label_pc_1000c02d, label %dec_label_pc_1000c025

dec_label_pc_1000c025:                            ; preds = %dec_label_pc_1000c01f
  %v12_1000c025 = and i32 %v7_1000c007, -65536
  store i32 %v12_1000c025, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c3bd

dec_label_pc_1000c02d:                            ; preds = %dec_label_pc_1000c01f
  %v3_1000c02d = load i16, i16* %stack_var_-40, align 2
  %v4_1000c02d = sext i16 %v3_1000c02d to i32
  %v7_1000c02d = and i32 %v7_1000c007, -65536
  %v8_1000c02d = or i32 %v4_1000c02d, %v7_1000c02d
  store i32 %v8_1000c02d, i32* %eax.global-to-local, align 4
  store i16 %v3_1000c02d, i16* %stack_var_-20, align 2
  %v2_1000c07b = ptrtoint i16* %stack_var_-20 to i32
  %v5_1000c050115 = icmp sgt i32 %v3_1000c01f, 0
  br i1 %v5_1000c050115, label %dec_label_pc_1000c06a.preheader, label %dec_label_pc_1000c37c

dec_label_pc_1000c06a.preheader:                  ; preds = %dec_label_pc_1000c02d, %dec_label_pc_1000c336
  %v4_1000c049119 = phi i32 [ %v4_1000c049, %dec_label_pc_1000c336 ], [ 0, %dec_label_pc_1000c02d ]
  %storemerge118 = phi i16 [ %v2_1000c041, %dec_label_pc_1000c336 ], [ 0, %dec_label_pc_1000c02d ]
  %stack_var_-32.0117 = phi i32 [ %v2_1000c358, %dec_label_pc_1000c336 ], [ %tmp, %dec_label_pc_1000c02d ]
  %v1_1000c07e64116 = phi i32 [ %v1_1000c36a, %dec_label_pc_1000c336 ], [ %v15_1000be9d, %dec_label_pc_1000c02d ]
  br label %dec_label_pc_1000c073

dec_label_pc_1000c073:                            ; preds = %dec_label_pc_1000c0a1.dec_label_pc_1000c073_crit_edge, %dec_label_pc_1000c06a.preheader
  %v1_1000c07e = phi i32 [ %v1_1000c07e64116, %dec_label_pc_1000c06a.preheader ], [ %v1_1000c098, %dec_label_pc_1000c0a1.dec_label_pc_1000c073_crit_edge ]
  %indvars.iv = phi i32 [ 0, %dec_label_pc_1000c06a.preheader ], [ %indvars.iv.next, %dec_label_pc_1000c0a1.dec_label_pc_1000c073_crit_edge ]
  %v3_1000c073 = load i16, i16* %stack_var_-40, align 2
  store i16 %v3_1000c073, i16* %stack_var_-20, align 2
  store i32 %v2_1000c07b, i32* %eax.global-to-local, align 4
  %v2_1000c07e = add i32 %v1_1000c07e, -4
  %v3_1000c07e = inttoptr i32 %v2_1000c07e to i32*
  store i32 %v2_1000c07b, i32* %v3_1000c07e, align 4
  %v2_1000c082 = add i32 %v1_1000c07e, -8
  %v3_1000c082 = inttoptr i32 %v2_1000c082 to i32*
  store i32 %tmp94, i32* %v3_1000c082, align 4
  %v5_1000c083 = call i32 @function_100039d0(i16 %v3_1000c073, i32 %indvars.iv)
  store i32 %v5_1000c083, i32* %eax.global-to-local, align 4
  %v0_1000c088 = load i32, i32* @esp, align 4
  store i32 %tmp94, i32* @edx, align 4
  %v2_1000c092 = add i32 %v0_1000c088, 4
  %v3_1000c092 = inttoptr i32 %v2_1000c092 to i32*
  store i32 %tmp94, i32* %v3_1000c092, align 4
  %sext27 = mul i32 %v5_1000c083, 65536
  %v1_1000c093 = sdiv i32 %sext27, 65536
  %v2_1000c093 = call i32 @RdErrorStatus(i32 %v1_1000c093)
  store i32 %v2_1000c093, i32* %eax.global-to-local, align 4
  %v0_1000c098 = load i32, i32* @esp, align 4
  %v1_1000c098 = add i32 %v0_1000c098, 4
  %v1_1000c09b = icmp eq i32 %v2_1000c093, 0
  %v1_1000c09d = icmp eq i1 %v1_1000c09b, false
  br i1 %v1_1000c09d, label %dec_label_pc_1000c0a1, label %dec_label_pc_1000c0a3

dec_label_pc_1000c0a1:                            ; preds = %dec_label_pc_1000c073
  %v7_1000c05e = or i32 %v2_1000c093, %indvars.iv
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %v18_1000c062 = and i32 %v7_1000c05e, -65536
  %v19_1000c062 = or i32 %v18_1000c062, %indvars.iv.next
  store i32 %v19_1000c062, i32* %eax.global-to-local, align 4
  %v11_1000c06e = icmp slt i32 %indvars.iv.next, 3
  br i1 %v11_1000c06e, label %dec_label_pc_1000c0a1.dec_label_pc_1000c073_crit_edge, label %dec_label_pc_1000c0a3

dec_label_pc_1000c0a1.dec_label_pc_1000c073_crit_edge: ; preds = %dec_label_pc_1000c0a1
  br label %dec_label_pc_1000c073

dec_label_pc_1000c0a3:                            ; preds = %dec_label_pc_1000c073, %dec_label_pc_1000c0a1
  store i32 %tmp94, i32* %eax.global-to-local, align 4
  %v3_1000c0a6 = inttoptr i32 %v0_1000c098 to i32*
  store i32 %tmp94, i32* %v3_1000c0a6, align 4
  %v2_1000c0a7 = call i32 @RdErrorStatus(i32 %v1_1000c093)
  store i32 %v2_1000c0a7, i32* %eax.global-to-local, align 4
  %v0_1000c0ac = load i32, i32* @esp, align 4
  %v1_1000c0ac = add i32 %v0_1000c0ac, 4
  %v1_1000c0af = icmp eq i32 %v2_1000c0a7, 0
  br i1 %v1_1000c0af, label %dec_label_pc_1000c0b8, label %dec_label_pc_1000c37c

dec_label_pc_1000c0b8:                            ; preds = %dec_label_pc_1000c0a3
  %v6_1000c083.le = trunc i32 %v5_1000c083 to i16
  %v3_1000c0b8 = load i16, i16* %stack_var_-20, align 2
  %v4_1000c0b8 = sext i16 %v3_1000c0b8 to i32
  %v6_1000c0b8 = load i32, i32* @ecx, align 4
  %v8_1000c0b8 = or i32 %v6_1000c0b8, %v4_1000c0b8
  store i16 %v3_1000c0b8, i16* %stack_var_-40, align 2
  %v4_1000c0c7 = and i32 %v5_1000c083, 65535
  %v6_1000c0c7 = and i32 %v8_1000c0b8, -65536
  %v7_1000c0c7 = or i32 %v6_1000c0c7, %v4_1000c0c7
  store i32 %v7_1000c0c7, i32* @ecx, align 4
  %v4_1000c0cb = mul nsw i32 %v4_1000c049119, 2
  %v5_1000c0cb = add i32 %v3_1000bfc6, %v4_1000c0cb
  %v6_1000c0cb = inttoptr i32 %v5_1000c0cb to i16*
  store i16 %v6_1000c083.le, i16* %v6_1000c0cb, align 2
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_1000c0f7.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000c0ec

dec_label_pc_1000c0ec:                            ; preds = %dec_label_pc_1000c0b8, %dec_label_pc_1000c11a
  %v1_1000c0f7 = phi i32 [ %v1_1000c0f7.pre, %dec_label_pc_1000c0b8 ], [ %v1_1000c111, %dec_label_pc_1000c11a ]
  %indvars.iv47 = phi i32 [ 0, %dec_label_pc_1000c0b8 ], [ %indvars.iv.next48, %dec_label_pc_1000c11a ]
  %v3_1000c0ec = load i16, i16* %stack_var_-40, align 2
  store i16 %v3_1000c0ec, i16* %stack_var_-20, align 2
  store i32 %v2_1000c07b, i32* @edx, align 4
  %v2_1000c0f7 = add i32 %v1_1000c0f7, -4
  %v3_1000c0f7 = inttoptr i32 %v2_1000c0f7 to i32*
  store i32 %v2_1000c07b, i32* %v3_1000c0f7, align 4
  store i32 %tmp94, i32* %eax.global-to-local, align 4
  %v2_1000c0fb = add i32 %v1_1000c0f7, -8
  %v3_1000c0fb = inttoptr i32 %v2_1000c0fb to i32*
  store i32 %tmp94, i32* %v3_1000c0fb, align 4
  %v5_1000c0fc = call i32 @function_100039d0(i16 %v3_1000c0ec, i32 %indvars.iv47)
  store i32 %v5_1000c0fc, i32* %eax.global-to-local, align 4
  %v0_1000c101 = load i32, i32* @esp, align 4
  %v2_1000c10b = add i32 %v0_1000c101, 4
  %v3_1000c10b = inttoptr i32 %v2_1000c10b to i32*
  store i32 %tmp94, i32* %v3_1000c10b, align 4
  %sext26 = mul i32 %v5_1000c0fc, 65536
  %v1_1000c10c = sdiv i32 %sext26, 65536
  %v2_1000c10c = call i32 @RdErrorStatus(i32 %v1_1000c10c)
  store i32 %v2_1000c10c, i32* %eax.global-to-local, align 4
  %v0_1000c111 = load i32, i32* @esp, align 4
  %v1_1000c114 = icmp eq i32 %v2_1000c10c, 0
  %v1_1000c116 = icmp eq i1 %v1_1000c114, false
  br i1 %v1_1000c116, label %dec_label_pc_1000c11a, label %dec_label_pc_1000c11c

dec_label_pc_1000c11a:                            ; preds = %dec_label_pc_1000c0ec
  %v1_1000c111 = add i32 %v0_1000c111, 4
  %indvars.iv.next48 = add nuw nsw i32 %indvars.iv47, 1
  store i32 %indvars.iv.next48, i32* %eax.global-to-local, align 4
  %v11_1000c0e7 = icmp slt i32 %indvars.iv.next48, 3
  br i1 %v11_1000c0e7, label %dec_label_pc_1000c0ec, label %dec_label_pc_1000c11c

dec_label_pc_1000c11c:                            ; preds = %dec_label_pc_1000c0ec, %dec_label_pc_1000c11a
  %v3_1000c11f = inttoptr i32 %v0_1000c111 to i32*
  store i32 %tmp94, i32* %v3_1000c11f, align 4
  %v2_1000c120 = call i32 @RdErrorStatus(i32 %v1_1000c10c)
  store i32 %v2_1000c120, i32* %eax.global-to-local, align 4
  %v0_1000c125 = load i32, i32* @esp, align 4
  %v1_1000c125 = add i32 %v0_1000c125, 4
  %v1_1000c128 = icmp eq i32 %v2_1000c120, 0
  br i1 %v1_1000c128, label %dec_label_pc_1000c131, label %dec_label_pc_1000c37c

dec_label_pc_1000c131:                            ; preds = %dec_label_pc_1000c11c
  %v3_1000c131 = load i16, i16* %stack_var_-20, align 2
  store i16 %v3_1000c131, i16* %stack_var_-40, align 2
  %v1_1000c13c6 = and i32 %v5_1000c0fc, 65535
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c162

dec_label_pc_1000c162:                            ; preds = %dec_label_pc_1000c190.dec_label_pc_1000c162_crit_edge, %dec_label_pc_1000c131
  %v1_1000c16d = phi i32 [ %v1_1000c125, %dec_label_pc_1000c131 ], [ %v1_1000c187, %dec_label_pc_1000c190.dec_label_pc_1000c162_crit_edge ]
  %v3_1000c162 = phi i16 [ %v3_1000c131, %dec_label_pc_1000c131 ], [ %v3_1000c162.pre, %dec_label_pc_1000c190.dec_label_pc_1000c162_crit_edge ]
  %indvars.iv50 = phi i32 [ 0, %dec_label_pc_1000c131 ], [ %indvars.iv.next51, %dec_label_pc_1000c190.dec_label_pc_1000c162_crit_edge ]
  store i16 %v3_1000c162, i16* %stack_var_-20, align 2
  store i32 %v2_1000c07b, i32* @edx, align 4
  %v2_1000c16d = add i32 %v1_1000c16d, -4
  %v3_1000c16d = inttoptr i32 %v2_1000c16d to i32*
  store i32 %v2_1000c07b, i32* %v3_1000c16d, align 4
  store i32 %tmp94, i32* %eax.global-to-local, align 4
  %v2_1000c171 = add i32 %v1_1000c16d, -8
  %v3_1000c171 = inttoptr i32 %v2_1000c171 to i32*
  store i32 %tmp94, i32* %v3_1000c171, align 4
  %v5_1000c172 = call i32 @function_100039d0(i16 %v3_1000c162, i32 %indvars.iv50)
  store i32 %v5_1000c172, i32* %eax.global-to-local, align 4
  %v0_1000c177 = load i32, i32* @esp, align 4
  %v2_1000c181 = add i32 %v0_1000c177, 4
  %v3_1000c181 = inttoptr i32 %v2_1000c181 to i32*
  store i32 %tmp94, i32* %v3_1000c181, align 4
  %sext25 = mul i32 %v5_1000c172, 65536
  %v1_1000c182 = sdiv i32 %sext25, 65536
  %v2_1000c182 = call i32 @RdErrorStatus(i32 %v1_1000c182)
  store i32 %v2_1000c182, i32* %eax.global-to-local, align 4
  %v0_1000c187 = load i32, i32* @esp, align 4
  %v1_1000c187 = add i32 %v0_1000c187, 4
  %v1_1000c18a = icmp eq i32 %v2_1000c182, 0
  %v1_1000c18c = icmp eq i1 %v1_1000c18a, false
  br i1 %v1_1000c18c, label %dec_label_pc_1000c190, label %dec_label_pc_1000c192

dec_label_pc_1000c190:                            ; preds = %dec_label_pc_1000c162
  %indvars.iv.next51 = add nuw nsw i32 %indvars.iv50, 1
  store i32 %indvars.iv.next51, i32* %eax.global-to-local, align 4
  %v11_1000c15d = icmp slt i32 %indvars.iv.next51, 3
  br i1 %v11_1000c15d, label %dec_label_pc_1000c190.dec_label_pc_1000c162_crit_edge, label %dec_label_pc_1000c192

dec_label_pc_1000c190.dec_label_pc_1000c162_crit_edge: ; preds = %dec_label_pc_1000c190
  %v3_1000c162.pre = load i16, i16* %stack_var_-40, align 2
  br label %dec_label_pc_1000c162

dec_label_pc_1000c192:                            ; preds = %dec_label_pc_1000c162, %dec_label_pc_1000c190
  %v3_1000c195 = inttoptr i32 %v0_1000c187 to i32*
  store i32 %tmp94, i32* %v3_1000c195, align 4
  %v2_1000c196 = call i32 @RdErrorStatus(i32 %v1_1000c182)
  store i32 %v2_1000c196, i32* %eax.global-to-local, align 4
  %v0_1000c19b = load i32, i32* @esp, align 4
  %v1_1000c19b = add i32 %v0_1000c19b, 4
  %v1_1000c19e = icmp eq i32 %v2_1000c196, 0
  br i1 %v1_1000c19e, label %dec_label_pc_1000c1a7, label %dec_label_pc_1000c37c

dec_label_pc_1000c1a7:                            ; preds = %dec_label_pc_1000c192
  %v3_1000c1a7 = load i16, i16* %stack_var_-20, align 2
  %v4_1000c1a7 = sext i16 %v3_1000c1a7 to i32
  store i16 %v3_1000c1a7, i16* %stack_var_-40, align 2
  store i32 %sext25, i32* %eax.global-to-local, align 4
  %v2_1000c1ca = or i32 %sext25, %v1_1000c13c6
  %v3_1000c1d2 = inttoptr i32 %v0_1000c19b to i32*
  store i32 %v2_1000c1ca, i32* %v3_1000c1d2, align 4
  %v2_1000c1d6 = add i32 %v0_1000c19b, -4
  %v3_1000c1d6 = inttoptr i32 %v2_1000c1d6 to i32*
  store i32 %tmp94, i32* %v3_1000c1d6, align 4
  %v3_1000c1d7 = sext i32 %v2_1000c1ca to i64
  %v4_1000c1d7 = call i32 @function_10002ea6(i32 %v4_1000c1a7, i64 %v3_1000c1d7)
  %v0_1000c1dc = load i32, i32* @esp, align 4
  %v1_1000c1dc = add i32 %v0_1000c1dc, 8
  %v0_1000c1e6 = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000c1e6 = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000c1e6 = mul nsw i32 %v4_1000c049119, 8
  %v5_1000c1e6 = add i32 %v4_1000c1e6, %v3_1000bfde
  %v6_1000c1e6 = fptrunc x86_fp80 %v1_1000c1e6 to double
  %v7_1000c1e6 = inttoptr i32 %v5_1000c1e6 to double*
  store double %v6_1000c1e6, double* %v7_1000c1e6, align 4
  %v8_1000c1e6 = add i3 %v0_1000c1e6, 1
  store i3 %v8_1000c1e6, i3* @fpu_stat_TOP, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c206

dec_label_pc_1000c206:                            ; preds = %dec_label_pc_1000c234.dec_label_pc_1000c206_crit_edge, %dec_label_pc_1000c1a7
  %v1_1000c211 = phi i32 [ %v1_1000c1dc, %dec_label_pc_1000c1a7 ], [ %v1_1000c22b, %dec_label_pc_1000c234.dec_label_pc_1000c206_crit_edge ]
  %indvars.iv53 = phi i32 [ 0, %dec_label_pc_1000c1a7 ], [ %indvars.iv.next54, %dec_label_pc_1000c234.dec_label_pc_1000c206_crit_edge ]
  %v3_1000c206 = load i16, i16* %stack_var_-40, align 2
  store i16 %v3_1000c206, i16* %stack_var_-20, align 2
  store i32 %v2_1000c07b, i32* @edx, align 4
  %v2_1000c211 = add i32 %v1_1000c211, -4
  %v3_1000c211 = inttoptr i32 %v2_1000c211 to i32*
  store i32 %v2_1000c07b, i32* %v3_1000c211, align 4
  store i32 %tmp94, i32* %eax.global-to-local, align 4
  %v2_1000c215 = add i32 %v1_1000c211, -8
  %v3_1000c215 = inttoptr i32 %v2_1000c215 to i32*
  store i32 %tmp94, i32* %v3_1000c215, align 4
  %v5_1000c216 = call i32 @function_100039d0(i16 %v3_1000c206, i32 %indvars.iv53)
  store i32 %v5_1000c216, i32* %eax.global-to-local, align 4
  %v0_1000c21b = load i32, i32* @esp, align 4
  %v2_1000c225 = add i32 %v0_1000c21b, 4
  %v3_1000c225 = inttoptr i32 %v2_1000c225 to i32*
  store i32 %tmp94, i32* %v3_1000c225, align 4
  %sext24 = mul i32 %v5_1000c216, 65536
  %v1_1000c226 = sdiv i32 %sext24, 65536
  %v2_1000c226 = call i32 @RdErrorStatus(i32 %v1_1000c226)
  store i32 %v2_1000c226, i32* %eax.global-to-local, align 4
  %v0_1000c22b = load i32, i32* @esp, align 4
  %v1_1000c22b = add i32 %v0_1000c22b, 4
  %v1_1000c22e = icmp eq i32 %v2_1000c226, 0
  %v1_1000c230 = icmp eq i1 %v1_1000c22e, false
  br i1 %v1_1000c230, label %dec_label_pc_1000c234, label %dec_label_pc_1000c236

dec_label_pc_1000c234:                            ; preds = %dec_label_pc_1000c206
  %indvars.iv.next54 = add nuw nsw i32 %indvars.iv53, 1
  store i32 %indvars.iv.next54, i32* %eax.global-to-local, align 4
  %v11_1000c201 = icmp slt i32 %indvars.iv.next54, 3
  br i1 %v11_1000c201, label %dec_label_pc_1000c234.dec_label_pc_1000c206_crit_edge, label %dec_label_pc_1000c236

dec_label_pc_1000c234.dec_label_pc_1000c206_crit_edge: ; preds = %dec_label_pc_1000c234
  br label %dec_label_pc_1000c206

dec_label_pc_1000c236:                            ; preds = %dec_label_pc_1000c206, %dec_label_pc_1000c234
  %v3_1000c239 = inttoptr i32 %v0_1000c22b to i32*
  store i32 %tmp94, i32* %v3_1000c239, align 4
  %v2_1000c23a = call i32 @RdErrorStatus(i32 %v1_1000c226)
  store i32 %v2_1000c23a, i32* %eax.global-to-local, align 4
  %v0_1000c23f = load i32, i32* @esp, align 4
  %v1_1000c23f = add i32 %v0_1000c23f, 4
  %v1_1000c242 = icmp eq i32 %v2_1000c23a, 0
  br i1 %v1_1000c242, label %dec_label_pc_1000c24b, label %dec_label_pc_1000c37c

dec_label_pc_1000c24b:                            ; preds = %dec_label_pc_1000c236
  %v6_1000c216.le = trunc i32 %v5_1000c216 to i16
  %v3_1000c24b = load i16, i16* %stack_var_-20, align 2
  %v4_1000c24b = sext i16 %v3_1000c24b to i32
  store i16 %v3_1000c24b, i16* %stack_var_-40, align 2
  %v3_1000c257 = load i32, i32* %stack_var_-76, align 4
  %v4_1000c25a = and i32 %v5_1000c216, 65535
  %v6_1000c25a = and i32 %v4_1000c24b, -65536
  %v7_1000c25a = or i32 %v6_1000c25a, %v4_1000c25a
  store i32 %v7_1000c25a, i32* %eax.global-to-local, align 4
  %v5_1000c25e = add i32 %v3_1000c257, %v4_1000c0cb
  %v6_1000c25e = inttoptr i32 %v5_1000c25e to i16*
  store i16 %v6_1000c216.le, i16* %v6_1000c25e, align 2
  %v6_1000c27f.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_1000c28a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000c27f

dec_label_pc_1000c27f:                            ; preds = %dec_label_pc_1000c24b, %dec_label_pc_1000c2ad
  %v1_1000c28a = phi i32 [ %v1_1000c28a.pre, %dec_label_pc_1000c24b ], [ %v1_1000c2a4, %dec_label_pc_1000c2ad ]
  %v6_1000c27f = phi i32 [ %v6_1000c27f.pre, %dec_label_pc_1000c24b ], [ %v2_1000c29f, %dec_label_pc_1000c2ad ]
  %indvars.iv56 = phi i32 [ 0, %dec_label_pc_1000c24b ], [ %indvars.iv.next57, %dec_label_pc_1000c2ad ]
  %v3_1000c27f = load i16, i16* %stack_var_-40, align 2
  %v4_1000c27f = sext i16 %v3_1000c27f to i32
  %v7_1000c27f = and i32 %v6_1000c27f, -65536
  %v8_1000c27f = or i32 %v4_1000c27f, %v7_1000c27f
  store i32 %v8_1000c27f, i32* %eax.global-to-local, align 4
  store i16 %v3_1000c27f, i16* %stack_var_-20, align 2
  %v2_1000c28a = add i32 %v1_1000c28a, -4
  %v3_1000c28a = inttoptr i32 %v2_1000c28a to i32*
  store i32 %v2_1000c07b, i32* %v3_1000c28a, align 4
  %v2_1000c28e = add i32 %v1_1000c28a, -8
  %v3_1000c28e = inttoptr i32 %v2_1000c28e to i32*
  store i32 %tmp94, i32* %v3_1000c28e, align 4
  %v5_1000c28f = call i32 @function_100039d0(i16 %v3_1000c27f, i32 %indvars.iv56)
  %v0_1000c294 = load i32, i32* @esp, align 4
  store i32 %tmp94, i32* %eax.global-to-local, align 4
  %v2_1000c29e = add i32 %v0_1000c294, 4
  %v3_1000c29e = inttoptr i32 %v2_1000c29e to i32*
  store i32 %tmp94, i32* %v3_1000c29e, align 4
  %sext23 = mul i32 %v5_1000c28f, 65536
  %v1_1000c29f = sdiv i32 %sext23, 65536
  %v2_1000c29f = call i32 @RdErrorStatus(i32 %v1_1000c29f)
  store i32 %v2_1000c29f, i32* %eax.global-to-local, align 4
  %v0_1000c2a4 = load i32, i32* @esp, align 4
  %v1_1000c2a7 = icmp eq i32 %v2_1000c29f, 0
  %v1_1000c2a9 = icmp eq i1 %v1_1000c2a7, false
  br i1 %v1_1000c2a9, label %dec_label_pc_1000c2ad, label %dec_label_pc_1000c2af

dec_label_pc_1000c2ad:                            ; preds = %dec_label_pc_1000c27f
  %v1_1000c2a4 = add i32 %v0_1000c2a4, 4
  %indvars.iv.next57 = add nuw nsw i32 %indvars.iv56, 1
  %v11_1000c27a = icmp slt i32 %indvars.iv.next57, 3
  br i1 %v11_1000c27a, label %dec_label_pc_1000c27f, label %dec_label_pc_1000c2af

dec_label_pc_1000c2af:                            ; preds = %dec_label_pc_1000c27f, %dec_label_pc_1000c2ad
  %v3_1000c2b2 = inttoptr i32 %v0_1000c2a4 to i32*
  store i32 %tmp94, i32* %v3_1000c2b2, align 4
  %v2_1000c2b3 = call i32 @RdErrorStatus(i32 %v1_1000c29f)
  store i32 %v2_1000c2b3, i32* %eax.global-to-local, align 4
  %v0_1000c2b8 = load i32, i32* @esp, align 4
  %v1_1000c2b8 = add i32 %v0_1000c2b8, 4
  %v1_1000c2bb = icmp eq i32 %v2_1000c2b3, 0
  br i1 %v1_1000c2bb, label %dec_label_pc_1000c2c4, label %dec_label_pc_1000c37c

dec_label_pc_1000c2c4:                            ; preds = %dec_label_pc_1000c2af
  %v3_1000c2c4 = load i16, i16* %stack_var_-20, align 2
  store i16 %v3_1000c2c4, i16* %stack_var_-40, align 2
  %v1_1000c2cf8 = and i32 %v5_1000c28f, 65535
  store i32 %v1_1000c2cf8, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c2f4

dec_label_pc_1000c2f4:                            ; preds = %dec_label_pc_1000c322.dec_label_pc_1000c2f4_crit_edge, %dec_label_pc_1000c2c4
  %v1_1000c2ff = phi i32 [ %v1_1000c2b8, %dec_label_pc_1000c2c4 ], [ %v1_1000c319, %dec_label_pc_1000c322.dec_label_pc_1000c2f4_crit_edge ]
  %v6_1000c2f4 = phi i32 [ %v1_1000c2cf8, %dec_label_pc_1000c2c4 ], [ %v2_1000c314, %dec_label_pc_1000c322.dec_label_pc_1000c2f4_crit_edge ]
  %v3_1000c2f4 = phi i16 [ %v3_1000c2c4, %dec_label_pc_1000c2c4 ], [ %v3_1000c2f4.pre, %dec_label_pc_1000c322.dec_label_pc_1000c2f4_crit_edge ]
  %indvars.iv59 = phi i32 [ 0, %dec_label_pc_1000c2c4 ], [ %indvars.iv.next60, %dec_label_pc_1000c322.dec_label_pc_1000c2f4_crit_edge ]
  %v4_1000c2f4 = sext i16 %v3_1000c2f4 to i32
  %v7_1000c2f4 = and i32 %v6_1000c2f4, -65536
  %v8_1000c2f4 = or i32 %v4_1000c2f4, %v7_1000c2f4
  store i32 %v8_1000c2f4, i32* %eax.global-to-local, align 4
  store i16 %v3_1000c2f4, i16* %stack_var_-20, align 2
  %v2_1000c2ff = add i32 %v1_1000c2ff, -4
  %v3_1000c2ff = inttoptr i32 %v2_1000c2ff to i32*
  store i32 %v2_1000c07b, i32* %v3_1000c2ff, align 4
  %v2_1000c303 = add i32 %v1_1000c2ff, -8
  %v3_1000c303 = inttoptr i32 %v2_1000c303 to i32*
  store i32 %tmp94, i32* %v3_1000c303, align 4
  %v5_1000c304 = call i32 @function_100039d0(i16 %v3_1000c2f4, i32 %indvars.iv59)
  %v0_1000c309 = load i32, i32* @esp, align 4
  store i32 %tmp94, i32* %eax.global-to-local, align 4
  %v2_1000c313 = add i32 %v0_1000c309, 4
  %v3_1000c313 = inttoptr i32 %v2_1000c313 to i32*
  store i32 %tmp94, i32* %v3_1000c313, align 4
  %sext22 = mul i32 %v5_1000c304, 65536
  %v1_1000c314 = sdiv i32 %sext22, 65536
  %v2_1000c314 = call i32 @RdErrorStatus(i32 %v1_1000c314)
  store i32 %v2_1000c314, i32* %eax.global-to-local, align 4
  %v0_1000c319 = load i32, i32* @esp, align 4
  %v1_1000c319 = add i32 %v0_1000c319, 4
  %v1_1000c31c = icmp eq i32 %v2_1000c314, 0
  %v1_1000c31e = icmp eq i1 %v1_1000c31c, false
  br i1 %v1_1000c31e, label %dec_label_pc_1000c322, label %dec_label_pc_1000c324

dec_label_pc_1000c322:                            ; preds = %dec_label_pc_1000c2f4
  %indvars.iv.next60 = add nuw nsw i32 %indvars.iv59, 1
  %v11_1000c2ef = icmp slt i32 %indvars.iv.next60, 3
  br i1 %v11_1000c2ef, label %dec_label_pc_1000c322.dec_label_pc_1000c2f4_crit_edge, label %dec_label_pc_1000c324

dec_label_pc_1000c322.dec_label_pc_1000c2f4_crit_edge: ; preds = %dec_label_pc_1000c322
  %v3_1000c2f4.pre = load i16, i16* %stack_var_-40, align 2
  br label %dec_label_pc_1000c2f4

dec_label_pc_1000c324:                            ; preds = %dec_label_pc_1000c2f4, %dec_label_pc_1000c322
  %v3_1000c327 = inttoptr i32 %v0_1000c319 to i32*
  store i32 %tmp94, i32* %v3_1000c327, align 4
  %v2_1000c328 = call i32 @RdErrorStatus(i32 %v1_1000c314)
  store i32 %v2_1000c328, i32* %eax.global-to-local, align 4
  %v0_1000c32d = load i32, i32* @esp, align 4
  %v1_1000c32d = add i32 %v0_1000c32d, 4
  %v1_1000c330 = icmp eq i32 %v2_1000c328, 0
  br i1 %v1_1000c330, label %dec_label_pc_1000c336, label %dec_label_pc_1000c37c

dec_label_pc_1000c336:                            ; preds = %dec_label_pc_1000c324
  %v3_1000c336 = load i16, i16* %stack_var_-20, align 2
  %v4_1000c336 = sext i16 %v3_1000c336 to i32
  store i16 %v3_1000c336, i16* %stack_var_-40, align 2
  %v2_1000c358 = or i32 %sext22, %v1_1000c2cf8
  store i32 %v2_1000c358, i32* %eax.global-to-local, align 4
  %v3_1000c360 = inttoptr i32 %v0_1000c32d to i32*
  store i32 %v2_1000c358, i32* %v3_1000c360, align 4
  %v2_1000c364 = add i32 %v0_1000c32d, -4
  %v3_1000c364 = inttoptr i32 %v2_1000c364 to i32*
  store i32 %tmp94, i32* %v3_1000c364, align 4
  %v3_1000c365 = sext i32 %v2_1000c358 to i64
  %v4_1000c365 = call i32 @function_10002ea6(i32 %v4_1000c336, i64 %v3_1000c365)
  %v0_1000c36a = load i32, i32* @esp, align 4
  %v1_1000c36a = add i32 %v0_1000c36a, 8
  store i32 %v3_1000bfea, i32* %eax.global-to-local, align 4
  %v0_1000c374 = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000c374 = load x86_fp80, x86_fp80* @st0, align 4
  %v5_1000c374 = add i32 %v4_1000c1e6, %v3_1000bfea
  %v6_1000c374 = fptrunc x86_fp80 %v1_1000c374 to double
  %v7_1000c374 = inttoptr i32 %v5_1000c374 to double*
  store double %v6_1000c374, double* %v7_1000c374, align 4
  %v8_1000c374 = add i3 %v0_1000c374, 1
  store i3 %v8_1000c374, i3* @fpu_stat_TOP, align 1
  %v5_1000c03d = load i32, i32* @ecx, align 4
  %v2_1000c041 = add i16 %storemerge118, 1
  %v16_1000c041 = zext i16 %v2_1000c041 to i32
  %v18_1000c041 = and i32 %v5_1000c03d, -65536
  %v19_1000c041 = or i32 %v18_1000c041, %v16_1000c041
  store i32 %v19_1000c041, i32* @ecx, align 4
  %v4_1000c04d.pre = load i32, i32* %stack_var_-44, align 4
  %v4_1000c049 = sext i16 %v2_1000c041 to i32
  %v5_1000c050 = icmp slt i32 %v4_1000c049, %v4_1000c04d.pre
  br i1 %v5_1000c050, label %dec_label_pc_1000c06a.preheader, label %dec_label_pc_1000c37c

dec_label_pc_1000c37c:                            ; preds = %dec_label_pc_1000c336, %dec_label_pc_1000c0a3, %dec_label_pc_1000c11c, %dec_label_pc_1000c192, %dec_label_pc_1000c236, %dec_label_pc_1000c2af, %dec_label_pc_1000c324, %dec_label_pc_1000c02d
  %v1_1000c380 = phi i32 [ %v15_1000be9d, %dec_label_pc_1000c02d ], [ %v1_1000c32d, %dec_label_pc_1000c324 ], [ %v1_1000c2b8, %dec_label_pc_1000c2af ], [ %v1_1000c23f, %dec_label_pc_1000c236 ], [ %v1_1000c19b, %dec_label_pc_1000c192 ], [ %v1_1000c125, %dec_label_pc_1000c11c ], [ %v1_1000c0ac, %dec_label_pc_1000c0a3 ], [ %v1_1000c36a, %dec_label_pc_1000c336 ]
  %stack_var_-32.1 = phi i32 [ %tmp, %dec_label_pc_1000c02d ], [ %v2_1000c1ca, %dec_label_pc_1000c324 ], [ %v2_1000c1ca, %dec_label_pc_1000c2af ], [ %v2_1000c1ca, %dec_label_pc_1000c236 ], [ %stack_var_-32.0117, %dec_label_pc_1000c192 ], [ %stack_var_-32.0117, %dec_label_pc_1000c11c ], [ %stack_var_-32.0117, %dec_label_pc_1000c0a3 ], [ %v2_1000c358, %dec_label_pc_1000c336 ]
  %v3_1000c37c = load i16, i16* %stack_var_-20, align 2
  %v4_1000c37c = sext i16 %v3_1000c37c to i32
  %v6_1000c37c = load i32, i32* @ecx, align 4
  %v7_1000c37c = and i32 %v6_1000c37c, -65536
  %v8_1000c37c = or i32 %v7_1000c37c, %v4_1000c37c
  %v2_1000c380 = add i32 %v1_1000c380, -4
  %v3_1000c380 = inttoptr i32 %v2_1000c380 to i32*
  store i32 %v8_1000c37c, i32* %v3_1000c380, align 4
  store i32 %tmp94, i32* @edx, align 4
  %v2_1000c384 = add i32 %v1_1000c380, -8
  %v3_1000c384 = inttoptr i32 %v2_1000c384 to i32*
  store i32 %tmp94, i32* %v3_1000c384, align 4
  %v2_1000c385 = trunc i32 %stack_var_-32.1 to i16
  %v3_1000c385 = call i32 @function_10003bb8(i16 %v2_1000c385, i32 6)
  %v4_1000c385 = trunc i32 %v3_1000c385 to i16
  %v0_1000c38a = load i32, i32* @esp, align 4
  %sext20 = mul i32 %v3_1000c385, 65536
  %v4_1000c391 = sdiv i32 %sext20, 65536
  store i32 %v4_1000c391, i32* %eax.global-to-local, align 4
  %v1_1000c395 = icmp eq i16 %v4_1000c385, 0
  %v1_1000c397 = icmp eq i1 %v1_1000c395, false
  br i1 %v1_1000c397, label %dec_label_pc_1000c3b9, label %dec_label_pc_1000c399

dec_label_pc_1000c399:                            ; preds = %dec_label_pc_1000c37c
  %v4_1000c39c = load i32, i32* %stack_var_-44, align 4
  %v5_1000c39c = add i32 %v4_1000c39c, %v1_1000bf2e
  %v2_1000c39f = add i32 %v0_1000c38a, 4
  %v3_1000c39f = inttoptr i32 %v2_1000c39f to i32*
  store i32 %v5_1000c39c, i32* %v3_1000c39f, align 4
  %v3_1000c3a3 = inttoptr i32 %v0_1000c38a to i32*
  store i32 %tmp94, i32* %v3_1000c3a3, align 4
  %v3_1000c3a4 = call i32 @SetSwpIdx(i32 %v4_1000c391, i32 %v3_1000bfea)
  %v1_1000c3ac = mul i32 %v3_1000c3a4, 65536
  %v2_1000c3ac = sdiv i32 %v1_1000c3ac, 65536
  store i32 %v2_1000c3ac, i32* %eax.global-to-local, align 4
  %v1_1000c3ac.off = or i32 %v1_1000c3ac, 65535
  %tmp166 = icmp ult i32 %v1_1000c3ac.off, 131071
  br i1 %tmp166, label %dec_label_pc_1000c3b9, label %dec_label_pc_1000c3b3

dec_label_pc_1000c3b3:                            ; preds = %dec_label_pc_1000c399
  %v2_1000c3b3 = or i32 %v2_1000c3ac, 65535
  store i32 %v2_1000c3b3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c3bd

dec_label_pc_1000c3b9:                            ; preds = %dec_label_pc_1000c399, %dec_label_pc_1000c37c
  %v5_1000c3b9 = phi i32 [ 0, %dec_label_pc_1000c399 ], [ %v4_1000c391, %dec_label_pc_1000c37c ]
  %v4_1000c3b9 = and i32 %v3_1000c385, 65535
  %v6_1000c3b9 = and i32 %v5_1000c3b9, -65536
  %v7_1000c3b9 = or i32 %v6_1000c3b9, %v4_1000c3b9
  store i32 %v7_1000c3b9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c3bd

dec_label_pc_1000c3bd:                            ; preds = %dec_label_pc_1000c3b3, %dec_label_pc_1000c025, %dec_label_pc_1000c016, %dec_label_pc_1000bfad, %dec_label_pc_1000bf92, %dec_label_pc_1000bf81, %dec_label_pc_1000bf51, %dec_label_pc_1000bf21, %dec_label_pc_1000bef6, %dec_label_pc_1000bed2, %dec_label_pc_1000c3b9
  %v0_1000c3c0 = phi i32 [ %v2_1000c3b3, %dec_label_pc_1000c3b3 ], [ %v12_1000c025, %dec_label_pc_1000c025 ], [ %v2_1000c016, %dec_label_pc_1000c016 ], [ %v3_1000bfb3, %dec_label_pc_1000bfad ], [ %v3_1000bf98, %dec_label_pc_1000bf92 ], [ %v8_1000bf81, %dec_label_pc_1000bf81 ], [ %v8_1000bf51, %dec_label_pc_1000bf51 ], [ %v8_1000bf21, %dec_label_pc_1000bf21 ], [ %v3_1000befc, %dec_label_pc_1000bef6 ], [ %v1_1000bed6, %dec_label_pc_1000bed2 ], [ %v7_1000c3b9, %dec_label_pc_1000c3b9 ]
  %v2_1000c3bf = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000c3bf, i32* @ebp, align 4
  ret i32 %v0_1000c3c0

; uselistorder directives
  uselistorder i32 %v2_1000c3ac, { 1, 0 }
  uselistorder i32 %v4_1000c391, { 2, 1, 0 }
  uselistorder i32 %v0_1000c38a, { 1, 0 }
  uselistorder i32 %v3_1000c385, { 1, 0, 2 }
  uselistorder i32 %v1_1000c380, { 1, 0 }
  uselistorder i32 %v4_1000c049, { 1, 0 }
  uselistorder i16 %v2_1000c041, { 1, 2, 0 }
  uselistorder i32 %v2_1000c358, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v2_1000c314, { 0, 2, 1 }
  uselistorder i32 %v1_1000c314, { 1, 0 }
  uselistorder i32 %indvars.iv59, { 1, 0 }
  uselistorder i16 %v3_1000c2f4, { 0, 2, 1 }
  uselistorder i32 %v1_1000c2ff, { 1, 0 }
  uselistorder i32 %v2_1000c29f, { 0, 2, 1 }
  uselistorder i32 %v1_1000c29f, { 1, 0 }
  uselistorder i32 %v5_1000c28f, { 1, 0 }
  uselistorder i32 %indvars.iv56, { 1, 0 }
  uselistorder i32 %v1_1000c28a, { 1, 0 }
  uselistorder i32 %indvars.iv.next54, { 1, 0, 2 }
  uselistorder i32 %v1_1000c226, { 1, 0 }
  uselistorder i32 %v5_1000c216, { 1, 2, 0, 3 }
  uselistorder i32 %indvars.iv53, { 1, 0 }
  uselistorder i32 %v1_1000c211, { 1, 0 }
  uselistorder i32 %v2_1000c1ca, { 0, 1, 2, 4, 3 }
  uselistorder i32 %indvars.iv.next51, { 1, 0, 2 }
  uselistorder i32 %v1_1000c182, { 1, 0 }
  uselistorder i32 %sext25, { 1, 0, 2 }
  uselistorder i32 %indvars.iv50, { 1, 0 }
  uselistorder i32 %v1_1000c16d, { 1, 0 }
  uselistorder i32 %indvars.iv.next48, { 1, 0, 2 }
  uselistorder i32 %v1_1000c10c, { 1, 0 }
  uselistorder i32 %v5_1000c0fc, { 1, 0, 2 }
  uselistorder i32 %indvars.iv47, { 1, 0 }
  uselistorder i32 %v1_1000c0f7, { 1, 0 }
  uselistorder i32 %indvars.iv.next, { 1, 0, 2 }
  uselistorder i32 %v1_1000c093, { 1, 0 }
  uselistorder i32 %v5_1000c083, { 1, 2, 0, 3 }
  uselistorder i32 %indvars.iv, { 2, 0, 1 }
  uselistorder i32 %v1_1000c07e, { 1, 0 }
  uselistorder i32 %v4_1000c049119, { 1, 0 }
  uselistorder i32 %v2_1000c07b, { 0, 1, 3, 2, 5, 4, 7, 6, 8, 9 }
  uselistorder i32 %v7_1000c007, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v3_1000bfea, { 1, 0, 2 }
  uselistorder i32 %v2_1000bfc6, { 1, 0 }
  uselistorder i32 %v1_1000bf6d, { 1, 0, 3, 2 }
  uselistorder i32 %v1_1000bf5e, { 2, 0, 1 }
  uselistorder i32 %v1_1000bf3d, { 1, 0, 3, 2 }
  uselistorder i32 %v1_1000bf2e, { 2, 3, 4, 5, 0, 1, 6 }
  uselistorder i32 %v1_1000bf0d, { 1, 0, 3, 2 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i16* %stack_var_-40, { 14, 0, 13, 12, 11, 10, 9, 1, 8, 7, 6, 5, 4, 2, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i16* %stack_var_-20, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 0, 2, 1 }
  uselistorder i32 %tmp94, { 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2, 4, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 18, 19, 20, 56, 22, 23, 27, 24, 25, 26, 55, 28, 32, 29, 30, 31, 54, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32 (i32, i32)* @SetSwpIdx, { 11, 10, 9, 0, 8, 7, 16, 15, 14, 6, 13, 5, 4, 12, 3, 2, 1 }
  uselistorder i32 (i16, i32)* @function_10003bb8, { 1, 2, 0, 3, 4 }
  uselistorder i32 (i32)* @RdErrorStatus, { 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 6, 5, 4, 3, 2, 1, 26, 0 }
  uselistorder i32* @esp, { 39, 40, 41, 42, 43, 44, 45, 46, 0, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 1, 57, 58, 59, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 2, 6, 7, 8, 9, 10, 11, 3, 12, 13, 14, 4, 15, 16, 17, 18, 19, 20, 5, 21, 22, 23, 24 }
  uselistorder i32 (i16, i32)* @function_100039d0, { 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 18, 19, 20 }
  uselistorder i32 (i16, i32, i32, i32, i32, i32)* @function_100040c9, { 2, 3, 0, 1, 4, 5 }
  uselistorder i16 -2, { 1, 2, 3, 4, 5, 6, 0, 7 }
  uselistorder i32 (i32)* @RdNumDataPts, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @RdSwpIdx, { 7, 4, 8, 6, 5, 3, 13, 12, 11, 10, 2, 9, 1, 0 }
  uselistorder i32 (i32)* @IsSweeping, { 3, 2, 5, 4, 1, 0 }
  uselistorder i32 (i32)* @GetFuncStatusCode, { 105, 104, 103, 102, 101, 100, 99, 98, 109, 97, 108, 107, 106, 70, 131, 96, 130, 129, 128, 127, 95, 94, 93, 13, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 92, 91, 90, 89, 115, 85, 84, 83, 82, 81, 80, 79, 28, 78, 77, 76, 75, 74, 73, 72, 42, 71, 69, 59, 68, 67, 66, 65, 41, 64, 63, 60, 62, 61, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 35, 46, 45, 44, 43, 114, 27, 34, 38, 37, 36, 32, 113, 31, 86, 30, 29, 26, 24, 23, 22, 88, 8, 39, 12, 21, 87, 20, 19, 25, 4, 3, 2, 1, 11, 33, 0, 18, 17, 16, 15, 112, 111, 14, 10, 110, 40, 9, 7, 6, 5 }
  uselistorder label %dec_label_pc_1000c3bd, { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder label %dec_label_pc_1000c37c, { 0, 6, 5, 4, 3, 2, 1, 7 }
  uselistorder label %dec_label_pc_1000c324, { 1, 0 }
  uselistorder label %dec_label_pc_1000c2af, { 1, 0 }
  uselistorder label %dec_label_pc_1000c27f, { 1, 0 }
  uselistorder label %dec_label_pc_1000c236, { 1, 0 }
  uselistorder label %dec_label_pc_1000c192, { 1, 0 }
  uselistorder label %dec_label_pc_1000c11c, { 1, 0 }
  uselistorder label %dec_label_pc_1000c0ec, { 1, 0 }
  uselistorder label %dec_label_pc_1000c0a3, { 1, 0 }
  uselistorder label %dec_label_pc_1000c06a.preheader, { 1, 0 }
}

define i32 @ReadCellPtFreq(i32 %arg1, i32 %arg2, i16 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca double, align 8
  %stack_var_-4 = alloca i32, align 4
  %v0_1000c3c1 = load i32, i32* @ebp, align 4
  store i32 %v0_1000c3c1, i32* %stack_var_-4, align 4
  %v4_1000c3c1 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000c3c1, i32* @ebp, align 4
  store double 0.000000e+00, double* %stack_var_-12, align 8
  store i32 %arg1, i32* @eax, align 4
  %v1_1000c3d9 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000c3d9, i32* @eax, align 4
  %v1_1000c3e1 = mul i32 %v1_1000c3d9, 65536
  %v2_1000c3e1 = sdiv i32 %v1_1000c3e1, 65536
  store i32 %v2_1000c3e1, i32* @ecx, align 4
  %v1_1000c3e1.off = or i32 %v1_1000c3e1, 65535
  %tmp = icmp ult i32 %v1_1000c3e1.off, 131071
  br i1 %tmp, label %dec_label_pc_1000c3f3, label %dec_label_pc_1000c3e8

dec_label_pc_1000c3e8:                            ; preds = %entry
  br label %dec_label_pc_1000c4b1

dec_label_pc_1000c3f3:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000c3f9 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  store i32 %v3_1000c3f9, i32* @eax, align 4
  %v5_1000c401 = icmp slt i32 %arg2, 0
  %v2_1000c405 = icmp eq i1 %v5_1000c401, false
  br i1 %v2_1000c405, label %dec_label_pc_1000c407, label %dec_label_pc_1000c418

dec_label_pc_1000c407:                            ; preds = %dec_label_pc_1000c3f3
  %v1_1000c40b = call i32 @RdNumSwpPts(i32 %arg1)
  store i32 %v1_1000c40b, i32* @eax, align 4
  %v7_1000c416 = icmp slt i32 %v1_1000c40b, %arg2
  br i1 %v7_1000c416, label %dec_label_pc_1000c418, label %dec_label_pc_1000c431

dec_label_pc_1000c418:                            ; preds = %dec_label_pc_1000c407, %dec_label_pc_1000c3f3
  %v3_1000c41e = call i32 @SetFuncStatusCode(i32 %arg1, i16 -3)
  br label %dec_label_pc_1000c4b1

dec_label_pc_1000c431:                            ; preds = %dec_label_pc_1000c407
  %v9_1000c435 = icmp eq i16 %arg3, 2
  %v1_1000c438 = icmp eq i1 %v9_1000c435, false
  br i1 %v1_1000c438, label %dec_label_pc_1000c455, label %dec_label_pc_1000c43a

dec_label_pc_1000c43a:                            ; preds = %dec_label_pc_1000c431
  %v4_1000c43a = icmp eq i32 %arg4, 0
  br i1 %v4_1000c43a, label %dec_label_pc_1000c455, label %dec_label_pc_1000c440

dec_label_pc_1000c440:                            ; preds = %dec_label_pc_1000c43a
  %v2_1000c446 = mul i32 %arg2, 8
  %v3_1000c446 = add i32 %v2_1000c446, %arg4
  %v4_1000c446 = inttoptr i32 %v3_1000c446 to i32*
  %v5_1000c446 = load i32, i32* %v4_1000c446, align 4
  %v6_1000c449 = sext i32 %v5_1000c446 to i64
  %v7_1000c449 = bitcast i64 %v6_1000c449 to double
  store double %v7_1000c449, double* %stack_var_-12, align 8
  br label %dec_label_pc_1000c477

dec_label_pc_1000c455:                            ; preds = %dec_label_pc_1000c43a, %dec_label_pc_1000c431
  %v9_1000c459 = icmp eq i16 %arg3, 4
  %v1_1000c45c = icmp eq i1 %v9_1000c459, false
  br i1 %v1_1000c45c, label %dec_label_pc_1000c477, label %dec_label_pc_1000c45e

dec_label_pc_1000c45e:                            ; preds = %dec_label_pc_1000c455
  %v4_1000c45e = icmp eq i32 %arg5, 0
  br i1 %v4_1000c45e, label %dec_label_pc_1000c477, label %dec_label_pc_1000c464

dec_label_pc_1000c464:                            ; preds = %dec_label_pc_1000c45e
  %v2_1000c46a = mul i32 %arg2, 8
  %v3_1000c46a = add i32 %v2_1000c46a, %arg5
  %v4_1000c46a = inttoptr i32 %v3_1000c46a to i32*
  %v5_1000c46a = load i32, i32* %v4_1000c46a, align 4
  %v6_1000c46d = sext i32 %v5_1000c46a to i64
  %v7_1000c46d = bitcast i64 %v6_1000c46d to double
  store double %v7_1000c46d, double* %stack_var_-12, align 8
  br label %dec_label_pc_1000c477

dec_label_pc_1000c477:                            ; preds = %dec_label_pc_1000c45e, %dec_label_pc_1000c455, %dec_label_pc_1000c440, %dec_label_pc_1000c464
  %v3_1000c47b = load double, double* %stack_var_-12, align 8
  store i32 %arg1, i32* @edx, align 4
  %v4_1000c483 = call i32 @FreqInRange(i32 %arg1, double %v3_1000c47b)
  %v1_1000c48b = mul i32 %v4_1000c483, 65536
  %v2_1000c48b = sdiv i32 %v1_1000c48b, 65536
  store i32 %v2_1000c48b, i32* @eax, align 4
  %v1_1000c48b.off = or i32 %v1_1000c48b, 65535
  %tmp15 = icmp ult i32 %v1_1000c48b.off, 131071
  %v1_1000c490 = icmp eq i1 %tmp15, false
  br i1 %v1_1000c490, label %dec_label_pc_1000c4ae, label %dec_label_pc_1000c492

dec_label_pc_1000c492:                            ; preds = %dec_label_pc_1000c477
  store double 0.000000e+00, double* %stack_var_-12, align 8
  %v3_1000c4a6 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -1)
  br label %dec_label_pc_1000c4ae

dec_label_pc_1000c4ae:                            ; preds = %dec_label_pc_1000c477, %dec_label_pc_1000c492
  %v0_1000c4b43 = phi i32 [ %v2_1000c48b, %dec_label_pc_1000c477 ], [ %v3_1000c4a6, %dec_label_pc_1000c492 ]
  br label %dec_label_pc_1000c4b1

dec_label_pc_1000c4b1:                            ; preds = %dec_label_pc_1000c418, %dec_label_pc_1000c3e8, %dec_label_pc_1000c4ae
  %v0_1000c4b4 = phi i32 [ %v3_1000c41e, %dec_label_pc_1000c418 ], [ %v1_1000c3d9, %dec_label_pc_1000c3e8 ], [ %v0_1000c4b43, %dec_label_pc_1000c4ae ]
  ret i32 %v0_1000c4b4

; uselistorder directives
  uselistorder i32 %v2_1000c48b, { 1, 0 }
  uselistorder i32 %v1_1000c3d9, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder double* %stack_var_-12, { 4, 3, 2, 1, 0 }
  uselistorder i16 2, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 31, 1, 26, 33, 27, 28, 3, 2, 34, 32, 29, 30 }
  uselistorder i32 %arg2, { 3, 2, 0, 1 }
  uselistorder i32 %arg1, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000c4b1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000c4ae, { 1, 0 }
  uselistorder label %dec_label_pc_1000c477, { 3, 0, 1, 2 }
}

define i32 @ReadStartFreq(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000c4bc = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000c4bc, i32* @eax, align 4
  %v1_1000c4c4 = mul i32 %v1_1000c4bc, 65536
  %v1_1000c4c4.off = or i32 %v1_1000c4c4, 65535
  %tmp = icmp ult i32 %v1_1000c4c4.off, 131071
  br i1 %tmp, label %dec_label_pc_1000c4d3, label %dec_label_pc_1000c4e7

dec_label_pc_1000c4d3:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000c4d9 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_1000c4e4 = add i32 %arg1, 8
  %v2_1000c4e4 = inttoptr i32 %v1_1000c4e4 to double*
  %v3_1000c4e4 = load double, double* %v2_1000c4e4, align 4
  %v4_1000c4e4 = fpext double %v3_1000c4e4 to x86_fp80
  br label %dec_label_pc_1000c4e7

dec_label_pc_1000c4e7:                            ; preds = %entry, %dec_label_pc_1000c4d3
  %v0_1000c4e8 = phi i32 [ %arg1, %dec_label_pc_1000c4d3 ], [ %v1_1000c4bc, %entry ]
  %storemerge1 = phi x86_fp80 [ %v4_1000c4e4, %dec_label_pc_1000c4d3 ], [ 0xKBFFF8000000000000000, %entry ]
  %storemerge.in = load i3, i3* @fpu_stat_TOP, align 1
  store x86_fp80 %storemerge1, x86_fp80* @st0, align 4
  %storemerge = add i3 %storemerge.in, -1
  store i3 %storemerge, i3* @fpu_stat_TOP, align 1
  ret i32 %v0_1000c4e8

; uselistorder directives
  uselistorder i32 %v1_1000c4bc, { 1, 0, 2 }
  uselistorder i32 %arg1, { 0, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1000c4e7, { 1, 0 }
}

define i32 @ReadStepSize(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000c4f0 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000c4f0, i32* @eax, align 4
  %v1_1000c4f8 = mul i32 %v1_1000c4f0, 65536
  %v1_1000c4f8.off = or i32 %v1_1000c4f8, 65535
  %tmp = icmp ult i32 %v1_1000c4f8.off, 131071
  br i1 %tmp, label %dec_label_pc_1000c507, label %dec_label_pc_1000c51b

dec_label_pc_1000c507:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000c50d = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v1_1000c518 = add i32 %arg1, 24
  %v2_1000c518 = inttoptr i32 %v1_1000c518 to double*
  %v3_1000c518 = load double, double* %v2_1000c518, align 4
  %v4_1000c518 = fpext double %v3_1000c518 to x86_fp80
  br label %dec_label_pc_1000c51b

dec_label_pc_1000c51b:                            ; preds = %entry, %dec_label_pc_1000c507
  %v0_1000c51c = phi i32 [ %arg1, %dec_label_pc_1000c507 ], [ %v1_1000c4f0, %entry ]
  %storemerge1 = phi x86_fp80 [ %v4_1000c518, %dec_label_pc_1000c507 ], [ 0xKBFFF8000000000000000, %entry ]
  %storemerge.in = load i3, i3* @fpu_stat_TOP, align 1
  store x86_fp80 %storemerge1, x86_fp80* @st0, align 4
  %storemerge = add i3 %storemerge.in, -1
  store i3 %storemerge, i3* @fpu_stat_TOP, align 1
  ret i32 %v0_1000c51c

; uselistorder directives
  uselistorder i32 %v1_1000c4f0, { 1, 0, 2 }
  uselistorder i32 %arg1, { 0, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1000c51b, { 1, 0 }
}

define i32 @ReadStopFreq(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000c524 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000c524, i32* @eax, align 4
  %v1_1000c52c = mul i32 %v1_1000c524, 65536
  %v1_1000c52c.off = or i32 %v1_1000c52c, 65535
  %tmp = icmp ult i32 %v1_1000c52c.off, 131071
  br i1 %tmp, label %dec_label_pc_1000c53b, label %dec_label_pc_1000c54f

dec_label_pc_1000c53b:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000c541 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_1000c54f

dec_label_pc_1000c54f:                            ; preds = %entry, %dec_label_pc_1000c53b
  %v0_1000c550 = phi i32 [ %arg1, %dec_label_pc_1000c53b ], [ %v1_1000c524, %entry ]
  ret i32 %v0_1000c550

; uselistorder directives
  uselistorder i32 %v1_1000c524, { 1, 0, 2 }
  uselistorder i32 %arg1, { 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1000c54f, { 1, 0 }
}

define i32 @ReadSwpPtFreq(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000c551 = load i32, i32* @ebp, align 4
  store i32 %v0_1000c551, i32* %stack_var_-4, align 4
  %v4_1000c551 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000c551, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000c569 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000c569, i32* @eax, align 4
  %v1_1000c571 = mul i32 %v1_1000c569, 65536
  %v2_1000c571 = sdiv i32 %v1_1000c571, 65536
  store i32 %v2_1000c571, i32* @ecx, align 4
  %v1_1000c571.off = or i32 %v1_1000c571, 65535
  %tmp = icmp ult i32 %v1_1000c571.off, 131071
  br i1 %tmp, label %dec_label_pc_1000c583, label %dec_label_pc_1000c578

dec_label_pc_1000c578:                            ; preds = %entry
  br label %dec_label_pc_1000c61c

dec_label_pc_1000c583:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000c589 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  store i32 %v3_1000c589, i32* @eax, align 4
  %v5_1000c591 = icmp slt i32 %arg2, 0
  %v2_1000c595 = icmp eq i1 %v5_1000c591, false
  br i1 %v2_1000c595, label %dec_label_pc_1000c597, label %dec_label_pc_1000c5a8

dec_label_pc_1000c597:                            ; preds = %dec_label_pc_1000c583
  %v1_1000c59b = call i32 @RdNumSwpPts(i32 %arg1)
  store i32 %v1_1000c59b, i32* @eax, align 4
  %v7_1000c5a6 = icmp slt i32 %v1_1000c59b, %arg2
  br i1 %v7_1000c5a6, label %dec_label_pc_1000c5a8, label %dec_label_pc_1000c5be

dec_label_pc_1000c5a8:                            ; preds = %dec_label_pc_1000c597, %dec_label_pc_1000c583
  %v3_1000c5ae = call i32 @SetFuncStatusCode(i32 %arg1, i16 -3)
  br label %dec_label_pc_1000c61c

dec_label_pc_1000c5be:                            ; preds = %dec_label_pc_1000c597
  %v1_1000c5c8 = call i32 @ReadStepSize(i32 %arg1)
  %tmp16 = sitofp i32 %arg2 to x86_fp80
  %v6_1000c5d0 = load x86_fp80, x86_fp80* @st0, align 4
  %v7_1000c5d0 = fmul x86_fp80 %tmp16, %v6_1000c5d0
  %v0_1000c5d3 = load i3, i3* @fpu_stat_TOP, align 1
  %tmp14 = fptrunc x86_fp80 %v7_1000c5d0 to double
  %v12_1000c5d3 = add i3 %v0_1000c5d3, 1
  store i3 %v12_1000c5d3, i3* @fpu_stat_TOP, align 1
  %tmp17 = fptrunc x86_fp80 %v7_1000c5d0 to float
  %v3_1000c5da = bitcast float %tmp17 to i32
  %v4_1000c5da = call i32 @ReadStartFreq(i32 %arg1, i32 %v3_1000c5da)
  %v9_1000c5e2 = fpext double %tmp14 to x86_fp80
  %v10_1000c5e2 = load x86_fp80, x86_fp80* @st0, align 4
  %v11_1000c5e2 = fadd x86_fp80 %v9_1000c5e2, %v10_1000c5e2
  %v0_1000c5e5 = load i3, i3* @fpu_stat_TOP, align 1
  %v12_1000c5e5 = add i3 %v0_1000c5e5, 1
  store i3 %v12_1000c5e5, i3* @fpu_stat_TOP, align 1
  %tmp18 = fptrunc x86_fp80 %v11_1000c5e2 to double
  %v4_1000c5f4 = call i32 @FreqInRange(i32 %arg1, double %tmp18)
  store i32 %v4_1000c5f4, i32* @eax, align 4
  %v1_1000c5fc = mul i32 %v4_1000c5f4, 65536
  %v1_1000c5fc.off = or i32 %v1_1000c5fc, 65535
  %tmp19 = icmp ult i32 %v1_1000c5fc.off, 131071
  %v1_1000c601 = icmp eq i1 %tmp19, false
  br i1 %v1_1000c601, label %dec_label_pc_1000c619, label %dec_label_pc_1000c603

dec_label_pc_1000c603:                            ; preds = %dec_label_pc_1000c5be
  store i32 %arg1, i32* @edx, align 4
  %v3_1000c609 = call i32 @SetFuncStatusCode(i32 %arg1, i16 -1)
  br label %dec_label_pc_1000c61c

dec_label_pc_1000c619:                            ; preds = %dec_label_pc_1000c5be
  br label %dec_label_pc_1000c61c

dec_label_pc_1000c61c:                            ; preds = %dec_label_pc_1000c603, %dec_label_pc_1000c5a8, %dec_label_pc_1000c578, %dec_label_pc_1000c619
  %v0_1000c61f = phi i32 [ %v3_1000c609, %dec_label_pc_1000c603 ], [ %v3_1000c5ae, %dec_label_pc_1000c5a8 ], [ %v1_1000c569, %dec_label_pc_1000c578 ], [ %v4_1000c5f4, %dec_label_pc_1000c619 ]
  ret i32 %v0_1000c61f

; uselistorder directives
  uselistorder i32 %v4_1000c5f4, { 1, 0, 2 }
  uselistorder i32 %v1_1000c569, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 (i32, double)* @FreqInRange, { 6, 7, 20, 8, 25, 17, 9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 24, 18, 19, 21, 0, 1, 2, 3, 4, 5 }
  uselistorder i16 -3, { 4, 5, 6, 7, 8, 9, 10, 0, 1, 11, 19, 20, 12, 2, 21, 16, 17, 22, 23, 24, 18, 13, 3, 25, 26, 14, 15 }
  uselistorder i32 (i32)* @RdNumSwpPts, { 5, 4, 3, 2, 1, 0, 9, 8, 7, 6 }
  uselistorder i32 %arg1, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000c61c, { 3, 0, 1, 2 }
}

define i32 @ReadTrigFreq(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000c627 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000c627, i32* @eax, align 4
  %v1_1000c62f = mul i32 %v1_1000c627, 65536
  %v1_1000c62f.off = or i32 %v1_1000c62f, 65535
  %tmp = icmp ult i32 %v1_1000c62f.off, 131071
  br i1 %tmp, label %dec_label_pc_1000c63e, label %dec_label_pc_1000c652

dec_label_pc_1000c63e:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000c644 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_1000c652

dec_label_pc_1000c652:                            ; preds = %entry, %dec_label_pc_1000c63e
  %v0_1000c653 = phi i32 [ %arg1, %dec_label_pc_1000c63e ], [ %v1_1000c627, %entry ]
  ret i32 %v0_1000c653

; uselistorder directives
  uselistorder i32 %v1_1000c627, { 1, 0, 2 }
  uselistorder i32 %arg1, { 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1000c652, { 1, 0 }
}

define i32 @ReadZspanFreq(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000c65b = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  store i32 %v1_1000c65b, i32* @eax, align 4
  %v1_1000c663 = mul i32 %v1_1000c65b, 65536
  %v1_1000c663.off = or i32 %v1_1000c663, 65535
  %tmp = icmp ult i32 %v1_1000c663.off, 131071
  br i1 %tmp, label %dec_label_pc_1000c672, label %dec_label_pc_1000c689

dec_label_pc_1000c672:                            ; preds = %entry
  store i32 %arg1, i32* @edx, align 4
  %v3_1000c678 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_1000c689

dec_label_pc_1000c689:                            ; preds = %entry, %dec_label_pc_1000c672
  %v0_1000c68a = phi i32 [ %arg1, %dec_label_pc_1000c672 ], [ %v1_1000c65b, %entry ]
  ret i32 %v0_1000c68a

; uselistorder directives
  uselistorder i32 %v1_1000c65b, { 1, 0, 2 }
  uselistorder i32 %arg1, { 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1000c689, { 1, 0 }
}

define i32 @RdCommDelay(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000c6ee = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000c6f6 = mul i32 %v1_1000c6ee, 65536
  %v1_1000c6f6.off = or i32 %v1_1000c6f6, 65535
  %tmp = icmp ult i32 %v1_1000c6f6.off, 131071
  br i1 %tmp, label %dec_label_pc_1000c701, label %dec_label_pc_1000c6fd

dec_label_pc_1000c6fd:                            ; preds = %entry
  br label %dec_label_pc_1000c727

dec_label_pc_1000c701:                            ; preds = %entry
  %v1_1000c705 = call i32 @RdTimeoutWait(i32 %arg1)
  store i32 %v1_1000c705, i32* @esi, align 4
  %v1_1000c713 = call i32 @function_10009357(i32 %arg1)
  %v8_1000c723 = udiv i32 4000000, %v1_1000c713
  %v1_1000c725 = load i32, i32* @esi, align 4
  %v2_1000c725 = add i32 %v1_1000c725, %v8_1000c723
  br label %dec_label_pc_1000c727

dec_label_pc_1000c727:                            ; preds = %dec_label_pc_1000c6fd, %dec_label_pc_1000c701
  %storemerge = phi i32 [ 0, %dec_label_pc_1000c6fd ], [ %v2_1000c725, %dec_label_pc_1000c701 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 (i32)* @RdTimeoutWait, { 5, 4, 3, 2, 6, 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000c727, { 1, 0 }
}

define i32 @function_1000c72a(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000c72a:
  store i32 %arg1, i32* @eax, align 4
  %v1_1000c731 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000c739 = mul i32 %v1_1000c731, 65536
  %v1_1000c739.off = or i32 %v1_1000c739, 65535
  %tmp = icmp ult i32 %v1_1000c739.off, 131071
  br i1 %tmp, label %dec_label_pc_1000c746, label %dec_label_pc_1000c740

dec_label_pc_1000c740:                            ; preds = %dec_label_pc_1000c72a
  %v2_1000c740 = or i32 %v1_1000c731, 65535
  br label %dec_label_pc_1000c750

dec_label_pc_1000c746:                            ; preds = %dec_label_pc_1000c72a
  %v1_1000c749 = add i32 %arg1, 536
  %v2_1000c749 = inttoptr i32 %v1_1000c749 to i16*
  %v3_1000c749 = load i16, i16* %v2_1000c749, align 2
  %v4_1000c749 = zext i16 %v3_1000c749 to i32
  %v6_1000c749 = and i32 %v1_1000c731, -65536
  %v7_1000c749 = or i32 %v4_1000c749, %v6_1000c749
  br label %dec_label_pc_1000c750

dec_label_pc_1000c750:                            ; preds = %dec_label_pc_1000c740, %dec_label_pc_1000c746
  %storemerge = phi i32 [ %v2_1000c740, %dec_label_pc_1000c740 ], [ %v7_1000c749, %dec_label_pc_1000c746 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_1000c731, { 1, 2, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1000c750, { 1, 0 }
}

define i32 @CalcRBWCode(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000c760 = load i32, i32* @ebp, align 4
  store i32 %v0_1000c760, i32* %stack_var_-4, align 4
  %v4_1000c760 = ptrtoint i32* %stack_var_-4 to i32
  %v4_1000c7b3 = add i32 %v4_1000c760, -20
  %v18_1000c79b = and i32 %arg1, -65536
  br label %dec_label_pc_1000c7ac

dec_label_pc_1000c7ac:                            ; preds = %entry, %dec_label_pc_1000c7c3
  %v5_1000c7b9 = phi i32 [ 0, %entry ], [ %v4_1000c7a3, %dec_label_pc_1000c7c3 ]
  %storemerge3 = phi i16 [ 0, %entry ], [ %v2_1000c79b, %dec_label_pc_1000c7c3 ]
  %v3_1000c7b3 = mul nsw i32 %v5_1000c7b9, 4
  %v5_1000c7b3 = add i32 %v4_1000c7b3, %v3_1000c7b3
  %v6_1000c7b3 = inttoptr i32 %v5_1000c7b3 to i32*
  %v7_1000c7b3 = load i32, i32* %v6_1000c7b3, align 4
  %v18_1000c7b3 = icmp eq i32 %v7_1000c7b3, %arg1
  %v1_1000c7b7 = icmp eq i1 %v18_1000c7b3, false
  br i1 %v1_1000c7b7, label %dec_label_pc_1000c7c3, label %dec_label_pc_1000c7b9

dec_label_pc_1000c7b9:                            ; preds = %dec_label_pc_1000c7ac
  br label %dec_label_pc_1000c7c5

dec_label_pc_1000c7c3:                            ; preds = %dec_label_pc_1000c7ac
  %v2_1000c79b = add i16 %storemerge3, 1
  %v4_1000c7a3 = sext i16 %v2_1000c79b to i32
  %v6_1000c7a7 = sub nsw i32 3, %v4_1000c7a3
  %v7_1000c7a7 = and i32 %v6_1000c7a7, %v4_1000c7a3
  %v8_1000c7a7 = icmp slt i32 %v7_1000c7a7, 0
  %v9_1000c7a7 = icmp eq i16 %v2_1000c79b, 4
  %v10_1000c7a7 = icmp slt i16 %v2_1000c79b, 4
  %v3_1000c7aa = icmp eq i1 %v10_1000c7a7, %v8_1000c7a7
  %v4_1000c7aa = icmp eq i1 %v9_1000c7a7, false
  %v5_1000c7aa = and i1 %v4_1000c7aa, %v3_1000c7aa
  br i1 %v5_1000c7aa, label %dec_label_pc_1000c7c5.loopexit, label %dec_label_pc_1000c7ac

dec_label_pc_1000c7c5.loopexit:                   ; preds = %dec_label_pc_1000c7c3
  %v16_1000c79b = zext i16 %v2_1000c79b to i32
  %v19_1000c79b = or i32 %v16_1000c79b, %v18_1000c79b
  br label %dec_label_pc_1000c7c5

dec_label_pc_1000c7c5:                            ; preds = %dec_label_pc_1000c7c5.loopexit, %dec_label_pc_1000c7b9
  %v6_1000c7c5 = phi i32 [ %v19_1000c79b, %dec_label_pc_1000c7c5.loopexit ], [ %arg1, %dec_label_pc_1000c7b9 ]
  %v3_1000c7c5 = phi i16 [ -1, %dec_label_pc_1000c7c5.loopexit ], [ %storemerge3, %dec_label_pc_1000c7b9 ]
  %v4_1000c7c5 = sext i16 %v3_1000c7c5 to i32
  %v7_1000c7c5 = and i32 %v6_1000c7c5, -65536
  %v8_1000c7c5 = or i32 %v4_1000c7c5, %v7_1000c7c5
  ret i32 %v8_1000c7c5

; uselistorder directives
  uselistorder i32 %v4_1000c7a3, { 0, 2, 1 }
  uselistorder i16 %v2_1000c79b, { 4, 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1000c7ac, { 1, 0 }
}

define i32 @CalcVBWCode(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000c7cd = load i32, i32* @ebp, align 4
  store i32 %v0_1000c7cd, i32* %stack_var_-4, align 4
  %v4_1000c7cd = ptrtoint i32* %stack_var_-4 to i32
  %v4_1000c835 = add i32 %v4_1000c7cd, -32
  %v18_1000c81d = and i32 %arg1, -65536
  br label %dec_label_pc_1000c82e

dec_label_pc_1000c82e:                            ; preds = %entry, %dec_label_pc_1000c845
  %v5_1000c83b = phi i32 [ 1, %entry ], [ %v4_1000c825, %dec_label_pc_1000c845 ]
  %storemerge3 = phi i16 [ 1, %entry ], [ %v2_1000c81d, %dec_label_pc_1000c845 ]
  %v3_1000c835 = mul nsw i32 %v5_1000c83b, 4
  %v5_1000c835 = add i32 %v4_1000c835, %v3_1000c835
  %v6_1000c835 = inttoptr i32 %v5_1000c835 to i32*
  %v7_1000c835 = load i32, i32* %v6_1000c835, align 4
  %v18_1000c835 = icmp eq i32 %v7_1000c835, %arg1
  %v1_1000c839 = icmp eq i1 %v18_1000c835, false
  br i1 %v1_1000c839, label %dec_label_pc_1000c845, label %dec_label_pc_1000c83b

dec_label_pc_1000c83b:                            ; preds = %dec_label_pc_1000c82e
  br label %dec_label_pc_1000c847

dec_label_pc_1000c845:                            ; preds = %dec_label_pc_1000c82e
  %v2_1000c81d = add i16 %storemerge3, 1
  %v4_1000c825 = sext i16 %v2_1000c81d to i32
  %v6_1000c829 = sub nsw i32 6, %v4_1000c825
  %v7_1000c829 = and i32 %v6_1000c829, %v4_1000c825
  %v8_1000c829 = icmp slt i32 %v7_1000c829, 0
  %v9_1000c829 = icmp eq i16 %v2_1000c81d, 7
  %v10_1000c829 = icmp slt i16 %v2_1000c81d, 7
  %v3_1000c82c = icmp eq i1 %v10_1000c829, %v8_1000c829
  %v4_1000c82c = icmp eq i1 %v9_1000c829, false
  %v5_1000c82c = and i1 %v4_1000c82c, %v3_1000c82c
  br i1 %v5_1000c82c, label %dec_label_pc_1000c847.loopexit, label %dec_label_pc_1000c82e

dec_label_pc_1000c847.loopexit:                   ; preds = %dec_label_pc_1000c845
  br label %dec_label_pc_1000c847

dec_label_pc_1000c847:                            ; preds = %dec_label_pc_1000c847.loopexit, %dec_label_pc_1000c83b
  %v3_1000c86312 = phi i16 [ -1, %dec_label_pc_1000c847.loopexit ], [ %storemerge3, %dec_label_pc_1000c83b ]
  %v5_1000c84d = icmp slt i32 %arg1, 3
  br i1 %v5_1000c84d, label %dec_label_pc_1000c84f, label %dec_label_pc_1000c855

dec_label_pc_1000c84f:                            ; preds = %dec_label_pc_1000c847
  br label %dec_label_pc_1000c855

dec_label_pc_1000c855:                            ; preds = %dec_label_pc_1000c847, %dec_label_pc_1000c84f
  %v3_1000c86311 = phi i16 [ %v3_1000c86312, %dec_label_pc_1000c847 ], [ 0, %dec_label_pc_1000c84f ]
  %v7_1000c85b = icmp sgt i32 %arg1, 3000000
  br i1 %v7_1000c85b, label %dec_label_pc_1000c85d, label %dec_label_pc_1000c863

dec_label_pc_1000c85d:                            ; preds = %dec_label_pc_1000c855
  br label %dec_label_pc_1000c863

dec_label_pc_1000c863:                            ; preds = %dec_label_pc_1000c855, %dec_label_pc_1000c85d
  %v3_1000c863 = phi i16 [ %v3_1000c86311, %dec_label_pc_1000c855 ], [ 7, %dec_label_pc_1000c85d ]
  %v4_1000c863 = sext i16 %v3_1000c863 to i32
  %v8_1000c863 = or i32 %v4_1000c863, %v18_1000c81d
  ret i32 %v8_1000c863

; uselistorder directives
  uselistorder i32 %v4_1000c825, { 0, 2, 1 }
  uselistorder i16 %v2_1000c81d, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_1000c863, { 1, 0 }
  uselistorder label %dec_label_pc_1000c855, { 1, 0 }
  uselistorder label %dec_label_pc_1000c82e, { 1, 0 }
}

define i32 @Copy9052Struct(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_1000c86e = icmp eq i32 %arg1, 0
  br i1 %v4_1000c86e, label %dec_label_pc_1000c894, label %dec_label_pc_1000c874

dec_label_pc_1000c874:                            ; preds = %entry
  %v4_1000c874 = icmp eq i32 %arg2, 0
  br i1 %v4_1000c874, label %dec_label_pc_1000c894, label %dec_label_pc_1000c87a

dec_label_pc_1000c87a:                            ; preds = %dec_label_pc_1000c874
  %v3_1000c887 = inttoptr i32 %arg1 to i8*
  %v4_1000c887 = call i32 @function_1000dba0(i8* %v3_1000c887, i32 %arg2, i32 736)
  %v12_1000c88f = and i32 %v4_1000c887, -65536
  br label %dec_label_pc_1000c898

dec_label_pc_1000c894:                            ; preds = %dec_label_pc_1000c874, %entry
  %v1_1000c894 = load i32, i32* @eax, align 4
  %v2_1000c894 = or i32 %v1_1000c894, 65535
  br label %dec_label_pc_1000c898

dec_label_pc_1000c898:                            ; preds = %dec_label_pc_1000c87a, %dec_label_pc_1000c894
  %storemerge = phi i32 [ %v12_1000c88f, %dec_label_pc_1000c87a ], [ %v2_1000c894, %dec_label_pc_1000c894 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_1000c898, { 1, 0 }
}

define i32 @DefltSetTimeRBW(i16 %arg1) local_unnamed_addr {
entry:
  %v4_1000c8a0 = sext i16 %arg1 to i32
  store i32 %v4_1000c8a0, i32* @ecx, align 4
  %v1_1000c8b0 = mul nsw i32 %v4_1000c8a0, 4
  %v2_1000c8b0 = add i32 %v1_1000c8b0, ptrtoint (i32* @global_var_1000c8f2.76 to i32)
  %v3_1000c8b0 = inttoptr i32 %v2_1000c8b0 to i32*
  %v4_1000c8b0 = load i32, i32* %v3_1000c8b0, align 4
  call void @__pseudo_branch(i32 %v4_1000c8b0)
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v4_1000c8a0, { 1, 0 }
}

define i32 @DefltSetTimeVBW(i16 %arg1) local_unnamed_addr {
entry:
  %v4_1000c90c = sext i16 %arg1 to i32
  %v1_1000c91c = mul nsw i32 %v4_1000c90c, 4
  %v2_1000c91c = add i32 %v1_1000c91c, ptrtoint (i32* @global_var_1000c979.77 to i32)
  %v3_1000c91c = inttoptr i32 %v2_1000c91c to i32*
  %v4_1000c91c = load i32, i32* %v3_1000c91c, align 4
  call void @__pseudo_branch(i32 %v4_1000c91c)
  ret i32 -1
}

define i32 @GetRatioForCode(i16 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000c999 = load i32, i32* @ebp, align 4
  store i32 %v0_1000c999, i32* %stack_var_-4, align 4
  %v4_1000c999 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000c999, i32* %ebp.global-to-local, align 4
  %v4_1000ca45 = sext i16 %arg1 to i32
  store i32 %v4_1000ca45, i32* %eax.global-to-local, align 4
  %v2_1000ca49 = icmp slt i16 %arg1, 0
  %v2_1000ca4b = icmp eq i1 %v2_1000ca49, false
  br i1 %v2_1000ca4b, label %dec_label_pc_1000ca4d, label %dec_label_pc_1000ca76

dec_label_pc_1000ca4d:                            ; preds = %entry
  store i32 %v4_1000ca45, i32* %ecx.global-to-local, align 4
  %v15_1000ca58 = icmp slt i16 %arg1, 10
  br i1 %v15_1000ca58, label %dec_label_pc_1000ca5c, label %dec_label_pc_1000ca76

dec_label_pc_1000ca5c:                            ; preds = %dec_label_pc_1000ca4d
  store i32 %v4_1000ca45, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  %v2_1000ca63 = mul nsw i32 %v4_1000ca45, 8
  %v3_1000ca63 = add i32 %v2_1000ca63, -92
  %v4_1000ca63 = add i32 %v3_1000ca63, %v4_1000c999
  %v5_1000ca63 = inttoptr i32 %v4_1000ca63 to i32*
  %v6_1000ca63 = load i32, i32* %v5_1000ca63, align 4
  %v2_1000ca67 = inttoptr i32 %arg2 to i32*
  store i32 %v6_1000ca63, i32* %v2_1000ca67, align 4
  %v0_1000ca69 = load i32, i32* %ebp.global-to-local, align 4
  %v1_1000ca69 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000ca69 = mul i32 %v1_1000ca69, 8
  %v3_1000ca69 = add i32 %v0_1000ca69, -88
  %v4_1000ca69 = add i32 %v3_1000ca69, %v2_1000ca69
  %v5_1000ca69 = inttoptr i32 %v4_1000ca69 to i32*
  %v6_1000ca69 = load i32, i32* %v5_1000ca69, align 4
  store i32 %v6_1000ca69, i32* %eax.global-to-local, align 4
  %v1_1000ca6d = load i32, i32* %ecx.global-to-local, align 4
  %v2_1000ca6d = add i32 %v1_1000ca6d, 4
  %v3_1000ca6d = inttoptr i32 %v2_1000ca6d to i32*
  store i32 %v6_1000ca69, i32* %v3_1000ca6d, align 4
  %v6_1000ca76.pre = load i32, i32* %eax.global-to-local, align 4
  %v2_1000ca7c.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1000ca76

dec_label_pc_1000ca76:                            ; preds = %dec_label_pc_1000ca4d, %entry, %dec_label_pc_1000ca5c
  %v2_1000ca7c = phi i32 [ %v0_1000c999, %dec_label_pc_1000ca4d ], [ %v0_1000c999, %entry ], [ %v2_1000ca7c.pre, %dec_label_pc_1000ca5c ]
  %v6_1000ca76 = phi i32 [ %v4_1000ca45, %dec_label_pc_1000ca4d ], [ %v4_1000ca45, %entry ], [ %v6_1000ca76.pre, %dec_label_pc_1000ca5c ]
  %v3_1000ca76 = phi i32 [ -3, %dec_label_pc_1000ca4d ], [ -3, %entry ], [ 0, %dec_label_pc_1000ca5c ]
  %v7_1000ca76 = and i32 %v6_1000ca76, -65536
  %v8_1000ca76 = or i32 %v7_1000ca76, %v3_1000ca76
  store i32 %v8_1000ca76, i32* %eax.global-to-local, align 4
  store i32 %v2_1000ca7c, i32* %ebp.global-to-local, align 4
  ret i32 %v8_1000ca76

; uselistorder directives
  uselistorder i32 %v4_1000ca45, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i16 10, { 1, 2, 0, 3 }
  uselistorder i16 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1000ca76, { 2, 0, 1 }
}

define i32 @GetCodeForRatio(double %arg1) local_unnamed_addr {
dec_label_pc_1000cb8f:
  ret i32 -3
}

define i32 @GetRBWString(i16 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_1000cb9f = icmp eq i32 %arg2, 0
  %v1_1000cba3 = icmp eq i1 %v4_1000cb9f, false
  br i1 %v1_1000cba3, label %dec_label_pc_1000cbae, label %dec_label_pc_1000cba5

dec_label_pc_1000cba5:                            ; preds = %entry
  %v5_1000cba5 = load i32, i32* @eax, align 4
  %v6_1000cba5 = and i32 %v5_1000cba5, -65536
  %v7_1000cba5 = or i32 %v6_1000cba5, 65534
  br label %dec_label_pc_1000cc61

dec_label_pc_1000cbae:                            ; preds = %entry
  %v4_1000cbae = sext i16 %arg1 to i32
  %v1_1000cbc2 = mul nsw i32 %v4_1000cbae, 4
  %v2_1000cbc2 = add i32 %v1_1000cbc2, ptrtoint (i32* @global_var_1000cc65.78 to i32)
  %v3_1000cbc2 = inttoptr i32 %v2_1000cbc2 to i32*
  %v4_1000cbc2 = load i32, i32* %v3_1000cbc2, align 4
  call void @__pseudo_branch(i32 %v4_1000cbc2)
  %v1_1000cc55 = call i32 @function_1000d570(i32 %arg2)
  %v6_1000cc5d = and i32 %v1_1000cc55, -65536
  %v7_1000cc5d = or i32 %v6_1000cc5d, 65533
  br label %dec_label_pc_1000cc61

dec_label_pc_1000cc61:                            ; preds = %dec_label_pc_1000cba5, %dec_label_pc_1000cbae
  %storemerge = phi i32 [ %v7_1000cba5, %dec_label_pc_1000cba5 ], [ %v7_1000cc5d, %dec_label_pc_1000cbae ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_1000cc61, { 1, 0 }
}

define i32 @GetVBWString(i16 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_1000cc85 = icmp eq i32 %arg2, 0
  %v1_1000cc89 = icmp eq i1 %v4_1000cc85, false
  br i1 %v1_1000cc89, label %dec_label_pc_1000cc94, label %dec_label_pc_1000cc8b

dec_label_pc_1000cc8b:                            ; preds = %entry
  %v5_1000cc8b = load i32, i32* @eax, align 4
  %v6_1000cc8b = and i32 %v5_1000cc8b, -65536
  %v7_1000cc8b = or i32 %v6_1000cc8b, 65534
  br label %dec_label_pc_1000cd9b

dec_label_pc_1000cc94:                            ; preds = %entry
  %v4_1000cc94 = sext i16 %arg1 to i32
  %v1_1000cca8 = mul nsw i32 %v4_1000cc94, 4
  %v2_1000cca8 = add i32 %v1_1000cca8, ptrtoint (i32* @global_var_1000cd9f.80 to i32)
  %v3_1000cca8 = inttoptr i32 %v2_1000cca8 to i32*
  %v4_1000cca8 = load i32, i32* %v3_1000cca8, align 4
  call void @__pseudo_branch(i32 %v4_1000cca8)
  %v1_1000cd8f = call i32 @function_1000d570(i32 %arg2)
  %v6_1000cd97 = and i32 %v1_1000cd8f, -65536
  %v7_1000cd97 = or i32 %v6_1000cd97, 65533
  br label %dec_label_pc_1000cd9b

dec_label_pc_1000cd9b:                            ; preds = %dec_label_pc_1000cc8b, %dec_label_pc_1000cc94
  %storemerge = phi i32 [ %v7_1000cc8b, %dec_label_pc_1000cc8b ], [ %v7_1000cd97, %dec_label_pc_1000cc94 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 65533, { 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 4, 5, 37, 38, 39, 40, 0, 1, 41, 6, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51 }
  uselistorder i32 65534, { 4, 5, 15, 16, 0, 13, 14, 8, 9, 10, 11, 12, 7, 17, 18, 19, 2, 3, 20, 21, 6, 22, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_1000cd9b, { 1, 0 }
}

define i32 @DelayOps(double %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000cdbf = load i32, i32* @ebp, align 4
  store i32 %v0_1000cdbf, i32* %stack_var_-4, align 4
  %v4_1000cdbf = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000cdbf, i32* @ebp, align 4
  %v4_1000cdc5 = fpext double %arg1 to x86_fp80
  %v4_1000cdc8 = fmul x86_fp80 %v4_1000cdc5, 0xK4008FA00000000000000
  %tmp = fptrunc x86_fp80 %v4_1000cdc8 to float
  %v2_1000cdd1 = bitcast float %tmp to i32
  %v3_1000cdd1 = call i32 @IeTimer(i32 %v2_1000cdd1)
  br label %dec_label_pc_1000cdd9.outer

dec_label_pc_1000cdd9.outer:                      ; preds = %dec_label_pc_1000cdfe, %entry
  %stack_var_-8.0.ph = phi i32 [ %v1_1000ce0d, %dec_label_pc_1000cdfe ], [ %v3_1000cdd1, %entry ]
  %stack_var_-16.0.ph.in = phi x86_fp80 [ %v4_1000ce01, %dec_label_pc_1000cdfe ], [ %v4_1000cdc8, %entry ]
  %stack_var_-16.0.ph = fptrunc x86_fp80 %stack_var_-16.0.ph.in to double
  br label %dec_label_pc_1000cdd9

dec_label_pc_1000cdd9:                            ; preds = %dec_label_pc_1000cdd9.outer, %dec_label_pc_1000cdf5
  %v1_1000cddd = call i32 @IeTimerFrom(i32 %stack_var_-8.0.ph)
  %v3_1000cdf0 = and i32 %v1_1000cddd, 256
  %v4_1000cdf0 = icmp eq i32 %v3_1000cdf0, 0
  br i1 %v4_1000cdf0, label %dec_label_pc_1000ce18, label %dec_label_pc_1000cdf5

dec_label_pc_1000cdf5:                            ; preds = %dec_label_pc_1000cdd9
  %v7_1000cdfc = icmp sgt i32 %v1_1000cddd, 1000
  br i1 %v7_1000cdfc, label %dec_label_pc_1000cdfe, label %dec_label_pc_1000cdd9

dec_label_pc_1000cdfe:                            ; preds = %dec_label_pc_1000cdf5
  %v5_1000cdeb.le = fpext double %stack_var_-16.0.ph to x86_fp80
  %v4_1000ce01 = fsub x86_fp80 0xK4008FA00000000000000, %v5_1000cdeb.le
  %v1_1000ce0d = add i32 %stack_var_-8.0.ph, 1000
  br label %dec_label_pc_1000cdd9.outer

dec_label_pc_1000ce18:                            ; preds = %dec_label_pc_1000cdd9
  ret i32 %v1_1000cddd

; uselistorder directives
  uselistorder i32 %stack_var_-8.0.ph, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 1000, { 1, 0 }
  uselistorder label %dec_label_pc_1000cdd9, { 1, 0 }
}

define i32 @function_1000ce1c() local_unnamed_addr {
dec_label_pc_1000ce1c:
  %v0_1000ce1f = load i32, i32* @global_var_1001b414.82, align 4
  %v1_1000ce1f = icmp eq i32 %v0_1000ce1f, 0
  br i1 %v1_1000ce1f, label %dec_label_pc_1000ce2a, label %dec_label_pc_1000ce34

dec_label_pc_1000ce2a:                            ; preds = %dec_label_pc_1000ce1c
  store i32 1, i32* @global_var_1001b414.82, align 4
  br label %dec_label_pc_1000ce34

dec_label_pc_1000ce34:                            ; preds = %dec_label_pc_1000ce1c, %dec_label_pc_1000ce2a
  %v0_1000ce35 = load i32, i32* @eax, align 4
  ret i32 %v0_1000ce35

; uselistorder directives
  uselistorder label %dec_label_pc_1000ce34, { 1, 0 }
}

define i32 @function_1000ce36() local_unnamed_addr {
dec_label_pc_1000ce36:
  %v0_1000ce39 = load i32, i32* @global_var_1001b414.82, align 4
  %v1_1000ce39 = icmp eq i32 %v0_1000ce39, 0
  %v1_1000ce40 = icmp eq i1 %v1_1000ce39, false
  br i1 %v1_1000ce40, label %dec_label_pc_1000ce44, label %dec_label_pc_1000ce4e

dec_label_pc_1000ce44:                            ; preds = %dec_label_pc_1000ce36
  store i32 0, i32* @global_var_1001b414.82, align 4
  br label %dec_label_pc_1000ce4e

dec_label_pc_1000ce4e:                            ; preds = %dec_label_pc_1000ce36, %dec_label_pc_1000ce44
  %v0_1000ce4f = load i32, i32* @eax, align 4
  ret i32 %v0_1000ce4f

; uselistorder directives
  uselistorder label %dec_label_pc_1000ce4e, { 1, 0 }
}

define i32 @function_1000ce50(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000ce50:
  %v1_1000ce56 = add i32 %arg2, 86517177
  %v5_1000ce5b = trunc i64 %arg1 to i32
  %v6_1000ce5b = sub i32 %v1_1000ce56, %v5_1000ce5b
  %v1_1000ce5e = ashr i32 %v6_1000ce5b, 31
  %v2_1000ce64 = zext i32 %v6_1000ce5b to i64
  %v4_1000ce64 = zext i32 %v1_1000ce5e to i64
  %v5_1000ce64 = mul nuw i64 %v4_1000ce64, 4294967296
  %v6_1000ce64 = or i64 %v5_1000ce64, %v2_1000ce64
  %v10_1000ce64 = srem i64 %v6_1000ce64, 86517177
  %v11_1000ce64 = trunc i64 %v10_1000ce64 to i32
  ret i32 %v11_1000ce64
}

define i32 @IeTimerFrom(i32 %arg1) local_unnamed_addr {
entry:
  %v0_1000ce6a = load i32, i32* @ebp, align 4
  %v1_1000ce6d = call i32 @IeTimer(i32 %v0_1000ce6a)
  %v2_1000ce77 = sext i32 %arg1 to i64
  %v3_1000ce77 = call i32 @function_1000ce50(i64 %v2_1000ce77, i32 %v1_1000ce6d)
  ret i32 %v3_1000ce77
}

define i32 @IeTimer(i32 %arg1) local_unnamed_addr {
entry:
  %v4_1000ce8e = call i32 @timeBeginPeriod(i32 1)
  %v0_1000ce94 = call i32 @timeGetTime()
  %v4_1000ce9f = call i32 @timeEndPeriod(i32 1)
  ret i32 %v0_1000ce94
}

define i32 @GetDbmForAmpl(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000ceac = load i32, i32* @ebp, align 4
  store i32 %v0_1000ceac, i32* %stack_var_-4, align 4
  %v4_1000ceac = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000ceac, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000ceb6 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000cebe = mul i32 %v1_1000ceb6, 65536
  %v1_1000cebe.off = or i32 %v1_1000cebe, 65535
  %tmp = icmp ult i32 %v1_1000cebe.off, 131071
  br i1 %tmp, label %dec_label_pc_1000cecd, label %dec_label_pc_1000cf3f

dec_label_pc_1000cecd:                            ; preds = %entry
  %v1_1000ced0 = add i32 %arg1, 128
  %v2_1000ced0 = inttoptr i32 %v1_1000ced0 to i16*
  %v3_1000ced0 = load i16, i16* %v2_1000ced0, align 2
  %v1_1000ced7 = and i16 %v3_1000ced0, 32
  %v2_1000ced7 = icmp eq i16 %v1_1000ced7, 0
  br i1 %v2_1000ced7, label %dec_label_pc_1000cf00, label %dec_label_pc_1000cede

dec_label_pc_1000cede:                            ; preds = %dec_label_pc_1000cecd
  store i32 %arg1, i32* @edx, align 4
  %v3_1000cee7 = call i32 @GetnVForAmpl(i32 %arg1, i16 %arg2)
  %v0_1000ceec = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000ceec = load x86_fp80, x86_fp80* @st0, align 4
  %v7_1000ceec = add i3 %v0_1000ceec, 1
  store i3 %v7_1000ceec, i3* @fpu_stat_TOP, align 1
  %tmp18 = fptrunc x86_fp80 %v1_1000ceec to double
  %v4_1000cef3 = call i32 @GetDbmForVoltage(i32 %arg1, double %tmp18)
  store i32 %v4_1000cef3, i32* @eax, align 4
  %v1_1000cefb = load x86_fp80, x86_fp80* @st0, align 4
  %storemerge1.in.pre = load i3, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000cf2e

dec_label_pc_1000cf00:                            ; preds = %dec_label_pc_1000cecd
  %v4_1000cf00 = sext i16 %arg2 to i32
  store i32 %v4_1000cf00, i32* @ecx, align 4
  %v5_1000cf07 = sitofp i16 %arg2 to x86_fp80
  %v4_1000cf0a = fdiv x86_fp80 0xK40068000000000000000, %v5_1000cf07
  store i32 %arg1, i32* @edx, align 4
  %v1_1000cf17 = call i32 @function_1000cf43(i32 %arg1)
  %v1_1000cf1f = mul i32 %v1_1000cf17, 65536
  %v2_1000cf1f = sdiv i32 %v1_1000cf1f, 65536
  store i32 %v2_1000cf1f, i32* @eax, align 4
  %v4_1000cf25 = sitofp i32 %v2_1000cf1f to x86_fp80
  %v5_1000cf25 = load i3, i3* @fpu_stat_TOP, align 1
  %v6_1000cf25 = add i3 %v5_1000cf25, -1
  %v7_1000cf28 = fadd x86_fp80 %v4_1000cf0a, %v4_1000cf25
  br label %dec_label_pc_1000cf2e

dec_label_pc_1000cf2e:                            ; preds = %dec_label_pc_1000cede, %dec_label_pc_1000cf00
  %storemerge1.in = phi i3 [ %storemerge1.in.pre, %dec_label_pc_1000cede ], [ %v6_1000cf25, %dec_label_pc_1000cf00 ]
  %storemerge4.in = phi x86_fp80 [ %v1_1000cefb, %dec_label_pc_1000cede ], [ %v7_1000cf28, %dec_label_pc_1000cf00 ]
  %storemerge1 = add i3 %storemerge1.in, 1
  store i3 %storemerge1, i3* @fpu_stat_TOP, align 1
  %v3_1000cf34 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_1000cf3f

dec_label_pc_1000cf3f:                            ; preds = %entry, %dec_label_pc_1000cf2e
  %v0_1000cf42 = phi i32 [ %v3_1000cf34, %dec_label_pc_1000cf2e ], [ %v1_1000ceb6, %entry ]
  %storemerge2 = phi x86_fp80 [ %storemerge4.in, %dec_label_pc_1000cf2e ], [ 0xKC008FA00000000000000, %entry ]
  %storemerge.in = load i3, i3* @fpu_stat_TOP, align 1
  store x86_fp80 %storemerge2, x86_fp80* @st0, align 4
  %storemerge = add i3 %storemerge.in, -1
  store i3 %storemerge, i3* @fpu_stat_TOP, align 1
  %v2_1000cf41 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000cf41, i32* @ebp, align 4
  ret i32 %v0_1000cf42

; uselistorder directives
  uselistorder i32 %v2_1000cf1f, { 1, 0 }
  uselistorder i32 %v1_1000ceb6, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 (i32, i16)* @GetnVForAmpl, { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12 }
  uselistorder i16 %arg2, { 2, 1, 0 }
  uselistorder i32 %arg1, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000cf3f, { 1, 0 }
  uselistorder label %dec_label_pc_1000cf2e, { 1, 0 }
}

define i32 @function_1000cf43(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000cf43:
  %stack_var_-8 = alloca i16, align 2
  %v0_1000cf46 = load i32, i32* @ecx, align 4
  %v5_1000cf46 = trunc i32 %v0_1000cf46 to i16
  store i16 %v5_1000cf46, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_1000cf4b = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000cf53 = mul i32 %v1_1000cf4b, 65536
  %v1_1000cf53.off = or i32 %v1_1000cf53, 65535
  %tmp = icmp ult i32 %v1_1000cf53.off, 131071
  br i1 %tmp, label %dec_label_pc_1000cf60, label %dec_label_pc_1000cf5a

dec_label_pc_1000cf5a:                            ; preds = %dec_label_pc_1000cf43
  %v2_1000cf5a = or i32 %v1_1000cf4b, 65535
  br label %dec_label_pc_1000cfa2

dec_label_pc_1000cf60:                            ; preds = %dec_label_pc_1000cf43
  %v1_1000cf63 = add i32 %arg1, 96
  %v2_1000cf63 = inttoptr i32 %v1_1000cf63 to i16*
  %v3_1000cf63 = load i16, i16* %v2_1000cf63, align 2
  %v4_1000cf63 = zext i16 %v3_1000cf63 to i32
  %v6_1000cf63 = and i32 %v1_1000cf4b, -65536
  %v7_1000cf63 = or i32 %v4_1000cf63, %v6_1000cf63
  store i32 %v7_1000cf63, i32* @eax, align 4
  store i16 %v3_1000cf63, i16* %stack_var_-8, align 2
  %v1_1000cf6e = add i32 %arg1, 100
  %v2_1000cf6e = inttoptr i32 %v1_1000cf6e to i16*
  %v3_1000cf6e = load i16, i16* %v2_1000cf6e, align 2
  %v4_1000cf6e = sext i16 %v3_1000cf6e to i32
  store i32 %v4_1000cf6e, i32* @edx, align 4
  %v1_1000cf72 = icmp eq i16 %v3_1000cf6e, 0
  br i1 %v1_1000cf72, label %dec_label_pc_1000cf90, label %dec_label_pc_1000cf76

dec_label_pc_1000cf76:                            ; preds = %dec_label_pc_1000cf60
  store i32 %arg1, i32* @eax, align 4
  %v1_1000cf79 = add i32 %arg1, 102
  %v2_1000cf79 = inttoptr i32 %v1_1000cf79 to i16*
  %v3_1000cf79 = load i16, i16* %v2_1000cf79, align 2
  %v1_1000cf7d = icmp eq i16 %v3_1000cf79, 0
  br i1 %v1_1000cf7d, label %dec_label_pc_1000cf90, label %dec_label_pc_1000cf81

dec_label_pc_1000cf81:                            ; preds = %dec_label_pc_1000cf76
  store i32 %arg1, i32* @edx, align 4
  %v4_1000cf84 = sext i16 %v3_1000cf63 to i32
  %v8_1000cf84 = or i32 %v4_1000cf84, %arg1
  %v3_1000cf88 = add i32 %arg1, 104
  %v4_1000cf88 = inttoptr i32 %v3_1000cf88 to i16*
  %v5_1000cf88 = load i16, i16* %v4_1000cf88, align 2
  %v6_1000cf88 = sub i16 %v3_1000cf63, %v5_1000cf88
  %v22_1000cf88 = zext i16 %v6_1000cf88 to i32
  %v24_1000cf88 = and i32 %v8_1000cf84, -65536
  %v25_1000cf88 = or i32 %v22_1000cf88, %v24_1000cf88
  store i32 %v25_1000cf88, i32* @eax, align 4
  store i16 %v6_1000cf88, i16* %stack_var_-8, align 2
  br label %dec_label_pc_1000cf90

dec_label_pc_1000cf90:                            ; preds = %dec_label_pc_1000cf76, %dec_label_pc_1000cf60, %dec_label_pc_1000cf81
  %v3_1000cf96 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v3_1000cf9e = load i16, i16* %stack_var_-8, align 2
  %v4_1000cf9e = sext i16 %v3_1000cf9e to i32
  %v7_1000cf9e = and i32 %v3_1000cf96, -65536
  %v8_1000cf9e = or i32 %v4_1000cf9e, %v7_1000cf9e
  br label %dec_label_pc_1000cfa2

dec_label_pc_1000cfa2:                            ; preds = %dec_label_pc_1000cf5a, %dec_label_pc_1000cf90
  %storemerge = phi i32 [ %v2_1000cf5a, %dec_label_pc_1000cf5a ], [ %v8_1000cf9e, %dec_label_pc_1000cf90 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i16 %v3_1000cf63, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1000cf4b, { 2, 1, 0 }
  uselistorder i16* %stack_var_-8, { 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 9, 1, 0, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder label %dec_label_pc_1000cfa2, { 1, 0 }
  uselistorder label %dec_label_pc_1000cf90, { 2, 0, 1 }
}

define i32 @GetnVForAmpl(i32 %arg1, i16 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000cfa6 = load i32, i32* @ebp, align 4
  store i32 %v0_1000cfa6, i32* %stack_var_-4, align 4
  %v4_1000cfa6 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000cfa6, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000cfb0 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000cfb8 = mul i32 %v1_1000cfb0, 65536
  %v1_1000cfb8.off = or i32 %v1_1000cfb8, 65535
  %tmp = icmp ult i32 %v1_1000cfb8.off, 131071
  br i1 %tmp, label %dec_label_pc_1000cfca, label %dec_label_pc_1000d057

dec_label_pc_1000cfca:                            ; preds = %entry
  %v1_1000cfcd = add i32 %arg1, 128
  %v2_1000cfcd = inttoptr i32 %v1_1000cfcd to i16*
  %v3_1000cfcd = load i16, i16* %v2_1000cfcd, align 2
  %v1_1000cfd4 = and i16 %v3_1000cfcd, 32
  %v2_1000cfd4 = icmp eq i16 %v1_1000cfd4, 0
  br i1 %v2_1000cfd4, label %dec_label_pc_1000d026, label %dec_label_pc_1000cfdb

dec_label_pc_1000cfdb:                            ; preds = %dec_label_pc_1000cfca
  %v4_1000cfdb = sext i16 %arg2 to i32
  store i32 %v4_1000cfdb, i32* @ecx, align 4
  %v5_1000cfe2 = sitofp i16 %arg2 to x86_fp80
  %v4_1000cfe5 = fmul x86_fp80 %v5_1000cfe2, 0xK4002A000000000000000
  %v1_1000cff2 = call i32 @function_1000d05b(i32 %arg1)
  %v1_1000cffa = mul i32 %v1_1000cff2, 65536
  %v2_1000cffa = sdiv i32 %v1_1000cffa, 65536
  %v4_1000d000 = sitofp i32 %v2_1000cffa to x86_fp80
  %v4_1000d003 = fdiv x86_fp80 0xK4003A000000000000000, %v4_1000d000
  store x86_fp80 %v4_1000d003, x86_fp80* @st0, align 4
  %v5_1000d00c = fptrunc x86_fp80 %v4_1000d003 to float
  %v6_1000d00c = bitcast float %v5_1000d00c to i32
  %v4_1000d016 = trunc i32 %v6_1000d00c to i8
  %v5_1000d016 = call i32 @function_1000def9(i32 0, i32 1076101120, i8 %v4_1000d016, i32 %v2_1000cffa)
  store i32 %v5_1000d016, i32* @eax, align 4
  %v6_1000d01e = load x86_fp80, x86_fp80* @st0, align 4
  %v7_1000d01e = fmul x86_fp80 %v4_1000cfe5, %v6_1000d01e
  br label %dec_label_pc_1000d046

dec_label_pc_1000d026:                            ; preds = %dec_label_pc_1000cfca
  store i32 %arg1, i32* @edx, align 4
  %v3_1000d02f = call i32 @GetDbmForAmpl(i32 %arg1, i16 %arg2)
  %v0_1000d034 = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000d034 = load x86_fp80, x86_fp80* @st0, align 4
  %v7_1000d034 = add i3 %v0_1000d034, 1
  store i3 %v7_1000d034, i3* @fpu_stat_TOP, align 1
  %tmp18 = fptrunc x86_fp80 %v1_1000d034 to double
  %v4_1000d03b = call i32 @GetnVForDbm(i32 %arg1, double %tmp18)
  store i32 %v4_1000d03b, i32* @eax, align 4
  %v1_1000d043 = load x86_fp80, x86_fp80* @st0, align 4
  br label %dec_label_pc_1000d046

dec_label_pc_1000d046:                            ; preds = %dec_label_pc_1000cfdb, %dec_label_pc_1000d026
  %storemerge4.in = phi x86_fp80 [ %v7_1000d01e, %dec_label_pc_1000cfdb ], [ %v1_1000d043, %dec_label_pc_1000d026 ]
  %storemerge1.in = load i3, i3* @fpu_stat_TOP, align 1
  %storemerge1 = add i3 %storemerge1.in, 1
  store i3 %storemerge1, i3* @fpu_stat_TOP, align 1
  %v3_1000d04c = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_1000d057

dec_label_pc_1000d057:                            ; preds = %entry, %dec_label_pc_1000d046
  %v0_1000d05a = phi i32 [ %v3_1000d04c, %dec_label_pc_1000d046 ], [ %v1_1000cfb0, %entry ]
  %storemerge2 = phi x86_fp80 [ %storemerge4.in, %dec_label_pc_1000d046 ], [ 0xKBFFF8000000000000000, %entry ]
  %storemerge.in = load i3, i3* @fpu_stat_TOP, align 1
  store x86_fp80 %storemerge2, x86_fp80* @st0, align 4
  %storemerge = add i3 %storemerge.in, -1
  store i3 %storemerge, i3* @fpu_stat_TOP, align 1
  %v2_1000d059 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000d059, i32* @ebp, align 4
  ret i32 %v0_1000d05a

; uselistorder directives
  uselistorder i32 %v2_1000cffa, { 1, 0 }
  uselistorder i32 %v1_1000cfb0, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 (i32, i16)* @GetDbmForAmpl, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %arg1, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000d057, { 1, 0 }
  uselistorder label %dec_label_pc_1000d046, { 1, 0 }
}

define i32 @function_1000d05b(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000d05b:
  %stack_var_-8 = alloca i16, align 2
  %v0_1000d05e = load i32, i32* @ecx, align 4
  %v5_1000d05e = trunc i32 %v0_1000d05e to i16
  store i16 %v5_1000d05e, i16* %stack_var_-8, align 2
  store i32 %arg1, i32* @eax, align 4
  %v1_1000d063 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000d06b = mul i32 %v1_1000d063, 65536
  %v1_1000d06b.off = or i32 %v1_1000d06b, 65535
  %tmp = icmp ult i32 %v1_1000d06b.off, 131071
  br i1 %tmp, label %dec_label_pc_1000d078, label %dec_label_pc_1000d072

dec_label_pc_1000d072:                            ; preds = %dec_label_pc_1000d05b
  %v2_1000d072 = or i32 %v1_1000d063, 65535
  br label %dec_label_pc_1000d0d7

dec_label_pc_1000d078:                            ; preds = %dec_label_pc_1000d05b
  %v1_1000d07b = add i32 %arg1, 96
  %v2_1000d07b = inttoptr i32 %v1_1000d07b to i16*
  %v3_1000d07b = load i16, i16* %v2_1000d07b, align 2
  %v4_1000d07b = zext i16 %v3_1000d07b to i32
  %v6_1000d07b = and i32 %v1_1000d063, -65536
  %v7_1000d07b = or i32 %v4_1000d07b, %v6_1000d07b
  store i32 %v7_1000d07b, i32* @eax, align 4
  store i16 %v3_1000d07b, i16* %stack_var_-8, align 2
  %v1_1000d086 = add i32 %arg1, 128
  %v2_1000d086 = inttoptr i32 %v1_1000d086 to i16*
  %v3_1000d086 = load i16, i16* %v2_1000d086, align 2
  %v1_1000d08d = and i16 %v3_1000d086, 64
  %v2_1000d08d = icmp eq i16 %v1_1000d08d, 0
  %v1_1000d092 = icmp eq i1 %v2_1000d08d, false
  br i1 %v1_1000d092, label %dec_label_pc_1000d0a0, label %dec_label_pc_1000d094

dec_label_pc_1000d094:                            ; preds = %dec_label_pc_1000d078
  %v4_1000d094 = sext i16 %v3_1000d07b to i32
  %v8_1000d094 = or i32 %v4_1000d094, %v1_1000d063
  %v2_1000d098 = add i16 %v3_1000d07b, 30
  %v16_1000d098 = zext i16 %v2_1000d098 to i32
  %v18_1000d098 = and i32 %v8_1000d094, -65536
  %v19_1000d098 = or i32 %v18_1000d098, %v16_1000d098
  store i32 %v19_1000d098, i32* @eax, align 4
  store i16 %v2_1000d098, i16* %stack_var_-8, align 2
  br label %dec_label_pc_1000d0a0

dec_label_pc_1000d0a0:                            ; preds = %dec_label_pc_1000d078, %dec_label_pc_1000d094
  %v3_1000d0b9 = phi i16 [ %v3_1000d07b, %dec_label_pc_1000d078 ], [ %v2_1000d098, %dec_label_pc_1000d094 ]
  %v1_1000d0a3 = add i32 %arg1, 100
  %v2_1000d0a3 = inttoptr i32 %v1_1000d0a3 to i16*
  %v3_1000d0a3 = load i16, i16* %v2_1000d0a3, align 2
  %v4_1000d0a3 = sext i16 %v3_1000d0a3 to i32
  store i32 %v4_1000d0a3, i32* @edx, align 4
  %v1_1000d0a7 = icmp eq i16 %v3_1000d0a3, 0
  br i1 %v1_1000d0a7, label %dec_label_pc_1000d0c5, label %dec_label_pc_1000d0ab

dec_label_pc_1000d0ab:                            ; preds = %dec_label_pc_1000d0a0
  store i32 %arg1, i32* @eax, align 4
  %v1_1000d0ae = add i32 %arg1, 102
  %v2_1000d0ae = inttoptr i32 %v1_1000d0ae to i16*
  %v3_1000d0ae = load i16, i16* %v2_1000d0ae, align 2
  %v1_1000d0b2 = icmp eq i16 %v3_1000d0ae, 0
  br i1 %v1_1000d0b2, label %dec_label_pc_1000d0c5, label %dec_label_pc_1000d0b6

dec_label_pc_1000d0b6:                            ; preds = %dec_label_pc_1000d0ab
  store i32 %arg1, i32* @edx, align 4
  %v4_1000d0b9 = sext i16 %v3_1000d0b9 to i32
  %v8_1000d0b9 = or i32 %v4_1000d0b9, %arg1
  %v3_1000d0bd = add i32 %arg1, 104
  %v4_1000d0bd = inttoptr i32 %v3_1000d0bd to i16*
  %v5_1000d0bd = load i16, i16* %v4_1000d0bd, align 2
  %v6_1000d0bd = sub i16 %v3_1000d0b9, %v5_1000d0bd
  %v22_1000d0bd = zext i16 %v6_1000d0bd to i32
  %v24_1000d0bd = and i32 %v8_1000d0b9, -65536
  %v25_1000d0bd = or i32 %v22_1000d0bd, %v24_1000d0bd
  store i32 %v25_1000d0bd, i32* @eax, align 4
  store i16 %v6_1000d0bd, i16* %stack_var_-8, align 2
  br label %dec_label_pc_1000d0c5

dec_label_pc_1000d0c5:                            ; preds = %dec_label_pc_1000d0ab, %dec_label_pc_1000d0a0, %dec_label_pc_1000d0b6
  %v3_1000d0cb = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v3_1000d0d3 = load i16, i16* %stack_var_-8, align 2
  %v4_1000d0d3 = sext i16 %v3_1000d0d3 to i32
  %v7_1000d0d3 = and i32 %v3_1000d0cb, -65536
  %v8_1000d0d3 = or i32 %v4_1000d0d3, %v7_1000d0d3
  br label %dec_label_pc_1000d0d7

dec_label_pc_1000d0d7:                            ; preds = %dec_label_pc_1000d072, %dec_label_pc_1000d0c5
  %storemerge = phi i32 [ %v2_1000d072, %dec_label_pc_1000d072 ], [ %v8_1000d0d3, %dec_label_pc_1000d0c5 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i16 %v3_1000d0b9, { 1, 0 }
  uselistorder i16 %v3_1000d07b, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v1_1000d063, { 1, 2, 3, 0 }
  uselistorder i16* %stack_var_-8, { 4, 3, 2, 1, 0 }
  uselistorder i32 102, { 0, 1, 3, 4, 2, 5, 6, 7, 8 }
  uselistorder i16 64, { 0, 2, 1 }
  uselistorder i32 96, { 1, 2, 5, 6, 3, 4, 7, 0 }
  uselistorder i32 %arg1, { 10, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder label %dec_label_pc_1000d0d7, { 1, 0 }
  uselistorder label %dec_label_pc_1000d0c5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000d0a0, { 1, 0 }
}

define i32 @GetAmplForDbm(i32 %arg1, double %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000d0db = load i32, i32* @ebp, align 4
  store i32 %v0_1000d0db, i32* %stack_var_-4, align 4
  %v4_1000d0db = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000d0db, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000d0e5 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000d0ed = mul i32 %v1_1000d0e5, 65536
  %v2_1000d0ed = sdiv i32 %v1_1000d0ed, 65536
  store i32 %v2_1000d0ed, i32* @ecx, align 4
  %v1_1000d0ed.off = or i32 %v1_1000d0ed, 65535
  %tmp = icmp ult i32 %v1_1000d0ed.off, 131071
  br i1 %tmp, label %dec_label_pc_1000d0fa, label %dec_label_pc_1000d0f4

dec_label_pc_1000d0f4:                            ; preds = %entry
  %v2_1000d0f4 = or i32 %v1_1000d0e5, 65535
  br label %dec_label_pc_1000d16d

dec_label_pc_1000d0fa:                            ; preds = %entry
  %v1_1000d0fd = add i32 %arg1, 128
  %v2_1000d0fd = inttoptr i32 %v1_1000d0fd to i16*
  %v3_1000d0fd = load i16, i16* %v2_1000d0fd, align 2
  %v1_1000d104 = and i16 %v3_1000d0fd, 32
  %v2_1000d104 = icmp eq i16 %v1_1000d104, 0
  br i1 %v2_1000d104, label %dec_label_pc_1000d134, label %dec_label_pc_1000d10b

dec_label_pc_1000d10b:                            ; preds = %dec_label_pc_1000d0fa
  %v4_1000d10f = fptrunc double %arg2 to float
  %v5_1000d10f = bitcast float %v4_1000d10f to i32
  store i32 %v5_1000d10f, i32* @edx, align 4
  %v4_1000d117 = call i32 @GetnVForDbm(i32 %arg1, double %arg2)
  %v0_1000d11f = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000d11f = load x86_fp80, x86_fp80* @st0, align 4
  %v7_1000d11f = add i3 %v0_1000d11f, 1
  store i3 %v7_1000d11f, i3* @fpu_stat_TOP, align 1
  %tmp13 = fptrunc x86_fp80 %v1_1000d11f to double
  %v4_1000d126 = call i32 @GetAmplFornV(i32 %arg1, double %tmp13)
  br label %dec_label_pc_1000d15b

dec_label_pc_1000d134:                            ; preds = %dec_label_pc_1000d0fa
  store i32 %arg1, i32* @edx, align 4
  %v1_1000d138 = call i32 @function_1000cf43(i32 %arg1)
  %v1_1000d140 = mul i32 %v1_1000d138, 65536
  %v2_1000d140 = sdiv i32 %v1_1000d140, 65536
  %v1_1000d152 = call i32 @__ftol(i32 %v2_1000d140)
  br label %dec_label_pc_1000d15b

dec_label_pc_1000d15b:                            ; preds = %dec_label_pc_1000d10b, %dec_label_pc_1000d134
  %storemerge1.in = phi i32 [ %v1_1000d152, %dec_label_pc_1000d134 ], [ %v4_1000d126, %dec_label_pc_1000d10b ]
  %storemerge12 = phi i32 [ %v1_1000d152, %dec_label_pc_1000d134 ], [ %v4_1000d126, %dec_label_pc_1000d10b ]
  store i32 %storemerge12, i32* @eax, align 4
  %v3_1000d161 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v4_1000d169 = and i32 %storemerge1.in, 65535
  %v6_1000d169 = and i32 %v3_1000d161, -65536
  %v7_1000d169 = or i32 %v6_1000d169, %v4_1000d169
  br label %dec_label_pc_1000d16d

dec_label_pc_1000d16d:                            ; preds = %dec_label_pc_1000d0f4, %dec_label_pc_1000d15b
  %storemerge = phi i32 [ %v2_1000d0f4, %dec_label_pc_1000d0f4 ], [ %v7_1000d169, %dec_label_pc_1000d15b ]
  %v2_1000d16f = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000d16f, i32* @ebp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_1000d152, { 1, 0 }
  uselistorder i32 %v4_1000d126, { 1, 0 }
  uselistorder i32 %v1_1000d0e5, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 (i32)* @function_1000cf43, { 1, 0 }
  uselistorder i32 %arg1, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000d16d, { 1, 0 }
  uselistorder label %dec_label_pc_1000d15b, { 1, 0 }
}

define i32 @GetAmplFornV(i32 %arg1, double %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000d171 = load i32, i32* @ebp, align 4
  store i32 %v0_1000d171, i32* %stack_var_-4, align 4
  %v4_1000d171 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000d171, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000d17b = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000d183 = mul i32 %v1_1000d17b, 65536
  %v1_1000d183.off = or i32 %v1_1000d183, 65535
  %tmp = icmp ult i32 %v1_1000d183.off, 131071
  br i1 %tmp, label %dec_label_pc_1000d193, label %dec_label_pc_1000d18a

dec_label_pc_1000d18a:                            ; preds = %entry
  %v2_1000d18a = or i32 %v1_1000d17b, 65535
  br label %dec_label_pc_1000d221

dec_label_pc_1000d193:                            ; preds = %entry
  %v1_1000d196 = add i32 %arg1, 128
  %v2_1000d196 = inttoptr i32 %v1_1000d196 to i16*
  %v3_1000d196 = load i16, i16* %v2_1000d196, align 2
  %v1_1000d19d = and i16 %v3_1000d196, 32
  %v2_1000d19d = icmp eq i16 %v1_1000d19d, 0
  br i1 %v2_1000d19d, label %dec_label_pc_1000d1e8, label %dec_label_pc_1000d1a4

dec_label_pc_1000d1a4:                            ; preds = %dec_label_pc_1000d193
  store i32 %arg1, i32* @ecx, align 4
  %v1_1000d1a8 = call i32 @function_1000d05b(i32 %arg1)
  %v1_1000d1b0 = mul i32 %v1_1000d1a8, 65536
  %v2_1000d1b0 = sdiv i32 %v1_1000d1b0, 65536
  %v4_1000d1b6 = sitofp i32 %v2_1000d1b0 to x86_fp80
  %v4_1000d1b9 = fdiv x86_fp80 0xK4003A000000000000000, %v4_1000d1b6
  %v4_1000d1bf = fadd x86_fp80 %v4_1000d1b9, 0xK3FFF8000000000000000
  store x86_fp80 %v4_1000d1bf, x86_fp80* @st0, align 4
  %v5_1000d1c8 = fptrunc x86_fp80 %v4_1000d1bf to float
  %v6_1000d1c8 = bitcast float %v5_1000d1c8 to i32
  %v4_1000d1d2 = trunc i32 %v6_1000d1c8 to i8
  %v5_1000d1d2 = call i32 @function_1000def9(i32 0, i32 1076101120, i8 %v4_1000d1d2, i32 %v2_1000d1b0)
  %v1_1000d1dd = call i32 @__ftol(i32 0)
  br label %dec_label_pc_1000d20f

dec_label_pc_1000d1e8:                            ; preds = %dec_label_pc_1000d193
  store i32 %arg1, i32* @edx, align 4
  %v4_1000d1f4 = call i32 @GetDbmForVoltage(i32 %arg1, double %arg2)
  %v0_1000d1fc = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000d1fc = load x86_fp80, x86_fp80* @st0, align 4
  %v7_1000d1fc = add i3 %v0_1000d1fc, 1
  store i3 %v7_1000d1fc, i3* @fpu_stat_TOP, align 1
  %tmp14 = fptrunc x86_fp80 %v1_1000d1fc to double
  %v4_1000d203 = call i32 @GetAmplForDbm(i32 %arg1, double %tmp14)
  br label %dec_label_pc_1000d20f

dec_label_pc_1000d20f:                            ; preds = %dec_label_pc_1000d1a4, %dec_label_pc_1000d1e8
  %storemerge1.in = phi i32 [ %v1_1000d1dd, %dec_label_pc_1000d1a4 ], [ %v4_1000d203, %dec_label_pc_1000d1e8 ]
  %storemerge13 = phi i32 [ %v1_1000d1dd, %dec_label_pc_1000d1a4 ], [ %v4_1000d203, %dec_label_pc_1000d1e8 ]
  store i32 %storemerge13, i32* @eax, align 4
  %v3_1000d215 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v4_1000d21d = and i32 %storemerge1.in, 65535
  %v6_1000d21d = and i32 %v3_1000d215, -65536
  %v7_1000d21d = or i32 %v6_1000d21d, %v4_1000d21d
  br label %dec_label_pc_1000d221

dec_label_pc_1000d221:                            ; preds = %dec_label_pc_1000d18a, %dec_label_pc_1000d20f
  %storemerge = phi i32 [ %v2_1000d18a, %dec_label_pc_1000d18a ], [ %v7_1000d21d, %dec_label_pc_1000d20f ]
  %v2_1000d223 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000d223, i32* @ebp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_1000d1b0, { 1, 0 }
  uselistorder i32 %v1_1000d17b, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 (i32)* @function_1000d05b, { 1, 0 }
  uselistorder i16 32, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %arg1, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000d221, { 1, 0 }
  uselistorder label %dec_label_pc_1000d20f, { 1, 0 }
}

define i32 @GetDbmForVoltage(i32 %arg1, double %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000d225 = load i32, i32* @ebp, align 4
  store i32 %v0_1000d225, i32* %stack_var_-4, align 4
  %v4_1000d225 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000d225, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000d22f = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000d237 = mul i32 %v1_1000d22f, 65536
  %v1_1000d237.off = or i32 %v1_1000d237, 65535
  %tmp = icmp ult i32 %v1_1000d237.off, 131071
  br i1 %tmp, label %dec_label_pc_1000d246, label %dec_label_pc_1000d23e

dec_label_pc_1000d23e:                            ; preds = %entry
  %v2_1000d23e = load i3, i3* @fpu_stat_TOP, align 1
  %v3_1000d23e = add i3 %v2_1000d23e, -1
  store x86_fp80 0xKBFFF8000000000000000, x86_fp80* @st0, align 4
  store i3 %v3_1000d23e, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000d2ad

dec_label_pc_1000d246:                            ; preds = %entry
  %v3_1000d251 = and i32 %v1_1000d22f, 16640
  %v4_1000d251 = icmp eq i32 %v3_1000d251, 0
  br i1 %v4_1000d251, label %dec_label_pc_1000d25e, label %dec_label_pc_1000d256

dec_label_pc_1000d256:                            ; preds = %dec_label_pc_1000d246
  %v5_1000d246 = load i3, i3* @fpu_stat_TOP, align 1
  %v6_1000d25e = add i3 %v5_1000d246, -1
  store x86_fp80 0xKC008FA00000000000000, x86_fp80* @st0, align 4
  store i3 %v6_1000d25e, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000d2ad

dec_label_pc_1000d25e:                            ; preds = %dec_label_pc_1000d246
  %v4_1000d246 = fpext double %arg2 to x86_fp80
  %v4_1000d261 = fdiv x86_fp80 0xK401CEE6B280000000000, %v4_1000d246
  %v7_1000d26a = fmul x86_fp80 %v4_1000d261, %v4_1000d261
  %v1_1000d270 = add i32 %arg1, 176
  %v2_1000d270 = inttoptr i32 %v1_1000d270 to i16*
  %v3_1000d270 = load i16, i16* %v2_1000d270, align 2
  %v4_1000d270 = sext i16 %v3_1000d270 to i32
  %v4_1000d27a = sitofp i16 %v3_1000d270 to x86_fp80
  %v4_1000d27d = fmul x86_fp80 %v4_1000d27a, 0xK3FF583126E978D4FE000
  store x86_fp80 %v4_1000d27d, x86_fp80* @st1, align 4
  %v4_1000d283 = fdiv x86_fp80 %v7_1000d26a, %v4_1000d27d
  store x86_fp80 %v4_1000d283, x86_fp80* @st0, align 4
  store i1 false, i1* @zf, align 1
  %v5_1000d288 = fptrunc x86_fp80 %v4_1000d283 to float
  %v6_1000d288 = bitcast float %v5_1000d288 to i32
  %v2_1000d28b = call i32 @function_1000e114(i32 %v6_1000d288, i32 %v4_1000d270)
  store i32 %v2_1000d28b, i32* @eax, align 4
  %v3_1000d293 = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000d293 = fmul x86_fp80 %v3_1000d293, 0xK4002A000000000000000
  %v0_1000d299 = load i3, i3* @fpu_stat_TOP, align 1
  %v3_1000d2a2 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  store x86_fp80 %v4_1000d293, x86_fp80* @st0, align 4
  store i3 %v0_1000d299, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000d2ad

dec_label_pc_1000d2ad:                            ; preds = %dec_label_pc_1000d256, %dec_label_pc_1000d23e, %dec_label_pc_1000d25e
  %v0_1000d2b0 = phi i32 [ %v1_1000d22f, %dec_label_pc_1000d256 ], [ %v1_1000d22f, %dec_label_pc_1000d23e ], [ %v3_1000d2a2, %dec_label_pc_1000d25e ]
  %v2_1000d2af = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000d2af, i32* @ebp, align 4
  ret i32 %v0_1000d2b0

; uselistorder directives
  uselistorder i32 %v1_1000d22f, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder x86_fp80 0xKC008FA00000000000000, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000d2ad, { 2, 0, 1 }
}

define i32 @GetnVForDbm(i32 %arg1, double %arg2) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca double, align 8
  %stack_var_-4 = alloca i32, align 4
  %v0_1000d2b1 = load i32, i32* @ebp, align 4
  store i32 %v0_1000d2b1, i32* %stack_var_-4, align 4
  %v4_1000d2b1 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000d2b1, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000d2bb = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000d2c3 = mul i32 %v1_1000d2bb, 65536
  %v1_1000d2c3.off = or i32 %v1_1000d2c3, 65535
  %tmp = icmp ult i32 %v1_1000d2c3.off, 131071
  br i1 %tmp, label %dec_label_pc_1000d2d2, label %dec_label_pc_1000d337

dec_label_pc_1000d2d2:                            ; preds = %entry
  %v1_1000d2d5 = add i32 %arg1, 176
  %v2_1000d2d5 = inttoptr i32 %v1_1000d2d5 to i16*
  %v3_1000d2d5 = load i16, i16* %v2_1000d2d5, align 2
  %v4_1000d2df = sitofp i16 %v3_1000d2d5 to x86_fp80
  %v4_1000d2e2 = fdiv x86_fp80 0xK4008FA00000000000000, %v4_1000d2df
  %tmp16 = fptrunc x86_fp80 %v4_1000d2e2 to double
  store double %tmp16, double* %stack_var_-32, align 8
  %v4_1000d2eb = fpext double %arg2 to x86_fp80
  %v4_1000d2ee = fdiv x86_fp80 0xK4002A000000000000000, %v4_1000d2eb
  store x86_fp80 %v4_1000d2ee, x86_fp80* @st0, align 4
  %v5_1000d2f7 = fptrunc x86_fp80 %v4_1000d2ee to float
  %v6_1000d2f7 = bitcast float %v5_1000d2f7 to i32
  %tmp17 = fptrunc x86_fp80 %v4_1000d2e2 to float
  %v5_1000d301 = bitcast float %tmp17 to i32
  %v7_1000d301 = trunc i32 %v6_1000d2f7 to i8
  %v8_1000d301 = call i32 @function_1000def9(i32 0, i32 1076101120, i8 %v7_1000d301, i32 %v5_1000d301)
  %v4_1000d309 = load double, double* %stack_var_-32, align 8
  %v9_1000d309 = fpext double %v4_1000d309 to x86_fp80
  %v10_1000d309 = load x86_fp80, x86_fp80* @st0, align 4
  %v11_1000d309 = fmul x86_fp80 %v9_1000d309, %v10_1000d309
  store x86_fp80 %v11_1000d309, x86_fp80* @st0, align 4
  store i1 false, i1* @zf, align 1
  %v0_1000d30f = load i3, i3* @fpu_stat_TOP, align 1
  %v5_1000d30f = fptrunc x86_fp80 %v11_1000d309 to float
  %v6_1000d30f = bitcast float %v5_1000d30f to i32
  %v1_1000d312 = call i32 @function_1000e1e4(i32 %v6_1000d30f)
  store i32 %v1_1000d312, i32* @eax, align 4
  %v3_1000d31d = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000d31d = fmul x86_fp80 %v3_1000d31d, 0xK401CEE6B280000000000
  %v6_1000d323 = add i3 %v0_1000d30f, 2
  store i3 %v6_1000d323, i3* @fpu_stat_TOP, align 1
  %v3_1000d32c = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  br label %dec_label_pc_1000d337

dec_label_pc_1000d337:                            ; preds = %entry, %dec_label_pc_1000d2d2
  %v0_1000d33a = phi i32 [ %v3_1000d32c, %dec_label_pc_1000d2d2 ], [ %v1_1000d2bb, %entry ]
  %storemerge2 = phi x86_fp80 [ %v4_1000d31d, %dec_label_pc_1000d2d2 ], [ 0xKBFFF8000000000000000, %entry ]
  %storemerge.in = load i3, i3* @fpu_stat_TOP, align 1
  store x86_fp80 %storemerge2, x86_fp80* @st0, align 4
  %storemerge = add i3 %storemerge.in, -1
  store i3 %storemerge, i3* @fpu_stat_TOP, align 1
  %v2_1000d339 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000d339, i32* @ebp, align 4
  ret i32 %v0_1000d33a

; uselistorder directives
  uselistorder i32 %v1_1000d2bb, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder double* %stack_var_-32, { 1, 0 }
  uselistorder x86_fp80 0xKBFFF8000000000000000, { 0, 4, 1, 2, 3, 5, 6, 7, 8, 9 }
  uselistorder i32 (i32, i32, i8, i32)* @function_1000def9, { 2, 0, 1 }
  uselistorder x86_fp80 0xK4008FA00000000000000, { 0, 2, 1, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 176, { 1, 2, 0, 3 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000d337, { 1, 0 }
}

define i32 @FindEquivDbmRef(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = call i16 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_1000d33b = load i32, i32* @ebp, align 4
  store i32 %v0_1000d33b, i32* %stack_var_-4, align 4
  %v4_1000d33b = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000d33b, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000d345 = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000d34d = mul i32 %v1_1000d345, 65536
  %v1_1000d34d.off = or i32 %v1_1000d34d, 65535
  %tmp19 = icmp ult i32 %v1_1000d34d.off, 131071
  br i1 %tmp19, label %dec_label_pc_1000d35a, label %dec_label_pc_1000d354

dec_label_pc_1000d354:                            ; preds = %entry
  %v1_1000d354 = and i32 %v1_1000d345, -65536
  %v2_1000d354 = or i32 %v1_1000d354, 64536
  br label %dec_label_pc_1000d3b0

dec_label_pc_1000d35a:                            ; preds = %entry
  %v2_1000d366 = sext i32 %arg2 to i64
  %v3_1000d366 = bitcast i64 %v2_1000d366 to double
  %v4_1000d366 = call i32 @GetDbmForVoltage(i32 %arg1, double %v3_1000d366)
  %v3_1000d379 = and i32 %v4_1000d366, 256
  %v4_1000d379 = icmp eq i32 %v3_1000d379, 0
  %v1_1000d37c = icmp eq i1 %v4_1000d379, false
  br i1 %v1_1000d37c, label %dec_label_pc_1000d392, label %dec_label_pc_1000d37e

dec_label_pc_1000d37e:                            ; preds = %dec_label_pc_1000d35a
  %v1_1000d36e = load x86_fp80, x86_fp80* @st0, align 4
  %tmp18 = fptrunc x86_fp80 %v1_1000d36e to double
  %v1_1000d387 = fptrunc double %tmp18 to float
  %v2_1000d387 = bitcast float %v1_1000d387 to i32
  %v3_1000d387 = call i32 @__ftol(i32 %v2_1000d387)
  br label %dec_label_pc_1000d39e

dec_label_pc_1000d392:                            ; preds = %dec_label_pc_1000d35a
  %v1_1000d395 = sext i16 %tmp to i32
  %v2_1000d395 = call i32 @__ftol(i32 %v1_1000d395)
  br label %dec_label_pc_1000d39e

dec_label_pc_1000d39e:                            ; preds = %dec_label_pc_1000d37e, %dec_label_pc_1000d392
  %storemerge6 = phi i32 [ %v3_1000d387, %dec_label_pc_1000d37e ], [ %v2_1000d395, %dec_label_pc_1000d392 ]
  store i32 %storemerge6, i32* @eax, align 4
  store i32 %arg1, i32* @edx, align 4
  %v3_1000d3a4 = call i32 @SetFuncStatusCode(i32 %arg1, i16 0)
  %v4_1000d3ac = and i32 %storemerge6, 65535
  %v6_1000d3ac = and i32 %v3_1000d3a4, -65536
  %v7_1000d3ac = or i32 %v6_1000d3ac, %v4_1000d3ac
  br label %dec_label_pc_1000d3b0

dec_label_pc_1000d3b0:                            ; preds = %dec_label_pc_1000d354, %dec_label_pc_1000d39e
  %storemerge = phi i32 [ %v2_1000d354, %dec_label_pc_1000d354 ], [ %v7_1000d3ac, %dec_label_pc_1000d39e ]
  %v2_1000d3b2 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000d3b2, i32* @ebp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_1000d345, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 (i32, i16)* @SetFuncStatusCode, { 90, 128, 91, 31, 32, 52, 53, 54, 55, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 50, 51, 56, 57, 58, 60, 61, 44, 45, 136, 137, 138, 139, 46, 47, 48, 140, 141, 142, 59, 62, 0, 63, 1, 2, 64, 3, 4, 65, 66, 67, 68, 69, 5, 130, 6, 22, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 70, 71, 72, 18, 73, 74, 75, 76, 19, 20, 21, 23, 24, 25, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 129, 92, 100, 101, 94, 95, 93, 96, 97, 98, 134, 99, 102, 103, 104, 105, 106, 107, 117, 108, 109, 110, 111, 120, 121, 112, 113, 114, 115, 26, 116, 122, 27, 28, 29, 30, 123, 118, 119, 124, 126, 127, 131, 132, 143, 144, 145, 135, 133, 125, 146 }
  uselistorder i32 (i32)* @__ftol, { 7, 6, 10, 9, 8, 14, 13, 12, 11, 1, 0, 5, 4, 3, 2 }
  uselistorder i32 (i32, double)* @GetDbmForVoltage, { 2, 0, 1 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000d3b0, { 1, 0 }
  uselistorder label %dec_label_pc_1000d39e, { 1, 0 }
}

define i32 @GetRBWwide(i16 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000d3b4 = load i32, i32* @ebp, align 4
  store i32 %v0_1000d3b4, i32* %stack_var_-4, align 4
  %v4_1000d3b4 = ptrtoint i32* %stack_var_-4 to i32
  %v4_1000d3dd = sext i16 %arg1 to i32
  %v3_1000d3e1 = icmp slt i16 %arg1, 0
  %v2_1000d3e3 = icmp eq i1 %v3_1000d3e1, false
  br i1 %v2_1000d3e3, label %dec_label_pc_1000d3e5, label %dec_label_pc_1000d402

dec_label_pc_1000d3e5:                            ; preds = %entry
  %v6_1000d3e9 = sub nsw i32 3, %v4_1000d3dd
  %v7_1000d3e9 = and i32 %v6_1000d3e9, %v4_1000d3dd
  %v8_1000d3e9 = icmp slt i32 %v7_1000d3e9, 0
  %v9_1000d3e9 = icmp eq i16 %arg1, 4
  %v10_1000d3e9 = icmp slt i16 %arg1, 4
  %v3_1000d3ec = icmp eq i1 %v10_1000d3e9, %v8_1000d3e9
  %v4_1000d3ec = icmp eq i1 %v9_1000d3e9, false
  %v5_1000d3ec = and i1 %v4_1000d3ec, %v3_1000d3ec
  br i1 %v5_1000d3ec, label %dec_label_pc_1000d402, label %dec_label_pc_1000d3ee

dec_label_pc_1000d3ee:                            ; preds = %dec_label_pc_1000d3e5
  %v2_1000d3f2 = mul nsw i32 %v4_1000d3dd, 4
  %v3_1000d3f2 = add i32 %v2_1000d3f2, -24
  %v4_1000d3f2 = add i32 %v3_1000d3f2, %v4_1000d3b4
  %v5_1000d3f2 = inttoptr i32 %v4_1000d3f2 to i32*
  %v6_1000d3f2 = load i32, i32* %v5_1000d3f2, align 4
  br label %dec_label_pc_1000d402

dec_label_pc_1000d402:                            ; preds = %dec_label_pc_1000d3e5, %entry, %dec_label_pc_1000d3ee
  %storemerge = phi i32 [ %v6_1000d3f2, %dec_label_pc_1000d3ee ], [ -3, %entry ], [ -3, %dec_label_pc_1000d3e5 ]
  store i32 %v0_1000d3b4, i32* @ebp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_1000d3dd, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i16 4, { 14, 0, 15, 1, 2, 3, 4, 5, 16, 6, 7, 8, 9, 10, 11, 17, 12, 21, 18, 13, 20, 19 }
  uselistorder i16 %arg1, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_1000d402, { 2, 0, 1 }
}

define i32 @function_1000d409(i16 %arg1) local_unnamed_addr {
dec_label_pc_1000d409:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000d409 = load i32, i32* @ebp, align 4
  store i32 %v0_1000d409, i32* %stack_var_-4, align 4
  %v4_1000d409 = ptrtoint i32* %stack_var_-4 to i32
  %v4_1000d447 = sext i16 %arg1 to i32
  %v3_1000d44b = icmp slt i16 %arg1, 0
  %v2_1000d44d = icmp eq i1 %v3_1000d44b, false
  br i1 %v2_1000d44d, label %dec_label_pc_1000d44f, label %dec_label_pc_1000d46c

dec_label_pc_1000d44f:                            ; preds = %dec_label_pc_1000d409
  %v6_1000d453 = sub nsw i32 6, %v4_1000d447
  %v7_1000d453 = and i32 %v6_1000d453, %v4_1000d447
  %v8_1000d453 = icmp slt i32 %v7_1000d453, 0
  %v9_1000d453 = icmp eq i16 %arg1, 7
  %v10_1000d453 = icmp slt i16 %arg1, 7
  %v3_1000d456 = icmp eq i1 %v10_1000d453, %v8_1000d453
  %v4_1000d456 = icmp eq i1 %v9_1000d453, false
  %v5_1000d456 = and i1 %v4_1000d456, %v3_1000d456
  br i1 %v5_1000d456, label %dec_label_pc_1000d46c, label %dec_label_pc_1000d458

dec_label_pc_1000d458:                            ; preds = %dec_label_pc_1000d44f
  %v2_1000d45c = mul nsw i32 %v4_1000d447, 4
  %v3_1000d45c = add i32 %v2_1000d45c, -36
  %v4_1000d45c = add i32 %v3_1000d45c, %v4_1000d409
  %v5_1000d45c = inttoptr i32 %v4_1000d45c to i32*
  %v6_1000d45c = load i32, i32* %v5_1000d45c, align 4
  br label %dec_label_pc_1000d46c

dec_label_pc_1000d46c:                            ; preds = %dec_label_pc_1000d44f, %dec_label_pc_1000d409, %dec_label_pc_1000d458
  %storemerge = phi i32 [ %v6_1000d45c, %dec_label_pc_1000d458 ], [ -1, %dec_label_pc_1000d409 ], [ -1, %dec_label_pc_1000d44f ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_1000d447, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i16 7, { 9, 2, 0, 10, 3, 4, 11, 5, 6, 7, 13, 8, 1, 12 }
  uselistorder i16 %arg1, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_1000d46c, { 2, 0, 1 }
}

define i32 @function_1000d473(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000d473:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000d473 = load i32, i32* @ebp, align 4
  store i32 %v0_1000d473, i32* %stack_var_-4, align 4
  %v4_1000d473 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000d473, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v1_1000d47d = call i32 @TestFuncStatusAndPtr(i32 %arg1)
  %v1_1000d485 = mul i32 %v1_1000d47d, 65536
  %v1_1000d485.off = or i32 %v1_1000d485, 65535
  %tmp = icmp ult i32 %v1_1000d485.off, 131071
  br i1 %tmp, label %dec_label_pc_1000d48e, label %dec_label_pc_1000d4b7

dec_label_pc_1000d48e:                            ; preds = %dec_label_pc_1000d473
  %v1_1000d492 = trunc i32 %arg1 to i16
  %v2_1000d492 = call i32 @CheckSWStatus(i16 %v1_1000d492)
  %sext = mul i32 %v2_1000d492, 65536
  %v2_1000d4a2 = sdiv i32 %sext, 65536
  %v4_1000d4a2 = call i32 @CheckHWStatus(i16 %v1_1000d492, i32 %v2_1000d4a2)
  br label %dec_label_pc_1000d4b7

dec_label_pc_1000d4b7:                            ; preds = %dec_label_pc_1000d473, %dec_label_pc_1000d48e
  %v0_1000d4ba = phi i32 [ %v1_1000d47d, %dec_label_pc_1000d473 ], [ %v4_1000d4a2, %dec_label_pc_1000d48e ]
  ret i32 %v0_1000d4ba

; uselistorder directives
  uselistorder i32 %v1_1000d47d, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 (i16)* @CheckSWStatus, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 (i32)* @TestFuncStatusAndPtr, { 115, 104, 25, 105, 181, 180, 164, 163, 162, 161, 114, 177, 176, 175, 174, 173, 172, 171, 170, 165, 159, 169, 158, 168, 167, 166, 157, 156, 178, 113, 112, 111, 110, 109, 108, 179, 107, 106, 211, 210, 209, 208, 207, 206, 205, 155, 204, 154, 153, 152, 151, 203, 202, 201, 150, 200, 199, 149, 148, 147, 198, 146, 17, 197, 189, 145, 16, 196, 195, 194, 193, 192, 144, 191, 140, 139, 190, 188, 138, 137, 136, 135, 134, 37, 133, 132, 57, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 56, 117, 116, 24, 103, 102, 85, 87, 100, 101, 99, 98, 97, 96, 95, 94, 55, 93, 92, 10, 91, 90, 86, 89, 88, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 54, 74, 73, 72, 71, 70, 69, 68, 67, 44, 66, 45, 65, 64, 63, 62, 61, 60, 59, 187, 186, 36, 58, 43, 48, 47, 46, 41, 185, 40, 141, 39, 38, 35, 33, 32, 31, 143, 7, 49, 15, 30, 142, 29, 28, 27, 34, 26, 3, 14, 2, 1, 160, 9, 0, 13, 12, 42, 23, 22, 21, 20, 19, 184, 183, 18, 11, 182, 53, 52, 51, 50, 8, 6, 5, 4 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1000d4b7, { 1, 0 }
}

define i32 @InitTimeoutLoop() local_unnamed_addr {
entry:
  %v0_1000d4bb = load i32, i32* @ebp, align 4
  %v1_1000d4be = call i32 @IeTimer(i32 %v0_1000d4bb)
  store i32 %v1_1000d4be, i32* @global_var_1001b410.90, align 16
  ret i32 %v1_1000d4be

; uselistorder directives
  uselistorder i32 (i32)* @IeTimer, { 2, 1, 0 }
}

define i32 @TestTimeoutDone(i32 %arg1) local_unnamed_addr {
entry:
  %v0_1000d4cd = load i32, i32* @global_var_1001b410.90, align 16
  %v1_1000d4d3 = call i32 @IeTimerFrom(i32 %v0_1000d4cd)
  %v7_1000d4de = icmp sgt i32 %v1_1000d4d3, %arg1
  br i1 %v7_1000d4de, label %dec_label_pc_1000d4e0, label %dec_label_pc_1000d4e6

dec_label_pc_1000d4e0:                            ; preds = %entry
  %v1_1000d4e0 = and i32 %v1_1000d4d3, -65536
  %v2_1000d4e0 = or i32 %v1_1000d4e0, 1
  br label %dec_label_pc_1000d4e9

dec_label_pc_1000d4e6:                            ; preds = %entry
  %v12_1000d4e6 = and i32 %v1_1000d4d3, -65536
  br label %dec_label_pc_1000d4e9

dec_label_pc_1000d4e9:                            ; preds = %dec_label_pc_1000d4e0, %dec_label_pc_1000d4e6
  %storemerge = phi i32 [ %v2_1000d4e0, %dec_label_pc_1000d4e0 ], [ %v12_1000d4e6, %dec_label_pc_1000d4e6 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_1000d4d3, { 1, 2, 0 }
  uselistorder i32 (i32)* @IeTimerFrom, { 1, 0 }
  uselistorder label %dec_label_pc_1000d4e9, { 1, 0 }
}

define i32 @function_1000d4eb() local_unnamed_addr {
dec_label_pc_1000d4eb:
  %v0_1000d4eb = call i32 @function_1000d503()
  %v0_1000d4f0 = call i32 @__ms_p5_mp_test_fdiv()
  store i32 %v0_1000d4f0, i32* @global_var_1001b41c.91, align 4
  %v0_1000d4fa = call i32 @function_1000e433()
  ret i32 %v0_1000d4fa
}

define i32 @function_1000d503() local_unnamed_addr {
dec_label_pc_1000d503:
  store i32 268494086, i32* @global_var_100183c0.92, align 64
  store i32 268494940, i32* @global_var_100183bc.93, align 4
  store i32 268494188, i32* @global_var_100183c4.94, align 4
  store i32 268493996, i32* @global_var_100183c8.95, align 8
  store i32 268494164, i32* @global_var_100183cc.96, align 4
  store i32 268494940, i32* @global_var_100183d0.97, align 16
  ret i32 268494940
}

declare i32 @__ftol(i32) local_unnamed_addr

define i32 @function_1000d563(i32 %arg1) local_unnamed_addr {
entry:
  %v2_1000d567 = icmp slt i32 %arg1, 0
  %v2_1000d569 = icmp eq i1 %v2_1000d567, false
  br i1 %v2_1000d569, label %dec_label_pc_1000d56d, label %dec_label_pc_1000d56b

dec_label_pc_1000d56b:                            ; preds = %entry
  %v1_1000d56b = sub i32 0, %arg1
  br label %dec_label_pc_1000d56d

dec_label_pc_1000d56d:                            ; preds = %entry, %dec_label_pc_1000d56b
  %v0_1000d56d = phi i32 [ %arg1, %entry ], [ %v1_1000d56b, %dec_label_pc_1000d56b ]
  ret i32 %v0_1000d56d

; uselistorder directives
  uselistorder label %dec_label_pc_1000d56d, { 1, 0 }
}

define i32 @function_1000d570(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000d570:
  %v0_1000d570 = load i32, i32* @edi, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_1000d575 = call i32 @function_1000d5e1(i32 %v0_1000d570)
  ret i32 %v1_1000d575
}

define i32 @function_1000d580(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000d580:
  %stack_var_-4 = alloca i32, align 4
  %v4_1000d580 = ptrtoint i8* %arg1 to i32
  %v0_1000d584 = load i32, i32* @edi, align 4
  store i32 %v0_1000d584, i32* %stack_var_-4, align 4
  %v1_1000d585 = and i32 %v4_1000d580, 3
  %v2_1000d585 = icmp eq i32 %v1_1000d585, 0
  br i1 %v2_1000d585, label %dec_label_pc_1000d59c, label %dec_label_pc_1000d58d.preheader

dec_label_pc_1000d58d.preheader:                  ; preds = %dec_label_pc_1000d580
  %v4_1000d58d.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_1000d58d

dec_label_pc_1000d58d:                            ; preds = %dec_label_pc_1000d58d.preheader, %dec_label_pc_1000d594
  %v4_1000d58d = phi i32 [ %v4_1000d58d.pre, %dec_label_pc_1000d58d.preheader ], [ %v6_1000d58d, %dec_label_pc_1000d594 ]
  %v0_1000d58f = phi i32 [ %v4_1000d580, %dec_label_pc_1000d58d.preheader ], [ %v1_1000d58f, %dec_label_pc_1000d594 ]
  %v1_1000d58d = inttoptr i32 %v0_1000d58f to i8*
  %v2_1000d58d = load i8, i8* %v1_1000d58d, align 1
  %v1_1000d58f = add i32 %v0_1000d58f, 1
  %v4_1000d590 = icmp eq i8 %v2_1000d58d, 0
  br i1 %v4_1000d590, label %dec_label_pc_1000d5cf, label %dec_label_pc_1000d594

dec_label_pc_1000d594:                            ; preds = %dec_label_pc_1000d58d
  %v3_1000d58d = zext i8 %v2_1000d58d to i32
  %v5_1000d58d = and i32 %v4_1000d58d, -256
  %v6_1000d58d = or i32 %v3_1000d58d, %v5_1000d58d
  %v1_1000d594 = and i32 %v1_1000d58f, 3
  %v2_1000d594 = icmp eq i32 %v1_1000d594, 0
  %v1_1000d59a = icmp eq i1 %v2_1000d594, false
  br i1 %v1_1000d59a, label %dec_label_pc_1000d58d, label %dec_label_pc_1000d59c

dec_label_pc_1000d59c:                            ; preds = %dec_label_pc_1000d5c6, %dec_label_pc_1000d59c, %dec_label_pc_1000d580, %dec_label_pc_1000d594
  %v0_1000d5aa = phi i32 [ %v4_1000d580, %dec_label_pc_1000d580 ], [ %v1_1000d58f, %dec_label_pc_1000d594 ], [ %v1_1000d5aa, %dec_label_pc_1000d59c ], [ %v1_1000d5aa, %dec_label_pc_1000d5c6 ]
  %v1_1000d59c = inttoptr i32 %v0_1000d5aa to i32*
  %v2_1000d59c = load i32, i32* %v1_1000d59c, align 4
  %v2_1000d5a3 = add i32 %v2_1000d59c, 2130640639
  store i32 %v2_1000d5a3, i32* @edx, align 4
  %v1_1000d5a5 = sub i32 -1, %v2_1000d59c
  %v2_1000d5a8 = xor i32 %v2_1000d5a3, %v1_1000d5a5
  %v1_1000d5aa = add i32 %v0_1000d5aa, 4
  store i32 %v1_1000d5aa, i32* @ecx, align 4
  %v1_1000d5ad = and i32 %v2_1000d5a8, -2130640640
  %v2_1000d5ad = icmp eq i32 %v1_1000d5ad, 0
  br i1 %v2_1000d5ad, label %dec_label_pc_1000d59c, label %dec_label_pc_1000d5b4

dec_label_pc_1000d5b4:                            ; preds = %dec_label_pc_1000d59c
  %v3_1000d5b4 = load i32, i32* %v1_1000d59c, align 4
  %v3_1000d5b7 = trunc i32 %v3_1000d5b4 to i8
  %v4_1000d5b7 = icmp eq i8 %v3_1000d5b7, 0
  br i1 %v4_1000d5b7, label %dec_label_pc_1000d5de.loopexit, label %dec_label_pc_1000d5bb

dec_label_pc_1000d5bb:                            ; preds = %dec_label_pc_1000d5b4
  %tmp22 = and i32 %v3_1000d5b4, 65280
  %v5_1000d5bb = icmp eq i32 %tmp22, 0
  br i1 %v5_1000d5bb, label %dec_label_pc_1000d5d9.loopexit, label %dec_label_pc_1000d5bf

dec_label_pc_1000d5bf:                            ; preds = %dec_label_pc_1000d5bb
  %v1_1000d5bf = and i32 %v3_1000d5b4, 16711680
  %v2_1000d5bf = icmp eq i32 %v1_1000d5bf, 0
  br i1 %v2_1000d5bf, label %dec_label_pc_1000d5d4.loopexit, label %dec_label_pc_1000d5c6

dec_label_pc_1000d5c6:                            ; preds = %dec_label_pc_1000d5bf
  %v2_1000d5c6 = icmp ult i32 %v3_1000d5b4, 16777216
  br i1 %v2_1000d5c6, label %dec_label_pc_1000d5cf.loopexit, label %dec_label_pc_1000d59c

dec_label_pc_1000d5cf.loopexit:                   ; preds = %dec_label_pc_1000d5c6
  br label %dec_label_pc_1000d5cf

dec_label_pc_1000d5cf:                            ; preds = %dec_label_pc_1000d58d, %dec_label_pc_1000d5cf.loopexit
  %v0_1000d5cf = phi i32 [ %v1_1000d5aa, %dec_label_pc_1000d5cf.loopexit ], [ %v1_1000d58f, %dec_label_pc_1000d58d ]
  %v1_1000d5cf = add i32 %v0_1000d5cf, -1
  store i32 %v1_1000d5cf, i32* @edi, align 4
  %v1_1000d5d2 = call i32 @function_1000d5e1(i32 %v0_1000d584)
  %v0_1000d5d4.pre = load i32, i32* @ecx, align 4
  %v0_1000d5d7.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1000d5d4

dec_label_pc_1000d5d4.loopexit:                   ; preds = %dec_label_pc_1000d5bf
  br label %dec_label_pc_1000d5d4

dec_label_pc_1000d5d4:                            ; preds = %dec_label_pc_1000d5d4.loopexit, %dec_label_pc_1000d5cf
  %v0_1000d5d7 = phi i32 [ %v0_1000d584, %dec_label_pc_1000d5d4.loopexit ], [ %v0_1000d5d7.pre, %dec_label_pc_1000d5cf ]
  %v0_1000d5d4 = phi i32 [ %v1_1000d5aa, %dec_label_pc_1000d5d4.loopexit ], [ %v0_1000d5d4.pre, %dec_label_pc_1000d5cf ]
  %v1_1000d5d4 = add i32 %v0_1000d5d4, -2
  store i32 %v1_1000d5d4, i32* @edi, align 4
  %v1_1000d5d7 = call i32 @function_1000d5e1(i32 %v0_1000d5d7)
  %v0_1000d5d9.pre = load i32, i32* @ecx, align 4
  %v0_1000d5dc.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1000d5d9

dec_label_pc_1000d5d9.loopexit:                   ; preds = %dec_label_pc_1000d5bb
  br label %dec_label_pc_1000d5d9

dec_label_pc_1000d5d9:                            ; preds = %dec_label_pc_1000d5d9.loopexit, %dec_label_pc_1000d5d4
  %v0_1000d5dc = phi i32 [ %v0_1000d584, %dec_label_pc_1000d5d9.loopexit ], [ %v0_1000d5dc.pre, %dec_label_pc_1000d5d4 ]
  %v0_1000d5d9 = phi i32 [ %v1_1000d5aa, %dec_label_pc_1000d5d9.loopexit ], [ %v0_1000d5d9.pre, %dec_label_pc_1000d5d4 ]
  %v1_1000d5d9 = add i32 %v0_1000d5d9, -3
  store i32 %v1_1000d5d9, i32* @edi, align 4
  %v1_1000d5dc = call i32 @function_1000d5e1(i32 %v0_1000d5dc)
  %v0_1000d5de.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000d5de

dec_label_pc_1000d5de.loopexit:                   ; preds = %dec_label_pc_1000d5b4
  br label %dec_label_pc_1000d5de

dec_label_pc_1000d5de:                            ; preds = %dec_label_pc_1000d5de.loopexit, %dec_label_pc_1000d5d9
  %v2_1000d5de = phi i32 [ %v3_1000d5b4, %dec_label_pc_1000d5de.loopexit ], [ %v1_1000d5dc, %dec_label_pc_1000d5d9 ]
  %v0_1000d5de = phi i32 [ %v1_1000d5aa, %dec_label_pc_1000d5de.loopexit ], [ %v0_1000d5de.pre, %dec_label_pc_1000d5d9 ]
  %v1_1000d5de = add i32 %v0_1000d5de, -4
  store i32 %v1_1000d5de, i32* @edi, align 4
  ret i32 %v2_1000d5de

; uselistorder directives
  uselistorder i32 %v3_1000d5b4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_1000d5aa, { 2, 3, 4, 5, 6, 1, 0 }
  uselistorder i8 %v2_1000d58d, { 1, 0 }
  uselistorder i32 (i32)* @function_1000d5e1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000d5cf, { 1, 0 }
  uselistorder label %dec_label_pc_1000d59c, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_1000d58d, { 1, 0 }
}

define i32 @function_1000d5e1(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000d5e1:
  %tmp19 = call i32 @__decompiler_undefined_function_1()
  %tmp20 = call i8* @__decompiler_undefined_function_5()
  %v4_1000d5e1 = ptrtoint i8* %tmp20 to i32
  %v1_1000d5e5 = and i32 %v4_1000d5e1, 3
  %v2_1000d5e5 = icmp eq i32 %v1_1000d5e5, 0
  br i1 %v2_1000d5e5, label %dec_label_pc_1000d606, label %dec_label_pc_1000d5ed

dec_label_pc_1000d5ed:                            ; preds = %dec_label_pc_1000d5e1, %dec_label_pc_1000d5f4
  %v0_1000d5ef = phi i32 [ %v0_1000d5f7, %dec_label_pc_1000d5f4 ], [ %v4_1000d5e1, %dec_label_pc_1000d5e1 ]
  %v1_1000d5ed = inttoptr i32 %v0_1000d5ef to i8*
  %v2_1000d5ed = load i8, i8* %v1_1000d5ed, align 1
  %v3_1000d5ed = zext i8 %v2_1000d5ed to i32
  %v4_1000d5ed = load i32, i32* @edx, align 4
  %v5_1000d5ed = and i32 %v4_1000d5ed, -256
  %v6_1000d5ed = or i32 %v5_1000d5ed, %v3_1000d5ed
  store i32 %v6_1000d5ed, i32* @edx, align 4
  %v1_1000d5ef = add i32 %v0_1000d5ef, 1
  store i32 %v1_1000d5ef, i32* @ecx, align 4
  %v4_1000d5f0 = icmp eq i8 %v2_1000d5ed, 0
  br i1 %v4_1000d5f0, label %dec_label_pc_1000d658, label %dec_label_pc_1000d5f4

dec_label_pc_1000d5f4:                            ; preds = %dec_label_pc_1000d5ed
  %v2_1000d5f4 = load i32, i32* @edi, align 4
  %v3_1000d5f4 = inttoptr i32 %v2_1000d5f4 to i8*
  store i8 %v2_1000d5ed, i8* %v3_1000d5f4, align 1
  %v0_1000d5f6 = load i32, i32* @edi, align 4
  %v1_1000d5f6 = add i32 %v0_1000d5f6, 1
  store i32 %v1_1000d5f6, i32* @edi, align 4
  %v0_1000d5f7 = load i32, i32* @ecx, align 4
  %v1_1000d5f7 = and i32 %v0_1000d5f7, 3
  %v2_1000d5f7 = icmp eq i32 %v1_1000d5f7, 0
  %v1_1000d5fd = icmp eq i1 %v2_1000d5f7, false
  br i1 %v1_1000d5fd, label %dec_label_pc_1000d5ed, label %dec_label_pc_1000d606

dec_label_pc_1000d601:                            ; preds = %dec_label_pc_1000d630, %dec_label_pc_1000d606
  %v1_1000d601 = load i32, i32* @edi, align 4
  %v2_1000d601 = inttoptr i32 %v1_1000d601 to i32*
  store i32 %v2_1000d60b, i32* %v2_1000d601, align 4
  %v0_1000d603 = load i32, i32* @edi, align 4
  %v1_1000d603 = add i32 %v0_1000d603, 4
  store i32 %v1_1000d603, i32* @edi, align 4
  %v0_1000d60b.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000d606

dec_label_pc_1000d606:                            ; preds = %dec_label_pc_1000d5e1, %dec_label_pc_1000d5f4, %dec_label_pc_1000d601
  %v0_1000d614 = phi i32 [ %v0_1000d60b.pre, %dec_label_pc_1000d601 ], [ %v4_1000d5e1, %dec_label_pc_1000d5e1 ], [ %v0_1000d5f7, %dec_label_pc_1000d5f4 ]
  %v1_1000d60b = inttoptr i32 %v0_1000d614 to i32*
  %v2_1000d60b = load i32, i32* %v1_1000d60b, align 4
  %v2_1000d60d = add i32 %v2_1000d60b, 2130640639
  %v1_1000d60f = sub i32 -1, %v2_1000d60b
  %v2_1000d612 = xor i32 %v2_1000d60d, %v1_1000d60f
  store i32 %v2_1000d60b, i32* @edx, align 4
  %v1_1000d616 = add i32 %v0_1000d614, 4
  store i32 %v1_1000d616, i32* @ecx, align 4
  %v1_1000d619 = and i32 %v2_1000d612, -2130640640
  %v2_1000d619 = icmp eq i32 %v1_1000d619, 0
  br i1 %v2_1000d619, label %dec_label_pc_1000d601, label %dec_label_pc_1000d620

dec_label_pc_1000d620:                            ; preds = %dec_label_pc_1000d606
  %v3_1000d620 = trunc i32 %v2_1000d60b to i8
  %v4_1000d620 = icmp eq i8 %v3_1000d620, 0
  br i1 %v4_1000d620, label %dec_label_pc_1000d658.loopexit, label %dec_label_pc_1000d624

dec_label_pc_1000d624:                            ; preds = %dec_label_pc_1000d620
  %tmp22 = and i32 %v2_1000d60b, 65280
  %v5_1000d624 = icmp eq i32 %tmp22, 0
  br i1 %v5_1000d624, label %dec_label_pc_1000d64f, label %dec_label_pc_1000d628

dec_label_pc_1000d628:                            ; preds = %dec_label_pc_1000d624
  %v1_1000d628 = and i32 %v2_1000d60b, 16711680
  %v2_1000d628 = icmp eq i32 %v1_1000d628, 0
  br i1 %v2_1000d628, label %dec_label_pc_1000d642, label %dec_label_pc_1000d630

dec_label_pc_1000d630:                            ; preds = %dec_label_pc_1000d628
  %v2_1000d630 = icmp ult i32 %v2_1000d60b, 16777216
  br i1 %v2_1000d630, label %dec_label_pc_1000d63a, label %dec_label_pc_1000d601

dec_label_pc_1000d63a:                            ; preds = %dec_label_pc_1000d630
  %v1_1000d63a = load i32, i32* @edi, align 4
  %v2_1000d63a = inttoptr i32 %v1_1000d63a to i32*
  store i32 %v2_1000d60b, i32* %v2_1000d63a, align 4
  store i32 %arg1, i32* @edi, align 4
  ret i32 %tmp19

dec_label_pc_1000d642:                            ; preds = %dec_label_pc_1000d628
  %v1_1000d642 = trunc i32 %v2_1000d60b to i16
  %v2_1000d642 = load i32, i32* @edi, align 4
  %v3_1000d642 = inttoptr i32 %v2_1000d642 to i16*
  store i16 %v1_1000d642, i16* %v3_1000d642, align 2
  %v0_1000d649 = load i32, i32* @edi, align 4
  %v1_1000d649 = add i32 %v0_1000d649, 2
  %v2_1000d649 = inttoptr i32 %v1_1000d649 to i8*
  store i8 0, i8* %v2_1000d649, align 1
  store i32 %arg1, i32* @edi, align 4
  ret i32 %tmp19

dec_label_pc_1000d64f:                            ; preds = %dec_label_pc_1000d624
  %v1_1000d64f = trunc i32 %v2_1000d60b to i16
  %v2_1000d64f = load i32, i32* @edi, align 4
  %v3_1000d64f = inttoptr i32 %v2_1000d64f to i16*
  store i16 %v1_1000d64f, i16* %v3_1000d64f, align 2
  store i32 %arg1, i32* @edi, align 4
  ret i32 %tmp19

dec_label_pc_1000d658.loopexit:                   ; preds = %dec_label_pc_1000d620
  br label %dec_label_pc_1000d658

dec_label_pc_1000d658:                            ; preds = %dec_label_pc_1000d5ed, %dec_label_pc_1000d658.loopexit
  %v0_1000d658 = phi i32 [ %v2_1000d60b, %dec_label_pc_1000d658.loopexit ], [ %v6_1000d5ed, %dec_label_pc_1000d5ed ]
  %v1_1000d658 = trunc i32 %v0_1000d658 to i8
  %v2_1000d658 = load i32, i32* @edi, align 4
  %v3_1000d658 = inttoptr i32 %v2_1000d658 to i8*
  store i8 %v1_1000d658, i8* %v3_1000d658, align 1
  store i32 %arg1, i32* @edi, align 4
  ret i32 %tmp19

; uselistorder directives
  uselistorder i32 %v2_1000d60b, { 9, 8, 7, 6, 4, 3, 2, 1, 0, 10, 11, 5 }
  uselistorder i32 %v0_1000d5f7, { 0, 2, 1 }
  uselistorder i32 %tmp19, { 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000d658, { 1, 0 }
  uselistorder label %dec_label_pc_1000d606, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1000d5ed, { 1, 0 }
}

define i32 @function_1000d660(i8* %arg1) local_unnamed_addr {
dec_label_pc_1000d660:
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_1000d661 = load i32, i32* @ebp, align 4
  %v0_1000d662 = load i32, i32* @esi, align 4
  %v0_1000d663 = load i32, i32* @edi, align 4
  store i32 %v0_1000d663, i32* %stack_var_-16, align 4
  %v4_1000d664 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_1000d668

dec_label_pc_1000d668:                            ; preds = %dec_label_pc_1000d693, %dec_label_pc_1000d660
  %storemerge = phi i32 [ %v4_1000d664, %dec_label_pc_1000d660 ], [ %v1_1000d693, %dec_label_pc_1000d693 ]
  store i32 %storemerge, i32* %edi.global-to-local, align 4
  %v0_1000d668 = load i32, i32* @global_var_100185e0.98, align 32
  %v7_1000d66f = icmp sgt i32 %v0_1000d668, 1
  %v1_1000d671 = inttoptr i32 %storemerge to i8*
  %v2_1000d671 = load i8, i8* %v1_1000d671, align 1
  br i1 %v7_1000d66f, label %dec_label_pc_1000d671, label %dec_label_pc_1000d680

dec_label_pc_1000d671:                            ; preds = %dec_label_pc_1000d668
  %v3_1000d677 = call i32 @function_1000e8d2(i8 %v2_1000d671, i32 8)
  store i32 8, i32* @ecx, align 4
  %v0_1000d696.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000d68f

dec_label_pc_1000d680:                            ; preds = %dec_label_pc_1000d668
  %v3_1000d671 = zext i8 %v2_1000d671 to i32
  %v0_1000d683 = load i32, i32* inttoptr (i32 268534740 to i32*), align 4
  store i32 %v0_1000d683, i32* @ecx, align 4
  %v2_1000d689 = mul nuw nsw i32 %v3_1000d671, 2
  %v3_1000d689 = add i32 %v0_1000d683, %v2_1000d689
  %v4_1000d689 = inttoptr i32 %v3_1000d689 to i8*
  %v5_1000d689 = load i8, i8* %v4_1000d689, align 1
  %v6_1000d689 = zext i8 %v5_1000d689 to i32
  %v1_1000d68c = and i32 %v6_1000d689, 8
  br label %dec_label_pc_1000d68f

dec_label_pc_1000d68f:                            ; preds = %dec_label_pc_1000d671, %dec_label_pc_1000d680
  %v0_1000d696 = phi i32 [ %v0_1000d696.pre, %dec_label_pc_1000d671 ], [ %storemerge, %dec_label_pc_1000d680 ]
  %v0_1000d68f = phi i32 [ %v3_1000d677, %dec_label_pc_1000d671 ], [ %v1_1000d68c, %dec_label_pc_1000d680 ]
  %v1_1000d68f = icmp eq i32 %v0_1000d68f, 0
  br i1 %v1_1000d68f, label %dec_label_pc_1000d696, label %dec_label_pc_1000d693

dec_label_pc_1000d693:                            ; preds = %dec_label_pc_1000d68f
  %v1_1000d693 = add i32 %v0_1000d696, 1
  br label %dec_label_pc_1000d668

dec_label_pc_1000d696:                            ; preds = %dec_label_pc_1000d68f
  %v1_1000d696 = inttoptr i32 %v0_1000d696 to i8*
  %v2_1000d696 = load i8, i8* %v1_1000d696, align 1
  %v3_1000d696 = zext i8 %v2_1000d696 to i32
  store i32 %v3_1000d696, i32* @esi, align 4
  %v1_1000d699 = add i32 %v0_1000d696, 1
  store i32 %v1_1000d699, i32* %edi.global-to-local, align 4
  %v9_1000d69a = icmp eq i8 %v2_1000d696, 45
  store i32 %v3_1000d696, i32* @ebp, align 4
  br i1 %v9_1000d69a, label %dec_label_pc_1000d6a6, label %dec_label_pc_1000d6a1

dec_label_pc_1000d6a1:                            ; preds = %dec_label_pc_1000d696
  %v9_1000d6a1 = icmp eq i8 %v2_1000d696, 43
  %v1_1000d6a4 = icmp eq i1 %v9_1000d6a1, false
  br i1 %v1_1000d6a4, label %dec_label_pc_1000d6aa, label %dec_label_pc_1000d6a6

dec_label_pc_1000d6a6:                            ; preds = %dec_label_pc_1000d6a1, %dec_label_pc_1000d696
  %v1_1000d6a6 = inttoptr i32 %v1_1000d699 to i8*
  %v2_1000d6a6 = load i8, i8* %v1_1000d6a6, align 1
  %v3_1000d6a6 = zext i8 %v2_1000d6a6 to i32
  store i32 %v3_1000d6a6, i32* @esi, align 4
  %v1_1000d6a9 = add i32 %v0_1000d696, 2
  store i32 %v1_1000d6a9, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000d6aa

dec_label_pc_1000d6aa:                            ; preds = %dec_label_pc_1000d6a1, %dec_label_pc_1000d6a6
  %v1_1000d6c63 = phi i32 [ %v3_1000d696, %dec_label_pc_1000d6a1 ], [ %v3_1000d6a6, %dec_label_pc_1000d6a6 ]
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000d6ac

dec_label_pc_1000d6ac:                            ; preds = %dec_label_pc_1000d6d0, %dec_label_pc_1000d6aa
  %v0_1000d6b7 = phi i32 [ %v3_1000d6d7, %dec_label_pc_1000d6d0 ], [ %v1_1000d6c63, %dec_label_pc_1000d6aa ]
  %v0_1000d6ac = load i32, i32* @global_var_100185e0.98, align 32
  %v7_1000d6b3 = icmp sgt i32 %v0_1000d6ac, 1
  br i1 %v7_1000d6b3, label %dec_label_pc_1000d6b5, label %dec_label_pc_1000d6c1

dec_label_pc_1000d6b5:                            ; preds = %dec_label_pc_1000d6ac
  %v2_1000d6b8 = trunc i32 %v0_1000d6b7 to i8
  %v3_1000d6b8 = call i32 @function_1000e8d2(i8 %v2_1000d6b8, i32 4)
  store i32 4, i32* @ecx, align 4
  br label %dec_label_pc_1000d6cc

dec_label_pc_1000d6c1:                            ; preds = %dec_label_pc_1000d6ac
  %v0_1000d6c1 = load i32, i32* @global_var_100183d4, align 4
  %v2_1000d6c6 = mul nsw i32 %v0_1000d6b7, 2
  %v3_1000d6c6 = add i32 %v0_1000d6c1, %v2_1000d6c6
  %v4_1000d6c6 = inttoptr i32 %v3_1000d6c6 to i8*
  %v5_1000d6c6 = load i8, i8* %v4_1000d6c6, align 1
  %v6_1000d6c6 = zext i8 %v5_1000d6c6 to i32
  %v1_1000d6c9 = and i32 %v6_1000d6c6, 4
  br label %dec_label_pc_1000d6cc

dec_label_pc_1000d6cc:                            ; preds = %dec_label_pc_1000d6b5, %dec_label_pc_1000d6c1
  %v0_1000d6cc = phi i32 [ %v3_1000d6b8, %dec_label_pc_1000d6b5 ], [ %v1_1000d6c9, %dec_label_pc_1000d6c1 ]
  %v1_1000d6cc = icmp eq i32 %v0_1000d6cc, 0
  br i1 %v1_1000d6cc, label %dec_label_pc_1000d6dd, label %dec_label_pc_1000d6d0

dec_label_pc_1000d6d0:                            ; preds = %dec_label_pc_1000d6cc
  %v0_1000d6d0 = load i32, i32* %ebx.global-to-local, align 4
  %v0_1000d6d3 = load i32, i32* @esi, align 4
  %v2_1000d6d3 = mul i32 %v0_1000d6d0, 10
  %v3_1000d6d3 = add i32 %v2_1000d6d3, -48
  %v4_1000d6d3 = add i32 %v3_1000d6d3, %v0_1000d6d3
  store i32 %v4_1000d6d3, i32* %ebx.global-to-local, align 4
  %v0_1000d6d7 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000d6d7 = inttoptr i32 %v0_1000d6d7 to i8*
  %v2_1000d6d7 = load i8, i8* %v1_1000d6d7, align 1
  %v3_1000d6d7 = zext i8 %v2_1000d6d7 to i32
  store i32 %v3_1000d6d7, i32* @esi, align 4
  %v1_1000d6da = add i32 %v0_1000d6d7, 1
  store i32 %v1_1000d6da, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000d6ac

dec_label_pc_1000d6dd:                            ; preds = %dec_label_pc_1000d6cc
  %v0_1000d6dd = load i32, i32* @ebp, align 4
  %v9_1000d6dd = icmp eq i32 %v0_1000d6dd, 45
  %v0_1000d6e0 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000d6e2 = icmp eq i1 %v9_1000d6dd, false
  br i1 %v1_1000d6e2, label %dec_label_pc_1000d6e6, label %dec_label_pc_1000d6e4

dec_label_pc_1000d6e4:                            ; preds = %dec_label_pc_1000d6dd
  %v1_1000d6e4 = sub i32 0, %v0_1000d6e0
  br label %dec_label_pc_1000d6e6

dec_label_pc_1000d6e6:                            ; preds = %dec_label_pc_1000d6dd, %dec_label_pc_1000d6e4
  %v0_1000d6ea = phi i32 [ %v0_1000d6e0, %dec_label_pc_1000d6dd ], [ %v1_1000d6e4, %dec_label_pc_1000d6e4 ]
  %v2_1000d6e6 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000d6e6, i32* @edi, align 4
  store i32 %v0_1000d662, i32* @esi, align 4
  store i32 %v0_1000d661, i32* @ebp, align 4
  ret i32 %v0_1000d6ea

; uselistorder directives
  uselistorder i32 %v3_1000d6d7, { 1, 0 }
  uselistorder i32 %v0_1000d6b7, { 1, 0 }
  uselistorder i8 %v2_1000d671, { 1, 0 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1000d6e6, { 1, 0 }
  uselistorder label %dec_label_pc_1000d6cc, { 1, 0 }
  uselistorder label %dec_label_pc_1000d6aa, { 1, 0 }
  uselistorder label %dec_label_pc_1000d68f, { 1, 0 }
}

define i32 @function_1000d6eb(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000d6eb:
  %v1_1000d6ef = inttoptr i32 %arg1 to i8*
  %v2_1000d6ef = call i32 @function_1000d660(i8* %v1_1000d6ef)
  ret i32 %v2_1000d6ef
}

define i32 @function_1000d700(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000d700:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_1000d705 = load i32, i32* @ebx, align 4
  store i32 %v0_1000d705, i32* %stack_var_-16, align 4
  %v1_1000d709 = icmp eq i32 %arg3, 0
  br i1 %v1_1000d709, label %dec_label_pc_1000d731, label %dec_label_pc_1000d70b

dec_label_pc_1000d70b:                            ; preds = %dec_label_pc_1000d700
  %tmp11 = inttoptr i32 %arg2 to i8*
  %v4_1000d70d = ptrtoint i8* %arg1 to i32
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_1000d714 = call i32 @_strlen(i8* %arg1)
  %v1_1000d716 = add i32 %v3_1000d714, 2
  %v2_1000d718 = add i32 %v1_1000d716, %arg3
  %v7_1000d71f = call i32 @_strncmp(i8* %tmp11, i8* %arg1, i32 %v2_1000d718)
  %v2_1000d721 = add i32 %arg2, -1
  %v3_1000d721 = inttoptr i32 %v2_1000d721 to i8*
  %v4_1000d721 = load i8, i8* %v3_1000d721, align 1
  %v5_1000d721 = zext i8 %v4_1000d721 to i32
  %v6_1000d721 = load i32, i32* %eax.global-to-local, align 4
  %v7_1000d721 = and i32 %v6_1000d721, -256
  %v8_1000d721 = or i32 %v7_1000d721, %v5_1000d721
  store i32 %v8_1000d721, i32* %eax.global-to-local, align 4
  %v4_1000d726 = add i32 %v4_1000d70d, -1
  %v5_1000d726 = inttoptr i32 %v4_1000d726 to i8*
  %v6_1000d726 = load i8, i8* %v5_1000d726, align 1
  %v8_1000d729 = icmp ugt i8 %v4_1000d721, %v6_1000d726
  br i1 %v8_1000d729, label %dec_label_pc_1000d72f, label %dec_label_pc_1000d72b

dec_label_pc_1000d72b:                            ; preds = %dec_label_pc_1000d70b
  %v18_1000d726 = icmp eq i8 %v4_1000d721, %v6_1000d726
  br i1 %v18_1000d726, label %dec_label_pc_1000d731, label %dec_label_pc_1000d72d

dec_label_pc_1000d72d:                            ; preds = %dec_label_pc_1000d72b
  br label %dec_label_pc_1000d72f

dec_label_pc_1000d72f:                            ; preds = %dec_label_pc_1000d70b, %dec_label_pc_1000d72d
  %v0_1000d72f = phi i32 [ -1, %dec_label_pc_1000d70b ], [ 1, %dec_label_pc_1000d72d ]
  br label %dec_label_pc_1000d731

dec_label_pc_1000d731:                            ; preds = %dec_label_pc_1000d700, %dec_label_pc_1000d72b, %dec_label_pc_1000d72f
  %v0_1000d731 = phi i32 [ 0, %dec_label_pc_1000d700 ], [ 0, %dec_label_pc_1000d72b ], [ %v0_1000d72f, %dec_label_pc_1000d72f ]
  store i32 %v0_1000d731, i32* %eax.global-to-local, align 4
  %v2_1000d733 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000d733, i32* @ebx, align 4
  ret i32 %v0_1000d731

; uselistorder directives
  uselistorder i32 %v0_1000d731, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_1000d731, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1000d72f, { 1, 0 }
}

define i32 @function_1000d740(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000d740:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 %arg3, i32* %ecx.global-to-local, align 4
  %v0_1000d744 = load i32, i32* @edi, align 4
  store i32 %v0_1000d744, i32* %stack_var_-4, align 4
  %v1_1000d745 = icmp eq i32 %arg3, 0
  br i1 %v1_1000d745, label %dec_label_pc_1000d740.dec_label_pc_1000d7c3_crit_edge, label %dec_label_pc_1000d749

dec_label_pc_1000d740.dec_label_pc_1000d7c3_crit_edge: ; preds = %dec_label_pc_1000d740
  %.pre = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_1000d7c3

dec_label_pc_1000d749:                            ; preds = %dec_label_pc_1000d740
  %v0_1000d749 = load i32, i32* @esi, align 4
  %v0_1000d74a = load i32, i32* @ebx, align 4
  store i32 %v0_1000d74a, i32* %stack_var_-12, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v1_1000d751 = and i32 %arg2, 3
  %v2_1000d751 = icmp eq i32 %v1_1000d751, 0
  %v4_1000d757 = ptrtoint i8* %arg1 to i32
  store i32 %v4_1000d757, i32* %edi.global-to-local, align 4
  %v1_1000d75b = icmp eq i1 %v2_1000d751, false
  br i1 %v1_1000d75b, label %dec_label_pc_1000d764.preheader, label %dec_label_pc_1000d75d

dec_label_pc_1000d764.preheader:                  ; preds = %dec_label_pc_1000d749
  %v4_1000d764.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_1000d764

dec_label_pc_1000d75d:                            ; preds = %dec_label_pc_1000d749
  %v2_1000d75d = udiv i32 %arg3, 4
  %tmp = icmp ult i32 %arg3, 4
  store i32 %v2_1000d75d, i32* %ecx.global-to-local, align 4
  %v1_1000d760 = icmp eq i1 %tmp, false
  br i1 %v1_1000d760, label %dec_label_pc_1000d7d1, label %dec_label_pc_1000d785.preheader

dec_label_pc_1000d764:                            ; preds = %dec_label_pc_1000d764.preheader, %dec_label_pc_1000d771
  %v2_1000d767 = phi i32 [ %v4_1000d757, %dec_label_pc_1000d764.preheader ], [ %v1_1000d769, %dec_label_pc_1000d771 ]
  %v4_1000d764 = phi i32 [ %v4_1000d764.pre, %dec_label_pc_1000d764.preheader ], [ %v0_1000d76d, %dec_label_pc_1000d771 ]
  %v0_1000d766 = phi i32 [ %arg2, %dec_label_pc_1000d764.preheader ], [ %v0_1000d771, %dec_label_pc_1000d771 ]
  %v1_1000d764 = inttoptr i32 %v0_1000d766 to i8*
  %v2_1000d764 = load i8, i8* %v1_1000d764, align 1
  %v3_1000d764 = zext i8 %v2_1000d764 to i32
  %v5_1000d764 = and i32 %v4_1000d764, -256
  %v6_1000d764 = or i32 %v3_1000d764, %v5_1000d764
  store i32 %v6_1000d764, i32* @eax, align 4
  %v1_1000d766 = add i32 %v0_1000d766, 1
  store i32 %v1_1000d766, i32* %esi.global-to-local, align 4
  %v3_1000d767 = inttoptr i32 %v2_1000d767 to i8*
  store i8 %v2_1000d764, i8* %v3_1000d767, align 1
  %v0_1000d769 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000d769 = add i32 %v0_1000d769, 1
  store i32 %v1_1000d769, i32* %edi.global-to-local, align 4
  %v0_1000d76a = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000d76a = add i32 %v0_1000d76a, -1
  %v8_1000d76a = icmp eq i32 %v1_1000d76a, 0
  store i32 %v1_1000d76a, i32* %ecx.global-to-local, align 4
  br i1 %v8_1000d76a, label %dec_label_pc_1000d792, label %dec_label_pc_1000d76d

dec_label_pc_1000d76d:                            ; preds = %dec_label_pc_1000d764
  %v0_1000d76d = load i32, i32* @eax, align 4
  %v3_1000d76d = trunc i32 %v0_1000d76d to i8
  %v4_1000d76d = icmp eq i8 %v3_1000d76d, 0
  br i1 %v4_1000d76d, label %dec_label_pc_1000d79a, label %dec_label_pc_1000d771

dec_label_pc_1000d771:                            ; preds = %dec_label_pc_1000d76d
  %v0_1000d771 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000d771 = and i32 %v0_1000d771, 3
  %v2_1000d771 = icmp eq i32 %v1_1000d771, 0
  %v1_1000d777 = icmp eq i1 %v2_1000d771, false
  br i1 %v1_1000d777, label %dec_label_pc_1000d764, label %dec_label_pc_1000d779

dec_label_pc_1000d779:                            ; preds = %dec_label_pc_1000d771
  store i32 %v1_1000d76a, i32* %ebx.global-to-local, align 4
  %v2_1000d77b = udiv i32 %v1_1000d76a, 4
  %tmp111 = icmp ult i32 %v1_1000d76a, 4
  store i32 %v2_1000d77b, i32* %ecx.global-to-local, align 4
  %v1_1000d77e = icmp eq i1 %tmp111, false
  br i1 %v1_1000d77e, label %dec_label_pc_1000d7d1, label %dec_label_pc_1000d780

dec_label_pc_1000d780.loopexit:                   ; preds = %dec_label_pc_1000d7c9
  %v0_1000d780.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000d780

dec_label_pc_1000d780:                            ; preds = %dec_label_pc_1000d780.loopexit, %dec_label_pc_1000d779
  %v2_1000d78827 = phi i32 [ %v1_1000d7cb, %dec_label_pc_1000d780.loopexit ], [ %v1_1000d769, %dec_label_pc_1000d779 ]
  %v0_1000d780 = phi i32 [ %v0_1000d780.pre, %dec_label_pc_1000d780.loopexit ], [ %v1_1000d76a, %dec_label_pc_1000d779 ]
  %v1_1000d780 = and i32 %v0_1000d780, 3
  %v2_1000d780 = icmp eq i32 %v1_1000d780, 0
  store i32 %v1_1000d780, i32* %ebx.global-to-local, align 4
  br i1 %v2_1000d780, label %dec_label_pc_1000d792, label %dec_label_pc_1000d785.preheader

dec_label_pc_1000d785.preheader:                  ; preds = %dec_label_pc_1000d780, %dec_label_pc_1000d75d
  %v2_1000d78826 = phi i32 [ %v2_1000d78827, %dec_label_pc_1000d780 ], [ %v4_1000d757, %dec_label_pc_1000d75d ]
  %v4_1000d785.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_1000d785

dec_label_pc_1000d785:                            ; preds = %dec_label_pc_1000d785.preheader, %dec_label_pc_1000d78f
  %v2_1000d788 = phi i32 [ %v2_1000d78826, %dec_label_pc_1000d785.preheader ], [ %v1_1000d78a, %dec_label_pc_1000d78f ]
  %v4_1000d785 = phi i32 [ %v4_1000d785.pre, %dec_label_pc_1000d785.preheader ], [ %v0_1000d78b, %dec_label_pc_1000d78f ]
  %v0_1000d785 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000d785 = inttoptr i32 %v0_1000d785 to i8*
  %v2_1000d785 = load i8, i8* %v1_1000d785, align 1
  %v3_1000d785 = zext i8 %v2_1000d785 to i32
  %v5_1000d785 = and i32 %v4_1000d785, -256
  %v6_1000d785 = or i32 %v3_1000d785, %v5_1000d785
  store i32 %v6_1000d785, i32* @eax, align 4
  %v1_1000d787 = add i32 %v0_1000d785, 1
  store i32 %v1_1000d787, i32* %esi.global-to-local, align 4
  %v3_1000d788 = inttoptr i32 %v2_1000d788 to i8*
  store i8 %v2_1000d785, i8* %v3_1000d788, align 1
  %v0_1000d78a = load i32, i32* %edi.global-to-local, align 4
  %v1_1000d78a = add i32 %v0_1000d78a, 1
  store i32 %v1_1000d78a, i32* %edi.global-to-local, align 4
  %v0_1000d78b = load i32, i32* @eax, align 4
  %v3_1000d78b = trunc i32 %v0_1000d78b to i8
  %v4_1000d78b = icmp eq i8 %v3_1000d78b, 0
  br i1 %v4_1000d78b, label %dec_label_pc_1000d7be, label %dec_label_pc_1000d78f

dec_label_pc_1000d78f:                            ; preds = %dec_label_pc_1000d785
  %v0_1000d78f = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000d78f = add i32 %v0_1000d78f, -1
  %v8_1000d78f = icmp eq i32 %v1_1000d78f, 0
  store i32 %v1_1000d78f, i32* %ebx.global-to-local, align 4
  %v1_1000d790 = icmp eq i1 %v8_1000d78f, false
  br i1 %v1_1000d790, label %dec_label_pc_1000d785, label %dec_label_pc_1000d792

dec_label_pc_1000d792:                            ; preds = %dec_label_pc_1000d764, %dec_label_pc_1000d78f, %dec_label_pc_1000d780
  %v2_1000d796 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000d796, i32* @ebx, align 4
  store i32 %v0_1000d749, i32* @esi, align 4
  %v2_1000d798 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000d798, i32* @edi, align 4
  ret i32 %v4_1000d757

dec_label_pc_1000d79a:                            ; preds = %dec_label_pc_1000d76d
  %v1_1000d79a = and i32 %v1_1000d769, 3
  %v2_1000d79a = icmp eq i32 %v1_1000d79a, 0
  br i1 %v2_1000d79a, label %dec_label_pc_1000d7b4, label %dec_label_pc_1000d7a2.preheader

dec_label_pc_1000d7a2.preheader:                  ; preds = %dec_label_pc_1000d79a
  %v3_1000d7a278 = inttoptr i32 %v1_1000d769 to i8*
  store i8 0, i8* %v3_1000d7a278, align 1
  %v0_1000d7a479 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000d7a480 = add i32 %v0_1000d7a479, 1
  store i32 %v1_1000d7a480, i32* %edi.global-to-local, align 4
  %v0_1000d7a581 = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000d7a582 = add i32 %v0_1000d7a581, -1
  %v8_1000d7a586 = icmp eq i32 %v1_1000d7a582, 0
  store i32 %v1_1000d7a582, i32* %ecx.global-to-local, align 4
  br i1 %v8_1000d7a586, label %dec_label_pc_1000d836, label %dec_label_pc_1000d7ac

dec_label_pc_1000d7ac:                            ; preds = %dec_label_pc_1000d7a2.preheader, %dec_label_pc_1000d7ac.dec_label_pc_1000d7a2_crit_edge
  %v1_1000d7a589 = phi i32 [ %v1_1000d7a5, %dec_label_pc_1000d7ac.dec_label_pc_1000d7a2_crit_edge ], [ %v1_1000d7a582, %dec_label_pc_1000d7a2.preheader ]
  %v1_1000d7a488 = phi i32 [ %v1_1000d7a4, %dec_label_pc_1000d7ac.dec_label_pc_1000d7a2_crit_edge ], [ %v1_1000d7a480, %dec_label_pc_1000d7a2.preheader ]
  %v1_1000d7ac = and i32 %v1_1000d7a488, 3
  %v2_1000d7ac = icmp eq i32 %v1_1000d7ac, 0
  %v1_1000d7b2 = icmp eq i1 %v2_1000d7ac, false
  br i1 %v1_1000d7b2, label %dec_label_pc_1000d7ac.dec_label_pc_1000d7a2_crit_edge, label %dec_label_pc_1000d7b4

dec_label_pc_1000d7ac.dec_label_pc_1000d7a2_crit_edge: ; preds = %dec_label_pc_1000d7ac
  %v0_1000d7a2.pre = load i32, i32* @eax, align 4
  %v1_1000d7a2 = trunc i32 %v0_1000d7a2.pre to i8
  %v3_1000d7a2 = inttoptr i32 %v1_1000d7a488 to i8*
  store i8 %v1_1000d7a2, i8* %v3_1000d7a2, align 1
  %v0_1000d7a4 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000d7a4 = add i32 %v0_1000d7a4, 1
  store i32 %v1_1000d7a4, i32* %edi.global-to-local, align 4
  %v0_1000d7a5 = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000d7a5 = add i32 %v0_1000d7a5, -1
  %v8_1000d7a5 = icmp eq i32 %v1_1000d7a5, 0
  store i32 %v1_1000d7a5, i32* %ecx.global-to-local, align 4
  br i1 %v8_1000d7a5, label %dec_label_pc_1000d836, label %dec_label_pc_1000d7ac

dec_label_pc_1000d7b4:                            ; preds = %dec_label_pc_1000d7ac, %dec_label_pc_1000d79a
  %v1_1000d82935 = phi i32 [ %v1_1000d769, %dec_label_pc_1000d79a ], [ %v1_1000d7a488, %dec_label_pc_1000d7ac ]
  %v0_1000d7b4 = phi i32 [ %v1_1000d76a, %dec_label_pc_1000d79a ], [ %v1_1000d7a589, %dec_label_pc_1000d7ac ]
  store i32 %v0_1000d7b4, i32* %ebx.global-to-local, align 4
  %v2_1000d7b6 = udiv i32 %v0_1000d7b4, 4
  %tmp112 = icmp ult i32 %v0_1000d7b4, 4
  store i32 %v2_1000d7b6, i32* %ecx.global-to-local, align 4
  %v1_1000d7b9 = icmp eq i1 %tmp112, false
  br i1 %v1_1000d7b9, label %dec_label_pc_1000d827, label %dec_label_pc_1000d7bb

dec_label_pc_1000d7bb:                            ; preds = %dec_label_pc_1000d7be, %dec_label_pc_1000d7b4, %dec_label_pc_1000d831
  %v2_1000d7bb = phi i32 [ %v2_1000d7bb37, %dec_label_pc_1000d7be ], [ %v1_1000d82935, %dec_label_pc_1000d7b4 ], [ %v2_1000d7bb38, %dec_label_pc_1000d831 ]
  %v0_1000d7bb = load i32, i32* @eax, align 4
  %v1_1000d7bb = trunc i32 %v0_1000d7bb to i8
  %v3_1000d7bb = inttoptr i32 %v2_1000d7bb to i8*
  store i8 %v1_1000d7bb, i8* %v3_1000d7bb, align 1
  %v0_1000d7bd = load i32, i32* %edi.global-to-local, align 4
  %v1_1000d7bd = add i32 %v0_1000d7bd, 1
  store i32 %v1_1000d7bd, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000d7be

dec_label_pc_1000d7be:                            ; preds = %dec_label_pc_1000d785, %dec_label_pc_1000d7bb
  %v2_1000d7bb37 = phi i32 [ %v1_1000d7bd, %dec_label_pc_1000d7bb ], [ %v1_1000d78a, %dec_label_pc_1000d785 ]
  %v0_1000d7be = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000d7be = add i32 %v0_1000d7be, -1
  %v8_1000d7be = icmp eq i32 %v1_1000d7be, 0
  store i32 %v1_1000d7be, i32* %ebx.global-to-local, align 4
  %v1_1000d7bf = icmp eq i1 %v8_1000d7be, false
  br i1 %v1_1000d7bf, label %dec_label_pc_1000d7bb, label %dec_label_pc_1000d7c1

dec_label_pc_1000d7c1:                            ; preds = %dec_label_pc_1000d7be
  %v2_1000d7c1 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000d7c1, i32* @ebx, align 4
  store i32 %v0_1000d749, i32* @esi, align 4
  %v2_1000d7c7.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1000d7c3

dec_label_pc_1000d7c3:                            ; preds = %dec_label_pc_1000d740.dec_label_pc_1000d7c3_crit_edge, %dec_label_pc_1000d7c1
  %v4_1000d7c3.pre-phi = phi i32 [ %.pre, %dec_label_pc_1000d740.dec_label_pc_1000d7c3_crit_edge ], [ %v4_1000d757, %dec_label_pc_1000d7c1 ]
  %v2_1000d7c7 = phi i32 [ %v0_1000d744, %dec_label_pc_1000d740.dec_label_pc_1000d7c3_crit_edge ], [ %v2_1000d7c7.pre, %dec_label_pc_1000d7c1 ]
  store i32 %v2_1000d7c7, i32* @edi, align 4
  ret i32 %v4_1000d7c3.pre-phi

dec_label_pc_1000d7c9:                            ; preds = %dec_label_pc_1000d7fb, %dec_label_pc_1000d7d1
  %v2_1000d7c9 = inttoptr i32 %v1_1000d7c9 to i32*
  store i32 %v2_1000d7df, i32* %v2_1000d7c9, align 4
  %v0_1000d7cb = load i32, i32* %edi.global-to-local, align 4
  %v1_1000d7cb = add i32 %v0_1000d7cb, 4
  store i32 %v1_1000d7cb, i32* %edi.global-to-local, align 4
  %v0_1000d7ce = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000d7ce = add i32 %v0_1000d7ce, -1
  %v8_1000d7ce = icmp eq i32 %v1_1000d7ce, 0
  store i32 %v1_1000d7ce, i32* %ecx.global-to-local, align 4
  br i1 %v8_1000d7ce, label %dec_label_pc_1000d780.loopexit, label %dec_label_pc_1000d7c9.dec_label_pc_1000d7d1_crit_edge

dec_label_pc_1000d7c9.dec_label_pc_1000d7d1_crit_edge: ; preds = %dec_label_pc_1000d7c9
  %v0_1000d7d6.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000d7d1

dec_label_pc_1000d7d1:                            ; preds = %dec_label_pc_1000d779, %dec_label_pc_1000d75d, %dec_label_pc_1000d7c9.dec_label_pc_1000d7d1_crit_edge
  %v1_1000d7c9 = phi i32 [ %v1_1000d7cb, %dec_label_pc_1000d7c9.dec_label_pc_1000d7d1_crit_edge ], [ %v1_1000d769, %dec_label_pc_1000d779 ], [ %v4_1000d757, %dec_label_pc_1000d75d ]
  %v0_1000d7df = phi i32 [ %v0_1000d7d6.pre, %dec_label_pc_1000d7c9.dec_label_pc_1000d7d1_crit_edge ], [ %v0_1000d771, %dec_label_pc_1000d779 ], [ %arg2, %dec_label_pc_1000d75d ]
  %v1_1000d7d6 = inttoptr i32 %v0_1000d7df to i32*
  %v2_1000d7d6 = load i32, i32* %v1_1000d7d6, align 4
  %v2_1000d7d8 = add i32 %v2_1000d7d6, 2130640639
  %v1_1000d7da = sub i32 -1, %v2_1000d7d6
  %v2_1000d7dd = xor i32 %v2_1000d7d8, %v1_1000d7da
  store i32 %v2_1000d7dd, i32* @eax, align 4
  %v2_1000d7df = load i32, i32* %v1_1000d7d6, align 4
  store i32 %v2_1000d7df, i32* @edx, align 4
  %v1_1000d7e1 = add i32 %v0_1000d7df, 4
  store i32 %v1_1000d7e1, i32* %esi.global-to-local, align 4
  %v1_1000d7e4 = and i32 %v2_1000d7dd, -2130640640
  %v2_1000d7e4 = icmp eq i32 %v1_1000d7e4, 0
  br i1 %v2_1000d7e4, label %dec_label_pc_1000d7c9, label %dec_label_pc_1000d7eb

dec_label_pc_1000d7eb:                            ; preds = %dec_label_pc_1000d7d1
  %v3_1000d7eb = trunc i32 %v2_1000d7df to i8
  %v4_1000d7eb = icmp eq i8 %v3_1000d7eb, 0
  br i1 %v4_1000d7eb, label %dec_label_pc_1000d81b, label %dec_label_pc_1000d7ef

dec_label_pc_1000d7ef:                            ; preds = %dec_label_pc_1000d7eb
  %tmp47 = and i32 %v2_1000d7df, 65280
  %v5_1000d7ef = icmp eq i32 %tmp47, 0
  br i1 %v5_1000d7ef, label %dec_label_pc_1000d811, label %dec_label_pc_1000d7f3

dec_label_pc_1000d7f3:                            ; preds = %dec_label_pc_1000d7ef
  %v1_1000d7f3 = and i32 %v2_1000d7df, 16711680
  %v2_1000d7f3 = icmp eq i32 %v1_1000d7f3, 0
  br i1 %v2_1000d7f3, label %dec_label_pc_1000d807, label %dec_label_pc_1000d7fb

dec_label_pc_1000d7fb:                            ; preds = %dec_label_pc_1000d7f3
  %v2_1000d7fb = icmp ult i32 %v2_1000d7df, 16777216
  %v1_1000d801 = icmp eq i1 %v2_1000d7fb, false
  br i1 %v1_1000d801, label %dec_label_pc_1000d7c9, label %dec_label_pc_1000d803

dec_label_pc_1000d803:                            ; preds = %dec_label_pc_1000d7fb
  %v2_1000d803 = inttoptr i32 %v1_1000d7c9 to i32*
  store i32 %v2_1000d7df, i32* %v2_1000d803, align 4
  br label %dec_label_pc_1000d81f

dec_label_pc_1000d807:                            ; preds = %dec_label_pc_1000d7f3
  %v1_1000d807 = and i32 %v2_1000d7df, 65535
  store i32 %v1_1000d807, i32* @edx, align 4
  %v2_1000d80d = inttoptr i32 %v1_1000d7c9 to i32*
  store i32 %v1_1000d807, i32* %v2_1000d80d, align 4
  br label %dec_label_pc_1000d81f

dec_label_pc_1000d811:                            ; preds = %dec_label_pc_1000d7ef
  %v1_1000d811 = and i32 %v2_1000d7df, 255
  store i32 %v1_1000d811, i32* @edx, align 4
  %v2_1000d817 = inttoptr i32 %v1_1000d7c9 to i32*
  store i32 %v1_1000d811, i32* %v2_1000d817, align 4
  br label %dec_label_pc_1000d81f

dec_label_pc_1000d81b:                            ; preds = %dec_label_pc_1000d7eb
  store i32 0, i32* @edx, align 4
  %v2_1000d81d = inttoptr i32 %v1_1000d7c9 to i32*
  store i32 0, i32* %v2_1000d81d, align 4
  br label %dec_label_pc_1000d81f

dec_label_pc_1000d81f:                            ; preds = %dec_label_pc_1000d811, %dec_label_pc_1000d807, %dec_label_pc_1000d803, %dec_label_pc_1000d81b
  %v0_1000d81f = load i32, i32* %edi.global-to-local, align 4
  %v1_1000d81f = add i32 %v0_1000d81f, 4
  store i32 %v1_1000d81f, i32* %edi.global-to-local, align 4
  store i32 0, i32* @eax, align 4
  %v0_1000d824 = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000d824 = add i32 %v0_1000d824, -1
  %v8_1000d824 = icmp eq i32 %v1_1000d824, 0
  store i32 %v1_1000d824, i32* %ecx.global-to-local, align 4
  br i1 %v8_1000d824, label %dec_label_pc_1000d831, label %dec_label_pc_1000d827

dec_label_pc_1000d827:                            ; preds = %dec_label_pc_1000d7b4, %dec_label_pc_1000d81f
  %v1_1000d82934 = phi i32 [ %v1_1000d82935, %dec_label_pc_1000d7b4 ], [ %v1_1000d81f, %dec_label_pc_1000d81f ]
  store i32 0, i32* @eax, align 4
  %v2_1000d82965 = inttoptr i32 %v1_1000d82934 to i32*
  store i32 0, i32* %v2_1000d82965, align 4
  %v0_1000d82b66 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000d82b67 = add i32 %v0_1000d82b66, 4
  store i32 %v1_1000d82b67, i32* %edi.global-to-local, align 4
  %v0_1000d82e68 = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000d82e69 = add i32 %v0_1000d82e68, -1
  %v8_1000d82e70 = icmp eq i32 %v1_1000d82e69, 0
  store i32 %v1_1000d82e69, i32* %ecx.global-to-local, align 4
  %v1_1000d82f71 = icmp eq i1 %v8_1000d82e70, false
  br i1 %v1_1000d82f71, label %dec_label_pc_1000d829.dec_label_pc_1000d829_crit_edge, label %dec_label_pc_1000d831.loopexit

dec_label_pc_1000d829.dec_label_pc_1000d829_crit_edge: ; preds = %dec_label_pc_1000d827, %dec_label_pc_1000d829.dec_label_pc_1000d829_crit_edge
  %v1_1000d82b72 = phi i32 [ %v1_1000d82b, %dec_label_pc_1000d829.dec_label_pc_1000d829_crit_edge ], [ %v1_1000d82b67, %dec_label_pc_1000d827 ]
  %v0_1000d829.pre = load i32, i32* @eax, align 4
  %v2_1000d829 = inttoptr i32 %v1_1000d82b72 to i32*
  store i32 %v0_1000d829.pre, i32* %v2_1000d829, align 4
  %v0_1000d82b = load i32, i32* %edi.global-to-local, align 4
  %v1_1000d82b = add i32 %v0_1000d82b, 4
  store i32 %v1_1000d82b, i32* %edi.global-to-local, align 4
  %v0_1000d82e = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000d82e = add i32 %v0_1000d82e, -1
  %v8_1000d82e = icmp eq i32 %v1_1000d82e, 0
  store i32 %v1_1000d82e, i32* %ecx.global-to-local, align 4
  %v1_1000d82f = icmp eq i1 %v8_1000d82e, false
  br i1 %v1_1000d82f, label %dec_label_pc_1000d829.dec_label_pc_1000d829_crit_edge, label %dec_label_pc_1000d831.loopexit

dec_label_pc_1000d831.loopexit:                   ; preds = %dec_label_pc_1000d829.dec_label_pc_1000d829_crit_edge, %dec_label_pc_1000d827
  %v1_1000d82b.lcssa = phi i32 [ %v1_1000d82b67, %dec_label_pc_1000d827 ], [ %v1_1000d82b, %dec_label_pc_1000d829.dec_label_pc_1000d829_crit_edge ]
  br label %dec_label_pc_1000d831

dec_label_pc_1000d831:                            ; preds = %dec_label_pc_1000d831.loopexit, %dec_label_pc_1000d81f
  %v2_1000d7bb38 = phi i32 [ %v1_1000d82b.lcssa, %dec_label_pc_1000d831.loopexit ], [ %v1_1000d81f, %dec_label_pc_1000d81f ]
  %v0_1000d831 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000d831 = and i32 %v0_1000d831, 3
  %v2_1000d831 = icmp eq i32 %v1_1000d831, 0
  store i32 %v1_1000d831, i32* %ebx.global-to-local, align 4
  %v1_1000d834 = icmp eq i1 %v2_1000d831, false
  br i1 %v1_1000d834, label %dec_label_pc_1000d7bb, label %dec_label_pc_1000d836

dec_label_pc_1000d836:                            ; preds = %dec_label_pc_1000d7a2.preheader, %dec_label_pc_1000d7ac.dec_label_pc_1000d7a2_crit_edge, %dec_label_pc_1000d831
  %v2_1000d83a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000d83a, i32* @ebx, align 4
  store i32 %v0_1000d749, i32* @esi, align 4
  %v2_1000d83c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000d83c, i32* @edi, align 4
  ret i32 %v4_1000d757

; uselistorder directives
  uselistorder i32 %v1_1000d82e, { 1, 0 }
  uselistorder i32 %v1_1000d82b, { 0, 2, 1 }
  uselistorder i32 %v1_1000d824, { 1, 0 }
  uselistorder i32 %v2_1000d7df, { 1, 2, 3, 0, 5, 4, 7, 8, 6 }
  uselistorder i32 %v1_1000d7ce, { 1, 0 }
  uselistorder i32 %v1_1000d7cb, { 1, 2, 0 }
  uselistorder i32 %v1_1000d7be, { 1, 0 }
  uselistorder i32 %v1_1000d82935, { 1, 0 }
  uselistorder i32 %v1_1000d7a5, { 2, 1, 0 }
  uselistorder i32 %v1_1000d7a4, { 1, 0 }
  uselistorder i32 %v1_1000d78f, { 1, 0 }
  uselistorder i32 %v0_1000d78b, { 1, 0 }
  uselistorder i32 %v1_1000d78a, { 0, 2, 1 }
  uselistorder i32 %v0_1000d771, { 0, 2, 1 }
  uselistorder i32 %v0_1000d76d, { 1, 0 }
  uselistorder i32 %v1_1000d76a, { 2, 3, 0, 1, 4, 6, 5 }
  uselistorder i32 %v1_1000d769, { 0, 1, 3, 2, 4, 6, 5 }
  uselistorder i32 %v4_1000d757, { 4, 0, 1, 5, 2, 3, 6 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2, 3 }
  uselistorder i32* %esi.global-to-local, { 6, 4, 0, 5, 1, 2, 3 }
  uselistorder i32* %edi.global-to-local, { 11, 10, 0, 12, 14, 16, 18, 17, 2, 13, 4, 3, 1, 6, 5, 15, 7, 8, 9 }
  uselistorder i32* %ecx.global-to-local, { 12, 11, 0, 13, 14, 15, 17, 16, 2, 4, 3, 1, 6, 5, 7, 9, 8, 10 }
  uselistorder i32* %ebx.global-to-local, { 10, 7, 0, 9, 1, 2, 6, 3, 5, 4, 8 }
  uselistorder i32 %arg3, { 0, 1, 2, 4, 3 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_1000d836, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1000d829.dec_label_pc_1000d829_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1000d827, { 1, 0 }
  uselistorder label %dec_label_pc_1000d81f, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1000d7d1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000d7c3, { 1, 0 }
  uselistorder label %dec_label_pc_1000d7be, { 1, 0 }
  uselistorder label %dec_label_pc_1000d7bb, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000d7ac, { 1, 0 }
  uselistorder label %dec_label_pc_1000d792, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1000d785, { 1, 0 }
  uselistorder label %dec_label_pc_1000d764, { 1, 0 }
}

define i32 @function_1000d83e(double %arg1) local_unnamed_addr {
dec_label_pc_1000d83e:
  %tmp5 = call i16 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_1000d843 = load i32, i32* @esi, align 4
  store i32 65535, i32* @esi, align 4
  %v0_1000d849 = load i32, i32* @edi, align 4
  store i32 %v0_1000d849, i32* %stack_var_-20, align 4
  store i32 65535, i32* %stack_var_-24, align 4
  %v2_1000d850 = call i32 @function_1000f19d(i32 4927, i32 65535)
  store i32 %v2_1000d850, i32* @edi, align 4
  %v2_1000d85a = and i16 %tmp5, 32752
  %v7_1000d85f = icmp eq i16 %v2_1000d85a, 32752
  store i32 65535, i32* @ecx, align 4
  %v1_1000d864 = icmp eq i1 %v7_1000d85f, false
  br i1 %v1_1000d864, label %dec_label_pc_1000d8d2, label %dec_label_pc_1000d866

dec_label_pc_1000d866:                            ; preds = %dec_label_pc_1000d83e
  %v4_1000d866 = fpext double %arg1 to x86_fp80
  %v5_1000d86b = fptrunc x86_fp80 %v4_1000d866 to float
  %v6_1000d86b = bitcast float %v5_1000d86b to i32
  %v2_1000d86e = call i32 @function_1000f065(i32 %v6_1000d86b, i32 65535)
  %v8_1000d874 = icmp eq i32 %v2_1000d86e, 1
  %v2_1000d875 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1000d875, i32* @ecx, align 4
  br i1 %v8_1000d874, label %dec_label_pc_1000d8c4, label %dec_label_pc_1000d878

dec_label_pc_1000d878:                            ; preds = %dec_label_pc_1000d866
  %v8_1000d878 = icmp eq i32 %v2_1000d86e, 2
  br i1 %v8_1000d878, label %dec_label_pc_1000d8b4, label %dec_label_pc_1000d87b

dec_label_pc_1000d87b:                            ; preds = %dec_label_pc_1000d878
  %v5_1000d87b = load i3, i3* @fpu_stat_TOP, align 1
  %v8_1000d87e = icmp eq i32 %v2_1000d86e, 3
  %v0_1000d87f = load i32, i32* @edi, align 4
  store i32 %v0_1000d87f, i32* %stack_var_-24, align 4
  br i1 %v8_1000d87e, label %dec_label_pc_1000d8a3, label %dec_label_pc_1000d882

dec_label_pc_1000d882:                            ; preds = %dec_label_pc_1000d87b
  %v4_1000d882 = fadd x86_fp80 %v4_1000d866, 0xK3FFF8000000000000000
  %v5_1000d88a = fptrunc x86_fp80 %v4_1000d882 to float
  %v6_1000d88a = bitcast float %v5_1000d88a to i32
  store i3 %v5_1000d87b, i3* @fpu_stat_TOP, align 1
  %v9_1000d899 = call i32 @function_1000e9d8(i32 8, i32 21, double %arg1, i32 %v2_1000d875, i32 %v6_1000d88a, i32 %v2_1000d875, i32 %v0_1000d87f)
  br label %dec_label_pc_1000d8ef

dec_label_pc_1000d8a3:                            ; preds = %dec_label_pc_1000d87b
  store i3 %v5_1000d87b, i3* @fpu_stat_TOP, align 1
  %v6_1000d8aa = call i32 @function_1000e984(i32 21, double %arg1, i32 %v2_1000d875, i32 %v0_1000d87f)
  br label %dec_label_pc_1000d8ef

dec_label_pc_1000d8b4:                            ; preds = %dec_label_pc_1000d878
  %v0_1000d8b4 = load i32, i32* @esi, align 4
  store i32 %v0_1000d8b4, i32* %stack_var_-24, align 4
  %v0_1000d8b5 = load i32, i32* @edi, align 4
  %v2_1000d8b6 = call i32 @function_1000f19d(i32 %v0_1000d8b5, i32 %v0_1000d8b4)
  %v5_1000d8bb = load i3, i3* @fpu_stat_TOP, align 1
  %v6_1000d8bb = add i3 %v5_1000d8bb, -1
  store i3 %v6_1000d8bb, i3* @fpu_stat_TOP, align 1
  %v2_1000d8bf = fsub x86_fp80 0xK80000000000000000000, %v4_1000d866
  store x86_fp80 %v2_1000d8bf, x86_fp80* @st0, align 4
  %v2_1000d8c1 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1000d8c1, i32* @ecx, align 4
  br label %dec_label_pc_1000d8ef

dec_label_pc_1000d8c4:                            ; preds = %dec_label_pc_1000d866
  %v0_1000d8c4 = load i32, i32* @esi, align 4
  store i32 %v0_1000d8c4, i32* %stack_var_-24, align 4
  %v0_1000d8c5 = load i32, i32* @edi, align 4
  %v2_1000d8c6 = call i32 @function_1000f19d(i32 %v0_1000d8c5, i32 %v0_1000d8c4)
  %v5_1000d8cb = load i3, i3* @fpu_stat_TOP, align 1
  %v6_1000d8cb = add i3 %v5_1000d8cb, -1
  store x86_fp80 %v4_1000d866, x86_fp80* @st0, align 4
  store i3 %v6_1000d8cb, i3* @fpu_stat_TOP, align 1
  %v2_1000d8cf = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1000d8cf, i32* @ecx, align 4
  br label %dec_label_pc_1000d8ef

dec_label_pc_1000d8d2:                            ; preds = %dec_label_pc_1000d83e
  %v0_1000d8d5 = load i32, i32* @esi, align 4
  store i32 %v0_1000d8d5, i32* %stack_var_-24, align 4
  %v2_1000d8e5 = call i32 @function_1000f19d(i32 %v2_1000d850, i32 %v0_1000d8d5)
  %v8_1000d8ea = fpext double %arg1 to x86_fp80
  %v9_1000d8ea = load i3, i3* @fpu_stat_TOP, align 1
  %v10_1000d8ea = add i3 %v9_1000d8ea, -1
  store x86_fp80 %v8_1000d8ea, x86_fp80* @st0, align 4
  store i3 %v10_1000d8ea, i3* @fpu_stat_TOP, align 1
  %v2_1000d8ee = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1000d8ee, i32* @ecx, align 4
  br label %dec_label_pc_1000d8ef

dec_label_pc_1000d8ef:                            ; preds = %dec_label_pc_1000d8c4, %dec_label_pc_1000d8b4, %dec_label_pc_1000d8a3, %dec_label_pc_1000d882, %dec_label_pc_1000d8d2
  %v0_1000d8f2 = phi i32 [ %v2_1000d8c6, %dec_label_pc_1000d8c4 ], [ %v2_1000d8b6, %dec_label_pc_1000d8b4 ], [ %v6_1000d8aa, %dec_label_pc_1000d8a3 ], [ %v9_1000d899, %dec_label_pc_1000d882 ], [ %v2_1000d8e5, %dec_label_pc_1000d8d2 ]
  %v2_1000d8ef = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1000d8ef, i32* @edi, align 4
  store i32 %v0_1000d843, i32* @esi, align 4
  ret i32 %v0_1000d8f2

; uselistorder directives
  uselistorder x86_fp80 %v4_1000d866, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_1000d8ef, { 4, 0, 1, 2, 3 }
}

define i32 @function_1000d900(i8* %arg1) local_unnamed_addr {
dec_label_pc_1000d900:
  %v4_1000d900 = ptrtoint i8* %arg1 to i32
  %v1_1000d904 = and i32 %v4_1000d900, 3
  %v2_1000d904 = icmp eq i32 %v1_1000d904, 0
  br i1 %v2_1000d904, label %dec_label_pc_1000d920, label %dec_label_pc_1000d90c

dec_label_pc_1000d90c:                            ; preds = %dec_label_pc_1000d900, %dec_label_pc_1000d913
  %v0_1000d90e = phi i32 [ %v1_1000d90e, %dec_label_pc_1000d913 ], [ %v4_1000d900, %dec_label_pc_1000d900 ]
  %.0 = phi i32 [ %v6_1000d90c, %dec_label_pc_1000d913 ], [ undef, %dec_label_pc_1000d900 ]
  %v1_1000d90c = inttoptr i32 %v0_1000d90e to i8*
  %v2_1000d90c = load i8, i8* %v1_1000d90c, align 1
  %v1_1000d90e = add i32 %v0_1000d90e, 1
  %v4_1000d90f = icmp eq i8 %v2_1000d90c, 0
  br i1 %v4_1000d90f, label %dec_label_pc_1000d953, label %dec_label_pc_1000d913

dec_label_pc_1000d913:                            ; preds = %dec_label_pc_1000d90c
  %v3_1000d90c = zext i8 %v2_1000d90c to i32
  %v5_1000d90c = and i32 %.0, -256
  %v6_1000d90c = or i32 %v3_1000d90c, %v5_1000d90c
  %v1_1000d913 = and i32 %v1_1000d90e, 3
  %v2_1000d913 = icmp eq i32 %v1_1000d913, 0
  %v1_1000d919 = icmp eq i1 %v2_1000d913, false
  br i1 %v1_1000d919, label %dec_label_pc_1000d90c, label %dec_label_pc_1000d91b

dec_label_pc_1000d91b:                            ; preds = %dec_label_pc_1000d913
  br label %dec_label_pc_1000d920

dec_label_pc_1000d920:                            ; preds = %dec_label_pc_1000d94a, %dec_label_pc_1000d920, %dec_label_pc_1000d900, %dec_label_pc_1000d91b
  %v0_1000d92e = phi i32 [ %v4_1000d900, %dec_label_pc_1000d900 ], [ %v1_1000d90e, %dec_label_pc_1000d91b ], [ %v1_1000d92e, %dec_label_pc_1000d920 ], [ %v1_1000d92e, %dec_label_pc_1000d94a ]
  %v1_1000d920 = inttoptr i32 %v0_1000d92e to i32*
  %v2_1000d920 = load i32, i32* %v1_1000d920, align 4
  %v2_1000d927 = add i32 %v2_1000d920, 2130640639
  store i32 %v2_1000d927, i32* @edx, align 4
  %v1_1000d929 = sub i32 -1, %v2_1000d920
  %v2_1000d92c = xor i32 %v2_1000d927, %v1_1000d929
  %v1_1000d92e = add i32 %v0_1000d92e, 4
  %v1_1000d931 = and i32 %v2_1000d92c, -2130640640
  %v2_1000d931 = icmp eq i32 %v1_1000d931, 0
  br i1 %v2_1000d931, label %dec_label_pc_1000d920, label %dec_label_pc_1000d938

dec_label_pc_1000d938:                            ; preds = %dec_label_pc_1000d920
  %v3_1000d938 = load i32, i32* %v1_1000d920, align 4
  %v3_1000d93b = trunc i32 %v3_1000d938 to i8
  %v4_1000d93b = icmp eq i8 %v3_1000d93b, 0
  br i1 %v4_1000d93b, label %dec_label_pc_1000d971, label %dec_label_pc_1000d93f

dec_label_pc_1000d93f:                            ; preds = %dec_label_pc_1000d938
  %tmp16 = and i32 %v3_1000d938, 65280
  %v5_1000d93f = icmp eq i32 %tmp16, 0
  br i1 %v5_1000d93f, label %dec_label_pc_1000d967, label %dec_label_pc_1000d943

dec_label_pc_1000d943:                            ; preds = %dec_label_pc_1000d93f
  %v1_1000d943 = and i32 %v3_1000d938, 16711680
  %v2_1000d943 = icmp eq i32 %v1_1000d943, 0
  br i1 %v2_1000d943, label %dec_label_pc_1000d95d, label %dec_label_pc_1000d94a

dec_label_pc_1000d94a:                            ; preds = %dec_label_pc_1000d943
  %v2_1000d94a = icmp ult i32 %v3_1000d938, 16777216
  br i1 %v2_1000d94a, label %dec_label_pc_1000d953.loopexit, label %dec_label_pc_1000d920

dec_label_pc_1000d953.loopexit:                   ; preds = %dec_label_pc_1000d94a
  br label %dec_label_pc_1000d953

dec_label_pc_1000d953:                            ; preds = %dec_label_pc_1000d90c, %dec_label_pc_1000d953.loopexit
  %v0_1000d953 = phi i32 [ %v1_1000d92e, %dec_label_pc_1000d953.loopexit ], [ %v1_1000d90e, %dec_label_pc_1000d90c ]
  %v1_1000d953 = add i32 %v0_1000d953, -1
  %v2_1000d95a = sub i32 %v1_1000d953, %v4_1000d900
  ret i32 %v2_1000d95a

dec_label_pc_1000d95d:                            ; preds = %dec_label_pc_1000d943
  %v1_1000d95d = add i32 %v0_1000d92e, 2
  %v2_1000d964 = sub i32 %v1_1000d95d, %v4_1000d900
  ret i32 %v2_1000d964

dec_label_pc_1000d967:                            ; preds = %dec_label_pc_1000d93f
  %v1_1000d967 = add i32 %v0_1000d92e, 1
  %v2_1000d96e = sub i32 %v1_1000d967, %v4_1000d900
  ret i32 %v2_1000d96e

dec_label_pc_1000d971:                            ; preds = %dec_label_pc_1000d938
  %v2_1000d978 = sub i32 %v0_1000d92e, %v4_1000d900
  ret i32 %v2_1000d978

; uselistorder directives
  uselistorder i32 %v3_1000d938, { 1, 2, 0, 3 }
  uselistorder i32 %v1_1000d92e, { 2, 1, 0 }
  uselistorder i8 %v2_1000d90c, { 1, 0 }
  uselistorder i32 %v4_1000d900, { 5, 4, 3, 2, 0, 1, 6 }
  uselistorder i32 16711680, { 4, 2, 3, 1, 0 }
  uselistorder i32 65280, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_1000d953, { 1, 0 }
  uselistorder label %dec_label_pc_1000d920, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_1000d90c, { 1, 0 }
}

define i32 @function_1000d97b(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000d97b:
  call void @llvm.trap()
  unreachable
}

define i32 @function_1000d9e5(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000d9e5:
  %v1_1000d9e7 = call i32 @function_100103fb(i32 9)
  ret i32 %v1_1000d9e7
}

define i32 @function_1000d9ee() local_unnamed_addr {
dec_label_pc_1000d9ee:
  %v0_1000d9ee = load i32, i32* @eax, align 4
  %v9_1000d9ee = icmp eq i32 %v0_1000d9ee, 2
  %v1_1000d9f1 = icmp eq i1 %v9_1000d9ee, false
  call void @__pseudo_cond_branch(i1 %v1_1000d9f1, i32 ptrtoint ([3 x i8]* @global_var_1000da46.103 to i32))
  %v1_1000d9f5 = call i32 @function_1001039a(i32 9)
  %v0_1000d9fb = load i32, i32* @ebp, align 4
  %v1_1000d9fb = add i32 %v0_1000d9fb, -4
  %v2_1000d9fb = inttoptr i32 %v1_1000d9fb to i32*
  store i32 1, i32* %v2_1000d9fb, align 4
  %v0_1000da02 = load i32, i32* @ebp, align 4
  %v1_1000da02 = add i32 %v0_1000da02, -32
  %v1_1000da06 = add i32 %v0_1000da02, -40
  %v0_1000da0a = load i32, i32* @esi, align 4
  %v3_1000da0b = trunc i32 %v0_1000da0a to i16
  %v4_1000da0b = call i32 @function_1000ff3d(i16 %v3_1000da0b, i32 %v1_1000da06, i32 %v1_1000da02)
  %v1_1000da13 = load i32, i32* @ebp, align 4
  %v2_1000da13 = add i32 %v1_1000da13, -36
  %v3_1000da13 = inttoptr i32 %v2_1000da13 to i32*
  store i32 %v4_1000da0b, i32* %v3_1000da13, align 4
  %v1_1000da16 = icmp eq i32 %v4_1000da0b, 0
  br i1 %v1_1000da16, label %dec_label_pc_1000da29, label %dec_label_pc_1000da1a

dec_label_pc_1000da1a:                            ; preds = %dec_label_pc_1000d9ee
  %v0_1000da1b = load i32, i32* @ebp, align 4
  %v1_1000da1b = add i32 %v0_1000da1b, -32
  %v2_1000da1b = inttoptr i32 %v1_1000da1b to i32*
  %v3_1000da1b = load i32, i32* %v2_1000da1b, align 4
  %v1_1000da1e = add i32 %v0_1000da1b, -40
  %v2_1000da1e = inttoptr i32 %v1_1000da1e to i32*
  %v3_1000da1e = load i32, i32* %v2_1000da1e, align 4
  %v3_1000da21 = inttoptr i32 %v4_1000da0b to i8*
  %v4_1000da21 = call i32 @function_1000ff94(i32 %v3_1000da1e, i32 %v3_1000da1b, i8* %v3_1000da21)
  br label %dec_label_pc_1000da29

dec_label_pc_1000da29:                            ; preds = %dec_label_pc_1000d9ee, %dec_label_pc_1000da1a
  %v4_1000da29 = load i32, i32* @ebp, align 4
  %v5_1000da29 = add i32 %v4_1000da29, -4
  %v6_1000da29 = inttoptr i32 %v5_1000da29 to i32*
  store i32 -1, i32* %v6_1000da29, align 4
  %v0_1000da2d = call i32 @function_1000da3d()
  ret i32 %v0_1000da2d

; uselistorder directives
  uselistorder i32 -40, { 4, 5, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_1000da29, { 1, 0 }
}

define i32 @function_1000da36() local_unnamed_addr {
dec_label_pc_1000da36:
  %v0_1000da36 = load i1, i1* @zf, align 1
  %v1_1000da36 = icmp eq i1 %v0_1000da36, false
  call void @__pseudo_cond_branch(i1 %v1_1000da36, i32 ptrtoint (i32* @global_var_1000da55.101 to i32))
  %v0_1000da38 = load i32, i32* @ebp, align 4
  %v1_1000da38 = add i32 %v0_1000da38, 8
  %v2_1000da38 = inttoptr i32 %v1_1000da38 to i32*
  %v3_1000da38 = load i32, i32* %v2_1000da38, align 4
  %v1_1000da3b = call i32 @function_1000da47(i32 %v3_1000da38)
  ret i32 %v1_1000da3b
}

define i32 @function_1000da3d() local_unnamed_addr {
dec_label_pc_1000da3d:
  %v1_1000da3f = call i32 @function_100103fb(i32 9)
  ret i32 %v1_1000da3f
}

define i32 @function_1000da47(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000da47:
  %v0_1000da49 = load i32, i32* @global_var_1001bb10.104, align 16
  %v4_1000da4f = inttoptr i32 %v0_1000da49 to i32*
  %v5_1000da4f = call i1 @HeapFree(i32* %v4_1000da4f, i32 0, i32* nonnull @0)
  call void @llvm.trap()
  unreachable
}

define i32 @function_1000da64(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000da64:
  %v0_1000da64 = load i32, i32* @global_var_1001b498.105, align 8
  %v2_1000da6e = call i32 @__nh_malloc(i32 %arg1, i32 %v0_1000da64)
  ret i32 %v2_1000da6e
}

declare i32 @__nh_malloc(i32, i32) local_unnamed_addr

define i32 @function_1000daa2(i32 %arg1) local_unnamed_addr {
entry:
  call void @llvm.trap()
  unreachable
}

define i32 @function_1000db09(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000db09:
  %v1_1000db0b = call i32 @function_100103fb(i32 9)
  ret i32 %v1_1000db0b
}

define i32 @function_1000db12() local_unnamed_addr {
dec_label_pc_1000db12:
  %stack_var_0 = alloca i32, align 4
  %v0_1000db12 = load i32, i32* @eax, align 4
  %v9_1000db12 = icmp eq i32 %v0_1000db12, 2
  %v1_1000db15 = icmp eq i1 %v9_1000db12, false
  call void @__pseudo_cond_branch(i1 %v1_1000db15, i32 268491633)
  %v0_1000db17 = load i32, i32* @ebp, align 4
  %v1_1000db17 = add i32 %v0_1000db17, 8
  %v2_1000db17 = inttoptr i32 %v1_1000db17 to i32*
  %v3_1000db17 = load i32, i32* %v2_1000db17, align 4
  %v1_1000db1a = icmp eq i32 %v3_1000db17, 0
  br i1 %v1_1000db1a, label %dec_label_pc_1000db26, label %dec_label_pc_1000db1e

dec_label_pc_1000db1e:                            ; preds = %dec_label_pc_1000db12
  %v1_1000db1e = add i32 %v3_1000db17, 15
  %v1_1000db21 = and i32 %v1_1000db1e, -16
  br label %dec_label_pc_1000db29

dec_label_pc_1000db26:                            ; preds = %dec_label_pc_1000db12
  br label %dec_label_pc_1000db29

dec_label_pc_1000db29:                            ; preds = %dec_label_pc_1000db1e, %dec_label_pc_1000db26
  %storemerge = phi i32 [ %v1_1000db21, %dec_label_pc_1000db1e ], [ 16, %dec_label_pc_1000db26 ]
  %v0_1000db29 = phi i32 [ %v1_1000db21, %dec_label_pc_1000db1e ], [ 16, %dec_label_pc_1000db26 ]
  store i32 %storemerge, i32* @esi, align 4
  store i32 %v0_1000db29, i32* %v2_1000db17, align 4
  %v0_1000db2c = load i32, i32* @esi, align 4
  %v1_1000db2c = load i32, i32* @global_var_1001a734.108, align 4
  %v6_1000db32 = icmp ugt i32 %v0_1000db2c, %v1_1000db2c
  br i1 %v6_1000db32, label %dec_label_pc_1000db29.dec_label_pc_1000db62_crit_edge, label %dec_label_pc_1000db34

dec_label_pc_1000db29.dec_label_pc_1000db62_crit_edge: ; preds = %dec_label_pc_1000db29
  br label %dec_label_pc_1000db62

dec_label_pc_1000db34:                            ; preds = %dec_label_pc_1000db29
  %v1_1000db36 = call i32 @function_1001039a(i32 9)
  %v0_1000db3c = load i32, i32* @ebp, align 4
  %v1_1000db3c = add i32 %v0_1000db3c, -4
  %v2_1000db3c = inttoptr i32 %v1_1000db3c to i32*
  store i32 1, i32* %v2_1000db3c, align 4
  %v0_1000db43 = load i32, i32* @esi, align 4
  %v2_1000db45 = udiv i32 %v0_1000db43, 16
  %v4_1000db45 = trunc i32 %v2_1000db45 to i8
  %v2_1000db49 = call i32 @function_1000ffd9(i8 %v4_1000db45)
  %v1_1000db4f = load i32, i32* @ebp, align 4
  %v2_1000db4f = add i32 %v1_1000db4f, -28
  %v3_1000db4f = inttoptr i32 %v2_1000db4f to i32*
  store i32 %v2_1000db49, i32* %v3_1000db4f, align 4
  %v4_1000db52 = load i32, i32* @ebp, align 4
  %v5_1000db52 = add i32 %v4_1000db52, -4
  %v6_1000db52 = inttoptr i32 %v5_1000db52 to i32*
  store i32 -1, i32* %v6_1000db52, align 4
  %v0_1000db56 = call i32 @function_1000db68()
  %v0_1000db5b = load i32, i32* @ebp, align 4
  %v1_1000db5b = add i32 %v0_1000db5b, -28
  %v2_1000db5b = inttoptr i32 %v1_1000db5b to i32*
  %v3_1000db5b = load i32, i32* %v2_1000db5b, align 4
  %v1_1000db5e = icmp eq i32 %v3_1000db5b, 0
  %v1_1000db60 = icmp eq i1 %v1_1000db5e, false
  call void @__pseudo_cond_branch(i1 %v1_1000db60, i32 ptrtoint (i32* @global_var_1000db8f.109 to i32))
  %v0_1000db62.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000db62

dec_label_pc_1000db62:                            ; preds = %dec_label_pc_1000db29.dec_label_pc_1000db62_crit_edge, %dec_label_pc_1000db34
  %v0_1000db62 = phi i32 [ %v0_1000db2c, %dec_label_pc_1000db29.dec_label_pc_1000db62_crit_edge ], [ %v0_1000db62.pre, %dec_label_pc_1000db34 ]
  %v1_1000db63 = load i32, i32* %stack_var_0, align 4
  %v2_1000db63 = inttoptr i32 %v0_1000db62 to i32*
  %v4_1000db63 = call i32* @HeapAlloc(i32* %v2_1000db63, i32 %v1_1000db63, i32 ptrtoint (i32* @0 to i32))
  %v5_1000db63 = ptrtoint i32* %v4_1000db63 to i32
  ret i32 %v5_1000db63

; uselistorder directives
  uselistorder i32 %v1_1000db21, { 1, 0 }
  uselistorder label %dec_label_pc_1000db62, { 1, 0 }
  uselistorder label %dec_label_pc_1000db29, { 1, 0 }
}

define i32 @function_1000db68() local_unnamed_addr {
dec_label_pc_1000db68:
  %v1_1000db6a = call i32 @function_100103fb(i32 9)
  ret i32 %v1_1000db6a
}

define i32 @function_1000db71() local_unnamed_addr {
dec_label_pc_1000db71:
  %v0_1000db71 = load i32, i32* @ebp, align 4
  %v1_1000db71 = add i32 %v0_1000db71, 8
  %v2_1000db71 = inttoptr i32 %v1_1000db71 to i32*
  %v3_1000db71 = load i32, i32* %v2_1000db71, align 4
  %v1_1000db74 = icmp eq i32 %v3_1000db71, 0
  %v1_1000db76 = icmp eq i1 %v1_1000db74, false
  br i1 %v1_1000db76, label %dec_label_pc_1000db71.dec_label_pc_1000db7b_crit_edge, label %dec_label_pc_1000db78

dec_label_pc_1000db71.dec_label_pc_1000db7b_crit_edge: ; preds = %dec_label_pc_1000db71
  %phitmp = add i32 %v3_1000db71, 15
  %phitmp3 = and i32 %phitmp, -16
  br label %dec_label_pc_1000db7b

dec_label_pc_1000db78:                            ; preds = %dec_label_pc_1000db71
  br label %dec_label_pc_1000db7b

dec_label_pc_1000db7b:                            ; preds = %dec_label_pc_1000db71.dec_label_pc_1000db7b_crit_edge, %dec_label_pc_1000db78
  %v0_1000db7b = phi i32 [ %phitmp3, %dec_label_pc_1000db71.dec_label_pc_1000db7b_crit_edge ], [ 16, %dec_label_pc_1000db78 ]
  ret i32 %v0_1000db7b

; uselistorder directives
  uselistorder label %dec_label_pc_1000db7b, { 1, 0 }
}

define i32* @function_1000db81(i32* %hHeap, i32 %dwFlags, i32 %dwBytes) local_unnamed_addr {
dec_label_pc_1000db81:
  %v6_1000db89 = call i32* @HeapAlloc(i32* %hHeap, i32 %dwFlags, i32 %dwBytes)
  ret i32* %v6_1000db89
}

define i32 @function_1000db8f() local_unnamed_addr {
dec_label_pc_1000db8f:
  call void @llvm.trap()
  unreachable
}

define i32 @function_1000dba0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000dba0:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_1000dba3 = load i32, i32* @edi, align 4
  %v0_1000dba4 = load i32, i32* @esi, align 4
  store i32 %v0_1000dba4, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @esi, align 4
  store i32 %arg3, i32* %ecx.global-to-local, align 4
  %v4_1000dbab = ptrtoint i8* %arg1 to i32
  store i32 %v4_1000dbab, i32* @edi, align 4
  %v2_1000dbb2 = add i32 %arg3, %arg2
  store i32 %v2_1000dbb2, i32* %eax.global-to-local, align 4
  %tmp = icmp ugt i32 %v4_1000dbab, %arg2
  br i1 %tmp, label %dec_label_pc_1000dbb8, label %dec_label_pc_1000dbc0

dec_label_pc_1000dbb8:                            ; preds = %dec_label_pc_1000dba0
  %v7_1000dbb8 = icmp ult i32 %v4_1000dbab, %v2_1000dbb2
  br i1 %v7_1000dbb8, label %dec_label_pc_1000dd38, label %dec_label_pc_1000dbc0

dec_label_pc_1000dbc0:                            ; preds = %dec_label_pc_1000dba0, %dec_label_pc_1000dbb8
  %v1_1000dbc0 = and i32 %v4_1000dbab, 3
  %v2_1000dbc0 = icmp eq i32 %v1_1000dbc0, 0
  %v1_1000dbc6 = icmp eq i1 %v2_1000dbc0, false
  br i1 %v1_1000dbc6, label %dec_label_pc_1000dbdc, label %dec_label_pc_1000dbc8

dec_label_pc_1000dbc8:                            ; preds = %dec_label_pc_1000dbc0
  %v2_1000dbc8 = udiv i32 %arg3, 4
  store i32 %v2_1000dbc8, i32* %ecx.global-to-local, align 4
  %v1_1000dbcb = and i32 %arg3, 3
  store i32 %v1_1000dbcb, i32* @edx, align 4
  %v3_1000dbd3 = inttoptr i32 %arg2 to i8*
  %v5_1000dbd3 = call i8* @_memcpy(i8* %arg1, i8* %v3_1000dbd3, i32 %v2_1000dbc8)
  %v6_1000dbd3 = ptrtoint i8* %v5_1000dbd3 to i32
  store i32 %v6_1000dbd3, i32* %ecx.global-to-local, align 4
  %trunc = trunc i32 %arg3 to i2
  switch i2 %trunc, label %dec_label_pc_1000dbfc3 [
    i2 0, label %dec_label_pc_1000dcf8
    i2 1, label %dec_label_pc_1000dd00
    i2 -2, label %dec_label_pc_1000dd0c
    i2 -1, label %dec_label_pc_1000dd20
  ]

dec_label_pc_1000dbdc:                            ; preds = %dec_label_pc_1000dbc0
  %v1_1000dbe3 = add i32 %arg3, -4
  store i32 %v1_1000dbc0, i32* %eax.global-to-local, align 4
  %v2_1000dbeb = add i32 %v1_1000dbe3, %v1_1000dbc0
  store i32 %v2_1000dbeb, i32* %ecx.global-to-local, align 4
  %v1_1000dbed = mul nuw nsw i32 %v1_1000dbc0, 4
  %v2_1000dbed = add i32 %v1_1000dbed, ptrtoint (i32* @global_var_1000dc00.111 to i32)
  %v3_1000dbed = inttoptr i32 %v2_1000dbed to i32*
  %v4_1000dbed = load i32, i32* %v3_1000dbed, align 4
  call void @__pseudo_branch(i32 %v4_1000dbed)
  br label %dec_label_pc_1000dbf4

dec_label_pc_1000dbf4:                            ; preds = %dec_label_pc_1000dbfc, %dec_label_pc_1000dbdc
  %v0_1000dbf4 = phi i32 [ %v2_1000dbeb, %dec_label_pc_1000dbdc ], [ %v2_1000dca0, %dec_label_pc_1000dbfc ]
  %v1_1000dbf4 = mul i32 %v0_1000dbf4, 4
  %v2_1000dbf4 = add i32 %v1_1000dbf4, ptrtoint (i32* @global_var_1000dcf8.112 to i32)
  %v3_1000dbf4 = inttoptr i32 %v2_1000dbf4 to i32*
  %v4_1000dbf4 = load i32, i32* %v3_1000dbf4, align 4
  call void @__pseudo_branch(i32 %v4_1000dbf4)
  %v0_1000dbfc.pr.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000dbfcthread-pre-split

dec_label_pc_1000dbfc3:                           ; preds = %dec_label_pc_1000dbc8
  unreachable

dec_label_pc_1000dbfcthread-pre-split:            ; preds = %dec_label_pc_1000dbf4, %dec_label_pc_1000dccc
  %v2_1000dca0 = phi i32 [ %v0_1000dbfc.pr.pre, %dec_label_pc_1000dbf4 ], [ %v0_1000dcd4, %dec_label_pc_1000dccc ]
  br label %dec_label_pc_1000dbfc

dec_label_pc_1000dbfc:                            ; preds = %dec_label_pc_1000dbfcthread-pre-split, %dec_label_pc_1000dbfc
  %v0_1000dbfc = phi i32 [ %v2_1000dca0, %dec_label_pc_1000dbfcthread-pre-split ], [ 0, %dec_label_pc_1000dbfc ]
  switch i32 %v0_1000dbfc, label %dec_label_pc_1000dbf4 [
    i32 0, label %dec_label_pc_1000dbfc
    i32 1, label %dec_label_pc_1000dccc
    i32 2, label %dec_label_pc_1000dcc4
    i32 3, label %dec_label_pc_1000dcbc
    i32 4, label %dec_label_pc_1000dcb4
    i32 5, label %dec_label_pc_1000dcac
    i32 6, label %dec_label_pc_1000dca4
    i32 7, label %dec_label_pc_1000dc9c
  ]

dec_label_pc_1000dc9c:                            ; preds = %dec_label_pc_1000dbfc
  %v0_1000dc9c = load i32, i32* @esi, align 4
  %v5_1000dc9c = inttoptr i32 %v0_1000dc9c to i32*
  %v6_1000dc9c = load i32, i32* %v5_1000dc9c, align 4
  store i32 %v6_1000dc9c, i32* %eax.global-to-local, align 4
  %v1_1000dca0 = load i32, i32* @edi, align 4
  %v3_1000dca0 = mul i32 %v2_1000dca0, 4
  %v4_1000dca0 = add i32 %v3_1000dca0, -28
  %v5_1000dca0 = add i32 %v4_1000dca0, %v1_1000dca0
  %v6_1000dca0 = inttoptr i32 %v5_1000dca0 to i32*
  store i32 %v6_1000dc9c, i32* %v6_1000dca0, align 4
  %v1_1000dca4.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000dca4

dec_label_pc_1000dca4:                            ; preds = %dec_label_pc_1000dbfc, %dec_label_pc_1000dc9c
  %v2_1000dca8 = phi i32 [ %v1_1000dca4.pre, %dec_label_pc_1000dc9c ], [ %v2_1000dca0, %dec_label_pc_1000dbfc ]
  %v0_1000dca4 = load i32, i32* @esi, align 4
  %v2_1000dca4 = mul i32 %v2_1000dca8, 4
  %v3_1000dca4 = add i32 %v0_1000dca4, -24
  %v4_1000dca4 = add i32 %v3_1000dca4, %v2_1000dca4
  %v5_1000dca4 = inttoptr i32 %v4_1000dca4 to i32*
  %v6_1000dca4 = load i32, i32* %v5_1000dca4, align 4
  store i32 %v6_1000dca4, i32* %eax.global-to-local, align 4
  %v1_1000dca8 = load i32, i32* @edi, align 4
  %v4_1000dca8 = add i32 %v2_1000dca4, -24
  %v5_1000dca8 = add i32 %v4_1000dca8, %v1_1000dca8
  %v6_1000dca8 = inttoptr i32 %v5_1000dca8 to i32*
  store i32 %v6_1000dca4, i32* %v6_1000dca8, align 4
  %v1_1000dcac.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000dcac

dec_label_pc_1000dcac:                            ; preds = %dec_label_pc_1000dbfc, %dec_label_pc_1000dca4
  %v2_1000dcb0 = phi i32 [ %v1_1000dcac.pre, %dec_label_pc_1000dca4 ], [ %v2_1000dca0, %dec_label_pc_1000dbfc ]
  %v0_1000dcac = load i32, i32* @esi, align 4
  %v2_1000dcac = mul i32 %v2_1000dcb0, 4
  %v3_1000dcac = add i32 %v0_1000dcac, -20
  %v4_1000dcac = add i32 %v3_1000dcac, %v2_1000dcac
  %v5_1000dcac = inttoptr i32 %v4_1000dcac to i32*
  %v6_1000dcac = load i32, i32* %v5_1000dcac, align 4
  store i32 %v6_1000dcac, i32* %eax.global-to-local, align 4
  %v1_1000dcb0 = load i32, i32* @edi, align 4
  %v4_1000dcb0 = add i32 %v2_1000dcac, -20
  %v5_1000dcb0 = add i32 %v4_1000dcb0, %v1_1000dcb0
  %v6_1000dcb0 = inttoptr i32 %v5_1000dcb0 to i32*
  store i32 %v6_1000dcac, i32* %v6_1000dcb0, align 4
  %v1_1000dcb4.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000dcb4

dec_label_pc_1000dcb4:                            ; preds = %dec_label_pc_1000dbfc, %dec_label_pc_1000dcac
  %v2_1000dcb8 = phi i32 [ %v1_1000dcb4.pre, %dec_label_pc_1000dcac ], [ %v2_1000dca0, %dec_label_pc_1000dbfc ]
  %v0_1000dcb4 = load i32, i32* @esi, align 4
  %v2_1000dcb4 = mul i32 %v2_1000dcb8, 4
  %v3_1000dcb4 = add i32 %v0_1000dcb4, -16
  %v4_1000dcb4 = add i32 %v3_1000dcb4, %v2_1000dcb4
  %v5_1000dcb4 = inttoptr i32 %v4_1000dcb4 to i32*
  %v6_1000dcb4 = load i32, i32* %v5_1000dcb4, align 4
  store i32 %v6_1000dcb4, i32* %eax.global-to-local, align 4
  %v1_1000dcb8 = load i32, i32* @edi, align 4
  %v4_1000dcb8 = add i32 %v2_1000dcb4, -16
  %v5_1000dcb8 = add i32 %v4_1000dcb8, %v1_1000dcb8
  %v6_1000dcb8 = inttoptr i32 %v5_1000dcb8 to i32*
  store i32 %v6_1000dcb4, i32* %v6_1000dcb8, align 4
  %v1_1000dcbc.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000dcbc

dec_label_pc_1000dcbc:                            ; preds = %dec_label_pc_1000dbfc, %dec_label_pc_1000dcb4
  %v2_1000dcc0 = phi i32 [ %v1_1000dcbc.pre, %dec_label_pc_1000dcb4 ], [ %v2_1000dca0, %dec_label_pc_1000dbfc ]
  %v0_1000dcbc = load i32, i32* @esi, align 4
  %v2_1000dcbc = mul i32 %v2_1000dcc0, 4
  %v3_1000dcbc = add i32 %v0_1000dcbc, -12
  %v4_1000dcbc = add i32 %v3_1000dcbc, %v2_1000dcbc
  %v5_1000dcbc = inttoptr i32 %v4_1000dcbc to i32*
  %v6_1000dcbc = load i32, i32* %v5_1000dcbc, align 4
  store i32 %v6_1000dcbc, i32* %eax.global-to-local, align 4
  %v1_1000dcc0 = load i32, i32* @edi, align 4
  %v4_1000dcc0 = add i32 %v2_1000dcbc, -12
  %v5_1000dcc0 = add i32 %v4_1000dcc0, %v1_1000dcc0
  %v6_1000dcc0 = inttoptr i32 %v5_1000dcc0 to i32*
  store i32 %v6_1000dcbc, i32* %v6_1000dcc0, align 4
  %v1_1000dcc4.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000dcc4

dec_label_pc_1000dcc4:                            ; preds = %dec_label_pc_1000dbfc, %dec_label_pc_1000dcbc
  %v2_1000dcc8 = phi i32 [ %v1_1000dcc4.pre, %dec_label_pc_1000dcbc ], [ %v2_1000dca0, %dec_label_pc_1000dbfc ]
  %v0_1000dcc4 = load i32, i32* @esi, align 4
  %v2_1000dcc4 = mul i32 %v2_1000dcc8, 4
  %v3_1000dcc4 = add i32 %v0_1000dcc4, -8
  %v4_1000dcc4 = add i32 %v3_1000dcc4, %v2_1000dcc4
  %v5_1000dcc4 = inttoptr i32 %v4_1000dcc4 to i32*
  %v6_1000dcc4 = load i32, i32* %v5_1000dcc4, align 4
  store i32 %v6_1000dcc4, i32* %eax.global-to-local, align 4
  %v1_1000dcc8 = load i32, i32* @edi, align 4
  %v4_1000dcc8 = add i32 %v2_1000dcc4, -8
  %v5_1000dcc8 = add i32 %v4_1000dcc8, %v1_1000dcc8
  %v6_1000dcc8 = inttoptr i32 %v5_1000dcc8 to i32*
  store i32 %v6_1000dcc4, i32* %v6_1000dcc8, align 4
  %v1_1000dccc.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000dccc

dec_label_pc_1000dccc:                            ; preds = %dec_label_pc_1000dbfc, %dec_label_pc_1000dcc4
  %v2_1000dcd0 = phi i32 [ %v1_1000dccc.pre, %dec_label_pc_1000dcc4 ], [ %v2_1000dca0, %dec_label_pc_1000dbfc ]
  %v0_1000dccc = load i32, i32* @esi, align 4
  %v2_1000dccc = mul i32 %v2_1000dcd0, 4
  %v3_1000dccc = add i32 %v0_1000dccc, -4
  %v4_1000dccc = add i32 %v3_1000dccc, %v2_1000dccc
  %v5_1000dccc = inttoptr i32 %v4_1000dccc to i32*
  %v6_1000dccc = load i32, i32* %v5_1000dccc, align 4
  %v1_1000dcd0 = load i32, i32* @edi, align 4
  %v4_1000dcd0 = add i32 %v2_1000dccc, -4
  %v5_1000dcd0 = add i32 %v4_1000dcd0, %v1_1000dcd0
  %v6_1000dcd0 = inttoptr i32 %v5_1000dcd0 to i32*
  store i32 %v6_1000dccc, i32* %v6_1000dcd0, align 4
  %v0_1000dcd4 = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000dcd4 = mul i32 %v0_1000dcd4, 4
  store i32 %v1_1000dcd4, i32* %eax.global-to-local, align 4
  %v0_1000dcdb = load i32, i32* @esi, align 4
  %v2_1000dcdb = add i32 %v0_1000dcdb, %v1_1000dcd4
  store i32 %v2_1000dcdb, i32* @esi, align 4
  %v0_1000dcdd = load i32, i32* @edi, align 4
  %v2_1000dcdd = add i32 %v0_1000dcdd, %v1_1000dcd4
  store i32 %v2_1000dcdd, i32* @edi, align 4
  br label %dec_label_pc_1000dbfcthread-pre-split

dec_label_pc_1000dcf8:                            ; preds = %dec_label_pc_1000dbc8
  store i32 %v4_1000dbab, i32* %eax.global-to-local, align 4
  %v2_1000dcfb = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000dcfb, i32* @esi, align 4
  store i32 %v0_1000dba3, i32* @edi, align 4
  ret i32 %v4_1000dbab

dec_label_pc_1000dd00:                            ; preds = %dec_label_pc_1000dbc8
  %v0_1000dd00 = load i32, i32* @esi, align 4
  %v1_1000dd00 = inttoptr i32 %v0_1000dd00 to i8*
  %v2_1000dd00 = load i8, i8* %v1_1000dd00, align 1
  %v2_1000dd02 = load i32, i32* @edi, align 4
  %v3_1000dd02 = inttoptr i32 %v2_1000dd02 to i8*
  store i8 %v2_1000dd00, i8* %v3_1000dd02, align 1
  store i32 %v4_1000dbab, i32* %eax.global-to-local, align 4
  %v2_1000dd07 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000dd07, i32* @esi, align 4
  store i32 %v0_1000dba3, i32* @edi, align 4
  ret i32 %v4_1000dbab

dec_label_pc_1000dd0c:                            ; preds = %dec_label_pc_1000dbc8
  %v0_1000dd0c = load i32, i32* @esi, align 4
  %v1_1000dd0c = inttoptr i32 %v0_1000dd0c to i8*
  %v2_1000dd0c = load i8, i8* %v1_1000dd0c, align 1
  %v3_1000dd0c = zext i8 %v2_1000dd0c to i32
  %v4_1000dd0c = load i32, i32* %eax.global-to-local, align 4
  %v5_1000dd0c = and i32 %v4_1000dd0c, -256
  %v6_1000dd0c = or i32 %v5_1000dd0c, %v3_1000dd0c
  store i32 %v6_1000dd0c, i32* %eax.global-to-local, align 4
  %v2_1000dd0e = load i32, i32* @edi, align 4
  %v3_1000dd0e = inttoptr i32 %v2_1000dd0e to i8*
  store i8 %v2_1000dd0c, i8* %v3_1000dd0e, align 1
  %v0_1000dd10 = load i32, i32* @esi, align 4
  %v1_1000dd10 = add i32 %v0_1000dd10, 1
  %v2_1000dd10 = inttoptr i32 %v1_1000dd10 to i8*
  %v3_1000dd10 = load i8, i8* %v2_1000dd10, align 1
  %v2_1000dd13 = load i32, i32* @edi, align 4
  %v3_1000dd13 = add i32 %v2_1000dd13, 1
  %v4_1000dd13 = inttoptr i32 %v3_1000dd13 to i8*
  store i8 %v3_1000dd10, i8* %v4_1000dd13, align 1
  store i32 %v4_1000dbab, i32* %eax.global-to-local, align 4
  %v2_1000dd19 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000dd19, i32* @esi, align 4
  store i32 %v0_1000dba3, i32* @edi, align 4
  ret i32 %v4_1000dbab

dec_label_pc_1000dd20:                            ; preds = %dec_label_pc_1000dbc8
  %v0_1000dd20 = load i32, i32* @esi, align 4
  %v1_1000dd20 = inttoptr i32 %v0_1000dd20 to i8*
  %v2_1000dd20 = load i8, i8* %v1_1000dd20, align 1
  %v3_1000dd20 = zext i8 %v2_1000dd20 to i32
  %v4_1000dd20 = load i32, i32* %eax.global-to-local, align 4
  %v5_1000dd20 = and i32 %v4_1000dd20, -256
  %v6_1000dd20 = or i32 %v5_1000dd20, %v3_1000dd20
  store i32 %v6_1000dd20, i32* %eax.global-to-local, align 4
  %v2_1000dd22 = load i32, i32* @edi, align 4
  %v3_1000dd22 = inttoptr i32 %v2_1000dd22 to i8*
  store i8 %v2_1000dd20, i8* %v3_1000dd22, align 1
  %v0_1000dd24 = load i32, i32* @esi, align 4
  %v1_1000dd24 = add i32 %v0_1000dd24, 1
  %v2_1000dd24 = inttoptr i32 %v1_1000dd24 to i8*
  %v3_1000dd24 = load i8, i8* %v2_1000dd24, align 1
  %v4_1000dd24 = zext i8 %v3_1000dd24 to i32
  %v5_1000dd24 = load i32, i32* %eax.global-to-local, align 4
  %v6_1000dd24 = and i32 %v5_1000dd24, -256
  %v7_1000dd24 = or i32 %v6_1000dd24, %v4_1000dd24
  store i32 %v7_1000dd24, i32* %eax.global-to-local, align 4
  %v2_1000dd27 = load i32, i32* @edi, align 4
  %v3_1000dd27 = add i32 %v2_1000dd27, 1
  %v4_1000dd27 = inttoptr i32 %v3_1000dd27 to i8*
  store i8 %v3_1000dd24, i8* %v4_1000dd27, align 1
  %v0_1000dd2a = load i32, i32* @esi, align 4
  %v1_1000dd2a = add i32 %v0_1000dd2a, 2
  %v2_1000dd2a = inttoptr i32 %v1_1000dd2a to i8*
  %v3_1000dd2a = load i8, i8* %v2_1000dd2a, align 1
  %v2_1000dd2d = load i32, i32* @edi, align 4
  %v3_1000dd2d = add i32 %v2_1000dd2d, 2
  %v4_1000dd2d = inttoptr i32 %v3_1000dd2d to i8*
  store i8 %v3_1000dd2a, i8* %v4_1000dd2d, align 1
  store i32 %v4_1000dbab, i32* %eax.global-to-local, align 4
  %v2_1000dd33 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000dd33, i32* @esi, align 4
  store i32 %v0_1000dba3, i32* @edi, align 4
  ret i32 %v4_1000dbab

dec_label_pc_1000dd38:                            ; preds = %dec_label_pc_1000dbb8
  %v2_1000dd38 = add i32 %arg3, -4
  %v3_1000dd38 = add i32 %v2_1000dd38, %arg2
  store i32 %v3_1000dd38, i32* @esi, align 4
  %v3_1000dd3c = add i32 %v2_1000dd38, %v4_1000dbab
  store i32 %v3_1000dd3c, i32* @edi, align 4
  %v2_1000dd40 = and i32 %v3_1000dd3c, 3
  %v3_1000dd40 = icmp eq i32 %v2_1000dd40, 0
  %v1_1000dd46 = icmp eq i1 %v3_1000dd40, false
  br i1 %v1_1000dd46, label %dec_label_pc_1000dd6c, label %dec_label_pc_1000dd48

dec_label_pc_1000dd48:                            ; preds = %dec_label_pc_1000dd38
  %v4_1000dd3c = inttoptr i32 %v3_1000dd3c to i8*
  %v4_1000dd38 = inttoptr i32 %v3_1000dd38 to i8*
  %v2_1000dd48 = udiv i32 %arg3, 4
  store i32 %v2_1000dd48, i32* %ecx.global-to-local, align 4
  %v1_1000dd4b = and i32 %arg3, 3
  store i32 %v1_1000dd4b, i32* @edx, align 4
  %v7_1000dd54 = call i8* @_memcpy(i8* %v4_1000dd3c, i8* %v4_1000dd38, i32 %v2_1000dd48)
  %v8_1000dd54 = ptrtoint i8* %v7_1000dd54 to i32
  store i32 %v8_1000dd54, i32* %ecx.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %trunc2 = trunc i32 %arg3 to i2
  switch i2 %trunc2, label %dec_label_pc_1000dd604 [
    i2 0, label %dec_label_pc_1000de90
    i2 1, label %dec_label_pc_1000de98
    i2 -2, label %dec_label_pc_1000dea8
    i2 -1, label %dec_label_pc_1000debc
  ]

dec_label_pc_1000dd604:                           ; preds = %dec_label_pc_1000dd48
  unreachable

dec_label_pc_1000dd6c:                            ; preds = %dec_label_pc_1000dd38
  store i32 3, i32* @edx, align 4
  store i32 %v2_1000dd40, i32* %eax.global-to-local, align 4
  %v2_1000dd7b = sub i32 %arg3, %v2_1000dd40
  store i32 %v2_1000dd7b, i32* %ecx.global-to-local, align 4
  %v1_1000dd7d = mul nuw nsw i32 %v2_1000dd40, 4
  %v2_1000dd7d = add i32 %v1_1000dd7d, ptrtoint (i32* @global_var_1000dd88.116 to i32)
  %v3_1000dd7d = inttoptr i32 %v2_1000dd7d to i32*
  %v4_1000dd7d = load i32, i32* %v3_1000dd7d, align 4
  call void @__pseudo_branch(i32 %v4_1000dd7d)
  br label %dec_label_pc_1000dd84

dec_label_pc_1000dd84:                            ; preds = %dec_label_pc_1000dd84, %dec_label_pc_1000dd6c
  switch i32 %v2_1000dd7b, label %dec_label_pc_1000dd84 [
    i32 0, label %dec_label_pc_1000de90
    i32 1, label %dec_label_pc_1000de98
    i32 2, label %dec_label_pc_1000dea8
    i32 3, label %dec_label_pc_1000debc
  ]

dec_label_pc_1000de90:                            ; preds = %dec_label_pc_1000dd84, %dec_label_pc_1000dd48
  store i32 %v4_1000dbab, i32* %eax.global-to-local, align 4
  %v2_1000de93 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000de93, i32* @esi, align 4
  store i32 %v0_1000dba3, i32* @edi, align 4
  ret i32 %v4_1000dbab

dec_label_pc_1000de98:                            ; preds = %dec_label_pc_1000dd84, %dec_label_pc_1000dd48
  %v2_1000de98 = add i32 %v3_1000dd38, 3
  %v3_1000de98 = inttoptr i32 %v2_1000de98 to i8*
  %v4_1000de98 = load i8, i8* %v3_1000de98, align 1
  %v4_1000de9b = add i32 %v3_1000dd3c, 3
  %v5_1000de9b = inttoptr i32 %v4_1000de9b to i8*
  store i8 %v4_1000de98, i8* %v5_1000de9b, align 1
  store i32 %v4_1000dbab, i32* %eax.global-to-local, align 4
  %v2_1000dea1 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000dea1, i32* @esi, align 4
  store i32 %v0_1000dba3, i32* @edi, align 4
  ret i32 %v4_1000dbab

dec_label_pc_1000dea8:                            ; preds = %dec_label_pc_1000dd84, %dec_label_pc_1000dd48
  %v2_1000dea8 = add i32 %v3_1000dd38, 3
  %v3_1000dea8 = inttoptr i32 %v2_1000dea8 to i8*
  %v4_1000dea8 = load i8, i8* %v3_1000dea8, align 1
  %v5_1000dea8 = zext i8 %v4_1000dea8 to i32
  %v6_1000dea8 = load i32, i32* %eax.global-to-local, align 4
  %v7_1000dea8 = and i32 %v6_1000dea8, -256
  %v8_1000dea8 = or i32 %v7_1000dea8, %v5_1000dea8
  store i32 %v8_1000dea8, i32* %eax.global-to-local, align 4
  %v4_1000deab = add i32 %v3_1000dd3c, 3
  %v5_1000deab = inttoptr i32 %v4_1000deab to i8*
  store i8 %v4_1000dea8, i8* %v5_1000deab, align 1
  %v2_1000deae = add i32 %v3_1000dd38, 2
  %v3_1000deae = inttoptr i32 %v2_1000deae to i8*
  %v4_1000deae = load i8, i8* %v3_1000deae, align 1
  %v4_1000deb1 = add i32 %v3_1000dd3c, 2
  %v5_1000deb1 = inttoptr i32 %v4_1000deb1 to i8*
  store i8 %v4_1000deae, i8* %v5_1000deb1, align 1
  store i32 %v4_1000dbab, i32* %eax.global-to-local, align 4
  %v2_1000deb7 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000deb7, i32* @esi, align 4
  store i32 %v0_1000dba3, i32* @edi, align 4
  ret i32 %v4_1000dbab

dec_label_pc_1000debc:                            ; preds = %dec_label_pc_1000dd84, %dec_label_pc_1000dd48
  %v2_1000debc = add i32 %v3_1000dd38, 3
  %v3_1000debc = inttoptr i32 %v2_1000debc to i8*
  %v4_1000debc = load i8, i8* %v3_1000debc, align 1
  %v5_1000debc = zext i8 %v4_1000debc to i32
  %v6_1000debc = load i32, i32* %eax.global-to-local, align 4
  %v7_1000debc = and i32 %v6_1000debc, -256
  %v8_1000debc = or i32 %v7_1000debc, %v5_1000debc
  store i32 %v8_1000debc, i32* %eax.global-to-local, align 4
  %v4_1000debf = add i32 %v3_1000dd3c, 3
  %v5_1000debf = inttoptr i32 %v4_1000debf to i8*
  store i8 %v4_1000debc, i8* %v5_1000debf, align 1
  %v2_1000dec2 = add i32 %v3_1000dd38, 2
  %v3_1000dec2 = inttoptr i32 %v2_1000dec2 to i8*
  %v4_1000dec2 = load i8, i8* %v3_1000dec2, align 1
  %v5_1000dec2 = zext i8 %v4_1000dec2 to i32
  %v6_1000dec2 = load i32, i32* %eax.global-to-local, align 4
  %v7_1000dec2 = and i32 %v6_1000dec2, -256
  %v8_1000dec2 = or i32 %v7_1000dec2, %v5_1000dec2
  store i32 %v8_1000dec2, i32* %eax.global-to-local, align 4
  %v4_1000dec5 = add i32 %v3_1000dd3c, 2
  %v5_1000dec5 = inttoptr i32 %v4_1000dec5 to i8*
  store i8 %v4_1000dec2, i8* %v5_1000dec5, align 1
  %v2_1000dec8 = add i32 %v3_1000dd38, 1
  %v3_1000dec8 = inttoptr i32 %v2_1000dec8 to i8*
  %v4_1000dec8 = load i8, i8* %v3_1000dec8, align 1
  %v4_1000decb = add i32 %v3_1000dd3c, 1
  %v5_1000decb = inttoptr i32 %v4_1000decb to i8*
  store i8 %v4_1000dec8, i8* %v5_1000decb, align 1
  store i32 %v4_1000dbab, i32* %eax.global-to-local, align 4
  %v2_1000ded1 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000ded1, i32* @esi, align 4
  store i32 %v0_1000dba3, i32* @edi, align 4
  ret i32 %v4_1000dbab

; uselistorder directives
  uselistorder i32 %v2_1000dd48, { 1, 0 }
  uselistorder i32 %v2_1000dd40, { 0, 2, 1, 3 }
  uselistorder i32 %v3_1000dd3c, { 3, 4, 5, 1, 2, 0, 7, 6, 8 }
  uselistorder i32 %v3_1000dd38, { 3, 4, 5, 1, 2, 0, 6, 7 }
  uselistorder i32 %v0_1000dcd4, { 1, 0 }
  uselistorder i32 %v2_1000dccc, { 1, 0 }
  uselistorder i32 %v2_1000dcc4, { 1, 0 }
  uselistorder i32 %v2_1000dcbc, { 1, 0 }
  uselistorder i32 %v2_1000dcb4, { 1, 0 }
  uselistorder i32 %v2_1000dcac, { 1, 0 }
  uselistorder i32 %v2_1000dca4, { 1, 0 }
  uselistorder i32 %v2_1000dca0, { 0, 1, 2, 3, 4, 5, 7, 8, 6 }
  uselistorder i32 %v2_1000dbc8, { 1, 0 }
  uselistorder i32 %v1_1000dbc0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1000dbab, { 4, 5, 6, 7, 8, 9, 10, 11, 1, 12, 13, 14, 15, 16, 17, 18, 19, 2, 3, 0, 20 }
  uselistorder i32 %v0_1000dba3, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 25, 4, 5, 26, 6, 7, 23, 8, 9, 10, 11, 27, 12, 13, 28, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 29 }
  uselistorder i32 %arg3, { 6, 8, 7, 0, 9, 3, 5, 4, 1, 2, 10 }
  uselistorder i32 %arg2, { 1, 3, 0, 2, 4 }
  uselistorder label %dec_label_pc_1000dccc, { 1, 0 }
  uselistorder label %dec_label_pc_1000dcc4, { 1, 0 }
  uselistorder label %dec_label_pc_1000dcbc, { 1, 0 }
  uselistorder label %dec_label_pc_1000dcb4, { 1, 0 }
  uselistorder label %dec_label_pc_1000dcac, { 1, 0 }
  uselistorder label %dec_label_pc_1000dca4, { 1, 0 }
  uselistorder label %dec_label_pc_1000dbfc, { 1, 0 }
  uselistorder label %dec_label_pc_1000dbfcthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_1000dbc0, { 1, 0 }
}

define i32 @function_1000def9(i32 %arg1, i32 %arg2, i8 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000def9:
  %ecx.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %tmp = trunc i32 %arg4 to i8
  %tmp8 = call i32 @__decompiler_undefined_function_1()
  %tmp9 = call i32 @__decompiler_undefined_function_1()
  %tmp13 = call i8 @__decompiler_undefined_function_7()
  %stack_var_-124 = alloca double*, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_4, align 4
  %stack_var_-4 = alloca i16, align 2
  %stack_var_12 = alloca i32, align 4
  %v0_1000defd = call i32 @__fload_withFB()
  store i32 %v0_1000defd, i32* @eax, align 4
  store i32 %v0_1000defd, i32* %ecx.global-to-local, align 4
  %v5_1000df04 = trunc i32 %v0_1000defd to i16
  store i16 %v5_1000df04, i16* %stack_var_-4, align 2
  %v13_1000df09 = icmp eq i16 %v5_1000df04, 639
  store i1 %v13_1000df09, i1* %zf.global-to-local, align 1
  br i1 %v13_1000df09, label %dec_label_pc_1000df16, label %dec_label_pc_1000df11

dec_label_pc_1000df11:                            ; preds = %dec_label_pc_1000def9
  %sext = mul i32 %v0_1000defd, 65536
  %v1_1000df11 = sdiv i32 %sext, 65536
  %v2_1000df11 = call i32 @function_10010a55(i32 %v1_1000df11)
  %v0_1000df16.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000df16

dec_label_pc_1000df16:                            ; preds = %dec_label_pc_1000def9, %dec_label_pc_1000df11
  %v0_1000df16 = phi i32 [ %v0_1000defd, %dec_label_pc_1000def9 ], [ %v0_1000df16.pre, %dec_label_pc_1000df11 ]
  %v0_1000dfcb = phi i32 [ %v0_1000defd, %dec_label_pc_1000def9 ], [ %v2_1000df11, %dec_label_pc_1000df11 ]
  %v1_1000df16 = and i32 %v0_1000df16, 2146435072
  store i32 %v1_1000df16, i32* @ecx, align 4
  %v6_1000df20 = icmp eq i32 %v1_1000df16, 2146435072
  store i1 %v6_1000df20, i1* %zf.global-to-local, align 1
  br i1 %v6_1000df20, label %dec_label_pc_1000dfc9, label %dec_label_pc_1000df2c

dec_label_pc_1000df2c:                            ; preds = %dec_label_pc_1000df16
  %v0_1000df2c = call i32 @__fload_withFB()
  store i32 %v0_1000df2c, i32* @eax, align 4
  %v0_1000df31 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_1000df31, label %dec_label_pc_1000dfc5, label %dec_label_pc_1000df37

dec_label_pc_1000df37:                            ; preds = %dec_label_pc_1000df2c
  %v1_1000df37 = and i32 %v0_1000df2c, 2146435072
  %v2_1000df37 = icmp eq i32 %v1_1000df37, 0
  store i1 %v2_1000df37, i1* %zf.global-to-local, align 1
  br i1 %v2_1000df37, label %dec_label_pc_1000e038, label %dec_label_pc_1000df42

dec_label_pc_1000df42:                            ; preds = %dec_label_pc_1000e038, %dec_label_pc_1000df37
  %v5_1000df42 = load i32, i32* @ecx, align 4
  %v6_1000df42 = and i32 %v5_1000df42, -256
  %v2_1000df46 = and i8 %tmp, -128
  %v3_1000df46 = icmp eq i8 %v2_1000df46, 0
  store i1 %v3_1000df46, i1* %zf.global-to-local, align 1
  %v6_1000df46 = zext i8 %v2_1000df46 to i32
  %v9_1000df46 = or i32 %v6_1000df42, %v6_1000df46
  store i32 %v9_1000df46, i32* @ecx, align 4
  %v1_1000df49 = icmp eq i1 %v3_1000df46, false
  br i1 %v1_1000df49, label %dec_label_pc_1000e0b0, label %dec_label_pc_1000df4f

dec_label_pc_1000df4f:                            ; preds = %dec_label_pc_1000e0b0, %dec_label_pc_1000df42
  %v0_1000df51 = call i32 @function_10010a40()
  %v0_1000df56 = load i32, i32* @ecx, align 4
  %v1_1000df56 = trunc i32 %v0_1000df56 to i8
  %v10_1000df56 = icmp eq i8 %v1_1000df56, 1
  store i1 %v10_1000df56, i1* %zf.global-to-local, align 1
  %v1_1000df59 = icmp eq i1 %v10_1000df56, false
  br i1 %v1_1000df59, label %dec_label_pc_1000df5d, label %dec_label_pc_1000df5b

dec_label_pc_1000df5b:                            ; preds = %dec_label_pc_1000df4f
  %v1_1000df5b = load x86_fp80, x86_fp80* @st0, align 4
  %v2_1000df5b = fsub x86_fp80 0xK80000000000000000000, %v1_1000df5b
  store x86_fp80 %v2_1000df5b, x86_fp80* @st0, align 4
  br label %dec_label_pc_1000df5d

dec_label_pc_1000df5d:                            ; preds = %dec_label_pc_1000df4f, %dec_label_pc_1000df5b
  %v0_1000df5d = load i32, i32* @global_var_1001b418.117, align 8
  %v1_1000df5d = icmp eq i32 %v0_1000df5d, 0
  store i1 %v1_1000df5d, i1* %zf.global-to-local, align 1
  %v1_1000df64 = icmp eq i1 %v1_1000df5d, false
  call void @__pseudo_cond_branch(i1 %v1_1000df64, i32 268503774)
  store i32 ptrtoint ([4 x i8]* @global_var_10018398.118 to i32), i32* %ecx.global-to-local, align 4
  %v0_1000df75 = call i32 @__check_range_exit()
  store i32 %v0_1000df75, i32* @eax, align 4
  br label %dec_label_pc_1000df7a

dec_label_pc_1000df7a:                            ; preds = %dec_label_pc_1000e0c1, %dec_label_pc_1000e07a, %dec_label_pc_1000e001, %dec_label_pc_1000dfbc, %dec_label_pc_1000dfac, %dec_label_pc_1000df5d
  %v0_1000df7a = load i32, i32* @global_var_1001b418.117, align 8
  %v1_1000df7a = icmp eq i32 %v0_1000df7a, 0
  store i1 %v1_1000df7a, i1* %zf.global-to-local, align 1
  %v1_1000df81 = icmp eq i1 %v1_1000df7a, false
  call void @__pseudo_cond_branch(i1 %v1_1000df81, i32 268503774)
  store i32 ptrtoint ([4 x i8]* @global_var_10018398.118 to i32), i32* %ecx.global-to-local, align 4
  %v0_1000df92 = call i32 @function_100109e0()
  %v2_1000df97 = load i16, i16* %stack_var_-4, align 2
  %v3_1000df97 = sext i16 %v2_1000df97 to i32
  store i32 %v3_1000df97, i32* @edx, align 4
  ret i32 %v0_1000df92

dec_label_pc_1000df99:                            ; preds = %dec_label_pc_1000dfc9
  %v4_1000dfa2 = and i8 %tmp13, 8
  %v5_1000dfa2 = icmp eq i8 %v4_1000dfa2, 0
  store i1 %v5_1000dfa2, i1* %zf.global-to-local, align 1
  %v1_1000dfa7 = icmp eq i1 %v5_1000dfa2, false
  br i1 %v1_1000dfa7, label %dec_label_pc_1000dfac, label %dec_label_pc_1000dfa9

dec_label_pc_1000dfa9:                            ; preds = %dec_label_pc_1000df99
  %v0_1000dfa9 = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000dfa9 = add i32 %v0_1000dfa9, 1
  %v8_1000dfa9 = icmp eq i32 %v1_1000dfa9, 0
  store i1 %v8_1000dfa9, i1* %zf.global-to-local, align 1
  store i32 %v1_1000dfa9, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000dfdf

dec_label_pc_1000dfac:                            ; preds = %dec_label_pc_1000dfb5, %dec_label_pc_1000df99
  %v0_1000dfac = load i3, i3* @fpu_stat_TOP, align 1
  %v2_1000dfac = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000dfac = fadd x86_fp80 %v2_1000dfac, %v2_1000dfac
  store x86_fp80 %v4_1000dfac, x86_fp80* @st0, align 4
  %v7_1000dfac = add i3 %v0_1000dfac, 1
  store i3 %v7_1000dfac, i3* @fpu_stat_TOP, align 1
  store i32 1, i32* @eax, align 4
  br label %dec_label_pc_1000df7a

dec_label_pc_1000dfb5:                            ; preds = %dec_label_pc_1000dff7
  %v4_1000dfb5 = and i8 %arg3, 8
  %v5_1000dfb5 = icmp eq i8 %v4_1000dfb5, 0
  store i1 %v5_1000dfb5, i1* %zf.global-to-local, align 1
  %v1_1000dfba = icmp eq i1 %v5_1000dfb5, false
  br i1 %v1_1000dfba, label %dec_label_pc_1000dfac, label %dec_label_pc_1000dfbc

dec_label_pc_1000dfbc:                            ; preds = %dec_label_pc_1000dffd, %dec_label_pc_1000dfb5
  %v0_1000dfbc = load i3, i3* @fpu_stat_TOP, align 1
  %v2_1000dfbc = load x86_fp80, x86_fp80* @st0, align 4
  %v4_1000dfbc = fadd x86_fp80 %v2_1000dfbc, %v2_1000dfbc
  store x86_fp80 %v4_1000dfbc, x86_fp80* @st0, align 4
  %v7_1000dfbc = add i3 %v0_1000dfbc, 1
  store i3 %v7_1000dfbc, i3* @fpu_stat_TOP, align 1
  store i32 7, i32* @eax, align 4
  br label %dec_label_pc_1000df7a

dec_label_pc_1000dfc5:                            ; preds = %dec_label_pc_1000df2c
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000dfdf

dec_label_pc_1000dfc9:                            ; preds = %dec_label_pc_1000df16
  store i32 0, i32* %ecx.global-to-local, align 4
  %v1_1000dfcb = and i32 %v0_1000dfcb, 1048575
  %v4_1000dfd0 = load i32, i32* %stack_var_12, align 4
  %v5_1000dfd0 = or i32 %v4_1000dfd0, %v1_1000dfcb
  %v6_1000dfd0 = icmp eq i32 %v5_1000dfd0, 0
  store i1 %v6_1000dfd0, i1* %zf.global-to-local, align 1
  %v1_1000dfd4 = icmp eq i1 %v6_1000dfd0, false
  %v0_1000df9d = call i32 @__fload_withFB()
  br i1 %v1_1000dfd4, label %dec_label_pc_1000df99, label %dec_label_pc_1000dfdf

dec_label_pc_1000dfdf:                            ; preds = %dec_label_pc_1000dfc9, %dec_label_pc_1000dfa9, %dec_label_pc_1000dfc5
  %v1_1000dfe5 = and i32 %arg2, 2146435072
  store i32 %v1_1000dfe5, i32* @eax, align 4
  %v6_1000dff0 = icmp eq i32 %v1_1000dfe5, 2146435072
  store i1 %v6_1000dff0, i1* %zf.global-to-local, align 1
  %v1_1000dff5 = icmp eq i1 %v6_1000dff0, false
  br i1 %v1_1000dff5, label %dec_label_pc_1000dffd, label %dec_label_pc_1000dff7

dec_label_pc_1000dff7:                            ; preds = %dec_label_pc_1000dfdf
  %v1_1000dfea = and i32 %arg2, 1048575
  %v4_1000dff7 = load i32, i32* %stack_var_4, align 4
  %v5_1000dff7 = or i32 %v4_1000dff7, %v1_1000dfea
  %v6_1000dff7 = icmp eq i32 %v5_1000dff7, 0
  store i1 %v6_1000dff7, i1* %zf.global-to-local, align 1
  %v1_1000dffb = icmp eq i1 %v6_1000dff7, false
  br i1 %v1_1000dffb, label %dec_label_pc_1000dfb5, label %dec_label_pc_1000dffd

dec_label_pc_1000dffd:                            ; preds = %dec_label_pc_1000dff7, %dec_label_pc_1000dfdf
  %v0_1000dffd = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000dffd = icmp eq i32 %v0_1000dffd, 0
  store i1 %v1_1000dffd, i1* %zf.global-to-local, align 1
  %v1_1000dfff = icmp eq i1 %v1_1000dffd, false
  br i1 %v1_1000dfff, label %dec_label_pc_1000dfbc, label %dec_label_pc_1000e001

dec_label_pc_1000e001:                            ; preds = %dec_label_pc_1000dffd
  %v15_1000e001 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v15_1000e001, i32* %ecx.global-to-local, align 4
  %tmp22 = bitcast i32* %stack_var_-120 to double*
  store double* %tmp22, double** %stack_var_-124, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  %v0_1000e00a = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000e00a = load x86_fp80, x86_fp80* @st0, align 4
  %v6_1000e00d = add i3 %v0_1000e00a, 2
  store i3 %v6_1000e00d, i3* @fpu_stat_TOP, align 1
  %tmp24 = fptrunc x86_fp80 %v1_1000e00a to float
  %v5_1000e015 = bitcast float %tmp24 to i32
  %tmp25 = fptrunc x86_fp80 %v1_1000e00a to double
  %v8_1000e015 = call i32 @function_10010bcc(double %tmp25, i32 %v5_1000e015, i32 %v15_1000e001)
  %v2_1000e01d = load double*, double** %stack_var_-124, align 4
  %v3_1000e01d = ptrtoint double* %v2_1000e01d to i32
  store i32 %v3_1000e01d, i32* %ecx.global-to-local, align 4
  %v2_1000e021 = load double, double* %v2_1000e01d, align 4
  %v3_1000e021 = fpext double %v2_1000e021 to x86_fp80
  %v4_1000e021 = load i3, i3* @fpu_stat_TOP, align 1
  %v5_1000e021 = add i3 %v4_1000e021, -1
  store x86_fp80 %v3_1000e021, x86_fp80* @st0, align 4
  store i3 %v5_1000e021, i3* @fpu_stat_TOP, align 1
  %v1_1000e026 = icmp eq i32 %v8_1000e015, 0
  store i1 %v1_1000e026, i1* %zf.global-to-local, align 1
  call void @__pseudo_cond_branch(i1 %v1_1000e026, i32 268503774)
  store i32 1, i32* @eax, align 4
  br label %dec_label_pc_1000df7a

dec_label_pc_1000e038:                            ; preds = %dec_label_pc_1000df37
  %v1_1000e03c = and i32 %arg2, 1048575
  %v4_1000e041 = load i32, i32* %stack_var_4, align 4
  %v5_1000e041 = or i32 %v4_1000e041, %v1_1000e03c
  %v6_1000e041 = icmp eq i32 %v5_1000e041, 0
  store i1 %v6_1000e041, i1* %zf.global-to-local, align 1
  store i32 %v5_1000e041, i32* @eax, align 4
  %v1_1000e045 = icmp eq i1 %v6_1000e041, false
  br i1 %v1_1000e045, label %dec_label_pc_1000df42, label %dec_label_pc_1000e04b

dec_label_pc_1000e04b:                            ; preds = %dec_label_pc_1000e038
  %v0_1000e04b = load i3, i3* @fpu_stat_TOP, align 1
  %v2_1000e04b = add i3 %v0_1000e04b, 1
  store i3 %v2_1000e04b, i3* @fpu_stat_TOP, align 1
  store i32 %tmp9, i32* @eax, align 4
  %v1_1000e051 = and i32 %tmp9, 2146435072
  %v2_1000e051 = icmp eq i32 %v1_1000e051, 0
  store i1 %v2_1000e051, i1* %zf.global-to-local, align 1
  br i1 %v2_1000e051, label %dec_label_pc_1000e095, label %dec_label_pc_1000e058

dec_label_pc_1000e058:                            ; preds = %dec_label_pc_1000e04b
  %v0_1000e058 = call x86_fp80 @function_1000e0d5()
  %v1_1000e058 = fptrunc x86_fp80 %v0_1000e058 to float
  %v2_1000e058 = bitcast float %v1_1000e058 to i32
  store i32 %v2_1000e058, i32* @eax, align 4
  %v5_1000e05d = load i32, i32* @ecx, align 4
  %v7_1000e05d = and i32 %v5_1000e05d, -65281
  %v4_1000e05d = udiv i32 %arg4, 128
  %v2_1000e061 = and i32 %v4_1000e05d, 1
  %tmp26 = sub nsw i32 0, %v2_1000e061
  %v9_1000e061 = and i32 %tmp26, 256
  %v11_1000e061 = or i32 %v7_1000e05d, %v9_1000e061
  store i32 %v11_1000e061, i32* @ecx, align 4
  %tmp23 = trunc i32 %tmp8 to i8
  %v5_1000e064 = icmp sgt i8 %tmp23, -1
  store i1 %v5_1000e064, i1* %zf.global-to-local, align 1
  br i1 %v5_1000e064, label %dec_label_pc_1000e084, label %dec_label_pc_1000e06e

dec_label_pc_1000e06e:                            ; preds = %dec_label_pc_1000e058
  %v0_1000e06e = load x86_fp80, x86_fp80* @global_var_1001a810.119, align 16
  %v1_1000e06e = load i3, i3* @fpu_stat_TOP, align 1
  %v2_1000e06e = add i3 %v1_1000e06e, -1
  store x86_fp80 %v0_1000e06e, x86_fp80* @st0, align 4
  store i3 %v2_1000e06e, i3* @fpu_stat_TOP, align 1
  %v3_1000e074 = and i32 %v5_1000e05d, %v2_1000e061
  %v5_1000e074 = icmp eq i32 %v3_1000e074, 0
  store i1 %v5_1000e074, i1* %zf.global-to-local, align 1
  br i1 %v5_1000e074, label %dec_label_pc_1000e07a, label %dec_label_pc_1000e078

dec_label_pc_1000e078:                            ; preds = %dec_label_pc_1000e06e
  %v2_1000e078 = fsub x86_fp80 0xK80000000000000000000, %v0_1000e06e
  store x86_fp80 %v2_1000e078, x86_fp80* @st0, align 4
  br label %dec_label_pc_1000e07a

dec_label_pc_1000e07a:                            ; preds = %dec_label_pc_1000e06e, %dec_label_pc_1000e078
  store i32 2, i32* @eax, align 4
  br label %dec_label_pc_1000df7a

dec_label_pc_1000e084:                            ; preds = %dec_label_pc_1000e058
  %v0_1000e084 = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000e084 = add i3 %v0_1000e084, -1
  %v3_1000e086 = and i32 %v5_1000e05d, %v2_1000e061
  %v5_1000e086 = icmp eq i32 %v3_1000e086, 0
  store i1 %v5_1000e086, i1* %zf.global-to-local, align 1
  call void @__pseudo_cond_branch(i1 %v5_1000e086, i32 268503774)
  %v0_1000e090 = call i32 @function_10010ade()
  br label %dec_label_pc_1000e095

dec_label_pc_1000e095:                            ; preds = %dec_label_pc_1000e04b, %dec_label_pc_1000e084
  %v0_1000e097 = phi i32 [ %tmp9, %dec_label_pc_1000e04b ], [ %v0_1000e090, %dec_label_pc_1000e084 ]
  %v0_1000e095 = phi i3 [ %v2_1000e04b, %dec_label_pc_1000e04b ], [ %v1_1000e084, %dec_label_pc_1000e084 ]
  %v2_1000e095 = add i3 %v0_1000e095, 1
  %v1_1000e097 = and i32 %v0_1000e097, 1048575
  %v4_1000e09c = load i32, i32* %stack_var_12, align 4
  %v5_1000e09c = or i32 %v4_1000e09c, %v1_1000e097
  %v6_1000e09c = icmp eq i32 %v5_1000e09c, 0
  store i1 %v6_1000e09c, i1* %zf.global-to-local, align 1
  store i32 %v5_1000e09c, i32* @eax, align 4
  %v1_1000e0a0 = icmp eq i1 %v6_1000e09c, false
  br i1 %v1_1000e0a0, label %dec_label_pc_1000e0a9, label %dec_label_pc_1000e0a2

dec_label_pc_1000e0a2:                            ; preds = %dec_label_pc_1000e095
  %v0_1000e0a4 = call i32 @function_10010ade()
  store i32 %v0_1000e0a4, i32* @eax, align 4
  br label %dec_label_pc_1000e0a9

dec_label_pc_1000e0a9:                            ; preds = %dec_label_pc_1000e095, %dec_label_pc_1000e0a2
  %v0_1000e0a9 = phi i3 [ %v2_1000e095, %dec_label_pc_1000e095 ], [ %v0_1000e095, %dec_label_pc_1000e0a2 ]
  %v1_1000e0a9 = add i3 %v0_1000e0a9, -1
  store i3 %v1_1000e0a9, i3* @fpu_stat_TOP, align 1
  %v0_1000e0ab = call i32 @function_10010ade()
  store i32 %v0_1000e0ab, i32* @eax, align 4
  br label %dec_label_pc_1000e0b0

dec_label_pc_1000e0b0:                            ; preds = %dec_label_pc_1000df42, %dec_label_pc_1000e0a9
  %v0_1000e0b0 = load x86_fp80, x86_fp80* @st1, align 4
  %v1_1000e0b0 = load i3, i3* @fpu_stat_TOP, align 1
  %v2_1000e0b0 = add i3 %v1_1000e0b0, -1
  store x86_fp80 %v0_1000e0b0, x86_fp80* @st0, align 4
  store i3 %v2_1000e0b0, i3* @fpu_stat_TOP, align 1
  %v0_1000e0b2 = call x86_fp80 @function_1000e0d5()
  %v1_1000e0b2 = fptrunc x86_fp80 %v0_1000e0b2 to float
  %v2_1000e0b2 = bitcast float %v1_1000e0b2 to i32
  store i32 %v2_1000e0b2, i32* @eax, align 4
  %v2_1000e0b7 = fsub x86_fp80 0xK80000000000000000000, %v0_1000e0b2
  store x86_fp80 %v2_1000e0b7, x86_fp80* @st0, align 4
  %v0_1000e0b9 = load i32, i32* @ecx, align 4
  %v3_1000e0b9 = trunc i32 %v0_1000e0b9 to i8
  %v4_1000e0b9 = icmp eq i8 %v3_1000e0b9, 0
  store i1 %v4_1000e0b9, i1* %zf.global-to-local, align 1
  %v1_1000e0bb = icmp eq i1 %v4_1000e0b9, false
  br i1 %v1_1000e0bb, label %dec_label_pc_1000df4f, label %dec_label_pc_1000e0c1

dec_label_pc_1000e0c1:                            ; preds = %dec_label_pc_1000e0b0
  %v0_1000e0c1 = load i3, i3* @fpu_stat_TOP, align 1
  %v2_1000e0c1 = add i3 %v0_1000e0c1, 1
  %v0_1000e0c5 = load x86_fp80, x86_fp80* @global_var_1001a870.120, align 16
  store x86_fp80 %v0_1000e0c5, x86_fp80* @st0, align 4
  store i3 %v2_1000e0c1, i3* @fpu_stat_TOP, align 1
  store i32 1, i32* @eax, align 4
  br label %dec_label_pc_1000df7a

; uselistorder directives
  uselistorder i1 %v5_1000e086, { 1, 0 }
  uselistorder i1 %v5_1000e074, { 1, 0 }
  uselistorder i32 %v2_1000e061, { 1, 2, 0 }
  uselistorder i1 %v6_1000dff0, { 1, 0 }
  uselistorder i1 %v10_1000df56, { 1, 0 }
  uselistorder i1 %v6_1000df20, { 1, 0 }
  uselistorder i1 %v13_1000df09, { 1, 0 }
  uselistorder i32 %v0_1000defd, { 1, 2, 0, 3, 4, 5 }
  uselistorder i16* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_4, { 1, 2, 0 }
  uselistorder double** %stack_var_-124, { 1, 0 }
  uselistorder i32 %tmp9, { 0, 2, 1 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 16, 17, 10, 14, 15, 13, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 6, 5, 7, 3, 4, 2, 8, 9, 10 }
  uselistorder i32 ()* @function_10010ade, { 2, 1, 0 }
  uselistorder x86_fp80 ()* @function_1000e0d5, { 1, 0 }
  uselistorder i3 2, { 1, 0 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000e0b0, { 1, 0 }
  uselistorder label %dec_label_pc_1000e0a9, { 1, 0 }
  uselistorder label %dec_label_pc_1000e095, { 1, 0 }
  uselistorder label %dec_label_pc_1000e07a, { 1, 0 }
  uselistorder label %dec_label_pc_1000dfdf, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1000df5d, { 1, 0 }
  uselistorder label %dec_label_pc_1000df16, { 1, 0 }
}

define x86_fp80 @function_1000e0d5() local_unnamed_addr {
dec_label_pc_1000e0d5:
  %v0_1000e0d5 = load x86_fp80, x86_fp80* @st0, align 4
  %v1_1000e0d5 = load i3, i3* @fpu_stat_TOP, align 1
  %v2_1000e0d7 = call x86_fp80 @llvm.round.f80(x86_fp80 %v0_1000e0d5)
  %v0_1000e0db = load i32, i32* @ecx, align 4
  %v1_1000e0db = and i32 %v0_1000e0db, -256
  store i32 %v1_1000e0db, i32* @ecx, align 4
  %v0_1000e0e0 = load i32, i32* @eax, align 4
  %v1_1000e0e0 = udiv i32 %v0_1000e0e0, 256
  %v9_1000e0e0 = and i32 %v1_1000e0e0, 64
  %v10_1000e0e0 = icmp ne i32 %v9_1000e0e0, 0
  %v1_1000e0e1 = icmp eq i1 %v10_1000e0e0, false
  br i1 %v1_1000e0e1, label %dec_label_pc_1000e0fa, label %dec_label_pc_1000e0f9

dec_label_pc_1000e0f9:                            ; preds = %dec_label_pc_1000e0d5
  %v1_1000e0e3 = load double, double* @global_var_10018390.121, align 16
  %v2_1000e0e3 = fpext double %v1_1000e0e3 to x86_fp80
  %v4_1000e0e3 = fmul x86_fp80 %v2_1000e0d7, %v2_1000e0e3
  %v2_1000e0ed = call x86_fp80 @llvm.round.f80(x86_fp80 %v4_1000e0e3)
  store x86_fp80 %v2_1000e0ed, x86_fp80* @st1, align 4
  %storemerge4 = add i3 %v1_1000e0d5, 1
  store i3 %storemerge4, i3* @fpu_stat_TOP, align 1
  %v17_1000e0f7 = or i32 %v1_1000e0db, 2
  store i32 %v17_1000e0f7, i32* @ecx, align 4
  ret x86_fp80 %v4_1000e0e3

dec_label_pc_1000e0fa:                            ; preds = %dec_label_pc_1000e0d5
  %v2_1000e0fa = add i3 %v1_1000e0d5, 1
  store i3 %v2_1000e0fa, i3* @fpu_stat_TOP, align 1
  ret x86_fp80 %v2_1000e0d7

; uselistorder directives
  uselistorder x86_fp80 %v2_1000e0d7, { 1, 0 }
}

define i32 @function_1000e114(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000e114:
  %stack_var_-4 = alloca i16, align 2
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_4, align 4
  %v2_1000e114 = ptrtoint i32* %stack_var_4 to i32
  %v0_1000e118 = call i32 @__fload_withFB()
  store i32 %v0_1000e118, i32* @eax, align 4
  %v6_1000e11d = trunc i32 %v2_1000e114 to i16
  store i16 %v6_1000e11d, i16* %stack_var_-4, align 2
  %v0_1000e122 = load i1, i1* @zf, align 1
  br i1 %v0_1000e122, label %dec_label_pc_1000e167, label %dec_label_pc_1000e124

dec_label_pc_1000e124:                            ; preds = %dec_label_pc_1000e114
  %v1_1000e136 = and i32 %arg2, 2146435072
  %v2_1000e136 = icmp eq i32 %v1_1000e136, 0
  br i1 %v2_1000e136, label %dec_label_pc_1000e192, label %dec_label_pc_1000e13d

dec_label_pc_1000e13d:                            ; preds = %dec_label_pc_1000e124
  %v2_1000e13d = icmp sgt i32 %arg2, -1
  %v1_1000e142 = icmp eq i1 %v2_1000e13d, false
  br i1 %v1_1000e142, label %dec_label_pc_1000e17c, label %dec_label_pc_1000e144

dec_label_pc_1000e144:                            ; preds = %dec_label_pc_1000e199, %dec_label_pc_1000e192, %dec_label_pc_1000e13d
  %v0_1000e144 = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000e144 = add i3 %v0_1000e144, -1
  store i3 %v1_1000e144, i3* @fpu_stat_TOP, align 1
  store x86_fp80 0xK3FFD9A209A84FBCFF800, x86_fp80* @st0, align 4
  br label %dec_label_pc_1000e14a

dec_label_pc_1000e14a:                            ; preds = %dec_label_pc_1000e175, %dec_label_pc_1000e144
  %v0_1000e14a = load i32, i32* @global_var_1001b418.117, align 8
  %v1_1000e14a = icmp eq i32 %v0_1000e14a, 0
  %v1_1000e151 = icmp eq i1 %v1_1000e14a, false
  call void @__pseudo_cond_branch(i1 %v1_1000e151, i32 268503774)
  %v0_1000e162 = call i32 @__math_exit()
  store i32 %v0_1000e162, i32* @eax, align 4
  br label %dec_label_pc_1000e167

dec_label_pc_1000e167:                            ; preds = %dec_label_pc_1000e114, %dec_label_pc_1000e14a
  %v0_1000e175 = phi i32 [ %v0_1000e118, %dec_label_pc_1000e114 ], [ %v0_1000e162, %dec_label_pc_1000e14a ]
  %v1_1000e167 = and i32 %v0_1000e175, 1048575
  %v2_1000e167 = icmp eq i32 %v1_1000e167, 0
  %v1_1000e16c = icmp eq i1 %v2_1000e167, false
  br i1 %v1_1000e16c, label %dec_label_pc_1000e18b, label %dec_label_pc_1000e16e

dec_label_pc_1000e16e:                            ; preds = %dec_label_pc_1000e167
  %v3_1000e16e = load i32, i32* %stack_var_4, align 4
  %v4_1000e16e = icmp eq i32 %v3_1000e16e, 0
  %v1_1000e173 = icmp eq i1 %v4_1000e16e, false
  br i1 %v1_1000e173, label %dec_label_pc_1000e18b, label %dec_label_pc_1000e175

dec_label_pc_1000e175:                            ; preds = %dec_label_pc_1000e16e
  %v2_1000e175 = icmp sgt i32 %v0_1000e175, -1
  br i1 %v2_1000e175, label %dec_label_pc_1000e14a, label %dec_label_pc_1000e17c

dec_label_pc_1000e17c:                            ; preds = %dec_label_pc_1000e175, %dec_label_pc_1000e13d
  %v0_1000e17e = load x86_fp80, x86_fp80* @global_var_1001a870.120, align 16
  store x86_fp80 %v0_1000e17e, x86_fp80* @st0, align 4
  br label %dec_label_pc_1000e1ad

dec_label_pc_1000e18b:                            ; preds = %dec_label_pc_1000e16e, %dec_label_pc_1000e167
  %v0_1000e18b = call i32 @function_10010a6c()
  br label %dec_label_pc_1000e1ad

dec_label_pc_1000e192:                            ; preds = %dec_label_pc_1000e124
  %v1_1000e192 = and i32 %arg2, 1048575
  %v2_1000e192 = icmp eq i32 %v1_1000e192, 0
  %v1_1000e197 = icmp eq i1 %v2_1000e192, false
  br i1 %v1_1000e197, label %dec_label_pc_1000e144, label %dec_label_pc_1000e199

dec_label_pc_1000e199:                            ; preds = %dec_label_pc_1000e192
  %v3_1000e199 = load i32, i32* %stack_var_4, align 4
  %v4_1000e199 = icmp eq i32 %v3_1000e199, 0
  %v1_1000e19e = icmp eq i1 %v4_1000e199, false
  br i1 %v1_1000e19e, label %dec_label_pc_1000e144, label %dec_label_pc_1000e1a0

dec_label_pc_1000e1a0:                            ; preds = %dec_label_pc_1000e199
  %v0_1000e1a2 = load x86_fp80, x86_fp80* @global_var_1001a81a.123, align 4
  store x86_fp80 %v0_1000e1a2, x86_fp80* @st0, align 4
  br label %dec_label_pc_1000e1ad

dec_label_pc_1000e1ad:                            ; preds = %dec_label_pc_1000e18b, %dec_label_pc_1000e17c, %dec_label_pc_1000e1a0
  %v0_1000e1ad = load i32, i32* @global_var_1001b418.117, align 8
  %v1_1000e1ad = icmp eq i32 %v0_1000e1ad, 0
  %v1_1000e1b4 = icmp eq i1 %v1_1000e1ad, false
  call void @__pseudo_cond_branch(i1 %v1_1000e1b4, i32 268503774)
  %v0_1000e1c5 = call i32 @__startOneArgErrorHandling()
  %v2_1000e1ca = load i16, i16* %stack_var_-4, align 2
  %v3_1000e1ca = sext i16 %v2_1000e1ca to i32
  store i32 %v3_1000e1ca, i32* @edx, align 4
  ret i32 %v0_1000e1c5

; uselistorder directives
  uselistorder i32* %stack_var_4, { 1, 2, 3, 0 }
  uselistorder i16* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1000e1ad, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000e167, { 1, 0 }
}

define i32 @function_1000e1e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000e1e4:
  %tmp = call i32 @__decompiler_undefined_function_1()
  %stack_var_-4 = alloca i16, align 2
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_4, align 4
  %v2_1000e1e4 = ptrtoint i32* %stack_var_4 to i32
  %v0_1000e1e8 = call i32 @__fload_withFB()
  %v6_1000e1ed = trunc i32 %v2_1000e1e4 to i16
  store i16 %v6_1000e1ed, i16* %stack_var_-4, align 2
  store i32 %tmp, i32* @eax, align 4
  %v0_1000e1f6 = load i1, i1* @zf, align 1
  br i1 %v0_1000e1f6, label %dec_label_pc_1000e249, label %dec_label_pc_1000e205

dec_label_pc_1000e205:                            ; preds = %dec_label_pc_1000e1e4
  %sext = mul i32 %v2_1000e1e4, 65536
  %v1_1000e200 = sdiv i32 %sext, 65536
  %v2_1000e200 = call i32 @function_10010a55(i32 %v1_1000e200)
  %v2_1000e205 = icmp sgt i32 %v2_1000e200, -1
  %v1_1000e20a = icmp eq i1 %v2_1000e205, false
  br i1 %v1_1000e20a, label %dec_label_pc_1000e22b, label %dec_label_pc_1000e20c

dec_label_pc_1000e20c:                            ; preds = %dec_label_pc_1000e205
  br label %dec_label_pc_1000e20e

dec_label_pc_1000e20e:                            ; preds = %dec_label_pc_1000e239, %dec_label_pc_1000e257, %dec_label_pc_1000e20c
  %v0_1000e20e = load i32, i32* @global_var_1001b418.117, align 8
  %v1_1000e20e = icmp eq i32 %v0_1000e20e, 0
  %v1_1000e215 = icmp eq i1 %v1_1000e20e, false
  call void @__pseudo_cond_branch(i1 %v1_1000e215, i32 268503774)
  %v0_1000e226 = call i32 @__math_exit()
  br label %dec_label_pc_1000e22b

dec_label_pc_1000e22b:                            ; preds = %dec_label_pc_1000e205, %dec_label_pc_1000e20e
  %v0_1000e232 = phi i32 [ %v0_1000e226, %dec_label_pc_1000e20e ], [ %v2_1000e200, %dec_label_pc_1000e205 ]
  %v1_1000e22b = and i32 %v0_1000e232, 2146435072
  %v2_1000e22b = icmp eq i32 %v1_1000e22b, 0
  %v1_1000e230 = icmp eq i1 %v2_1000e22b, false
  br i1 %v1_1000e230, label %dec_label_pc_1000e25e, label %dec_label_pc_1000e232

dec_label_pc_1000e232:                            ; preds = %dec_label_pc_1000e22b
  %v1_1000e232 = and i32 %v0_1000e232, 1048575
  %v2_1000e232 = icmp eq i32 %v1_1000e232, 0
  %v1_1000e237 = icmp eq i1 %v2_1000e232, false
  br i1 %v1_1000e237, label %dec_label_pc_1000e25e, label %dec_label_pc_1000e239

dec_label_pc_1000e239:                            ; preds = %dec_label_pc_1000e232
  %v3_1000e239 = load i32, i32* %stack_var_4, align 4
  %v4_1000e239 = icmp eq i32 %v3_1000e239, 0
  %v1_1000e23e = icmp eq i1 %v4_1000e239, false
  br i1 %v1_1000e23e, label %dec_label_pc_1000e25e, label %dec_label_pc_1000e20e

dec_label_pc_1000e242:                            ; preds = %dec_label_pc_1000e250, %dec_label_pc_1000e249
  %v0_1000e242 = call i32 @function_10010a6c()
  br label %dec_label_pc_1000e26b

dec_label_pc_1000e249:                            ; preds = %dec_label_pc_1000e1e4
  %v1_1000e249 = and i32 %tmp, 1048575
  %v2_1000e249 = icmp eq i32 %v1_1000e249, 0
  %v1_1000e24e = icmp eq i1 %v2_1000e249, false
  br i1 %v1_1000e24e, label %dec_label_pc_1000e242, label %dec_label_pc_1000e250

dec_label_pc_1000e250:                            ; preds = %dec_label_pc_1000e249
  %v3_1000e250 = load i32, i32* %stack_var_4, align 4
  %v4_1000e250 = icmp eq i32 %v3_1000e250, 0
  %v1_1000e255 = icmp eq i1 %v4_1000e250, false
  br i1 %v1_1000e255, label %dec_label_pc_1000e242, label %dec_label_pc_1000e257

dec_label_pc_1000e257:                            ; preds = %dec_label_pc_1000e250
  %v2_1000e257 = icmp sgt i32 %tmp, -1
  br i1 %v2_1000e257, label %dec_label_pc_1000e20e, label %dec_label_pc_1000e25e

dec_label_pc_1000e25e:                            ; preds = %dec_label_pc_1000e257, %dec_label_pc_1000e239, %dec_label_pc_1000e232, %dec_label_pc_1000e22b
  %v0_1000e260 = load x86_fp80, x86_fp80* @global_var_1001a870.120, align 16
  store x86_fp80 %v0_1000e260, x86_fp80* @st0, align 4
  br label %dec_label_pc_1000e26b

dec_label_pc_1000e26b:                            ; preds = %dec_label_pc_1000e242, %dec_label_pc_1000e25e
  %v0_1000e26b = load i32, i32* @global_var_1001b418.117, align 8
  %v1_1000e26b = icmp eq i32 %v0_1000e26b, 0
  %v1_1000e272 = icmp eq i1 %v1_1000e26b, false
  call void @__pseudo_cond_branch(i1 %v1_1000e272, i32 268503774)
  %v0_1000e283 = call i32 @__startOneArgErrorHandling()
  %v2_1000e288 = load i16, i16* %stack_var_-4, align 2
  %v3_1000e288 = sext i16 %v2_1000e288 to i32
  store i32 %v3_1000e288, i32* @edx, align 4
  ret i32 %v0_1000e283

; uselistorder directives
  uselistorder i32 %v2_1000e200, { 1, 0 }
  uselistorder i32* %stack_var_4, { 1, 2, 3, 0 }
  uselistorder i16* %stack_var_-4, { 1, 0 }
  uselistorder i32 %tmp, { 0, 2, 1 }
  uselistorder x86_fp80* @global_var_1001a870.120, { 2, 1, 0 }
  uselistorder i32 268503774, { 0, 1, 6, 7, 2, 3, 4, 5 }
  uselistorder i32 (i32)* @function_10010a55, { 1, 0 }
  uselistorder i32 ()* @__fload_withFB, { 3, 4, 2, 1, 0 }
  uselistorder label %dec_label_pc_1000e26b, { 1, 0 }
  uselistorder label %dec_label_pc_1000e22b, { 1, 0 }
  uselistorder label %dec_label_pc_1000e20e, { 1, 0, 2 }
}

define i32 @function_1000e28a(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000e28a:
  %v9_1000e28e = icmp eq i32 %arg1, 1
  %v1_1000e291 = icmp eq i1 %v9_1000e28e, false
  br i1 %v1_1000e291, label %dec_label_pc_1000e31f, label %dec_label_pc_1000e297

dec_label_pc_1000e297:                            ; preds = %dec_label_pc_1000e28a
  %v0_1000e297 = call i32 @GetVersion()
  %v1_1000e29f = trunc i32 %v0_1000e297 to i16
  store i16 %v1_1000e29f, i16* @global_var_1001b4a4.125, align 4
  %v1_1000e2a4 = call i32 @function_1000f38b(i32 1)
  %v1_1000e2a9 = icmp eq i32 %v1_1000e2a4, 0
  store i32 1, i32* @ecx, align 4
  br i1 %v1_1000e2a9, label %dec_label_pc_1000e2ea, label %dec_label_pc_1000e2ae

dec_label_pc_1000e2ae:                            ; preds = %dec_label_pc_1000e297
  %v0_1000e2ae = load i16, i16* @global_var_1001b4a4.125, align 2
  %v1_1000e2ae = sext i16 %v0_1000e2ae to i32
  %v0_1000e2b5 = load i8, i8* @global_var_1001b4a5.126, align 1
  %v1_1000e2b5 = zext i8 %v0_1000e2b5 to i32
  store i32 %v1_1000e2b5, i32* @ecx, align 4
  %v1_1000e2bb1 = zext i16 %v0_1000e2ae to i32
  %v2_1000e2bb = and i32 %v1_1000e2bb1, 255
  %v3_1000e2c0 = udiv i32 %v1_1000e2ae, 65536
  %v9_1000e2c0 = trunc i32 %v3_1000e2c0 to i16
  store i16 %v9_1000e2c0, i16* @global_var_1001b4a4.125, align 4
  store i32 %v2_1000e2bb, i32* @global_var_1001b4ac.127, align 4
  store i32 %v1_1000e2b5, i32* @global_var_1001b4b0.128, align 16
  %v2_1000e2d2 = mul nuw nsw i32 %v2_1000e2bb, 256
  %v2_1000e2d5 = or i32 %v2_1000e2d2, %v1_1000e2b5
  store i32 %v2_1000e2d5, i32* @global_var_1001b4a8.129, align 8
  %v0_1000e2dc = call i32 @function_10010e7f()
  %v1_1000e2e1 = icmp eq i32 %v0_1000e2dc, 0
  %v1_1000e2e3 = icmp eq i1 %v1_1000e2e1, false
  br i1 %v1_1000e2e3, label %dec_label_pc_1000e2ee, label %dec_label_pc_1000e2e5

dec_label_pc_1000e2e5:                            ; preds = %dec_label_pc_1000e2ae
  %v0_1000e2e5 = call i32 @function_1000f3e8()
  br label %dec_label_pc_1000e2ea

dec_label_pc_1000e2ea:                            ; preds = %dec_label_pc_1000e325, %dec_label_pc_1000e297, %dec_label_pc_1000e2e5
  br label %dec_label_pc_1000e360

dec_label_pc_1000e2ee:                            ; preds = %dec_label_pc_1000e2ae
  %v0_1000e2ee = call i8* @GetCommandLineA()
  store i8* %v0_1000e2ee, i8** @global_var_1001bb18.130, align 8
  %v0_1000e2f9 = call i32 @function_10011521()
  %v1_1000e2fe = inttoptr i32 %v0_1000e2f9 to i8*
  store i8* %v1_1000e2fe, i8** @global_var_1001b424.131, align 4
  %v0_1000e303 = call i32 @function_1001100b()
  %v0_1000e308 = call i32 @function_100112d4()
  store i32 %v0_1000e308, i32* @eax, align 4
  %v0_1000e30d = call i32 @function_1001121b()
  %v0_1000e312 = call i32 @function_10010d61()
  %v0_1000e317 = load i32, i32* @global_var_1001b420.132, align 32
  %v1_1000e317 = add i32 %v0_1000e317, 1
  store i32 %v1_1000e317, i32* @global_var_1001b420.132, align 32
  br label %dec_label_pc_1000e35d

dec_label_pc_1000e31f:                            ; preds = %dec_label_pc_1000e28a
  %v5_1000e28e = icmp eq i32 %arg1, 0
  store i32 0, i32* @ecx, align 4
  %v1_1000e323 = icmp eq i1 %v5_1000e28e, false
  br i1 %v1_1000e323, label %dec_label_pc_1000e351, label %dec_label_pc_1000e325

dec_label_pc_1000e325:                            ; preds = %dec_label_pc_1000e31f
  %v0_1000e325 = load i32, i32* @global_var_1001b420.132, align 32
  %v7_1000e32b = icmp sgt i32 %v0_1000e325, 0
  br i1 %v7_1000e32b, label %dec_label_pc_1000e32d, label %dec_label_pc_1000e2ea

dec_label_pc_1000e32d:                            ; preds = %dec_label_pc_1000e325
  %v1_1000e32d = add i32 %v0_1000e325, -1
  store i32 %v1_1000e32d, i32* @global_var_1001b420.132, align 32
  %v0_1000e333 = load i32, i32* @global_var_1001b4dc.133, align 4
  %v12_1000e333 = icmp eq i32 %v0_1000e333, 0
  %v1_1000e339 = icmp eq i1 %v12_1000e333, false
  br i1 %v1_1000e339, label %dec_label_pc_1000e340, label %dec_label_pc_1000e33b

dec_label_pc_1000e33b:                            ; preds = %dec_label_pc_1000e32d
  %v0_1000e33b = call i32 @function_10010d9f()
  br label %dec_label_pc_1000e340

dec_label_pc_1000e340:                            ; preds = %dec_label_pc_1000e32d, %dec_label_pc_1000e33b
  %v0_1000e340 = call i32 @function_100111c7()
  %v0_1000e345 = call i32 @function_10010ed3()
  %v0_1000e34a = call i32 @function_1000f3e8()
  br label %dec_label_pc_1000e35d

dec_label_pc_1000e351:                            ; preds = %dec_label_pc_1000e31f
  %v9_1000e351 = icmp eq i32 %arg1, 3
  %v1_1000e354 = icmp eq i1 %v9_1000e351, false
  br i1 %v1_1000e354, label %dec_label_pc_1000e35d, label %dec_label_pc_1000e356

dec_label_pc_1000e356:                            ; preds = %dec_label_pc_1000e351
  %v1_1000e357 = call i32 @function_10010f6b(i32 0)
  store i32 0, i32* @ecx, align 4
  br label %dec_label_pc_1000e35d

dec_label_pc_1000e35d:                            ; preds = %dec_label_pc_1000e351, %dec_label_pc_1000e340, %dec_label_pc_1000e2ee, %dec_label_pc_1000e356
  br label %dec_label_pc_1000e360

dec_label_pc_1000e360:                            ; preds = %dec_label_pc_1000e2ea, %dec_label_pc_1000e35d
  %v0_1000e360 = phi i32 [ 0, %dec_label_pc_1000e2ea ], [ 1, %dec_label_pc_1000e35d ]
  ret i32 %v0_1000e360

; uselistorder directives
  uselistorder i32 ()* @function_1000f3e8, { 1, 0 }
  uselistorder i16* @global_var_1001b4a4.125, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1000e360, { 1, 0 }
  uselistorder label %dec_label_pc_1000e35d, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1000e340, { 1, 0 }
  uselistorder label %dec_label_pc_1000e2ea, { 0, 2, 1 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  store i32 %arg2, i32* @esi, align 4
  store i32 %arg3, i32* @edi, align 4
  %v1_1000e372 = icmp eq i32 %arg2, 0
  %v1_1000e374 = icmp eq i1 %v1_1000e372, false
  br i1 %v1_1000e374, label %dec_label_pc_1000e37f, label %dec_label_pc_1000e376

dec_label_pc_1000e376:                            ; preds = %entry
  %v0_1000e376 = load i32, i32* @global_var_1001b420.132, align 32
  br label %dec_label_pc_1000e3a5

dec_label_pc_1000e37f:                            ; preds = %entry
  %v1_1000e37f = add i32 %arg2, -1
  %v9_1000e37f = icmp eq i32 %v1_1000e37f, 0
  br i1 %v9_1000e37f, label %dec_label_pc_1000e389, label %dec_label_pc_1000e384

dec_label_pc_1000e384:                            ; preds = %dec_label_pc_1000e37f
  %v9_1000e384 = icmp eq i32 %arg2, 2
  %v1_1000e387 = icmp eq i1 %v9_1000e384, false
  br i1 %v1_1000e387, label %dec_label_pc_1000e3ab, label %dec_label_pc_1000e389

dec_label_pc_1000e389:                            ; preds = %dec_label_pc_1000e37f, %dec_label_pc_1000e384
  %v0_1000e389 = load i32, i32* @global_var_1001bb1c.134, align 4
  %v1_1000e38e = icmp eq i32 %v0_1000e389, 0
  br i1 %v1_1000e38e, label %dec_label_pc_1000e39b, label %dec_label_pc_1000e392

dec_label_pc_1000e392:                            ; preds = %dec_label_pc_1000e389
  %v1_1000e395 = call i32 @unknown_0(i32 %arg1)
  %v1_1000e397 = icmp eq i32 %v1_1000e395, 0
  br i1 %v1_1000e397, label %dec_label_pc_1000e3a7, label %dec_label_pc_1000e392.dec_label_pc_1000e39b_crit_edge

dec_label_pc_1000e392.dec_label_pc_1000e39b_crit_edge: ; preds = %dec_label_pc_1000e392
  %v0_1000e39b.pre = load i32, i32* @edi, align 4
  %v0_1000e39d.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000e39b

dec_label_pc_1000e39b:                            ; preds = %dec_label_pc_1000e392.dec_label_pc_1000e39b_crit_edge, %dec_label_pc_1000e389
  %v0_1000e39d = phi i32 [ %arg1, %dec_label_pc_1000e389 ], [ %v0_1000e39d.pre, %dec_label_pc_1000e392.dec_label_pc_1000e39b_crit_edge ]
  %v0_1000e39b = phi i32 [ %arg3, %dec_label_pc_1000e389 ], [ %v0_1000e39b.pre, %dec_label_pc_1000e392.dec_label_pc_1000e39b_crit_edge ]
  %v3_1000e39e = call i32 @function_1000e28a(i32 %v0_1000e39d, i32 %arg2, i32 %v0_1000e39b)
  br label %dec_label_pc_1000e3a5

dec_label_pc_1000e3a5:                            ; preds = %dec_label_pc_1000e376, %dec_label_pc_1000e39b
  %storemerge3.in = phi i32 [ %v3_1000e39e, %dec_label_pc_1000e39b ], [ %v0_1000e376, %dec_label_pc_1000e376 ]
  %storemerge3 = icmp eq i32 %storemerge3.in, 0
  %v1_1000e3a5 = icmp eq i1 %storemerge3, false
  br i1 %v1_1000e3a5, label %dec_label_pc_1000e3a5.dec_label_pc_1000e3ab_crit_edge, label %dec_label_pc_1000e3a7

dec_label_pc_1000e3a5.dec_label_pc_1000e3ab_crit_edge: ; preds = %dec_label_pc_1000e3a5
  %v0_1000e3ab.pre = load i32, i32* @edi, align 4
  %v0_1000e3ad.pre = load i32, i32* @ebx, align 4
  %.pre = add i32 %arg2, -1
  br label %dec_label_pc_1000e3ab

dec_label_pc_1000e3a7:                            ; preds = %dec_label_pc_1000e392, %dec_label_pc_1000e3a5
  br label %dec_label_pc_1000e3f9

dec_label_pc_1000e3ab:                            ; preds = %dec_label_pc_1000e3a5.dec_label_pc_1000e3ab_crit_edge, %dec_label_pc_1000e384
  %v1_1000e3b3.pre-phi = phi i32 [ %.pre, %dec_label_pc_1000e3a5.dec_label_pc_1000e3ab_crit_edge ], [ %v1_1000e37f, %dec_label_pc_1000e384 ]
  %v0_1000e3ad = phi i32 [ %v0_1000e3ad.pre, %dec_label_pc_1000e3a5.dec_label_pc_1000e3ab_crit_edge ], [ %arg1, %dec_label_pc_1000e384 ]
  %v0_1000e3ab = phi i32 [ %v0_1000e3ab.pre, %dec_label_pc_1000e3a5.dec_label_pc_1000e3ab_crit_edge ], [ %arg3, %dec_label_pc_1000e384 ]
  %v3_1000e3ae = call i32 @function_10011653(i32 %v0_1000e3ad, i32 %arg2, i32 %v0_1000e3ab)
  %v9_1000e3b3 = icmp eq i32 %v1_1000e3b3.pre-phi, 0
  %v1_1000e3b9 = icmp eq i1 %v9_1000e3b3, false
  br i1 %v1_1000e3b9, label %dec_label_pc_1000e3c7, label %dec_label_pc_1000e3bb

dec_label_pc_1000e3bb:                            ; preds = %dec_label_pc_1000e3ab
  %v1_1000e3bb = icmp eq i32 %v3_1000e3ae, 0
  %v1_1000e3bd = icmp eq i1 %v1_1000e3bb, false
  br i1 %v1_1000e3bd, label %dec_label_pc_1000e3f9, label %dec_label_pc_1000e3bf

dec_label_pc_1000e3bf:                            ; preds = %dec_label_pc_1000e3bb
  %v0_1000e3bf = load i32, i32* @edi, align 4
  %v0_1000e3c1 = load i32, i32* @ebx, align 4
  %v3_1000e3c2 = call i32 @function_1000e28a(i32 %v0_1000e3c1, i32 %v3_1000e3ae, i32 %v0_1000e3bf)
  br label %dec_label_pc_1000e3c7

dec_label_pc_1000e3c7:                            ; preds = %dec_label_pc_1000e3ab, %dec_label_pc_1000e3bf
  br i1 %v1_1000e372, label %dec_label_pc_1000e3d0, label %dec_label_pc_1000e3cb

dec_label_pc_1000e3cb:                            ; preds = %dec_label_pc_1000e3c7
  %v9_1000e3cb = icmp eq i32 %arg2, 3
  %v1_1000e3ce = icmp eq i1 %v9_1000e3cb, false
  br i1 %v1_1000e3ce, label %dec_label_pc_1000e3f9, label %dec_label_pc_1000e3d0

dec_label_pc_1000e3d0:                            ; preds = %dec_label_pc_1000e3cb, %dec_label_pc_1000e3c7
  %v0_1000e3d0 = load i32, i32* @edi, align 4
  %v0_1000e3d2 = load i32, i32* @ebx, align 4
  %v3_1000e3d3 = call i32 @function_1000e28a(i32 %v0_1000e3d2, i32 %arg2, i32 %v0_1000e3d0)
  %v1_1000e3d8 = icmp eq i32 %v3_1000e3d3, 0
  %v1_1000e3da = icmp eq i1 %v1_1000e3d8, false
  br i1 %v1_1000e3da, label %dec_label_pc_1000e3df, label %dec_label_pc_1000e3dc

dec_label_pc_1000e3dc:                            ; preds = %dec_label_pc_1000e3d0
  %v5_1000e3dc = and i32 %v3_1000e3d3, %v3_1000e3ae
  br label %dec_label_pc_1000e3df

dec_label_pc_1000e3df:                            ; preds = %dec_label_pc_1000e3d0, %dec_label_pc_1000e3dc
  %stack_var_8.0 = phi i32 [ %v3_1000e3ae, %dec_label_pc_1000e3d0 ], [ %v5_1000e3dc, %dec_label_pc_1000e3dc ]
  %v4_1000e3df = icmp eq i32 %stack_var_8.0, 0
  br i1 %v4_1000e3df, label %dec_label_pc_1000e3f9, label %dec_label_pc_1000e3e5

dec_label_pc_1000e3e5:                            ; preds = %dec_label_pc_1000e3df
  %v0_1000e3e5 = load i32, i32* @global_var_1001bb1c.134, align 4
  %v1_1000e3ea = icmp eq i32 %v0_1000e3e5, 0
  br i1 %v1_1000e3ea, label %dec_label_pc_1000e3f9, label %dec_label_pc_1000e3ee

dec_label_pc_1000e3ee:                            ; preds = %dec_label_pc_1000e3e5
  %v0_1000e3f0 = load i32, i32* @ebx, align 4
  %v1_1000e3f1 = call i32 @unknown_0(i32 %v0_1000e3f0)
  br label %dec_label_pc_1000e3f9

dec_label_pc_1000e3f9:                            ; preds = %dec_label_pc_1000e3ee, %dec_label_pc_1000e3bb, %dec_label_pc_1000e3cb, %dec_label_pc_1000e3df, %dec_label_pc_1000e3e5, %dec_label_pc_1000e3a7
  %storemerge1 = phi i32 [ 0, %dec_label_pc_1000e3df ], [ %stack_var_8.0, %dec_label_pc_1000e3e5 ], [ %v1_1000e3f1, %dec_label_pc_1000e3ee ], [ %v3_1000e3ae, %dec_label_pc_1000e3cb ], [ %v3_1000e3ae, %dec_label_pc_1000e3bb ], [ 0, %dec_label_pc_1000e3a7 ]
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32 %v3_1000e3ae, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 (i32, i32, i32)* @function_1000e28a, { 1, 0, 2 }
  uselistorder i32 %arg3, { 1, 0, 2 }
  uselistorder i32 %arg2, { 3, 1, 4, 2, 5, 0, 8, 7, 6 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1000e3f9, { 0, 4, 3, 2, 1, 5 }
  uselistorder label %dec_label_pc_1000e3df, { 1, 0 }
  uselistorder label %dec_label_pc_1000e3c7, { 1, 0 }
  uselistorder label %dec_label_pc_1000e3a7, { 1, 0 }
  uselistorder label %dec_label_pc_1000e3a5, { 1, 0 }
  uselistorder label %dec_label_pc_1000e389, { 1, 0 }
}

declare i32 @__amsg_exit(i32) local_unnamed_addr

define i32 @function_1000e433() local_unnamed_addr {
entry:
  %v2_1000e43d = call i32 @function_1001181a(i32 65536, i32 196608)
  store i32 196608, i32* @ecx, align 4
  ret i32 %v2_1000e43d
}

define i32 @function_1000e445() local_unnamed_addr {
dec_label_pc_1000e445:
  %v0_1000e477 = load i32, i32* @eax, align 4
  %v1_1000e477 = udiv i32 %v0_1000e477, 256
  %tmp = and i32 %v1_1000e477, 65
  %tmp10 = icmp eq i32 %tmp, 0
  br i1 %tmp10, label %dec_label_pc_1000e47a, label %dec_label_pc_1000e47f

dec_label_pc_1000e47a:                            ; preds = %dec_label_pc_1000e445
  ret i32 1

dec_label_pc_1000e47f:                            ; preds = %dec_label_pc_1000e445
  ret i32 0
}

declare i32 @__ms_p5_mp_test_fdiv() local_unnamed_addr

define i32 @function_1000e4ac(i8* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000e4ac = load i32, i32* @esi, align 4
  store i32 %v0_1000e4ac, i32* %stack_var_-4, align 4
  %v4_1000e4ad = ptrtoint i8* %arg1 to i32
  store i32 %v4_1000e4ad, i32* @esi, align 4
  %v2_1000e4b1 = load i8, i8* %arg1, align 1
  %v3_1000e4b1 = sext i8 %v2_1000e4b1 to i32
  store i32 %v3_1000e4b1, i32* %eax.global-to-local, align 4
  %v2_1000e4b5 = call i32 @function_1001194b(i32 %v3_1000e4b1, i32 %v0_1000e4ac)
  store i32 %v2_1000e4b5, i32* %eax.global-to-local, align 4
  %v9_1000e4ba = icmp eq i32 %v2_1000e4b5, 101
  store i32 %v3_1000e4b1, i32* @ecx, align 4
  br i1 %v9_1000e4ba, label %dec_label_pc_1000e4ec, label %dec_label_pc_1000e4c0.preheader

dec_label_pc_1000e4c0.preheader:                  ; preds = %entry
  br label %dec_label_pc_1000e4c0

dec_label_pc_1000e4c0:                            ; preds = %dec_label_pc_1000e4c0.preheader, %dec_label_pc_1000e4e8
  %v0_1000e4c0 = load i32, i32* @esi, align 4
  %v1_1000e4c0 = add i32 %v0_1000e4c0, 1
  store i32 %v1_1000e4c0, i32* @esi, align 4
  %v0_1000e4c1 = load i32, i32* @global_var_100185e0.98, align 32
  %v7_1000e4c8 = icmp sgt i32 %v0_1000e4c1, 1
  %v1_1000e4ca = inttoptr i32 %v1_1000e4c0 to i8*
  %v2_1000e4ca = load i8, i8* %v1_1000e4ca, align 1
  %v3_1000e4ca = sext i8 %v2_1000e4ca to i32
  store i32 %v3_1000e4ca, i32* %eax.global-to-local, align 4
  br i1 %v7_1000e4c8, label %dec_label_pc_1000e4ca, label %dec_label_pc_1000e4d9

dec_label_pc_1000e4ca:                            ; preds = %dec_label_pc_1000e4c0
  %v3_1000e4d0 = call i32 @function_1000e8d2(i8 %v2_1000e4ca, i32 4)
  store i32 %v3_1000e4d0, i32* %eax.global-to-local, align 4
  store i32 4, i32* @ecx, align 4
  br label %dec_label_pc_1000e4e8

dec_label_pc_1000e4d9:                            ; preds = %dec_label_pc_1000e4c0
  %v0_1000e4dc = load i32, i32* @global_var_100183d4, align 4
  store i32 %v0_1000e4dc, i32* @ecx, align 4
  %v2_1000e4e2 = mul nsw i32 %v3_1000e4ca, 2
  %v3_1000e4e2 = add i32 %v0_1000e4dc, %v2_1000e4e2
  %v4_1000e4e2 = inttoptr i32 %v3_1000e4e2 to i8*
  %v5_1000e4e2 = load i8, i8* %v4_1000e4e2, align 1
  %v6_1000e4e2 = zext i8 %v5_1000e4e2 to i32
  %v1_1000e4e5 = and i32 %v6_1000e4e2, 4
  store i32 %v1_1000e4e5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000e4e8

dec_label_pc_1000e4e8:                            ; preds = %dec_label_pc_1000e4ca, %dec_label_pc_1000e4d9
  %v2_1000e4ec3 = phi i32 [ 4, %dec_label_pc_1000e4ca ], [ %v0_1000e4dc, %dec_label_pc_1000e4d9 ]
  %v0_1000e4e8 = phi i32 [ %v3_1000e4d0, %dec_label_pc_1000e4ca ], [ %v1_1000e4e5, %dec_label_pc_1000e4d9 ]
  %v1_1000e4e8 = icmp eq i32 %v0_1000e4e8, 0
  %v1_1000e4ea = icmp eq i1 %v1_1000e4e8, false
  br i1 %v1_1000e4ea, label %dec_label_pc_1000e4c0, label %dec_label_pc_1000e4ec

dec_label_pc_1000e4ec:                            ; preds = %dec_label_pc_1000e4e8, %entry
  %v4_1000e4f2 = phi i32 [ %v2_1000e4b5, %entry ], [ %v0_1000e4e8, %dec_label_pc_1000e4e8 ]
  %v2_1000e4ec = phi i32 [ %v3_1000e4b1, %entry ], [ %v2_1000e4ec3, %dec_label_pc_1000e4e8 ]
  %v0_1000e4ec = load i8, i8* @global_var_100185e4.137, align 4
  %v1_1000e4ec = zext i8 %v0_1000e4ec to i32
  %v3_1000e4ec = and i32 %v2_1000e4ec, -256
  %v4_1000e4ec = or i32 %v1_1000e4ec, %v3_1000e4ec
  store i32 %v4_1000e4ec, i32* %ecx.global-to-local, align 4
  %v0_1000e4f2 = load i32, i32* @esi, align 4
  %v1_1000e4f2 = inttoptr i32 %v0_1000e4f2 to i8*
  %v2_1000e4f2 = load i8, i8* %v1_1000e4f2, align 1
  %v3_1000e4f2 = zext i8 %v2_1000e4f2 to i32
  %v5_1000e4f2 = and i32 %v4_1000e4f2, -256
  %v6_1000e4f2 = or i32 %v3_1000e4f2, %v5_1000e4f2
  store i32 %v6_1000e4f2, i32* %eax.global-to-local, align 4
  store i8 %v0_1000e4ec, i8* %v1_1000e4f2, align 1
  %v0_1000e4f6 = load i32, i32* @esi, align 4
  %v1_1000e4f6 = add i32 %v0_1000e4f6, 1
  store i32 %v1_1000e4f6, i32* %esi.global-to-local, align 4
  %v4_1000e4f7.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_1000e4f9.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000e4f7

dec_label_pc_1000e4f7:                            ; preds = %dec_label_pc_1000e4f7, %dec_label_pc_1000e4ec
  %v0_1000e4f9 = phi i32 [ %v4_1000e4fb, %dec_label_pc_1000e4f7 ], [ %v0_1000e4f9.pre, %dec_label_pc_1000e4ec ]
  %v4_1000e4f7 = phi i32 [ %v6_1000e4fd, %dec_label_pc_1000e4f7 ], [ %v4_1000e4f7.pre, %dec_label_pc_1000e4ec ]
  %v2_1000e4f9 = phi i32 [ %v1_1000e4ff, %dec_label_pc_1000e4f7 ], [ %v1_1000e4f6, %dec_label_pc_1000e4ec ]
  %v1_1000e4f7 = inttoptr i32 %v2_1000e4f9 to i8*
  %v2_1000e4f7 = load i8, i8* %v1_1000e4f7, align 1
  %v3_1000e4f7 = zext i8 %v2_1000e4f7 to i32
  %v5_1000e4f7 = and i32 %v4_1000e4f7, -256
  %v6_1000e4f7 = or i32 %v3_1000e4f7, %v5_1000e4f7
  store i32 %v6_1000e4f7, i32* %ecx.global-to-local, align 4
  %v1_1000e4f9 = trunc i32 %v0_1000e4f9 to i8
  store i8 %v1_1000e4f9, i8* %v1_1000e4f7, align 1
  %v0_1000e4fb = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000e4fb = and i32 %v0_1000e4fb, 255
  %v2_1000e4fb = load i32, i32* %eax.global-to-local, align 4
  %v3_1000e4fb = and i32 %v2_1000e4fb, -256
  %v4_1000e4fb = or i32 %v3_1000e4fb, %v1_1000e4fb
  store i32 %v4_1000e4fb, i32* %eax.global-to-local, align 4
  %v0_1000e4fd = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e4fd = inttoptr i32 %v0_1000e4fd to i8*
  %v2_1000e4fd = load i8, i8* %v1_1000e4fd, align 1
  %v3_1000e4fd = zext i8 %v2_1000e4fd to i32
  %v5_1000e4fd = and i32 %v0_1000e4fb, -256
  %v6_1000e4fd = or i32 %v3_1000e4fd, %v5_1000e4fd
  store i32 %v6_1000e4fd, i32* %ecx.global-to-local, align 4
  %v1_1000e4ff = add i32 %v0_1000e4fd, 1
  store i32 %v1_1000e4ff, i32* %esi.global-to-local, align 4
  %v4_1000e500 = icmp eq i8 %v2_1000e4fd, 0
  %v1_1000e502 = icmp eq i1 %v4_1000e500, false
  br i1 %v1_1000e502, label %dec_label_pc_1000e4f7, label %dec_label_pc_1000e504

dec_label_pc_1000e504:                            ; preds = %dec_label_pc_1000e4f7
  %v2_1000e504 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000e504, i32* %esi.global-to-local, align 4
  ret i32 %v4_1000e4fb

; uselistorder directives
  uselistorder i32 %v1_1000e4ff, { 1, 0 }
  uselistorder i32 %v6_1000e4fd, { 1, 0 }
  uselistorder i32 %v4_1000e4fb, { 0, 2, 1 }
  uselistorder i32 %v0_1000e4dc, { 1, 0, 2 }
  uselistorder i32 %v2_1000e4b5, { 1, 0, 2 }
  uselistorder i32 %v3_1000e4b1, { 1, 0, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_1000e4e8, { 1, 0 }
  uselistorder label %dec_label_pc_1000e4c0, { 1, 0 }
}

define i32 @function_1000e506(i8* %arg1) local_unnamed_addr {
dec_label_pc_1000e506:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %v4_1000e506 = ptrtoint i8* %arg1 to i32
  store i32 %v4_1000e506, i32* %eax.global-to-local, align 4
  %v0_1000e50a = load i8, i8* @global_var_100185e4.137, align 4
  %v1_1000e50a = zext i8 %v0_1000e50a to i32
  %v2_1000e50a = load i32, i32* @edx, align 4
  %v3_1000e50a = and i32 %v2_1000e50a, -256
  %v4_1000e50a = or i32 %v3_1000e50a, %v1_1000e50a
  store i32 %v4_1000e50a, i32* %edx.global-to-local, align 4
  %v2_1000e510 = load i8, i8* %arg1, align 1
  %v3_1000e510 = zext i8 %v2_1000e510 to i32
  %v4_1000e510 = load i32, i32* @ecx, align 4
  %v5_1000e510 = and i32 %v4_1000e510, -256
  %v6_1000e510 = or i32 %v5_1000e510, %v3_1000e510
  store i32 %v6_1000e510, i32* %ecx.global-to-local, align 4
  %v4_1000e512 = icmp eq i8 %v2_1000e510, 0
  store i1 %v4_1000e512, i1* %zf.global-to-local, align 1
  br i1 %v4_1000e512, label %dec_label_pc_1000e522, label %dec_label_pc_1000e516

dec_label_pc_1000e516:                            ; preds = %dec_label_pc_1000e506, %dec_label_pc_1000e51a
  %v0_1000e51d = phi i32 [ %v1_1000e51a, %dec_label_pc_1000e51a ], [ %v4_1000e506, %dec_label_pc_1000e506 ]
  %v5_1000e51a = phi i32 [ %v7_1000e51a, %dec_label_pc_1000e51a ], [ %v6_1000e510, %dec_label_pc_1000e506 ]
  %v1_1000e516 = trunc i32 %v5_1000e51a to i8
  %v15_1000e516 = icmp eq i8 %v1_1000e516, %v0_1000e50a
  store i1 %v15_1000e516, i1* %zf.global-to-local, align 1
  br i1 %v15_1000e516, label %dec_label_pc_1000e522, label %dec_label_pc_1000e51a

dec_label_pc_1000e51a:                            ; preds = %dec_label_pc_1000e516
  %v1_1000e51a = add i32 %v0_1000e51d, 1
  %v2_1000e51a = inttoptr i32 %v1_1000e51a to i8*
  %v3_1000e51a = load i8, i8* %v2_1000e51a, align 1
  %v4_1000e51a = zext i8 %v3_1000e51a to i32
  %v6_1000e51a = and i32 %v5_1000e51a, -256
  %v7_1000e51a = or i32 %v4_1000e51a, %v6_1000e51a
  store i32 %v7_1000e51a, i32* %ecx.global-to-local, align 4
  store i32 %v1_1000e51a, i32* %eax.global-to-local, align 4
  %v4_1000e51e = icmp eq i8 %v3_1000e51a, 0
  store i1 %v4_1000e51e, i1* %zf.global-to-local, align 1
  %v1_1000e520 = icmp eq i1 %v4_1000e51e, false
  br i1 %v1_1000e520, label %dec_label_pc_1000e516, label %dec_label_pc_1000e522

dec_label_pc_1000e522:                            ; preds = %dec_label_pc_1000e51a, %dec_label_pc_1000e516, %dec_label_pc_1000e506
  %v4_1000e522 = phi i32 [ %v6_1000e510, %dec_label_pc_1000e506 ], [ %v7_1000e51a, %dec_label_pc_1000e51a ], [ %v5_1000e51a, %dec_label_pc_1000e516 ]
  %v0_1000e524 = phi i32 [ %v4_1000e506, %dec_label_pc_1000e506 ], [ %v1_1000e51a, %dec_label_pc_1000e51a ], [ %v0_1000e51d, %dec_label_pc_1000e516 ]
  %v1_1000e522 = inttoptr i32 %v0_1000e524 to i8*
  %v2_1000e522 = load i8, i8* %v1_1000e522, align 1
  %v3_1000e522 = zext i8 %v2_1000e522 to i32
  %v5_1000e522 = and i32 %v4_1000e522, -256
  %v6_1000e522 = or i32 %v3_1000e522, %v5_1000e522
  store i32 %v6_1000e522, i32* %ecx.global-to-local, align 4
  %v1_1000e524 = add i32 %v0_1000e524, 1
  store i32 %v1_1000e524, i32* %eax.global-to-local, align 4
  %v4_1000e525 = icmp eq i8 %v2_1000e522, 0
  store i1 %v4_1000e525, i1* %zf.global-to-local, align 1
  br i1 %v4_1000e525, label %dec_label_pc_1000e553, label %dec_label_pc_1000e529.preheader

dec_label_pc_1000e529.preheader:                  ; preds = %dec_label_pc_1000e522
  %v1_1000e5292 = inttoptr i32 %v1_1000e524 to i8*
  %v2_1000e5293 = load i8, i8* %v1_1000e5292, align 1
  %v3_1000e5294 = zext i8 %v2_1000e5293 to i32
  %v6_1000e5297 = or i32 %v3_1000e5294, %v5_1000e522
  store i32 %v6_1000e5297, i32* %ecx.global-to-local, align 4
  %v4_1000e52b8 = icmp eq i8 %v2_1000e5293, 0
  store i1 %v4_1000e52b8, i1* %zf.global-to-local, align 1
  br i1 %v4_1000e52b8, label %dec_label_pc_1000e53c, label %dec_label_pc_1000e52f

dec_label_pc_1000e52f:                            ; preds = %dec_label_pc_1000e529.preheader, %dec_label_pc_1000e539
  %v0_1000e539 = phi i32 [ %v1_1000e539, %dec_label_pc_1000e539 ], [ %v1_1000e524, %dec_label_pc_1000e529.preheader ]
  %v4_1000e529 = phi i32 [ %v6_1000e529, %dec_label_pc_1000e539 ], [ %v6_1000e5297, %dec_label_pc_1000e529.preheader ]
  %v1_1000e52f = trunc i32 %v4_1000e529 to i8
  %v10_1000e52f = icmp eq i8 %v1_1000e52f, 101
  store i1 %v10_1000e52f, i1* %zf.global-to-local, align 1
  br i1 %v10_1000e52f, label %dec_label_pc_1000e53c, label %dec_label_pc_1000e534

dec_label_pc_1000e534:                            ; preds = %dec_label_pc_1000e52f
  %v10_1000e534 = icmp eq i8 %v1_1000e52f, 69
  store i1 %v10_1000e534, i1* %zf.global-to-local, align 1
  br i1 %v10_1000e534, label %dec_label_pc_1000e53c, label %dec_label_pc_1000e539

dec_label_pc_1000e539:                            ; preds = %dec_label_pc_1000e534
  %v1_1000e539 = add i32 %v0_1000e539, 1
  %v8_1000e539 = icmp eq i32 %v1_1000e539, 0
  store i1 %v8_1000e539, i1* %zf.global-to-local, align 1
  store i32 %v1_1000e539, i32* %eax.global-to-local, align 4
  %v1_1000e529 = inttoptr i32 %v1_1000e539 to i8*
  %v2_1000e529 = load i8, i8* %v1_1000e529, align 1
  %v3_1000e529 = zext i8 %v2_1000e529 to i32
  %v5_1000e529 = and i32 %v4_1000e529, -256
  %v6_1000e529 = or i32 %v3_1000e529, %v5_1000e529
  store i32 %v6_1000e529, i32* %ecx.global-to-local, align 4
  %v4_1000e52b = icmp eq i8 %v2_1000e529, 0
  store i1 %v4_1000e52b, i1* %zf.global-to-local, align 1
  br i1 %v4_1000e52b, label %dec_label_pc_1000e53c, label %dec_label_pc_1000e52f

dec_label_pc_1000e53c:                            ; preds = %dec_label_pc_1000e539, %dec_label_pc_1000e52f, %dec_label_pc_1000e534, %dec_label_pc_1000e529.preheader
  %v0_1000e53c = phi i32 [ %v1_1000e524, %dec_label_pc_1000e529.preheader ], [ %v1_1000e539, %dec_label_pc_1000e539 ], [ %v0_1000e539, %dec_label_pc_1000e52f ], [ %v0_1000e539, %dec_label_pc_1000e534 ]
  store i32 %v0_1000e53c, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000e53e

dec_label_pc_1000e53e:                            ; preds = %dec_label_pc_1000e53e, %dec_label_pc_1000e53c
  %v0_1000e53e = phi i32 [ %v1_1000e53e, %dec_label_pc_1000e53e ], [ %v0_1000e53c, %dec_label_pc_1000e53c ]
  %v1_1000e53e = add i32 %v0_1000e53e, -1
  %v8_1000e53e = icmp eq i32 %v1_1000e53e, 0
  store i1 %v8_1000e53e, i1* %zf.global-to-local, align 1
  store i32 %v1_1000e53e, i32* %eax.global-to-local, align 4
  %v1_1000e53f = inttoptr i32 %v1_1000e53e to i8*
  %v2_1000e53f = load i8, i8* %v1_1000e53f, align 1
  %v8_1000e53f = icmp eq i8 %v2_1000e53f, 48
  store i1 %v8_1000e53f, i1* %zf.global-to-local, align 1
  br i1 %v8_1000e53f, label %dec_label_pc_1000e53e, label %dec_label_pc_1000e544

dec_label_pc_1000e544:                            ; preds = %dec_label_pc_1000e53e
  %v2_1000e544 = load i8, i8* %v1_1000e53f, align 1
  %v15_1000e544 = icmp eq i8 %v2_1000e544, %v0_1000e50a
  store i1 %v15_1000e544, i1* %zf.global-to-local, align 1
  %v1_1000e546 = icmp eq i1 %v15_1000e544, false
  br i1 %v1_1000e546, label %dec_label_pc_1000e549, label %dec_label_pc_1000e548

dec_label_pc_1000e548:                            ; preds = %dec_label_pc_1000e544
  %v1_1000e548 = add i32 %v0_1000e53e, -2
  %v8_1000e548 = icmp eq i32 %v1_1000e548, 0
  store i1 %v8_1000e548, i1* %zf.global-to-local, align 1
  store i32 %v1_1000e548, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000e549

dec_label_pc_1000e549:                            ; preds = %dec_label_pc_1000e544, %dec_label_pc_1000e548, %dec_label_pc_1000e549.dec_label_pc_1000e549_crit_edge
  %v0_1000e54b = phi i32 [ %v0_1000e54b.pre, %dec_label_pc_1000e549.dec_label_pc_1000e549_crit_edge ], [ %v1_1000e53e, %dec_label_pc_1000e544 ], [ %v1_1000e548, %dec_label_pc_1000e548 ]
  %v4_1000e549 = phi i32 [ %v4_1000e549.pre, %dec_label_pc_1000e549.dec_label_pc_1000e549_crit_edge ], [ %v4_1000e50a, %dec_label_pc_1000e544 ], [ %v4_1000e50a, %dec_label_pc_1000e548 ]
  %v0_1000e54c = phi i32 [ %v0_1000e549.pre, %dec_label_pc_1000e549.dec_label_pc_1000e549_crit_edge ], [ %v0_1000e53c, %dec_label_pc_1000e544 ], [ %v0_1000e53c, %dec_label_pc_1000e548 ]
  %v1_1000e549 = inttoptr i32 %v0_1000e54c to i8*
  %v2_1000e549 = load i8, i8* %v1_1000e549, align 1
  %v3_1000e549 = zext i8 %v2_1000e549 to i32
  %v5_1000e549 = and i32 %v4_1000e549, -256
  %v6_1000e549 = or i32 %v3_1000e549, %v5_1000e549
  store i32 %v6_1000e549, i32* %edx.global-to-local, align 4
  %v1_1000e54b = add i32 %v0_1000e54b, 1
  store i32 %v1_1000e54b, i32* %eax.global-to-local, align 4
  %v1_1000e54c = add i32 %v0_1000e54c, 1
  store i32 %v1_1000e54c, i32* %ecx.global-to-local, align 4
  %v4_1000e54d = icmp eq i8 %v2_1000e549, 0
  store i1 %v4_1000e54d, i1* %zf.global-to-local, align 1
  %v3_1000e54f = inttoptr i32 %v1_1000e54b to i8*
  store i8 %v2_1000e549, i8* %v3_1000e54f, align 1
  %v0_1000e551 = load i1, i1* %zf.global-to-local, align 1
  %v1_1000e551 = icmp eq i1 %v0_1000e551, false
  br i1 %v1_1000e551, label %dec_label_pc_1000e549.dec_label_pc_1000e549_crit_edge, label %dec_label_pc_1000e553.loopexit

dec_label_pc_1000e549.dec_label_pc_1000e549_crit_edge: ; preds = %dec_label_pc_1000e549
  %v0_1000e549.pre = load i32, i32* %ecx.global-to-local, align 4
  %v4_1000e549.pre = load i32, i32* %edx.global-to-local, align 4
  %v0_1000e54b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000e549

dec_label_pc_1000e553.loopexit:                   ; preds = %dec_label_pc_1000e549
  %v0_1000e553.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000e553

dec_label_pc_1000e553:                            ; preds = %dec_label_pc_1000e553.loopexit, %dec_label_pc_1000e522
  %v0_1000e553 = phi i32 [ %v0_1000e553.pre, %dec_label_pc_1000e553.loopexit ], [ %v1_1000e524, %dec_label_pc_1000e522 ]
  ret i32 %v0_1000e553

; uselistorder directives
  uselistorder i32 %v1_1000e548, { 0, 2, 1 }
  uselistorder i1 %v15_1000e544, { 1, 0 }
  uselistorder i1 %v8_1000e53f, { 1, 0 }
  uselistorder i32 %v1_1000e53e, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v6_1000e529, { 1, 0 }
  uselistorder i32 %v1_1000e539, { 0, 2, 3, 4, 1 }
  uselistorder i1 %v10_1000e534, { 1, 0 }
  uselistorder i1 %v10_1000e52f, { 1, 0 }
  uselistorder i32 %v1_1000e524, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v7_1000e51a, { 0, 2, 1 }
  uselistorder i32 %v1_1000e51a, { 0, 2, 3, 1 }
  uselistorder i1 %v15_1000e516, { 1, 0 }
  uselistorder i32 %v6_1000e510, { 1, 0, 2 }
  uselistorder i32 %v4_1000e506, { 1, 0, 2 }
  uselistorder i1* %zf.global-to-local, { 1, 2, 3, 4, 5, 6, 10, 7, 8, 9, 0, 11, 12, 13, 14 }
  uselistorder i32* %ecx.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder label %dec_label_pc_1000e549, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1000e53c, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_1000e52f, { 1, 0 }
  uselistorder label %dec_label_pc_1000e516, { 1, 0 }
}

define i32 @function_1000e554(double* %arg1) local_unnamed_addr {
dec_label_pc_1000e554:
  %v4_1000e554 = ptrtoint double* %arg1 to i32
  %v1_1000e562 = udiv i32 %v4_1000e554, 256
  %v3_1000e562 = and i32 %v1_1000e562, 1
  %v4_1000e562 = icmp eq i32 %v3_1000e562, 0
  br i1 %v4_1000e562, label %dec_label_pc_1000e565, label %dec_label_pc_1000e569

dec_label_pc_1000e565:                            ; preds = %dec_label_pc_1000e554
  ret i32 1

dec_label_pc_1000e569:                            ; preds = %dec_label_pc_1000e554
  ret i32 0
}

define i32 @function_1000e56c(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000e56c:
  %tmp1 = ptrtoint i32* %arg2 to i32
  %stack_var_12 = alloca i32, align 4
  store i32 %arg3, i32* %stack_var_12, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_1000e56f = load i32, i32* @ecx, align 4
  store i32 %v0_1000e56f, i32* %stack_var_-12, align 4
  %v4_1000e571 = icmp eq i32 %arg1, 0
  br i1 %v4_1000e571, label %dec_label_pc_1000e595, label %dec_label_pc_1000e57a

dec_label_pc_1000e57a:                            ; preds = %dec_label_pc_1000e56c
  %v4_1000e570 = ptrtoint i32* %stack_var_-12 to i32
  %v4_1000e57e = call i32 @function_10011e17(i32 %v4_1000e570, i32 %arg3, i32 %v0_1000e56f, i32 %v0_1000e56f)
  %v3_1000e588 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_1000e588, i32* %arg2, align 4
  %v2_1000e590 = add i32 %tmp1, 4
  %v3_1000e590 = inttoptr i32 %v2_1000e590 to i32*
  store i32 %v0_1000e56f, i32* %v3_1000e590, align 4
  ret i32 %tmp1

dec_label_pc_1000e595:                            ; preds = %dec_label_pc_1000e56c
  %v2_1000e595 = ptrtoint i32* %stack_var_12 to i32
  %v4_1000e599 = call i32 @function_10011e44(i32 %v2_1000e595, i32 %arg3, i32 %v0_1000e56f, i32 %v0_1000e56f)
  %v3_1000e5a3 = load i32, i32* %stack_var_12, align 4
  store i32 %v3_1000e5a3, i32* %arg2, align 4
  ret i32 %tmp1

; uselistorder directives
  uselistorder i32 %v0_1000e56f, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_12, { 1, 2, 0 }
  uselistorder i32 %tmp1, { 2, 0, 1 }
}

define i32 @function_1000e5aa(double* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000e5aa:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000e5aa = load i32, i32* @ebp, align 4
  store i32 %v0_1000e5aa, i32* %stack_var_-4, align 4
  %v4_1000e5aa = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000e5aa, i32* @ebp, align 4
  %v15_1000e5ad = ptrtoint i32* %stack_var_-44 to i32
  %v0_1000e5b3 = load i32, i32* @esi, align 4
  %v2_1000e5b5 = ptrtoint i32* %stack_var_-20 to i32
  %v0_1000e5bc = load i32, i32* @ecx, align 4
  %v2_1000e5be = load double, double* %arg1, align 4
  %tmp = fptrunc double %v2_1000e5be to float
  %v6_1000e5c0 = bitcast float %tmp to i32
  %v5_1000e5c3 = inttoptr i32 %v6_1000e5c0 to i32*
  %v6_1000e5c3 = call i32 @function_10011ee8(i32* %v5_1000e5c3, i32 %v0_1000e5bc, i32 %v2_1000e5b5, i32 %v15_1000e5ad, i32 %v0_1000e5b3)
  store i32 %arg3, i32* @esi, align 4
  %v1_1000e5d2 = add i32 %arg3, 1
  %v3_1000e5d8 = load i32, i32* %stack_var_-20, align 4
  %v12_1000e5d8 = icmp eq i32 %v3_1000e5d8, 45
  %v1_1000e5dc = zext i1 %v12_1000e5d8 to i32
  %tmp22 = icmp slt i32 %arg3, 1
  %tmp23 = icmp eq i1 %tmp22, false
  %v6_1000e5e3 = zext i1 %tmp23 to i32
  %v2_1000e5e6 = add i32 %v1_1000e5dc, %arg2
  %v2_1000e5e8 = add i32 %v2_1000e5e6, %v6_1000e5e3
  %v3_1000e5eb = inttoptr i32 %v2_1000e5e8 to i8*
  %v4_1000e5eb = call i32 @function_10011e71(i8* %v3_1000e5eb, i32 %v1_1000e5d2, i32 %v2_1000e5b5)
  %v5_1000e5fd = inttoptr i32 %arg2 to i8*
  %v6_1000e5fd = call i32 @function_1000e60b(i8* %v5_1000e5fd, i32 %arg3, i32 %arg4, i32 %v2_1000e5b5, i32 0)
  ret i32 %arg2

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0 }
}

define i32 @function_1000e60b(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1000e60b:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = trunc i32 %arg5 to i8
  %stack_var_-20 = alloca i8*, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v16_1000e611 = icmp eq i8 %tmp, 0
  %v0_1000e614 = load i32, i32* @esi, align 4
  store i32 %arg4, i32* @esi, align 4
  %v4_1000e619 = ptrtoint i8* %arg1 to i32
  store i32 %v4_1000e619, i32* @edi, align 4
  br i1 %v16_1000e611, label %dec_label_pc_1000e639, label %dec_label_pc_1000e61e

dec_label_pc_1000e61e:                            ; preds = %dec_label_pc_1000e60b
  %tmp27 = icmp slt i32 %arg2, 1
  %tmp28 = icmp eq i1 %tmp27, false
  %v6_1000e623 = zext i1 %tmp28 to i32
  %v5_1000e626 = inttoptr i32 %v6_1000e623 to i8*
  store i8* %v5_1000e626, i8** %stack_var_-20, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_1000e629 = inttoptr i32 %arg4 to i32*
  %v2_1000e629 = load i32, i32* %v1_1000e629, align 4
  %v11_1000e629 = icmp eq i32 %v2_1000e629, 45
  %v1_1000e62c = zext i1 %v11_1000e629 to i32
  %v2_1000e62f = add i32 %v1_1000e62c, %v4_1000e619
  store i32 %v2_1000e62f, i32* %eax.global-to-local, align 4
  %v4_1000e632 = call i32 @function_1000e8ad(i32 %v2_1000e62f, i32 %v6_1000e623)
  store i32 %v4_1000e632, i32* %eax.global-to-local, align 4
  %v2_1000e638 = load i8*, i8** %stack_var_-20, align 4
  %v3_1000e638 = ptrtoint i8* %v2_1000e638 to i32
  store i32 %v3_1000e638, i32* %ecx.global-to-local, align 4
  %v0_1000e639.pre = load i32, i32* @esi, align 4
  %v0_1000e63c.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000e639

dec_label_pc_1000e639:                            ; preds = %dec_label_pc_1000e60b, %dec_label_pc_1000e61e
  %v0_1000e640 = phi i32 [ %v4_1000e619, %dec_label_pc_1000e60b ], [ %v0_1000e63c.pre, %dec_label_pc_1000e61e ]
  %v0_1000e639 = phi i32 [ %arg4, %dec_label_pc_1000e60b ], [ %v0_1000e639.pre, %dec_label_pc_1000e61e ]
  %v1_1000e639 = inttoptr i32 %v0_1000e639 to i32*
  %v2_1000e639 = load i32, i32* %v1_1000e639, align 4
  %v11_1000e639 = icmp eq i32 %v2_1000e639, 45
  store i32 %v0_1000e640, i32* %eax.global-to-local, align 4
  %v1_1000e63e = icmp eq i1 %v11_1000e639, false
  br i1 %v1_1000e63e, label %dec_label_pc_1000e646, label %dec_label_pc_1000e640

dec_label_pc_1000e640:                            ; preds = %dec_label_pc_1000e639
  %v1_1000e640 = inttoptr i32 %v0_1000e640 to i8*
  store i8 45, i8* %v1_1000e640, align 1
  %v0_1000e643 = load i32, i32* @edi, align 4
  %v1_1000e643 = add i32 %v0_1000e643, 1
  store i32 %v1_1000e643, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000e646

dec_label_pc_1000e646:                            ; preds = %dec_label_pc_1000e639, %dec_label_pc_1000e640
  %v0_1000e64e = phi i32 [ %v0_1000e640, %dec_label_pc_1000e639 ], [ %v1_1000e643, %dec_label_pc_1000e640 ]
  %v4_1000e646 = load i32, i32* %ebx.global-to-local, align 4
  %v7_1000e649 = icmp slt i32 %v4_1000e646, %arg2
  br i1 %v7_1000e649, label %dec_label_pc_1000e64b, label %dec_label_pc_1000e65d

dec_label_pc_1000e64b:                            ; preds = %dec_label_pc_1000e646
  %v1_1000e64b = add i32 %v0_1000e64e, 1
  %v2_1000e64b = inttoptr i32 %v1_1000e64b to i8*
  %v3_1000e64b = load i8, i8* %v2_1000e64b, align 1
  %v4_1000e64b = zext i8 %v3_1000e64b to i32
  %v5_1000e64b = load i32, i32* @edx, align 4
  %v6_1000e64b = and i32 %v5_1000e64b, -256
  %v7_1000e64b = or i32 %v6_1000e64b, %v4_1000e64b
  store i32 %v7_1000e64b, i32* @edx, align 4
  store i32 %v1_1000e64b, i32* %ecx.global-to-local, align 4
  %v3_1000e651 = inttoptr i32 %v0_1000e64e to i8*
  store i8 %v3_1000e64b, i8* %v3_1000e651, align 1
  %v0_1000e653 = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_1000e653, i32* %eax.global-to-local, align 4
  %v0_1000e655 = load i8, i8* @global_var_100185e4.137, align 4
  %v1_1000e655 = zext i8 %v0_1000e655 to i32
  %v3_1000e655 = and i32 %v0_1000e653, -256
  %v4_1000e655 = or i32 %v1_1000e655, %v3_1000e655
  store i32 %v4_1000e655, i32* %ecx.global-to-local, align 4
  %v3_1000e65b = inttoptr i32 %v0_1000e653 to i8*
  store i8 %v0_1000e655, i8* %v3_1000e65b, align 1
  %v4_1000e65f.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e66a.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000e65d

dec_label_pc_1000e65d:                            ; preds = %dec_label_pc_1000e646, %dec_label_pc_1000e64b
  %v1_1000e66a = phi i32 [ %v0_1000e64e, %dec_label_pc_1000e646 ], [ %v1_1000e66a.pre, %dec_label_pc_1000e64b ]
  %v4_1000e65f = phi i32 [ %v4_1000e646, %dec_label_pc_1000e646 ], [ %v4_1000e65f.pre, %dec_label_pc_1000e64b ]
  %v5_1000e65f = trunc i32 %v4_1000e65f to i8
  %v16_1000e65f = icmp eq i8 %tmp, %v5_1000e65f
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_10016200.138, i32 0, i32 0), i8** %stack_var_-20, align 4
  %v1_1000e667 = zext i1 %v16_1000e65f to i32
  %v2_1000e66a = add i32 %v1_1000e667, %v1_1000e66a
  %v5_1000e66c = add i32 %v2_1000e66a, %arg2
  store i32 %v5_1000e66c, i32* %ecx.global-to-local, align 4
  %v2_1000e670 = call i32 @function_1000d570(i32 %v5_1000e66c)
  store i32 %v2_1000e670, i32* %eax.global-to-local, align 4
  %v4_1000e675 = load i32, i32* %ebx.global-to-local, align 4
  %v15_1000e675 = icmp eq i32 %v4_1000e675, %arg3
  store i32 %v2_1000e670, i32* %ecx.global-to-local, align 4
  br i1 %v15_1000e675, label %dec_label_pc_1000e681, label %dec_label_pc_1000e67e

dec_label_pc_1000e67e:                            ; preds = %dec_label_pc_1000e65d
  %v1_1000e67e = inttoptr i32 %v2_1000e670 to i8*
  store i8 69, i8* %v1_1000e67e, align 1
  %v0_1000e684.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000e681

dec_label_pc_1000e681:                            ; preds = %dec_label_pc_1000e65d, %dec_label_pc_1000e67e
  %v0_1000e684 = phi i32 [ %v2_1000e670, %dec_label_pc_1000e65d ], [ %v0_1000e684.pre, %dec_label_pc_1000e67e ]
  %v0_1000e681 = load i32, i32* @esi, align 4
  %v1_1000e681 = add i32 %v0_1000e681, 12
  %v2_1000e681 = inttoptr i32 %v1_1000e681 to i32*
  %v3_1000e681 = load i32, i32* %v2_1000e681, align 4
  store i32 %v3_1000e681, i32* %eax.global-to-local, align 4
  %v1_1000e684 = add i32 %v0_1000e684, 1
  store i32 %v1_1000e684, i32* %ecx.global-to-local, align 4
  %v1_1000e685 = inttoptr i32 %v3_1000e681 to i8*
  %v2_1000e685 = load i8, i8* %v1_1000e685, align 1
  %v8_1000e685 = icmp eq i8 %v2_1000e685, 48
  br i1 %v8_1000e685, label %dec_label_pc_1000e6c6, label %dec_label_pc_1000e68a

dec_label_pc_1000e68a:                            ; preds = %dec_label_pc_1000e681
  %v1_1000e68a = add i32 %v0_1000e681, 4
  %v2_1000e68a = inttoptr i32 %v1_1000e68a to i32*
  %v3_1000e68a = load i32, i32* %v2_1000e68a, align 4
  %v1_1000e68d = add i32 %v3_1000e68a, -1
  %v9_1000e68d = icmp slt i32 %v1_1000e68d, 0
  store i32 %v1_1000e68d, i32* %ebx.global-to-local, align 4
  %v1_1000e68e = icmp eq i1 %v9_1000e68d, false
  br i1 %v1_1000e68e, label %dec_label_pc_1000e695, label %dec_label_pc_1000e690

dec_label_pc_1000e690:                            ; preds = %dec_label_pc_1000e68a
  %v1_1000e690 = sub i32 1, %v3_1000e68a
  store i32 %v1_1000e690, i32* %ebx.global-to-local, align 4
  %v1_1000e692 = inttoptr i32 %v1_1000e684 to i8*
  store i8 45, i8* %v1_1000e692, align 1
  %v0_1000e695.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_1000e696.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000e695

dec_label_pc_1000e695:                            ; preds = %dec_label_pc_1000e68a, %dec_label_pc_1000e690
  %v0_1000e69b = phi i32 [ %v1_1000e68d, %dec_label_pc_1000e68a ], [ %v0_1000e696.pre, %dec_label_pc_1000e690 ]
  %v0_1000e695 = phi i32 [ %v1_1000e684, %dec_label_pc_1000e68a ], [ %v0_1000e695.pre, %dec_label_pc_1000e690 ]
  %v1_1000e695 = add i32 %v0_1000e695, 1
  store i32 %v1_1000e695, i32* %ecx.global-to-local, align 4
  %v5_1000e699 = icmp slt i32 %v0_1000e69b, 100
  br i1 %v5_1000e699, label %dec_label_pc_1000e6ac, label %dec_label_pc_1000e69b

dec_label_pc_1000e69b:                            ; preds = %dec_label_pc_1000e695
  store i8* inttoptr (i32 100 to i8*), i8** %stack_var_-20, align 4
  %v1_1000e69f = ashr i32 %v0_1000e69b, 31
  store i32 100, i32* %esi.global-to-local, align 4
  %v2_1000e6a1 = zext i32 %v0_1000e69b to i64
  %v4_1000e6a1 = zext i32 %v1_1000e69f to i64
  %v5_1000e6a1 = mul nuw i64 %v4_1000e6a1, 4294967296
  %v6_1000e6a1 = or i64 %v5_1000e6a1, %v2_1000e6a1
  %v8_1000e6a1 = sdiv i64 %v6_1000e6a1, 100
  %v9_1000e6a1 = trunc i64 %v8_1000e6a1 to i32
  store i32 %v9_1000e6a1, i32* %eax.global-to-local, align 4
  %v1_1000e6a3 = inttoptr i32 %v1_1000e695 to i8*
  %v2_1000e6a3 = load i8, i8* %v1_1000e6a3, align 1
  %v4_1000e6a3 = trunc i64 %v8_1000e6a1 to i8
  %v5_1000e6a3 = add i8 %v2_1000e6a3, %v4_1000e6a3
  store i8 %v5_1000e6a3, i8* %v1_1000e6a3, align 1
  %v0_1000e6a5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e6a7 = ashr i32 %v0_1000e6a5, 31
  %v0_1000e6a8 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000e6a8 = zext i32 %v0_1000e6a5 to i64
  %v4_1000e6a8 = zext i32 %v1_1000e6a7 to i64
  %v5_1000e6a8 = mul nuw i64 %v4_1000e6a8, 4294967296
  %v6_1000e6a8 = or i64 %v5_1000e6a8, %v2_1000e6a8
  %v7_1000e6a8 = zext i32 %v0_1000e6a8 to i64
  %v8_1000e6a8 = sdiv i64 %v6_1000e6a8, %v7_1000e6a8
  %v9_1000e6a8 = trunc i64 %v8_1000e6a8 to i32
  store i32 %v9_1000e6a8, i32* %eax.global-to-local, align 4
  %v10_1000e6a8 = srem i64 %v6_1000e6a8, %v7_1000e6a8
  %v11_1000e6a8 = trunc i64 %v10_1000e6a8 to i32
  store i32 %v11_1000e6a8, i32* %ebx.global-to-local, align 4
  %v0_1000e6ac.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000e6ac

dec_label_pc_1000e6ac:                            ; preds = %dec_label_pc_1000e695, %dec_label_pc_1000e69b
  %v0_1000e6b2 = phi i32 [ %v0_1000e69b, %dec_label_pc_1000e695 ], [ %v11_1000e6a8, %dec_label_pc_1000e69b ]
  %v0_1000e6ac = phi i32 [ %v1_1000e695, %dec_label_pc_1000e695 ], [ %v0_1000e6ac.pre, %dec_label_pc_1000e69b ]
  %v1_1000e6ac = add i32 %v0_1000e6ac, 1
  store i32 %v1_1000e6ac, i32* %ecx.global-to-local, align 4
  %v5_1000e6b0 = icmp slt i32 %v0_1000e6b2, 10
  br i1 %v5_1000e6b0, label %dec_label_pc_1000e6c3, label %dec_label_pc_1000e6b2

dec_label_pc_1000e6b2:                            ; preds = %dec_label_pc_1000e6ac
  store i8* inttoptr (i32 10 to i8*), i8** %stack_var_-20, align 4
  %v1_1000e6b6 = ashr i32 %v0_1000e6b2, 31
  store i32 10, i32* %esi.global-to-local, align 4
  %v2_1000e6b8 = zext i32 %v0_1000e6b2 to i64
  %v4_1000e6b8 = zext i32 %v1_1000e6b6 to i64
  %v5_1000e6b8 = mul nuw i64 %v4_1000e6b8, 4294967296
  %v6_1000e6b8 = or i64 %v5_1000e6b8, %v2_1000e6b8
  %v8_1000e6b8 = sdiv i64 %v6_1000e6b8, 10
  %v9_1000e6b8 = trunc i64 %v8_1000e6b8 to i32
  store i32 %v9_1000e6b8, i32* %eax.global-to-local, align 4
  %v1_1000e6ba = inttoptr i32 %v1_1000e6ac to i8*
  %v2_1000e6ba = load i8, i8* %v1_1000e6ba, align 1
  %v4_1000e6ba = trunc i64 %v8_1000e6b8 to i8
  %v5_1000e6ba = add i8 %v2_1000e6ba, %v4_1000e6ba
  store i8 %v5_1000e6ba, i8* %v1_1000e6ba, align 1
  %v0_1000e6bc = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e6be = ashr i32 %v0_1000e6bc, 31
  %v0_1000e6bf = load i32, i32* %esi.global-to-local, align 4
  %v2_1000e6bf = zext i32 %v0_1000e6bc to i64
  %v4_1000e6bf = zext i32 %v1_1000e6be to i64
  %v5_1000e6bf = mul nuw i64 %v4_1000e6bf, 4294967296
  %v6_1000e6bf = or i64 %v5_1000e6bf, %v2_1000e6bf
  %v7_1000e6bf = zext i32 %v0_1000e6bf to i64
  %v8_1000e6bf = sdiv i64 %v6_1000e6bf, %v7_1000e6bf
  %v9_1000e6bf = trunc i64 %v8_1000e6bf to i32
  store i32 %v9_1000e6bf, i32* %eax.global-to-local, align 4
  %v10_1000e6bf = srem i64 %v6_1000e6bf, %v7_1000e6bf
  %v11_1000e6bf = trunc i64 %v10_1000e6bf to i32
  store i32 %v11_1000e6bf, i32* %ebx.global-to-local, align 4
  %v0_1000e6c3.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000e6c3

dec_label_pc_1000e6c3:                            ; preds = %dec_label_pc_1000e6ac, %dec_label_pc_1000e6b2
  %v4_1000e6c3 = phi i32 [ %v0_1000e6b2, %dec_label_pc_1000e6ac ], [ %v11_1000e6bf, %dec_label_pc_1000e6b2 ]
  %v21_1000e6c3 = phi i32 [ %v1_1000e6ac, %dec_label_pc_1000e6ac ], [ %v0_1000e6c3.pre, %dec_label_pc_1000e6b2 ]
  %v1_1000e6c3 = add i32 %v21_1000e6c3, 1
  %v2_1000e6c3 = inttoptr i32 %v1_1000e6c3 to i8*
  %v3_1000e6c3 = load i8, i8* %v2_1000e6c3, align 1
  %v5_1000e6c3 = trunc i32 %v4_1000e6c3 to i8
  %v6_1000e6c3 = add i8 %v3_1000e6c3, %v5_1000e6c3
  store i8 %v6_1000e6c3, i8* %v2_1000e6c3, align 1
  br label %dec_label_pc_1000e6c6

dec_label_pc_1000e6c6:                            ; preds = %dec_label_pc_1000e681, %dec_label_pc_1000e6c3
  %v0_1000e6c6 = load i32, i32* @edi, align 4
  store i32 %v0_1000e6c6, i32* %eax.global-to-local, align 4
  store i32 %v0_1000e614, i32* %esi.global-to-local, align 4
  ret i32 %v0_1000e6c6

; uselistorder directives
  uselistorder i32 %v1_1000e68d, { 0, 2, 1 }
  uselistorder i32 %v4_1000e619, { 1, 0, 2 }
  uselistorder i8** %stack_var_-20, { 4, 3, 2, 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 0, 4, 1, 5, 2, 3, 6, 7, 9, 8, 10 }
  uselistorder i32 100, { 1, 2, 0, 3, 4, 6, 7, 5, 8, 9, 10, 11, 12 }
  uselistorder i8 69, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1000e6c6, { 1, 0 }
  uselistorder label %dec_label_pc_1000e6c3, { 1, 0 }
  uselistorder label %dec_label_pc_1000e6ac, { 1, 0 }
  uselistorder label %dec_label_pc_1000e695, { 1, 0 }
  uselistorder label %dec_label_pc_1000e681, { 1, 0 }
  uselistorder label %dec_label_pc_1000e65d, { 1, 0 }
  uselistorder label %dec_label_pc_1000e646, { 1, 0 }
  uselistorder label %dec_label_pc_1000e639, { 1, 0 }
}

define i32 @function_1000e6cd(double* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000e6cd:
  %tmp2 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000e6cd = load i32, i32* @ebp, align 4
  store i32 %v0_1000e6cd, i32* %stack_var_-4, align 4
  %v4_1000e6cd = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000e6cd, i32* @ebp, align 4
  %v15_1000e6d0 = ptrtoint i32* %stack_var_-44 to i32
  %v0_1000e6d6 = load i32, i32* @esi, align 4
  %v2_1000e6d8 = ptrtoint i32* %stack_var_-20 to i32
  %v0_1000e6df = load i32, i32* @ecx, align 4
  %v2_1000e6e1 = load double, double* %arg1, align 4
  %tmp = fptrunc double %v2_1000e6e1 to float
  %v6_1000e6e3 = bitcast float %tmp to i32
  %v5_1000e6e6 = inttoptr i32 %v6_1000e6e3 to i32*
  %v6_1000e6e6 = call i32 @function_10011ee8(i32* %v5_1000e6e6, i32 %v0_1000e6df, i32 %v2_1000e6d8, i32 %v15_1000e6d0, i32 %v0_1000e6d6)
  store i32 %arg3, i32* @esi, align 4
  %v2_1000e6f5 = add i32 %tmp2, %arg3
  %v3_1000e6fa = load i32, i32* %stack_var_-20, align 4
  %v12_1000e6fa = icmp eq i32 %v3_1000e6fa, 45
  %v1_1000e6fe = zext i1 %v12_1000e6fa to i32
  %v5_1000e701 = add i32 %v1_1000e6fe, %arg2
  %v3_1000e705 = inttoptr i32 %v5_1000e701 to i8*
  %v4_1000e705 = call i32 @function_10011e71(i8* %v3_1000e705, i32 %v2_1000e6f5, i32 %v2_1000e6d8)
  %v0_1000e710 = load i32, i32* @esi, align 4
  %v4_1000e714 = inttoptr i32 %arg2 to i8*
  %v5_1000e714 = call i32 @function_1000e722(i8* %v4_1000e714, i32 %v0_1000e710, i32 %v2_1000e6d8, i32 0)
  ret i32 %arg2

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0 }
}

define i32 @function_1000e722(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000e722:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %tmp = trunc i32 %arg4 to i8
  store i32 %arg3, i32* @esi, align 4
  %v4_1000e72a = ptrtoint i8* %arg1 to i32
  store i32 %v4_1000e72a, i32* %ebx.global-to-local, align 4
  %v1_1000e72e = add i32 %arg3, 4
  %v2_1000e72e = inttoptr i32 %v1_1000e72e to i32*
  %v3_1000e72e = load i32, i32* %v2_1000e72e, align 4
  %v1_1000e731 = add i32 %v3_1000e72e, -1
  store i32 %v1_1000e731, i32* %eax.global-to-local, align 4
  %v4_1000e732 = icmp eq i8 %tmp, 0
  br i1 %v4_1000e732, label %dec_label_pc_1000e752, label %dec_label_pc_1000e738

dec_label_pc_1000e738:                            ; preds = %dec_label_pc_1000e722
  %v15_1000e738 = icmp eq i32 %v1_1000e731, %arg2
  %v1_1000e73b = icmp eq i1 %v15_1000e738, false
  br i1 %v1_1000e73b, label %dec_label_pc_1000e752, label %dec_label_pc_1000e73d

dec_label_pc_1000e73d:                            ; preds = %dec_label_pc_1000e738
  %v1_1000e73f = inttoptr i32 %arg3 to i32*
  %v2_1000e73f = load i32, i32* %v1_1000e73f, align 4
  %v11_1000e73f = icmp eq i32 %v2_1000e73f, 45
  %v1_1000e742 = zext i1 %v11_1000e73f to i32
  %v2_1000e745 = add i32 %v1_1000e731, %v4_1000e72a
  %v2_1000e747 = add i32 %v2_1000e745, %v1_1000e742
  store i32 %v2_1000e747, i32* %eax.global-to-local, align 4
  %v1_1000e74b = inttoptr i32 %v2_1000e747 to i8*
  store i8 48, i8* %v1_1000e74b, align 1
  %v4_1000e74e = load i32, i32* %eax.global-to-local, align 4
  %v5_1000e74e = add i32 %v4_1000e74e, 1
  %v6_1000e74e = inttoptr i32 %v5_1000e74e to i8*
  store i8 0, i8* %v6_1000e74e, align 1
  %v0_1000e752.pre = load i32, i32* @esi, align 4
  %v0_1000e755.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000e752

dec_label_pc_1000e752:                            ; preds = %dec_label_pc_1000e738, %dec_label_pc_1000e722, %dec_label_pc_1000e73d
  %v0_1000e759 = phi i32 [ %v4_1000e72a, %dec_label_pc_1000e738 ], [ %v4_1000e72a, %dec_label_pc_1000e722 ], [ %v0_1000e755.pre, %dec_label_pc_1000e73d ]
  %v0_1000e752 = phi i32 [ %arg3, %dec_label_pc_1000e738 ], [ %arg3, %dec_label_pc_1000e722 ], [ %v0_1000e752.pre, %dec_label_pc_1000e73d ]
  %v1_1000e752 = inttoptr i32 %v0_1000e752 to i32*
  %v2_1000e752 = load i32, i32* %v1_1000e752, align 4
  %v11_1000e752 = icmp eq i32 %v2_1000e752, 45
  store i32 %v0_1000e759, i32* @edi, align 4
  %v1_1000e757 = icmp eq i1 %v11_1000e752, false
  br i1 %v1_1000e757, label %dec_label_pc_1000e75f, label %dec_label_pc_1000e759

dec_label_pc_1000e759:                            ; preds = %dec_label_pc_1000e752
  %v1_1000e759 = inttoptr i32 %v0_1000e759 to i8*
  store i8 45, i8* %v1_1000e759, align 1
  %v0_1000e75c = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e75c = add i32 %v0_1000e75c, 1
  store i32 %v1_1000e75c, i32* @edi, align 4
  %v0_1000e75f.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000e75f

dec_label_pc_1000e75f:                            ; preds = %dec_label_pc_1000e752, %dec_label_pc_1000e759
  %v0_1000e776 = phi i32 [ %v0_1000e759, %dec_label_pc_1000e752 ], [ %v1_1000e75c, %dec_label_pc_1000e759 ]
  %v0_1000e75f = phi i32 [ %v0_1000e752, %dec_label_pc_1000e752 ], [ %v0_1000e75f.pre, %dec_label_pc_1000e759 ]
  %v1_1000e75f = add i32 %v0_1000e75f, 4
  %v2_1000e75f = inttoptr i32 %v1_1000e75f to i32*
  %v3_1000e75f = load i32, i32* %v2_1000e75f, align 4
  store i32 %v3_1000e75f, i32* %eax.global-to-local, align 4
  %tmp24 = icmp slt i32 %v3_1000e75f, 1
  %tmp25 = icmp eq i1 %tmp24, false
  br i1 %tmp25, label %dec_label_pc_1000e776, label %dec_label_pc_1000e766

dec_label_pc_1000e766:                            ; preds = %dec_label_pc_1000e75f
  %v3_1000e769 = call i32 @function_1000e8ad(i32 %v0_1000e776, i32 1)
  store i32 %v3_1000e769, i32* %eax.global-to-local, align 4
  %v0_1000e76f = load i32, i32* @edi, align 4
  %v1_1000e76f = inttoptr i32 %v0_1000e76f to i8*
  store i8 48, i8* %v1_1000e76f, align 1
  %v0_1000e773 = load i32, i32* @edi, align 4
  %v1_1000e773 = add i32 %v0_1000e773, 1
  br label %dec_label_pc_1000e778

dec_label_pc_1000e776:                            ; preds = %dec_label_pc_1000e75f
  %v2_1000e776 = add i32 %v3_1000e75f, %v0_1000e776
  br label %dec_label_pc_1000e778

dec_label_pc_1000e778:                            ; preds = %dec_label_pc_1000e766, %dec_label_pc_1000e776
  %v0_1000e780 = phi i32 [ %v1_1000e773, %dec_label_pc_1000e766 ], [ %v2_1000e776, %dec_label_pc_1000e776 ]
  store i32 %v0_1000e780, i32* @edi, align 4
  %tmp26 = icmp slt i32 %arg2, 1
  br i1 %tmp26, label %dec_label_pc_1000e7c2, label %dec_label_pc_1000e77e

dec_label_pc_1000e77e:                            ; preds = %dec_label_pc_1000e778
  %v3_1000e781 = call i32 @function_1000e8ad(i32 %v0_1000e780, i32 1)
  %v0_1000e786 = load i8, i8* @global_var_100185e4.137, align 4
  %v1_1000e786 = zext i8 %v0_1000e786 to i32
  %v3_1000e786 = and i32 %v3_1000e781, -256
  %v4_1000e786 = or i32 %v1_1000e786, %v3_1000e786
  store i32 %v4_1000e786, i32* %eax.global-to-local, align 4
  %v2_1000e78c = load i32, i32* @edi, align 4
  %v3_1000e78c = inttoptr i32 %v2_1000e78c to i8*
  store i8 %v0_1000e786, i8* %v3_1000e78c, align 1
  %v0_1000e78e = load i32, i32* @esi, align 4
  %v1_1000e78e = add i32 %v0_1000e78e, 4
  %v2_1000e78e = inttoptr i32 %v1_1000e78e to i32*
  %v3_1000e78e = load i32, i32* %v2_1000e78e, align 4
  %v0_1000e791 = load i32, i32* @edi, align 4
  %v1_1000e791 = add i32 %v0_1000e791, 1
  store i32 %v1_1000e791, i32* @edi, align 4
  %v2_1000e793 = icmp slt i32 %v3_1000e78e, 0
  %v2_1000e795 = icmp eq i1 %v2_1000e793, false
  br i1 %v2_1000e795, label %dec_label_pc_1000e7c2, label %dec_label_pc_1000e797

dec_label_pc_1000e797:                            ; preds = %dec_label_pc_1000e77e
  %v1_1000e7a1 = sub i32 0, %v3_1000e78e
  store i32 %v1_1000e7a1, i32* @esi, align 4
  br i1 %v4_1000e732, label %dec_label_pc_1000e7a1, label %dec_label_pc_1000e7a8

dec_label_pc_1000e7a1:                            ; preds = %dec_label_pc_1000e797
  %v5_1000e7a6 = icmp slt i32 %arg2, %v1_1000e7a1
  br i1 %v5_1000e7a6, label %dec_label_pc_1000e7ab, label %dec_label_pc_1000e7a8

dec_label_pc_1000e7a8:                            ; preds = %dec_label_pc_1000e797, %dec_label_pc_1000e7a1
  br label %dec_label_pc_1000e7ab

dec_label_pc_1000e7ab:                            ; preds = %dec_label_pc_1000e7a1, %dec_label_pc_1000e7a8
  %stack_var_8.0 = phi i32 [ %arg2, %dec_label_pc_1000e7a1 ], [ %v1_1000e7a1, %dec_label_pc_1000e7a8 ]
  %v3_1000e7af = call i32 @function_1000e8ad(i32 %v1_1000e791, i32 %stack_var_8.0)
  store i32 %v3_1000e7af, i32* %eax.global-to-local, align 4
  %v0_1000e7b9 = load i32, i32* @edi, align 4
  %v3_1000e7ba = inttoptr i32 %v0_1000e7b9 to i8*
  %v4_1000e7ba = call i32 @function_10012000(i8* %v3_1000e7ba, i32 48, i32 %stack_var_8.0)
  store i32 %v4_1000e7ba, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000e7c2

dec_label_pc_1000e7c2:                            ; preds = %dec_label_pc_1000e77e, %dec_label_pc_1000e778, %dec_label_pc_1000e7ab
  %v0_1000e7c3 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_1000e7c3, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000e7c3

; uselistorder directives
  uselistorder i32 %v1_1000e731, { 1, 0, 2 }
  uselistorder i32 %v4_1000e72a, { 1, 2, 0, 3 }
  uselistorder i8* @global_var_100185e4.137, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_1000e8ad, { 2, 1, 0, 3 }
  uselistorder i32 %arg2, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_1000e7c2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000e7ab, { 1, 0 }
  uselistorder label %dec_label_pc_1000e7a8, { 1, 0 }
  uselistorder label %dec_label_pc_1000e778, { 1, 0 }
  uselistorder label %dec_label_pc_1000e75f, { 1, 0 }
  uselistorder label %dec_label_pc_1000e752, { 2, 0, 1 }
}

define i32 @function_1000e7c9(double* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000e7c9:
  %stack_var_8 = alloca i8*, align 4
  %tmp19 = inttoptr i32 %arg2 to i8*
  store i8* %tmp19, i8** %stack_var_8, align 4
  %tmp21 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000e7c9 = load i32, i32* @ebp, align 4
  store i32 %v0_1000e7c9, i32* %stack_var_-4, align 4
  %v4_1000e7c9 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000e7c9, i32* @ebp, align 4
  %v15_1000e7cc = ptrtoint i32* %stack_var_-44 to i32
  %v0_1000e7d4 = load i32, i32* @edi, align 4
  %v2_1000e7d6 = ptrtoint i32* %stack_var_-20 to i32
  %v0_1000e7dd = load i32, i32* @ecx, align 4
  %v2_1000e7df = load double, double* %arg1, align 4
  %tmp = fptrunc double %v2_1000e7df to float
  %v6_1000e7e1 = bitcast float %tmp to i32
  %tmp37 = inttoptr i32 %v6_1000e7e1 to i32*
  %v7_1000e7e4 = call i32 @function_10011ee8(i32* %tmp37, i32 %v0_1000e7dd, i32 %v2_1000e7d6, i32 %v15_1000e7cc, i32 %v0_1000e7d4)
  store i32 %arg3, i32* @ebx, align 4
  %v1_1000e7ef = add i32 %tmp21, -1
  store i32 %v1_1000e7ef, i32* @esi, align 4
  %v3_1000e7f4 = load i32, i32* %stack_var_-20, align 4
  %v12_1000e7f4 = icmp eq i32 %v3_1000e7f4, 45
  %v1_1000e7f8 = zext i1 %v12_1000e7f4 to i32
  %v6_1000e7fb = add i32 %v1_1000e7f8, %arg2
  store i32 %v6_1000e7fb, i32* @edi, align 4
  %v5_1000e805 = inttoptr i32 %v6_1000e7fb to i8*
  %v6_1000e806 = call i32 @function_10011e71(i8* %v5_1000e805, i32 %arg3, i32 %v2_1000e7d6)
  %v0_1000e812 = load i32, i32* @esi, align 4
  %v2_1000e812 = sub i32 %v0_1000e812, %v1_1000e7ef
  %v8_1000e812 = xor i32 %v0_1000e812, %v1_1000e7ef
  %v9_1000e812 = xor i32 %v2_1000e812, %v0_1000e812
  %v10_1000e812 = and i32 %v9_1000e812, %v8_1000e812
  %v11_1000e812 = icmp slt i32 %v10_1000e812, 0
  %v13_1000e812 = icmp slt i32 %v2_1000e812, 0
  %v2_1000e814 = icmp ne i1 %v13_1000e812, %v11_1000e812
  %v5_1000e81a = icmp slt i32 %v1_1000e7ef, -4
  %v0_1000e84b.pre = load i32, i32* @ebx, align 4
  br i1 %v5_1000e81a, label %dec_label_pc_1000e842, label %dec_label_pc_1000e81c

dec_label_pc_1000e81c:                            ; preds = %dec_label_pc_1000e7c9
  %v5_1000e81e = icmp slt i32 %v1_1000e7ef, %v0_1000e84b.pre
  br i1 %v5_1000e81e, label %dec_label_pc_1000e820, label %dec_label_pc_1000e842

dec_label_pc_1000e820:                            ; preds = %dec_label_pc_1000e81c
  %v4_1000e820 = icmp eq i1 %v2_1000e814, false
  br i1 %v4_1000e820, label %dec_label_pc_1000e82e, label %dec_label_pc_1000e824.preheader

dec_label_pc_1000e824.preheader:                  ; preds = %dec_label_pc_1000e820
  %v0_1000e824.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000e824

dec_label_pc_1000e824:                            ; preds = %dec_label_pc_1000e824.preheader, %dec_label_pc_1000e824
  %v4_1000e824 = phi i32 [ %v1_1000e7ef, %dec_label_pc_1000e824.preheader ], [ %v6_1000e824, %dec_label_pc_1000e824 ]
  %v0_1000e826 = phi i32 [ %v0_1000e824.pre, %dec_label_pc_1000e824.preheader ], [ %v1_1000e826, %dec_label_pc_1000e824 ]
  %v1_1000e824 = inttoptr i32 %v0_1000e826 to i8*
  %v2_1000e824 = load i8, i8* %v1_1000e824, align 1
  %v3_1000e824 = zext i8 %v2_1000e824 to i32
  %v5_1000e824 = and i32 %v4_1000e824, -256
  %v6_1000e824 = or i32 %v3_1000e824, %v5_1000e824
  %v1_1000e826 = add i32 %v0_1000e826, 1
  store i32 %v1_1000e826, i32* @edi, align 4
  %v4_1000e827 = icmp eq i8 %v2_1000e824, 0
  %v1_1000e829 = icmp eq i1 %v4_1000e827, false
  br i1 %v1_1000e829, label %dec_label_pc_1000e824, label %dec_label_pc_1000e82b

dec_label_pc_1000e82b:                            ; preds = %dec_label_pc_1000e824
  %v1_1000e82b = add i32 %v0_1000e826, -1
  %v2_1000e82b = inttoptr i32 %v1_1000e82b to i8*
  %v3_1000e82b = load i8, i8* %v2_1000e82b, align 1
  %v6_1000e82b = and i8 %v3_1000e82b, %v2_1000e824
  store i8 %v6_1000e82b, i8* %v2_1000e82b, align 1
  %v0_1000e834.pre = load i32, i32* @ebx, align 4
  %.phi.trans.insert = bitcast i8** %stack_var_8 to i32*
  %v3_1000e8356.pre = load i32, i32* %.phi.trans.insert, align 4
  br label %dec_label_pc_1000e82e

dec_label_pc_1000e82e:                            ; preds = %dec_label_pc_1000e820, %dec_label_pc_1000e82b
  %v3_1000e8356 = phi i32 [ %v3_1000e8356.pre, %dec_label_pc_1000e82b ], [ %arg2, %dec_label_pc_1000e820 ]
  %v0_1000e834 = phi i32 [ %v0_1000e834.pre, %dec_label_pc_1000e82b ], [ %v0_1000e84b.pre, %dec_label_pc_1000e820 ]
  %v0_1000e838.cast = inttoptr i32 %v3_1000e8356 to i8*
  %v6_1000e838 = call i32 @function_1000e722(i8* %v0_1000e838.cast, i32 %v0_1000e834, i32 %v2_1000e7d6, i32 1)
  br label %dec_label_pc_1000e857

dec_label_pc_1000e842:                            ; preds = %dec_label_pc_1000e7c9, %dec_label_pc_1000e81c
  %v8_1000e84f = call i32 @function_1000e60b(i8* %tmp19, i32 %v0_1000e84b.pre, i32 %arg4, i32 %v2_1000e7d6, i32 1)
  br label %dec_label_pc_1000e857

dec_label_pc_1000e857:                            ; preds = %dec_label_pc_1000e82e, %dec_label_pc_1000e842
  %v0_1000e85b = phi i32 [ %v6_1000e838, %dec_label_pc_1000e82e ], [ %v8_1000e84f, %dec_label_pc_1000e842 ]
  ret i32 %v0_1000e85b

; uselistorder directives
  uselistorder i32 %v1_1000e826, { 1, 0 }
  uselistorder i32 %v0_1000e84b.pre, { 0, 2, 1 }
  uselistorder i32 %v2_1000e812, { 1, 0 }
  uselistorder i32 %v1_1000e7ef, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_1000e7d6, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 (i8*, i32, i32, i32, i32)* @function_1000e60b, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_10011e71, { 1, 2, 0 }
  uselistorder i32 45, { 3, 0, 4, 5, 1, 6, 7, 2 }
  uselistorder i32 (i32*, i32, i32, i32, i32)* @function_10011ee8, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1000e857, { 1, 0 }
  uselistorder label %dec_label_pc_1000e842, { 1, 0 }
  uselistorder label %dec_label_pc_1000e82e, { 1, 0 }
  uselistorder label %dec_label_pc_1000e824, { 1, 0 }
}

define i32 @function_1000e8ad(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000e8ad = load i32, i32* @edi, align 4
  store i32 %v0_1000e8ad, i32* %stack_var_-4, align 4
  store i32 %arg2, i32* @edi, align 4
  %v1_1000e8b2 = icmp eq i32 %arg2, 0
  br i1 %v1_1000e8b2, label %dec_label_pc_1000e8d0, label %dec_label_pc_1000e8b6

dec_label_pc_1000e8b6:                            ; preds = %entry
  %v0_1000e8b6 = load i32, i32* @esi, align 4
  %v1_1000e8bc = inttoptr i32 %arg1 to i8*
  %v2_1000e8bc = call i32 @function_1000d900(i8* %v1_1000e8bc)
  %v1_1000e8c1 = add i32 %v2_1000e8bc, 1
  %v2_1000e8c4 = add i32 %arg1, %arg2
  store i32 %v2_1000e8c4, i32* @esi, align 4
  %v3_1000e8c7 = inttoptr i32 %v2_1000e8c4 to i8*
  %v4_1000e8c7 = call i32 @function_10012060(i8* %v3_1000e8c7, i32 %arg1, i32 %v1_1000e8c1)
  store i32 %v0_1000e8b6, i32* @esi, align 4
  %v2_1000e8d0.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1000e8d0

dec_label_pc_1000e8d0:                            ; preds = %entry, %dec_label_pc_1000e8b6
  %v2_1000e8d0 = phi i32 [ %v0_1000e8ad, %entry ], [ %v2_1000e8d0.pre, %dec_label_pc_1000e8b6 ]
  %.0 = phi i32 [ undef, %entry ], [ %v4_1000e8c7, %dec_label_pc_1000e8b6 ]
  store i32 %v2_1000e8d0, i32* @edi, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1000e8d0, { 1, 0 }
}

define i32 @function_1000e8d2(i8 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000e8d2:
  %tmp = call i32 @__decompiler_undefined_function_1()
  %stack_var_6 = alloca i16, align 2
  %tmp17 = trunc i32 %arg2 to i16
  store i16 %tmp17, i16* %stack_var_6, align 2
  %stack_var_-8 = alloca i8, align 1
  %stack_var_-4 = alloca i32, align 4
  %v0_1000e8d2 = load i32, i32* @ebp, align 4
  store i32 %v0_1000e8d2, i32* %stack_var_-4, align 4
  %v0_1000e8d5 = load i32, i32* @ecx, align 4
  %v5_1000e8d5 = trunc i32 %v0_1000e8d5 to i8
  store i8 %v5_1000e8d5, i8* %stack_var_-8, align 1
  %v4_1000e8d6 = sext i8 %arg1 to i32
  %v1_1000e8d9 = add nsw i32 %v4_1000e8d6, 1
  %v6_1000e8e2 = icmp ugt i32 %v1_1000e8d9, 256
  br i1 %v6_1000e8e2, label %dec_label_pc_1000e8f0, label %dec_label_pc_1000e8e4

dec_label_pc_1000e8e4:                            ; preds = %dec_label_pc_1000e8d2
  %v0_1000e8e4 = load i32, i32* @global_var_100183d4, align 4
  %v2_1000e8ea = mul nsw i32 %v4_1000e8d6, 2
  %v3_1000e8ea = add i32 %v0_1000e8e4, %v2_1000e8ea
  %v4_1000e8ea = inttoptr i32 %v3_1000e8ea to i16*
  %v5_1000e8ea = load i16, i16* %v4_1000e8ea, align 2
  %v6_1000e8ea = zext i16 %v5_1000e8ea to i32
  br label %dec_label_pc_1000e942

dec_label_pc_1000e8f0:                            ; preds = %dec_label_pc_1000e8d2
  %v6_1000e8d5 = ptrtoint i8* %stack_var_-8 to i32
  %v0_1000e8f2 = load i32, i32* @esi, align 4
  %v0_1000e8f3 = load i32, i32* @global_var_100183d4, align 4
  %v2_1000e8f9 = sdiv i32 %v4_1000e8d6, 256
  %v1_1000e8fc = and i32 %v2_1000e8f9, 255
  store i32 %v1_1000e8fc, i32* @edx, align 4
  %v2_1000e8ff = mul nuw nsw i32 %v1_1000e8fc, 2
  %v3_1000e8ff = or i32 %v2_1000e8ff, 1
  %v4_1000e8ff = add i32 %v0_1000e8f3, %v3_1000e8ff
  %v5_1000e8ff = inttoptr i32 %v4_1000e8ff to i8*
  %v6_1000e8ff = load i8, i8* %v5_1000e8ff, align 1
  %v8_1000e8ff = icmp sgt i8 %v6_1000e8ff, -1
  store i32 %v0_1000e8f2, i32* @esi, align 4
  %tmp24 = icmp sgt i8 %v6_1000e8ff, -1
  %tmp25 = zext i1 %tmp24 to i32
  %tmp23 = sub nsw i32 2, %tmp25
  %storemerge4.in = select i1 %v8_1000e8ff, i32 %v4_1000e8d6, i32 %v2_1000e8f9
  %storemerge4 = trunc i32 %storemerge4.in to i8
  store i8 %storemerge4, i8* %stack_var_-8, align 1
  %v2_1000e91f = ptrtoint i16* %stack_var_6 to i32
  %v8_1000e930 = call i32 @function_1001239e(i8* inttoptr (i32 1 to i8*), i32 %v6_1000e8d5, i32 %tmp23, i32 %v2_1000e91f, i32 0, i32 0, i32 1)
  %v1_1000e938 = icmp eq i32 %v8_1000e930, 0
  %v1_1000e93a = icmp eq i1 %v1_1000e938, false
  br i1 %v1_1000e93a, label %dec_label_pc_1000e93e, label %dec_label_pc_1000e93c

dec_label_pc_1000e93c:                            ; preds = %dec_label_pc_1000e8f0
  %v2_1000e93c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000e93c, i32* @ebp, align 4
  ret i32 %v8_1000e930

dec_label_pc_1000e93e:                            ; preds = %dec_label_pc_1000e8f0
  %v3_1000e93e = load i16, i16* %stack_var_6, align 2
  %v4_1000e93e = sext i16 %v3_1000e93e to i32
  %v2_1000e945.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1000e942

dec_label_pc_1000e942:                            ; preds = %dec_label_pc_1000e8e4, %dec_label_pc_1000e93e
  %v2_1000e945 = phi i32 [ %v0_1000e8d2, %dec_label_pc_1000e8e4 ], [ %v2_1000e945.pre, %dec_label_pc_1000e93e ]
  %storemerge = phi i32 [ %v6_1000e8ea, %dec_label_pc_1000e8e4 ], [ %v4_1000e93e, %dec_label_pc_1000e93e ]
  %v5_1000e942 = and i32 %storemerge, %tmp
  store i32 %v2_1000e945, i32* @ebp, align 4
  ret i32 %v5_1000e942

; uselistorder directives
  uselistorder i32 %v8_1000e930, { 1, 0 }
  uselistorder i32 %v2_1000e8f9, { 1, 0 }
  uselistorder i32 %v4_1000e8d6, { 1, 0, 2, 3 }
  uselistorder i16* %stack_var_6, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1000e942, { 1, 0 }
}

define i32 @function_1000e984(i32 %arg1, double %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_1000e987 = load i32, i32* @global_var_1001aaf8.139, align 8
  %v1_1000e987 = icmp eq i32 %v0_1000e987, 0
  %v1_1000e98e = icmp eq i1 %v1_1000e987, false
  br i1 %v1_1000e98e, label %dec_label_pc_1000e9b9, label %dec_label_pc_1000e990

dec_label_pc_1000e990:                            ; preds = %entry
  %v4_1000e993 = fpext double %arg2 to x86_fp80
  %v0_1000e996 = load i32, i32* @ecx, align 4
  %v5_1000e998 = fptrunc x86_fp80 %v4_1000e993 to float
  %v6_1000e998 = bitcast float %v5_1000e998 to i32
  %v11_1000e9af = call x86_fp80 @function_1000ef3a(i32 1, i32 %arg1, i32 %v6_1000e998, i32 %v0_1000e996, i32 0, i32 %v0_1000e996, double %arg2, i32 %v0_1000e996, i32 %arg3)
  store x86_fp80 %v11_1000e9af, x86_fp80* @st0, align 4
  %v12_1000e9af = fptrunc x86_fp80 %v11_1000e9af to float
  %v13_1000e9af = bitcast float %v12_1000e9af to i32
  ret i32 %v13_1000e9af

dec_label_pc_1000e9b9:                            ; preds = %entry
  %v0_1000e9b9 = call i32 @function_100124e7()
  %v1_1000e9c3 = inttoptr i32 %v0_1000e9b9 to i32*
  store i32 33, i32* %v1_1000e9c3, align 4
  %v2_1000e9cc = call i32 @function_1000f19d(i32 %arg3, i32 65535)
  %v4_1000e9d1 = fpext double %arg2 to x86_fp80
  %v5_1000e9d1 = load i3, i3* @fpu_stat_TOP, align 1
  %v6_1000e9d1 = add i3 %v5_1000e9d1, -1
  store x86_fp80 %v4_1000e9d1, x86_fp80* @st0, align 4
  store i3 %v6_1000e9d1, i3* @fpu_stat_TOP, align 1
  store i32 65535, i32* @ecx, align 4
  ret i32 %v2_1000e9cc

; uselistorder directives
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder double %arg2, { 2, 0, 1 }
}

define i32 @function_1000e9d8(i32 %arg1, i32 %arg2, double %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_1000e9d8:
  %stack_var_28 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_28, align 4
  %stack_var_12 = alloca double, align 8
  store double %arg3, double* %stack_var_12, align 8
  %stack_var_20 = alloca double, align 8
  %tmp17 = sext i32 %arg4 to i64
  %tmp18 = bitcast i64 %tmp17 to double
  store double %tmp18, double* %stack_var_20, align 8
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000e9d8 = load i32, i32* @ebp, align 4
  store i32 %v0_1000e9d8, i32* %stack_var_-4, align 4
  %v4_1000e9d8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000e9d8, i32* @ebp, align 4
  store i32 %arg5, i32* %stack_var_-96, align 4
  %v2_1000e9e1 = ptrtoint double* %stack_var_20 to i32
  %v3_1000e9e8 = trunc i32 %arg1 to i8
  %v4_1000e9e8 = call i32 @function_1000ed23(i8 %v3_1000e9e8, i32 %v2_1000e9e1, i32 %arg5)
  store i32 %v4_1000e9e8, i32* @eax, align 4
  %v1_1000e9f0 = icmp eq i32 %v4_1000e9e8, 0
  %v1_1000e9f2 = icmp eq i1 %v1_1000e9f0, false
  br i1 %v1_1000e9f2, label %dec_label_pc_1000ea16, label %dec_label_pc_1000e9f4

dec_label_pc_1000e9f4:                            ; preds = %dec_label_pc_1000e9d8
  store i32 %v2_1000e9e1, i32* %stack_var_-96, align 4
  %v2_1000e9fc = ptrtoint double* %stack_var_12 to i32
  %v2_1000ea00 = ptrtoint i32* %stack_var_28 to i32
  %v7_1000ea0e = call i32 @function_1000ea70(i32* nonnull %stack_var_-92, i32 %v2_1000ea00, i32 %arg1, i32 %arg2, i32 %v2_1000e9fc, i32 %v2_1000e9e1)
  store i32 %v7_1000ea0e, i32* @eax, align 4
  br label %dec_label_pc_1000ea16

dec_label_pc_1000ea16:                            ; preds = %dec_label_pc_1000e9d8, %dec_label_pc_1000e9f4
  store i32 %arg1, i32* %stack_var_-96, align 4
  %v2_1000ea19 = call i32 @function_1000f00f(i8 %v3_1000e9e8)
  %v0_1000ea1e = load i32, i32* @global_var_1001aaf8.139, align 8
  %v1_1000ea1e = icmp eq i32 %v0_1000ea1e, 0
  store i32 %arg1, i32* @ecx, align 4
  %v1_1000ea26 = icmp eq i1 %v1_1000ea1e, false
  br i1 %v1_1000ea26, label %dec_label_pc_1000ea54, label %dec_label_pc_1000ea28

dec_label_pc_1000ea28:                            ; preds = %dec_label_pc_1000ea16
  %v1_1000ea28 = icmp eq i32 %v2_1000ea19, 0
  br i1 %v1_1000ea28, label %dec_label_pc_1000ea54, label %dec_label_pc_1000ea2c

dec_label_pc_1000ea2c:                            ; preds = %dec_label_pc_1000ea28
  %v3_1000ea2c = load i32, i32* %stack_var_28, align 4
  store i32 %v3_1000ea2c, i32* %stack_var_-96, align 4
  %v3_1000ea2f = load double, double* %stack_var_20, align 8
  %v3_1000ea3e = load double, double* %stack_var_12, align 8
  %tmp = fptrunc double %v3_1000ea3e to float
  %v6_1000ea43 = bitcast float %tmp to i32
  %v11_1000ea4a = call x86_fp80 @function_1000ef3a(i32 %v2_1000ea19, i32 %arg2, i32 %v6_1000ea43, i32 %arg1, i32 0, i32 %arg1, double %v3_1000ea2f, i32 %arg1, i32 %v3_1000ea2c)
  store x86_fp80 %v11_1000ea4a, x86_fp80* @st0, align 4
  %v12_1000ea4a = fptrunc x86_fp80 %v11_1000ea4a to float
  %v13_1000ea4a = bitcast float %v12_1000ea4a to i32
  %v2_1000ea52 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000ea52, i32* @ebp, align 4
  ret i32 %v13_1000ea4a

dec_label_pc_1000ea54:                            ; preds = %dec_label_pc_1000ea28, %dec_label_pc_1000ea16
  store i32 %v2_1000ea19, i32* %stack_var_-96, align 4
  %v1_1000ea55 = call i32 @__set_errno_from_matherr(i32 %v2_1000ea19)
  store i32 65535, i32* %stack_var_-96, align 4
  %v3_1000ea61 = load i32, i32* %stack_var_28, align 4
  %v2_1000ea64 = call i32 @function_1000f19d(i32 %v3_1000ea61, i32 65535)
  %v3_1000ea69 = load double, double* %stack_var_20, align 8
  %v8_1000ea69 = fpext double %v3_1000ea69 to x86_fp80
  %v9_1000ea69 = load i3, i3* @fpu_stat_TOP, align 1
  %v10_1000ea69 = add i3 %v9_1000ea69, -1
  store x86_fp80 %v8_1000ea69, x86_fp80* @st0, align 4
  store i3 %v10_1000ea69, i3* @fpu_stat_TOP, align 1
  %v2_1000ea6d = load i32, i32* %stack_var_-96, align 4
  store i32 %v2_1000ea6d, i32* @ecx, align 4
  %v2_1000ea6e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000ea6e, i32* @ebp, align 4
  ret i32 %v2_1000ea64

; uselistorder directives
  uselistorder i32 %v2_1000ea19, { 2, 1, 0, 3 }
  uselistorder i32 %v2_1000e9e1, { 0, 2, 1 }
  uselistorder i32* %stack_var_-4, { 0, 1, 3, 2 }
  uselistorder double* %stack_var_20, { 2, 1, 0, 3 }
  uselistorder double* %stack_var_12, { 1, 0, 2 }
  uselistorder i32* %stack_var_28, { 1, 2, 3, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0, 6, 4, 5 }
  uselistorder label %dec_label_pc_1000ea16, { 1, 0 }
}

define i32 @function_1000ea70(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1000ea70:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp25 = inttoptr i32 %arg5 to double*
  %stack_var_4 = alloca i32, align 4
  %tmp34 = ptrtoint i32* %arg1 to i32
  store i32 %tmp34, i32* %stack_var_4, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1000ea73 = load i32, i32* %stack_var_4, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_1000ea7a = add i32 %v3_1000ea73, 4
  %v3_1000ea7a = inttoptr i32 %v2_1000ea7a to i32*
  store i32 0, i32* %v3_1000ea7a, align 4
  %v3_1000ea7d = load i32, i32* %stack_var_4, align 4
  %v0_1000ea80 = load i32, i32* @edi, align 4
  store i32 %v0_1000ea80, i32* %stack_var_-16, align 4
  store i32 1, i32* %stack_var_-20, align 4
  %v0_1000ea83 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000ea83 = add i32 %v3_1000ea7d, 8
  %v3_1000ea83 = inttoptr i32 %v2_1000ea83 to i32*
  store i32 %v0_1000ea83, i32* %v3_1000ea83, align 4
  %v3_1000ea86 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ea86, i32* %ecx.global-to-local, align 4
  %v2_1000ea89 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1000ea89, i32* %ebx.global-to-local, align 4
  %v0_1000ea8a = load i32, i32* %eax.global-to-local, align 4
  %v2_1000ea8a = add i32 %v3_1000ea86, 12
  %v3_1000ea8a = inttoptr i32 %v2_1000ea8a to i32*
  store i32 %v0_1000ea8a, i32* %v3_1000ea8a, align 4
  %v4_1000ea8d = and i32 %arg3, 255
  %v5_1000ea8d = load i32, i32* %ecx.global-to-local, align 4
  %v6_1000ea8d = and i32 %v5_1000ea8d, -256
  %v7_1000ea8d = or i32 %v6_1000ea8d, %v4_1000ea8d
  store i32 %v7_1000ea8d, i32* %ecx.global-to-local, align 4
  %v2_1000ea90 = and i32 %arg3, 16
  %v3_1000ea90 = icmp eq i32 %v2_1000ea90, 0
  br i1 %v3_1000ea90, label %dec_label_pc_1000eaa2, label %dec_label_pc_1000ea95

dec_label_pc_1000ea95:                            ; preds = %dec_label_pc_1000ea70
  %v3_1000ea95 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ea95, i32* %eax.global-to-local, align 4
  %v1_1000ea9f = add i32 %v3_1000ea95, 4
  %v2_1000ea9f = inttoptr i32 %v1_1000ea9f to i32*
  %v3_1000ea9f = load i32, i32* %v2_1000ea9f, align 4
  %v4_1000ea9f = load i32, i32* %ebx.global-to-local, align 4
  %v5_1000ea9f = or i32 %v4_1000ea9f, %v3_1000ea9f
  store i32 %v5_1000ea9f, i32* %v2_1000ea9f, align 4
  %v0_1000eaa2.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000eaa2

dec_label_pc_1000eaa2:                            ; preds = %dec_label_pc_1000ea70, %dec_label_pc_1000ea95
  %v0_1000eaa2 = phi i32 [ %v7_1000ea8d, %dec_label_pc_1000ea70 ], [ %v0_1000eaa2.pre, %dec_label_pc_1000ea95 ]
  %stack_var_12.0 = phi i32 [ %arg3, %dec_label_pc_1000ea70 ], [ -113, %dec_label_pc_1000ea95 ]
  %v2_1000eaa2 = and i32 %v0_1000eaa2, 2
  %v3_1000eaa2 = icmp eq i32 %v2_1000eaa2, 0
  br i1 %v3_1000eaa2, label %dec_label_pc_1000eab5, label %dec_label_pc_1000eaa7

dec_label_pc_1000eaa7:                            ; preds = %dec_label_pc_1000eaa2
  %v3_1000eaa7 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000eaa7, i32* %eax.global-to-local, align 4
  %v1_1000eab1 = add i32 %v3_1000eaa7, 4
  %v2_1000eab1 = inttoptr i32 %v1_1000eab1 to i32*
  %v3_1000eab1 = load i32, i32* %v2_1000eab1, align 4
  %v4_1000eab1 = or i32 %v3_1000eab1, 2
  store i32 %v4_1000eab1, i32* %v2_1000eab1, align 4
  %v1_1000eab5.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000eab5

dec_label_pc_1000eab5:                            ; preds = %dec_label_pc_1000eaa2, %dec_label_pc_1000eaa7
  %v1_1000eab5 = phi i32 [ %v0_1000eaa2, %dec_label_pc_1000eaa2 ], [ %v1_1000eab5.pre, %dec_label_pc_1000eaa7 ]
  %stack_var_12.1 = phi i32 [ %stack_var_12.0, %dec_label_pc_1000eaa2 ], [ -109, %dec_label_pc_1000eaa7 ]
  %v0_1000eab5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000eab5 = and i32 %v0_1000eab5, %v1_1000eab5
  %v3_1000eab5 = trunc i32 %v2_1000eab5 to i8
  %v4_1000eab5 = icmp eq i8 %v3_1000eab5, 0
  br i1 %v4_1000eab5, label %dec_label_pc_1000eac7, label %dec_label_pc_1000eab9

dec_label_pc_1000eab9:                            ; preds = %dec_label_pc_1000eab5
  %v3_1000eab9 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000eab9, i32* %eax.global-to-local, align 4
  %v1_1000eac3 = add i32 %v3_1000eab9, 4
  %v2_1000eac3 = inttoptr i32 %v1_1000eac3 to i32*
  %v3_1000eac3 = load i32, i32* %v2_1000eac3, align 4
  %v4_1000eac3 = or i32 %v3_1000eac3, 4
  store i32 %v4_1000eac3, i32* %v2_1000eac3, align 4
  %v0_1000eac7.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000eac7

dec_label_pc_1000eac7:                            ; preds = %dec_label_pc_1000eab5, %dec_label_pc_1000eab9
  %v0_1000eac7 = phi i32 [ %v1_1000eab5, %dec_label_pc_1000eab5 ], [ %v0_1000eac7.pre, %dec_label_pc_1000eab9 ]
  %stack_var_12.2 = phi i32 [ %stack_var_12.1, %dec_label_pc_1000eab5 ], [ -111, %dec_label_pc_1000eab9 ]
  %v2_1000eac7 = and i32 %v0_1000eac7, 4
  %v3_1000eac7 = icmp eq i32 %v2_1000eac7, 0
  br i1 %v3_1000eac7, label %dec_label_pc_1000eada, label %dec_label_pc_1000eacc

dec_label_pc_1000eacc:                            ; preds = %dec_label_pc_1000eac7
  %v3_1000eacc = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000eacc, i32* %eax.global-to-local, align 4
  %v1_1000ead6 = add i32 %v3_1000eacc, 4
  %v2_1000ead6 = inttoptr i32 %v1_1000ead6 to i32*
  %v3_1000ead6 = load i32, i32* %v2_1000ead6, align 4
  %v4_1000ead6 = or i32 %v3_1000ead6, 8
  store i32 %v4_1000ead6, i32* %v2_1000ead6, align 4
  %v0_1000eada.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000eada

dec_label_pc_1000eada:                            ; preds = %dec_label_pc_1000eac7, %dec_label_pc_1000eacc
  %v0_1000eada = phi i32 [ %v0_1000eac7, %dec_label_pc_1000eac7 ], [ %v0_1000eada.pre, %dec_label_pc_1000eacc ]
  %stack_var_12.3 = phi i32 [ %stack_var_12.2, %dec_label_pc_1000eac7 ], [ -114, %dec_label_pc_1000eacc ]
  %v2_1000eada = and i32 %v0_1000eada, 8
  %v3_1000eada = icmp eq i32 %v2_1000eada, 0
  br i1 %v3_1000eada, label %dec_label_pc_1000eaed, label %dec_label_pc_1000eadf

dec_label_pc_1000eadf:                            ; preds = %dec_label_pc_1000eada
  %v3_1000eadf = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000eadf, i32* %eax.global-to-local, align 4
  %v1_1000eae9 = add i32 %v3_1000eadf, 4
  %v2_1000eae9 = inttoptr i32 %v1_1000eae9 to i32*
  %v3_1000eae9 = load i32, i32* %v2_1000eae9, align 4
  %v4_1000eae9 = or i32 %v3_1000eae9, 16
  store i32 %v4_1000eae9, i32* %v2_1000eae9, align 4
  br label %dec_label_pc_1000eaed

dec_label_pc_1000eaed:                            ; preds = %dec_label_pc_1000eada, %dec_label_pc_1000eadf
  %stack_var_12.4 = phi i32 [ %stack_var_12.3, %dec_label_pc_1000eada ], [ -112, %dec_label_pc_1000eadf ]
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v3_1000eaf0 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000eaf0, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-20, align 4
  %v1_1000eaf5 = inttoptr i32 %arg2 to i32*
  %v2_1000eaf5 = load i32, i32* %v1_1000eaf5, align 4
  store i32 %v2_1000eaf5, i32* %ecx.global-to-local, align 4
  %v1_1000eaf7 = add i32 %v3_1000eaf0, 8
  %v2_1000eaf7 = inttoptr i32 %v1_1000eaf7 to i32*
  %v3_1000eaf7 = load i32, i32* %v2_1000eaf7, align 4
  %v1_1000eafa = xor i32 %v2_1000eaf5, 268435455
  %v1_1000eafc = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000eafc = and i32 %v1_1000eafc, %v1_1000eafa
  %v1_1000eafe = and i32 %v3_1000eaf7, -17
  %v2_1000eb01 = mul i32 %v2_1000eafc, 16
  %v2_1000eb04 = or i32 %v2_1000eb01, %v1_1000eafe
  store i32 %v2_1000eb04, i32* %ecx.global-to-local, align 4
  store i32 2, i32* %edi.global-to-local, align 4
  store i32 %v2_1000eb04, i32* %v2_1000eaf7, align 4
  %v0_1000eb0a = load i32, i32* %esi.global-to-local, align 4
  %v1_1000eb0a = inttoptr i32 %v0_1000eb0a to i32*
  %v2_1000eb0a = load i32, i32* %v1_1000eb0a, align 4
  %v3_1000eb0c = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000eb0c, i32* %eax.global-to-local, align 4
  %v1_1000eb0f = sub i32 -1, %v2_1000eb0a
  store i32 %v1_1000eb0f, i32* %ecx.global-to-local, align 4
  %v1_1000eb11 = add i32 %v3_1000eb0c, 8
  %v2_1000eb11 = inttoptr i32 %v1_1000eb11 to i32*
  %v3_1000eb11 = load i32, i32* %v2_1000eb11, align 4
  %v1_1000eb14 = mul i32 %v1_1000eb0f, 2
  %v2_1000eb17 = and i32 %v1_1000eb14, 8
  %v1_1000eb19 = and i32 %v3_1000eb11, -9
  %v2_1000eb1c = or i32 %v1_1000eb19, %v2_1000eb17
  store i32 %v2_1000eb1c, i32* %ecx.global-to-local, align 4
  store i32 %v2_1000eb1c, i32* %v2_1000eb11, align 4
  %v0_1000eb21 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000eb21 = inttoptr i32 %v0_1000eb21 to i32*
  %v2_1000eb21 = load i32, i32* %v1_1000eb21, align 4
  %v3_1000eb23 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000eb23, i32* %eax.global-to-local, align 4
  %v1_1000eb26 = sub i32 -1, %v2_1000eb21
  store i32 %v1_1000eb26, i32* %ecx.global-to-local, align 4
  %v1_1000eb28 = add i32 %v3_1000eb23, 8
  %v2_1000eb28 = inttoptr i32 %v1_1000eb28 to i32*
  %v3_1000eb28 = load i32, i32* %v2_1000eb28, align 4
  %v2_1000eb2b = udiv i32 %v1_1000eb26, 2
  %v1_1000eb2d = and i32 %v2_1000eb2b, 4
  %v1_1000eb30 = and i32 %v3_1000eb28, -5
  %v2_1000eb33 = or i32 %v1_1000eb30, %v1_1000eb2d
  store i32 %v2_1000eb33, i32* %ecx.global-to-local, align 4
  store i32 %v2_1000eb33, i32* %v2_1000eb28, align 4
  %v0_1000eb38 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000eb38 = inttoptr i32 %v0_1000eb38 to i32*
  %v2_1000eb38 = load i32, i32* %v1_1000eb38, align 4
  %v3_1000eb3a = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000eb3a, i32* %eax.global-to-local, align 4
  %v1_1000eb3d = sub i32 -1, %v2_1000eb38
  store i32 %v1_1000eb3d, i32* %ecx.global-to-local, align 4
  %v1_1000eb3f = add i32 %v3_1000eb3a, 8
  %v2_1000eb3f = inttoptr i32 %v1_1000eb3f to i32*
  %v3_1000eb3f = load i32, i32* %v2_1000eb3f, align 4
  %v2_1000eb42 = udiv i32 %v1_1000eb3d, 8
  %v1_1000eb45 = load i32, i32* %edi.global-to-local, align 4
  %v2_1000eb45 = and i32 %v1_1000eb45, %v2_1000eb42
  %v1_1000eb47 = and i32 %v3_1000eb3f, -3
  %v2_1000eb4a = or i32 %v2_1000eb45, %v1_1000eb47
  store i32 %v2_1000eb4a, i32* %ecx.global-to-local, align 4
  store i32 %v2_1000eb4a, i32* %v2_1000eb3f, align 4
  %v0_1000eb4f = load i32, i32* %esi.global-to-local, align 4
  %v1_1000eb4f = inttoptr i32 %v0_1000eb4f to i32*
  %v2_1000eb4f = load i32, i32* %v1_1000eb4f, align 4
  %v3_1000eb51 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000eb51, i32* %eax.global-to-local, align 4
  %v1_1000eb54 = sub i32 -1, %v2_1000eb4f
  store i32 %v1_1000eb54, i32* %ecx.global-to-local, align 4
  %v1_1000eb56 = add i32 %v3_1000eb51, 8
  %v2_1000eb56 = inttoptr i32 %v1_1000eb56 to i32*
  %v3_1000eb56 = load i32, i32* %v2_1000eb56, align 4
  %v2_1000eb59 = udiv i32 %v1_1000eb54, 32
  %v1_1000eb5c = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000eb5c = and i32 %v1_1000eb5c, %v2_1000eb59
  %v1_1000eb5e = and i32 %v3_1000eb56, -2
  %v2_1000eb61 = or i32 %v2_1000eb5c, %v1_1000eb5e
  store i32 %v2_1000eb61, i32* %ecx.global-to-local, align 4
  store i32 %v2_1000eb61, i32* %v2_1000eb56, align 4
  %v0_1000eb66 = load i32, i32* %stack_var_-20, align 4
  %v1_1000eb66 = call i32 @function_1000f180(i32 %v0_1000eb66)
  %v2_1000eb66 = trunc i32 %v1_1000eb66 to i8
  store i32 %v1_1000eb66, i32* %eax.global-to-local, align 4
  %v0_1000eb6b = load i32, i32* %ebx.global-to-local, align 4
  %v3_1000eb6b = and i32 %v0_1000eb6b, %v1_1000eb66
  %v4_1000eb6b = trunc i32 %v3_1000eb6b to i8
  %v5_1000eb6b = icmp eq i8 %v4_1000eb6b, 0
  br i1 %v5_1000eb6b, label %dec_label_pc_1000eb76, label %dec_label_pc_1000eb6f

dec_label_pc_1000eb6f:                            ; preds = %dec_label_pc_1000eaed
  %v3_1000eb6f = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000eb6f, i32* %ecx.global-to-local, align 4
  %v1_1000eb72 = add i32 %v3_1000eb6f, 12
  %v2_1000eb72 = inttoptr i32 %v1_1000eb72 to i32*
  %v3_1000eb72 = load i32, i32* %v2_1000eb72, align 4
  %v4_1000eb72 = or i32 %v3_1000eb72, 16
  store i32 %v4_1000eb72, i32* %v2_1000eb72, align 4
  br label %dec_label_pc_1000eb76

dec_label_pc_1000eb76:                            ; preds = %dec_label_pc_1000eaed, %dec_label_pc_1000eb6f
  %v3_1000eb76 = and i8 %v2_1000eb66, 4
  %v4_1000eb76 = icmp eq i8 %v3_1000eb76, 0
  br i1 %v4_1000eb76, label %dec_label_pc_1000eb81, label %dec_label_pc_1000eb7a

dec_label_pc_1000eb7a:                            ; preds = %dec_label_pc_1000eb76
  %v3_1000eb7a = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000eb7a, i32* %ecx.global-to-local, align 4
  %v1_1000eb7d = add i32 %v3_1000eb7a, 12
  %v2_1000eb7d = inttoptr i32 %v1_1000eb7d to i32*
  %v3_1000eb7d = load i32, i32* %v2_1000eb7d, align 4
  %v4_1000eb7d = or i32 %v3_1000eb7d, 8
  store i32 %v4_1000eb7d, i32* %v2_1000eb7d, align 4
  br label %dec_label_pc_1000eb81

dec_label_pc_1000eb81:                            ; preds = %dec_label_pc_1000eb76, %dec_label_pc_1000eb7a
  %v3_1000eb81 = and i8 %v2_1000eb66, 8
  %v4_1000eb81 = icmp eq i8 %v3_1000eb81, 0
  br i1 %v4_1000eb81, label %dec_label_pc_1000eb8c, label %dec_label_pc_1000eb85

dec_label_pc_1000eb85:                            ; preds = %dec_label_pc_1000eb81
  %v3_1000eb85 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000eb85, i32* %ecx.global-to-local, align 4
  %v1_1000eb88 = add i32 %v3_1000eb85, 12
  %v2_1000eb88 = inttoptr i32 %v1_1000eb88 to i32*
  %v3_1000eb88 = load i32, i32* %v2_1000eb88, align 4
  %v4_1000eb88 = or i32 %v3_1000eb88, 4
  store i32 %v4_1000eb88, i32* %v2_1000eb88, align 4
  br label %dec_label_pc_1000eb8c

dec_label_pc_1000eb8c:                            ; preds = %dec_label_pc_1000eb81, %dec_label_pc_1000eb85
  %v3_1000eb8c = and i8 %v2_1000eb66, 16
  %v4_1000eb8c = icmp eq i8 %v3_1000eb8c, 0
  br i1 %v4_1000eb8c, label %dec_label_pc_1000eb96, label %dec_label_pc_1000eb90

dec_label_pc_1000eb90:                            ; preds = %dec_label_pc_1000eb8c
  %v3_1000eb90 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000eb90, i32* %ecx.global-to-local, align 4
  %v1_1000eb93 = add i32 %v3_1000eb90, 12
  %v2_1000eb93 = inttoptr i32 %v1_1000eb93 to i32*
  %v3_1000eb93 = load i32, i32* %v2_1000eb93, align 4
  %v4_1000eb93 = load i32, i32* %edi.global-to-local, align 4
  %v5_1000eb93 = or i32 %v4_1000eb93, %v3_1000eb93
  store i32 %v5_1000eb93, i32* %v2_1000eb93, align 4
  br label %dec_label_pc_1000eb96

dec_label_pc_1000eb96:                            ; preds = %dec_label_pc_1000eb8c, %dec_label_pc_1000eb90
  %v3_1000eb96 = and i8 %v2_1000eb66, 32
  %v4_1000eb96 = icmp eq i8 %v3_1000eb96, 0
  br i1 %v4_1000eb96, label %dec_label_pc_1000eba0, label %dec_label_pc_1000eb9a

dec_label_pc_1000eb9a:                            ; preds = %dec_label_pc_1000eb96
  %v3_1000eb9a = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000eb9a, i32* %eax.global-to-local, align 4
  %v1_1000eb9d = add i32 %v3_1000eb9a, 12
  %v2_1000eb9d = inttoptr i32 %v1_1000eb9d to i32*
  %v3_1000eb9d = load i32, i32* %v2_1000eb9d, align 4
  %v4_1000eb9d = load i32, i32* %ebx.global-to-local, align 4
  %v5_1000eb9d = or i32 %v4_1000eb9d, %v3_1000eb9d
  store i32 %v5_1000eb9d, i32* %v2_1000eb9d, align 4
  br label %dec_label_pc_1000eba0

dec_label_pc_1000eba0:                            ; preds = %dec_label_pc_1000eb96, %dec_label_pc_1000eb9a
  %v0_1000eba0 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000eba0 = inttoptr i32 %v0_1000eba0 to i32*
  %v2_1000eba0 = load i32, i32* %v1_1000eba0, align 4
  store i32 3072, i32* %ecx.global-to-local, align 4
  %v2_1000eba7 = and i32 %v2_1000eba0, 3072
  %v3_1000eba7 = icmp eq i32 %v2_1000eba7, 0
  store i32 %v2_1000eba7, i32* %eax.global-to-local, align 4
  br i1 %v3_1000eba7, label %dec_label_pc_1000ebdf, label %dec_label_pc_1000ebab

dec_label_pc_1000ebab:                            ; preds = %dec_label_pc_1000eba0
  %v6_1000ebab = icmp eq i32 %v2_1000eba7, 1024
  br i1 %v6_1000ebab, label %dec_label_pc_1000ebd1, label %dec_label_pc_1000ebb2

dec_label_pc_1000ebb2:                            ; preds = %dec_label_pc_1000ebab
  %v6_1000ebb2 = icmp eq i32 %v2_1000eba7, 2048
  br i1 %v6_1000ebb2, label %dec_label_pc_1000ebc5, label %dec_label_pc_1000ebb9

dec_label_pc_1000ebb9:                            ; preds = %dec_label_pc_1000ebb2
  %v12_1000ebb9 = icmp eq i32 %v2_1000eba7, 3072
  %v1_1000ebbb = icmp eq i1 %v12_1000ebb9, false
  br i1 %v1_1000ebbb, label %dec_label_pc_1000ebe5, label %dec_label_pc_1000ebbd

dec_label_pc_1000ebbd:                            ; preds = %dec_label_pc_1000ebb9
  %v3_1000ebbd = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ebbd, i32* %eax.global-to-local, align 4
  %v1_1000ebc0 = inttoptr i32 %v3_1000ebbd to i32*
  %v2_1000ebc0 = load i32, i32* %v1_1000ebc0, align 4
  %v3_1000ebc0 = or i32 %v2_1000ebc0, 3
  store i32 %v3_1000ebc0, i32* %v1_1000ebc0, align 4
  br label %dec_label_pc_1000ebe5

dec_label_pc_1000ebc5:                            ; preds = %dec_label_pc_1000ebb2
  %v3_1000ebc5 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ebc5, i32* %eax.global-to-local, align 4
  %v1_1000ebc8 = inttoptr i32 %v3_1000ebc5 to i32*
  %v2_1000ebc8 = load i32, i32* %v1_1000ebc8, align 4
  %v1_1000ebca = and i32 %v2_1000ebc8, -2
  store i32 %v1_1000ebca, i32* %ecx.global-to-local, align 4
  %v1_1000ebcd = load i32, i32* %edi.global-to-local, align 4
  %v2_1000ebcd = or i32 %v1_1000ebcd, %v1_1000ebca
  br label %dec_label_pc_1000ebdb

dec_label_pc_1000ebd1:                            ; preds = %dec_label_pc_1000ebab
  %v3_1000ebd1 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ebd1, i32* %eax.global-to-local, align 4
  %v1_1000ebd4 = inttoptr i32 %v3_1000ebd1 to i32*
  %v2_1000ebd4 = load i32, i32* %v1_1000ebd4, align 4
  %v1_1000ebd6 = and i32 %v2_1000ebd4, -3
  store i32 %v1_1000ebd6, i32* %ecx.global-to-local, align 4
  %v1_1000ebd9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000ebd9 = or i32 %v1_1000ebd9, %v1_1000ebd6
  br label %dec_label_pc_1000ebdb

dec_label_pc_1000ebdb:                            ; preds = %dec_label_pc_1000ebc5, %dec_label_pc_1000ebd1
  %v1_1000ebdb = phi i32 [ %v3_1000ebc5, %dec_label_pc_1000ebc5 ], [ %v3_1000ebd1, %dec_label_pc_1000ebd1 ]
  %storemerge12.in = phi i32 [ %v2_1000ebcd, %dec_label_pc_1000ebc5 ], [ %v2_1000ebd9, %dec_label_pc_1000ebd1 ]
  store i32 %storemerge12.in, i32* %ecx.global-to-local, align 4
  %v2_1000ebdb = inttoptr i32 %v1_1000ebdb to i32*
  store i32 %storemerge12.in, i32* %v2_1000ebdb, align 4
  br label %dec_label_pc_1000ebe5

dec_label_pc_1000ebdf:                            ; preds = %dec_label_pc_1000eba0
  %v3_1000ebdf = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ebdf, i32* %eax.global-to-local, align 4
  %v1_1000ebe2 = inttoptr i32 %v3_1000ebdf to i32*
  %v2_1000ebe2 = load i32, i32* %v1_1000ebe2, align 4
  %v3_1000ebe2 = and i32 %v2_1000ebe2, -4
  store i32 %v3_1000ebe2, i32* %v1_1000ebe2, align 4
  br label %dec_label_pc_1000ebe5

dec_label_pc_1000ebe5:                            ; preds = %dec_label_pc_1000ebb9, %dec_label_pc_1000ebdb, %dec_label_pc_1000ebbd, %dec_label_pc_1000ebdf
  %v0_1000ebe5 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000ebe5 = inttoptr i32 %v0_1000ebe5 to i32*
  %v2_1000ebe5 = load i32, i32* %v1_1000ebe5, align 4
  store i32 768, i32* %ecx.global-to-local, align 4
  %v2_1000ebec = and i32 %v2_1000ebe5, 768
  %v3_1000ebec = icmp eq i32 %v2_1000ebec, 0
  store i32 %v2_1000ebec, i32* %eax.global-to-local, align 4
  br i1 %v3_1000ebec, label %dec_label_pc_1000ec10, label %dec_label_pc_1000ebf0

dec_label_pc_1000ebf0:                            ; preds = %dec_label_pc_1000ebe5
  %v6_1000ebf0 = icmp eq i32 %v2_1000ebec, 512
  br i1 %v6_1000ebf0, label %dec_label_pc_1000ec03, label %dec_label_pc_1000ebf7

dec_label_pc_1000ebf7:                            ; preds = %dec_label_pc_1000ebf0
  %v12_1000ebf7 = icmp eq i32 %v2_1000ebec, 768
  %v1_1000ebf9 = icmp eq i1 %v12_1000ebf7, false
  br i1 %v1_1000ebf9, label %dec_label_pc_1000ec1d, label %dec_label_pc_1000ebfb

dec_label_pc_1000ebfb:                            ; preds = %dec_label_pc_1000ebf7
  %v3_1000ebfb = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ebfb, i32* %eax.global-to-local, align 4
  %v1_1000ebfe = inttoptr i32 %v3_1000ebfb to i32*
  %v2_1000ebfe = load i32, i32* %v1_1000ebfe, align 4
  %v3_1000ebfe = and i32 %v2_1000ebfe, -29
  store i32 %v3_1000ebfe, i32* %v1_1000ebfe, align 4
  br label %dec_label_pc_1000ec1d

dec_label_pc_1000ec03:                            ; preds = %dec_label_pc_1000ebf0
  %v3_1000ec03 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ec03, i32* %eax.global-to-local, align 4
  %v1_1000ec06 = inttoptr i32 %v3_1000ec03 to i32*
  %v2_1000ec06 = load i32, i32* %v1_1000ec06, align 4
  %v1_1000ec08 = and i32 %v2_1000ec06, -25
  store i32 %v1_1000ec08, i32* %ecx.global-to-local, align 4
  %v1_1000ec0b = or i32 %v1_1000ec08, 4
  br label %dec_label_pc_1000ec1b

dec_label_pc_1000ec10:                            ; preds = %dec_label_pc_1000ebe5
  %v3_1000ec10 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ec10, i32* %eax.global-to-local, align 4
  %v1_1000ec13 = inttoptr i32 %v3_1000ec10 to i32*
  %v2_1000ec13 = load i32, i32* %v1_1000ec13, align 4
  %v1_1000ec15 = and i32 %v2_1000ec13, -21
  store i32 %v1_1000ec15, i32* %ecx.global-to-local, align 4
  %v1_1000ec18 = or i32 %v1_1000ec15, 8
  br label %dec_label_pc_1000ec1b

dec_label_pc_1000ec1b:                            ; preds = %dec_label_pc_1000ec03, %dec_label_pc_1000ec10
  %v1_1000ec1b = phi i32 [ %v3_1000ec03, %dec_label_pc_1000ec03 ], [ %v3_1000ec10, %dec_label_pc_1000ec10 ]
  %storemerge10.in = phi i32 [ %v1_1000ec0b, %dec_label_pc_1000ec03 ], [ %v1_1000ec18, %dec_label_pc_1000ec10 ]
  store i32 %storemerge10.in, i32* %ecx.global-to-local, align 4
  %v2_1000ec1b = inttoptr i32 %v1_1000ec1b to i32*
  store i32 %storemerge10.in, i32* %v2_1000ec1b, align 4
  br label %dec_label_pc_1000ec1d

dec_label_pc_1000ec1d:                            ; preds = %dec_label_pc_1000ebf7, %dec_label_pc_1000ebfb, %dec_label_pc_1000ec1b
  %v3_1000ec1d = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ec1d, i32* %eax.global-to-local, align 4
  %v1_1000ec23 = and i32 %arg4, 4095
  store i32 %v1_1000ec23, i32* %ecx.global-to-local, align 4
  %v1_1000ec29 = inttoptr i32 %v3_1000ec1d to i32*
  %v2_1000ec29 = load i32, i32* %v1_1000ec29, align 4
  %v2_1000ec2b = mul nuw nsw i32 %v1_1000ec23, 32
  %v1_1000ec2e = and i32 %v2_1000ec29, -131041
  %v2_1000ec34 = or i32 %v1_1000ec2e, %v2_1000ec2b
  store i32 %v2_1000ec34, i32* %ecx.global-to-local, align 4
  store i32 %v2_1000ec34, i32* %v1_1000ec29, align 4
  %v3_1000ec38 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ec38, i32* %eax.global-to-local, align 4
  %v1_1000ec3b = add i32 %v3_1000ec38, 32
  %v2_1000ec3b = inttoptr i32 %v1_1000ec3b to i32*
  %v3_1000ec3b = load i32, i32* %v2_1000ec3b, align 4
  %v4_1000ec3b = load i32, i32* %ebx.global-to-local, align 4
  %v5_1000ec3b = or i32 %v4_1000ec3b, %v3_1000ec3b
  store i32 %v5_1000ec3b, i32* %v2_1000ec3b, align 4
  %v3_1000ec3e = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ec3e, i32* %eax.global-to-local, align 4
  %v1_1000ec41 = add i32 %v3_1000ec3e, 32
  %v2_1000ec41 = inttoptr i32 %v1_1000ec41 to i32*
  %v3_1000ec41 = load i32, i32* %v2_1000ec41, align 4
  %v1_1000ec44 = and i32 %v3_1000ec41, -29
  %v1_1000ec47 = load i32, i32* %edi.global-to-local, align 4
  %v2_1000ec47 = or i32 %v1_1000ec47, %v1_1000ec44
  store i32 %v2_1000ec47, i32* %ecx.global-to-local, align 4
  store i32 %v2_1000ec47, i32* %v2_1000ec41, align 4
  %v2_1000ec4f = load double, double* %tmp25, align 4
  %v3_1000ec51 = load i32, i32* %stack_var_4, align 4
  %v3_1000ec54 = add i32 %v3_1000ec51, 16
  %v5_1000ec54 = inttoptr i32 %v3_1000ec54 to double*
  store double %v2_1000ec4f, double* %v5_1000ec54, align 4
  store i32 %v3_1000ec51, i32* %eax.global-to-local, align 4
  %v1_1000ec5a = add i32 %v3_1000ec51, 80
  %v2_1000ec5a = inttoptr i32 %v1_1000ec5a to i32*
  %v3_1000ec5a = load i32, i32* %v2_1000ec5a, align 4
  %v4_1000ec5a = load i32, i32* %ebx.global-to-local, align 4
  %v5_1000ec5a = or i32 %v4_1000ec5a, %v3_1000ec5a
  store i32 %v5_1000ec5a, i32* %v2_1000ec5a, align 4
  %v3_1000ec5d = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ec5d, i32* %eax.global-to-local, align 4
  %v1_1000ec60 = add i32 %v3_1000ec5d, 80
  %v2_1000ec60 = inttoptr i32 %v1_1000ec60 to i32*
  %v3_1000ec60 = load i32, i32* %v2_1000ec60, align 4
  %v1_1000ec63 = and i32 %v3_1000ec60, -29
  %v1_1000ec66 = load i32, i32* %edi.global-to-local, align 4
  %v2_1000ec66 = or i32 %v1_1000ec66, %v1_1000ec63
  store i32 %v2_1000ec66, i32* %ecx.global-to-local, align 4
  store i32 %arg6, i32* %edi.global-to-local, align 4
  store i32 %v2_1000ec66, i32* %v2_1000ec60, align 4
  %v3_1000ec6e = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ec6e, i32* %eax.global-to-local, align 4
  %v0_1000ec71 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000ec71 = inttoptr i32 %v0_1000ec71 to double*
  %v2_1000ec71 = load double, double* %v1_1000ec71, align 4
  %v3_1000ec73 = add i32 %v3_1000ec6e, 64
  %v5_1000ec73 = inttoptr i32 %v3_1000ec73 to double*
  store double %v2_1000ec71, double* %v5_1000ec73, align 4
  %v0_1000ec76 = call i32 @function_1000f18e()
  %v2_1000ec7b = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_1000ec7b, i32* %eax.global-to-local, align 4
  store i32 %v2_1000ec7b, i32* %stack_var_-20, align 4
  %v0_1000ec7f = load i32, i32* %ebx.global-to-local, align 4
  %sext = shl i32 %stack_var_12.4, 24
  %v3_1000ec85 = ashr exact i32 %sext, 24
  call void @RaiseException(i32 %v3_1000ec85, i32 0, i32 %v0_1000ec7f, i32* nonnull %stack_var_4)
  %v3_1000ec8b = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000ec8b, i32* %eax.global-to-local, align 4
  %v1_1000ec8e = add i32 %v3_1000ec8b, 8
  %v2_1000ec8e = inttoptr i32 %v1_1000ec8e to i8*
  %v3_1000ec8e = load i8, i8* %v2_1000ec8e, align 1
  %v4_1000ec8e = and i8 %v3_1000ec8e, 16
  %v5_1000ec8e = icmp eq i8 %v4_1000ec8e, 0
  br i1 %v5_1000ec8e, label %dec_label_pc_1000ec97, label %dec_label_pc_1000ec94

dec_label_pc_1000ec94:                            ; preds = %dec_label_pc_1000ec1d
  %v0_1000ec94 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000ec94 = inttoptr i32 %v0_1000ec94 to i32*
  %v2_1000ec94 = load i32, i32* %v1_1000ec94, align 4
  %v3_1000ec94 = and i32 %v2_1000ec94, -2
  store i32 %v3_1000ec94, i32* %v1_1000ec94, align 4
  br label %dec_label_pc_1000ec97

dec_label_pc_1000ec97:                            ; preds = %dec_label_pc_1000ec1d, %dec_label_pc_1000ec94
  %v3_1000ec97 = load i8, i8* %v2_1000ec8e, align 1
  %v4_1000ec97 = and i8 %v3_1000ec97, 8
  %v5_1000ec97 = icmp eq i8 %v4_1000ec97, 0
  br i1 %v5_1000ec97, label %dec_label_pc_1000eca0, label %dec_label_pc_1000ec9d

dec_label_pc_1000ec9d:                            ; preds = %dec_label_pc_1000ec97
  %v0_1000ec9d = load i32, i32* %esi.global-to-local, align 4
  %v1_1000ec9d = inttoptr i32 %v0_1000ec9d to i32*
  %v2_1000ec9d = load i32, i32* %v1_1000ec9d, align 4
  %v3_1000ec9d = and i32 %v2_1000ec9d, -5
  store i32 %v3_1000ec9d, i32* %v1_1000ec9d, align 4
  br label %dec_label_pc_1000eca0

dec_label_pc_1000eca0:                            ; preds = %dec_label_pc_1000ec97, %dec_label_pc_1000ec9d
  %v3_1000eca0 = load i8, i8* %v2_1000ec8e, align 1
  %v4_1000eca0 = and i8 %v3_1000eca0, 4
  %v5_1000eca0 = icmp eq i8 %v4_1000eca0, 0
  br i1 %v5_1000eca0, label %dec_label_pc_1000eca9, label %dec_label_pc_1000eca6

dec_label_pc_1000eca6:                            ; preds = %dec_label_pc_1000eca0
  %v0_1000eca6 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000eca6 = inttoptr i32 %v0_1000eca6 to i32*
  %v2_1000eca6 = load i32, i32* %v1_1000eca6, align 4
  %v3_1000eca6 = and i32 %v2_1000eca6, -9
  store i32 %v3_1000eca6, i32* %v1_1000eca6, align 4
  br label %dec_label_pc_1000eca9

dec_label_pc_1000eca9:                            ; preds = %dec_label_pc_1000eca0, %dec_label_pc_1000eca6
  %v3_1000eca9 = load i8, i8* %v2_1000ec8e, align 1
  %v4_1000eca9 = and i8 %v3_1000eca9, 2
  %v5_1000eca9 = icmp eq i8 %v4_1000eca9, 0
  br i1 %v5_1000eca9, label %dec_label_pc_1000ecb2, label %dec_label_pc_1000ecaf

dec_label_pc_1000ecaf:                            ; preds = %dec_label_pc_1000eca9
  %v0_1000ecaf = load i32, i32* %esi.global-to-local, align 4
  %v1_1000ecaf = inttoptr i32 %v0_1000ecaf to i32*
  %v2_1000ecaf = load i32, i32* %v1_1000ecaf, align 4
  %v3_1000ecaf = and i32 %v2_1000ecaf, -17
  store i32 %v3_1000ecaf, i32* %v1_1000ecaf, align 4
  br label %dec_label_pc_1000ecb2

dec_label_pc_1000ecb2:                            ; preds = %dec_label_pc_1000eca9, %dec_label_pc_1000ecaf
  %v3_1000ecb2 = load i8, i8* %v2_1000ec8e, align 1
  %v4_1000ecb2 = load i32, i32* %ebx.global-to-local, align 4
  %v5_1000ecb2 = trunc i32 %v4_1000ecb2 to i8
  %v6_1000ecb2 = and i8 %v5_1000ecb2, %v3_1000ecb2
  %v7_1000ecb2 = icmp eq i8 %v6_1000ecb2, 0
  br i1 %v7_1000ecb2, label %dec_label_pc_1000ecba, label %dec_label_pc_1000ecb7

dec_label_pc_1000ecb7:                            ; preds = %dec_label_pc_1000ecb2
  %v0_1000ecb7 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000ecb7 = inttoptr i32 %v0_1000ecb7 to i32*
  %v2_1000ecb7 = load i32, i32* %v1_1000ecb7, align 4
  %v3_1000ecb7 = and i32 %v2_1000ecb7, -33
  store i32 %v3_1000ecb7, i32* %v1_1000ecb7, align 4
  br label %dec_label_pc_1000ecba

dec_label_pc_1000ecba:                            ; preds = %dec_label_pc_1000ecb2, %dec_label_pc_1000ecb7
  %v1_1000ecba = inttoptr i32 %v3_1000ec8b to i32*
  %v2_1000ecba = load i32, i32* %v1_1000ecba, align 4
  store i32 -3073, i32* @edx, align 4
  %v1_1000ecc1 = and i32 %v2_1000ecba, 3
  %v2_1000ecc1 = icmp eq i32 %v1_1000ecc1, 0
  store i32 %v1_1000ecc1, i32* %ecx.global-to-local, align 4
  br i1 %v2_1000ecc1, label %dec_label_pc_1000ecee, label %dec_label_pc_1000ecc9

dec_label_pc_1000ecc9:                            ; preds = %dec_label_pc_1000ecba
  %v1_1000ecc9 = add nsw i32 %v1_1000ecc1, -1
  %v8_1000ecc9 = icmp eq i32 %v1_1000ecc9, 0
  store i32 %v1_1000ecc9, i32* %ecx.global-to-local, align 4
  br i1 %v8_1000ecc9, label %dec_label_pc_1000ece2, label %dec_label_pc_1000eccc

dec_label_pc_1000eccc:                            ; preds = %dec_label_pc_1000ecc9
  %v1_1000eccc = add nsw i32 %v1_1000ecc1, -2
  %v8_1000eccc = icmp eq i32 %v1_1000eccc, 0
  store i32 %v1_1000eccc, i32* %ecx.global-to-local, align 4
  br i1 %v8_1000eccc, label %dec_label_pc_1000ecd8, label %dec_label_pc_1000eccf

dec_label_pc_1000eccf:                            ; preds = %dec_label_pc_1000eccc
  %v1_1000eccf = add nsw i32 %v1_1000ecc1, -3
  %v8_1000eccf = icmp eq i32 %v1_1000eccf, 0
  store i32 %v1_1000eccf, i32* %ecx.global-to-local, align 4
  %v1_1000ecd0 = icmp eq i1 %v8_1000eccf, false
  br i1 %v1_1000ecd0, label %dec_label_pc_1000ecf0, label %dec_label_pc_1000ecd2

dec_label_pc_1000ecd2:                            ; preds = %dec_label_pc_1000eccf
  %v0_1000ecd2 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000ecd2 = add i32 %v0_1000ecd2, 1
  %v2_1000ecd2 = inttoptr i32 %v1_1000ecd2 to i8*
  %v3_1000ecd2 = load i8, i8* %v2_1000ecd2, align 1
  %v4_1000ecd2 = or i8 %v3_1000ecd2, 12
  store i8 %v4_1000ecd2, i8* %v2_1000ecd2, align 1
  br label %dec_label_pc_1000ecf0

dec_label_pc_1000ecd8:                            ; preds = %dec_label_pc_1000eccc
  %v0_1000ecd8 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000ecd8 = inttoptr i32 %v0_1000ecd8 to i32*
  %v2_1000ecd8 = load i32, i32* %v1_1000ecd8, align 4
  %v1_1000ecda = udiv i32 %v2_1000ecd8, 256
  %v2_1000ecda = trunc i32 %v1_1000ecda to i8
  %v3_1000ecda = and i8 %v2_1000ecda, -5
  %v9_1000ecda = zext i8 %v3_1000ecda to i32
  %v11_1000ecda = mul nuw nsw i32 %v9_1000ecda, 256
  %v12_1000ecda = and i32 %v2_1000ecd8, -65281
  %v13_1000ecda = or i32 %v11_1000ecda, %v12_1000ecda
  store i32 %v13_1000ecda, i32* %ecx.global-to-local, align 4
  %v3_1000ecdd = or i8 %v3_1000ecda, 8
  %v8_1000ecdd = zext i8 %v3_1000ecdd to i32
  %v10_1000ecdd = mul nuw nsw i32 %v8_1000ecdd, 256
  %v12_1000ecdd = or i32 %v10_1000ecdd, %v12_1000ecda
  br label %dec_label_pc_1000ecea

dec_label_pc_1000ece2:                            ; preds = %dec_label_pc_1000ecc9
  %v0_1000ece2 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000ece2 = inttoptr i32 %v0_1000ece2 to i32*
  %v2_1000ece2 = load i32, i32* %v1_1000ece2, align 4
  %v1_1000ece4 = udiv i32 %v2_1000ece2, 256
  %v2_1000ece4 = trunc i32 %v1_1000ece4 to i8
  %v3_1000ece4 = and i8 %v2_1000ece4, -9
  %v9_1000ece4 = zext i8 %v3_1000ece4 to i32
  %v11_1000ece4 = mul nuw nsw i32 %v9_1000ece4, 256
  %v12_1000ece4 = and i32 %v2_1000ece2, -65281
  %v13_1000ece4 = or i32 %v11_1000ece4, %v12_1000ece4
  store i32 %v13_1000ece4, i32* %ecx.global-to-local, align 4
  %v3_1000ece7 = or i8 %v3_1000ece4, 4
  %v8_1000ece7 = zext i8 %v3_1000ece7 to i32
  %v10_1000ece7 = mul nuw nsw i32 %v8_1000ece7, 256
  %v12_1000ece7 = or i32 %v10_1000ece7, %v12_1000ece4
  br label %dec_label_pc_1000ecea

dec_label_pc_1000ecea:                            ; preds = %dec_label_pc_1000ecd8, %dec_label_pc_1000ece2
  %v1_1000ecea = phi i32 [ %v0_1000ecd8, %dec_label_pc_1000ecd8 ], [ %v0_1000ece2, %dec_label_pc_1000ece2 ]
  %storemerge5 = phi i32 [ %v12_1000ecdd, %dec_label_pc_1000ecd8 ], [ %v12_1000ece7, %dec_label_pc_1000ece2 ]
  store i32 %storemerge5, i32* %ecx.global-to-local, align 4
  %v2_1000ecea = inttoptr i32 %v1_1000ecea to i32*
  store i32 %storemerge5, i32* %v2_1000ecea, align 4
  br label %dec_label_pc_1000ecf0

dec_label_pc_1000ecee:                            ; preds = %dec_label_pc_1000ecba
  %v0_1000ecee = load i32, i32* %esi.global-to-local, align 4
  %v1_1000ecee = inttoptr i32 %v0_1000ecee to i32*
  %v2_1000ecee = load i32, i32* %v1_1000ecee, align 4
  %v4_1000ecee = and i32 %v2_1000ecee, -3073
  store i32 %v4_1000ecee, i32* %v1_1000ecee, align 4
  br label %dec_label_pc_1000ecf0

dec_label_pc_1000ecf0:                            ; preds = %dec_label_pc_1000eccf, %dec_label_pc_1000ecea, %dec_label_pc_1000ecd2, %dec_label_pc_1000ecee
  %v2_1000ecf0 = load i32, i32* %v1_1000ecba, align 4
  %v2_1000ecf2 = udiv i32 %v2_1000ecf0, 4
  %v1_1000ecf5 = and i32 %v2_1000ecf2, 7
  %v2_1000ecf5 = icmp eq i32 %v1_1000ecf5, 0
  store i32 %v1_1000ecf5, i32* %ecx.global-to-local, align 4
  br i1 %v2_1000ecf5, label %dec_label_pc_1000ed10, label %dec_label_pc_1000ecfd

dec_label_pc_1000ecfd:                            ; preds = %dec_label_pc_1000ecf0
  %v1_1000ecfd = add nsw i32 %v1_1000ecf5, -1
  %v8_1000ecfd = icmp eq i32 %v1_1000ecfd, 0
  store i32 %v1_1000ecfd, i32* %ecx.global-to-local, align 4
  br i1 %v8_1000ecfd, label %dec_label_pc_1000ed07, label %dec_label_pc_1000ed00

dec_label_pc_1000ed00:                            ; preds = %dec_label_pc_1000ecfd
  %v1_1000ed00 = add nsw i32 %v1_1000ecf5, -2
  %v8_1000ed00 = icmp eq i32 %v1_1000ed00, 0
  store i32 %v1_1000ed00, i32* @ecx, align 4
  %v1_1000ed01 = icmp eq i1 %v8_1000ed00, false
  br i1 %v1_1000ed01, label %dec_label_pc_1000ed19, label %dec_label_pc_1000ed03

dec_label_pc_1000ed03:                            ; preds = %dec_label_pc_1000ed00
  %v0_1000ed03 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000ed03 = inttoptr i32 %v0_1000ed03 to i32*
  %v2_1000ed03 = load i32, i32* %v1_1000ed03, align 4
  %v3_1000ed03 = load i32, i32* @edx, align 4
  %v4_1000ed03 = and i32 %v3_1000ed03, %v2_1000ed03
  store i32 %v4_1000ed03, i32* %v1_1000ed03, align 4
  br label %dec_label_pc_1000ed19

dec_label_pc_1000ed07:                            ; preds = %dec_label_pc_1000ecfd
  %v0_1000ed07 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000ed07 = inttoptr i32 %v0_1000ed07 to i32*
  %v2_1000ed07 = load i32, i32* %v1_1000ed07, align 4
  %v1_1000ed09 = load i32, i32* @edx, align 4
  %v2_1000ed09 = and i32 %v1_1000ed09, %v2_1000ed07
  store i32 %v2_1000ed09, i32* %ecx.global-to-local, align 4
  %v1_1000ed0b = udiv i32 %v2_1000ed09, 256
  %v3_1000ed0b = and i32 %v1_1000ed0b, 253
  %v8_1000ed0b = or i32 %v3_1000ed0b, 2
  %v10_1000ed0b = mul nuw nsw i32 %v8_1000ed0b, 256
  %v11_1000ed0b = and i32 %v2_1000ed09, -65281
  %v12_1000ed0b = or i32 %v10_1000ed0b, %v11_1000ed0b
  br label %dec_label_pc_1000ed17

dec_label_pc_1000ed10:                            ; preds = %dec_label_pc_1000ecf0
  %v0_1000ed10 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000ed10 = inttoptr i32 %v0_1000ed10 to i32*
  %v2_1000ed10 = load i32, i32* %v1_1000ed10, align 4
  %v1_1000ed12 = load i32, i32* @edx, align 4
  %v2_1000ed12 = and i32 %v1_1000ed12, %v2_1000ed10
  store i32 %v2_1000ed12, i32* %ecx.global-to-local, align 4
  %v1_1000ed14 = udiv i32 %v2_1000ed12, 256
  %v3_1000ed14 = and i32 %v1_1000ed14, 252
  %v8_1000ed14 = or i32 %v3_1000ed14, 3
  %v10_1000ed14 = mul nuw nsw i32 %v8_1000ed14, 256
  %v11_1000ed14 = and i32 %v2_1000ed12, -65281
  %v12_1000ed14 = or i32 %v10_1000ed14, %v11_1000ed14
  br label %dec_label_pc_1000ed17

dec_label_pc_1000ed17:                            ; preds = %dec_label_pc_1000ed07, %dec_label_pc_1000ed10
  %v1_1000ed17 = phi i32 [ %v0_1000ed07, %dec_label_pc_1000ed07 ], [ %v0_1000ed10, %dec_label_pc_1000ed10 ]
  %storemerge = phi i32 [ %v12_1000ed0b, %dec_label_pc_1000ed07 ], [ %v12_1000ed14, %dec_label_pc_1000ed10 ]
  store i32 %storemerge, i32* @ecx, align 4
  %v2_1000ed17 = inttoptr i32 %v1_1000ed17 to i32*
  store i32 %storemerge, i32* %v2_1000ed17, align 4
  br label %dec_label_pc_1000ed19

dec_label_pc_1000ed19:                            ; preds = %dec_label_pc_1000ed00, %dec_label_pc_1000ed03, %dec_label_pc_1000ed17
  %v1_1000ed19 = add i32 %v3_1000ec8b, 64
  %v2_1000ed19 = inttoptr i32 %v1_1000ed19 to double*
  %v3_1000ed19 = load double, double* %v2_1000ed19, align 4
  %v2_1000ed1c = load i32, i32* %edi.global-to-local, align 4
  %v4_1000ed1c = inttoptr i32 %v2_1000ed1c to double*
  store double %v3_1000ed19, double* %v4_1000ed1c, align 4
  %v2_1000ed1e = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000ed1e, i32* %edi.global-to-local, align 4
  ret i32 %v3_1000ec8b

; uselistorder directives
  uselistorder i32 %v2_1000ed12, { 1, 0, 2 }
  uselistorder i32 %v2_1000ed09, { 1, 0, 2 }
  uselistorder i32 %v1_1000ed00, { 1, 0 }
  uselistorder i32 %v1_1000ecfd, { 1, 0 }
  uselistorder i32 %v2_1000ece2, { 1, 0 }
  uselistorder i32 %v2_1000ecd8, { 1, 0 }
  uselistorder i32 %v1_1000eccf, { 1, 0 }
  uselistorder i32 %v1_1000eccc, { 1, 0 }
  uselistorder i32 %v1_1000ecc9, { 1, 0 }
  uselistorder i32 %v3_1000ec8b, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_1000ec51, { 1, 0, 2 }
  uselistorder i32 %storemerge10.in, { 1, 0 }
  uselistorder i32 %storemerge12.in, { 1, 0 }
  uselistorder i8 %v2_1000eb66, { 3, 2, 1, 0 }
  uselistorder i32 %v1_1000eb66, { 0, 2, 1 }
  uselistorder i32 %v1_1000eab5, { 1, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0, 2, 3, 4 }
  uselistorder i32* %stack_var_4, { 2, 0, 34, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 1 }
  uselistorder i32* %esi.global-to-local, { 2, 1, 0, 6, 5, 4, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 3, 4, 1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 16, 18, 19, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 37, 41, 42, 43 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 31, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder i32 %arg3, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_1000ed19, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1000ed17, { 1, 0 }
  uselistorder label %dec_label_pc_1000ecf0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_1000ecea, { 1, 0 }
  uselistorder label %dec_label_pc_1000ecba, { 1, 0 }
  uselistorder label %dec_label_pc_1000ecb2, { 1, 0 }
  uselistorder label %dec_label_pc_1000eca9, { 1, 0 }
  uselistorder label %dec_label_pc_1000eca0, { 1, 0 }
  uselistorder label %dec_label_pc_1000ec97, { 1, 0 }
  uselistorder label %dec_label_pc_1000ec1d, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1000ec1b, { 1, 0 }
  uselistorder label %dec_label_pc_1000ebe5, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_1000ebdb, { 1, 0 }
  uselistorder label %dec_label_pc_1000eba0, { 1, 0 }
  uselistorder label %dec_label_pc_1000eb96, { 1, 0 }
  uselistorder label %dec_label_pc_1000eb8c, { 1, 0 }
  uselistorder label %dec_label_pc_1000eb81, { 1, 0 }
  uselistorder label %dec_label_pc_1000eb76, { 1, 0 }
  uselistorder label %dec_label_pc_1000eaed, { 1, 0 }
  uselistorder label %dec_label_pc_1000eada, { 1, 0 }
  uselistorder label %dec_label_pc_1000eac7, { 1, 0 }
  uselistorder label %dec_label_pc_1000eab5, { 1, 0 }
  uselistorder label %dec_label_pc_1000eaa2, { 1, 0 }
}

define i32 @function_1000ed23(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000ed23:
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %tmp = trunc i32 %arg3 to i8
  %tmp57 = call i8 @__decompiler_undefined_function_7()
  %tmp60 = inttoptr i32 %arg2 to double*
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-28 = alloca i8, align 1
  %stack_var_-24 = alloca i32, align 4
  %v4_1000ed29 = sext i8 %arg1 to i32
  store i32 %v4_1000ed29, i32* @eax, align 4
  %v0_1000ed2d = load i32, i32* @edi, align 4
  store i32 %v0_1000ed2d, i32* %stack_var_-24, align 4
  %v1_1000ed30 = and i32 %v4_1000ed29, 31
  store i32 %v1_1000ed30, i32* %edi.global-to-local, align 4
  store i8 1, i8* %stack_var_-28, align 1
  %v2_1000ed35 = and i32 %v4_1000ed29, 8
  %v3_1000ed35 = icmp eq i32 %v2_1000ed35, 0
  store i32 1, i32* %ebx.global-to-local, align 4
  br i1 %v3_1000ed35, label %dec_label_pc_1000ed4e, label %dec_label_pc_1000ed3a

dec_label_pc_1000ed3a:                            ; preds = %dec_label_pc_1000ed23
  %v6_1000ed3a = and i32 %arg3, 1
  %v7_1000ed3a = icmp eq i32 %v6_1000ed3a, 0
  br i1 %v7_1000ed3a, label %dec_label_pc_1000ed4e, label %dec_label_pc_1000ed3f

dec_label_pc_1000ed3f:                            ; preds = %dec_label_pc_1000ed3a
  store i8 1, i8* %stack_var_-28, align 1
  %v3_1000ed40 = call i32 @function_1000f1c0(i8 1)
  store i32 %v3_1000ed40, i32* @eax, align 4
  store i32 1, i32* @ecx, align 4
  %v0_1000ed46 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000ed46 = and i32 %v0_1000ed46, -9
  store i32 %v1_1000ed46, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000ef18

dec_label_pc_1000ed4e:                            ; preds = %dec_label_pc_1000ed3a, %dec_label_pc_1000ed23
  %v2_1000ed4e = and i32 %v4_1000ed29, 4
  %v3_1000ed4e = icmp eq i32 %v2_1000ed4e, 0
  br i1 %v3_1000ed4e, label %dec_label_pc_1000ed68, label %dec_label_pc_1000ed52

dec_label_pc_1000ed52:                            ; preds = %dec_label_pc_1000ed4e
  %v4_1000ed52 = and i8 %tmp, 4
  %v5_1000ed52 = icmp eq i8 %v4_1000ed52, 0
  br i1 %v5_1000ed52, label %dec_label_pc_1000ed68, label %dec_label_pc_1000ed58

dec_label_pc_1000ed58:                            ; preds = %dec_label_pc_1000ed52
  store i8 4, i8* %stack_var_-28, align 1
  %v3_1000ed5a = call i32 @function_1000f1c0(i8 4)
  store i32 %v3_1000ed5a, i32* @eax, align 4
  store i32 4, i32* @ecx, align 4
  %v0_1000ed60 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000ed60 = and i32 %v0_1000ed60, -5
  store i32 %v1_1000ed60, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000ef18

dec_label_pc_1000ed68:                            ; preds = %dec_label_pc_1000ed52, %dec_label_pc_1000ed4e
  %v2_1000ed68 = and i8 %arg1, 1
  %v4_1000ed68 = icmp eq i8 %v2_1000ed68, 0
  br i1 %v4_1000ed68, label %dec_label_pc_1000ee42, label %dec_label_pc_1000ed70

dec_label_pc_1000ed70:                            ; preds = %dec_label_pc_1000ed68
  %v4_1000ed70 = and i8 %tmp, 8
  %v5_1000ed70 = icmp eq i8 %v4_1000ed70, 0
  br i1 %v5_1000ed70, label %dec_label_pc_1000ee42, label %dec_label_pc_1000ed7a

dec_label_pc_1000ed7a:                            ; preds = %dec_label_pc_1000ed70
  store i8 8, i8* %stack_var_-28, align 1
  %v3_1000ed7c = call i32 @function_1000f1c0(i8 8)
  store i32 3072, i32* @eax, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_1000ed87 = sdiv i32 %sext, 16777216
  %v2_1000ed8a = and i32 %v4_1000ed87, 3072
  %v3_1000ed8a = icmp eq i32 %v2_1000ed8a, 0
  store i32 %v2_1000ed8a, i32* @ecx, align 4
  br i1 %v3_1000ed8a, label %dec_label_pc_1000ee32, label %dec_label_pc_1000ed92

dec_label_pc_1000ed92:                            ; preds = %dec_label_pc_1000ed7a
  %v6_1000ed92 = icmp eq i32 %v2_1000ed8a, 1024
  br i1 %v6_1000ed92, label %dec_label_pc_1000ee12, label %dec_label_pc_1000ed9a

dec_label_pc_1000ed9a:                            ; preds = %dec_label_pc_1000ed92
  %v6_1000ed9a = icmp eq i32 %v2_1000ed8a, 2048
  br i1 %v6_1000ed9a, label %dec_label_pc_1000edea, label %dec_label_pc_1000eda2

dec_label_pc_1000eda2:                            ; preds = %dec_label_pc_1000ed9a
  %v12_1000eda2 = icmp eq i32 %v2_1000ed8a, 3072
  %v1_1000eda4 = icmp eq i1 %v12_1000eda2, false
  br i1 %v1_1000eda4, label %dec_label_pc_1000ee3a, label %dec_label_pc_1000edc2

dec_label_pc_1000edc2:                            ; preds = %dec_label_pc_1000eda2
  store i32 %arg2, i32* @ecx, align 4
  br label %dec_label_pc_1000ee38

dec_label_pc_1000edea:                            ; preds = %dec_label_pc_1000ed9a
  store i32 %arg2, i32* @ecx, align 4
  br label %dec_label_pc_1000ee38

dec_label_pc_1000ee12:                            ; preds = %dec_label_pc_1000ed92
  store i32 %arg2, i32* @ecx, align 4
  br label %dec_label_pc_1000ee38

dec_label_pc_1000ee32:                            ; preds = %dec_label_pc_1000ed7a
  store i32 %arg2, i32* @ecx, align 4
  br label %dec_label_pc_1000ee38

dec_label_pc_1000ee38:                            ; preds = %dec_label_pc_1000ee12, %dec_label_pc_1000edea, %dec_label_pc_1000edc2, %dec_label_pc_1000ee32
  %v1_1000ee38.in.in = phi double* [ @global_var_100186d8.140, %dec_label_pc_1000ee12 ], [ @global_var_100186c8.141, %dec_label_pc_1000edea ], [ @global_var_100186d8.140, %dec_label_pc_1000edc2 ], [ @global_var_100186c8.141, %dec_label_pc_1000ee32 ]
  %v0_1000ee38.in = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000ee38.in = load double, double* %v1_1000ee38.in.in, align 8
  store double %v1_1000ee38.in, double* %tmp60, align 4
  store i3 %v0_1000ee38.in, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_1000ee3a

dec_label_pc_1000ee3a:                            ; preds = %dec_label_pc_1000eda2, %dec_label_pc_1000ee38
  %v0_1000ee3a = load i32, i32* %edi.global-to-local, align 4
  %v1_1000ee3a = and i32 %v0_1000ee3a, -2
  store i32 %v1_1000ee3a, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000ef18

dec_label_pc_1000ee42:                            ; preds = %dec_label_pc_1000ed70, %dec_label_pc_1000ed68
  %v2_1000ee42 = and i32 %v4_1000ed29, 2
  %v3_1000ee42 = icmp eq i32 %v2_1000ee42, 0
  br i1 %v3_1000ee42, label %dec_label_pc_1000ef18, label %dec_label_pc_1000ee4a

dec_label_pc_1000ee4a:                            ; preds = %dec_label_pc_1000ee42
  %v4_1000ee4a = and i8 %tmp, 16
  %v5_1000ee4a = icmp eq i8 %v4_1000ee4a, 0
  br i1 %v5_1000ee4a, label %dec_label_pc_1000ef18, label %dec_label_pc_1000ee54

dec_label_pc_1000ee54:                            ; preds = %dec_label_pc_1000ee4a
  %v0_1000ee54 = load i32, i32* @esi, align 4
  %v5_1000ee54 = trunc i32 %v0_1000ee54 to i8
  store i8 %v5_1000ee54, i8* %stack_var_-28, align 1
  %v2_1000ee57 = and i32 %v4_1000ed29, 16
  %v3_1000ee57 = icmp eq i32 %v2_1000ee57, 0
  br i1 %v3_1000ee57, label %dec_label_pc_1000ee5d, label %dec_label_pc_1000ee5b

dec_label_pc_1000ee5b:                            ; preds = %dec_label_pc_1000ee54
  br label %dec_label_pc_1000ee5d

dec_label_pc_1000ee5d:                            ; preds = %dec_label_pc_1000ee54, %dec_label_pc_1000ee5b
  %storemerge = phi i32 [ 1, %dec_label_pc_1000ee5b ], [ 0, %dec_label_pc_1000ee54 ]
  store i32 %storemerge, i32* @esi, align 4
  store i32 %arg2, i32* @eax, align 4
  %v1_1000ee70 = udiv i32 %arg2, 256
  %v9_1000ee70 = and i32 %v1_1000ee70, 64
  %v10_1000ee70 = icmp eq i32 %v9_1000ee70, 0
  br i1 %v10_1000ee70, label %dec_label_pc_1000ee77, label %dec_label_pc_1000ef06

dec_label_pc_1000ee77:                            ; preds = %dec_label_pc_1000ee5d
  %v2_1000ee60 = load double, double* %tmp60, align 4
  %v3_1000ee60 = fpext double %v2_1000ee60 to x86_fp80
  %v2_1000ee7a = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_1000ee7a, i32* @eax, align 4
  %v0_1000ee7e = load i32, i32* @ecx, align 4
  %v5_1000ee80 = fptrunc x86_fp80 %v3_1000ee60 to float
  %v6_1000ee80 = bitcast float %v5_1000ee80 to i32
  %v3_1000ee83 = sext i32 %v6_1000ee80 to i64
  %v4_1000ee83 = bitcast i64 %v3_1000ee83 to double
  %v5_1000ee83 = call x86_fp80 @function_1000f0bf(double %v4_1000ee83, i32 %v0_1000ee7e, i32 %v2_1000ee7a)
  %v3_1000ee88 = load i32, i32* %stack_var_-8, align 4
  %v0_1000ee8e = load i3, i3* @fpu_stat_TOP, align 1
  %tmp73 = fptrunc x86_fp80 %v5_1000ee83 to double
  %v12_1000ee8e = add i3 %v0_1000ee8e, 1
  %v1_1000ee91 = add i32 %v3_1000ee88, -1536
  store i32 %v1_1000ee91, i32* @ecx, align 4
  %v5_1000ee9d = icmp slt i32 %v1_1000ee91, -1074
  br i1 %v5_1000ee9d, label %dec_label_pc_1000ee9f, label %dec_label_pc_1000eea8

dec_label_pc_1000ee9f:                            ; preds = %dec_label_pc_1000ee77
  %v0_1000eea1 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_1000eea1, i32* @esi, align 4
  br label %dec_label_pc_1000eefc

dec_label_pc_1000eea8:                            ; preds = %dec_label_pc_1000ee77
  %v1_1000eeb3 = udiv i32 %v3_1000ee88, 256
  %v3_1000eeb3 = and i32 %v1_1000eeb3, 1
  %v4_1000eeb3 = icmp ne i32 %v3_1000eeb3, 0
  %v1_1000eeb4 = icmp eq i1 %v4_1000eeb3, false
  br i1 %v1_1000eeb4, label %dec_label_pc_1000eeba, label %dec_label_pc_1000eeb6

dec_label_pc_1000eeb6:                            ; preds = %dec_label_pc_1000eea8
  %v0_1000eeb6 = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000eebc

dec_label_pc_1000eeba:                            ; preds = %dec_label_pc_1000eea8
  br label %dec_label_pc_1000eebc

dec_label_pc_1000eebc:                            ; preds = %dec_label_pc_1000eeb6, %dec_label_pc_1000eeba
  %v0_1000eef0 = phi i32 [ %v0_1000eeb6, %dec_label_pc_1000eeb6 ], [ 0, %dec_label_pc_1000eeba ]
  store i32 %v0_1000eef0, i32* @edx, align 4
  %v5_1000eecf = icmp slt i32 %v1_1000ee91, -1021
  br i1 %v5_1000eecf, label %dec_label_pc_1000eed1, label %dec_label_pc_1000eef0

dec_label_pc_1000eed1:                            ; preds = %dec_label_pc_1000eebc
  %v2_1000eed1 = sub i32 515, %v3_1000ee88
  %v7_1000eed3 = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000eed3

dec_label_pc_1000eed3:                            ; preds = %dec_label_pc_1000eede, %dec_label_pc_1000eed1
  %v1_1000eeed39 = phi i32 [ %v2_1000eed1, %dec_label_pc_1000eed1 ], [ %v1_1000eeed, %dec_label_pc_1000eede ]
  %v3_1000eed338 = phi double [ %tmp73, %dec_label_pc_1000eed1 ], [ %v19_1000eede, %dec_label_pc_1000eede ]
  %stack_var_-12.0 = phi i8 [ %tmp57, %dec_label_pc_1000eed1 ], [ %v8_1000eeea, %dec_label_pc_1000eede ]
  %v4_1000eed3 = fptrunc double %v3_1000eed338 to float
  %v5_1000eed3 = bitcast float %v4_1000eed3 to i32
  %v9_1000eed318 = and i32 %v5_1000eed3, %v7_1000eed3
  %v9_1000eed3 = trunc i32 %v9_1000eed318 to i8
  %v10_1000eed3 = icmp eq i8 %v9_1000eed3, 0
  br i1 %v10_1000eed3, label %dec_label_pc_1000eede, label %dec_label_pc_1000eed8

dec_label_pc_1000eed8:                            ; preds = %dec_label_pc_1000eed3
  %v0_1000eed8 = load i32, i32* @esi, align 4
  %v1_1000eed8 = icmp eq i32 %v0_1000eed8, 0
  %v1_1000eeda = icmp eq i1 %v1_1000eed8, false
  br i1 %v1_1000eeda, label %dec_label_pc_1000eede, label %dec_label_pc_1000eedc

dec_label_pc_1000eedc:                            ; preds = %dec_label_pc_1000eed8
  store i32 %v7_1000eed3, i32* @esi, align 4
  br label %dec_label_pc_1000eede

dec_label_pc_1000eede:                            ; preds = %dec_label_pc_1000eed8, %dec_label_pc_1000eed3, %dec_label_pc_1000eedc
  %v7_1000eede = udiv i32 %v5_1000eed3, 2
  %v18_1000eede20 = zext i32 %v7_1000eede to i64
  %v19_1000eede = bitcast i64 %v18_1000eede20 to double
  %v4_1000eeea = sext i8 %stack_var_-12.0 to i32
  %v6_1000eeea = udiv i32 %v4_1000eeea, 2
  %v8_1000eeea = trunc i32 %v6_1000eeea to i8
  %v1_1000eeed = add i32 %v1_1000eeed39, -1
  %v8_1000eeed = icmp eq i32 %v1_1000eeed, 0
  %v1_1000eeee = icmp eq i1 %v8_1000eeed, false
  br i1 %v1_1000eeee, label %dec_label_pc_1000eed3, label %dec_label_pc_1000eef0.loopexit

dec_label_pc_1000eef0.loopexit:                   ; preds = %dec_label_pc_1000eede
  br label %dec_label_pc_1000eef0

dec_label_pc_1000eef0:                            ; preds = %dec_label_pc_1000eef0.loopexit, %dec_label_pc_1000eebc
  %v3_1000eef4 = phi double [ %v19_1000eede, %dec_label_pc_1000eef0.loopexit ], [ %tmp73, %dec_label_pc_1000eebc ]
  %v1_1000eef0 = icmp eq i32 %v0_1000eef0, 0
  br i1 %v1_1000eef0, label %dec_label_pc_1000eefc, label %dec_label_pc_1000eef4

dec_label_pc_1000eef4:                            ; preds = %dec_label_pc_1000eef0
  %tmp74 = fsub double -0.000000e+00, %v3_1000eef4
  br label %dec_label_pc_1000eefc

dec_label_pc_1000eefc:                            ; preds = %dec_label_pc_1000eef0, %dec_label_pc_1000ee9f, %dec_label_pc_1000eef4
  %v3_1000eefc = phi double [ %v3_1000eef4, %dec_label_pc_1000eef0 ], [ 0.000000e+00, %dec_label_pc_1000ee9f ], [ %tmp74, %dec_label_pc_1000eef4 ]
  store i32 %arg2, i32* @eax, align 4
  store double %v3_1000eefc, double* %tmp60, align 4
  store i3 %v12_1000ee8e, i3* @fpu_stat_TOP, align 1
  %v0_1000ef08.pre = load i32, i32* @esi, align 4
  %v2_1000ef0a.pre = load i8, i8* %stack_var_-28, align 1
  %phitmp = icmp eq i32 %v0_1000ef08.pre, 0
  br label %dec_label_pc_1000ef08

dec_label_pc_1000ef06:                            ; preds = %dec_label_pc_1000ee5d
  br label %dec_label_pc_1000ef08

dec_label_pc_1000ef08:                            ; preds = %dec_label_pc_1000eefc, %dec_label_pc_1000ef06
  %v2_1000ef0a = phi i8 [ %v2_1000ef0a.pre, %dec_label_pc_1000eefc ], [ %v5_1000ee54, %dec_label_pc_1000ef06 ]
  %v0_1000ef08 = phi i1 [ %phitmp, %dec_label_pc_1000eefc ], [ false, %dec_label_pc_1000ef06 ]
  %v3_1000ef0a = sext i8 %v2_1000ef0a to i32
  store i32 %v3_1000ef0a, i32* @esi, align 4
  br i1 %v0_1000ef08, label %dec_label_pc_1000ef15, label %dec_label_pc_1000ef0d

dec_label_pc_1000ef0d:                            ; preds = %dec_label_pc_1000ef08
  store i8 16, i8* %stack_var_-28, align 1
  %v3_1000ef0f = call i32 @function_1000f1c0(i8 16)
  store i32 %v3_1000ef0f, i32* @eax, align 4
  store i32 16, i32* @ecx, align 4
  br label %dec_label_pc_1000ef15

dec_label_pc_1000ef15:                            ; preds = %dec_label_pc_1000ef08, %dec_label_pc_1000ef0d
  %v0_1000ef15 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000ef15 = and i32 %v0_1000ef15, -3
  store i32 %v1_1000ef15, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000ef18

dec_label_pc_1000ef18:                            ; preds = %dec_label_pc_1000ee4a, %dec_label_pc_1000ee42, %dec_label_pc_1000ee3a, %dec_label_pc_1000ed58, %dec_label_pc_1000ed3f, %dec_label_pc_1000ef15
  %v0_1000ef3155 = phi i32 [ %v1_1000ed30, %dec_label_pc_1000ee4a ], [ %v1_1000ed30, %dec_label_pc_1000ee42 ], [ %v1_1000ee3a, %dec_label_pc_1000ee3a ], [ %v1_1000ed60, %dec_label_pc_1000ed58 ], [ %v1_1000ed46, %dec_label_pc_1000ed3f ], [ %v1_1000ef15, %dec_label_pc_1000ef15 ]
  %v6_1000ef18 = and i8 %arg1, 16
  %v7_1000ef18 = icmp eq i8 %v6_1000ef18, 0
  br i1 %v7_1000ef18, label %dec_label_pc_1000ef2f, label %dec_label_pc_1000ef1e

dec_label_pc_1000ef1e:                            ; preds = %dec_label_pc_1000ef18
  %v4_1000ef1e = and i8 %tmp, 32
  %v5_1000ef1e = icmp eq i8 %v4_1000ef1e, 0
  br i1 %v5_1000ef1e, label %dec_label_pc_1000ef2f, label %dec_label_pc_1000ef24

dec_label_pc_1000ef24:                            ; preds = %dec_label_pc_1000ef1e
  store i8 32, i8* %stack_var_-28, align 1
  %v3_1000ef26 = call i32 @function_1000f1c0(i8 32)
  store i32 32, i32* @ecx, align 4
  %v0_1000ef2c = load i32, i32* %edi.global-to-local, align 4
  %v1_1000ef2c = and i32 %v0_1000ef2c, -17
  store i32 %v1_1000ef2c, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000ef2f

dec_label_pc_1000ef2f:                            ; preds = %dec_label_pc_1000ef1e, %dec_label_pc_1000ef18, %dec_label_pc_1000ef24
  %v0_1000ef31 = phi i32 [ %v0_1000ef3155, %dec_label_pc_1000ef1e ], [ %v0_1000ef3155, %dec_label_pc_1000ef18 ], [ %v1_1000ef2c, %dec_label_pc_1000ef24 ]
  %v1_1000ef31 = icmp eq i32 %v0_1000ef31, 0
  %v2_1000ef33 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1000ef33, i32* @edi, align 4
  %v1_1000ef35 = zext i1 %v1_1000ef31 to i32
  ret i32 %v1_1000ef35

; uselistorder directives
  uselistorder double %v3_1000eef4, { 1, 0 }
  uselistorder i32 %v1_1000eeed, { 1, 0 }
  uselistorder i32 %v7_1000eed3, { 1, 0 }
  uselistorder i32 %v3_1000ee88, { 1, 0, 2 }
  uselistorder i8* %stack_var_-28, { 7, 6, 0, 5, 4, 3, 2, 1 }
  uselistorder double* %tmp60, { 1, 2, 0 }
  uselistorder i8 %tmp, { 3, 2, 1, 0 }
  uselistorder i32* %edi.global-to-local, { 0, 5, 1, 6, 2, 7, 3, 8, 4, 9, 10 }
  uselistorder i32 -17, { 2, 0, 1 }
  uselistorder i32 -5, { 2, 0, 1, 3 }
  uselistorder i32 -9, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i8 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1000ef2f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000ef18, { 5, 0, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_1000ef15, { 1, 0 }
  uselistorder label %dec_label_pc_1000ef08, { 1, 0 }
  uselistorder label %dec_label_pc_1000eefc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000eede, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000eebc, { 1, 0 }
  uselistorder label %dec_label_pc_1000ee5d, { 1, 0 }
  uselistorder label %dec_label_pc_1000ee3a, { 1, 0 }
  uselistorder label %dec_label_pc_1000ee38, { 3, 0, 1, 2 }
}

define x86_fp80 @function_1000ef3a(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, double %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_1000ef3a:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000ef3a = load i32, i32* @ebp, align 4
  store i32 %v0_1000ef3a, i32* %stack_var_-4, align 4
  store i32 %arg2, i32* %stack_var_-40, align 4
  %v1_1000ef43 = call i32 @function_1000efea(i32 %arg2)
  %v1_1000ef48 = icmp eq i32 %v1_1000ef43, 0
  store i32 %arg2, i32* @ecx, align 4
  br i1 %v1_1000ef48, label %dec_label_pc_1000efa5, label %dec_label_pc_1000ef50

dec_label_pc_1000ef50:                            ; preds = %dec_label_pc_1000ef3a
  %v12_1000ef3d = ptrtoint i32* %stack_var_-36 to i32
  %v0_1000ef53 = load i32, i32* @esi, align 4
  store i32 %v0_1000ef53, i32* %stack_var_-40, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  store i32 %arg1, i32* %stack_var_-36, align 4
  %v2_1000ef83 = call i32 @function_1000f19d(i32 %arg9, i32 65535)
  %v1_1000ef8c = call i32 @function_100124f0(i32 %v12_1000ef3d)
  %v1_1000ef94 = icmp eq i32 %v1_1000ef8c, 0
  %v1_1000ef96 = icmp eq i1 %v1_1000ef94, false
  br i1 %v1_1000ef96, label %dec_label_pc_1000ef9f, label %dec_label_pc_1000ef98

dec_label_pc_1000ef98:                            ; preds = %dec_label_pc_1000ef50
  %v0_1000ef98 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000ef99 = call i32 @__set_errno_from_matherr(i32 %v0_1000ef98)
  store i32 %v0_1000ef98, i32* @ecx, align 4
  br label %dec_label_pc_1000ef9f

dec_label_pc_1000ef9f:                            ; preds = %dec_label_pc_1000ef50, %dec_label_pc_1000ef98
  %v8_1000ef9f = fpext double %arg7 to x86_fp80
  %v9_1000ef9f = load i3, i3* @fpu_stat_TOP, align 1
  %v10_1000ef9f = add i3 %v9_1000ef9f, -1
  store i3 %v10_1000ef9f, i3* @fpu_stat_TOP, align 1
  %v2_1000efa2 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_1000efa2, i32* %esi.global-to-local, align 4
  %v2_1000efa3 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000efa3, i32* @ebp, align 4
  ret x86_fp80 %v8_1000ef9f

dec_label_pc_1000efa5:                            ; preds = %dec_label_pc_1000ef3a
  store i32 65535, i32* %stack_var_-40, align 4
  %v2_1000efad = call i32 @function_1000f19d(i32 %arg9, i32 65535)
  %v1_1000efb5 = call i32 @__set_errno_from_matherr(i32 %arg1)
  %v8_1000efba = fpext double %arg7 to x86_fp80
  %v9_1000efba = load i3, i3* @fpu_stat_TOP, align 1
  %v10_1000efba = add i3 %v9_1000efba, -1
  store i3 %v10_1000efba, i3* @fpu_stat_TOP, align 1
  %v2_1000efc0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000efc0, i32* @ebp, align 4
  ret x86_fp80 %v8_1000efba

; uselistorder directives
  uselistorder i32 %arg9, { 1, 0 }
  uselistorder double %arg7, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000ef9f, { 1, 0 }
}

declare i32 @__set_errno_from_matherr(i32) local_unnamed_addr

define i32 @function_1000efea(i32 %arg1) local_unnamed_addr {
entry:
  br label %dec_label_pc_1000eff1

dec_label_pc_1000eff1:                            ; preds = %dec_label_pc_1000eff9, %entry
  %v0_1000f007 = phi i32 [ %v1_1000effc, %dec_label_pc_1000eff9 ], [ 0, %entry ]
  %v0_1000eff9 = phi i32 [ %v1_1000eff9, %dec_label_pc_1000eff9 ], [ ptrtoint (i32* @global_var_100185f0.142 to i32), %entry ]
  %v1_1000eff1 = inttoptr i32 %v0_1000eff9 to i32*
  %v2_1000eff1 = load i32, i32* %v1_1000eff1, align 4
  store i32 %v2_1000eff1, i32* @edx, align 4
  %v15_1000eff3 = icmp eq i32 %v2_1000eff1, %arg1
  br i1 %v15_1000eff3, label %dec_label_pc_1000f007, label %dec_label_pc_1000eff9

dec_label_pc_1000eff9:                            ; preds = %dec_label_pc_1000eff1
  %v1_1000eff9 = add i32 %v0_1000eff9, 8
  %v1_1000effc = add nuw nsw i32 %v0_1000f007, 1
  %v5_1000f002 = icmp slt i32 %v1_1000eff9, 268535496
  br i1 %v5_1000f002, label %dec_label_pc_1000eff1, label %dec_label_pc_1000f004

dec_label_pc_1000f004:                            ; preds = %dec_label_pc_1000eff9
  ret i32 0

dec_label_pc_1000f007:                            ; preds = %dec_label_pc_1000eff1
  %v1_1000f007 = mul i32 %v0_1000f007, 8
  %v2_1000f007 = add i32 %v1_1000f007, ptrtoint ([4 x i8]** @global_var_100185f4.144 to i32)
  %v3_1000f007 = inttoptr i32 %v2_1000f007 to i32*
  %v4_1000f007 = load i32, i32* %v3_1000f007, align 4
  ret i32 %v4_1000f007

; uselistorder directives
  uselistorder i32 %v1_1000eff9, { 1, 0 }
}

define i32 @function_1000f00f(i8 %arg1) local_unnamed_addr {
dec_label_pc_1000f00f:
  %v4_1000f00f = zext i8 %arg1 to i32
  %v2_1000f013 = and i8 %arg1, 32
  %v3_1000f013 = icmp eq i8 %v2_1000f013, 0
  br i1 %v3_1000f013, label %dec_label_pc_1000f01b, label %dec_label_pc_1000f017

dec_label_pc_1000f017:                            ; preds = %dec_label_pc_1000f00f
  br label %dec_label_pc_1000f031

dec_label_pc_1000f01b:                            ; preds = %dec_label_pc_1000f00f
  %v2_1000f01b = and i32 %v4_1000f00f, 8
  %v3_1000f01b = icmp eq i32 %v2_1000f01b, 0
  br i1 %v3_1000f01b, label %dec_label_pc_1000f023, label %dec_label_pc_1000f01f

dec_label_pc_1000f01f:                            ; preds = %dec_label_pc_1000f01b
  br label %dec_label_pc_1000f031

dec_label_pc_1000f023:                            ; preds = %dec_label_pc_1000f01b
  %v2_1000f023 = and i32 %v4_1000f00f, 4
  %v3_1000f023 = icmp eq i32 %v2_1000f023, 0
  br i1 %v3_1000f023, label %dec_label_pc_1000f02b, label %dec_label_pc_1000f027

dec_label_pc_1000f027:                            ; preds = %dec_label_pc_1000f023
  br label %dec_label_pc_1000f031

dec_label_pc_1000f02b:                            ; preds = %dec_label_pc_1000f023
  %v2_1000f02b = and i32 %v4_1000f00f, 1
  %v3_1000f02b = icmp eq i32 %v2_1000f02b, 0
  br i1 %v3_1000f02b, label %dec_label_pc_1000f033, label %dec_label_pc_1000f02f

dec_label_pc_1000f02f:                            ; preds = %dec_label_pc_1000f02b
  br label %dec_label_pc_1000f031

dec_label_pc_1000f031:                            ; preds = %dec_label_pc_1000f027, %dec_label_pc_1000f01f, %dec_label_pc_1000f017, %dec_label_pc_1000f02f
  %v2_1000f031 = phi i32 [ 2, %dec_label_pc_1000f027 ], [ 1, %dec_label_pc_1000f01f ], [ 5, %dec_label_pc_1000f017 ], [ 3, %dec_label_pc_1000f02f ]
  ret i32 %v2_1000f031

dec_label_pc_1000f033:                            ; preds = %dec_label_pc_1000f02b
  %v1_1000f036 = and i32 %v4_1000f00f, 2
  %v2_1000f039 = mul nuw nsw i32 %v1_1000f036, 2
  ret i32 %v2_1000f039

; uselistorder directives
  uselistorder i8 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_1000f031, { 3, 0, 1, 2 }
}

define x86_fp80 @function_1000f03c(double %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000f03c:
  %v5_1000f047 = load i3, i3* @fpu_stat_TOP, align 1
  %v6_1000f047 = add i3 %v5_1000f047, -1
  %v8_1000f060 = fpext double %arg1 to x86_fp80
  store i3 %v6_1000f047, i3* @fpu_stat_TOP, align 1
  ret x86_fp80 %v8_1000f060
}

define i32 @function_1000f065(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000f065:
  %tmp = call i32 @__decompiler_undefined_function_1()
  store i32 0, i32* @edx, align 4
  %v9_1000f06a = icmp eq i32 %arg2, 2146435072
  %v1_1000f071 = icmp eq i1 %v9_1000f06a, false
  br i1 %v1_1000f071, label %dec_label_pc_1000f07c, label %dec_label_pc_1000f073

dec_label_pc_1000f073:                            ; preds = %dec_label_pc_1000f065
  %v15_1000f073 = icmp eq i32 %arg1, 0
  %v1_1000f076 = icmp eq i1 %v15_1000f073, false
  br i1 %v1_1000f076, label %dec_label_pc_1000f08e, label %dec_label_pc_1000f078

dec_label_pc_1000f078:                            ; preds = %dec_label_pc_1000f073
  br label %dec_label_pc_1000f0b8

dec_label_pc_1000f07c:                            ; preds = %dec_label_pc_1000f065
  %v10_1000f07c = icmp eq i32 %arg2, -1048576
  %v1_1000f083 = icmp eq i1 %v10_1000f07c, false
  br i1 %v1_1000f083, label %dec_label_pc_1000f08e, label %dec_label_pc_1000f085

dec_label_pc_1000f085:                            ; preds = %dec_label_pc_1000f07c
  %v15_1000f085 = icmp eq i32 %arg1, 0
  %v1_1000f088 = icmp eq i1 %v15_1000f085, false
  br i1 %v1_1000f088, label %dec_label_pc_1000f08e, label %dec_label_pc_1000f08a

dec_label_pc_1000f08a:                            ; preds = %dec_label_pc_1000f085
  br label %dec_label_pc_1000f0b8

dec_label_pc_1000f08e:                            ; preds = %dec_label_pc_1000f085, %dec_label_pc_1000f07c, %dec_label_pc_1000f073
  %tmp.tr = trunc i32 %tmp to i16
  %v1_1000f098 = and i16 %tmp.tr, 32760
  %v15_1000f098 = icmp eq i16 %v1_1000f098, 32760
  %v1_1000f09b = icmp eq i1 %v15_1000f098, false
  br i1 %v1_1000f09b, label %dec_label_pc_1000f0a1, label %dec_label_pc_1000f09d

dec_label_pc_1000f09d:                            ; preds = %dec_label_pc_1000f08e
  br label %dec_label_pc_1000f0b8

dec_label_pc_1000f0a1:                            ; preds = %dec_label_pc_1000f08e
  %v7_1000f0a1 = icmp eq i16 %v1_1000f098, 32752
  %v1_1000f0a6 = icmp eq i1 %v7_1000f0a1, false
  br i1 %v1_1000f0a6, label %dec_label_pc_1000f0bb, label %dec_label_pc_1000f0a8

dec_label_pc_1000f0a8:                            ; preds = %dec_label_pc_1000f0a1
  %v4_1000f0a8 = and i32 %arg2, 524287
  %v5_1000f0a8 = icmp eq i32 %v4_1000f0a8, 0
  %v1_1000f0af = icmp eq i1 %v5_1000f0a8, false
  br i1 %v1_1000f0af, label %dec_label_pc_1000f0b6, label %dec_label_pc_1000f0b1

dec_label_pc_1000f0b1:                            ; preds = %dec_label_pc_1000f0a8
  %v15_1000f0b1 = icmp eq i32 %arg1, 0
  br i1 %v15_1000f0b1, label %dec_label_pc_1000f0bb, label %dec_label_pc_1000f0b6

dec_label_pc_1000f0b6:                            ; preds = %dec_label_pc_1000f0b1, %dec_label_pc_1000f0a8
  br label %dec_label_pc_1000f0b8

dec_label_pc_1000f0b8:                            ; preds = %dec_label_pc_1000f09d, %dec_label_pc_1000f08a, %dec_label_pc_1000f078, %dec_label_pc_1000f0b6
  %v2_1000f0b8 = phi i32 [ 3, %dec_label_pc_1000f09d ], [ 2, %dec_label_pc_1000f08a ], [ 1, %dec_label_pc_1000f078 ], [ 4, %dec_label_pc_1000f0b6 ]
  ret i32 %v2_1000f0b8

dec_label_pc_1000f0bb:                            ; preds = %dec_label_pc_1000f0b1, %dec_label_pc_1000f0a1
  ret i32 0

; uselistorder directives
  uselistorder i16 %v1_1000f098, { 1, 0 }
  uselistorder i16 32760, { 1, 0 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000f0b8, { 3, 0, 1, 2 }
}

define x86_fp80 @function_1000f0bf(double %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000f0bf:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_1()
  %tmp21 = call i16 @__decompiler_undefined_function_0()
  %stack_var_-16 = alloca i32, align 4
  %v5_1000f0c4 = load i3, i3* @fpu_stat_TOP, align 1
  %v0_1000f0cd = load i32, i32* @esi, align 4
  store i32 %v0_1000f0cd, i32* %stack_var_-16, align 4
  %v0_1000f0d0 = load i32, i32* @eax, align 4
  %v1_1000f0d0 = udiv i32 %v0_1000f0d0, 256
  %v3_1000f0d0 = and i32 %v1_1000f0d0, 1
  %v4_1000f0d0 = icmp ne i32 %v3_1000f0d0, 0
  %v9_1000f0d0 = and i32 %v1_1000f0d0, 64
  %v10_1000f0d0 = icmp ne i32 %v9_1000f0d0, 0
  %v1_1000f0d1 = icmp eq i1 %v10_1000f0d0, false
  br i1 %v1_1000f0d1, label %dec_label_pc_1000f0df, label %dec_label_pc_1000f0d3

dec_label_pc_1000f0d3:                            ; preds = %dec_label_pc_1000f0bf
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000f175

dec_label_pc_1000f0df:                            ; preds = %dec_label_pc_1000f0bf
  %v4_1000f0e1 = and i16 %tmp21, 32752
  %v5_1000f0e1 = icmp eq i16 %v4_1000f0e1, 0
  %v1_1000f0e7 = icmp eq i1 %v5_1000f0e1, false
  br i1 %v1_1000f0e7, label %dec_label_pc_1000f14e, label %dec_label_pc_1000f0e9

dec_label_pc_1000f0e9:                            ; preds = %dec_label_pc_1000f0df
  %v4_1000f0e9 = and i32 %arg3, 1048575
  %v5_1000f0e9 = icmp eq i32 %v4_1000f0e9, 0
  %v1_1000f0f0 = icmp eq i1 %v5_1000f0e9, false
  br i1 %v1_1000f0f0, label %dec_label_pc_1000f0f7, label %dec_label_pc_1000f0f2

dec_label_pc_1000f0f2:                            ; preds = %dec_label_pc_1000f0e9
  %v4_1000f0f2 = fptrunc double %arg1 to float
  %v5_1000f0f2 = bitcast float %v4_1000f0f2 to i32
  %v17_1000f0f2 = icmp eq i32 %v5_1000f0f2, 0
  br i1 %v17_1000f0f2, label %dec_label_pc_1000f14e, label %dec_label_pc_1000f0f7

dec_label_pc_1000f0f7:                            ; preds = %dec_label_pc_1000f0f2, %dec_label_pc_1000f0e9
  store i32 -1021, i32* %esi.global-to-local, align 4
  %v1_1000f108 = icmp eq i1 %v4_1000f0d0, false
  br i1 %v1_1000f108, label %dec_label_pc_1000f10f, label %dec_label_pc_1000f10a

dec_label_pc_1000f10a:                            ; preds = %dec_label_pc_1000f0f7
  br label %dec_label_pc_1000f111.preheader

dec_label_pc_1000f10f:                            ; preds = %dec_label_pc_1000f0f7
  br label %dec_label_pc_1000f111.preheader

dec_label_pc_1000f111.preheader:                  ; preds = %dec_label_pc_1000f10f, %dec_label_pc_1000f10a
  %v0_1000f130 = phi i32 [ 1, %dec_label_pc_1000f10a ], [ 0, %dec_label_pc_1000f10f ]
  %v5_1000f111 = and i16 %tmp21, 16
  %v6_1000f111 = icmp eq i16 %v5_1000f111, 0
  %v1_1000f115 = icmp eq i1 %v6_1000f111, false
  br i1 %v1_1000f115, label %dec_label_pc_1000f12a, label %dec_label_pc_1000f117

dec_label_pc_1000f117:                            ; preds = %dec_label_pc_1000f111.preheader, %dec_label_pc_1000f117
  br label %dec_label_pc_1000f117

dec_label_pc_1000f12a:                            ; preds = %dec_label_pc_1000f111.preheader
  %v12_1000f130 = icmp eq i32 %v0_1000f130, 0
  br i1 %v12_1000f130, label %dec_label_pc_1000f138, label %dec_label_pc_1000f134

dec_label_pc_1000f134:                            ; preds = %dec_label_pc_1000f12a
  br label %dec_label_pc_1000f138

dec_label_pc_1000f138:                            ; preds = %dec_label_pc_1000f12a, %dec_label_pc_1000f134
  %v5_1000f141 = call x86_fp80 @function_1000f03c(double %arg1, i32 0, i32 0)
  %v0_1000f146 = load i3, i3* @fpu_stat_TOP, align 1
  %tmp31 = fptrunc x86_fp80 %v5_1000f141 to double
  %v12_1000f146 = add i3 %v0_1000f146, 1
  %v0_1000f17b.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000f175

dec_label_pc_1000f14e:                            ; preds = %dec_label_pc_1000f0f2, %dec_label_pc_1000f0df
  %v5_1000f157 = call x86_fp80 @function_1000f03c(double %arg1, i32 0, i32 0)
  %v4_1000f15c = sext i16 %tmp21 to i32
  %v0_1000f162 = load i3, i3* @fpu_stat_TOP, align 1
  %tmp32 = fptrunc x86_fp80 %v5_1000f157 to double
  %v12_1000f162 = add i3 %v0_1000f162, 1
  %v2_1000f165 = udiv i32 %v4_1000f15c, 16
  %v3_1000f168 = and i32 %v2_1000f165, 2047
  %v1_1000f16f = add nsw i32 %v3_1000f168, -1022
  store i32 %v1_1000f16f, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000f175

dec_label_pc_1000f175:                            ; preds = %dec_label_pc_1000f138, %dec_label_pc_1000f0d3, %dec_label_pc_1000f14e
  %v0_1000f17b = phi i32 [ %v0_1000f17b.pre, %dec_label_pc_1000f138 ], [ 0, %dec_label_pc_1000f0d3 ], [ %v1_1000f16f, %dec_label_pc_1000f14e ]
  %v9_1000f178 = phi i3 [ %v12_1000f146, %dec_label_pc_1000f138 ], [ %v5_1000f0c4, %dec_label_pc_1000f0d3 ], [ %v12_1000f162, %dec_label_pc_1000f14e ]
  %v3_1000f178 = phi double [ %tmp31, %dec_label_pc_1000f138 ], [ 0.000000e+00, %dec_label_pc_1000f0d3 ], [ %tmp32, %dec_label_pc_1000f14e ]
  %v8_1000f178 = fpext double %v3_1000f178 to x86_fp80
  %v10_1000f178 = add i3 %v9_1000f178, -1
  store i3 %v10_1000f178, i3* @fpu_stat_TOP, align 1
  %v2_1000f17b = inttoptr i32 %tmp to i32*
  store i32 %v0_1000f17b, i32* %v2_1000f17b, align 4
  %v2_1000f17d = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000f17d, i32* @esi, align 4
  ret x86_fp80 %v8_1000f178

; uselistorder directives
  uselistorder i16 %tmp21, { 1, 0, 2 }
  uselistorder double 0.000000e+00, { 0, 1, 3, 4, 5, 2 }
  uselistorder i32 -1021, { 1, 0 }
  uselistorder label %dec_label_pc_1000f175, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000f138, { 1, 0 }
  uselistorder label %dec_label_pc_1000f117, { 1, 0 }
}

define i32 @function_1000f180(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000f180:
  %tmp = call i16 @__decompiler_undefined_function_0()
  %v4_1000f188 = sext i16 %tmp to i32
  ret i32 %v4_1000f188
}

define i32 @function_1000f18e() local_unnamed_addr {
dec_label_pc_1000f18e:
  %tmp = call i16 @__decompiler_undefined_function_0()
  %v4_1000f197 = sext i16 %tmp to i32
  ret i32 %v4_1000f197
}

define i32 @function_1000f19d(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000f19d:
  %v0_1000f1a0 = load i32, i32* @ecx, align 4
  %v5_1000f1aa = and i32 %arg2, %arg1
  %v1_1000f1ad = sub i32 -1, %arg2
  %sext = mul i32 %v0_1000f1a0, 65536
  %v5_1000f1af = sdiv i32 %sext, 65536
  %v6_1000f1af = and i32 %v5_1000f1af, %v1_1000f1ad
  %v2_1000f1b2 = or i32 %v6_1000f1af, %v5_1000f1aa
  store i32 %v2_1000f1b2, i32* @ecx, align 4
  ret i32 %v5_1000f1af
}

define i32 @function_1000f1c0(i8 %arg1) local_unnamed_addr {
dec_label_pc_1000f1c0:
  %v4_1000f1c5 = zext i8 %arg1 to i32
  %v2_1000f1c8 = and i8 %arg1, 1
  %v3_1000f1c8 = icmp eq i8 %v2_1000f1c8, 0
  br i1 %v3_1000f1c8, label %dec_label_pc_1000f1d7, label %dec_label_pc_1000f1cd

dec_label_pc_1000f1cd:                            ; preds = %dec_label_pc_1000f1c0
  br label %dec_label_pc_1000f1d7

dec_label_pc_1000f1d7:                            ; preds = %dec_label_pc_1000f1c0, %dec_label_pc_1000f1cd
  %v2_1000f1d7 = and i32 %v4_1000f1c5, 8
  %v3_1000f1d7 = icmp eq i32 %v2_1000f1d7, 0
  br i1 %v3_1000f1d7, label %dec_label_pc_1000f1ec, label %dec_label_pc_1000f1dc

dec_label_pc_1000f1dc:                            ; preds = %dec_label_pc_1000f1d7
  br label %dec_label_pc_1000f1ec

dec_label_pc_1000f1ec:                            ; preds = %dec_label_pc_1000f1d7, %dec_label_pc_1000f1dc
  %v2_1000f1ec = and i32 %v4_1000f1c5, 16
  %v3_1000f1ec = icmp eq i32 %v2_1000f1ec, 0
  br i1 %v3_1000f1ec, label %dec_label_pc_1000f1fb, label %dec_label_pc_1000f1f1

dec_label_pc_1000f1f1:                            ; preds = %dec_label_pc_1000f1ec
  br label %dec_label_pc_1000f1fb

dec_label_pc_1000f1fb:                            ; preds = %dec_label_pc_1000f1ec, %dec_label_pc_1000f1f1
  %v2_1000f1fb = and i32 %v4_1000f1c5, 4
  %v3_1000f1fb = icmp eq i32 %v2_1000f1fb, 0
  br i1 %v3_1000f1fb, label %dec_label_pc_1000f209, label %dec_label_pc_1000f200

dec_label_pc_1000f200:                            ; preds = %dec_label_pc_1000f1fb
  br label %dec_label_pc_1000f209

dec_label_pc_1000f209:                            ; preds = %dec_label_pc_1000f1fb, %dec_label_pc_1000f200
  %v2_1000f209 = and i32 %v4_1000f1c5, 32
  %v3_1000f209 = icmp eq i32 %v2_1000f209, 0
  br i1 %v3_1000f209, label %dec_label_pc_1000f214, label %dec_label_pc_1000f20e

dec_label_pc_1000f20e:                            ; preds = %dec_label_pc_1000f209
  br label %dec_label_pc_1000f214

dec_label_pc_1000f214:                            ; preds = %dec_label_pc_1000f209, %dec_label_pc_1000f20e
  %v0_1000f215 = load i32, i32* @eax, align 4
  ret i32 %v0_1000f215

; uselistorder directives
  uselistorder i8 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_1000f214, { 1, 0 }
  uselistorder label %dec_label_pc_1000f209, { 1, 0 }
  uselistorder label %dec_label_pc_1000f1fb, { 1, 0 }
  uselistorder label %dec_label_pc_1000f1ec, { 1, 0 }
  uselistorder label %dec_label_pc_1000f1d7, { 1, 0 }
}

define i32 @function_1000f216(i8* %arg1) local_unnamed_addr {
dec_label_pc_1000f216:
  %eax.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000f216 = load i32, i32* @esi, align 4
  store i32 %v0_1000f216, i32* %stack_var_-4, align 4
  %v4_1000f217 = ptrtoint i8* %arg1 to i32
  store i32 %v4_1000f217, i32* %esi.global-to-local, align 4
  %v4_1000f21d = bitcast i8* %arg1 to i32*
  store i32 0, i32* %v4_1000f21d, align 4
  %v6_1000f220 = call i32* @GetModuleHandleA(i8* null)
  %v7_1000f220 = ptrtoint i32* %v6_1000f220 to i32
  store i32 %v7_1000f220, i32* %eax.global-to-local, align 4
  %v1_1000f226 = bitcast i32* %v6_1000f220 to i16*
  %v2_1000f226 = load i16, i16* %v1_1000f226, align 2
  %v11_1000f226 = icmp eq i16 %v2_1000f226, 23117
  %v1_1000f22b = icmp eq i1 %v11_1000f226, false
  br i1 %v1_1000f22b, label %dec_label_pc_1000f241, label %dec_label_pc_1000f22d

dec_label_pc_1000f22d:                            ; preds = %dec_label_pc_1000f216
  %v1_1000f22d = add i32 %v7_1000f220, 60
  %v2_1000f22d = inttoptr i32 %v1_1000f22d to i32*
  %v3_1000f22d = load i32, i32* %v2_1000f22d, align 4
  %v1_1000f230 = icmp eq i32 %v3_1000f22d, 0
  br i1 %v1_1000f230, label %dec_label_pc_1000f241, label %dec_label_pc_1000f234

dec_label_pc_1000f234:                            ; preds = %dec_label_pc_1000f22d
  %v2_1000f234 = add i32 %v3_1000f22d, %v7_1000f220
  store i32 %v2_1000f234, i32* %eax.global-to-local, align 4
  %v1_1000f236 = add i32 %v2_1000f234, 26
  %v2_1000f236 = inttoptr i32 %v1_1000f236 to i8*
  %v3_1000f236 = load i8, i8* %v2_1000f236, align 1
  %v2_1000f239 = load i32, i32* %esi.global-to-local, align 4
  %v3_1000f239 = inttoptr i32 %v2_1000f239 to i8*
  store i8 %v3_1000f236, i8* %v3_1000f239, align 1
  %v0_1000f23b = load i32, i32* %eax.global-to-local, align 4
  %v1_1000f23b = add i32 %v0_1000f23b, 27
  %v2_1000f23b = inttoptr i32 %v1_1000f23b to i8*
  %v3_1000f23b = load i8, i8* %v2_1000f23b, align 1
  %v4_1000f23b = zext i8 %v3_1000f23b to i32
  %v6_1000f23b = and i32 %v0_1000f23b, -256
  %v7_1000f23b = or i32 %v4_1000f23b, %v6_1000f23b
  store i32 %v7_1000f23b, i32* %eax.global-to-local, align 4
  %v2_1000f23e = load i32, i32* %esi.global-to-local, align 4
  %v3_1000f23e = add i32 %v2_1000f23e, 1
  %v4_1000f23e = inttoptr i32 %v3_1000f23e to i8*
  store i8 %v3_1000f23b, i8* %v4_1000f23e, align 1
  %v0_1000f242.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f241

dec_label_pc_1000f241:                            ; preds = %dec_label_pc_1000f22d, %dec_label_pc_1000f216, %dec_label_pc_1000f234
  %v0_1000f242 = phi i32 [ %v7_1000f220, %dec_label_pc_1000f22d ], [ %v7_1000f220, %dec_label_pc_1000f216 ], [ %v0_1000f242.pre, %dec_label_pc_1000f234 ]
  %v2_1000f241 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000f241, i32* @esi, align 4
  ret i32 %v0_1000f242

; uselistorder directives
  uselistorder i32 %v7_1000f220, { 1, 2, 0, 3, 4 }
  uselistorder i32 60, { 5, 0, 4, 1, 2, 3 }
  uselistorder label %dec_label_pc_1000f241, { 2, 0, 1 }
}

define i32 @function_1000f243() local_unnamed_addr {
dec_label_pc_1000f243:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_1()
  %tmp26 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-416 = alloca i8, align 1
  %stack_var_-4656 = alloca i8, align 1
  %stack_var_-8 = alloca i8, align 1
  %stack_var_-156 = alloca %_OSVERSIONINFOA*, align 4
  %v0_1000f243 = load i32, i32* @ebp, align 4
  store i32 4652, i32* @eax, align 4
  %v1_1000f24b = call i32 @function_10012860(i32 %v0_1000f243)
  %v2_1000f250 = ptrtoint %_OSVERSIONINFOA** %stack_var_-156 to i32
  store i32 %v2_1000f250, i32* %eax.global-to-local, align 4
  %v0_1000f256 = load i32, i32* @ebx, align 4
  %v5_1000f256 = trunc i32 %v0_1000f256 to i8
  store i8 %v5_1000f256, i8* %stack_var_-8, align 1
  %v6_1000f256 = ptrtoint i8* %stack_var_-8 to i32
  store %_OSVERSIONINFOA* inttoptr (i32 148 to %_OSVERSIONINFOA*), %_OSVERSIONINFOA** %stack_var_-156, align 4
  %v5_1000f262 = call i1 @GetVersionExA(%_OSVERSIONINFOA* inttoptr (i32 148 to %_OSVERSIONINFOA*))
  %v6_1000f262 = sext i1 %v5_1000f262 to i32
  store i32 %v6_1000f262, i32* %eax.global-to-local, align 4
  %v1_1000f268 = icmp eq i1 %v5_1000f262, false
  br i1 %v1_1000f268, label %dec_label_pc_1000f286, label %dec_label_pc_1000f26c

dec_label_pc_1000f26c:                            ; preds = %dec_label_pc_1000f243
  %v12_1000f26c = icmp eq i32 %tmp26, 2
  %v1_1000f273 = icmp eq i1 %v12_1000f26c, false
  br i1 %v1_1000f273, label %dec_label_pc_1000f286, label %dec_label_pc_1000f275

dec_label_pc_1000f275:                            ; preds = %dec_label_pc_1000f26c
  %v8_1000f275 = icmp ult i32 %tmp, 5
  br i1 %v8_1000f275, label %dec_label_pc_1000f286, label %dec_label_pc_1000f27e

dec_label_pc_1000f27e:                            ; preds = %dec_label_pc_1000f275
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f388

dec_label_pc_1000f286:                            ; preds = %dec_label_pc_1000f275, %dec_label_pc_1000f26c, %dec_label_pc_1000f243
  %v2_1000f286 = ptrtoint i8* %stack_var_-4656 to i32
  store i32 %v2_1000f286, i32* %eax.global-to-local, align 4
  %v9_1000f297 = call i32 @GetEnvironmentVariableA(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @global_var_100162d4.147, i32 0, i32 0), i8* nonnull %stack_var_-4656, i32 4240)
  store i32 %v9_1000f297, i32* %eax.global-to-local, align 4
  %v1_1000f29d = icmp eq i32 %v9_1000f297, 0
  br i1 %v1_1000f29d, label %dec_label_pc_1000f375, label %dec_label_pc_1000f2a5

dec_label_pc_1000f2a5:                            ; preds = %dec_label_pc_1000f286
  store i32 0, i32* @ebx, align 4
  store i32 %v2_1000f286, i32* %ecx.global-to-local, align 4
  %v3_1000f2ad = load i8, i8* %stack_var_-4656, align 1
  %v18_1000f2ad = icmp eq i8 %v3_1000f2ad, 0
  br i1 %v18_1000f2ad, label %dec_label_pc_1000f2c8, label %dec_label_pc_1000f2b5

dec_label_pc_1000f2b5:                            ; preds = %dec_label_pc_1000f2a5, %dec_label_pc_1000f2c3.dec_label_pc_1000f2b5_crit_edge
  %v3_1000f2c411 = phi i32 [ %v3_1000f2c4, %dec_label_pc_1000f2c3.dec_label_pc_1000f2b5_crit_edge ], [ 0, %dec_label_pc_1000f2a5 ]
  %v4_1000f2b5 = phi i32 [ %v4_1000f2b5.pre, %dec_label_pc_1000f2c3.dec_label_pc_1000f2b5_crit_edge ], [ %v9_1000f297, %dec_label_pc_1000f2a5 ]
  %v2_1000f2c1 = phi i32 [ %v1_1000f2c3, %dec_label_pc_1000f2c3.dec_label_pc_1000f2b5_crit_edge ], [ %v2_1000f286, %dec_label_pc_1000f2a5 ]
  %v1_1000f2b5 = inttoptr i32 %v2_1000f2c1 to i8*
  %v2_1000f2b5 = load i8, i8* %v1_1000f2b5, align 1
  %v3_1000f2b5 = zext i8 %v2_1000f2b5 to i32
  %v5_1000f2b5 = and i32 %v4_1000f2b5, -256
  %v6_1000f2b5 = or i32 %v3_1000f2b5, %v5_1000f2b5
  store i32 %v6_1000f2b5, i32* %eax.global-to-local, align 4
  %v7_1000f2b9 = icmp slt i8 %v2_1000f2b5, 97
  br i1 %v7_1000f2b9, label %dec_label_pc_1000f2c3, label %dec_label_pc_1000f2bb

dec_label_pc_1000f2bb:                            ; preds = %dec_label_pc_1000f2b5
  %v2_1000f2bb = add i8 %v2_1000f2b5, -122
  %v7_1000f2bb = sub i8 121, %v2_1000f2b5
  %v8_1000f2bb = and i8 %v7_1000f2bb, %v2_1000f2b5
  %v9_1000f2bb = icmp slt i8 %v8_1000f2bb, 0
  %v10_1000f2bb = icmp eq i8 %v2_1000f2bb, 0
  %v11_1000f2bb = icmp slt i8 %v2_1000f2bb, 0
  %v3_1000f2bd = icmp eq i1 %v11_1000f2bb, %v9_1000f2bb
  %v4_1000f2bd = icmp eq i1 %v10_1000f2bb, false
  %v5_1000f2bd = and i1 %v4_1000f2bd, %v3_1000f2bd
  br i1 %v5_1000f2bd, label %dec_label_pc_1000f2c3, label %dec_label_pc_1000f2bf

dec_label_pc_1000f2bf:                            ; preds = %dec_label_pc_1000f2bb
  %v2_1000f2bf = add i8 %v2_1000f2b5, -32
  %v12_1000f2bf = zext i8 %v2_1000f2bf to i32
  %v15_1000f2bf = or i32 %v12_1000f2bf, %v5_1000f2b5
  store i32 %v15_1000f2bf, i32* %eax.global-to-local, align 4
  store i8 %v2_1000f2bf, i8* %v1_1000f2b5, align 1
  %v0_1000f2c3.pre = load i32, i32* %ecx.global-to-local, align 4
  %v3_1000f2c4.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000f2c3

dec_label_pc_1000f2c3:                            ; preds = %dec_label_pc_1000f2bb, %dec_label_pc_1000f2b5, %dec_label_pc_1000f2bf
  %v3_1000f2c4 = phi i32 [ %v3_1000f2c411, %dec_label_pc_1000f2bb ], [ %v3_1000f2c411, %dec_label_pc_1000f2b5 ], [ %v3_1000f2c4.pre, %dec_label_pc_1000f2bf ]
  %v0_1000f2c3 = phi i32 [ %v2_1000f2c1, %dec_label_pc_1000f2bb ], [ %v2_1000f2c1, %dec_label_pc_1000f2b5 ], [ %v0_1000f2c3.pre, %dec_label_pc_1000f2bf ]
  %v1_1000f2c3 = add i32 %v0_1000f2c3, 1
  store i32 %v1_1000f2c3, i32* %ecx.global-to-local, align 4
  %v1_1000f2c4 = inttoptr i32 %v1_1000f2c3 to i8*
  %v2_1000f2c4 = load i8, i8* %v1_1000f2c4, align 1
  %v4_1000f2c4 = trunc i32 %v3_1000f2c4 to i8
  %v15_1000f2c4 = icmp eq i8 %v2_1000f2c4, %v4_1000f2c4
  %v1_1000f2c6 = icmp eq i1 %v15_1000f2c4, false
  br i1 %v1_1000f2c6, label %dec_label_pc_1000f2c3.dec_label_pc_1000f2b5_crit_edge, label %dec_label_pc_1000f2c8

dec_label_pc_1000f2c3.dec_label_pc_1000f2b5_crit_edge: ; preds = %dec_label_pc_1000f2c3
  %v4_1000f2b5.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f2b5

dec_label_pc_1000f2c8:                            ; preds = %dec_label_pc_1000f2c3, %dec_label_pc_1000f2a5
  store i32 %v2_1000f286, i32* %eax.global-to-local, align 4
  %v6_1000f2d6 = call i32 @function_1000d700(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @global_var_100162bc.148, i32 0, i32 0), i32 %v2_1000f286, i32 22)
  store i32 %v6_1000f2d6, i32* %eax.global-to-local, align 4
  %v1_1000f2de = icmp eq i32 %v6_1000f2d6, 0
  %v1_1000f2e0 = icmp eq i1 %v1_1000f2de, false
  br i1 %v1_1000f2e0, label %dec_label_pc_1000f2ea, label %dec_label_pc_1000f2e2

dec_label_pc_1000f2e2:                            ; preds = %dec_label_pc_1000f2c8
  store i32 %v2_1000f286, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f333

dec_label_pc_1000f2ea:                            ; preds = %dec_label_pc_1000f2c8
  %v2_1000f2ea = ptrtoint i8* %stack_var_-416 to i32
  store i32 %v2_1000f2ea, i32* %eax.global-to-local, align 4
  %v0_1000f2f6 = load i32, i32* @ebx, align 4
  %tmp36 = inttoptr i32 %v0_1000f2f6 to i32*
  %v9_1000f2f7 = call i32 @GetModuleFileNameA(i32* %tmp36, i8* nonnull %stack_var_-416, i32 260)
  store i32 %v9_1000f2f7, i32* %eax.global-to-local, align 4
  %v3_1000f2fd = load i8, i8* %stack_var_-416, align 1
  %v6_1000f2fd = load i32, i32* @ebx, align 4
  %v7_1000f2fd = trunc i32 %v6_1000f2fd to i8
  %v18_1000f2fd = icmp eq i8 %v3_1000f2fd, %v7_1000f2fd
  store i32 %v2_1000f2ea, i32* %ecx.global-to-local, align 4
  br i1 %v18_1000f2fd, label %dec_label_pc_1000f31e, label %dec_label_pc_1000f30b

dec_label_pc_1000f30b:                            ; preds = %dec_label_pc_1000f2ea, %dec_label_pc_1000f319.dec_label_pc_1000f30b_crit_edge
  %v3_1000f31a16 = phi i32 [ %v3_1000f31a, %dec_label_pc_1000f319.dec_label_pc_1000f30b_crit_edge ], [ %v6_1000f2fd, %dec_label_pc_1000f2ea ]
  %v4_1000f30b = phi i32 [ %v4_1000f30b.pre, %dec_label_pc_1000f319.dec_label_pc_1000f30b_crit_edge ], [ %v9_1000f2f7, %dec_label_pc_1000f2ea ]
  %v2_1000f317 = phi i32 [ %v1_1000f319, %dec_label_pc_1000f319.dec_label_pc_1000f30b_crit_edge ], [ %v2_1000f2ea, %dec_label_pc_1000f2ea ]
  %v1_1000f30b = inttoptr i32 %v2_1000f317 to i8*
  %v2_1000f30b = load i8, i8* %v1_1000f30b, align 1
  %v3_1000f30b = zext i8 %v2_1000f30b to i32
  %v5_1000f30b = and i32 %v4_1000f30b, -256
  %v6_1000f30b = or i32 %v3_1000f30b, %v5_1000f30b
  store i32 %v6_1000f30b, i32* %eax.global-to-local, align 4
  %v7_1000f30f = icmp slt i8 %v2_1000f30b, 97
  br i1 %v7_1000f30f, label %dec_label_pc_1000f319, label %dec_label_pc_1000f311

dec_label_pc_1000f311:                            ; preds = %dec_label_pc_1000f30b
  %v2_1000f311 = add i8 %v2_1000f30b, -122
  %v7_1000f311 = sub i8 121, %v2_1000f30b
  %v8_1000f311 = and i8 %v7_1000f311, %v2_1000f30b
  %v9_1000f311 = icmp slt i8 %v8_1000f311, 0
  %v10_1000f311 = icmp eq i8 %v2_1000f311, 0
  %v11_1000f311 = icmp slt i8 %v2_1000f311, 0
  %v3_1000f313 = icmp eq i1 %v11_1000f311, %v9_1000f311
  %v4_1000f313 = icmp eq i1 %v10_1000f311, false
  %v5_1000f313 = and i1 %v4_1000f313, %v3_1000f313
  br i1 %v5_1000f313, label %dec_label_pc_1000f319, label %dec_label_pc_1000f315

dec_label_pc_1000f315:                            ; preds = %dec_label_pc_1000f311
  %v2_1000f315 = add i8 %v2_1000f30b, -32
  %v12_1000f315 = zext i8 %v2_1000f315 to i32
  %v15_1000f315 = or i32 %v12_1000f315, %v5_1000f30b
  store i32 %v15_1000f315, i32* %eax.global-to-local, align 4
  store i8 %v2_1000f315, i8* %v1_1000f30b, align 1
  %v0_1000f319.pre = load i32, i32* %ecx.global-to-local, align 4
  %v3_1000f31a.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000f319

dec_label_pc_1000f319:                            ; preds = %dec_label_pc_1000f311, %dec_label_pc_1000f30b, %dec_label_pc_1000f315
  %v3_1000f31a = phi i32 [ %v3_1000f31a16, %dec_label_pc_1000f311 ], [ %v3_1000f31a16, %dec_label_pc_1000f30b ], [ %v3_1000f31a.pre, %dec_label_pc_1000f315 ]
  %v0_1000f319 = phi i32 [ %v2_1000f317, %dec_label_pc_1000f311 ], [ %v2_1000f317, %dec_label_pc_1000f30b ], [ %v0_1000f319.pre, %dec_label_pc_1000f315 ]
  %v1_1000f319 = add i32 %v0_1000f319, 1
  store i32 %v1_1000f319, i32* %ecx.global-to-local, align 4
  %v1_1000f31a = inttoptr i32 %v1_1000f319 to i8*
  %v2_1000f31a = load i8, i8* %v1_1000f31a, align 1
  %v4_1000f31a = trunc i32 %v3_1000f31a to i8
  %v15_1000f31a = icmp eq i8 %v2_1000f31a, %v4_1000f31a
  %v1_1000f31c = icmp eq i1 %v15_1000f31a, false
  br i1 %v1_1000f31c, label %dec_label_pc_1000f319.dec_label_pc_1000f30b_crit_edge, label %dec_label_pc_1000f31e

dec_label_pc_1000f319.dec_label_pc_1000f30b_crit_edge: ; preds = %dec_label_pc_1000f319
  %v4_1000f30b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f30b

dec_label_pc_1000f31e:                            ; preds = %dec_label_pc_1000f319, %dec_label_pc_1000f2ea
  store i32 %v2_1000f286, i32* @eax, align 4
  %v4_1000f32c = call i32 @function_100127e0(i8* nonnull %stack_var_-4656, i32 %v2_1000f2ea)
  store i32 %v4_1000f32c, i32* %eax.global-to-local, align 4
  store i32 %v2_1000f2ea, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000f333

dec_label_pc_1000f333:                            ; preds = %dec_label_pc_1000f2e2, %dec_label_pc_1000f31e
  %v0_1000f339 = phi i32 [ %v2_1000f286, %dec_label_pc_1000f2e2 ], [ %v4_1000f32c, %dec_label_pc_1000f31e ]
  %v1_1000f333 = load i32, i32* @ebx, align 4
  %v12_1000f333 = icmp eq i32 %v0_1000f339, %v1_1000f333
  br i1 %v12_1000f333, label %dec_label_pc_1000f375, label %dec_label_pc_1000f337

dec_label_pc_1000f337:                            ; preds = %dec_label_pc_1000f333
  %v3_1000f33a = trunc i32 %v0_1000f339 to i8
  %v4_1000f33a = call i32 @function_10012720(i8 %v3_1000f33a, i32 44)
  store i32 %v4_1000f33a, i32* %eax.global-to-local, align 4
  %v1_1000f340 = load i32, i32* @ebx, align 4
  %v12_1000f340 = icmp eq i32 %v4_1000f33a, %v1_1000f340
  store i32 44, i32* %ecx.global-to-local, align 4
  br i1 %v12_1000f340, label %dec_label_pc_1000f375, label %dec_label_pc_1000f345

dec_label_pc_1000f345:                            ; preds = %dec_label_pc_1000f337
  %v1_1000f345 = add i32 %v4_1000f33a, 1
  store i32 %v1_1000f345, i32* %eax.global-to-local, align 4
  store i32 %v1_1000f345, i32* @ecx, align 4
  %v1_1000f348 = inttoptr i32 %v1_1000f345 to i8*
  %v2_1000f348 = load i8, i8* %v1_1000f348, align 1
  %v4_1000f348 = trunc i32 %v1_1000f340 to i8
  %v15_1000f348 = icmp eq i8 %v2_1000f348, %v4_1000f348
  br i1 %v15_1000f348, label %dec_label_pc_1000f35a, label %dec_label_pc_1000f34c

dec_label_pc_1000f34c:                            ; preds = %dec_label_pc_1000f345, %dec_label_pc_1000f356
  %v0_1000f351 = phi i32 [ %v3_1000f356, %dec_label_pc_1000f356 ], [ %v1_1000f340, %dec_label_pc_1000f345 ]
  %v0_1000f355 = phi i32 [ %v0_1000f356, %dec_label_pc_1000f356 ], [ %v1_1000f345, %dec_label_pc_1000f345 ]
  %v1_1000f34c = inttoptr i32 %v0_1000f355 to i8*
  %v2_1000f34c = load i8, i8* %v1_1000f34c, align 1
  %v11_1000f34c = icmp eq i8 %v2_1000f34c, 59
  %v1_1000f34f = icmp eq i1 %v11_1000f34c, false
  br i1 %v1_1000f34f, label %dec_label_pc_1000f355, label %dec_label_pc_1000f351

dec_label_pc_1000f351:                            ; preds = %dec_label_pc_1000f34c
  %v1_1000f351 = trunc i32 %v0_1000f351 to i8
  store i8 %v1_1000f351, i8* %v1_1000f34c, align 1
  %v0_1000f356.pre = load i32, i32* @ecx, align 4
  %v3_1000f356.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000f356

dec_label_pc_1000f355:                            ; preds = %dec_label_pc_1000f34c
  %v1_1000f355 = add i32 %v0_1000f355, 1
  store i32 %v1_1000f355, i32* @ecx, align 4
  br label %dec_label_pc_1000f356

dec_label_pc_1000f356:                            ; preds = %dec_label_pc_1000f351, %dec_label_pc_1000f355
  %v3_1000f356 = phi i32 [ %v3_1000f356.pre, %dec_label_pc_1000f351 ], [ %v0_1000f351, %dec_label_pc_1000f355 ]
  %v0_1000f356 = phi i32 [ %v0_1000f356.pre, %dec_label_pc_1000f351 ], [ %v1_1000f355, %dec_label_pc_1000f355 ]
  %v1_1000f356 = inttoptr i32 %v0_1000f356 to i8*
  %v2_1000f356 = load i8, i8* %v1_1000f356, align 1
  %v4_1000f356 = trunc i32 %v3_1000f356 to i8
  %v15_1000f356 = icmp eq i8 %v2_1000f356, %v4_1000f356
  %v1_1000f358 = icmp eq i1 %v15_1000f356, false
  br i1 %v1_1000f358, label %dec_label_pc_1000f34c, label %dec_label_pc_1000f35a.loopexit

dec_label_pc_1000f35a.loopexit:                   ; preds = %dec_label_pc_1000f356
  %v0_1000f35d.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f35a

dec_label_pc_1000f35a:                            ; preds = %dec_label_pc_1000f35a.loopexit, %dec_label_pc_1000f345
  %v0_1000f35d = phi i32 [ %v0_1000f35d.pre, %dec_label_pc_1000f35a.loopexit ], [ %v1_1000f345, %dec_label_pc_1000f345 ]
  %v0_1000f35c = phi i32 [ %v3_1000f356, %dec_label_pc_1000f35a.loopexit ], [ %v1_1000f340, %dec_label_pc_1000f345 ]
  %v5_1000f35e = call i32 @function_100124f3(i32 %v0_1000f35d, i32 %v0_1000f35c, i32 10)
  store i32 %v5_1000f35e, i32* %eax.global-to-local, align 4
  %v9_1000f366 = icmp eq i32 %v5_1000f35e, 2
  br i1 %v9_1000f366, label %dec_label_pc_1000f388, label %dec_label_pc_1000f36b

dec_label_pc_1000f36b:                            ; preds = %dec_label_pc_1000f35a
  %v9_1000f36b = icmp eq i32 %v5_1000f35e, 3
  br i1 %v9_1000f36b, label %dec_label_pc_1000f388, label %dec_label_pc_1000f370

dec_label_pc_1000f370:                            ; preds = %dec_label_pc_1000f36b
  %v9_1000f370 = icmp eq i32 %v5_1000f35e, 1
  br i1 %v9_1000f370, label %dec_label_pc_1000f388, label %dec_label_pc_1000f375

dec_label_pc_1000f375:                            ; preds = %dec_label_pc_1000f370, %dec_label_pc_1000f337, %dec_label_pc_1000f333, %dec_label_pc_1000f286
  store i32 %v6_1000f256, i32* %eax.global-to-local, align 4
  %v2_1000f379 = call i32 @function_1000f216(i8* nonnull %stack_var_-8)
  %v3_1000f37e = load i8, i8* %stack_var_-8, align 1
  %v10_1000f37e = icmp ult i8 %v3_1000f37e, 6
  store i32 %v6_1000f256, i32* %ecx.global-to-local, align 4
  %v1_1000f385 = select i1 %v10_1000f37e, i32 4, i32 3
  store i32 %v1_1000f385, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f388

dec_label_pc_1000f388:                            ; preds = %dec_label_pc_1000f370, %dec_label_pc_1000f36b, %dec_label_pc_1000f35a, %dec_label_pc_1000f27e, %dec_label_pc_1000f375
  %v0_1000f38a = phi i32 [ %v5_1000f35e, %dec_label_pc_1000f370 ], [ %v5_1000f35e, %dec_label_pc_1000f36b ], [ %v5_1000f35e, %dec_label_pc_1000f35a ], [ 1, %dec_label_pc_1000f27e ], [ %v1_1000f385, %dec_label_pc_1000f375 ]
  %v2_1000f388 = load i8, i8* %stack_var_-8, align 1
  %v3_1000f388 = sext i8 %v2_1000f388 to i32
  store i32 %v3_1000f388, i32* @ebx, align 4
  ret i32 %v0_1000f38a

; uselistorder directives
  uselistorder i32 %v5_1000f35e, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 %v0_1000f356, { 1, 0 }
  uselistorder i32 %v3_1000f356, { 0, 2, 1 }
  uselistorder i32 %v1_1000f345, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_1000f340, { 2, 1, 3, 0 }
  uselistorder i32 %v4_1000f33a, { 1, 0, 2 }
  uselistorder i32 %v0_1000f339, { 1, 0 }
  uselistorder i32 %v1_1000f319, { 1, 2, 0 }
  uselistorder i32 %v3_1000f31a, { 1, 0 }
  uselistorder i8 %v2_1000f311, { 1, 0 }
  uselistorder i8 %v2_1000f30b, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v2_1000f2ea, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v1_1000f2c3, { 1, 2, 0 }
  uselistorder i32 %v3_1000f2c4, { 1, 0 }
  uselistorder i8 %v2_1000f2bb, { 1, 0 }
  uselistorder i8 %v2_1000f2b5, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v2_1000f286, { 1, 3, 2, 4, 5, 0, 6, 7 }
  uselistorder %_OSVERSIONINFOA** %stack_var_-156, { 1, 0 }
  uselistorder i8* %stack_var_-8, { 4, 3, 0, 1, 2 }
  uselistorder i8* %stack_var_-4656, { 0, 3, 1, 2 }
  uselistorder i8* %stack_var_-416, { 2, 0, 1 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 0, 4, 5, 1, 6, 8, 7, 9, 10, 11, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 (i8*, i32, i32)* @function_1000d700, { 1, 0 }
  uselistorder i32 148, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_1000f388, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_1000f356, { 1, 0 }
  uselistorder label %dec_label_pc_1000f34c, { 1, 0 }
  uselistorder label %dec_label_pc_1000f333, { 1, 0 }
  uselistorder label %dec_label_pc_1000f319, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000f30b, { 1, 0 }
  uselistorder label %dec_label_pc_1000f2c3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000f2b5, { 1, 0 }
}

define i32 @function_1000f38b(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000f38b:
  %v15_1000f38f = icmp eq i32 %arg1, 0
  %v1_1000f398 = zext i1 %v15_1000f38f to i32
  %v5_1000f39c = call i32* @HeapCreate(i32 %v1_1000f398, i32 4096, i32 0)
  %v6_1000f39c = ptrtoint i32* %v5_1000f39c to i32
  %v1_1000f3a2 = icmp eq i32* %v5_1000f39c, null
  store i32 %v6_1000f39c, i32* @global_var_1001bb10.104, align 16
  br i1 %v1_1000f3a2, label %dec_label_pc_1000f3e1, label %dec_label_pc_1000f3ab

dec_label_pc_1000f3ab:                            ; preds = %dec_label_pc_1000f38b
  %v0_1000f3ab = call i32 @function_1000f243()
  %v9_1000f3b0 = icmp eq i32 %v0_1000f3ab, 3
  store i32 %v0_1000f3ab, i32* @global_var_1001bb14.102, align 4
  %v1_1000f3b8 = icmp eq i1 %v9_1000f3b0, false
  br i1 %v1_1000f3b8, label %dec_label_pc_1000f3c7, label %dec_label_pc_1000f3ba

dec_label_pc_1000f3ba:                            ; preds = %dec_label_pc_1000f3ab
  %v1_1000f3bf = call i32 @function_1000f490(i32 1016)
  br label %dec_label_pc_1000f3d1

dec_label_pc_1000f3c7:                            ; preds = %dec_label_pc_1000f3ab
  %v9_1000f3c7 = icmp eq i32 %v0_1000f3ab, 2
  %v1_1000f3ca = icmp eq i1 %v9_1000f3c7, false
  br i1 %v1_1000f3ca, label %dec_label_pc_1000f3e4, label %dec_label_pc_1000f3cc

dec_label_pc_1000f3cc:                            ; preds = %dec_label_pc_1000f3c7
  %v0_1000f3cc = call i32 @function_1000fce1()
  br label %dec_label_pc_1000f3d1

dec_label_pc_1000f3d1:                            ; preds = %dec_label_pc_1000f3ba, %dec_label_pc_1000f3cc
  %v0_1000f3d1 = phi i32 [ %v1_1000f3bf, %dec_label_pc_1000f3ba ], [ %v0_1000f3cc, %dec_label_pc_1000f3cc ]
  %v1_1000f3d1 = icmp eq i32 %v0_1000f3d1, 0
  %v1_1000f3d3 = icmp eq i1 %v1_1000f3d1, false
  br i1 %v1_1000f3d3, label %dec_label_pc_1000f3e4, label %dec_label_pc_1000f3d5

dec_label_pc_1000f3d5:                            ; preds = %dec_label_pc_1000f3d1
  %v0_1000f3d5 = load i32, i32* @global_var_1001bb10.104, align 16
  %v3_1000f3db = inttoptr i32 %v0_1000f3d5 to i32*
  %v4_1000f3db = call i1 @HeapDestroy(i32* %v3_1000f3db)
  br label %dec_label_pc_1000f3e1

dec_label_pc_1000f3e1:                            ; preds = %dec_label_pc_1000f38b, %dec_label_pc_1000f3d5
  ret i32 0

dec_label_pc_1000f3e4:                            ; preds = %dec_label_pc_1000f3d1, %dec_label_pc_1000f3c7
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_1000f3ab, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1000f3e1, { 1, 0 }
  uselistorder label %dec_label_pc_1000f3d1, { 1, 0 }
}

define i32 @function_1000f3e8() local_unnamed_addr {
dec_label_pc_1000f3e8:
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1000f3e8 = load i32, i32* @global_var_1001bb14.102, align 4
  %v9_1000f3ee = icmp eq i32 %v0_1000f3e8, 3
  %v0_1000f3f1 = load i32, i32* @edi, align 4
  store i32 %v0_1000f3f1, i32* %stack_var_-8, align 4
  %v1_1000f3f2 = icmp eq i1 %v9_1000f3ee, false
  br i1 %v1_1000f3f2, label %dec_label_pc_1000f45a, label %dec_label_pc_1000f3f4

dec_label_pc_1000f3f4:                            ; preds = %dec_label_pc_1000f3e8
  %v0_1000f3f4 = load i32, i32* @ebx, align 4
  store i32 %v0_1000f3f4, i32* %stack_var_-12, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_1000f3f7 = load i32, i32* @global_var_1001bb04.149, align 4
  %v0_1000f3fd = load i32, i32* @ebp, align 4
  store i32 %v0_1000f3fd, i32* %stack_var_-16, align 4
  %v7_1000f404 = icmp sgt i32 %v0_1000f3f7, 0
  br i1 %v7_1000f404, label %dec_label_pc_1000f406, label %dec_label_pc_1000f3f4.dec_label_pc_1000f446_crit_edge

dec_label_pc_1000f3f4.dec_label_pc_1000f446_crit_edge: ; preds = %dec_label_pc_1000f3f4
  br label %dec_label_pc_1000f446

dec_label_pc_1000f406:                            ; preds = %dec_label_pc_1000f3f4
  %v0_1000f406 = load i32, i32* @global_var_1001bb08.150, align 8
  %v0_1000f40b = load i32, i32* inttoptr (i32 268525632 to i32*), align 64
  store i32 %v0_1000f40b, i32* %edi.global-to-local, align 4
  %v1_1000f411 = add i32 %v0_1000f406, 12
  store i32 %v1_1000f411, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000f414

dec_label_pc_1000f414:                            ; preds = %dec_label_pc_1000f414, %dec_label_pc_1000f406
  %v0_1000f41e = phi i32 [ %v1_1000f43a, %dec_label_pc_1000f414 ], [ %v1_1000f411, %dec_label_pc_1000f406 ]
  %v1_1000f41e = inttoptr i32 %v0_1000f41e to i32*
  %v2_1000f41e = load i32, i32* %v1_1000f41e, align 4
  %v5_1000f420 = inttoptr i32 %v2_1000f41e to i32*
  %v6_1000f420 = call i1 @VirtualFree(i32* %v5_1000f420, i32 1048576, i32 16384)
  %v0_1000f429 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f429 = inttoptr i32 %v0_1000f429 to i32*
  %v2_1000f429 = load i32, i32* %v1_1000f429, align 4
  %v5_1000f42b = inttoptr i32 %v2_1000f429 to i32*
  %v6_1000f42b = call i1 @VirtualFree(i32* %v5_1000f42b, i32 0, i32 32768)
  %v1_1000f42d = add i32 %v0_1000f429, 4
  %v2_1000f42d = inttoptr i32 %v1_1000f42d to i32*
  %v3_1000f42d = load i32, i32* %v2_1000f42d, align 4
  %v0_1000f432 = load i32, i32* @global_var_1001bb10.104, align 16
  %v5_1000f438 = inttoptr i32 %v0_1000f432 to i32*
  %v6_1000f438 = inttoptr i32 %v3_1000f42d to i32*
  %v7_1000f438 = call i1 @HeapFree(i32* %v5_1000f438, i32 0, i32* %v6_1000f438)
  %v0_1000f43a = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f43a = add i32 %v0_1000f43a, 20
  store i32 %v1_1000f43a, i32* %esi.global-to-local, align 4
  %v0_1000f43d = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000f43d = add i32 %v0_1000f43d, 1
  store i32 %v1_1000f43d, i32* %ebx.global-to-local, align 4
  %v1_1000f43e = load i32, i32* @global_var_1001bb04.149, align 4
  %v5_1000f444 = icmp slt i32 %v1_1000f43d, %v1_1000f43e
  br i1 %v5_1000f444, label %dec_label_pc_1000f414, label %dec_label_pc_1000f446

dec_label_pc_1000f446:                            ; preds = %dec_label_pc_1000f414, %dec_label_pc_1000f3f4.dec_label_pc_1000f446_crit_edge
  %v0_1000f446 = load i32, i32* @global_var_1001bb08.150, align 8
  %v0_1000f44e = load i32, i32* @global_var_1001bb10.104, align 16
  %v5_1000f454 = inttoptr i32 %v0_1000f44e to i32*
  %v6_1000f454 = inttoptr i32 %v0_1000f446 to i32*
  %v7_1000f454 = call i1 @HeapFree(i32* %v5_1000f454, i32 0, i32* %v6_1000f454)
  %v2_1000f456 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000f456, i32* @ebp, align 4
  %v2_1000f457 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000f457, i32* @ebx, align 4
  br label %dec_label_pc_1000f481

dec_label_pc_1000f45a:                            ; preds = %dec_label_pc_1000f3e8
  %v9_1000f45a = icmp eq i32 %v0_1000f3e8, 2
  %v1_1000f45d = icmp eq i1 %v9_1000f45a, false
  br i1 %v1_1000f45d, label %dec_label_pc_1000f481, label %dec_label_pc_1000f45f

dec_label_pc_1000f45f:                            ; preds = %dec_label_pc_1000f45a
  store i32 ptrtoint (i32* @global_var_10018710 to i32), i32* %edi.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10018710 to i32), i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000f466

dec_label_pc_1000f466:                            ; preds = %dec_label_pc_1000f47b, %dec_label_pc_1000f45f
  %v1_1000f47d4 = phi i32 [ %v1_1000f47d, %dec_label_pc_1000f47b ], [ ptrtoint (i32* @global_var_10018710 to i32), %dec_label_pc_1000f45f ]
  %v0_1000f466 = phi i32 [ %v2_1000f47b, %dec_label_pc_1000f47b ], [ ptrtoint (i32* @global_var_10018710 to i32), %dec_label_pc_1000f45f ]
  %v1_1000f466 = add i32 %v0_1000f466, 16
  %v2_1000f466 = inttoptr i32 %v1_1000f466 to i32*
  %v3_1000f466 = load i32, i32* %v2_1000f466, align 4
  %v1_1000f469 = icmp eq i32 %v3_1000f466, 0
  br i1 %v1_1000f469, label %dec_label_pc_1000f47b, label %dec_label_pc_1000f46d

dec_label_pc_1000f46d:                            ; preds = %dec_label_pc_1000f466
  store i32 32768, i32* %stack_var_-12, align 4
  store i32 0, i32* %stack_var_-16, align 4
  %v5_1000f475 = inttoptr i32 %v3_1000f466 to i32*
  %v6_1000f475 = call i1 @VirtualFree(i32* %v5_1000f475, i32 0, i32 32768)
  %v0_1000f47b.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f47d.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000f47b

dec_label_pc_1000f47b:                            ; preds = %dec_label_pc_1000f466, %dec_label_pc_1000f46d
  %v1_1000f47d = phi i32 [ %v1_1000f47d4, %dec_label_pc_1000f466 ], [ %v1_1000f47d.pre, %dec_label_pc_1000f46d ]
  %v0_1000f47b = phi i32 [ %v0_1000f466, %dec_label_pc_1000f466 ], [ %v0_1000f47b.pre, %dec_label_pc_1000f46d ]
  %v1_1000f47b = inttoptr i32 %v0_1000f47b to i32*
  %v2_1000f47b = load i32, i32* %v1_1000f47b, align 4
  store i32 %v2_1000f47b, i32* %esi.global-to-local, align 4
  %v12_1000f47d = icmp eq i32 %v2_1000f47b, %v1_1000f47d
  %v1_1000f47f = icmp eq i1 %v12_1000f47d, false
  br i1 %v1_1000f47f, label %dec_label_pc_1000f466, label %dec_label_pc_1000f481

dec_label_pc_1000f481:                            ; preds = %dec_label_pc_1000f47b, %dec_label_pc_1000f45a, %dec_label_pc_1000f446
  %v0_1000f481 = load i32, i32* @global_var_1001bb10.104, align 16
  store i32 %v0_1000f481, i32* %stack_var_-12, align 4
  %v3_1000f487 = inttoptr i32 %v0_1000f481 to i32*
  %v4_1000f487 = call i1 @HeapDestroy(i32* %v3_1000f487)
  %v5_1000f487 = sext i1 %v4_1000f487 to i32
  %v2_1000f48d = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000f48d, i32* @edi, align 4
  ret i32 %v5_1000f487

; uselistorder directives
  uselistorder i32 %v2_1000f47b, { 0, 2, 1 }
  uselistorder i32 %v1_1000f43a, { 1, 0 }
  uselistorder i1 (i32*)* @HeapDestroy, { 1, 0 }
  uselistorder label %dec_label_pc_1000f47b, { 1, 0 }
}

define i32 @function_1000f490(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000f490:
  %v0_1000f497 = load i32, i32* @global_var_1001bb10.104, align 16
  %v5_1000f49d = inttoptr i32 %v0_1000f497 to i32*
  %v6_1000f49d = call i32* @HeapAlloc(i32* %v5_1000f49d, i32 0, i32 320)
  %v7_1000f49d = ptrtoint i32* %v6_1000f49d to i32
  %v1_1000f4a3 = icmp eq i32* %v6_1000f49d, null
  store i32 %v7_1000f49d, i32* @global_var_1001bb08.150, align 8
  %v1_1000f4aa = icmp eq i1 %v1_1000f4a3, false
  br i1 %v1_1000f4aa, label %dec_label_pc_1000f4ad, label %dec_label_pc_1000f4ac

dec_label_pc_1000f4ac:                            ; preds = %dec_label_pc_1000f490
  ret i32 %v7_1000f49d

dec_label_pc_1000f4ad:                            ; preds = %dec_label_pc_1000f490
  store i32 0, i32* @global_var_1001bb00.151, align 256
  store i32 0, i32* @global_var_1001bb04.149, align 4
  store i32 %v7_1000f49d, i32* @global_var_1001bafc.152, align 4
  store i32 %arg1, i32* @global_var_1001bb0c.107, align 4
  store i32 16, i32* @global_var_1001baf4.153, align 4
  ret i32 1

; uselistorder directives
  uselistorder i32 %v7_1000f49d, { 0, 2, 1 }
}

define i32 @function_1000f4d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000f4d8:
  %v0_1000f4d8 = load i32, i32* @global_var_1001bb04.149, align 4
  %v0_1000f4e0 = load i32, i32* @global_var_1001bb08.150, align 8
  %v2_1000f4e5 = mul i32 %v0_1000f4d8, 20
  %v3_1000f4e5 = add i32 %v0_1000f4e0, %v2_1000f4e5
  %v7_1000f4e84 = icmp ult i32 %v0_1000f4e0, %v3_1000f4e5
  %v1_1000f4ea11 = icmp eq i1 %v7_1000f4e84, false
  br i1 %v1_1000f4ea11, label %dec_label_pc_1000f500, label %dec_label_pc_1000f4ec

dec_label_pc_1000f4ec:                            ; preds = %dec_label_pc_1000f4d8, %dec_label_pc_1000f4fb
  %v0_1000f4fb = phi i32 [ %v1_1000f4fb, %dec_label_pc_1000f4fb ], [ %v0_1000f4e0, %dec_label_pc_1000f4d8 ]
  %v2_1000f4f0 = add i32 %v0_1000f4fb, 12
  %v3_1000f4f0 = inttoptr i32 %v2_1000f4f0 to i32*
  %v4_1000f4f0 = load i32, i32* %v3_1000f4f0, align 4
  %v5_1000f4f0 = sub i32 %arg1, %v4_1000f4f0
  %v2_1000f4f3 = icmp ult i32 %v5_1000f4f0, 1048576
  br i1 %v2_1000f4f3, label %dec_label_pc_1000f502.loopexit, label %dec_label_pc_1000f4fb

dec_label_pc_1000f4fb:                            ; preds = %dec_label_pc_1000f4ec
  %v1_1000f4fb = add i32 %v0_1000f4fb, 20
  %v7_1000f4e8 = icmp ult i32 %v1_1000f4fb, %v3_1000f4e5
  %v1_1000f4ea = icmp eq i1 %v7_1000f4e8, false
  br i1 %v1_1000f4ea, label %dec_label_pc_1000f4e8.dec_label_pc_1000f500_crit_edge, label %dec_label_pc_1000f4ec

dec_label_pc_1000f4e8.dec_label_pc_1000f500_crit_edge: ; preds = %dec_label_pc_1000f4fb
  br label %dec_label_pc_1000f500

dec_label_pc_1000f500:                            ; preds = %dec_label_pc_1000f4e8.dec_label_pc_1000f500_crit_edge, %dec_label_pc_1000f4d8
  br label %dec_label_pc_1000f502

dec_label_pc_1000f502.loopexit:                   ; preds = %dec_label_pc_1000f4ec
  br label %dec_label_pc_1000f502

dec_label_pc_1000f502:                            ; preds = %dec_label_pc_1000f502.loopexit, %dec_label_pc_1000f500
  %v0_1000f502 = phi i32 [ %v0_1000f4fb, %dec_label_pc_1000f502.loopexit ], [ 0, %dec_label_pc_1000f500 ]
  ret i32 %v0_1000f502

; uselistorder directives
  uselistorder i32 %v1_1000f4fb, { 1, 0 }
  uselistorder label %dec_label_pc_1000f4ec, { 1, 0 }
}

define i32 @function_1000f503(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000f503:
  %cf.global-to-local = alloca i1, align 1
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %of.global-to-local = alloca i1, align 1
  %zf.global-to-local = alloca i1, align 1
  %tmp35 = ptrtoint i32* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  store i32 %tmp35, i32* %ecx.global-to-local, align 4
  %v0_1000f50d = load i32, i32* @esi, align 4
  store i32 %v0_1000f50d, i32* %stack_var_-28, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v1_1000f511 = add i32 %tmp35, 16
  %v2_1000f511 = inttoptr i32 %v1_1000f511 to i32*
  %v3_1000f511 = load i32, i32* %v2_1000f511, align 4
  store i32 %v3_1000f511, i32* %eax.global-to-local, align 4
  %v1_1000f517 = add i32 %arg2, -4
  store i32 %v1_1000f517, i32* %esi.global-to-local, align 4
  %v2_1000f51a = add i32 %tmp35, 12
  %v3_1000f51a = inttoptr i32 %v2_1000f51a to i32*
  %v4_1000f51a = load i32, i32* %v3_1000f51a, align 4
  %v5_1000f51a = sub i32 %arg2, %v4_1000f51a
  %v2_1000f51d = udiv i32 %v5_1000f51a, 32768
  store i32 %v2_1000f51d, i32* @edi, align 4
  %v3_1000f522 = mul nuw nsw i32 %v2_1000f51d, 516
  %v2_1000f528 = add i32 %v3_1000f511, 324
  %v3_1000f528 = add i32 %v2_1000f528, %v3_1000f522
  store i32 %v3_1000f528, i32* %ecx.global-to-local, align 4
  %v1_1000f532 = inttoptr i32 %v1_1000f517 to i32*
  %v2_1000f532 = load i32, i32* %v1_1000f532, align 4
  %v1_1000f534 = add i32 %v2_1000f532, -1
  store i32 %v1_1000f534, i32* %ecx.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v2_1000f535 = and i32 %v1_1000f534, 1
  %v3_1000f535 = icmp eq i32 %v2_1000f535, 0
  store i1 %v3_1000f535, i1* %zf.global-to-local, align 1
  %v1_1000f53b = icmp eq i1 %v3_1000f535, false
  br i1 %v1_1000f53b, label %dec_label_pc_1000f827, label %dec_label_pc_1000f541

dec_label_pc_1000f541:                            ; preds = %dec_label_pc_1000f503
  %v2_1000f541 = add i32 %v1_1000f534, %v1_1000f517
  %v3_1000f541 = inttoptr i32 %v2_1000f541 to i32*
  %v4_1000f541 = load i32, i32* %v3_1000f541, align 4
  store i32 %v4_1000f541, i32* %edx.global-to-local, align 4
  store i32 %v2_1000f541, i32* %ebx.global-to-local, align 4
  %v1_1000f54a = add i32 %arg2, -8
  %v2_1000f54a = inttoptr i32 %v1_1000f54a to i32*
  %v3_1000f54a = load i32, i32* %v2_1000f54a, align 4
  %sext = mul i32 %v4_1000f541, 16777216
  %v4_1000f550 = sdiv i32 %sext, 16777216
  store i32 %v4_1000f550, i32* %edx.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v2_1000f553 = and i32 %v4_1000f541, 1
  %v3_1000f553 = icmp eq i32 %v2_1000f553, 0
  store i1 %v3_1000f553, i1* %zf.global-to-local, align 1
  %v1_1000f559 = icmp eq i1 %v3_1000f553, false
  br i1 %v1_1000f559, label %dec_label_pc_1000f5d9, label %dec_label_pc_1000f55b

dec_label_pc_1000f55b:                            ; preds = %dec_label_pc_1000f541
  %v2_1000f55b = sdiv i32 %sext, 268435456
  %v1_1000f55e = add nsw i32 %v2_1000f55b, -1
  store i32 %v1_1000f55e, i32* %edx.global-to-local, align 4
  %v5_1000f55f = icmp ult i32 %v1_1000f55e, 63
  %v6_1000f55f = sub nsw i32 63, %v2_1000f55b
  %v7_1000f55f = and i32 %v6_1000f55f, %v1_1000f55e
  %v8_1000f55f = icmp slt i32 %v7_1000f55f, 0
  store i1 %v5_1000f55f, i1* %cf.global-to-local, align 1
  store i1 %v8_1000f55f, i1* %of.global-to-local, align 1
  store i1 false, i1* %zf.global-to-local, align 1
  %tmp45 = icmp ult i32 %v1_1000f55e, 64
  br i1 %tmp45, label %dec_label_pc_1000f567, label %dec_label_pc_1000f564

dec_label_pc_1000f564:                            ; preds = %dec_label_pc_1000f55b
  store i32 63, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000f567

dec_label_pc_1000f567:                            ; preds = %dec_label_pc_1000f55b, %dec_label_pc_1000f564
  %v0_1000f59c = phi i32 [ %v1_1000f55e, %dec_label_pc_1000f55b ], [ 63, %dec_label_pc_1000f564 ]
  %v1_1000f567 = add i32 %v1_1000f534, %arg2
  %v2_1000f567 = inttoptr i32 %v1_1000f567 to i32*
  %v3_1000f567 = load i32, i32* %v2_1000f567, align 4
  store i32 %v3_1000f567, i32* %ecx.global-to-local, align 4
  %v2_1000f56a = add i32 %v2_1000f541, 8
  %v3_1000f56a = inttoptr i32 %v2_1000f56a to i32*
  %v4_1000f56a = load i32, i32* %v3_1000f56a, align 4
  %v5_1000f56a = sub i32 %v3_1000f567, %v4_1000f56a
  %v10_1000f56a = icmp ult i32 %v3_1000f567, %v4_1000f56a
  %v11_1000f56a = xor i32 %v4_1000f56a, %v3_1000f567
  %v12_1000f56a = xor i32 %v5_1000f56a, %v3_1000f567
  %v13_1000f56a = and i32 %v12_1000f56a, %v11_1000f56a
  %v14_1000f56a = icmp slt i32 %v13_1000f56a, 0
  store i1 %v10_1000f56a, i1* %cf.global-to-local, align 1
  store i1 %v14_1000f56a, i1* %of.global-to-local, align 1
  %v15_1000f56a = icmp eq i32 %v5_1000f56a, 0
  store i1 %v15_1000f56a, i1* %zf.global-to-local, align 1
  %v1_1000f56d = icmp eq i1 %v15_1000f56a, false
  br i1 %v1_1000f56d, label %dec_label_pc_1000f5bb, label %dec_label_pc_1000f56f

dec_label_pc_1000f56f:                            ; preds = %dec_label_pc_1000f567
  %v1_1000f56f = add nsw i32 %v0_1000f59c, -32
  %v2_1000f56f = icmp ult i32 %v0_1000f59c, 32
  %v3_1000f56f = sub nsw i32 31, %v0_1000f59c
  %v4_1000f56f = and i32 %v3_1000f56f, %v0_1000f59c
  %v5_1000f56f = icmp slt i32 %v4_1000f56f, 0
  store i1 %v2_1000f56f, i1* %cf.global-to-local, align 1
  store i1 %v5_1000f56f, i1* %of.global-to-local, align 1
  %v6_1000f56f = icmp eq i32 %v1_1000f56f, 0
  store i1 %v6_1000f56f, i1* %zf.global-to-local, align 1
  %v1_1000f572 = icmp eq i1 %v2_1000f56f, false
  br i1 %v1_1000f572, label %dec_label_pc_1000f592, label %dec_label_pc_1000f574

dec_label_pc_1000f574:                            ; preds = %dec_label_pc_1000f56f
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  store i32 %v0_1000f59c, i32* %ecx.global-to-local, align 4
  %v2_1000f57b = and i32 %v0_1000f59c, 31
  %v4_1000f57b = icmp eq i32 %v2_1000f57b, 0
  br i1 %v4_1000f57b, label %bb46, label %bb

bb:                                               ; preds = %dec_label_pc_1000f574
  %v5_1000f57b = lshr i32 -2147483648, %v2_1000f57b
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f57b, i32* %ebx.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v16_1000f57b = icmp eq i32 %v2_1000f57b, 1
  %v18_1000f57b = or i1 %v16_1000f57b, %v5_1000f56f
  store i1 %v18_1000f57b, i1* %of.global-to-local, align 1
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_1000f574, %bb
  %v0_1000f581 = phi i32 [ -2147483648, %dec_label_pc_1000f574 ], [ %v5_1000f57b, %bb ]
  %v2_1000f57d = add i32 %v3_1000f511, 4
  %v3_1000f57d = add i32 %v2_1000f57d, %v0_1000f59c
  store i32 %v3_1000f57d, i32* %ecx.global-to-local, align 4
  %v1_1000f581 = sub i32 -1, %v0_1000f581
  store i32 %v1_1000f581, i32* %ebx.global-to-local, align 4
  %v2_1000f583 = mul nuw nsw i32 %v2_1000f51d, 4
  %v3_1000f583 = add i32 %v3_1000f511, 68
  %v4_1000f583 = add i32 %v3_1000f583, %v2_1000f583
  %v5_1000f583 = inttoptr i32 %v4_1000f583 to i32*
  %v6_1000f583 = load i32, i32* %v5_1000f583, align 4
  %v8_1000f583 = and i32 %v6_1000f583, %v1_1000f581
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v9_1000f583 = icmp eq i32 %v8_1000f583, 0
  store i1 %v9_1000f583, i1* %zf.global-to-local, align 1
  store i32 %v8_1000f583, i32* %v5_1000f583, align 4
  %v0_1000f587 = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000f587 = inttoptr i32 %v0_1000f587 to i8*
  %v2_1000f587 = load i8, i8* %v1_1000f587, align 1
  %v3_1000f587 = add i8 %v2_1000f587, -1
  %v7_1000f587 = sub i8 0, %v2_1000f587
  %v8_1000f587 = and i8 %v2_1000f587, %v7_1000f587
  %v9_1000f587 = icmp slt i8 %v8_1000f587, 0
  store i1 %v9_1000f587, i1* %of.global-to-local, align 1
  %v10_1000f587 = icmp eq i8 %v3_1000f587, 0
  store i1 %v10_1000f587, i1* %zf.global-to-local, align 1
  store i8 %v3_1000f587, i8* %v1_1000f587, align 1
  %v0_1000f589 = load i1, i1* %zf.global-to-local, align 1
  %v1_1000f589 = icmp eq i1 %v0_1000f589, false
  br i1 %v1_1000f589, label %dec_label_pc_1000f5b3, label %dec_label_pc_1000f58b

dec_label_pc_1000f58b:                            ; preds = %bb46
  store i32 %tmp35, i32* %ecx.global-to-local, align 4
  %v2_1000f58e = load i32, i32* %arg1, align 4
  %v3_1000f58e = load i32, i32* %ebx.global-to-local, align 4
  %v4_1000f58e = and i32 %v3_1000f58e, %v2_1000f58e
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v5_1000f58e = icmp eq i32 %v4_1000f58e, 0
  store i1 %v5_1000f58e, i1* %zf.global-to-local, align 1
  store i32 %v4_1000f58e, i32* %arg1, align 4
  br label %dec_label_pc_1000f5b3

dec_label_pc_1000f592:                            ; preds = %dec_label_pc_1000f56f
  store i32 %v1_1000f56f, i32* %ecx.global-to-local, align 4
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  %v2_1000f59a = and i32 %v1_1000f56f, 31
  %v4_1000f59a = icmp eq i32 %v2_1000f59a, 0
  br i1 %v4_1000f59a, label %bb48, label %bb47

bb47:                                             ; preds = %dec_label_pc_1000f592
  %v5_1000f59a = lshr i32 -2147483648, %v2_1000f59a
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f59a, i32* %ebx.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v16_1000f59a = icmp eq i32 %v2_1000f59a, 1
  %v18_1000f59a = or i1 %v16_1000f59a, %v5_1000f56f
  store i1 %v18_1000f59a, i1* %of.global-to-local, align 1
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_1000f592, %bb47
  %v0_1000f5a0 = phi i32 [ -2147483648, %dec_label_pc_1000f592 ], [ %v5_1000f59a, %bb47 ]
  %v2_1000f59c = add i32 %v3_1000f511, 4
  %v3_1000f59c = add i32 %v2_1000f59c, %v0_1000f59c
  store i32 %v3_1000f59c, i32* %ecx.global-to-local, align 4
  %v1_1000f5a0 = sub i32 -1, %v0_1000f5a0
  store i32 %v1_1000f5a0, i32* %ebx.global-to-local, align 4
  %v2_1000f5a2 = mul nuw nsw i32 %v2_1000f51d, 4
  %v3_1000f5a2 = add i32 %v3_1000f511, 196
  %v4_1000f5a2 = add i32 %v3_1000f5a2, %v2_1000f5a2
  %v5_1000f5a2 = inttoptr i32 %v4_1000f5a2 to i32*
  %v6_1000f5a2 = load i32, i32* %v5_1000f5a2, align 4
  %v8_1000f5a2 = and i32 %v6_1000f5a2, %v1_1000f5a0
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v9_1000f5a2 = icmp eq i32 %v8_1000f5a2, 0
  store i1 %v9_1000f5a2, i1* %zf.global-to-local, align 1
  store i32 %v8_1000f5a2, i32* %v5_1000f5a2, align 4
  %v0_1000f5a9 = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000f5a9 = inttoptr i32 %v0_1000f5a9 to i8*
  %v2_1000f5a9 = load i8, i8* %v1_1000f5a9, align 1
  %v3_1000f5a9 = add i8 %v2_1000f5a9, -1
  %v7_1000f5a9 = sub i8 0, %v2_1000f5a9
  %v8_1000f5a9 = and i8 %v2_1000f5a9, %v7_1000f5a9
  %v9_1000f5a9 = icmp slt i8 %v8_1000f5a9, 0
  store i1 %v9_1000f5a9, i1* %of.global-to-local, align 1
  %v10_1000f5a9 = icmp eq i8 %v3_1000f5a9, 0
  store i1 %v10_1000f5a9, i1* %zf.global-to-local, align 1
  store i8 %v3_1000f5a9, i8* %v1_1000f5a9, align 1
  %v0_1000f5ab = load i1, i1* %zf.global-to-local, align 1
  %v1_1000f5ab = icmp eq i1 %v0_1000f5ab, false
  br i1 %v1_1000f5ab, label %dec_label_pc_1000f5b3, label %dec_label_pc_1000f5ad

dec_label_pc_1000f5ad:                            ; preds = %bb48
  store i32 %tmp35, i32* %ecx.global-to-local, align 4
  %v1_1000f5b0 = add i32 %tmp35, 4
  %v2_1000f5b0 = inttoptr i32 %v1_1000f5b0 to i32*
  %v3_1000f5b0 = load i32, i32* %v2_1000f5b0, align 4
  %v4_1000f5b0 = load i32, i32* %ebx.global-to-local, align 4
  %v5_1000f5b0 = and i32 %v4_1000f5b0, %v3_1000f5b0
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v6_1000f5b0 = icmp eq i32 %v5_1000f5b0, 0
  store i1 %v6_1000f5b0, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f5b0, i32* %v2_1000f5b0, align 4
  br label %dec_label_pc_1000f5b3

dec_label_pc_1000f5b3:                            ; preds = %bb48, %bb46, %dec_label_pc_1000f58b, %dec_label_pc_1000f5ad
  store i32 %v1_1000f534, i32* %ecx.global-to-local, align 4
  store i32 %v2_1000f541, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000f5be

dec_label_pc_1000f5bb:                            ; preds = %dec_label_pc_1000f567
  store i32 %v1_1000f534, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000f5be

dec_label_pc_1000f5be:                            ; preds = %dec_label_pc_1000f5b3, %dec_label_pc_1000f5bb
  %v3_1000f5be = load i32, i32* %v3_1000f56a, align 4
  store i32 %v3_1000f5be, i32* %edx.global-to-local, align 4
  %v3_1000f5c1 = load i32, i32* %v2_1000f567, align 4
  store i32 %v3_1000f5c1, i32* %ebx.global-to-local, align 4
  %v6_1000f5c4 = add i32 %v4_1000f550, %v1_1000f534
  %v11_1000f5c4 = icmp ult i32 %v6_1000f5c4, %v1_1000f534
  %v12_1000f5c4 = xor i32 %v6_1000f5c4, %v1_1000f534
  %v13_1000f5c4 = xor i32 %v6_1000f5c4, %v4_1000f550
  %v14_1000f5c4 = and i32 %v12_1000f5c4, %v13_1000f5c4
  %v15_1000f5c4 = icmp slt i32 %v14_1000f5c4, 0
  store i1 %v11_1000f5c4, i1* %cf.global-to-local, align 1
  store i1 %v15_1000f5c4, i1* %of.global-to-local, align 1
  %v16_1000f5c4 = icmp eq i32 %v6_1000f5c4, 0
  store i1 %v16_1000f5c4, i1* %zf.global-to-local, align 1
  store i32 %v6_1000f5c4, i32* %ecx.global-to-local, align 4
  %v2_1000f5c7 = add i32 %v3_1000f5be, 4
  %v3_1000f5c7 = inttoptr i32 %v2_1000f5c7 to i32*
  store i32 %v3_1000f5c1, i32* %v3_1000f5c7, align 4
  store i32 %v2_1000f541, i32* %edx.global-to-local, align 4
  %v0_1000f5cd = load i32, i32* %ecx.global-to-local, align 4
  %v3_1000f5d0 = load i32, i32* %v2_1000f567, align 4
  store i32 %v3_1000f5d0, i32* %ebx.global-to-local, align 4
  %v3_1000f5d3 = load i32, i32* %v3_1000f56a, align 4
  store i32 %v3_1000f5d3, i32* %edx.global-to-local, align 4
  %v2_1000f5d6 = add i32 %v3_1000f5d0, 8
  %v3_1000f5d6 = inttoptr i32 %v2_1000f5d6 to i32*
  store i32 %v3_1000f5d3, i32* %v3_1000f5d6, align 4
  %v0_1000f5d9.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000f5d9

dec_label_pc_1000f5d9:                            ; preds = %dec_label_pc_1000f541, %dec_label_pc_1000f5be
  %stack_var_-8.0 = phi i32 [ %v1_1000f534, %dec_label_pc_1000f541 ], [ %v0_1000f5cd, %dec_label_pc_1000f5be ]
  %v0_1000f60c = phi i32 [ %v1_1000f534, %dec_label_pc_1000f541 ], [ %v0_1000f5d9.pre, %dec_label_pc_1000f5be ]
  %v2_1000f5db = sdiv i32 %v0_1000f60c, 16
  %v1_1000f5de = add nsw i32 %v2_1000f5db, -1
  store i32 %v1_1000f5de, i32* %edx.global-to-local, align 4
  %v5_1000f5df = icmp ult i32 %v1_1000f5de, 63
  %v6_1000f5df = sub nsw i32 63, %v2_1000f5db
  %v7_1000f5df = and i32 %v6_1000f5df, %v1_1000f5de
  %v8_1000f5df = icmp slt i32 %v7_1000f5df, 0
  store i1 %v5_1000f5df, i1* %cf.global-to-local, align 1
  store i1 %v8_1000f5df, i1* %of.global-to-local, align 1
  %tmp = and i32 %v0_1000f60c, -16
  %tmp70 = icmp eq i32 %tmp, 1024
  store i1 %tmp70, i1* %zf.global-to-local, align 1
  %tmp49 = icmp ult i32 %v1_1000f5de, 64
  br i1 %tmp49, label %dec_label_pc_1000f5e7, label %dec_label_pc_1000f5e4

dec_label_pc_1000f5e4:                            ; preds = %dec_label_pc_1000f5d9
  store i32 63, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000f5e7

dec_label_pc_1000f5e7:                            ; preds = %dec_label_pc_1000f5d9, %dec_label_pc_1000f5e4
  %v1_1000f69e18 = phi i32 [ %v1_1000f5de, %dec_label_pc_1000f5d9 ], [ 63, %dec_label_pc_1000f5e4 ]
  %v1_1000f5ea = and i32 %v3_1000f54a, 1
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v2_1000f5ea = icmp eq i32 %v1_1000f5ea, 0
  store i1 %v2_1000f5ea, i1* %zf.global-to-local, align 1
  store i32 %v1_1000f5ea, i32* %ebx.global-to-local, align 4
  %v1_1000f5f0 = icmp eq i1 %v2_1000f5ea, false
  br i1 %v1_1000f5f0, label %dec_label_pc_1000f68d.thread, label %dec_label_pc_1000f5f6

dec_label_pc_1000f5f6:                            ; preds = %dec_label_pc_1000f5e7
  %v0_1000f5f6 = load i32, i32* %esi.global-to-local, align 4
  %v5_1000f5f6 = sub i32 %v0_1000f5f6, %v3_1000f54a
  %v2_1000f5fc = sdiv i32 %v3_1000f54a, 16
  %v1_1000f604 = add nsw i32 %v2_1000f5fc, -1
  store i32 %v1_1000f604, i32* %ebx.global-to-local, align 4
  store i32 63, i32* %esi.global-to-local, align 4
  %v7_1000f606 = icmp ult i32 %v1_1000f604, 63
  %tmp50 = sub nsw i32 63, %v2_1000f5fc
  %v10_1000f606 = and i32 %v1_1000f604, %tmp50
  %v11_1000f606 = icmp slt i32 %v10_1000f606, 0
  store i1 %v7_1000f606, i1* %cf.global-to-local, align 1
  store i1 %v11_1000f606, i1* %of.global-to-local, align 1
  %tmp71 = and i32 %v3_1000f54a, -16
  %tmp72 = icmp eq i32 %tmp71, 1024
  store i1 %tmp72, i1* %zf.global-to-local, align 1
  %tmp51 = icmp ult i32 %v1_1000f604, 64
  br i1 %tmp51, label %dec_label_pc_1000f60c, label %dec_label_pc_1000f60a

dec_label_pc_1000f60a:                            ; preds = %dec_label_pc_1000f5f6
  store i32 63, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000f60c

dec_label_pc_1000f60c:                            ; preds = %dec_label_pc_1000f5f6, %dec_label_pc_1000f60a
  %v0_1000f64e = phi i32 [ %v1_1000f604, %dec_label_pc_1000f5f6 ], [ 63, %dec_label_pc_1000f60a ]
  %v5_1000f60c = add i32 %v0_1000f60c, %v3_1000f54a
  store i32 %v5_1000f60c, i32* %ecx.global-to-local, align 4
  %v2_1000f614 = sdiv i32 %v5_1000f60c, 16
  %v1_1000f617 = add nsw i32 %v2_1000f614, -1
  store i32 %v1_1000f617, i32* %edx.global-to-local, align 4
  %v7_1000f618 = icmp ult i32 %v1_1000f617, 63
  %tmp52 = sub nsw i32 63, %v2_1000f614
  %v10_1000f618 = and i32 %v1_1000f617, %tmp52
  %v11_1000f618 = icmp slt i32 %v10_1000f618, 0
  store i1 %v7_1000f618, i1* %cf.global-to-local, align 1
  store i1 %v11_1000f618, i1* %of.global-to-local, align 1
  %tmp73 = and i32 %v5_1000f60c, -16
  %tmp74 = icmp eq i32 %tmp73, 1024
  store i1 %tmp74, i1* %zf.global-to-local, align 1
  %tmp53 = icmp ult i32 %v1_1000f617, 64
  br i1 %tmp53, label %dec_label_pc_1000f61e, label %dec_label_pc_1000f61c

dec_label_pc_1000f61c:                            ; preds = %dec_label_pc_1000f60c
  store i32 63, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000f61e

dec_label_pc_1000f61e:                            ; preds = %dec_label_pc_1000f60c, %dec_label_pc_1000f61c
  %v1_1000f61e = phi i32 [ %v1_1000f617, %dec_label_pc_1000f60c ], [ 63, %dec_label_pc_1000f61c ]
  %v2_1000f61e = sub nsw i32 %v0_1000f64e, %v1_1000f61e
  %v7_1000f61e = icmp ult i32 %v0_1000f64e, %v1_1000f61e
  %v8_1000f61e = xor i32 %v1_1000f61e, %v0_1000f64e
  %v9_1000f61e = xor i32 %v2_1000f61e, %v0_1000f64e
  %v10_1000f61e = and i32 %v9_1000f61e, %v8_1000f61e
  %v11_1000f61e = icmp slt i32 %v10_1000f61e, 0
  store i1 %v7_1000f61e, i1* %cf.global-to-local, align 1
  store i1 %v11_1000f61e, i1* %of.global-to-local, align 1
  %v12_1000f61e = icmp eq i32 %v2_1000f61e, 0
  store i1 %v12_1000f61e, i1* %zf.global-to-local, align 1
  br i1 %v12_1000f61e, label %dec_label_pc_1000f693, label %dec_label_pc_1000f622

dec_label_pc_1000f622:                            ; preds = %dec_label_pc_1000f61e
  store i32 %v5_1000f5f6, i32* %ecx.global-to-local, align 4
  %v1_1000f625 = add i32 %v5_1000f5f6, 4
  %v2_1000f625 = inttoptr i32 %v1_1000f625 to i32*
  %v3_1000f625 = load i32, i32* %v2_1000f625, align 4
  store i32 %v3_1000f625, i32* %esi.global-to-local, align 4
  %v2_1000f628 = add i32 %v5_1000f5f6, 8
  %v3_1000f628 = inttoptr i32 %v2_1000f628 to i32*
  %v4_1000f628 = load i32, i32* %v3_1000f628, align 4
  %v5_1000f628 = sub i32 %v3_1000f625, %v4_1000f628
  %v10_1000f628 = icmp ult i32 %v3_1000f625, %v4_1000f628
  %v11_1000f628 = xor i32 %v4_1000f628, %v3_1000f625
  %v12_1000f628 = xor i32 %v5_1000f628, %v3_1000f625
  %v13_1000f628 = and i32 %v12_1000f628, %v11_1000f628
  %v14_1000f628 = icmp slt i32 %v13_1000f628, 0
  store i1 %v10_1000f628, i1* %cf.global-to-local, align 1
  store i1 %v14_1000f628, i1* %of.global-to-local, align 1
  %v15_1000f628 = icmp eq i32 %v5_1000f628, 0
  store i1 %v15_1000f628, i1* %zf.global-to-local, align 1
  %v1_1000f62b = icmp eq i1 %v15_1000f628, false
  br i1 %v1_1000f62b, label %dec_label_pc_1000f66d, label %dec_label_pc_1000f62d

dec_label_pc_1000f62d:                            ; preds = %dec_label_pc_1000f622
  %v1_1000f62d = add nsw i32 %v0_1000f64e, -32
  %v2_1000f62d = icmp ult i32 %v0_1000f64e, 32
  %v3_1000f62d = sub nsw i32 31, %v0_1000f64e
  %v4_1000f62d = and i32 %v3_1000f62d, %v0_1000f64e
  %v5_1000f62d = icmp slt i32 %v4_1000f62d, 0
  store i1 %v2_1000f62d, i1* %cf.global-to-local, align 1
  store i1 %v5_1000f62d, i1* %of.global-to-local, align 1
  %v6_1000f62d = icmp eq i32 %v1_1000f62d, 0
  store i1 %v6_1000f62d, i1* %zf.global-to-local, align 1
  %v1_1000f630 = icmp eq i1 %v2_1000f62d, false
  br i1 %v1_1000f630, label %dec_label_pc_1000f64e, label %dec_label_pc_1000f632

dec_label_pc_1000f632:                            ; preds = %dec_label_pc_1000f62d
  store i32 -2147483648, i32* %esi.global-to-local, align 4
  store i32 %v0_1000f64e, i32* %ecx.global-to-local, align 4
  %v2_1000f639 = and i32 %v0_1000f64e, 31
  %v4_1000f639 = icmp eq i32 %v2_1000f639, 0
  br i1 %v4_1000f639, label %bb55, label %bb54

bb54:                                             ; preds = %dec_label_pc_1000f632
  %v5_1000f639 = lshr i32 -2147483648, %v2_1000f639
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f639, i32* %esi.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v16_1000f639 = icmp eq i32 %v2_1000f639, 1
  %v18_1000f639 = or i1 %v16_1000f639, %v5_1000f62d
  store i1 %v18_1000f639, i1* %of.global-to-local, align 1
  br label %bb55

bb55:                                             ; preds = %dec_label_pc_1000f632, %bb54
  %v0_1000f63b = phi i32 [ -2147483648, %dec_label_pc_1000f632 ], [ %v5_1000f639, %bb54 ]
  %v1_1000f63b = sub i32 -1, %v0_1000f63b
  store i32 %v1_1000f63b, i32* %esi.global-to-local, align 4
  %v0_1000f63d = load i32, i32* %eax.global-to-local, align 4
  %v1_1000f63d = load i32, i32* @edi, align 4
  %v2_1000f63d = mul i32 %v1_1000f63d, 4
  %v3_1000f63d = add i32 %v0_1000f63d, 68
  %v4_1000f63d = add i32 %v3_1000f63d, %v2_1000f63d
  %v5_1000f63d = inttoptr i32 %v4_1000f63d to i32*
  %v6_1000f63d = load i32, i32* %v5_1000f63d, align 4
  %v8_1000f63d = and i32 %v6_1000f63d, %v1_1000f63b
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v9_1000f63d = icmp eq i32 %v8_1000f63d, 0
  store i1 %v9_1000f63d, i1* %zf.global-to-local, align 1
  store i32 %v8_1000f63d, i32* %v5_1000f63d, align 4
  %v0_1000f641 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000f641 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000f641 = add i32 %v0_1000f641, 4
  %v3_1000f641 = add i32 %v2_1000f641, %v1_1000f641
  %v4_1000f641 = inttoptr i32 %v3_1000f641 to i8*
  %v5_1000f641 = load i8, i8* %v4_1000f641, align 1
  %v6_1000f641 = add i8 %v5_1000f641, -1
  %v10_1000f641 = sub i8 0, %v5_1000f641
  %v11_1000f641 = and i8 %v5_1000f641, %v10_1000f641
  %v12_1000f641 = icmp slt i8 %v11_1000f641, 0
  store i1 %v12_1000f641, i1* %of.global-to-local, align 1
  %v13_1000f641 = icmp eq i8 %v6_1000f641, 0
  store i1 %v13_1000f641, i1* %zf.global-to-local, align 1
  store i8 %v6_1000f641, i8* %v4_1000f641, align 1
  %v0_1000f645 = load i1, i1* %zf.global-to-local, align 1
  %v1_1000f645 = icmp eq i1 %v0_1000f645, false
  br i1 %v1_1000f645, label %dec_label_pc_1000f66d, label %dec_label_pc_1000f647

dec_label_pc_1000f647:                            ; preds = %bb55
  store i32 %tmp35, i32* %ecx.global-to-local, align 4
  %v2_1000f64a = load i32, i32* %arg1, align 4
  %v3_1000f64a = load i32, i32* %esi.global-to-local, align 4
  %v4_1000f64a = and i32 %v3_1000f64a, %v2_1000f64a
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v5_1000f64a = icmp eq i32 %v4_1000f64a, 0
  store i1 %v5_1000f64a, i1* %zf.global-to-local, align 1
  store i32 %v4_1000f64a, i32* %arg1, align 4
  br label %dec_label_pc_1000f66d

dec_label_pc_1000f64e:                            ; preds = %dec_label_pc_1000f62d
  store i32 %v1_1000f62d, i32* %ecx.global-to-local, align 4
  store i32 -2147483648, i32* %esi.global-to-local, align 4
  %v2_1000f656 = and i32 %v1_1000f62d, 31
  %v4_1000f656 = icmp eq i32 %v2_1000f656, 0
  br i1 %v4_1000f656, label %bb57, label %bb56

bb56:                                             ; preds = %dec_label_pc_1000f64e
  %v5_1000f656 = lshr i32 -2147483648, %v2_1000f656
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f656, i32* %esi.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v16_1000f656 = icmp eq i32 %v2_1000f656, 1
  %v18_1000f656 = or i1 %v16_1000f656, %v5_1000f62d
  store i1 %v18_1000f656, i1* %of.global-to-local, align 1
  br label %bb57

bb57:                                             ; preds = %dec_label_pc_1000f64e, %bb56
  %v0_1000f658 = phi i32 [ -2147483648, %dec_label_pc_1000f64e ], [ %v5_1000f656, %bb56 ]
  %v1_1000f658 = sub i32 -1, %v0_1000f658
  store i32 %v1_1000f658, i32* %esi.global-to-local, align 4
  %v0_1000f65a = load i32, i32* %eax.global-to-local, align 4
  %v1_1000f65a = load i32, i32* @edi, align 4
  %v2_1000f65a = mul i32 %v1_1000f65a, 4
  %v3_1000f65a = add i32 %v0_1000f65a, 196
  %v4_1000f65a = add i32 %v3_1000f65a, %v2_1000f65a
  %v5_1000f65a = inttoptr i32 %v4_1000f65a to i32*
  %v6_1000f65a = load i32, i32* %v5_1000f65a, align 4
  %v8_1000f65a = and i32 %v6_1000f65a, %v1_1000f658
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v9_1000f65a = icmp eq i32 %v8_1000f65a, 0
  store i1 %v9_1000f65a, i1* %zf.global-to-local, align 1
  store i32 %v8_1000f65a, i32* %v5_1000f65a, align 4
  %v0_1000f661 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000f661 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000f661 = add i32 %v0_1000f661, 4
  %v3_1000f661 = add i32 %v2_1000f661, %v1_1000f661
  %v4_1000f661 = inttoptr i32 %v3_1000f661 to i8*
  %v5_1000f661 = load i8, i8* %v4_1000f661, align 1
  %v6_1000f661 = add i8 %v5_1000f661, -1
  %v10_1000f661 = sub i8 0, %v5_1000f661
  %v11_1000f661 = and i8 %v5_1000f661, %v10_1000f661
  %v12_1000f661 = icmp slt i8 %v11_1000f661, 0
  store i1 %v12_1000f661, i1* %of.global-to-local, align 1
  %v13_1000f661 = icmp eq i8 %v6_1000f661, 0
  store i1 %v13_1000f661, i1* %zf.global-to-local, align 1
  store i8 %v6_1000f661, i8* %v4_1000f661, align 1
  %v0_1000f665 = load i1, i1* %zf.global-to-local, align 1
  %v1_1000f665 = icmp eq i1 %v0_1000f665, false
  br i1 %v1_1000f665, label %dec_label_pc_1000f66d, label %dec_label_pc_1000f667

dec_label_pc_1000f667:                            ; preds = %bb57
  store i32 %tmp35, i32* %ecx.global-to-local, align 4
  %v1_1000f66a = add i32 %tmp35, 4
  %v2_1000f66a = inttoptr i32 %v1_1000f66a to i32*
  %v3_1000f66a = load i32, i32* %v2_1000f66a, align 4
  %v4_1000f66a = load i32, i32* %esi.global-to-local, align 4
  %v5_1000f66a = and i32 %v4_1000f66a, %v3_1000f66a
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v6_1000f66a = icmp eq i32 %v5_1000f66a, 0
  store i1 %v6_1000f66a, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f66a, i32* %v2_1000f66a, align 4
  br label %dec_label_pc_1000f66d

dec_label_pc_1000f66d:                            ; preds = %bb57, %bb55, %dec_label_pc_1000f622, %dec_label_pc_1000f647, %dec_label_pc_1000f667
  store i32 %v5_1000f5f6, i32* %ecx.global-to-local, align 4
  %v3_1000f670 = load i32, i32* %v3_1000f628, align 4
  store i32 %v3_1000f670, i32* %esi.global-to-local, align 4
  %v3_1000f673 = load i32, i32* %v2_1000f625, align 4
  %v2_1000f676 = add i32 %v3_1000f670, 4
  %v3_1000f676 = inttoptr i32 %v2_1000f676 to i32*
  store i32 %v3_1000f673, i32* %v3_1000f676, align 4
  store i32 %v5_1000f5f6, i32* %ecx.global-to-local, align 4
  %v3_1000f67c = load i32, i32* %v2_1000f625, align 4
  store i32 %v3_1000f67c, i32* %esi.global-to-local, align 4
  %v3_1000f67f = load i32, i32* %v3_1000f628, align 4
  store i32 %v3_1000f67f, i32* %ecx.global-to-local, align 4
  %v2_1000f682 = add i32 %v3_1000f67c, 8
  %v3_1000f682 = inttoptr i32 %v2_1000f682 to i32*
  store i32 %v3_1000f67f, i32* %v3_1000f682, align 4
  %v0_1000f693.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000f693.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000f693

dec_label_pc_1000f68d.thread:                     ; preds = %dec_label_pc_1000f5e7
  store i32 %tmp35, i32* %ebx.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  store i1 false, i1* %zf.global-to-local, align 1
  %v1_1000f6a5.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000f69b

dec_label_pc_1000f693:                            ; preds = %dec_label_pc_1000f61e, %dec_label_pc_1000f66d
  %v1_1000f693 = phi i32 [ %v1_1000f61e, %dec_label_pc_1000f61e ], [ %v1_1000f693.pre, %dec_label_pc_1000f66d ]
  %v0_1000f693 = phi i32 [ %v0_1000f64e, %dec_label_pc_1000f61e ], [ %v0_1000f693.pre, %dec_label_pc_1000f66d ]
  store i32 %v5_1000f5f6, i32* %esi.global-to-local, align 4
  %v2_1000f693 = sub i32 %v0_1000f693, %v1_1000f693
  %v7_1000f693 = icmp ult i32 %v0_1000f693, %v1_1000f693
  %v8_1000f693 = xor i32 %v1_1000f693, %v0_1000f693
  %v9_1000f693 = xor i32 %v2_1000f693, %v0_1000f693
  %v10_1000f693 = and i32 %v9_1000f693, %v8_1000f693
  %v11_1000f693 = icmp slt i32 %v10_1000f693, 0
  store i1 %v7_1000f693, i1* %cf.global-to-local, align 1
  store i1 %v11_1000f693, i1* %of.global-to-local, align 1
  %v12_1000f693 = icmp eq i32 %v2_1000f693, 0
  store i1 %v12_1000f693, i1* %zf.global-to-local, align 1
  br i1 %v12_1000f693, label %dec_label_pc_1000f71c, label %dec_label_pc_1000f69b

dec_label_pc_1000f69b:                            ; preds = %dec_label_pc_1000f68d.thread, %dec_label_pc_1000f693
  %v1_1000f6a5 = phi i32 [ %v1_1000f6a5.pre, %dec_label_pc_1000f68d.thread ], [ %v5_1000f5f6, %dec_label_pc_1000f693 ]
  %v1_1000f6a2 = phi i32 [ %v1_1000f69e18, %dec_label_pc_1000f68d.thread ], [ %v1_1000f693, %dec_label_pc_1000f693 ]
  %stack_var_-8.16 = phi i32 [ %stack_var_-8.0, %dec_label_pc_1000f68d.thread ], [ %v5_1000f60c, %dec_label_pc_1000f693 ]
  store i32 %v3_1000f528, i32* %ecx.global-to-local, align 4
  %v2_1000f69e = mul i32 %v1_1000f6a2, 8
  %v3_1000f69e = add i32 %v3_1000f528, 4
  %v4_1000f69e = add i32 %v3_1000f69e, %v2_1000f69e
  %v5_1000f69e = inttoptr i32 %v4_1000f69e to i32*
  %v6_1000f69e = load i32, i32* %v5_1000f69e, align 4
  store i32 %v6_1000f69e, i32* %ebx.global-to-local, align 4
  %v3_1000f6a2 = add i32 %v2_1000f69e, %v3_1000f528
  store i32 %v3_1000f6a2, i32* %ecx.global-to-local, align 4
  %v2_1000f6a5 = add i32 %v1_1000f6a5, 4
  %v3_1000f6a5 = inttoptr i32 %v2_1000f6a5 to i32*
  store i32 %v6_1000f69e, i32* %v3_1000f6a5, align 4
  %v0_1000f6a8 = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000f6a8 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000f6a8 = add i32 %v1_1000f6a8, 8
  %v3_1000f6a8 = inttoptr i32 %v2_1000f6a8 to i32*
  store i32 %v0_1000f6a8, i32* %v3_1000f6a8, align 4
  %v0_1000f6ab = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f6ab = load i32, i32* %ecx.global-to-local, align 4
  %v2_1000f6ab = add i32 %v1_1000f6ab, 4
  %v3_1000f6ab = inttoptr i32 %v2_1000f6ab to i32*
  store i32 %v0_1000f6ab, i32* %v3_1000f6ab, align 4
  %v0_1000f6ae = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f6ae = add i32 %v0_1000f6ae, 4
  %v2_1000f6ae = inttoptr i32 %v1_1000f6ae to i32*
  %v3_1000f6ae = load i32, i32* %v2_1000f6ae, align 4
  store i32 %v3_1000f6ae, i32* %ecx.global-to-local, align 4
  %v2_1000f6b1 = add i32 %v3_1000f6ae, 8
  %v3_1000f6b1 = inttoptr i32 %v2_1000f6b1 to i32*
  store i32 %v0_1000f6ae, i32* %v3_1000f6b1, align 4
  %v0_1000f6b4 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f6b4 = add i32 %v0_1000f6b4, 4
  %v2_1000f6b4 = inttoptr i32 %v1_1000f6b4 to i32*
  %v3_1000f6b4 = load i32, i32* %v2_1000f6b4, align 4
  store i32 %v3_1000f6b4, i32* %ecx.global-to-local, align 4
  %v2_1000f6b7 = add i32 %v0_1000f6b4, 8
  %v3_1000f6b7 = inttoptr i32 %v2_1000f6b7 to i32*
  %v4_1000f6b7 = load i32, i32* %v3_1000f6b7, align 4
  %v5_1000f6b7 = sub i32 %v3_1000f6b4, %v4_1000f6b7
  %v10_1000f6b7 = icmp ult i32 %v3_1000f6b4, %v4_1000f6b7
  %v11_1000f6b7 = xor i32 %v4_1000f6b7, %v3_1000f6b4
  %v12_1000f6b7 = xor i32 %v5_1000f6b7, %v3_1000f6b4
  %v13_1000f6b7 = and i32 %v12_1000f6b7, %v11_1000f6b7
  %v14_1000f6b7 = icmp slt i32 %v13_1000f6b7, 0
  store i1 %v10_1000f6b7, i1* %cf.global-to-local, align 1
  store i1 %v14_1000f6b7, i1* %of.global-to-local, align 1
  %v15_1000f6b7 = icmp eq i32 %v5_1000f6b7, 0
  store i1 %v15_1000f6b7, i1* %zf.global-to-local, align 1
  %v1_1000f6ba = icmp eq i1 %v15_1000f6b7, false
  br i1 %v1_1000f6ba, label %dec_label_pc_1000f71c, label %dec_label_pc_1000f6bc

dec_label_pc_1000f6bc:                            ; preds = %dec_label_pc_1000f69b
  %v0_1000f6bc = load i32, i32* %edx.global-to-local, align 4
  %v1_1000f6bc = load i32, i32* %eax.global-to-local, align 4
  %v2_1000f6bc = add i32 %v0_1000f6bc, 4
  %v3_1000f6bc = add i32 %v2_1000f6bc, %v1_1000f6bc
  %v4_1000f6bc = inttoptr i32 %v3_1000f6bc to i8*
  %v5_1000f6bc = load i8, i8* %v4_1000f6bc, align 1
  %v2_1000f6c0 = icmp ult i32 %v0_1000f6bc, 32
  store i1 %v2_1000f6c0, i1* %cf.global-to-local, align 1
  %v2_1000f6c6 = add i8 %v5_1000f6bc, 1
  %v14_1000f6c6 = zext i8 %v2_1000f6c6 to i32
  %v16_1000f6c6 = and i32 %v3_1000f6b4, -256
  %v17_1000f6c6 = or i32 %v14_1000f6c6, %v16_1000f6c6
  store i32 %v17_1000f6c6, i32* %ecx.global-to-local, align 4
  store i8 %v2_1000f6c6, i8* %v4_1000f6bc, align 1
  %v0_1000f6cc = load i1, i1* %cf.global-to-local, align 1
  %v1_1000f6cc = icmp eq i1 %v0_1000f6cc, false
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v4_1000f6f3 = icmp eq i8 %v5_1000f6bc, 0
  store i1 %v4_1000f6f3, i1* %zf.global-to-local, align 1
  %v1_1000f6f7 = icmp eq i1 %v4_1000f6f3, false
  br i1 %v1_1000f6cc, label %dec_label_pc_1000f6f3, label %dec_label_pc_1000f6ce

dec_label_pc_1000f6ce:                            ; preds = %dec_label_pc_1000f6bc
  br i1 %v1_1000f6f7, label %dec_label_pc_1000f6e2, label %dec_label_pc_1000f6d4

dec_label_pc_1000f6d4:                            ; preds = %dec_label_pc_1000f6ce
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  %v0_1000f6d9 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_1000f6d9, i32* %ecx.global-to-local, align 4
  %v2_1000f6db = and i32 %v0_1000f6d9, 31
  %v4_1000f6db = icmp eq i32 %v2_1000f6db, 0
  br i1 %v4_1000f6db, label %bb59, label %bb58

bb58:                                             ; preds = %dec_label_pc_1000f6d4
  %v5_1000f6db = lshr i32 -2147483648, %v2_1000f6db
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f6db, i32* %ebx.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v16_1000f6db = icmp eq i32 %v2_1000f6db, 1
  store i1 %v16_1000f6db, i1* %of.global-to-local, align 1
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_1000f6d4, %bb58
  %v3_1000f6e0 = phi i32 [ -2147483648, %dec_label_pc_1000f6d4 ], [ %v5_1000f6db, %bb58 ]
  store i32 %tmp35, i32* %ecx.global-to-local, align 4
  %v2_1000f6e0 = load i32, i32* %arg1, align 4
  %v4_1000f6e0 = or i32 %v2_1000f6e0, %v3_1000f6e0
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v5_1000f6e0 = icmp eq i32 %v4_1000f6e0, 0
  store i1 %v5_1000f6e0, i1* %zf.global-to-local, align 1
  store i32 %v4_1000f6e0, i32* %arg1, align 4
  br label %dec_label_pc_1000f6e2

dec_label_pc_1000f6e2:                            ; preds = %dec_label_pc_1000f6ce, %bb59
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  %v0_1000f6e7 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_1000f6e7, i32* %ecx.global-to-local, align 4
  %v2_1000f6e9 = and i32 %v0_1000f6e7, 31
  %v4_1000f6e9 = icmp eq i32 %v2_1000f6e9, 0
  br i1 %v4_1000f6e9, label %bb61, label %bb60

bb60:                                             ; preds = %dec_label_pc_1000f6e2
  %v5_1000f6e9 = lshr i32 -2147483648, %v2_1000f6e9
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f6e9, i32* %ebx.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v16_1000f6e9 = icmp eq i32 %v2_1000f6e9, 1
  store i1 %v16_1000f6e9, i1* %of.global-to-local, align 1
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_1000f6e2, %bb60
  %v3_1000f6ef = phi i32 [ -2147483648, %dec_label_pc_1000f6e2 ], [ %v5_1000f6e9, %bb60 ]
  %v0_1000f6eb = load i32, i32* %eax.global-to-local, align 4
  %v1_1000f6eb = load i32, i32* @edi, align 4
  %v2_1000f6eb = mul i32 %v1_1000f6eb, 4
  %v3_1000f6eb = add i32 %v0_1000f6eb, 68
  %v4_1000f6eb = add i32 %v3_1000f6eb, %v2_1000f6eb
  store i32 %v4_1000f6eb, i32* %eax.global-to-local, align 4
  %v1_1000f6ef = inttoptr i32 %v4_1000f6eb to i32*
  %v2_1000f6ef = load i32, i32* %v1_1000f6ef, align 4
  %v4_1000f6ef = or i32 %v2_1000f6ef, %v3_1000f6ef
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v5_1000f6ef = icmp eq i32 %v4_1000f6ef, 0
  store i1 %v5_1000f6ef, i1* %zf.global-to-local, align 1
  store i32 %v4_1000f6ef, i32* %v1_1000f6ef, align 4
  br label %dec_label_pc_1000f71c

dec_label_pc_1000f6f3:                            ; preds = %dec_label_pc_1000f6bc
  br i1 %v1_1000f6f7, label %dec_label_pc_1000f709, label %dec_label_pc_1000f6f9

dec_label_pc_1000f6f9:                            ; preds = %dec_label_pc_1000f6f3
  %v0_1000f6f9 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000f6f9 = add i32 %v0_1000f6f9, -32
  store i32 %v1_1000f6f9, i32* %ecx.global-to-local, align 4
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  %v2_1000f701 = and i32 %v1_1000f6f9, 31
  %v4_1000f701 = icmp eq i32 %v2_1000f701, 0
  br i1 %v4_1000f701, label %bb63, label %bb62

bb62:                                             ; preds = %dec_label_pc_1000f6f9
  %v5_1000f701 = lshr i32 -2147483648, %v2_1000f701
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f701, i32* %ebx.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v16_1000f701 = icmp eq i32 %v2_1000f701, 1
  store i1 %v16_1000f701, i1* %of.global-to-local, align 1
  br label %bb63

bb63:                                             ; preds = %dec_label_pc_1000f6f9, %bb62
  %v4_1000f706 = phi i32 [ -2147483648, %dec_label_pc_1000f6f9 ], [ %v5_1000f701, %bb62 ]
  store i32 %tmp35, i32* %ecx.global-to-local, align 4
  %v1_1000f706 = add i32 %tmp35, 4
  %v2_1000f706 = inttoptr i32 %v1_1000f706 to i32*
  %v3_1000f706 = load i32, i32* %v2_1000f706, align 4
  %v5_1000f706 = or i32 %v3_1000f706, %v4_1000f706
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v6_1000f706 = icmp eq i32 %v5_1000f706, 0
  store i1 %v6_1000f706, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f706, i32* %v2_1000f706, align 4
  br label %dec_label_pc_1000f709

dec_label_pc_1000f709:                            ; preds = %dec_label_pc_1000f6f3, %bb63
  %v0_1000f709 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000f709 = add i32 %v0_1000f709, -32
  store i32 %v1_1000f709, i32* %ecx.global-to-local, align 4
  store i32 -2147483648, i32* %edx.global-to-local, align 4
  %v2_1000f711 = and i32 %v1_1000f709, 31
  %v4_1000f711 = icmp eq i32 %v2_1000f711, 0
  br i1 %v4_1000f711, label %bb65, label %bb64

bb64:                                             ; preds = %dec_label_pc_1000f709
  %v5_1000f711 = lshr i32 -2147483648, %v2_1000f711
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f711, i32* %edx.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v16_1000f711 = icmp eq i32 %v2_1000f711, 1
  store i1 %v16_1000f711, i1* %of.global-to-local, align 1
  br label %bb65

bb65:                                             ; preds = %dec_label_pc_1000f709, %bb64
  %v3_1000f71a = phi i32 [ -2147483648, %dec_label_pc_1000f709 ], [ %v5_1000f711, %bb64 ]
  %v0_1000f713 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000f713 = load i32, i32* @edi, align 4
  %v2_1000f713 = mul i32 %v1_1000f713, 4
  %v3_1000f713 = add i32 %v0_1000f713, 196
  %v4_1000f713 = add i32 %v3_1000f713, %v2_1000f713
  store i32 %v4_1000f713, i32* %eax.global-to-local, align 4
  %v1_1000f71a = inttoptr i32 %v4_1000f713 to i32*
  %v2_1000f71a = load i32, i32* %v1_1000f71a, align 4
  %v4_1000f71a = or i32 %v2_1000f71a, %v3_1000f71a
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v5_1000f71a = icmp eq i32 %v4_1000f71a, 0
  store i1 %v5_1000f71a, i1* %zf.global-to-local, align 1
  store i32 %v4_1000f71a, i32* %v1_1000f71a, align 4
  br label %dec_label_pc_1000f71c

dec_label_pc_1000f71c:                            ; preds = %dec_label_pc_1000f69b, %dec_label_pc_1000f693, %bb61, %bb65
  %stack_var_-8.15 = phi i32 [ %stack_var_-8.16, %dec_label_pc_1000f69b ], [ %v5_1000f60c, %dec_label_pc_1000f693 ], [ %stack_var_-8.16, %bb61 ], [ %stack_var_-8.16, %bb65 ]
  store i32 %stack_var_-8.15, i32* %eax.global-to-local, align 4
  %v1_1000f71f = load i32, i32* %esi.global-to-local, align 4
  %v2_1000f71f = inttoptr i32 %v1_1000f71f to i32*
  store i32 %stack_var_-8.15, i32* %v2_1000f71f, align 4
  %v0_1000f721 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000f721 = load i32, i32* %esi.global-to-local, align 4
  %v3_1000f721 = add i32 %v0_1000f721, -4
  %v4_1000f721 = add i32 %v3_1000f721, %v2_1000f721
  %v5_1000f721 = inttoptr i32 %v4_1000f721 to i32*
  store i32 %v0_1000f721, i32* %v5_1000f721, align 4
  store i32 %v3_1000f528, i32* %eax.global-to-local, align 4
  %v1_1000f728 = inttoptr i32 %v3_1000f528 to i32*
  %v2_1000f728 = load i32, i32* %v1_1000f728, align 4
  %v3_1000f728 = add i32 %v2_1000f728, -1
  %v7_1000f728 = sub i32 0, %v2_1000f728
  %v8_1000f728 = and i32 %v2_1000f728, %v7_1000f728
  %v9_1000f728 = icmp slt i32 %v8_1000f728, 0
  store i1 %v9_1000f728, i1* %of.global-to-local, align 1
  %v10_1000f728 = icmp eq i32 %v3_1000f728, 0
  store i1 %v10_1000f728, i1* %zf.global-to-local, align 1
  store i32 %v3_1000f728, i32* %v1_1000f728, align 4
  %v1_1000f72a = icmp eq i1 %v10_1000f728, false
  br i1 %v1_1000f72a, label %dec_label_pc_1000f71c.dec_label_pc_1000f827_crit_edge, label %dec_label_pc_1000f730

dec_label_pc_1000f71c.dec_label_pc_1000f827_crit_edge: ; preds = %dec_label_pc_1000f71c
  %v0_1000f82b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f827

dec_label_pc_1000f730:                            ; preds = %dec_label_pc_1000f71c
  %v0_1000f730 = load i32, i32* @global_var_1001bb00.151, align 256
  store i32 %v0_1000f730, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v1_1000f735 = icmp eq i32 %v0_1000f730, 0
  store i1 %v1_1000f735, i1* %zf.global-to-local, align 1
  br i1 %v1_1000f735, label %dec_label_pc_1000f819, label %dec_label_pc_1000f73d

dec_label_pc_1000f73d:                            ; preds = %dec_label_pc_1000f730
  %v0_1000f73d = load i32, i32* @global_var_1001baf8.154, align 8
  store i32 %v0_1000f73d, i32* %ecx.global-to-local, align 4
  %v0_1000f743 = load i32, i32* inttoptr (i32 268525632 to i32*), align 64
  store i32 %v0_1000f743, i32* @esi, align 4
  %v2_1000f749 = mul i32 %v0_1000f73d, 32768
  store i32 %v2_1000f749, i32* %ecx.global-to-local, align 4
  %v2_1000f74c = add i32 %v0_1000f730, 12
  %v3_1000f74c = inttoptr i32 %v2_1000f74c to i32*
  %v4_1000f74c = load i32, i32* %v3_1000f74c, align 4
  %v5_1000f74c = add i32 %v4_1000f74c, %v2_1000f749
  %v10_1000f74c = icmp ult i32 %v5_1000f74c, %v2_1000f749
  %v11_1000f74c = xor i32 %v5_1000f74c, %v2_1000f749
  %v12_1000f74c = xor i32 %v5_1000f74c, %v4_1000f74c
  %v13_1000f74c = and i32 %v11_1000f74c, %v12_1000f74c
  %v14_1000f74c = icmp slt i32 %v13_1000f74c, 0
  store i1 %v10_1000f74c, i1* %cf.global-to-local, align 1
  store i1 %v14_1000f74c, i1* %of.global-to-local, align 1
  %v15_1000f74c = icmp eq i32 %v5_1000f74c, 0
  store i1 %v15_1000f74c, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f74c, i32* %ecx.global-to-local, align 4
  store i32 32768, i32* %ebx.global-to-local, align 4
  %v5_1000f75b = inttoptr i32 %v5_1000f74c to i32*
  %v6_1000f75b = call i1 @VirtualFree(i32* %v5_1000f75b, i32 32768, i32 16384)
  %v0_1000f75d = load i32, i32* @global_var_1001baf8.154, align 8
  store i32 %v0_1000f75d, i32* %ecx.global-to-local, align 4
  %v0_1000f763 = load i32, i32* @global_var_1001bb00.151, align 256
  store i32 %v0_1000f763, i32* %eax.global-to-local, align 4
  store i32 -2147483648, i32* %edx.global-to-local, align 4
  %v2_1000f76d = and i32 %v0_1000f75d, 31
  %v4_1000f76d = icmp eq i32 %v2_1000f76d, 0
  br i1 %v4_1000f76d, label %bb67, label %bb66

bb66:                                             ; preds = %dec_label_pc_1000f73d
  %v3_1000f76d = load i1, i1* %of.global-to-local, align 1
  %v5_1000f76d = lshr i32 -2147483648, %v2_1000f76d
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f76d, i32* %edx.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v16_1000f76d = icmp eq i32 %v2_1000f76d, 1
  %v18_1000f76d = or i1 %v16_1000f76d, %v3_1000f76d
  store i1 %v18_1000f76d, i1* %of.global-to-local, align 1
  br label %bb67

bb67:                                             ; preds = %dec_label_pc_1000f73d, %bb66
  %v4_1000f76f = phi i32 [ -2147483648, %dec_label_pc_1000f73d ], [ %v5_1000f76d, %bb66 ]
  %v1_1000f76f = add i32 %v0_1000f763, 8
  %v2_1000f76f = inttoptr i32 %v1_1000f76f to i32*
  %v3_1000f76f = load i32, i32* %v2_1000f76f, align 4
  %v5_1000f76f = or i32 %v3_1000f76f, %v4_1000f76f
  store i32 %v5_1000f76f, i32* %v2_1000f76f, align 4
  %v0_1000f772 = load i32, i32* @global_var_1001bb00.151, align 256
  store i32 %v0_1000f772, i32* %eax.global-to-local, align 4
  %v0_1000f777 = load i32, i32* @global_var_1001baf8.154, align 8
  store i32 %v0_1000f777, i32* %ecx.global-to-local, align 4
  %v1_1000f77d = add i32 %v0_1000f772, 16
  %v2_1000f77d = inttoptr i32 %v1_1000f77d to i32*
  %v3_1000f77d = load i32, i32* %v2_1000f77d, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  store i1 true, i1* %zf.global-to-local, align 1
  %v9_1000f780 = mul i32 %v0_1000f777, 4
  %v10_1000f780 = add i32 %v9_1000f780, 196
  %v11_1000f780 = add i32 %v10_1000f780, %v3_1000f77d
  %v12_1000f780 = inttoptr i32 %v11_1000f780 to i32*
  store i32 0, i32* %v12_1000f780, align 4
  %v0_1000f788 = load i32, i32* @global_var_1001bb00.151, align 256
  store i32 %v0_1000f788, i32* %eax.global-to-local, align 4
  %v1_1000f78d = add i32 %v0_1000f788, 16
  %v2_1000f78d = inttoptr i32 %v1_1000f78d to i32*
  %v3_1000f78d = load i32, i32* %v2_1000f78d, align 4
  store i32 %v3_1000f78d, i32* %eax.global-to-local, align 4
  %v1_1000f790 = add i32 %v3_1000f78d, 67
  %v2_1000f790 = inttoptr i32 %v1_1000f790 to i8*
  %v3_1000f790 = load i8, i8* %v2_1000f790, align 1
  %v4_1000f790 = add i8 %v3_1000f790, -1
  %v8_1000f790 = sub i8 0, %v3_1000f790
  %v9_1000f790 = and i8 %v3_1000f790, %v8_1000f790
  %v10_1000f790 = icmp slt i8 %v9_1000f790, 0
  store i1 %v10_1000f790, i1* %of.global-to-local, align 1
  %v11_1000f790 = icmp eq i8 %v4_1000f790, 0
  store i1 %v11_1000f790, i1* %zf.global-to-local, align 1
  store i8 %v4_1000f790, i8* %v2_1000f790, align 1
  %v0_1000f793 = load i32, i32* @global_var_1001bb00.151, align 256
  store i32 %v0_1000f793, i32* %eax.global-to-local, align 4
  %v1_1000f798 = add i32 %v0_1000f793, 16
  %v2_1000f798 = inttoptr i32 %v1_1000f798 to i32*
  %v3_1000f798 = load i32, i32* %v2_1000f798, align 4
  store i32 %v3_1000f798, i32* %ecx.global-to-local, align 4
  %v1_1000f79b = add i32 %v3_1000f798, 67
  %v2_1000f79b = inttoptr i32 %v1_1000f79b to i8*
  %v3_1000f79b = load i8, i8* %v2_1000f79b, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v4_1000f79b = icmp eq i8 %v3_1000f79b, 0
  store i1 %v4_1000f79b, i1* %zf.global-to-local, align 1
  %v1_1000f79f = icmp eq i1 %v4_1000f79b, false
  br i1 %v1_1000f79f, label %dec_label_pc_1000f7aa, label %dec_label_pc_1000f7a1

dec_label_pc_1000f7a1:                            ; preds = %bb67
  %v1_1000f7a1 = add i32 %v0_1000f793, 4
  %v2_1000f7a1 = inttoptr i32 %v1_1000f7a1 to i32*
  %v3_1000f7a1 = load i32, i32* %v2_1000f7a1, align 4
  %v4_1000f7a1 = and i32 %v3_1000f7a1, -2
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  %v5_1000f7a1 = icmp eq i32 %v4_1000f7a1, 0
  store i1 %v5_1000f7a1, i1* %zf.global-to-local, align 1
  store i32 %v4_1000f7a1, i32* %v2_1000f7a1, align 4
  %v0_1000f7a5 = load i32, i32* @global_var_1001bb00.151, align 256
  store i32 %v0_1000f7a5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f7aa

dec_label_pc_1000f7aa:                            ; preds = %bb67, %dec_label_pc_1000f7a1
  %v0_1000f7b3 = phi i32 [ %v0_1000f793, %bb67 ], [ %v0_1000f7a5, %dec_label_pc_1000f7a1 ]
  %v1_1000f7aa = add i32 %v0_1000f7b3, 8
  %v2_1000f7aa = inttoptr i32 %v1_1000f7aa to i32*
  %v3_1000f7aa = load i32, i32* %v2_1000f7aa, align 4
  %v4_1000f7aa = add i32 %v3_1000f7aa, 1
  %v8_1000f7aa = icmp ne i32 %v3_1000f7aa, -1
  %v9_1000f7aa = xor i32 %v3_1000f7aa, -2147483648
  %v10_1000f7aa = xor i32 %v4_1000f7aa, %v3_1000f7aa
  %v11_1000f7aa = and i32 %v10_1000f7aa, %v9_1000f7aa
  %v12_1000f7aa = icmp slt i32 %v11_1000f7aa, 0
  store i1 %v8_1000f7aa, i1* %cf.global-to-local, align 1
  store i1 %v12_1000f7aa, i1* %of.global-to-local, align 1
  %v13_1000f7aa = icmp eq i32 %v4_1000f7aa, 0
  store i1 %v13_1000f7aa, i1* %zf.global-to-local, align 1
  %v1_1000f7ae = icmp eq i1 %v13_1000f7aa, false
  br i1 %v1_1000f7ae, label %dec_label_pc_1000f819, label %dec_label_pc_1000f7b0

dec_label_pc_1000f7b0:                            ; preds = %dec_label_pc_1000f7aa
  %v0_1000f7b0 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000f7b3 = add i32 %v0_1000f7b3, 12
  %v2_1000f7b3 = inttoptr i32 %v1_1000f7b3 to i32*
  %v3_1000f7b3 = load i32, i32* %v2_1000f7b3, align 4
  %v5_1000f7b6 = inttoptr i32 %v3_1000f7b3 to i32*
  %v6_1000f7b6 = call i1 @VirtualFree(i32* %v5_1000f7b6, i32 0, i32 %v0_1000f7b0)
  %v0_1000f7b8 = load i32, i32* @global_var_1001bb00.151, align 256
  store i32 %v0_1000f7b8, i32* %eax.global-to-local, align 4
  %v1_1000f7bd = add i32 %v0_1000f7b8, 16
  %v2_1000f7bd = inttoptr i32 %v1_1000f7bd to i32*
  %v3_1000f7bd = load i32, i32* %v2_1000f7bd, align 4
  %v0_1000f7c2 = load i32, i32* @global_var_1001bb10.104, align 16
  %v5_1000f7c8 = inttoptr i32 %v0_1000f7c2 to i32*
  %v6_1000f7c8 = inttoptr i32 %v3_1000f7bd to i32*
  %v7_1000f7c8 = call i1 @HeapFree(i32* %v5_1000f7c8, i32 0, i32* %v6_1000f7c8)
  %v0_1000f7ce = load i32, i32* @global_var_1001bb04.149, align 4
  %v0_1000f7d3 = load i32, i32* @global_var_1001bb08.150, align 8
  store i32 %v0_1000f7d3, i32* %edx.global-to-local, align 4
  %v2_1000f7dc = mul i32 %v0_1000f7ce, 20
  %v0_1000f7e1 = load i32, i32* @global_var_1001bb00.151, align 256
  store i32 %v0_1000f7e1, i32* %eax.global-to-local, align 4
  %v2_1000f7e6 = sub i32 %v2_1000f7dc, %v0_1000f7e1
  %v7_1000f7e6 = icmp ult i32 %v2_1000f7dc, %v0_1000f7e1
  %v8_1000f7e6 = xor i32 %v0_1000f7e1, %v2_1000f7dc
  %v9_1000f7e6 = xor i32 %v2_1000f7e6, %v2_1000f7dc
  %v10_1000f7e6 = and i32 %v9_1000f7e6, %v8_1000f7e6
  %v11_1000f7e6 = icmp slt i32 %v10_1000f7e6, 0
  store i1 %v7_1000f7e6, i1* %cf.global-to-local, align 1
  store i1 %v11_1000f7e6, i1* %of.global-to-local, align 1
  %v12_1000f7e6 = icmp eq i32 %v2_1000f7e6, 0
  store i1 %v12_1000f7e6, i1* %zf.global-to-local, align 1
  %v2_1000f7e8 = add i32 %v0_1000f7d3, -20
  %v3_1000f7e8 = add i32 %v2_1000f7e8, %v2_1000f7e6
  %v1_1000f7ed = add i32 %v0_1000f7e1, 20
  store i32 %v1_1000f7ed, i32* %ecx.global-to-local, align 4
  %v3_1000f7f2 = inttoptr i32 %v0_1000f7e1 to i8*
  %v4_1000f7f2 = call i32 @function_10012060(i8* %v3_1000f7f2, i32 %v1_1000f7ed, i32 %v3_1000f7e8)
  store i32 %tmp35, i32* %eax.global-to-local, align 4
  %v0_1000f7fd = load i32, i32* @global_var_1001bb04.149, align 4
  %v1_1000f7fd = add i32 %v0_1000f7fd, -1
  store i32 %v1_1000f7fd, i32* @global_var_1001bb04.149, align 4
  %v1_1000f803 = load i32, i32* @global_var_1001bb00.151, align 256
  %v2_1000f803 = sub i32 %tmp35, %v1_1000f803
  %v7_1000f803 = icmp ult i32 %tmp35, %v1_1000f803
  %v8_1000f803 = xor i32 %v1_1000f803, %tmp35
  %v9_1000f803 = xor i32 %v2_1000f803, %tmp35
  %v10_1000f803 = and i32 %v9_1000f803, %v8_1000f803
  %v11_1000f803 = icmp slt i32 %v10_1000f803, 0
  store i1 %v7_1000f803, i1* %cf.global-to-local, align 1
  store i1 %v11_1000f803, i1* %of.global-to-local, align 1
  %v12_1000f803 = icmp eq i32 %v2_1000f803, 0
  store i1 %v12_1000f803, i1* %zf.global-to-local, align 1
  %v2_1000f809 = or i1 %v7_1000f803, %v12_1000f803
  br i1 %v2_1000f809, label %dec_label_pc_1000f80f, label %dec_label_pc_1000f80b

dec_label_pc_1000f80b:                            ; preds = %dec_label_pc_1000f7b0
  %v4_1000f80b = add i32 %tmp35, -20
  %v8_1000f80b = icmp ult i32* %arg1, inttoptr (i32 20 to i32*)
  %v9_1000f80b = sub i32 19, %tmp35
  %v10_1000f80b = and i32 %v9_1000f80b, %tmp35
  %v11_1000f80b = icmp slt i32 %v10_1000f80b, 0
  store i1 %v8_1000f80b, i1* %cf.global-to-local, align 1
  store i1 %v11_1000f80b, i1* %of.global-to-local, align 1
  %v12_1000f80b = icmp eq i32 %v4_1000f80b, 0
  store i1 %v12_1000f80b, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_1000f80f

dec_label_pc_1000f80f:                            ; preds = %dec_label_pc_1000f7b0, %dec_label_pc_1000f80b
  %stack_var_4.0 = phi i32 [ %tmp35, %dec_label_pc_1000f7b0 ], [ %v4_1000f80b, %dec_label_pc_1000f80b ]
  %v0_1000f80f = load i32, i32* @global_var_1001bb08.150, align 8
  store i32 %v0_1000f80f, i32* %eax.global-to-local, align 4
  store i32 %v0_1000f80f, i32* @global_var_1001bafc.152, align 4
  br label %dec_label_pc_1000f819

dec_label_pc_1000f819:                            ; preds = %dec_label_pc_1000f7aa, %dec_label_pc_1000f730, %dec_label_pc_1000f80f
  %stack_var_4.1 = phi i32 [ %tmp35, %dec_label_pc_1000f730 ], [ %tmp35, %dec_label_pc_1000f7aa ], [ %stack_var_4.0, %dec_label_pc_1000f80f ]
  store i32 %stack_var_4.1, i32* %eax.global-to-local, align 4
  %v0_1000f81c = load i32, i32* @edi, align 4
  store i32 %v0_1000f81c, i32* @global_var_1001baf8.154, align 8
  store i32 %stack_var_4.1, i32* @global_var_1001bb00.151, align 256
  br label %dec_label_pc_1000f827

dec_label_pc_1000f827:                            ; preds = %dec_label_pc_1000f71c.dec_label_pc_1000f827_crit_edge, %dec_label_pc_1000f503, %dec_label_pc_1000f819
  %v0_1000f82b = phi i32 [ %v0_1000f82b.pre, %dec_label_pc_1000f71c.dec_label_pc_1000f827_crit_edge ], [ %v3_1000f511, %dec_label_pc_1000f503 ], [ %stack_var_4.1, %dec_label_pc_1000f819 ]
  %v2_1000f828 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1000f828, i32* %esi.global-to-local, align 4
  ret i32 %v0_1000f82b

; uselistorder directives
  uselistorder i32 %stack_var_4.1, { 0, 2, 1 }
  uselistorder i32 %v2_1000f803, { 1, 0 }
  uselistorder i32 %v2_1000f7e6, { 0, 2, 1 }
  uselistorder i32 %v0_1000f7e1, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v2_1000f7dc, { 0, 1, 3, 2 }
  uselistorder i32 %v4_1000f7aa, { 1, 0 }
  uselistorder i32 %v3_1000f7aa, { 0, 3, 1, 2 }
  uselistorder i8 %v4_1000f790, { 1, 0 }
  uselistorder i8 %v3_1000f790, { 1, 0, 2 }
  uselistorder i32 %v5_1000f74c, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 %v2_1000f749, { 3, 1, 2, 0 }
  uselistorder i32 %v3_1000f728, { 1, 0 }
  uselistorder i32 %v2_1000f728, { 1, 0, 2 }
  uselistorder i32 %v0_1000f721, { 1, 0 }
  uselistorder i32 %stack_var_-8.15, { 1, 0 }
  uselistorder i1 %v1_1000f6f7, { 1, 0 }
  uselistorder i32 %v5_1000f6b7, { 1, 0 }
  uselistorder i32 %v3_1000f6b4, { 2, 0, 1, 4, 3, 5 }
  uselistorder i32 %v2_1000f693, { 1, 0 }
  uselistorder i32 %v0_1000f693, { 3, 2, 1, 0 }
  uselistorder i32 %v1_1000f693, { 2, 3, 1, 0 }
  uselistorder i8 %v6_1000f661, { 1, 0 }
  uselistorder i8 %v5_1000f661, { 1, 0, 2 }
  uselistorder i32 %v1_1000f658, { 1, 0 }
  uselistorder i8 %v6_1000f641, { 1, 0 }
  uselistorder i8 %v5_1000f641, { 1, 0, 2 }
  uselistorder i32 %v1_1000f63b, { 1, 0 }
  uselistorder i32 %v1_1000f62d, { 1, 0, 2 }
  uselistorder i32 %v5_1000f628, { 1, 0 }
  uselistorder i32 %v3_1000f625, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_1000f61e, { 1, 0 }
  uselistorder i32 %v1_1000f61e, { 0, 1, 3, 2 }
  uselistorder i32 %v1_1000f617, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_1000f614, { 1, 0 }
  uselistorder i32 %v5_1000f60c, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v0_1000f64e, { 0, 5, 4, 1, 8, 6, 7, 2, 3, 10, 9 }
  uselistorder i32 %v1_1000f604, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_1000f5fc, { 1, 0 }
  uselistorder i32 %v5_1000f5f6, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i32 %v1_1000f5de, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_1000f5db, { 1, 0 }
  uselistorder i32 %v0_1000f60c, { 2, 0, 1 }
  uselistorder i32 %v6_1000f5c4, { 2, 3, 0, 1, 4 }
  uselistorder i8 %v3_1000f5a9, { 1, 0 }
  uselistorder i8 %v2_1000f5a9, { 1, 0, 2 }
  uselistorder i32 %v1_1000f5a0, { 1, 0 }
  uselistorder i8 %v3_1000f587, { 1, 0 }
  uselistorder i8 %v2_1000f587, { 1, 0, 2 }
  uselistorder i32 %v1_1000f581, { 1, 0 }
  uselistorder i32 %v1_1000f56f, { 1, 0, 2 }
  uselistorder i32 %v5_1000f56a, { 1, 0 }
  uselistorder i32* %v3_1000f56a, { 1, 0, 2 }
  uselistorder i32 %v3_1000f567, { 0, 1, 3, 2, 4 }
  uselistorder i32* %v2_1000f567, { 1, 0, 2 }
  uselistorder i32 %v0_1000f59c, { 0, 1, 4, 3, 2, 7, 5, 6 }
  uselistorder i32 %v1_1000f55e, { 0, 1, 3, 2, 4 }
  uselistorder i1 %v3_1000f553, { 1, 0 }
  uselistorder i32 %v4_1000f550, { 2, 1, 0 }
  uselistorder i32 %v3_1000f54a, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v4_1000f541, { 1, 0, 2 }
  uselistorder i32 %v2_1000f541, { 1, 2, 0, 3, 4 }
  uselistorder i1 %v3_1000f535, { 1, 0 }
  uselistorder i32 %v1_1000f534, { 5, 6, 0, 4, 1, 7, 8, 2, 3, 9, 10 }
  uselistorder i32 %v3_1000f528, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v2_1000f51d, { 2, 1, 3, 0 }
  uselistorder i32 %v3_1000f511, { 3, 4, 0, 5, 1, 2, 6 }
  uselistorder i32 %tmp35, { 20, 21, 18, 0, 16, 17, 1, 2, 4, 3, 19, 15, 14, 13, 22, 12, 11, 10, 9, 8, 7, 5, 6, 23 }
  uselistorder i1* %zf.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 17, 22, 23, 0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56 }
  uselistorder i1* %of.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 18, 23, 24, 0, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %esi.global-to-local, { 0, 14, 15, 16, 17, 18, 19, 1, 20, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 22, 23 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 6, 5, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cf.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 15, 20, 21, 22, 23, 0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32* %arg1, { 3, 0, 4, 1, 5, 2, 6, 7 }
  uselistorder label %dec_label_pc_1000f827, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000f819, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000f80f, { 1, 0 }
  uselistorder label %dec_label_pc_1000f7aa, { 1, 0 }
  uselistorder label %bb67, { 1, 0 }
  uselistorder label %dec_label_pc_1000f71c, { 3, 2, 0, 1 }
  uselistorder label %bb65, { 1, 0 }
  uselistorder label %dec_label_pc_1000f709, { 1, 0 }
  uselistorder label %bb63, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %dec_label_pc_1000f6e2, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_1000f69b, { 1, 0 }
  uselistorder label %dec_label_pc_1000f693, { 1, 0 }
  uselistorder label %dec_label_pc_1000f66d, { 4, 0, 3, 1, 2 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %dec_label_pc_1000f61e, { 1, 0 }
  uselistorder label %dec_label_pc_1000f60c, { 1, 0 }
  uselistorder label %dec_label_pc_1000f5e7, { 1, 0 }
  uselistorder label %dec_label_pc_1000f5d9, { 1, 0 }
  uselistorder label %dec_label_pc_1000f5be, { 1, 0 }
  uselistorder label %dec_label_pc_1000f5b3, { 3, 0, 2, 1 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_1000f567, { 1, 0 }
}

define i32 @function_1000f82c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000f82c:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %of.global-to-local = alloca i1, align 1
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-36 = alloca i32, align 4
  %v0_1000f832 = load i32, i32* @global_var_1001bb04.149, align 4
  %v0_1000f837 = load i32, i32* @global_var_1001bb08.150, align 8
  store i32 %v0_1000f837, i32* %edx.global-to-local, align 4
  %v0_1000f83d = load i32, i32* @ebx, align 4
  %v0_1000f83e = load i32, i32* @esi, align 4
  %v0_1000f842 = load i32, i32* @edi, align 4
  store i32 %v0_1000f842, i32* %stack_var_-36, align 4
  %v2_1000f843 = mul i32 %v0_1000f832, 20
  %v3_1000f843 = add i32 %v0_1000f837, %v2_1000f843
  store i32 %v3_1000f843, i32* @edi, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_1000f84c = add i32 %arg1, 23
  %v1_1000f84f = and i32 %v1_1000f84c, -16
  %v2_1000f855 = sdiv i32 %v1_1000f84c, 16
  %v1_1000f858 = add nsw i32 %v2_1000f855, -1
  store i32 %v1_1000f858, i32* %ecx.global-to-local, align 4
  %v4_1000f859 = sub nsw i32 32, %v2_1000f855
  %v5_1000f859 = and i32 %v4_1000f859, %v1_1000f858
  %v6_1000f859 = icmp slt i32 %v5_1000f859, 0
  store i1 %v6_1000f859, i1* %of.global-to-local, align 1
  %tmp = and i32 %v1_1000f84c, -16
  %tmp142 = icmp eq i32 %tmp, 528
  store i1 %tmp142, i1* %zf.global-to-local, align 1
  %v8_1000f859 = icmp slt i32 %v1_1000f84c, 528
  br i1 %v8_1000f859, label %dec_label_pc_1000f85e, label %dec_label_pc_1000f86c

dec_label_pc_1000f85e:                            ; preds = %dec_label_pc_1000f82c
  store i1 false, i1* %of.global-to-local, align 1
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 -1, i32* @esi, align 4
  %v2_1000f861 = and i32 %v1_1000f858, 31
  %v4_1000f861 = icmp eq i32 %v2_1000f861, 0
  br i1 %v4_1000f861, label %bb95, label %bb

bb:                                               ; preds = %dec_label_pc_1000f85e
  %v5_1000f861 = lshr i32 -1, %v2_1000f861
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f861, i32* @esi, align 4
  %v16_1000f861 = icmp eq i32 %v2_1000f861, 1
  store i1 %v16_1000f861, i1* %of.global-to-local, align 1
  br label %bb95

bb95:                                             ; preds = %dec_label_pc_1000f85e, %bb
  %stack_var_-16.057 = phi i32 [ -1, %dec_label_pc_1000f85e ], [ %v5_1000f861, %bb ]
  store i1 false, i1* %of.global-to-local, align 1
  store i1 false, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_1000f87c

dec_label_pc_1000f86c:                            ; preds = %dec_label_pc_1000f82c
  %v1_1000f86c = add nsw i32 %v2_1000f855, -33
  store i32 %v1_1000f86c, i32* %ecx.global-to-local, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  store i1 false, i1* %of.global-to-local, align 1
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* @esi, align 4
  %v2_1000f874 = and i32 %v1_1000f86c, 31
  %v4_1000f874 = icmp eq i32 %v2_1000f874, 0
  br i1 %v4_1000f874, label %dec_label_pc_1000f87c, label %bb96

bb96:                                             ; preds = %dec_label_pc_1000f86c
  %v5_1000f874 = lshr i32 -1, %v2_1000f874
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f874, i32* %eax.global-to-local, align 4
  %v16_1000f874 = icmp eq i32 %v2_1000f874, 1
  store i1 %v16_1000f874, i1* %of.global-to-local, align 1
  br label %dec_label_pc_1000f87c

dec_label_pc_1000f87c:                            ; preds = %bb96, %dec_label_pc_1000f86c, %bb95
  %stack_var_-16.0 = phi i32 [ %stack_var_-16.057, %bb95 ], [ 0, %dec_label_pc_1000f86c ], [ 0, %bb96 ]
  %stack_var_-12.0 = phi i32 [ -1, %bb95 ], [ -1, %dec_label_pc_1000f86c ], [ %v5_1000f874, %bb96 ]
  %v0_1000f87c = load i32, i32* @global_var_1001bafc.152, align 4
  store i32 %v0_1000f87c, i32* %eax.global-to-local, align 4
  store i32 %v0_1000f87c, i32* @ebx, align 4
  %v2_1000f883 = sub i32 %v0_1000f87c, %v3_1000f843
  %v7_1000f883 = icmp ult i32 %v0_1000f87c, %v3_1000f843
  %v8_1000f883 = xor i32 %v0_1000f87c, %v3_1000f843
  %v9_1000f883 = xor i32 %v2_1000f883, %v0_1000f87c
  %v10_1000f883 = and i32 %v9_1000f883, %v8_1000f883
  %v11_1000f883 = icmp slt i32 %v10_1000f883, 0
  store i1 %v11_1000f883, i1* %of.global-to-local, align 1
  %v12_1000f883 = icmp eq i32 %v2_1000f883, 0
  store i1 %v12_1000f883, i1* %zf.global-to-local, align 1
  %v1_1000f888 = icmp eq i1 %v7_1000f883, false
  br i1 %v1_1000f888, label %dec_label_pc_1000f8a3, label %dec_label_pc_1000f88a

dec_label_pc_1000f88a:                            ; preds = %dec_label_pc_1000f87c, %dec_label_pc_1000f898
  %v0_1000f898 = phi i32 [ %v1_1000f898, %dec_label_pc_1000f898 ], [ %v0_1000f87c, %dec_label_pc_1000f87c ]
  %v1_1000f88a = add i32 %v0_1000f898, 4
  %v2_1000f88a = inttoptr i32 %v1_1000f88a to i32*
  %v3_1000f88a = load i32, i32* %v2_1000f88a, align 4
  store i32 %v3_1000f88a, i32* %ecx.global-to-local, align 4
  %v1_1000f88d = inttoptr i32 %v0_1000f898 to i32*
  %v2_1000f88d = load i32, i32* %v1_1000f88d, align 4
  %v5_1000f88f = and i32 %v3_1000f88a, %stack_var_-12.0
  %v2_1000f892 = and i32 %v2_1000f88d, %stack_var_-16.0
  store i32 %v2_1000f892, i32* @edi, align 4
  %v2_1000f894 = or i32 %v2_1000f892, %v5_1000f88f
  %v3_1000f894 = icmp eq i32 %v2_1000f894, 0
  store i32 %v2_1000f894, i32* %ecx.global-to-local, align 4
  %v1_1000f896 = icmp eq i1 %v3_1000f894, false
  br i1 %v1_1000f896, label %dec_label_pc_1000f8a3.loopexit, label %dec_label_pc_1000f898

dec_label_pc_1000f898:                            ; preds = %dec_label_pc_1000f88a
  %v1_1000f898 = add i32 %v0_1000f898, 20
  store i32 %v1_1000f898, i32* @ebx, align 4
  %v6_1000f89b = sub i32 %v1_1000f898, %v3_1000f843
  %v11_1000f89b = icmp ult i32 %v1_1000f898, %v3_1000f843
  %v12_1000f89b = xor i32 %v1_1000f898, %v3_1000f843
  %v13_1000f89b = xor i32 %v6_1000f89b, %v1_1000f898
  %v14_1000f89b = and i32 %v13_1000f89b, %v12_1000f89b
  %v15_1000f89b = icmp slt i32 %v14_1000f89b, 0
  %v16_1000f89b = icmp eq i32 %v6_1000f89b, 0
  br i1 %v11_1000f89b, label %dec_label_pc_1000f88a, label %dec_label_pc_1000f8a3.loopexit

dec_label_pc_1000f8a3.loopexit:                   ; preds = %dec_label_pc_1000f88a, %dec_label_pc_1000f898
  %v16_1000f89b34 = phi i1 [ %v16_1000f89b, %dec_label_pc_1000f898 ], [ false, %dec_label_pc_1000f88a ]
  %v15_1000f89b33 = phi i1 [ %v15_1000f89b, %dec_label_pc_1000f898 ], [ false, %dec_label_pc_1000f88a ]
  %stack_var_4.1.ph = phi i32 [ %v1_1000f898, %dec_label_pc_1000f898 ], [ %v0_1000f898, %dec_label_pc_1000f88a ]
  store i1 %v15_1000f89b33, i1* %of.global-to-local, align 1
  store i1 %v16_1000f89b34, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_1000f8a3

dec_label_pc_1000f8a3:                            ; preds = %dec_label_pc_1000f8a3.loopexit, %dec_label_pc_1000f87c
  %v0_1000f8a3 = phi i32 [ %v0_1000f87c, %dec_label_pc_1000f87c ], [ %stack_var_4.1.ph, %dec_label_pc_1000f8a3.loopexit ]
  %v6_1000f8a3 = sub i32 %v0_1000f8a3, %v3_1000f843
  %v12_1000f8a3 = xor i32 %v0_1000f8a3, %v3_1000f843
  %v13_1000f8a3 = xor i32 %v6_1000f8a3, %v0_1000f8a3
  %v14_1000f8a3 = and i32 %v13_1000f8a3, %v12_1000f8a3
  %v15_1000f8a3 = icmp slt i32 %v14_1000f8a3, 0
  store i1 %v15_1000f8a3, i1* %of.global-to-local, align 1
  %v16_1000f8a3 = icmp eq i32 %v6_1000f8a3, 0
  store i1 %v16_1000f8a3, i1* %zf.global-to-local, align 1
  %v1_1000f8a6 = icmp eq i1 %v16_1000f8a3, false
  br i1 %v1_1000f8a6, label %dec_label_pc_1000f921, label %dec_label_pc_1000f8aa.preheader

dec_label_pc_1000f8aa.preheader:                  ; preds = %dec_label_pc_1000f8a3
  store i32 %v0_1000f837, i32* @ebx, align 4
  %v2_1000f8aa124 = sub i32 %v0_1000f837, %v0_1000f87c
  %v7_1000f8aa125 = icmp ult i32 %v0_1000f837, %v0_1000f87c
  %v1_1000f8af126 = icmp eq i1 %v7_1000f8aa125, false
  br i1 %v1_1000f8af126, label %dec_label_pc_1000f8c6thread-pre-split, label %dec_label_pc_1000f8b1

dec_label_pc_1000f8b1:                            ; preds = %dec_label_pc_1000f8aa.preheader, %dec_label_pc_1000f8bf
  %v2_1000f8aa128 = phi i32 [ %v2_1000f8aa, %dec_label_pc_1000f8bf ], [ %v2_1000f8aa124, %dec_label_pc_1000f8aa.preheader ]
  %v0_1000f8c817127 = phi i32 [ %v1_1000f8bf, %dec_label_pc_1000f8bf ], [ %v0_1000f837, %dec_label_pc_1000f8aa.preheader ]
  %v1_1000f8b1 = add i32 %v0_1000f8c817127, 4
  %v2_1000f8b1 = inttoptr i32 %v1_1000f8b1 to i32*
  %v3_1000f8b1 = load i32, i32* %v2_1000f8b1, align 4
  store i32 %v3_1000f8b1, i32* %ecx.global-to-local, align 4
  %v1_1000f8b4 = inttoptr i32 %v0_1000f8c817127 to i32*
  %v2_1000f8b4 = load i32, i32* %v1_1000f8b4, align 4
  %v5_1000f8b6 = and i32 %v3_1000f8b1, %stack_var_-12.0
  %v2_1000f8b9 = and i32 %v2_1000f8b4, %stack_var_-16.0
  store i32 %v2_1000f8b9, i32* @edi, align 4
  %v2_1000f8bb = or i32 %v2_1000f8b9, %v5_1000f8b6
  %v3_1000f8bb = icmp eq i32 %v2_1000f8bb, 0
  store i32 %v2_1000f8bb, i32* %ecx.global-to-local, align 4
  %v1_1000f8bd = icmp eq i1 %v3_1000f8bb, false
  br i1 %v1_1000f8bd, label %dec_label_pc_1000f8c4, label %dec_label_pc_1000f8bf

dec_label_pc_1000f8bf:                            ; preds = %dec_label_pc_1000f8b1
  %v1_1000f8bf = add i32 %v0_1000f8c817127, 20
  store i32 %v1_1000f8bf, i32* @ebx, align 4
  %v2_1000f8aa = sub i32 %v1_1000f8bf, %v0_1000f87c
  %v7_1000f8aa = icmp ult i32 %v1_1000f8bf, %v0_1000f87c
  %v1_1000f8af = icmp eq i1 %v7_1000f8aa, false
  br i1 %v1_1000f8af, label %dec_label_pc_1000f8c6thread-pre-split, label %dec_label_pc_1000f8b1

dec_label_pc_1000f8c4:                            ; preds = %dec_label_pc_1000f8b1
  store i1 false, i1* %zf.global-to-local, align 1
  %v8_1000f8c4 = xor i32 %v0_1000f8c817127, %v0_1000f87c
  %v9_1000f8c4 = xor i32 %v2_1000f8aa128, %v0_1000f8c817127
  %v10_1000f8c4 = and i32 %v9_1000f8c4, %v8_1000f8c4
  br label %dec_label_pc_1000f8c6

dec_label_pc_1000f8c6thread-pre-split:            ; preds = %dec_label_pc_1000f8bf, %dec_label_pc_1000f8aa.preheader
  %v0_1000f8c817.lcssa = phi i32 [ %v0_1000f837, %dec_label_pc_1000f8aa.preheader ], [ %v1_1000f8bf, %dec_label_pc_1000f8bf ]
  %v2_1000f8aa.lcssa = phi i32 [ %v2_1000f8aa124, %dec_label_pc_1000f8aa.preheader ], [ %v2_1000f8aa, %dec_label_pc_1000f8bf ]
  %v9_1000f8aa = xor i32 %v2_1000f8aa.lcssa, %v0_1000f8c817.lcssa
  %v8_1000f8aa = xor i32 %v0_1000f8c817.lcssa, %v0_1000f87c
  %v10_1000f8aa = and i32 %v9_1000f8aa, %v8_1000f8aa
  br label %dec_label_pc_1000f8c6

dec_label_pc_1000f8c6:                            ; preds = %dec_label_pc_1000f8c6thread-pre-split, %dec_label_pc_1000f8c4
  %v0_1000f8c817117 = phi i32 [ %v0_1000f8c817127, %dec_label_pc_1000f8c4 ], [ %v0_1000f8c817.lcssa, %dec_label_pc_1000f8c6thread-pre-split ]
  %v2_1000f8aa115 = phi i32 [ %v2_1000f8aa128, %dec_label_pc_1000f8c4 ], [ %v2_1000f8aa.lcssa, %dec_label_pc_1000f8c6thread-pre-split ]
  %storemerge80.in = phi i32 [ %v10_1000f8c4, %dec_label_pc_1000f8c4 ], [ %v10_1000f8aa, %dec_label_pc_1000f8c6thread-pre-split ]
  %storemerge80 = icmp slt i32 %storemerge80.in, 0
  store i1 %storemerge80, i1* %of.global-to-local, align 1
  %storemerge39 = icmp eq i32 %v2_1000f8aa115, 0
  store i1 %storemerge39, i1* %zf.global-to-local, align 1
  %v1_1000f8c6 = icmp eq i1 %storemerge39, false
  br i1 %v1_1000f8c6, label %dec_label_pc_1000f921, label %dec_label_pc_1000f8c8.preheader

dec_label_pc_1000f8c8.preheader:                  ; preds = %dec_label_pc_1000f8c6
  %v6_1000f8c818 = sub i32 %v0_1000f8c817117, %v3_1000f843
  %v11_1000f8c819 = icmp ult i32 %v0_1000f8c817117, %v3_1000f843
  %v12_1000f8c820 = xor i32 %v0_1000f8c817117, %v3_1000f843
  %v13_1000f8c821 = xor i32 %v6_1000f8c818, %v0_1000f8c817117
  %v14_1000f8c822 = and i32 %v13_1000f8c821, %v12_1000f8c820
  %v15_1000f8c823 = icmp slt i32 %v14_1000f8c822, 0
  store i1 %v15_1000f8c823, i1* %of.global-to-local, align 1
  %v16_1000f8c824 = icmp eq i32 %v6_1000f8c818, 0
  store i1 %v16_1000f8c824, i1* %zf.global-to-local, align 1
  %v1_1000f8cb26 = icmp eq i1 %v11_1000f8c819, false
  br i1 %v1_1000f8cb26, label %dec_label_pc_1000f8de, label %dec_label_pc_1000f8cd

dec_label_pc_1000f8cd:                            ; preds = %dec_label_pc_1000f8c8.preheader, %dec_label_pc_1000f8d3
  %v0_1000f8cd = phi i32 [ %v1_1000f8d3, %dec_label_pc_1000f8d3 ], [ %v0_1000f8c817117, %dec_label_pc_1000f8c8.preheader ]
  %v1_1000f8cd = add i32 %v0_1000f8cd, 8
  %v2_1000f8cd = inttoptr i32 %v1_1000f8cd to i32*
  %v3_1000f8cd = load i32, i32* %v2_1000f8cd, align 4
  %v4_1000f8cd = icmp eq i32 %v3_1000f8cd, 0
  %v1_1000f8d1 = icmp eq i1 %v4_1000f8cd, false
  br i1 %v1_1000f8d1, label %dec_label_pc_1000f8db, label %dec_label_pc_1000f8d3

dec_label_pc_1000f8d3:                            ; preds = %dec_label_pc_1000f8cd
  %v1_1000f8d3 = add i32 %v0_1000f8cd, 20
  store i32 %v1_1000f8d3, i32* @ebx, align 4
  %v11_1000f8c8 = icmp ult i32 %v1_1000f8d3, %v3_1000f843
  %v1_1000f8cb = icmp eq i1 %v11_1000f8c8, false
  br i1 %v1_1000f8cb, label %dec_label_pc_1000f8c8.dec_label_pc_1000f8de.loopexit_crit_edge, label %dec_label_pc_1000f8cd

dec_label_pc_1000f8db:                            ; preds = %dec_label_pc_1000f8cd
  %v6_1000f8db = sub i32 %v0_1000f8cd, %v3_1000f843
  %v12_1000f8db = xor i32 %v0_1000f8cd, %v3_1000f843
  %v13_1000f8db = xor i32 %v6_1000f8db, %v0_1000f8cd
  %v14_1000f8db = and i32 %v13_1000f8db, %v12_1000f8db
  %v15_1000f8db = icmp slt i32 %v14_1000f8db, 0
  store i1 %v15_1000f8db, i1* %of.global-to-local, align 1
  %v16_1000f8db = icmp eq i32 %v6_1000f8db, 0
  store i1 %v16_1000f8db, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_1000f8de

dec_label_pc_1000f8c8.dec_label_pc_1000f8de.loopexit_crit_edge: ; preds = %dec_label_pc_1000f8d3
  %v6_1000f8c8.le = sub i32 %v1_1000f8d3, %v3_1000f843
  %v16_1000f8c8.le = icmp eq i32 %v6_1000f8c8.le, 0
  %v13_1000f8c8 = xor i32 %v6_1000f8c8.le, %v1_1000f8d3
  %v12_1000f8c8 = xor i32 %v1_1000f8d3, %v3_1000f843
  %v14_1000f8c8 = and i32 %v13_1000f8c8, %v12_1000f8c8
  %v15_1000f8c8 = icmp slt i32 %v14_1000f8c8, 0
  store i1 %v15_1000f8c8, i1* %of.global-to-local, align 1
  store i1 %v16_1000f8c8.le, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_1000f8de

dec_label_pc_1000f8de:                            ; preds = %dec_label_pc_1000f8c8.preheader, %dec_label_pc_1000f8c8.dec_label_pc_1000f8de.loopexit_crit_edge, %dec_label_pc_1000f8db
  %stack_var_4.210 = phi i32 [ %v0_1000f8cd, %dec_label_pc_1000f8db ], [ %v1_1000f8d3, %dec_label_pc_1000f8c8.dec_label_pc_1000f8de.loopexit_crit_edge ], [ %v0_1000f8c817117, %dec_label_pc_1000f8c8.preheader ]
  %v0_1000f8de = phi i1 [ %v16_1000f8db, %dec_label_pc_1000f8db ], [ %v16_1000f8c8.le, %dec_label_pc_1000f8c8.dec_label_pc_1000f8de.loopexit_crit_edge ], [ %v16_1000f8c824, %dec_label_pc_1000f8c8.preheader ]
  %v1_1000f8de = icmp eq i1 %v0_1000f8de, false
  br i1 %v1_1000f8de, label %dec_label_pc_1000f906, label %dec_label_pc_1000f8e2.preheader

dec_label_pc_1000f8e2.preheader:                  ; preds = %dec_label_pc_1000f8de
  store i32 %v0_1000f837, i32* @ebx, align 4
  br i1 %v1_1000f8af126, label %dec_label_pc_1000f8f6thread-pre-split, label %dec_label_pc_1000f8e9

dec_label_pc_1000f8e9:                            ; preds = %dec_label_pc_1000f8e2.preheader, %dec_label_pc_1000f8ef
  %v2_1000f8e2122 = phi i32 [ %v2_1000f8e2, %dec_label_pc_1000f8ef ], [ %v2_1000f8aa124, %dec_label_pc_1000f8e2.preheader ]
  %v0_1000f8f4121 = phi i32 [ %v1_1000f8ef, %dec_label_pc_1000f8ef ], [ %v0_1000f837, %dec_label_pc_1000f8e2.preheader ]
  %v1_1000f8e9 = add i32 %v0_1000f8f4121, 8
  %v2_1000f8e9 = inttoptr i32 %v1_1000f8e9 to i32*
  %v3_1000f8e9 = load i32, i32* %v2_1000f8e9, align 4
  %v4_1000f8e9 = icmp eq i32 %v3_1000f8e9, 0
  %v1_1000f8ed = icmp eq i1 %v4_1000f8e9, false
  br i1 %v1_1000f8ed, label %dec_label_pc_1000f8f4, label %dec_label_pc_1000f8ef

dec_label_pc_1000f8ef:                            ; preds = %dec_label_pc_1000f8e9
  %v1_1000f8ef = add i32 %v0_1000f8f4121, 20
  store i32 %v1_1000f8ef, i32* @ebx, align 4
  %v2_1000f8e2 = sub i32 %v1_1000f8ef, %v0_1000f87c
  %v7_1000f8e2 = icmp ult i32 %v1_1000f8ef, %v0_1000f87c
  %v1_1000f8e7 = icmp eq i1 %v7_1000f8e2, false
  br i1 %v1_1000f8e7, label %dec_label_pc_1000f8f6thread-pre-split, label %dec_label_pc_1000f8e9

dec_label_pc_1000f8f4:                            ; preds = %dec_label_pc_1000f8e9
  store i1 false, i1* %zf.global-to-local, align 1
  %v8_1000f8f4 = xor i32 %v0_1000f8f4121, %v0_1000f87c
  %v9_1000f8f4 = xor i32 %v2_1000f8e2122, %v0_1000f8f4121
  %v10_1000f8f4 = and i32 %v9_1000f8f4, %v8_1000f8f4
  br label %dec_label_pc_1000f8f6

dec_label_pc_1000f8f6thread-pre-split:            ; preds = %dec_label_pc_1000f8ef, %dec_label_pc_1000f8e2.preheader
  %v0_1000f8f4.lcssa = phi i32 [ %v0_1000f837, %dec_label_pc_1000f8e2.preheader ], [ %v1_1000f8ef, %dec_label_pc_1000f8ef ]
  %v2_1000f8e2.lcssa = phi i32 [ %v2_1000f8aa124, %dec_label_pc_1000f8e2.preheader ], [ %v2_1000f8e2, %dec_label_pc_1000f8ef ]
  %v9_1000f8e2 = xor i32 %v2_1000f8e2.lcssa, %v0_1000f8f4.lcssa
  %v8_1000f8e2 = xor i32 %v0_1000f8f4.lcssa, %v0_1000f87c
  %v10_1000f8e2 = and i32 %v9_1000f8e2, %v8_1000f8e2
  br label %dec_label_pc_1000f8f6

dec_label_pc_1000f8f6:                            ; preds = %dec_label_pc_1000f8f6thread-pre-split, %dec_label_pc_1000f8f4
  %v0_1000f8f4112 = phi i32 [ %v0_1000f8f4121, %dec_label_pc_1000f8f4 ], [ %v0_1000f8f4.lcssa, %dec_label_pc_1000f8f6thread-pre-split ]
  %v2_1000f8e2110 = phi i32 [ %v2_1000f8e2122, %dec_label_pc_1000f8f4 ], [ %v2_1000f8e2.lcssa, %dec_label_pc_1000f8f6thread-pre-split ]
  %storemerge.in = phi i32 [ %v10_1000f8f4, %dec_label_pc_1000f8f4 ], [ %v10_1000f8e2, %dec_label_pc_1000f8f6thread-pre-split ]
  %storemerge = icmp slt i32 %storemerge.in, 0
  store i1 %storemerge, i1* %of.global-to-local, align 1
  %storemerge38 = icmp eq i32 %v2_1000f8e2110, 0
  store i1 %storemerge38, i1* %zf.global-to-local, align 1
  %v1_1000f8f6 = icmp eq i1 %storemerge38, false
  br i1 %v1_1000f8f6, label %dec_label_pc_1000f906, label %dec_label_pc_1000f8f8

dec_label_pc_1000f8f8:                            ; preds = %dec_label_pc_1000f8f6
  %v0_1000f8f8 = call i32 @function_1000fb35()
  store i32 %v0_1000f8f8, i32* %eax.global-to-local, align 4
  store i32 %v0_1000f8f8, i32* @ebx, align 4
  store i1 false, i1* %of.global-to-local, align 1
  %v1_1000f8ff = icmp eq i32 %v0_1000f8f8, 0
  store i1 %v1_1000f8ff, i1* %zf.global-to-local, align 1
  br i1 %v1_1000f8ff, label %dec_label_pc_1000f91a, label %dec_label_pc_1000f906

dec_label_pc_1000f906:                            ; preds = %dec_label_pc_1000f8f8, %dec_label_pc_1000f8f6, %dec_label_pc_1000f8de
  %v0_1000f906 = phi i32 [ %stack_var_4.210, %dec_label_pc_1000f8de ], [ %v0_1000f8f4112, %dec_label_pc_1000f8f6 ], [ %v0_1000f8f8, %dec_label_pc_1000f8f8 ]
  %v1_1000f907 = call i32 @function_1000fbe6(i32 %v0_1000f906)
  store i32 %v1_1000f907, i32* %eax.global-to-local, align 4
  store i32 %v0_1000f906, i32* %ecx.global-to-local, align 4
  %v0_1000f90d = load i32, i32* @ebx, align 4
  %v1_1000f90d = add i32 %v0_1000f90d, 16
  %v2_1000f90d = inttoptr i32 %v1_1000f90d to i32*
  %v3_1000f90d = load i32, i32* %v2_1000f90d, align 4
  store i32 %v3_1000f90d, i32* %ecx.global-to-local, align 4
  %v2_1000f910 = inttoptr i32 %v3_1000f90d to i32*
  store i32 %v1_1000f907, i32* %v2_1000f910, align 4
  %v0_1000f912 = load i32, i32* @ebx, align 4
  %v1_1000f912 = add i32 %v0_1000f912, 16
  %v2_1000f912 = inttoptr i32 %v1_1000f912 to i32*
  %v3_1000f912 = load i32, i32* %v2_1000f912, align 4
  store i32 %v3_1000f912, i32* %eax.global-to-local, align 4
  %v1_1000f915 = inttoptr i32 %v3_1000f912 to i32*
  %v2_1000f915 = load i32, i32* %v1_1000f915, align 4
  %v3_1000f915 = add i32 %v2_1000f915, 1
  %v8_1000f915 = xor i32 %v2_1000f915, -2147483648
  %v9_1000f915 = xor i32 %v3_1000f915, %v2_1000f915
  %v10_1000f915 = and i32 %v9_1000f915, %v8_1000f915
  %v11_1000f915 = icmp slt i32 %v10_1000f915, 0
  store i1 %v11_1000f915, i1* %of.global-to-local, align 1
  %v12_1000f915 = icmp eq i32 %v3_1000f915, 0
  store i1 %v12_1000f915, i1* %zf.global-to-local, align 1
  %v1_1000f918 = icmp eq i1 %v12_1000f915, false
  br i1 %v1_1000f918, label %dec_label_pc_1000f921, label %dec_label_pc_1000f91a

dec_label_pc_1000f91a:                            ; preds = %dec_label_pc_1000f8f8, %dec_label_pc_1000f906
  store i1 false, i1* %of.global-to-local, align 1
  store i1 true, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_1000fb30

dec_label_pc_1000f921:                            ; preds = %dec_label_pc_1000f8c6, %dec_label_pc_1000f8a3, %dec_label_pc_1000f906
  %stack_var_4.4 = phi i32 [ %v0_1000f8a3, %dec_label_pc_1000f8a3 ], [ %v0_1000f8c817117, %dec_label_pc_1000f8c6 ], [ %v0_1000f906, %dec_label_pc_1000f906 ]
  %v0_1000f921 = phi i32 [ %v0_1000f8a3, %dec_label_pc_1000f8a3 ], [ %v0_1000f8c817117, %dec_label_pc_1000f8c6 ], [ %v0_1000f912, %dec_label_pc_1000f906 ]
  store i32 %v0_1000f921, i32* @global_var_1001bafc.152, align 4
  %v1_1000f927 = add i32 %v0_1000f921, 16
  %v2_1000f927 = inttoptr i32 %v1_1000f927 to i32*
  %v3_1000f927 = load i32, i32* %v2_1000f927, align 4
  store i32 %v3_1000f927, i32* %eax.global-to-local, align 4
  %v1_1000f92a = inttoptr i32 %v3_1000f927 to i32*
  %v2_1000f92a = load i32, i32* %v1_1000f92a, align 4
  store i32 %v2_1000f92a, i32* %edx.global-to-local, align 4
  %v1_1000f92c = add i32 %v2_1000f92a, 1
  %v6_1000f92c = xor i32 %v2_1000f92a, -2147483648
  %v7_1000f92c = xor i32 %v1_1000f92c, %v2_1000f92a
  %v8_1000f92c = and i32 %v7_1000f92c, %v6_1000f92c
  %v9_1000f92c = icmp slt i32 %v8_1000f92c, 0
  store i1 %v9_1000f92c, i1* %of.global-to-local, align 1
  %v10_1000f92c = icmp eq i32 %v1_1000f92c, 0
  store i1 %v10_1000f92c, i1* %zf.global-to-local, align 1
  br i1 %v10_1000f92c, label %dec_label_pc_1000f921.dec_label_pc_1000f948_crit_edge, label %dec_label_pc_1000f934

dec_label_pc_1000f921.dec_label_pc_1000f948_crit_edge: ; preds = %dec_label_pc_1000f921
  %.pre = add i32 %v3_1000f927, 196
  %.pre78 = add i32 %v3_1000f927, 68
  br label %dec_label_pc_1000f948

dec_label_pc_1000f934:                            ; preds = %dec_label_pc_1000f921
  %v2_1000f934 = mul i32 %v2_1000f92a, 4
  %v3_1000f934 = add i32 %v3_1000f927, 196
  %v4_1000f934 = add i32 %v2_1000f934, %v3_1000f934
  %v5_1000f934 = inttoptr i32 %v4_1000f934 to i32*
  %v6_1000f934 = load i32, i32* %v5_1000f934, align 4
  store i32 %v6_1000f934, i32* %ecx.global-to-local, align 4
  %v3_1000f93b = add i32 %v3_1000f927, 68
  %v4_1000f93b = add i32 %v2_1000f934, %v3_1000f93b
  %v5_1000f93b = inttoptr i32 %v4_1000f93b to i32*
  %v6_1000f93b = load i32, i32* %v5_1000f93b, align 4
  %v5_1000f93f = and i32 %v6_1000f934, %stack_var_-12.0
  %v1_1000f942 = load i32, i32* @esi, align 4
  %v2_1000f942 = and i32 %v1_1000f942, %v6_1000f93b
  store i32 %v2_1000f942, i32* %edi.global-to-local, align 4
  %v2_1000f944 = or i32 %v2_1000f942, %v5_1000f93f
  store i1 false, i1* %of.global-to-local, align 1
  %v3_1000f944 = icmp eq i32 %v2_1000f944, 0
  store i1 %v3_1000f944, i1* %zf.global-to-local, align 1
  store i32 %v2_1000f944, i32* %ecx.global-to-local, align 4
  %v1_1000f946 = icmp eq i1 %v3_1000f944, false
  br i1 %v1_1000f946, label %dec_label_pc_1000f97f, label %dec_label_pc_1000f948

dec_label_pc_1000f948:                            ; preds = %dec_label_pc_1000f921.dec_label_pc_1000f948_crit_edge, %dec_label_pc_1000f934
  %v1_1000f94e.pre-phi = phi i32 [ %.pre78, %dec_label_pc_1000f921.dec_label_pc_1000f948_crit_edge ], [ %v3_1000f93b, %dec_label_pc_1000f934 ]
  %v1_1000f948.pre-phi = phi i32 [ %.pre, %dec_label_pc_1000f921.dec_label_pc_1000f948_crit_edge ], [ %v3_1000f934, %dec_label_pc_1000f934 ]
  %v2_1000f948 = inttoptr i32 %v1_1000f948.pre-phi to i32*
  %v3_1000f948 = load i32, i32* %v2_1000f948, align 4
  store i32 %v3_1000f948, i32* %edx.global-to-local, align 4
  %v2_1000f94e = inttoptr i32 %v1_1000f94e.pre-phi to i32*
  %v3_1000f94e = load i32, i32* %v2_1000f94e, align 4
  %v5_1000f951 = and i32 %v3_1000f948, %stack_var_-12.0
  %v5_1000f954 = and i32 %v3_1000f94e, %stack_var_-16.0
  store i32 %v1_1000f94e.pre-phi, i32* %ecx.global-to-local, align 4
  %v2_1000f95e = or i32 %v5_1000f954, %v5_1000f951
  store i1 false, i1* %of.global-to-local, align 1
  %v3_1000f95e = icmp eq i32 %v2_1000f95e, 0
  store i1 %v3_1000f95e, i1* %zf.global-to-local, align 1
  store i32 %v2_1000f95e, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-16.0, i32* %esi.global-to-local, align 4
  %v1_1000f963 = icmp eq i1 %v3_1000f95e, false
  br i1 %v1_1000f963, label %dec_label_pc_1000f97c, label %dec_label_pc_1000f965

dec_label_pc_1000f965:                            ; preds = %dec_label_pc_1000f948, %dec_label_pc_1000f965
  %v0_1000f971 = phi i32 [ %v1_1000f971, %dec_label_pc_1000f965 ], [ %v1_1000f94e.pre-phi, %dec_label_pc_1000f948 ]
  %stack_var_-8.0.off0 = phi i32 [ %v5_1000f96b, %dec_label_pc_1000f965 ], [ 0, %dec_label_pc_1000f948 ]
  %v1_1000f965 = add i32 %v0_1000f971, 132
  %v2_1000f965 = inttoptr i32 %v1_1000f965 to i32*
  %v3_1000f965 = load i32, i32* %v2_1000f965, align 4
  %v5_1000f96b = add i32 %stack_var_-8.0.off0, 1
  %v5_1000f96e = and i32 %v3_1000f965, %stack_var_-12.0
  store i32 %v5_1000f96e, i32* %edx.global-to-local, align 4
  %v1_1000f971 = add i32 %v0_1000f971, 4
  store i32 %v1_1000f971, i32* %ecx.global-to-local, align 4
  store i32 %stack_var_-16.0, i32* %edi.global-to-local, align 4
  %v2_1000f976 = inttoptr i32 %v1_1000f971 to i32*
  %v3_1000f976 = load i32, i32* %v2_1000f976, align 4
  %v4_1000f976 = and i32 %v3_1000f976, %stack_var_-16.0
  store i32 %v4_1000f976, i32* %edi.global-to-local, align 4
  %v2_1000f978 = or i32 %v4_1000f976, %v5_1000f96e
  %v3_1000f978 = icmp eq i32 %v2_1000f978, 0
  store i32 %v2_1000f978, i32* %edx.global-to-local, align 4
  br i1 %v3_1000f978, label %dec_label_pc_1000f965, label %dec_label_pc_1000f97c.loopexit

dec_label_pc_1000f97c.loopexit:                   ; preds = %dec_label_pc_1000f965
  store i1 false, i1* %of.global-to-local, align 1
  store i1 false, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_1000f97c

dec_label_pc_1000f97c:                            ; preds = %dec_label_pc_1000f97c.loopexit, %dec_label_pc_1000f948
  %stack_var_-8.1.off0 = phi i32 [ 0, %dec_label_pc_1000f948 ], [ %v5_1000f96b, %dec_label_pc_1000f97c.loopexit ]
  store i32 %stack_var_-8.1.off0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000f97f

dec_label_pc_1000f97f:                            ; preds = %dec_label_pc_1000f934, %dec_label_pc_1000f97c
  %v3_1000f993.pre-phi = phi i32 [ %v3_1000f93b, %dec_label_pc_1000f934 ], [ %v1_1000f94e.pre-phi, %dec_label_pc_1000f97c ]
  %v1_1000f997 = phi i32 [ %v1_1000f942, %dec_label_pc_1000f934 ], [ %stack_var_-16.0, %dec_label_pc_1000f97c ]
  %v1_1000f99b = phi i32 [ %v2_1000f92a, %dec_label_pc_1000f934 ], [ %stack_var_-8.1.off0, %dec_label_pc_1000f97c ]
  store i32 0, i32* %edi.global-to-local, align 4
  %v3_1000f983 = mul i32 %v1_1000f99b, 516
  %v2_1000f989 = add i32 %v3_1000f927, 324
  %v3_1000f989 = add i32 %v2_1000f989, %v3_1000f983
  store i32 %v3_1000f989, i32* %ecx.global-to-local, align 4
  %v2_1000f993 = mul i32 %v1_1000f99b, 4
  %v4_1000f993 = add i32 %v2_1000f993, %v3_1000f993.pre-phi
  %v5_1000f993 = inttoptr i32 %v4_1000f993 to i32*
  %v6_1000f993 = load i32, i32* %v5_1000f993, align 4
  %v2_1000f997 = and i32 %v6_1000f993, %v1_1000f997
  store i1 false, i1* %of.global-to-local, align 1
  %v3_1000f997 = icmp eq i32 %v2_1000f997, 0
  store i1 %v3_1000f997, i1* %zf.global-to-local, align 1
  store i32 %v2_1000f997, i32* %ecx.global-to-local, align 4
  %v1_1000f999 = icmp eq i1 %v3_1000f997, false
  br i1 %v1_1000f999, label %dec_label_pc_1000f9a8.preheader, label %dec_label_pc_1000f99b

dec_label_pc_1000f99b:                            ; preds = %dec_label_pc_1000f97f
  %v3_1000f99b = add i32 %v3_1000f927, 196
  %v4_1000f99b = add i32 %v3_1000f99b, %v2_1000f993
  %v5_1000f99b = inttoptr i32 %v4_1000f99b to i32*
  %v6_1000f99b = load i32, i32* %v5_1000f99b, align 4
  %v5_1000f9a4 = and i32 %v6_1000f99b, %stack_var_-12.0
  store i1 false, i1* %of.global-to-local, align 1
  %v6_1000f9a4 = icmp eq i32 %v5_1000f9a4, 0
  store i1 %v6_1000f9a4, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f9a4, i32* %ecx.global-to-local, align 4
  store i32 32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000f9a8.preheader

dec_label_pc_1000f9a8.preheader:                  ; preds = %dec_label_pc_1000f99b, %dec_label_pc_1000f97f
  %ecx.promoted = phi i32 [ %v5_1000f9a4, %dec_label_pc_1000f99b ], [ %v2_1000f997, %dec_label_pc_1000f97f ]
  %edi.promoted = phi i32 [ 32, %dec_label_pc_1000f99b ], [ 0, %dec_label_pc_1000f97f ]
  store i1 false, i1* %of.global-to-local, align 1
  %v1_1000f9a814 = icmp eq i32 %ecx.promoted, 0
  store i1 %v1_1000f9a814, i1* %zf.global-to-local, align 1
  %v2_1000f9a815 = icmp slt i32 %ecx.promoted, 0
  %v2_1000f9aa16 = icmp eq i1 %v2_1000f9a815, false
  br i1 %v2_1000f9aa16, label %dec_label_pc_1000f9ac, label %dec_label_pc_1000f9b1

dec_label_pc_1000f9ac:                            ; preds = %dec_label_pc_1000f9a8.preheader, %dec_label_pc_1000f9ac
  %v1_1000f9ae30 = phi i32 [ %v1_1000f9ae, %dec_label_pc_1000f9ac ], [ %edi.promoted, %dec_label_pc_1000f9a8.preheader ]
  %v2_1000f9ac29 = phi i32 [ %v2_1000f9ac, %dec_label_pc_1000f9ac ], [ %ecx.promoted, %dec_label_pc_1000f9a8.preheader ]
  %v2_1000f9ac = mul i32 %v2_1000f9ac29, 2
  %v1_1000f9ae = add i32 %v1_1000f9ae30, 1
  %v2_1000f9a8 = icmp slt i32 %v2_1000f9ac, 0
  %v2_1000f9aa = icmp eq i1 %v2_1000f9a8, false
  br i1 %v2_1000f9aa, label %dec_label_pc_1000f9ac, label %dec_label_pc_1000f9a8.dec_label_pc_1000f9b1_crit_edge

dec_label_pc_1000f9a8.dec_label_pc_1000f9b1_crit_edge: ; preds = %dec_label_pc_1000f9ac
  %v1_1000f9a8 = icmp eq i32 %v2_1000f9ac, 0
  store i32 %v2_1000f9ac, i32* %ecx.global-to-local, align 4
  store i1 %v1_1000f9a8, i1* %zf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  store i32 %v1_1000f9ae, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000f9b1

dec_label_pc_1000f9b1:                            ; preds = %dec_label_pc_1000f9a8.dec_label_pc_1000f9b1_crit_edge, %dec_label_pc_1000f9a8.preheader
  %v1_1000f9ef = phi i32 [ %v1_1000f9ae, %dec_label_pc_1000f9a8.dec_label_pc_1000f9b1_crit_edge ], [ %edi.promoted, %dec_label_pc_1000f9a8.preheader ]
  store i32 %v3_1000f989, i32* %ecx.global-to-local, align 4
  %v2_1000f9b4 = mul i32 %v1_1000f9ef, 8
  %v3_1000f9b4 = add i32 %v3_1000f989, 4
  %v4_1000f9b4 = add i32 %v2_1000f9b4, %v3_1000f9b4
  %v5_1000f9b4 = inttoptr i32 %v4_1000f9b4 to i32*
  %v6_1000f9b4 = load i32, i32* %v5_1000f9b4, align 4
  store i32 %v6_1000f9b4, i32* %edx.global-to-local, align 4
  %v1_1000f9b8 = inttoptr i32 %v6_1000f9b4 to i32*
  %v2_1000f9b8 = load i32, i32* %v1_1000f9b8, align 4
  %v5_1000f9ba = sub i32 %v2_1000f9b8, %v1_1000f84f
  %v15_1000f9ba = icmp eq i32 %v5_1000f9ba, 0
  store i32 %v5_1000f9ba, i32* %ecx.global-to-local, align 4
  %v2_1000f9c2 = sdiv i32 %v5_1000f9ba, 16
  %v1_1000f9c5 = add nsw i32 %v2_1000f9c2, -1
  store i32 %v1_1000f9c5, i32* %esi.global-to-local, align 4
  %v6_1000f9c6 = sub nsw i32 63, %v2_1000f9c2
  %v7_1000f9c6 = and i32 %v6_1000f9c6, %v1_1000f9c5
  %v8_1000f9c6 = icmp slt i32 %v7_1000f9c6, 0
  store i1 %v8_1000f9c6, i1* %of.global-to-local, align 1
  %tmp143 = and i32 %v5_1000f9ba, -16
  %tmp144 = icmp eq i32 %tmp143, 1024
  store i1 %tmp144, i1* %zf.global-to-local, align 1
  %v10_1000f9c6 = icmp slt i32 %v5_1000f9ba, 1024
  %v3_1000f9c9 = icmp ne i1 %v10_1000f9c6, %v8_1000f9c6
  %v4_1000f9c9 = or i1 %tmp144, %v3_1000f9c9
  br i1 %v4_1000f9c9, label %dec_label_pc_1000f9ce, label %dec_label_pc_1000f9cb

dec_label_pc_1000f9cb:                            ; preds = %dec_label_pc_1000f9b1
  store i32 63, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000f9ce

dec_label_pc_1000f9ce:                            ; preds = %dec_label_pc_1000f9b1, %dec_label_pc_1000f9cb
  %v0_1000f9ce = phi i32 [ %v1_1000f9c5, %dec_label_pc_1000f9b1 ], [ 63, %dec_label_pc_1000f9cb ]
  %v2_1000f9ce = sub i32 %v0_1000f9ce, %v1_1000f9ef
  %v8_1000f9ce = xor i32 %v0_1000f9ce, %v1_1000f9ef
  %v9_1000f9ce = xor i32 %v2_1000f9ce, %v0_1000f9ce
  %v10_1000f9ce = and i32 %v9_1000f9ce, %v8_1000f9ce
  %v11_1000f9ce = icmp slt i32 %v10_1000f9ce, 0
  store i1 %v11_1000f9ce, i1* %of.global-to-local, align 1
  %v12_1000f9ce = icmp eq i32 %v2_1000f9ce, 0
  store i1 %v12_1000f9ce, i1* %zf.global-to-local, align 1
  br i1 %v12_1000f9ce, label %dec_label_pc_1000fae3, label %dec_label_pc_1000f9d6

dec_label_pc_1000f9d6:                            ; preds = %dec_label_pc_1000f9ce
  %v1_1000f9d6 = add i32 %v6_1000f9b4, 4
  %v2_1000f9d6 = inttoptr i32 %v1_1000f9d6 to i32*
  %v3_1000f9d6 = load i32, i32* %v2_1000f9d6, align 4
  store i32 %v3_1000f9d6, i32* %ecx.global-to-local, align 4
  %v2_1000f9d9 = add i32 %v6_1000f9b4, 8
  %v3_1000f9d9 = inttoptr i32 %v2_1000f9d9 to i32*
  %v4_1000f9d9 = load i32, i32* %v3_1000f9d9, align 4
  %v5_1000f9d9 = sub i32 %v3_1000f9d6, %v4_1000f9d9
  %v11_1000f9d9 = xor i32 %v4_1000f9d9, %v3_1000f9d6
  %v12_1000f9d9 = xor i32 %v5_1000f9d9, %v3_1000f9d6
  %v13_1000f9d9 = and i32 %v12_1000f9d9, %v11_1000f9d9
  %v14_1000f9d9 = icmp slt i32 %v13_1000f9d9, 0
  store i1 %v14_1000f9d9, i1* %of.global-to-local, align 1
  %v15_1000f9d9 = icmp eq i32 %v5_1000f9d9, 0
  store i1 %v15_1000f9d9, i1* %zf.global-to-local, align 1
  %v1_1000f9dc = icmp eq i1 %v15_1000f9d9, false
  br i1 %v1_1000f9dc, label %dec_label_pc_1000fa3f, label %dec_label_pc_1000f9de

dec_label_pc_1000f9de:                            ; preds = %dec_label_pc_1000f9d6
  %v2_1000f9de = add i32 %v1_1000f9ef, -32
  %v4_1000f9de = sub i32 31, %v1_1000f9ef
  %v5_1000f9de = and i32 %v4_1000f9de, %v1_1000f9ef
  %v6_1000f9de = icmp slt i32 %v5_1000f9de, 0
  store i1 %v6_1000f9de, i1* %of.global-to-local, align 1
  %v7_1000f9de = icmp eq i32 %v2_1000f9de, 0
  store i1 %v7_1000f9de, i1* %zf.global-to-local, align 1
  %v5_1000f9e1 = icmp slt i32 %v1_1000f9ef, 32
  br i1 %v5_1000f9e1, label %dec_label_pc_1000f9e3, label %dec_label_pc_1000fa0e

dec_label_pc_1000f9e3:                            ; preds = %dec_label_pc_1000f9de
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  store i32 %v1_1000f9ef, i32* %ecx.global-to-local, align 4
  %v2_1000f9ea = and i32 %v1_1000f9ef, 31
  %v4_1000f9ea = icmp eq i32 %v2_1000f9ea, 0
  br i1 %v4_1000f9ea, label %bb98, label %bb97

bb97:                                             ; preds = %dec_label_pc_1000f9e3
  %v5_1000f9ea = lshr i32 -2147483648, %v2_1000f9ea
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000f9ea, i32* %ebx.global-to-local, align 4
  %v16_1000f9ea = icmp eq i32 %v2_1000f9ea, 1
  %v18_1000f9ea = or i1 %v16_1000f9ea, %v6_1000f9de
  store i1 %v18_1000f9ea, i1* %of.global-to-local, align 1
  %phitmp79 = sub i32 -1, %v5_1000f9ea
  br label %bb98

bb98:                                             ; preds = %dec_label_pc_1000f9e3, %bb97
  %v0_1000f9f3 = phi i32 [ 2147483647, %dec_label_pc_1000f9e3 ], [ %phitmp79, %bb97 ]
  store i32 %v1_1000f99b, i32* %ecx.global-to-local, align 4
  %v2_1000f9ef = add i32 %v3_1000f927, 4
  %v3_1000f9ef = add i32 %v2_1000f9ef, %v1_1000f9ef
  store i32 %v3_1000f9ef, i32* %edi.global-to-local, align 4
  store i32 %v0_1000f9f3, i32* %ebx.global-to-local, align 4
  %v7_1000f9f8 = load i32, i32* %v5_1000f993, align 4
  %v8_1000f9f8 = and i32 %v7_1000f9f8, %v0_1000f9f3
  store i1 false, i1* %of.global-to-local, align 1
  %v9_1000f9f8 = icmp eq i32 %v8_1000f9f8, 0
  store i1 %v9_1000f9f8, i1* %zf.global-to-local, align 1
  store i32 %v8_1000f9f8, i32* %ebx.global-to-local, align 4
  store i32 %v8_1000f9f8, i32* %v5_1000f993, align 4
  %v0_1000fa00 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000fa00 = inttoptr i32 %v0_1000fa00 to i8*
  %v2_1000fa00 = load i8, i8* %v1_1000fa00, align 1
  %v3_1000fa00 = add i8 %v2_1000fa00, -1
  %v7_1000fa00 = sub i8 0, %v2_1000fa00
  %v8_1000fa00 = and i8 %v2_1000fa00, %v7_1000fa00
  %v9_1000fa00 = icmp slt i8 %v8_1000fa00, 0
  store i1 %v9_1000fa00, i1* %of.global-to-local, align 1
  %v10_1000fa00 = icmp eq i8 %v3_1000fa00, 0
  store i1 %v10_1000fa00, i1* %zf.global-to-local, align 1
  store i8 %v3_1000fa00, i8* %v1_1000fa00, align 1
  %v0_1000fa02 = load i1, i1* %zf.global-to-local, align 1
  %v1_1000fa02 = icmp eq i1 %v0_1000fa02, false
  br i1 %v1_1000fa02, label %dec_label_pc_1000fa3c, label %dec_label_pc_1000fa04

dec_label_pc_1000fa04:                            ; preds = %bb98
  store i32 %stack_var_4.4, i32* @ebx, align 4
  store i32 %v0_1000f9f3, i32* %ecx.global-to-local, align 4
  %v1_1000fa0a = inttoptr i32 %stack_var_4.4 to i32*
  %v2_1000fa0a = load i32, i32* %v1_1000fa0a, align 4
  %v4_1000fa0a = and i32 %v2_1000fa0a, %v0_1000f9f3
  store i1 false, i1* %of.global-to-local, align 1
  %v5_1000fa0a = icmp eq i32 %v4_1000fa0a, 0
  store i1 %v5_1000fa0a, i1* %zf.global-to-local, align 1
  store i32 %v4_1000fa0a, i32* %v1_1000fa0a, align 4
  br label %dec_label_pc_1000fa3f

dec_label_pc_1000fa0e:                            ; preds = %dec_label_pc_1000f9de
  store i32 %v2_1000f9de, i32* %ecx.global-to-local, align 4
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  %v2_1000fa16 = and i32 %v2_1000f9de, 31
  %v4_1000fa16 = icmp eq i32 %v2_1000fa16, 0
  br i1 %v4_1000fa16, label %bb100, label %bb99

bb99:                                             ; preds = %dec_label_pc_1000fa0e
  %v5_1000fa16 = lshr i32 -2147483648, %v2_1000fa16
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000fa16, i32* %ebx.global-to-local, align 4
  %v16_1000fa16 = icmp eq i32 %v2_1000fa16, 1
  %v18_1000fa16 = or i1 %v16_1000fa16, %v6_1000f9de
  store i1 %v18_1000fa16, i1* %of.global-to-local, align 1
  %phitmp = sub i32 -1, %v5_1000fa16
  br label %bb100

bb100:                                            ; preds = %dec_label_pc_1000fa0e, %bb99
  %v0_1000fa26 = phi i32 [ 2147483647, %dec_label_pc_1000fa0e ], [ %phitmp, %bb99 ]
  %v2_1000fa1b = add i32 %v3_1000f927, 4
  %v3_1000fa1b = add i32 %v2_1000fa1b, %v1_1000f9ef
  store i32 %v3_1000fa1b, i32* %edi.global-to-local, align 4
  %v3_1000fa1f = add i32 %v3_1000f927, 196
  %v4_1000fa1f = add i32 %v3_1000fa1f, %v2_1000f993
  store i32 %v4_1000fa1f, i32* %ecx.global-to-local, align 4
  store i32 %v0_1000fa26, i32* %ebx.global-to-local, align 4
  %v1_1000fa28 = inttoptr i32 %v4_1000fa1f to i32*
  %v2_1000fa28 = load i32, i32* %v1_1000fa28, align 4
  %v4_1000fa28 = and i32 %v2_1000fa28, %v0_1000fa26
  store i1 false, i1* %of.global-to-local, align 1
  %v5_1000fa28 = icmp eq i32 %v4_1000fa28, 0
  store i1 %v5_1000fa28, i1* %zf.global-to-local, align 1
  store i32 %v4_1000fa28, i32* %v1_1000fa28, align 4
  %v0_1000fa2a = load i32, i32* %edi.global-to-local, align 4
  %v1_1000fa2a = inttoptr i32 %v0_1000fa2a to i8*
  %v2_1000fa2a = load i8, i8* %v1_1000fa2a, align 1
  %v3_1000fa2a = add i8 %v2_1000fa2a, -1
  %v7_1000fa2a = sub i8 0, %v2_1000fa2a
  %v8_1000fa2a = and i8 %v2_1000fa2a, %v7_1000fa2a
  %v9_1000fa2a = icmp slt i8 %v8_1000fa2a, 0
  store i1 %v9_1000fa2a, i1* %of.global-to-local, align 1
  %v10_1000fa2a = icmp eq i8 %v3_1000fa2a, 0
  store i1 %v10_1000fa2a, i1* %zf.global-to-local, align 1
  store i8 %v3_1000fa2a, i8* %v1_1000fa2a, align 1
  %v0_1000fa2c = load i32, i32* %ebx.global-to-local, align 4
  %v0_1000fa2f = load i1, i1* %zf.global-to-local, align 1
  %v1_1000fa2f = icmp eq i1 %v0_1000fa2f, false
  br i1 %v1_1000fa2f, label %dec_label_pc_1000fa3c, label %dec_label_pc_1000fa31

dec_label_pc_1000fa31:                            ; preds = %bb100
  store i32 %stack_var_4.4, i32* @ebx, align 4
  store i32 %v0_1000fa2c, i32* %ecx.global-to-local, align 4
  %v1_1000fa37 = add i32 %stack_var_4.4, 4
  %v2_1000fa37 = inttoptr i32 %v1_1000fa37 to i32*
  %v3_1000fa37 = load i32, i32* %v2_1000fa37, align 4
  %v5_1000fa37 = and i32 %v3_1000fa37, %v0_1000fa2c
  store i1 false, i1* %of.global-to-local, align 1
  %v6_1000fa37 = icmp eq i32 %v5_1000fa37, 0
  store i1 %v6_1000fa37, i1* %zf.global-to-local, align 1
  store i32 %v5_1000fa37, i32* %v2_1000fa37, align 4
  br label %dec_label_pc_1000fa3f

dec_label_pc_1000fa3c:                            ; preds = %bb100, %bb98
  store i32 %stack_var_4.4, i32* @ebx, align 4
  br label %dec_label_pc_1000fa3f

dec_label_pc_1000fa3f:                            ; preds = %dec_label_pc_1000f9d6, %dec_label_pc_1000fa31, %dec_label_pc_1000fa04, %dec_label_pc_1000fa3c
  %v0_1000fa3f = load i32, i32* %edx.global-to-local, align 4
  %v1_1000fa3f = add i32 %v0_1000fa3f, 8
  %v2_1000fa3f = inttoptr i32 %v1_1000fa3f to i32*
  %v3_1000fa3f = load i32, i32* %v2_1000fa3f, align 4
  store i32 %v3_1000fa3f, i32* %ecx.global-to-local, align 4
  %v1_1000fa42 = add i32 %v0_1000fa3f, 4
  %v2_1000fa42 = inttoptr i32 %v1_1000fa42 to i32*
  %v3_1000fa42 = load i32, i32* %v2_1000fa42, align 4
  store i32 %v3_1000fa42, i32* %edi.global-to-local, align 4
  store i1 false, i1* %of.global-to-local, align 1
  store i1 %v15_1000f9ba, i1* %zf.global-to-local, align 1
  %v2_1000fa49 = add i32 %v3_1000fa3f, 4
  %v3_1000fa49 = inttoptr i32 %v2_1000fa49 to i32*
  store i32 %v3_1000fa42, i32* %v3_1000fa49, align 4
  %v0_1000fa4c = load i32, i32* %edx.global-to-local, align 4
  %v1_1000fa4c = add i32 %v0_1000fa4c, 4
  %v2_1000fa4c = inttoptr i32 %v1_1000fa4c to i32*
  %v3_1000fa4c = load i32, i32* %v2_1000fa4c, align 4
  store i32 %v3_1000fa4c, i32* %ecx.global-to-local, align 4
  %v1_1000fa4f = add i32 %v0_1000fa4c, 8
  %v2_1000fa4f = inttoptr i32 %v1_1000fa4f to i32*
  %v3_1000fa4f = load i32, i32* %v2_1000fa4f, align 4
  store i32 %v3_1000fa4f, i32* %edi.global-to-local, align 4
  %v2_1000fa52 = add i32 %v3_1000fa4c, 8
  %v3_1000fa52 = inttoptr i32 %v2_1000fa52 to i32*
  store i32 %v3_1000fa4f, i32* %v3_1000fa52, align 4
  br i1 %v15_1000f9ba, label %dec_label_pc_1000faef, label %dec_label_pc_1000fa5b

dec_label_pc_1000fa5b:                            ; preds = %dec_label_pc_1000fa3f
  store i32 %v3_1000f989, i32* %ecx.global-to-local, align 4
  %v1_1000fa5e = load i32, i32* %esi.global-to-local, align 4
  %v2_1000fa5e = mul i32 %v1_1000fa5e, 8
  %v4_1000fa5e = add i32 %v2_1000fa5e, %v3_1000f9b4
  %v5_1000fa5e = inttoptr i32 %v4_1000fa5e to i32*
  %v6_1000fa5e = load i32, i32* %v5_1000fa5e, align 4
  store i32 %v6_1000fa5e, i32* %edi.global-to-local, align 4
  %v3_1000fa62 = add i32 %v2_1000fa5e, %v3_1000f989
  store i32 %v3_1000fa62, i32* %ecx.global-to-local, align 4
  %v1_1000fa65 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000fa65 = add i32 %v1_1000fa65, 4
  %v3_1000fa65 = inttoptr i32 %v2_1000fa65 to i32*
  store i32 %v6_1000fa5e, i32* %v3_1000fa65, align 4
  %v0_1000fa68 = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000fa68 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000fa68 = add i32 %v1_1000fa68, 8
  %v3_1000fa68 = inttoptr i32 %v2_1000fa68 to i32*
  store i32 %v0_1000fa68, i32* %v3_1000fa68, align 4
  %v0_1000fa6b = load i32, i32* %edx.global-to-local, align 4
  %v1_1000fa6b = load i32, i32* %ecx.global-to-local, align 4
  %v2_1000fa6b = add i32 %v1_1000fa6b, 4
  %v3_1000fa6b = inttoptr i32 %v2_1000fa6b to i32*
  store i32 %v0_1000fa6b, i32* %v3_1000fa6b, align 4
  %v0_1000fa6e = load i32, i32* %edx.global-to-local, align 4
  %v1_1000fa6e = add i32 %v0_1000fa6e, 4
  %v2_1000fa6e = inttoptr i32 %v1_1000fa6e to i32*
  %v3_1000fa6e = load i32, i32* %v2_1000fa6e, align 4
  store i32 %v3_1000fa6e, i32* %ecx.global-to-local, align 4
  %v2_1000fa71 = add i32 %v3_1000fa6e, 8
  %v3_1000fa71 = inttoptr i32 %v2_1000fa71 to i32*
  store i32 %v0_1000fa6e, i32* %v3_1000fa71, align 4
  %v0_1000fa74 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000fa74 = add i32 %v0_1000fa74, 4
  %v2_1000fa74 = inttoptr i32 %v1_1000fa74 to i32*
  %v3_1000fa74 = load i32, i32* %v2_1000fa74, align 4
  store i32 %v3_1000fa74, i32* %ecx.global-to-local, align 4
  %v2_1000fa77 = add i32 %v0_1000fa74, 8
  %v3_1000fa77 = inttoptr i32 %v2_1000fa77 to i32*
  %v4_1000fa77 = load i32, i32* %v3_1000fa77, align 4
  %v5_1000fa77 = sub i32 %v3_1000fa74, %v4_1000fa77
  %v11_1000fa77 = xor i32 %v4_1000fa77, %v3_1000fa74
  %v12_1000fa77 = xor i32 %v5_1000fa77, %v3_1000fa74
  %v13_1000fa77 = and i32 %v12_1000fa77, %v11_1000fa77
  %v14_1000fa77 = icmp slt i32 %v13_1000fa77, 0
  store i1 %v14_1000fa77, i1* %of.global-to-local, align 1
  %v15_1000fa77 = icmp eq i32 %v5_1000fa77, 0
  store i1 %v15_1000fa77, i1* %zf.global-to-local, align 1
  %v1_1000fa7a = icmp eq i1 %v15_1000fa77, false
  br i1 %v1_1000fa7a, label %dec_label_pc_1000fae0, label %dec_label_pc_1000fa7c

dec_label_pc_1000fa7c:                            ; preds = %dec_label_pc_1000fa5b
  %v0_1000fa7c = load i32, i32* %esi.global-to-local, align 4
  %v1_1000fa7c = load i32, i32* %eax.global-to-local, align 4
  %v2_1000fa7c = add i32 %v0_1000fa7c, 4
  %v3_1000fa7c = add i32 %v2_1000fa7c, %v1_1000fa7c
  %v4_1000fa7c = inttoptr i32 %v3_1000fa7c to i8*
  %v5_1000fa7c = load i8, i8* %v4_1000fa7c, align 1
  %v1_1000fa80 = add i32 %v0_1000fa7c, -32
  %v3_1000fa80 = sub i32 31, %v0_1000fa7c
  %v4_1000fa80 = and i32 %v3_1000fa80, %v0_1000fa7c
  %v5_1000fa80 = icmp slt i32 %v4_1000fa80, 0
  %v7_1000fa80 = icmp slt i32 %v1_1000fa80, 0
  %v2_1000fa86 = icmp eq i1 %v7_1000fa80, %v5_1000fa80
  %v2_1000fab1 = add i8 %v5_1000fa7c, 1
  %v14_1000fab1 = zext i8 %v2_1000fab1 to i32
  %v16_1000fab1 = and i32 %v3_1000fa74, -256
  %v17_1000fab1 = or i32 %v14_1000fab1, %v16_1000fab1
  store i32 %v17_1000fab1, i32* %ecx.global-to-local, align 4
  store i1 false, i1* %of.global-to-local, align 1
  %v4_1000fab3 = icmp eq i8 %v5_1000fa7c, 0
  store i1 %v4_1000fab3, i1* %zf.global-to-local, align 1
  store i8 %v2_1000fab1, i8* %v4_1000fa7c, align 1
  %v0_1000fabb = load i1, i1* %zf.global-to-local, align 1
  %v1_1000fabb = icmp eq i1 %v0_1000fabb, false
  br i1 %v2_1000fa86, label %dec_label_pc_1000fab1, label %dec_label_pc_1000fa88

dec_label_pc_1000fa88:                            ; preds = %dec_label_pc_1000fa7c
  br i1 %v1_1000fabb, label %dec_label_pc_1000fa9f, label %dec_label_pc_1000fa94

dec_label_pc_1000fa94:                            ; preds = %dec_label_pc_1000fa88
  store i32 -2147483648, i32* %edi.global-to-local, align 4
  %v0_1000fa99 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000fa99, i32* %ecx.global-to-local, align 4
  %v2_1000fa9b = and i32 %v0_1000fa99, 31
  %v4_1000fa9b = icmp eq i32 %v2_1000fa9b, 0
  br i1 %v4_1000fa9b, label %bb102, label %bb101

bb101:                                            ; preds = %dec_label_pc_1000fa94
  %v3_1000fa9b = load i1, i1* %of.global-to-local, align 1
  %v5_1000fa9b = lshr i32 -2147483648, %v2_1000fa9b
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000fa9b, i32* %edi.global-to-local, align 4
  %v16_1000fa9b = icmp eq i32 %v2_1000fa9b, 1
  %v18_1000fa9b = or i1 %v16_1000fa9b, %v3_1000fa9b
  store i1 %v18_1000fa9b, i1* %of.global-to-local, align 1
  br label %bb102

bb102:                                            ; preds = %dec_label_pc_1000fa94, %bb101
  %v3_1000fa9d = phi i32 [ -2147483648, %dec_label_pc_1000fa94 ], [ %v5_1000fa9b, %bb101 ]
  %v0_1000fa9d = load i32, i32* @ebx, align 4
  %v1_1000fa9d = inttoptr i32 %v0_1000fa9d to i32*
  %v2_1000fa9d = load i32, i32* %v1_1000fa9d, align 4
  %v4_1000fa9d = or i32 %v2_1000fa9d, %v3_1000fa9d
  store i1 false, i1* %of.global-to-local, align 1
  %v5_1000fa9d = icmp eq i32 %v4_1000fa9d, 0
  store i1 %v5_1000fa9d, i1* %zf.global-to-local, align 1
  store i32 %v4_1000fa9d, i32* %v1_1000fa9d, align 4
  br label %dec_label_pc_1000fa9f

dec_label_pc_1000fa9f:                            ; preds = %dec_label_pc_1000fa88, %bb102
  store i32 -2147483648, i32* %edi.global-to-local, align 4
  %v0_1000faa4 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000faa4, i32* %ecx.global-to-local, align 4
  %v2_1000faa6 = and i32 %v0_1000faa4, 31
  %v4_1000faa6 = icmp eq i32 %v2_1000faa6, 0
  br i1 %v4_1000faa6, label %bb104, label %bb103

bb103:                                            ; preds = %dec_label_pc_1000fa9f
  %v3_1000faa6 = load i1, i1* %of.global-to-local, align 1
  %v5_1000faa6 = lshr i32 -2147483648, %v2_1000faa6
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000faa6, i32* %edi.global-to-local, align 4
  %v16_1000faa6 = icmp eq i32 %v2_1000faa6, 1
  %v18_1000faa6 = or i1 %v16_1000faa6, %v3_1000faa6
  store i1 %v18_1000faa6, i1* %of.global-to-local, align 1
  br label %bb104

bb104:                                            ; preds = %dec_label_pc_1000fa9f, %bb103
  %v7_1000faab = phi i32 [ -2147483648, %dec_label_pc_1000fa9f ], [ %v5_1000faa6, %bb103 ]
  store i32 %v1_1000f99b, i32* %ecx.global-to-local, align 4
  %v0_1000faab = load i32, i32* %eax.global-to-local, align 4
  %v3_1000faab = add i32 %v2_1000f993, 68
  %v4_1000faab = add i32 %v3_1000faab, %v0_1000faab
  %v5_1000faab = inttoptr i32 %v4_1000faab to i32*
  %v6_1000faab = load i32, i32* %v5_1000faab, align 4
  %v8_1000faab = or i32 %v6_1000faab, %v7_1000faab
  store i1 false, i1* %of.global-to-local, align 1
  %v9_1000faab = icmp eq i32 %v8_1000faab, 0
  store i1 %v9_1000faab, i1* %zf.global-to-local, align 1
  store i32 %v8_1000faab, i32* %v5_1000faab, align 4
  br label %dec_label_pc_1000fae0

dec_label_pc_1000fab1:                            ; preds = %dec_label_pc_1000fa7c
  br i1 %v1_1000fabb, label %dec_label_pc_1000faca, label %dec_label_pc_1000fabd

dec_label_pc_1000fabd:                            ; preds = %dec_label_pc_1000fab1
  %v0_1000fabd = load i32, i32* %esi.global-to-local, align 4
  %v1_1000fabd = add i32 %v0_1000fabd, -32
  store i32 %v1_1000fabd, i32* %ecx.global-to-local, align 4
  store i32 -2147483648, i32* %edi.global-to-local, align 4
  %v2_1000fac5 = and i32 %v1_1000fabd, 31
  %v4_1000fac5 = icmp eq i32 %v2_1000fac5, 0
  br i1 %v4_1000fac5, label %bb106, label %bb105

bb105:                                            ; preds = %dec_label_pc_1000fabd
  %v3_1000fac5 = load i1, i1* %of.global-to-local, align 1
  %v5_1000fac5 = lshr i32 -2147483648, %v2_1000fac5
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000fac5, i32* %edi.global-to-local, align 4
  %v16_1000fac5 = icmp eq i32 %v2_1000fac5, 1
  %v18_1000fac5 = or i1 %v16_1000fac5, %v3_1000fac5
  store i1 %v18_1000fac5, i1* %of.global-to-local, align 1
  br label %bb106

bb106:                                            ; preds = %dec_label_pc_1000fabd, %bb105
  %v4_1000fac7 = phi i32 [ -2147483648, %dec_label_pc_1000fabd ], [ %v5_1000fac5, %bb105 ]
  %v0_1000fac7 = load i32, i32* @ebx, align 4
  %v1_1000fac7 = add i32 %v0_1000fac7, 4
  %v2_1000fac7 = inttoptr i32 %v1_1000fac7 to i32*
  %v3_1000fac7 = load i32, i32* %v2_1000fac7, align 4
  %v5_1000fac7 = or i32 %v3_1000fac7, %v4_1000fac7
  store i1 false, i1* %of.global-to-local, align 1
  %v6_1000fac7 = icmp eq i32 %v5_1000fac7, 0
  store i1 %v6_1000fac7, i1* %zf.global-to-local, align 1
  store i32 %v5_1000fac7, i32* %v2_1000fac7, align 4
  br label %dec_label_pc_1000faca

dec_label_pc_1000faca:                            ; preds = %dec_label_pc_1000fab1, %bb106
  %v0_1000facd = load i32, i32* %eax.global-to-local, align 4
  %v3_1000facd = add i32 %v2_1000f993, 196
  %v4_1000facd = add i32 %v3_1000facd, %v0_1000facd
  store i32 %v4_1000facd, i32* %edi.global-to-local, align 4
  %v0_1000fad4 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000fad4 = add i32 %v0_1000fad4, -32
  store i32 %v1_1000fad4, i32* %ecx.global-to-local, align 4
  store i32 -2147483648, i32* %esi.global-to-local, align 4
  %v2_1000fadc = and i32 %v1_1000fad4, 31
  %v4_1000fadc = icmp eq i32 %v2_1000fadc, 0
  br i1 %v4_1000fadc, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_1000faca
  %v3_1000fadc = load i1, i1* %of.global-to-local, align 1
  %v5_1000fadc = lshr i32 -2147483648, %v2_1000fadc
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000fadc, i32* %esi.global-to-local, align 4
  %v16_1000fadc = icmp eq i32 %v2_1000fadc, 1
  %v18_1000fadc = or i1 %v16_1000fadc, %v3_1000fadc
  store i1 %v18_1000fadc, i1* %of.global-to-local, align 1
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_1000faca, %bb107
  %v3_1000fade = phi i32 [ -2147483648, %dec_label_pc_1000faca ], [ %v5_1000fadc, %bb107 ]
  %v1_1000fade = inttoptr i32 %v4_1000facd to i32*
  %v2_1000fade = load i32, i32* %v1_1000fade, align 4
  %v4_1000fade = or i32 %v2_1000fade, %v3_1000fade
  store i1 false, i1* %of.global-to-local, align 1
  %v5_1000fade = icmp eq i32 %v4_1000fade, 0
  store i1 %v5_1000fade, i1* %zf.global-to-local, align 1
  store i32 %v4_1000fade, i32* %v1_1000fade, align 4
  br label %dec_label_pc_1000fae0

dec_label_pc_1000fae0:                            ; preds = %dec_label_pc_1000fa5b, %bb104, %bb108
  store i32 %v5_1000f9ba, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000fae3

dec_label_pc_1000fae3:                            ; preds = %dec_label_pc_1000f9ce, %dec_label_pc_1000fae0
  store i1 false, i1* %of.global-to-local, align 1
  store i1 %v15_1000f9ba, i1* %zf.global-to-local, align 1
  br i1 %v15_1000f9ba, label %dec_label_pc_1000faf2, label %dec_label_pc_1000fae7

dec_label_pc_1000fae7:                            ; preds = %dec_label_pc_1000fae3
  %v1_1000fae7 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000fae7 = inttoptr i32 %v1_1000fae7 to i32*
  store i32 %v5_1000f9ba, i32* %v2_1000fae7, align 4
  %v0_1000fae9 = load i32, i32* %ecx.global-to-local, align 4
  %v2_1000fae9 = load i32, i32* %edx.global-to-local, align 4
  %v3_1000fae9 = add i32 %v0_1000fae9, -4
  %v4_1000fae9 = add i32 %v3_1000fae9, %v2_1000fae9
  %v5_1000fae9 = inttoptr i32 %v4_1000fae9 to i32*
  store i32 %v0_1000fae9, i32* %v5_1000fae9, align 4
  %v1_1000faf5.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000faf2

dec_label_pc_1000faef:                            ; preds = %dec_label_pc_1000fa3f
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000faf2

dec_label_pc_1000faf2:                            ; preds = %dec_label_pc_1000fae3, %dec_label_pc_1000fae7, %dec_label_pc_1000faef
  %v1_1000faf5 = phi i32 [ 0, %dec_label_pc_1000fae3 ], [ %v1_1000faf5.pre, %dec_label_pc_1000fae7 ], [ 0, %dec_label_pc_1000faef ]
  store i32 %v1_1000f84f, i32* %esi.global-to-local, align 4
  %v0_1000faf5 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000faf5 = add i32 %v0_1000faf5, %v1_1000faf5
  store i32 %v2_1000faf5, i32* %edx.global-to-local, align 4
  %v1_1000faf7 = or i32 %v1_1000f84f, 1
  store i32 %v1_1000faf7, i32* %ecx.global-to-local, align 4
  %v2_1000fafa = inttoptr i32 %v2_1000faf5 to i32*
  store i32 %v1_1000faf7, i32* %v2_1000fafa, align 4
  %v0_1000fafc = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000fafc = load i32, i32* %edx.global-to-local, align 4
  %v2_1000fafc = load i32, i32* %esi.global-to-local, align 4
  %v3_1000fafc = add i32 %v1_1000fafc, -4
  %v4_1000fafc = add i32 %v3_1000fafc, %v2_1000fafc
  %v5_1000fafc = inttoptr i32 %v4_1000fafc to i32*
  store i32 %v0_1000fafc, i32* %v5_1000fafc, align 4
  store i32 %v3_1000f989, i32* %esi.global-to-local, align 4
  %v1_1000fb03 = inttoptr i32 %v3_1000f989 to i32*
  %v2_1000fb03 = load i32, i32* %v1_1000fb03, align 4
  store i32 %v2_1000fb03, i32* %ecx.global-to-local, align 4
  store i1 false, i1* %of.global-to-local, align 1
  %v1_1000fb05 = icmp eq i32 %v2_1000fb03, 0
  store i1 %v1_1000fb05, i1* %zf.global-to-local, align 1
  %v1_1000fb07 = add i32 %v2_1000fb03, 1
  store i32 %v1_1000fb07, i32* %edi.global-to-local, align 4
  store i32 %v1_1000fb07, i32* %v1_1000fb03, align 4
  %v1_1000fb0c = icmp eq i1 %v1_1000fb05, false
  br i1 %v1_1000fb0c, label %dec_label_pc_1000fb28, label %dec_label_pc_1000fb0e

dec_label_pc_1000fb0e:                            ; preds = %dec_label_pc_1000faf2
  %v0_1000fb0e = load i32, i32* @ebx, align 4
  %v1_1000fb0e = load i32, i32* @global_var_1001bb00.151, align 256
  %v2_1000fb0e = sub i32 %v0_1000fb0e, %v1_1000fb0e
  %v8_1000fb0e = xor i32 %v1_1000fb0e, %v0_1000fb0e
  %v9_1000fb0e = xor i32 %v2_1000fb0e, %v0_1000fb0e
  %v10_1000fb0e = and i32 %v9_1000fb0e, %v8_1000fb0e
  %v11_1000fb0e = icmp slt i32 %v10_1000fb0e, 0
  store i1 %v11_1000fb0e, i1* %of.global-to-local, align 1
  %v12_1000fb0e = icmp eq i32 %v2_1000fb0e, 0
  store i1 %v12_1000fb0e, i1* %zf.global-to-local, align 1
  %v1_1000fb14 = icmp eq i1 %v12_1000fb0e, false
  br i1 %v1_1000fb14, label %dec_label_pc_1000fb28, label %dec_label_pc_1000fb16

dec_label_pc_1000fb16:                            ; preds = %dec_label_pc_1000fb0e
  store i32 %v1_1000f99b, i32* %ecx.global-to-local, align 4
  %v1_1000fb19 = load i32, i32* @global_var_1001baf8.154, align 8
  %v2_1000fb19 = sub i32 %v1_1000f99b, %v1_1000fb19
  %v8_1000fb19 = xor i32 %v1_1000fb19, %v1_1000f99b
  %v9_1000fb19 = xor i32 %v2_1000fb19, %v1_1000f99b
  %v10_1000fb19 = and i32 %v9_1000fb19, %v8_1000fb19
  %v11_1000fb19 = icmp slt i32 %v10_1000fb19, 0
  store i1 %v11_1000fb19, i1* %of.global-to-local, align 1
  %v12_1000fb19 = icmp eq i32 %v2_1000fb19, 0
  store i1 %v12_1000fb19, i1* %zf.global-to-local, align 1
  %v1_1000fb1f = icmp eq i1 %v12_1000fb19, false
  br i1 %v1_1000fb1f, label %dec_label_pc_1000fb28, label %dec_label_pc_1000fb21

dec_label_pc_1000fb21:                            ; preds = %dec_label_pc_1000fb16
  store i1 false, i1* %of.global-to-local, align 1
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* @global_var_1001bb00.151, align 256
  br label %dec_label_pc_1000fb28

dec_label_pc_1000fb28:                            ; preds = %dec_label_pc_1000fb16, %dec_label_pc_1000fb0e, %dec_label_pc_1000faf2, %dec_label_pc_1000fb21
  store i32 %v1_1000f99b, i32* %ecx.global-to-local, align 4
  %v1_1000fb2b = load i32, i32* %eax.global-to-local, align 4
  %v2_1000fb2b = inttoptr i32 %v1_1000fb2b to i32*
  store i32 %v1_1000f99b, i32* %v2_1000fb2b, align 4
  %v0_1000fb2d = load i32, i32* %edx.global-to-local, align 4
  %v1_1000fb2d = add i32 %v0_1000fb2d, 4
  br label %dec_label_pc_1000fb30

dec_label_pc_1000fb30:                            ; preds = %dec_label_pc_1000f91a, %dec_label_pc_1000fb28
  %storemerge3 = phi i32 [ 0, %dec_label_pc_1000f91a ], [ %v1_1000fb2d, %dec_label_pc_1000fb28 ]
  store i32 %storemerge3, i32* %eax.global-to-local, align 4
  %v2_1000fb30 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1000fb30, i32* %edi.global-to-local, align 4
  store i32 %v0_1000f83e, i32* %esi.global-to-local, align 4
  store i32 %v0_1000f83d, i32* %ebx.global-to-local, align 4
  ret i32 %storemerge3

; uselistorder directives
  uselistorder i32 %v2_1000fb19, { 1, 0 }
  uselistorder i32 %v2_1000fb0e, { 1, 0 }
  uselistorder i32 %v1_1000faf7, { 1, 0 }
  uselistorder i32 %v0_1000fae9, { 1, 0 }
  uselistorder i1 %v1_1000fabb, { 1, 0 }
  uselistorder i8 %v5_1000fa7c, { 1, 0 }
  uselistorder i32 %v0_1000fa7c, { 0, 2, 1, 3 }
  uselistorder i32 %v5_1000fa77, { 1, 0 }
  uselistorder i32 %v3_1000fa74, { 2, 0, 1, 3, 4 }
  uselistorder i8 %v3_1000fa2a, { 1, 0 }
  uselistorder i8 %v2_1000fa2a, { 1, 0, 2 }
  uselistorder i8 %v3_1000fa00, { 1, 0 }
  uselistorder i8 %v2_1000fa00, { 1, 0, 2 }
  uselistorder i32 %v0_1000f9f3, { 0, 2, 1, 3 }
  uselistorder i1 %v6_1000f9de, { 1, 0, 2 }
  uselistorder i32 %v2_1000f9de, { 1, 0, 2 }
  uselistorder i32 %v5_1000f9d9, { 1, 0 }
  uselistorder i32 %v2_1000f9ce, { 1, 0 }
  uselistorder i1 %tmp144, { 1, 0 }
  uselistorder i32 %v2_1000f9c2, { 1, 0 }
  uselistorder i1 %v15_1000f9ba, { 1, 0, 2, 3 }
  uselistorder i32 %v5_1000f9ba, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v6_1000f9b4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1000f9ef, { 5, 2, 4, 3, 8, 0, 7, 6, 1, 9, 10 }
  uselistorder i32 %v2_1000f9ac, { 3, 2, 0, 1 }
  uselistorder i32 %edi.promoted, { 1, 0 }
  uselistorder i32 %ecx.promoted, { 0, 2, 1 }
  uselistorder i32 %v2_1000f993, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v3_1000f989, { 3, 2, 0, 1, 5, 4, 6 }
  uselistorder i32 %v1_1000f99b, { 5, 4, 0, 1, 7, 6, 8, 9, 3, 2 }
  uselistorder i32 %v1_1000f971, { 1, 2, 0 }
  uselistorder i32 %v1_1000f94e.pre-phi, { 3, 0, 2, 1 }
  uselistorder i32 %v1_1000f942, { 1, 0 }
  uselistorder i32 %v3_1000f93b, { 2, 1, 0 }
  uselistorder i32 %v3_1000f934, { 1, 0 }
  uselistorder i32 %v1_1000f92c, { 1, 0 }
  uselistorder i32 %v2_1000f92a, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v3_1000f927, { 0, 5, 4, 6, 1, 7, 8, 2, 3, 9, 10 }
  uselistorder i32 %v0_1000f921, { 1, 0 }
  uselistorder i32 %stack_var_4.4, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v3_1000f915, { 1, 0 }
  uselistorder i32 %v2_1000f915, { 0, 2, 1 }
  uselistorder i32 %v0_1000f906, { 2, 0, 1 }
  uselistorder i1 %storemerge38, { 1, 0 }
  uselistorder i32 %v0_1000f8f4.lcssa, { 0, 2, 1 }
  uselistorder i32 %v1_1000f8ef, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_1000f8f4121, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_1000f8e2122, { 1, 0 }
  uselistorder i32 %v6_1000f8db, { 1, 0 }
  uselistorder i32 %v1_1000f8d3, { 2, 0, 1, 3, 5, 6, 4 }
  uselistorder i32 %v0_1000f8cd, { 2, 0, 1, 3, 5, 4 }
  uselistorder i32 %v6_1000f8c818, { 1, 0 }
  uselistorder i1 %storemerge39, { 1, 0 }
  uselistorder i32 %v0_1000f8c817117, { 4, 1, 5, 0, 7, 6, 2, 3 }
  uselistorder i32 %v0_1000f8c817.lcssa, { 2, 1, 0 }
  uselistorder i32 %v1_1000f8bf, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_1000f8c817127, { 0, 1, 2, 5, 4, 3 }
  uselistorder i32 %v2_1000f8aa128, { 1, 0 }
  uselistorder i32 %v6_1000f8a3, { 1, 0 }
  uselistorder i32 %v0_1000f8a3, { 2, 4, 0, 1, 3 }
  uselistorder i32 %v6_1000f89b, { 1, 0 }
  uselistorder i32 %v1_1000f898, { 3, 0, 1, 5, 4, 6, 2 }
  uselistorder i32 %v0_1000f898, { 3, 0, 2, 1 }
  uselistorder i32 %v2_1000f883, { 1, 0 }
  uselistorder i32 %v0_1000f87c, { 3, 4, 9, 10, 5, 6, 11, 12, 1, 2, 13, 0, 7, 8, 15, 14, 16, 17 }
  uselistorder i32 %stack_var_-16.0, { 4, 0, 5, 6, 1, 2, 3 }
  uselistorder i32 %v2_1000f855, { 2, 1, 0 }
  uselistorder i32 %v3_1000f843, { 1, 0, 2, 11, 12, 3, 9, 10, 4, 13, 5, 14, 15, 6, 8, 7, 16 }
  uselistorder i32 %v0_1000f837, { 0, 1, 7, 2, 3, 4, 5, 6, 8, 9 }
  uselistorder i1* %zf.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 11, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 0, 34, 35, 36, 37, 53, 54, 55, 56, 38, 39, 57, 42, 41, 1, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i1* %of.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 15, 16, 17, 18, 19, 13, 14, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 0, 36, 37, 34, 39, 53, 54, 55, 56, 40, 38, 43, 42, 1, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i32* %esi.global-to-local, { 0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 6, 13, 14 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 12, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 18 }
  uselistorder i32* %ecx.global-to-local, { 1, 2, 3, 4, 5, 6, 29, 30, 7, 8, 9, 11, 12, 13, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 0, 33, 34, 35, 36, 37, 44, 45, 46, 47, 38, 39, 40, 41, 42, 43 }
  uselistorder i32* %eax.global-to-local, { 2, 7, 8, 9, 10, 11, 12, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 132, { 6, 0, 1, 5, 2, 4, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_1000fb30, { 1, 0 }
  uselistorder label %dec_label_pc_1000fb28, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1000faf2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1000fae3, { 1, 0 }
  uselistorder label %dec_label_pc_1000fae0, { 2, 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_1000faca, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %dec_label_pc_1000fa9f, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %dec_label_pc_1000fa3f, { 3, 1, 2, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %dec_label_pc_1000f9ce, { 1, 0 }
  uselistorder label %dec_label_pc_1000f9ac, { 1, 0 }
  uselistorder label %dec_label_pc_1000f97f, { 1, 0 }
  uselistorder label %dec_label_pc_1000f965, { 1, 0 }
  uselistorder label %dec_label_pc_1000f948, { 1, 0 }
  uselistorder label %dec_label_pc_1000f921, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000f91a, { 1, 0 }
  uselistorder label %dec_label_pc_1000f8e9, { 1, 0 }
  uselistorder label %dec_label_pc_1000f8de, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1000f8cd, { 1, 0 }
  uselistorder label %dec_label_pc_1000f8b1, { 1, 0 }
  uselistorder label %dec_label_pc_1000f8a3.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_1000f88a, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
}

define i32 @function_1000fb35() local_unnamed_addr {
dec_label_pc_1000fb35:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1000fb35 = load i32, i32* @global_var_1001bb04.149, align 4
  %v0_1000fb3a = load i32, i32* @global_var_1001baf4.153, align 4
  %v0_1000fb41 = load i32, i32* @edi, align 4
  store i32 %v0_1000fb41, i32* %stack_var_-8, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v12_1000fb44 = icmp eq i32 %v0_1000fb35, %v0_1000fb3a
  %v1_1000fb46 = icmp eq i1 %v12_1000fb44, false
  br i1 %v1_1000fb46, label %dec_label_pc_1000fb35.dec_label_pc_1000fb78_crit_edge, label %dec_label_pc_1000fb48

dec_label_pc_1000fb35.dec_label_pc_1000fb78_crit_edge: ; preds = %dec_label_pc_1000fb35
  %v0_1000fb78.pre = load i32, i32* @global_var_1001bb08.150, align 8
  br label %dec_label_pc_1000fb78

dec_label_pc_1000fb48:                            ; preds = %dec_label_pc_1000fb35
  %v2_1000fb48 = mul i32 %v0_1000fb3a, 4
  %v3_1000fb48 = add i32 %v0_1000fb3a, 80
  %v4_1000fb48 = add i32 %v3_1000fb48, %v2_1000fb48
  %v2_1000fb4c = mul i32 %v4_1000fb48, 4
  %v0_1000fb50 = load i32, i32* @global_var_1001bb08.150, align 8
  %v0_1000fb57 = load i32, i32* @global_var_1001bb10.104, align 16
  %v8_1000fb5d = inttoptr i32 %v0_1000fb57 to i32*
  %v9_1000fb5d = inttoptr i32 %v0_1000fb50 to i32*
  %v10_1000fb5d = call i32* @HeapReAlloc(i32* %v8_1000fb5d, i32 0, i32* %v9_1000fb5d, i32 %v2_1000fb4c)
  %v11_1000fb5d = ptrtoint i32* %v10_1000fb5d to i32
  %v1_1000fb63 = load i32, i32* %edi.global-to-local, align 4
  %v12_1000fb63 = icmp eq i32 %v11_1000fb5d, %v1_1000fb63
  br i1 %v12_1000fb63, label %dec_label_pc_1000fbc8, label %dec_label_pc_1000fb67

dec_label_pc_1000fb67:                            ; preds = %dec_label_pc_1000fb48
  %v0_1000fb67 = load i32, i32* @global_var_1001baf4.153, align 4
  %v1_1000fb67 = add i32 %v0_1000fb67, 16
  store i32 %v1_1000fb67, i32* @global_var_1001baf4.153, align 4
  store i32 %v11_1000fb5d, i32* @global_var_1001bb08.150, align 8
  %v0_1000fb73 = load i32, i32* @global_var_1001bb04.149, align 4
  br label %dec_label_pc_1000fb78

dec_label_pc_1000fb78:                            ; preds = %dec_label_pc_1000fb35.dec_label_pc_1000fb78_crit_edge, %dec_label_pc_1000fb67
  %v0_1000fb85 = phi i32 [ %v0_1000fb35, %dec_label_pc_1000fb35.dec_label_pc_1000fb78_crit_edge ], [ %v0_1000fb73, %dec_label_pc_1000fb67 ]
  %v0_1000fb78 = phi i32 [ %v0_1000fb78.pre, %dec_label_pc_1000fb35.dec_label_pc_1000fb78_crit_edge ], [ %v11_1000fb5d, %dec_label_pc_1000fb67 ]
  %v0_1000fb88 = load i32, i32* @global_var_1001bb10.104, align 16
  %v2_1000fb8e = mul i32 %v0_1000fb85, 20
  %v3_1000fb8e = add i32 %v0_1000fb78, %v2_1000fb8e
  store i32 %v3_1000fb8e, i32* %esi.global-to-local, align 4
  %v5_1000fb91 = inttoptr i32 %v0_1000fb88 to i32*
  %v6_1000fb91 = call i32* @HeapAlloc(i32* %v5_1000fb91, i32 8, i32 16836)
  %v7_1000fb91 = ptrtoint i32* %v6_1000fb91 to i32
  %v1_1000fb97 = load i32, i32* %edi.global-to-local, align 4
  %v12_1000fb97 = icmp eq i32 %v7_1000fb91, %v1_1000fb97
  %v2_1000fb99 = add i32 %v3_1000fb8e, 16
  %v3_1000fb99 = inttoptr i32 %v2_1000fb99 to i32*
  store i32 %v7_1000fb91, i32* %v3_1000fb99, align 4
  br i1 %v12_1000fb97, label %dec_label_pc_1000fbc8, label %dec_label_pc_1000fb9e

dec_label_pc_1000fb9e:                            ; preds = %dec_label_pc_1000fb78
  %v0_1000fbaa = load i32, i32* %edi.global-to-local, align 4
  %v6_1000fbab = inttoptr i32 %v0_1000fbaa to i32*
  %v7_1000fbab = call i32* @VirtualAlloc(i32* %v6_1000fbab, i32 1048576, i32 8192, i32 4)
  %v8_1000fbab = ptrtoint i32* %v7_1000fbab to i32
  %v12_1000fbb1 = icmp eq i32 %v8_1000fbab, %v0_1000fbaa
  %v1_1000fbb3 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000fbb3 = add i32 %v1_1000fbb3, 12
  %v3_1000fbb3 = inttoptr i32 %v2_1000fbb3 to i32*
  store i32 %v8_1000fbab, i32* %v3_1000fbb3, align 4
  %v1_1000fbb6 = icmp eq i1 %v12_1000fbb1, false
  %v4_1000fbcc = load i32, i32* %esi.global-to-local, align 4
  br i1 %v1_1000fbb6, label %dec_label_pc_1000fbcc, label %dec_label_pc_1000fbb8

dec_label_pc_1000fbb8:                            ; preds = %dec_label_pc_1000fb9e
  %v1_1000fbb8 = add i32 %v4_1000fbcc, 16
  %v2_1000fbb8 = inttoptr i32 %v1_1000fbb8 to i32*
  %v3_1000fbb8 = load i32, i32* %v2_1000fbb8, align 4
  %v0_1000fbbb = load i32, i32* %edi.global-to-local, align 4
  %v0_1000fbbc = load i32, i32* @global_var_1001bb10.104, align 16
  %v5_1000fbc2 = inttoptr i32 %v0_1000fbbc to i32*
  %v6_1000fbc2 = inttoptr i32 %v3_1000fbb8 to i32*
  %v7_1000fbc2 = call i1 @HeapFree(i32* %v5_1000fbc2, i32 %v0_1000fbbb, i32* %v6_1000fbc2)
  br label %dec_label_pc_1000fbc8

dec_label_pc_1000fbc8:                            ; preds = %dec_label_pc_1000fb78, %dec_label_pc_1000fb48, %dec_label_pc_1000fbb8
  br label %dec_label_pc_1000fbe3

dec_label_pc_1000fbcc:                            ; preds = %dec_label_pc_1000fb9e
  %v5_1000fbcc = add i32 %v4_1000fbcc, 8
  %v6_1000fbcc = inttoptr i32 %v5_1000fbcc to i32*
  store i32 -1, i32* %v6_1000fbcc, align 4
  %v0_1000fbd0 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000fbd0 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000fbd0 = inttoptr i32 %v1_1000fbd0 to i32*
  store i32 %v0_1000fbd0, i32* %v2_1000fbd0, align 4
  %v0_1000fbd2 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000fbd2 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000fbd2 = add i32 %v1_1000fbd2, 4
  %v3_1000fbd2 = inttoptr i32 %v2_1000fbd2 to i32*
  store i32 %v0_1000fbd2, i32* %v3_1000fbd2, align 4
  %v0_1000fbd5 = load i32, i32* @global_var_1001bb04.149, align 4
  %v1_1000fbd5 = add i32 %v0_1000fbd5, 1
  store i32 %v1_1000fbd5, i32* @global_var_1001bb04.149, align 4
  %v0_1000fbdb = load i32, i32* %esi.global-to-local, align 4
  %v1_1000fbdb = add i32 %v0_1000fbdb, 16
  %v2_1000fbdb = inttoptr i32 %v1_1000fbdb to i32*
  %v3_1000fbdb = load i32, i32* %v2_1000fbdb, align 4
  %v4_1000fbde = inttoptr i32 %v3_1000fbdb to i32*
  store i32 -1, i32* %v4_1000fbde, align 4
  %v0_1000fbe1 = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000fbe3

dec_label_pc_1000fbe3:                            ; preds = %dec_label_pc_1000fbc8, %dec_label_pc_1000fbcc
  %storemerge = phi i32 [ 0, %dec_label_pc_1000fbc8 ], [ %v0_1000fbe1, %dec_label_pc_1000fbcc ]
  %v2_1000fbe3 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000fbe3, i32* @edi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_1000fbcc, { 1, 0 }
  uselistorder i32 %v8_1000fbab, { 1, 0 }
  uselistorder i32 %v7_1000fb91, { 1, 0 }
  uselistorder i32 %v11_1000fb5d, { 1, 2, 0 }
  uselistorder i32 %v0_1000fb3a, { 1, 2, 0 }
  uselistorder i32 %v0_1000fb35, { 1, 0 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 1048576, { 1, 2, 0 }
  uselistorder i32* @global_var_1001bb08.150, { 1, 2, 0, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder label %dec_label_pc_1000fbe3, { 1, 0 }
  uselistorder label %dec_label_pc_1000fbc8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000fb78, { 1, 0 }
}

define i32 @function_1000fbe6(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000fbe6:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %of.global-to-local = alloca i1, align 1
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v0_1000fbef = load i32, i32* @edi, align 4
  store i32 %v0_1000fbef, i32* %stack_var_-20, align 4
  %v1_1000fbf0 = add i32 %arg1, 16
  %v2_1000fbf0 = inttoptr i32 %v1_1000fbf0 to i32*
  %v3_1000fbf0 = load i32, i32* %v2_1000fbf0, align 4
  store i32 %v3_1000fbf0, i32* %esi.global-to-local, align 4
  %v1_1000fbf3 = add i32 %arg1, 8
  %v2_1000fbf3 = inttoptr i32 %v1_1000fbf3 to i32*
  %v3_1000fbf3 = load i32, i32* %v2_1000fbf3, align 4
  store i32 %v3_1000fbf3, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i1 false, i1* %of.global-to-local, align 1
  %v1_1000fbf85 = icmp eq i32 %v3_1000fbf3, 0
  store i1 %v1_1000fbf85, i1* %zf.global-to-local, align 1
  %v2_1000fbf86 = icmp slt i32 %v3_1000fbf3, 0
  %v2_1000fbfa7 = icmp eq i1 %v2_1000fbf86, false
  br i1 %v2_1000fbfa7, label %dec_label_pc_1000fbfc, label %dec_label_pc_1000fc01

dec_label_pc_1000fbfc:                            ; preds = %dec_label_pc_1000fbe6, %dec_label_pc_1000fbfc
  %v1_1000fbfe9 = phi i32 [ %v1_1000fbfe, %dec_label_pc_1000fbfc ], [ 0, %dec_label_pc_1000fbe6 ]
  %v2_1000fbfc8 = phi i32 [ %v2_1000fbfc, %dec_label_pc_1000fbfc ], [ %v3_1000fbf3, %dec_label_pc_1000fbe6 ]
  %v2_1000fbfc = mul i32 %v2_1000fbfc8, 2
  %v1_1000fbfe = add i32 %v1_1000fbfe9, 1
  %v2_1000fbf8 = icmp slt i32 %v2_1000fbfc, 0
  %v2_1000fbfa = icmp eq i1 %v2_1000fbf8, false
  br i1 %v2_1000fbfa, label %dec_label_pc_1000fbfc, label %dec_label_pc_1000fbf8.dec_label_pc_1000fc01_crit_edge

dec_label_pc_1000fbf8.dec_label_pc_1000fc01_crit_edge: ; preds = %dec_label_pc_1000fbfc
  %v1_1000fbf8 = icmp eq i32 %v2_1000fbfc, 0
  store i32 %v2_1000fbfc, i32* %eax.global-to-local, align 4
  store i1 %v1_1000fbf8, i1* %zf.global-to-local, align 1
  store i1 false, i1* %of.global-to-local, align 1
  store i32 %v1_1000fbfe, i32* %ebx.global-to-local, align 4
  %phitmp15 = sext i32 %v1_1000fbfe to i64
  br label %dec_label_pc_1000fc01

dec_label_pc_1000fc01:                            ; preds = %dec_label_pc_1000fbf8.dec_label_pc_1000fc01_crit_edge, %dec_label_pc_1000fbe6
  %v0_1000fc01 = phi i64 [ %phitmp15, %dec_label_pc_1000fbf8.dec_label_pc_1000fc01_crit_edge ], [ 0, %dec_label_pc_1000fbe6 ]
  %v3_1000fc05 = mul nsw i64 %v0_1000fc01, 516
  %v4_1000fc05 = trunc i64 %v3_1000fc05 to i32
  %v5_1000fc05 = mul i64 %v0_1000fc01, 2216203124736
  %v6_1000fc05 = sdiv i64 %v5_1000fc05, 4294967296
  %v7_1000fc05 = icmp ne i64 %v3_1000fc05, %v6_1000fc05
  store i1 %v7_1000fc05, i1* %of.global-to-local, align 1
  store i32 63, i32* %edx.global-to-local, align 4
  %v2_1000fc0c = add i32 %v3_1000fbf0, 324
  %v3_1000fc0c = add i32 %v2_1000fc0c, %v4_1000fc05
  store i32 %v3_1000fc0c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000fc16

dec_label_pc_1000fc16:                            ; preds = %dec_label_pc_1000fc16, %dec_label_pc_1000fc01
  %v0_1000fc16 = phi i32 [ %v1_1000fc1c, %dec_label_pc_1000fc16 ], [ %v3_1000fc0c, %dec_label_pc_1000fc01 ]
  %v2_1000fc16 = add i32 %v0_1000fc16, 8
  %v3_1000fc16 = inttoptr i32 %v2_1000fc16 to i32*
  store i32 %v0_1000fc16, i32* %v3_1000fc16, align 4
  %v0_1000fc19 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000fc19 = add i32 %v0_1000fc19, 4
  %v3_1000fc19 = inttoptr i32 %v2_1000fc19 to i32*
  store i32 %v0_1000fc19, i32* %v3_1000fc19, align 4
  %v0_1000fc1c = load i32, i32* %eax.global-to-local, align 4
  %v1_1000fc1c = add i32 %v0_1000fc1c, 8
  store i32 %v1_1000fc1c, i32* %eax.global-to-local, align 4
  %v0_1000fc1f = load i32, i32* %edx.global-to-local, align 4
  %v1_1000fc1f = add i32 %v0_1000fc1f, -1
  %v8_1000fc1f = icmp eq i32 %v1_1000fc1f, 0
  store i32 %v1_1000fc1f, i32* %edx.global-to-local, align 4
  %v1_1000fc20 = icmp eq i1 %v8_1000fc1f, false
  br i1 %v1_1000fc20, label %dec_label_pc_1000fc16, label %dec_label_pc_1000fc22

dec_label_pc_1000fc22:                            ; preds = %dec_label_pc_1000fc16
  %v0_1000fc22 = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000fc26 = mul i32 %v0_1000fc22, 32768
  store i32 %v2_1000fc26, i32* %edi.global-to-local, align 4
  %v1_1000fc29 = load i32, i32* %ecx.global-to-local, align 4
  %v2_1000fc29 = add i32 %v1_1000fc29, 12
  %v3_1000fc29 = inttoptr i32 %v2_1000fc29 to i32*
  %v4_1000fc29 = load i32, i32* %v3_1000fc29, align 4
  %v5_1000fc29 = add i32 %v4_1000fc29, %v2_1000fc26
  %v11_1000fc29 = xor i32 %v5_1000fc29, %v2_1000fc26
  %v12_1000fc29 = xor i32 %v5_1000fc29, %v4_1000fc29
  %v13_1000fc29 = and i32 %v11_1000fc29, %v12_1000fc29
  %v14_1000fc29 = icmp slt i32 %v13_1000fc29, 0
  store i1 %v14_1000fc29, i1* %of.global-to-local, align 1
  %v15_1000fc29 = icmp eq i32 %v5_1000fc29, 0
  store i1 %v15_1000fc29, i1* %zf.global-to-local, align 1
  store i32 %v5_1000fc29, i32* %edi.global-to-local, align 4
  %v6_1000fc37 = inttoptr i32 %v5_1000fc29 to i32*
  %v7_1000fc37 = call i32* @VirtualAlloc(i32* %v6_1000fc37, i32 32768, i32 4096, i32 4)
  %v8_1000fc37 = ptrtoint i32* %v7_1000fc37 to i32
  store i32 %v8_1000fc37, i32* %eax.global-to-local, align 4
  store i1 false, i1* %of.global-to-local, align 1
  %v1_1000fc3d = icmp eq i32* %v7_1000fc37, null
  store i1 %v1_1000fc3d, i1* %zf.global-to-local, align 1
  %v1_1000fc3f = icmp eq i1 %v1_1000fc3d, false
  br i1 %v1_1000fc3f, label %dec_label_pc_1000fc49, label %dec_label_pc_1000fc41

dec_label_pc_1000fc41:                            ; preds = %dec_label_pc_1000fc22
  store i1 false, i1* %of.global-to-local, align 1
  store i1 false, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_1000fcdc

dec_label_pc_1000fc49:                            ; preds = %dec_label_pc_1000fc22
  %v0_1000fc49 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000fc49 = add i32 %v0_1000fc49, 28672
  store i32 %v1_1000fc49, i32* %edx.global-to-local, align 4
  %v8_1000fc4f = xor i32 %v1_1000fc49, %v0_1000fc49
  %v9_1000fc4f = xor i32 %v0_1000fc49, -2147483648
  %v10_1000fc4f = and i32 %v8_1000fc4f, %v9_1000fc4f
  %v11_1000fc4f = icmp slt i32 %v10_1000fc4f, 0
  store i1 %v11_1000fc4f, i1* %of.global-to-local, align 1
  store i1 false, i1* %zf.global-to-local, align 1
  %v6_1000fc51 = icmp ugt i32 %v0_1000fc49, -28673
  br i1 %v6_1000fc51, label %dec_label_pc_1000fc8f, label %dec_label_pc_1000fc53

dec_label_pc_1000fc53:                            ; preds = %dec_label_pc_1000fc49
  %v1_1000fc53 = add i32 %v0_1000fc49, 16
  store i32 %v1_1000fc53, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000fc56

dec_label_pc_1000fc56:                            ; preds = %dec_label_pc_1000fc56, %dec_label_pc_1000fc53
  %v4_1000fc56 = phi i32 [ %v1_1000fc83, %dec_label_pc_1000fc56 ], [ %v1_1000fc53, %dec_label_pc_1000fc53 ]
  %v5_1000fc56 = add i32 %v4_1000fc56, -8
  %v6_1000fc56 = inttoptr i32 %v5_1000fc56 to i32*
  store i32 -1, i32* %v6_1000fc56, align 4
  %v4_1000fc5a = load i32, i32* %eax.global-to-local, align 4
  %v5_1000fc5a = add i32 %v4_1000fc5a, 4076
  %v6_1000fc5a = inttoptr i32 %v5_1000fc5a to i32*
  store i32 -1, i32* %v6_1000fc5a, align 4
  %v0_1000fc61 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000fc61 = add i32 %v0_1000fc61, 4092
  store i32 %v1_1000fc61, i32* %ecx.global-to-local, align 4
  %v1_1000fc67 = add i32 %v0_1000fc61, -4
  %v2_1000fc67 = inttoptr i32 %v1_1000fc67 to i32*
  store i32 4080, i32* %v2_1000fc67, align 4
  %v0_1000fc6e = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000fc6e = load i32, i32* %eax.global-to-local, align 4
  %v2_1000fc6e = inttoptr i32 %v1_1000fc6e to i32*
  store i32 %v0_1000fc6e, i32* %v2_1000fc6e, align 4
  %v0_1000fc70 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000fc70 = add i32 %v0_1000fc70, -4100
  %v2_1000fc76 = add i32 %v0_1000fc70, 4
  %v3_1000fc76 = inttoptr i32 %v2_1000fc76 to i32*
  store i32 %v1_1000fc70, i32* %v3_1000fc76, align 4
  %v0_1000fc79 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000fc79 = add i32 %v0_1000fc79, 4072
  %v2_1000fc79 = inttoptr i32 %v1_1000fc79 to i32*
  store i32 4080, i32* %v2_1000fc79, align 4
  %v0_1000fc83 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000fc83 = add i32 %v0_1000fc83, 4096
  store i32 %v1_1000fc83, i32* %eax.global-to-local, align 4
  %v1_1000fc88 = add i32 %v0_1000fc83, 4080
  store i32 %v1_1000fc88, i32* %ecx.global-to-local, align 4
  %v1_1000fc8b = load i32, i32* %edx.global-to-local, align 4
  %v2_1000fc8b = sub i32 %v1_1000fc88, %v1_1000fc8b
  %v7_1000fc8b = icmp ult i32 %v1_1000fc88, %v1_1000fc8b
  %v12_1000fc8b = icmp eq i32 %v2_1000fc8b, 0
  %v2_1000fc8d = or i1 %v7_1000fc8b, %v12_1000fc8b
  br i1 %v2_1000fc8d, label %dec_label_pc_1000fc56, label %dec_label_pc_1000fc8f.loopexit

dec_label_pc_1000fc8f.loopexit:                   ; preds = %dec_label_pc_1000fc56
  %v9_1000fc8b = xor i32 %v2_1000fc8b, %v1_1000fc88
  %v8_1000fc8b = xor i32 %v1_1000fc8b, %v1_1000fc88
  %v10_1000fc8b = and i32 %v9_1000fc8b, %v8_1000fc8b
  %v11_1000fc8b = icmp slt i32 %v10_1000fc8b, 0
  store i1 %v11_1000fc8b, i1* %of.global-to-local, align 1
  store i1 false, i1* %zf.global-to-local, align 1
  %v0_1000fc92.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000fc8f

dec_label_pc_1000fc8f:                            ; preds = %dec_label_pc_1000fc8f.loopexit, %dec_label_pc_1000fc49
  %v0_1000fc92 = phi i32 [ %v0_1000fc92.pre, %dec_label_pc_1000fc8f.loopexit ], [ %v0_1000fc49, %dec_label_pc_1000fc49 ]
  %v1_1000fc92 = add i32 %v0_1000fc92, 12
  store i32 %v1_1000fc92, i32* %ecx.global-to-local, align 4
  %v1_1000fc95 = add i32 %v3_1000fc0c, 504
  store i32 %v1_1000fc95, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edi.global-to-local, align 4
  %v2_1000fc9d = add i32 %v3_1000fc0c, 508
  %v3_1000fc9d = inttoptr i32 %v2_1000fc9d to i32*
  store i32 %v1_1000fc92, i32* %v3_1000fc9d, align 4
  %v0_1000fca0 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000fca0 = load i32, i32* %ecx.global-to-local, align 4
  %v2_1000fca0 = add i32 %v1_1000fca0, 8
  %v3_1000fca0 = inttoptr i32 %v2_1000fca0 to i32*
  store i32 %v0_1000fca0, i32* %v3_1000fca0, align 4
  %v0_1000fca3 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000fca3 = add i32 %v0_1000fca3, 12
  store i32 %v1_1000fca3, i32* %ecx.global-to-local, align 4
  %v1_1000fca6 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000fca6 = add i32 %v1_1000fca6, 8
  %v3_1000fca6 = inttoptr i32 %v2_1000fca6 to i32*
  store i32 %v1_1000fca3, i32* %v3_1000fca6, align 4
  %v0_1000fca9 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000fca9 = load i32, i32* %ecx.global-to-local, align 4
  %v2_1000fca9 = add i32 %v1_1000fca9, 4
  %v3_1000fca9 = inttoptr i32 %v2_1000fca9 to i32*
  store i32 %v0_1000fca9, i32* %v3_1000fca9, align 4
  store i1 false, i1* %of.global-to-local, align 1
  store i1 true, i1* %zf.global-to-local, align 1
  %v7_1000fcac = load i32, i32* %esi.global-to-local, align 4
  %v8_1000fcac = load i32, i32* %ebx.global-to-local, align 4
  %v9_1000fcac = mul i32 %v8_1000fcac, 4
  %v10_1000fcac = add i32 %v7_1000fcac, 68
  %v11_1000fcac = add i32 %v10_1000fcac, %v9_1000fcac
  %v12_1000fcac = inttoptr i32 %v11_1000fcac to i32*
  store i32 0, i32* %v12_1000fcac, align 4
  %v0_1000fcb1 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000fcb1 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000fcb1 = load i32, i32* %ebx.global-to-local, align 4
  %v3_1000fcb1 = mul i32 %v2_1000fcb1, 4
  %v4_1000fcb1 = add i32 %v1_1000fcb1, 196
  %v5_1000fcb1 = add i32 %v4_1000fcb1, %v3_1000fcb1
  %v6_1000fcb1 = inttoptr i32 %v5_1000fcb1 to i32*
  store i32 %v0_1000fcb1, i32* %v6_1000fcb1, align 4
  %v0_1000fcb8 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000fcb8 = add i32 %v0_1000fcb8, 67
  %v2_1000fcb8 = inttoptr i32 %v1_1000fcb8 to i8*
  %v3_1000fcb8 = load i8, i8* %v2_1000fcb8, align 1
  %v2_1000fcbb = load i32, i32* %ecx.global-to-local, align 4
  %v2_1000fcbd = add i8 %v3_1000fcb8, 1
  %v14_1000fcbd = zext i8 %v2_1000fcbd to i32
  %v16_1000fcbd = and i32 %v2_1000fcbb, -256
  %v17_1000fcbd = or i32 %v16_1000fcbd, %v14_1000fcbd
  store i32 %v17_1000fcbd, i32* %ecx.global-to-local, align 4
  store i1 false, i1* %of.global-to-local, align 1
  %v4_1000fcbf = icmp eq i8 %v3_1000fcb8, 0
  store i1 %v4_1000fcbf, i1* %zf.global-to-local, align 1
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i8 %v2_1000fcbd, i8* %v2_1000fcb8, align 1
  %v0_1000fcc7 = load i1, i1* %zf.global-to-local, align 1
  %v1_1000fcc7 = icmp eq i1 %v0_1000fcc7, false
  br i1 %v1_1000fcc7, label %dec_label_pc_1000fccc, label %dec_label_pc_1000fcc9

dec_label_pc_1000fcc9:                            ; preds = %dec_label_pc_1000fc8f
  %v0_1000fcc9 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000fcc9 = add i32 %v0_1000fcc9, 4
  %v2_1000fcc9 = inttoptr i32 %v1_1000fcc9 to i32*
  %v3_1000fcc9 = load i32, i32* %v2_1000fcc9, align 4
  %v4_1000fcc9 = load i32, i32* %edi.global-to-local, align 4
  %v5_1000fcc9 = or i32 %v4_1000fcc9, %v3_1000fcc9
  store i1 false, i1* %of.global-to-local, align 1
  %v6_1000fcc9 = icmp eq i32 %v5_1000fcc9, 0
  store i1 %v6_1000fcc9, i1* %zf.global-to-local, align 1
  store i32 %v5_1000fcc9, i32* %v2_1000fcc9, align 4
  br label %dec_label_pc_1000fccc

dec_label_pc_1000fccc:                            ; preds = %dec_label_pc_1000fc8f, %dec_label_pc_1000fcc9
  store i32 -2147483648, i32* %edx.global-to-local, align 4
  %v0_1000fcd1 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_1000fcd1, i32* %ecx.global-to-local, align 4
  %v2_1000fcd3 = and i32 %v0_1000fcd1, 31
  %v4_1000fcd3 = icmp eq i32 %v2_1000fcd3, 0
  br i1 %v4_1000fcd3, label %bb26, label %bb

bb:                                               ; preds = %dec_label_pc_1000fccc
  %v3_1000fcd3 = load i1, i1* %of.global-to-local, align 1
  %v5_1000fcd3 = lshr i32 -2147483648, %v2_1000fcd3
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v5_1000fcd3, i32* %edx.global-to-local, align 4
  %v16_1000fcd3 = icmp eq i32 %v2_1000fcd3, 1
  %v18_1000fcd3 = or i1 %v16_1000fcd3, %v3_1000fcd3
  store i1 %v18_1000fcd3, i1* %of.global-to-local, align 1
  %phitmp = sub i32 -1, %v5_1000fcd3
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_1000fccc, %bb
  %v0_1000fcd5 = phi i32 [ 2147483647, %dec_label_pc_1000fccc ], [ %phitmp, %bb ]
  store i32 %v0_1000fcd5, i32* %edx.global-to-local, align 4
  %v0_1000fcd7 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000fcd7 = add i32 %v0_1000fcd7, 8
  %v2_1000fcd7 = inttoptr i32 %v1_1000fcd7 to i32*
  %v3_1000fcd7 = load i32, i32* %v2_1000fcd7, align 4
  %v5_1000fcd7 = and i32 %v3_1000fcd7, %v0_1000fcd5
  store i1 false, i1* %of.global-to-local, align 1
  %v6_1000fcd7 = icmp eq i32 %v5_1000fcd7, 0
  store i1 %v6_1000fcd7, i1* %zf.global-to-local, align 1
  store i32 %v5_1000fcd7, i32* %v2_1000fcd7, align 4
  %v0_1000fcda = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000fcdc

dec_label_pc_1000fcdc:                            ; preds = %dec_label_pc_1000fc41, %bb26
  %storemerge2 = phi i32 [ -1, %dec_label_pc_1000fc41 ], [ %v0_1000fcda, %bb26 ]
  store i32 %storemerge2, i32* %eax.global-to-local, align 4
  %v2_1000fcdc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1000fcdc, i32* %edi.global-to-local, align 4
  ret i32 %storemerge2

; uselistorder directives
  uselistorder i32 %v1_1000fc88, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v1_1000fc83, { 1, 0 }
  uselistorder i32 %v0_1000fc49, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v5_1000fc29, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v2_1000fc26, { 2, 1, 0 }
  uselistorder i32 %v1_1000fc1f, { 1, 0 }
  uselistorder i32 %v1_1000fc1c, { 1, 0 }
  uselistorder i32 %v0_1000fc19, { 1, 0 }
  uselistorder i32 %v3_1000fc0c, { 1, 0, 2, 3 }
  uselistorder i64 %v0_1000fc01, { 1, 0 }
  uselistorder i32 %v2_1000fbfc, { 3, 2, 0, 1 }
  uselistorder i32 %v3_1000fbf3, { 0, 2, 1, 3 }
  uselistorder i1* %zf.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0 }
  uselistorder i1* %of.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %eax.global-to-local, { 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 17, 22 }
  uselistorder i32 67, { 3, 1, 2, 0 }
  uselistorder i32 196, { 8, 9, 10, 11, 12, 0, 4, 5, 6, 7, 3, 1, 2 }
  uselistorder i32 324, { 1, 2, 0 }
  uselistorder i32 63, { 2, 3, 13, 14, 5, 7, 0, 8, 6, 9, 1, 11, 10, 4, 15, 16, 19, 12, 17, 18, 20 }
  uselistorder i64 0, { 1, 0 }
  uselistorder i32 %arg1, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_1000fcdc, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_1000fccc, { 1, 0 }
  uselistorder label %dec_label_pc_1000fbfc, { 1, 0 }
}

define i32 @function_1000fce1() local_unnamed_addr {
dec_label_pc_1000fce1:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_1000fce1 = load i32, i32* @global_var_10018720.155, align 32
  %v10_1000fce1 = icmp eq i32 %v0_1000fce1, -1
  %v0_1000fceb = load i32, i32* @edi, align 4
  store i32 %v0_1000fceb, i32* %stack_var_-16, align 4
  %v1_1000fcec = icmp eq i1 %v10_1000fce1, false
  br i1 %v1_1000fcec, label %dec_label_pc_1000fcf5, label %dec_label_pc_1000fcee

dec_label_pc_1000fcee:                            ; preds = %dec_label_pc_1000fce1
  store i32 ptrtoint (i32* @global_var_10018710 to i32), i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000fd12

dec_label_pc_1000fcf5:                            ; preds = %dec_label_pc_1000fce1
  %v0_1000fcfc = load i32, i32* @global_var_1001bb10.104, align 16
  %v5_1000fd02 = inttoptr i32 %v0_1000fcfc to i32*
  %v6_1000fd02 = call i32* @HeapAlloc(i32* %v5_1000fd02, i32 0, i32 8224)
  %v7_1000fd02 = ptrtoint i32* %v6_1000fd02 to i32
  store i32 %v7_1000fd02, i32* %eax.global-to-local, align 4
  store i32 %v7_1000fd02, i32* %esi.global-to-local, align 4
  %v1_1000fd0a = icmp eq i32* %v6_1000fd02, null
  br i1 %v1_1000fd0a, label %dec_label_pc_1000fe1e, label %dec_label_pc_1000fd12

dec_label_pc_1000fd12:                            ; preds = %dec_label_pc_1000fcf5, %dec_label_pc_1000fcee
  %v0_1000fd12 = load i32, i32* inttoptr (i32 268525636 to i32*), align 4
  store i32 %v0_1000fd12, i32* %ebp.global-to-local, align 4
  %v7_1000fd26 = call i32* @VirtualAlloc(i32* null, i32 4194304, i32 8192, i32 4)
  %v8_1000fd26 = ptrtoint i32* %v7_1000fd26 to i32
  store i32 %v8_1000fd26, i32* %eax.global-to-local, align 4
  store i32 %v8_1000fd26, i32* @edi, align 4
  %v1_1000fd2a = icmp eq i32* %v7_1000fd26, null
  br i1 %v1_1000fd2a, label %dec_label_pc_1000fe07, label %dec_label_pc_1000fd32

dec_label_pc_1000fd32:                            ; preds = %dec_label_pc_1000fd12
  store i32 65536, i32* %ebx.global-to-local, align 4
  %v7_1000fd40 = call i32* @VirtualAlloc(i32* nonnull %v7_1000fd26, i32 65536, i32 4096, i32 4)
  %v8_1000fd40 = ptrtoint i32* %v7_1000fd40 to i32
  store i32 %v8_1000fd40, i32* %eax.global-to-local, align 4
  %v1_1000fd42 = icmp eq i32* %v7_1000fd40, null
  br i1 %v1_1000fd42, label %dec_label_pc_1000fdf9, label %dec_label_pc_1000fd4a

dec_label_pc_1000fd4a:                            ; preds = %dec_label_pc_1000fd32
  store i32 ptrtoint (i32* @global_var_10018710 to i32), i32* %eax.global-to-local, align 4
  %v0_1000fd4f = load i32, i32* %esi.global-to-local, align 4
  %v12_1000fd4f = icmp eq i32 %v0_1000fd4f, ptrtoint (i32* @global_var_10018710 to i32)
  %v1_1000fd51 = icmp eq i1 %v12_1000fd4f, false
  br i1 %v1_1000fd51, label %dec_label_pc_1000fd71, label %dec_label_pc_1000fd53

dec_label_pc_1000fd53:                            ; preds = %dec_label_pc_1000fd4a
  %v0_1000fd53 = load i32, i32* @global_var_10018710, align 16
  %v1_1000fd53 = icmp eq i32 %v0_1000fd53, 0
  %v1_1000fd5a = icmp eq i1 %v1_1000fd53, false
  br i1 %v1_1000fd5a, label %dec_label_pc_1000fd61, label %dec_label_pc_1000fd5c

dec_label_pc_1000fd5c:                            ; preds = %dec_label_pc_1000fd53
  store i32 ptrtoint (i32* @global_var_10018710 to i32), i32* @global_var_10018710, align 16
  br label %dec_label_pc_1000fd61

dec_label_pc_1000fd61:                            ; preds = %dec_label_pc_1000fd53, %dec_label_pc_1000fd5c
  %v0_1000fd61 = load i32, i32* inttoptr (i32 268535572 to i32*), align 4
  %v1_1000fd61 = icmp eq i32 %v0_1000fd61, 0
  %v1_1000fd68 = icmp eq i1 %v1_1000fd61, false
  br i1 %v1_1000fd68, label %dec_label_pc_1000fd86, label %dec_label_pc_1000fd6a

dec_label_pc_1000fd6a:                            ; preds = %dec_label_pc_1000fd61
  store i32 ptrtoint (i32* @global_var_10018710 to i32), i32* @global_var_10018714, align 4
  br label %dec_label_pc_1000fd86

dec_label_pc_1000fd71:                            ; preds = %dec_label_pc_1000fd4a
  %v2_1000fd71 = inttoptr i32 %v0_1000fd4f to i32*
  store i32 ptrtoint (i32* @global_var_10018710 to i32), i32* %v2_1000fd71, align 4
  %v0_1000fd73 = load i32, i32* @global_var_10018714, align 4
  store i32 %v0_1000fd73, i32* %eax.global-to-local, align 4
  %v1_1000fd78 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000fd78 = add i32 %v1_1000fd78, 4
  %v3_1000fd78 = inttoptr i32 %v2_1000fd78 to i32*
  store i32 %v0_1000fd73, i32* %v3_1000fd78, align 4
  %v0_1000fd7b = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000fd7b, i32* @global_var_10018714, align 4
  %v1_1000fd81 = add i32 %v0_1000fd7b, 4
  %v2_1000fd81 = inttoptr i32 %v1_1000fd81 to i32*
  %v3_1000fd81 = load i32, i32* %v2_1000fd81, align 4
  store i32 %v3_1000fd81, i32* %eax.global-to-local, align 4
  %v2_1000fd84 = inttoptr i32 %v3_1000fd81 to i32*
  store i32 %v0_1000fd7b, i32* %v2_1000fd84, align 4
  %v0_1000fd8c.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000fd86

dec_label_pc_1000fd86:                            ; preds = %dec_label_pc_1000fd61, %dec_label_pc_1000fd6a, %dec_label_pc_1000fd71
  %v0_1000fd8c = phi i32 [ %v0_1000fd4f, %dec_label_pc_1000fd61 ], [ %v0_1000fd4f, %dec_label_pc_1000fd6a ], [ %v0_1000fd8c.pre, %dec_label_pc_1000fd71 ]
  %v0_1000fd86 = load i32, i32* @edi, align 4
  %v1_1000fd86 = add i32 %v0_1000fd86, 4194304
  %v1_1000fd8c = add i32 %v0_1000fd8c, 152
  store i32 %v1_1000fd8c, i32* %ecx.global-to-local, align 4
  %v2_1000fd92 = add i32 %v0_1000fd8c, 20
  %v3_1000fd92 = inttoptr i32 %v2_1000fd92 to i32*
  store i32 %v1_1000fd86, i32* %v3_1000fd92, align 4
  %v0_1000fd95 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000fd95 = add i32 %v0_1000fd95, 24
  store i32 %v1_1000fd95, i32* %eax.global-to-local, align 4
  %v0_1000fd98 = load i32, i32* %ecx.global-to-local, align 4
  %v2_1000fd98 = add i32 %v0_1000fd95, 12
  %v3_1000fd98 = inttoptr i32 %v2_1000fd98 to i32*
  store i32 %v0_1000fd98, i32* %v3_1000fd98, align 4
  %v0_1000fd9b = load i32, i32* @edi, align 4
  %v1_1000fd9b = load i32, i32* %esi.global-to-local, align 4
  %v2_1000fd9b = add i32 %v1_1000fd9b, 16
  %v3_1000fd9b = inttoptr i32 %v2_1000fd9b to i32*
  store i32 %v0_1000fd9b, i32* %v3_1000fd9b, align 4
  %v0_1000fd9e = load i32, i32* %eax.global-to-local, align 4
  %v1_1000fd9e = load i32, i32* %esi.global-to-local, align 4
  %v2_1000fd9e = add i32 %v1_1000fd9e, 8
  %v3_1000fd9e = inttoptr i32 %v2_1000fd9e to i32*
  store i32 %v0_1000fd9e, i32* %v3_1000fd9e, align 4
  store i32 0, i32* %ebp.global-to-local, align 4
  store i32 241, i32* %ecx.global-to-local, align 4
  %v1_1000fdb5.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000fda8

dec_label_pc_1000fda8:                            ; preds = %dec_label_pc_1000fda8.dec_label_pc_1000fda8_crit_edge, %dec_label_pc_1000fd86
  %v1_1000fdb5 = phi i32 [ %v1_1000fdba, %dec_label_pc_1000fda8.dec_label_pc_1000fda8_crit_edge ], [ %v1_1000fdb5.pre, %dec_label_pc_1000fd86 ]
  %v1_1000fdb1 = phi i32 [ %v1_1000fdb1.pre, %dec_label_pc_1000fda8.dec_label_pc_1000fda8_crit_edge ], [ 241, %dec_label_pc_1000fd86 ]
  %v0_1000fdb4 = phi i32 [ %v0_1000fdbd, %dec_label_pc_1000fda8.dec_label_pc_1000fda8_crit_edge ], [ 0, %dec_label_pc_1000fd86 ]
  %v1_1000fdaa = add i32 %v0_1000fdb4, -16
  %v3_1000fdaa = sub i32 15, %v0_1000fdb4
  %v4_1000fdaa = and i32 %v3_1000fdaa, %v0_1000fdb4
  %v5_1000fdaa = icmp slt i32 %v4_1000fdaa, 0
  %v7_1000fdaa = icmp slt i32 %v1_1000fdaa, 0
  %not.v2_1000fdad = icmp ne i1 %v7_1000fdaa, %v5_1000fdaa
  %v1_1000fdb1.op = add i32 %v1_1000fdb1, -1
  %v1_1000fdb3 = select i1 %not.v2_1000fdad, i32 %v1_1000fdb1.op, i32 -1
  %v1_1000fdb4 = add i32 %v0_1000fdb4, 1
  store i32 %v1_1000fdb4, i32* %ebp.global-to-local, align 4
  %v2_1000fdb5 = inttoptr i32 %v1_1000fdb5 to i32*
  store i32 %v1_1000fdb3, i32* %v2_1000fdb5, align 4
  %v0_1000fdb7 = load i32, i32* %ecx.global-to-local, align 4
  %v1_1000fdb7 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000fdb7 = add i32 %v1_1000fdb7, 4
  %v3_1000fdb7 = inttoptr i32 %v2_1000fdb7 to i32*
  store i32 %v0_1000fdb7, i32* %v3_1000fdb7, align 4
  %v0_1000fdba = load i32, i32* %eax.global-to-local, align 4
  %v1_1000fdba = add i32 %v0_1000fdba, 8
  store i32 %v1_1000fdba, i32* %eax.global-to-local, align 4
  %v0_1000fdbd = load i32, i32* %ebp.global-to-local, align 4
  %v5_1000fdc3 = icmp slt i32 %v0_1000fdbd, 1024
  br i1 %v5_1000fdc3, label %dec_label_pc_1000fda8.dec_label_pc_1000fda8_crit_edge, label %dec_label_pc_1000fdc5

dec_label_pc_1000fda8.dec_label_pc_1000fda8_crit_edge: ; preds = %dec_label_pc_1000fda8
  %v1_1000fdb1.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000fda8

dec_label_pc_1000fdc5:                            ; preds = %dec_label_pc_1000fda8
  %v0_1000fdc5 = load i32, i32* %ebx.global-to-local, align 4
  %v0_1000fdc8 = load i32, i32* @edi, align 4
  %v3_1000fdc9 = inttoptr i32 %v0_1000fdc8 to i8*
  %v4_1000fdc9 = call i32 @function_10012000(i8* %v3_1000fdc9, i32 0, i32 %v0_1000fdc5)
  store i32 %v4_1000fdc9, i32* %eax.global-to-local, align 4
  %v0_1000fdd6.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000fdd1

dec_label_pc_1000fdd1:                            ; preds = %dec_label_pc_1000fdda, %dec_label_pc_1000fdc5
  %v4_1000fdda = phi i32 [ %v1_1000fded, %dec_label_pc_1000fdda ], [ %v0_1000fdd6.pre, %dec_label_pc_1000fdc5 ]
  %v0_1000fdd1 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000fdd1 = add i32 %v0_1000fdd1, 16
  %v2_1000fdd1 = inttoptr i32 %v1_1000fdd1 to i32*
  %v3_1000fdd1 = load i32, i32* %v2_1000fdd1, align 4
  %v1_1000fdd4 = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000fdd4 = add i32 %v1_1000fdd4, %v3_1000fdd1
  store i32 %v2_1000fdd4, i32* %eax.global-to-local, align 4
  %v7_1000fdd6 = icmp ult i32 %v4_1000fdda, %v2_1000fdd4
  %v1_1000fdd8 = icmp eq i1 %v7_1000fdd6, false
  br i1 %v1_1000fdd8, label %dec_label_pc_1000fe20, label %dec_label_pc_1000fdda

dec_label_pc_1000fdda:                            ; preds = %dec_label_pc_1000fdd1
  %v5_1000fdda = add i32 %v4_1000fdda, 248
  %v6_1000fdda = inttoptr i32 %v5_1000fdda to i8*
  store i8 -1, i8* %v6_1000fdda, align 1
  %v0_1000fde1 = load i32, i32* @edi, align 4
  %v1_1000fde1 = add i32 %v0_1000fde1, 8
  store i32 %v1_1000fde1, i32* %eax.global-to-local, align 4
  %v2_1000fde4 = inttoptr i32 %v0_1000fde1 to i32*
  store i32 %v1_1000fde1, i32* %v2_1000fde4, align 4
  %v0_1000fde6 = load i32, i32* @edi, align 4
  %v1_1000fde6 = add i32 %v0_1000fde6, 4
  %v2_1000fde6 = inttoptr i32 %v1_1000fde6 to i32*
  store i32 240, i32* %v2_1000fde6, align 4
  %v0_1000fded = load i32, i32* @edi, align 4
  %v1_1000fded = add i32 %v0_1000fded, 4096
  store i32 %v1_1000fded, i32* @edi, align 4
  br label %dec_label_pc_1000fdd1

dec_label_pc_1000fdf9:                            ; preds = %dec_label_pc_1000fd32
  %v0_1000fe00 = load i32, i32* @edi, align 4
  %v5_1000fe01 = inttoptr i32 %v0_1000fe00 to i32*
  %v6_1000fe01 = call i1 @VirtualFree(i32* %v5_1000fe01, i32 0, i32 32768)
  %v7_1000fe01 = sext i1 %v6_1000fe01 to i32
  store i32 %v7_1000fe01, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000fe07

dec_label_pc_1000fe07:                            ; preds = %dec_label_pc_1000fd12, %dec_label_pc_1000fdf9
  %v0_1000fe07 = load i32, i32* %esi.global-to-local, align 4
  %v6_1000fe07 = icmp eq i32 %v0_1000fe07, 268535568
  br i1 %v6_1000fe07, label %dec_label_pc_1000fe1e, label %dec_label_pc_1000fe0f

dec_label_pc_1000fe0f:                            ; preds = %dec_label_pc_1000fe07
  %v0_1000fe12 = load i32, i32* @global_var_1001bb10.104, align 16
  %v5_1000fe18 = inttoptr i32 %v0_1000fe12 to i32*
  %v6_1000fe18 = inttoptr i32 %v0_1000fe07 to i32*
  %v7_1000fe18 = call i1 @HeapFree(i32* %v5_1000fe18, i32 0, i32* %v6_1000fe18)
  %v8_1000fe18 = sext i1 %v7_1000fe18 to i32
  store i32 %v8_1000fe18, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000fe1e

dec_label_pc_1000fe1e:                            ; preds = %dec_label_pc_1000fe07, %dec_label_pc_1000fcf5, %dec_label_pc_1000fe0f
  br label %dec_label_pc_1000fe20

dec_label_pc_1000fe20:                            ; preds = %dec_label_pc_1000fdd1, %dec_label_pc_1000fe1e
  %storemerge = phi i32 [ 0, %dec_label_pc_1000fe1e ], [ %v0_1000fdd1, %dec_label_pc_1000fdd1 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_1000fe20 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000fe20, i32* @edi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_1000fe07, { 1, 0 }
  uselistorder i32 %v1_1000fded, { 1, 0 }
  uselistorder i32 %v0_1000fdbd, { 1, 0 }
  uselistorder i32 %v1_1000fdba, { 1, 0 }
  uselistorder i32 %v0_1000fdb4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1000fd8c, { 1, 0 }
  uselistorder i32 %v0_1000fd4f, { 1, 2, 3, 0 }
  uselistorder i32 %v8_1000fd26, { 1, 0 }
  uselistorder i32 %v7_1000fd02, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 9, 2, 3, 4, 5, 1, 6, 7, 8, 0, 10 }
  uselistorder i32* %ecx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 6, 0, 1, 2, 3, 4, 5, 8, 9, 7, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 152, { 4, 0, 1, 3, 2 }
  uselistorder i32 4194304, { 1, 0 }
  uselistorder label %dec_label_pc_1000fe20, { 1, 0 }
  uselistorder label %dec_label_pc_1000fe1e, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1000fe07, { 1, 0 }
  uselistorder label %dec_label_pc_1000fd86, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1000fd61, { 1, 0 }
}

define i32 @function_1000fe25(i32* %arg1) local_unnamed_addr {
dec_label_pc_1000fe25:
  %esi.global-to-local = alloca i32, align 4
  %tmp2 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000fe25 = load i32, i32* @esi, align 4
  store i32 %v0_1000fe25, i32* %stack_var_-4, align 4
  store i32 %tmp2, i32* %esi.global-to-local, align 4
  store i32 0, i32* %stack_var_-12, align 4
  %v1_1000fe31 = add i32 %tmp2, 16
  %v2_1000fe31 = inttoptr i32 %v1_1000fe31 to i32*
  %v3_1000fe31 = load i32, i32* %v2_1000fe31, align 4
  %v5_1000fe34 = inttoptr i32 %v3_1000fe31 to i32*
  %v6_1000fe34 = call i1 @VirtualFree(i32* %v5_1000fe34, i32 0, i32 32768)
  %v7_1000fe34 = sext i1 %v6_1000fe34 to i32
  %v0_1000fe3a = load i32, i32* bitcast (i32** @global_var_1001a730.157 to i32*), align 16
  %v1_1000fe3a = load i32, i32* %esi.global-to-local, align 4
  %v12_1000fe3a = icmp eq i32 %v0_1000fe3a, %v1_1000fe3a
  %v1_1000fe40 = icmp eq i1 %v12_1000fe3a, false
  br i1 %v1_1000fe40, label %dec_label_pc_1000fe4a, label %dec_label_pc_1000fe42

dec_label_pc_1000fe42:                            ; preds = %dec_label_pc_1000fe25
  %v1_1000fe42 = add i32 %v1_1000fe3a, 4
  %v2_1000fe42 = inttoptr i32 %v1_1000fe42 to i32*
  %v3_1000fe42 = load i32, i32* %v2_1000fe42, align 4
  store i32 %v3_1000fe42, i32* bitcast (i32** @global_var_1001a730.157 to i32*), align 16
  br label %dec_label_pc_1000fe4a

dec_label_pc_1000fe4a:                            ; preds = %dec_label_pc_1000fe25, %dec_label_pc_1000fe42
  %v0_1000fe7a = phi i32 [ %v7_1000fe34, %dec_label_pc_1000fe25 ], [ %v3_1000fe42, %dec_label_pc_1000fe42 ]
  %v6_1000fe4a = icmp eq i32 %v1_1000fe3a, 268535568
  br i1 %v6_1000fe4a, label %dec_label_pc_1000fe72, label %dec_label_pc_1000fe52

dec_label_pc_1000fe52:                            ; preds = %dec_label_pc_1000fe4a
  %v1_1000fe52 = add i32 %v1_1000fe3a, 4
  %v2_1000fe52 = inttoptr i32 %v1_1000fe52 to i32*
  %v3_1000fe52 = load i32, i32* %v2_1000fe52, align 4
  %v1_1000fe55 = inttoptr i32 %v1_1000fe3a to i32*
  %v2_1000fe55 = load i32, i32* %v1_1000fe55, align 4
  store i32 0, i32* %stack_var_-12, align 4
  %v2_1000fe5a = inttoptr i32 %v3_1000fe52 to i32*
  store i32 %v2_1000fe55, i32* %v2_1000fe5a, align 4
  %v0_1000fe5c = load i32, i32* %esi.global-to-local, align 4
  %v1_1000fe5c = inttoptr i32 %v0_1000fe5c to i32*
  %v2_1000fe5c = load i32, i32* %v1_1000fe5c, align 4
  %v1_1000fe5e = add i32 %v0_1000fe5c, 4
  %v2_1000fe5e = inttoptr i32 %v1_1000fe5e to i32*
  %v3_1000fe5e = load i32, i32* %v2_1000fe5e, align 4
  %v2_1000fe61 = add i32 %v2_1000fe5c, 4
  %v3_1000fe61 = inttoptr i32 %v2_1000fe61 to i32*
  store i32 %v3_1000fe5e, i32* %v3_1000fe61, align 4
  %v0_1000fe64 = load i32, i32* @global_var_1001bb10.104, align 16
  %v3_1000fe6a = load i32, i32* %stack_var_-12, align 4
  %v5_1000fe6a = inttoptr i32 %v0_1000fe64 to i32*
  %v7_1000fe6a = call i1 @HeapFree(i32* %v5_1000fe6a, i32 %v3_1000fe6a, i32* %v1_1000fe55)
  %v8_1000fe6a = sext i1 %v7_1000fe6a to i32
  %v2_1000fe70 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000fe70, i32* @esi, align 4
  ret i32 %v8_1000fe6a

dec_label_pc_1000fe72:                            ; preds = %dec_label_pc_1000fe4a
  store i32 -1, i32* @global_var_10018720.155, align 32
  %v2_1000fe79 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000fe79, i32* @esi, align 4
  ret i32 %v0_1000fe7a

; uselistorder directives
  uselistorder i32 %v1_1000fe3a, { 3, 2, 0, 4, 1 }
  uselistorder i1 (i32*, i32, i32*)* @HeapFree, { 4, 0, 1, 3, 6, 5, 2 }
  uselistorder label %dec_label_pc_1000fe4a, { 1, 0 }
}

define i32 @function_1000fe7b(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000fe7b:
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_1000fe81 = load i32, i32* @global_var_10018714, align 4
  store i32 %v0_1000fe81, i32* @esi, align 4
  %v0_1000fe87 = load i32, i32* @edi, align 4
  store i32 %v0_1000fe87, i32* %stack_var_-20, align 4
  br label %dec_label_pc_1000fe88

dec_label_pc_1000fe88:                            ; preds = %dec_label_pc_1000ff2e, %dec_label_pc_1000fe7b
  %v0_1000fe96 = phi i32 [ %v0_1000fe81, %dec_label_pc_1000fe7b ], [ %v0_1000ff26, %dec_label_pc_1000ff2e ]
  %stack_var_4.0 = phi i32 [ %arg1, %dec_label_pc_1000fe7b ], [ %stack_var_4.4, %dec_label_pc_1000ff2e ]
  %v1_1000fe88 = add i32 %v0_1000fe96, 16
  %v2_1000fe88 = inttoptr i32 %v1_1000fe88 to i32*
  %v3_1000fe88 = load i32, i32* %v2_1000fe88, align 4
  %v13_1000fe88 = icmp eq i32 %v3_1000fe88, -1
  br i1 %v13_1000fe88, label %dec_label_pc_1000ff26, label %dec_label_pc_1000fe92

dec_label_pc_1000fe92:                            ; preds = %dec_label_pc_1000fe88
  %v1_1000fe96 = add i32 %v0_1000fe96, 8208
  store i32 %v1_1000fe96, i32* %edi.global-to-local, align 4
  store i32 4190208, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000fea1

dec_label_pc_1000fea1:                            ; preds = %dec_label_pc_1000fee2, %dec_label_pc_1000fe92
  %stack_var_-8.0 = phi i32 [ 0, %dec_label_pc_1000fe92 ], [ %stack_var_-8.1, %dec_label_pc_1000fee2 ]
  %v0_1000fea9 = phi i32 [ 4190208, %dec_label_pc_1000fe92 ], [ %v1_1000fee2, %dec_label_pc_1000fee2 ]
  %v0_1000fea1 = phi i32 [ %v1_1000fe96, %dec_label_pc_1000fe92 ], [ %v1_1000fee8, %dec_label_pc_1000fee2 ]
  %stack_var_4.1 = phi i32 [ %stack_var_4.0, %dec_label_pc_1000fe92 ], [ %stack_var_4.2, %dec_label_pc_1000fee2 ]
  %v1_1000fea1 = inttoptr i32 %v0_1000fea1 to i32*
  %v2_1000fea1 = load i32, i32* %v1_1000fea1, align 4
  %v8_1000fea1 = icmp eq i32 %v2_1000fea1, 240
  %v1_1000fea7 = icmp eq i1 %v8_1000fea1, false
  br i1 %v1_1000fea7, label %dec_label_pc_1000fee2, label %dec_label_pc_1000fea9

dec_label_pc_1000fea9:                            ; preds = %dec_label_pc_1000fea1
  %v1_1000feb0 = load i32, i32* @esi, align 4
  %v2_1000feb0 = add i32 %v1_1000feb0, 16
  %v3_1000feb0 = inttoptr i32 %v2_1000feb0 to i32*
  %v4_1000feb0 = load i32, i32* %v3_1000feb0, align 4
  %v5_1000feb0 = add i32 %v4_1000feb0, %v0_1000fea9
  %v5_1000feb9 = inttoptr i32 %v5_1000feb0 to i32*
  %v6_1000feb9 = call i1 @VirtualFree(i32* %v5_1000feb9, i32 4096, i32 16384)
  %v7_1000feb9 = sext i1 %v6_1000feb9 to i32
  store i32 %v7_1000feb9, i32* @eax, align 4
  %v1_1000febf = icmp eq i1 %v6_1000feb9, false
  br i1 %v1_1000febf, label %dec_label_pc_1000fee2, label %dec_label_pc_1000fec3

dec_label_pc_1000fec3:                            ; preds = %dec_label_pc_1000fea9
  %v3_1000fec3 = load i32, i32* %edi.global-to-local, align 4
  %v4_1000fec3 = inttoptr i32 %v3_1000fec3 to i32*
  store i32 -1, i32* %v4_1000fec3, align 4
  %v0_1000fec6 = load i32, i32* @global_var_1001b434.158, align 4
  %v1_1000fec6 = add i32 %v0_1000fec6, -1
  store i32 %v1_1000fec6, i32* @global_var_1001b434.158, align 4
  %v0_1000fecc = load i32, i32* @esi, align 4
  %v1_1000fecc = add i32 %v0_1000fecc, 12
  %v2_1000fecc = inttoptr i32 %v1_1000fecc to i32*
  %v3_1000fecc = load i32, i32* %v2_1000fecc, align 4
  store i32 %v3_1000fecc, i32* @eax, align 4
  %v1_1000fecf = icmp eq i32 %v3_1000fecc, 0
  %v0_1000fed7.pre = load i32, i32* %edi.global-to-local, align 4
  br i1 %v1_1000fecf, label %dec_label_pc_1000fed7, label %dec_label_pc_1000fed3

dec_label_pc_1000fed3:                            ; preds = %dec_label_pc_1000fec3
  %tmp = icmp ugt i32 %v3_1000fecc, %v0_1000fed7.pre
  br i1 %tmp, label %dec_label_pc_1000fed7, label %dec_label_pc_1000feda

dec_label_pc_1000fed7:                            ; preds = %dec_label_pc_1000fed3, %dec_label_pc_1000fec3
  store i32 %v0_1000fed7.pre, i32* %v2_1000fecc, align 4
  br label %dec_label_pc_1000feda

dec_label_pc_1000feda:                            ; preds = %dec_label_pc_1000fed3, %dec_label_pc_1000fed7
  %v4_1000feda = add i32 %stack_var_-8.0, 1
  %v4_1000fedd = add i32 %stack_var_4.1, -1
  %v11_1000fedd = icmp eq i32 %v4_1000fedd, 0
  br i1 %v11_1000fedd, label %dec_label_pc_1000feef, label %dec_label_pc_1000fee2

dec_label_pc_1000fee2:                            ; preds = %dec_label_pc_1000feda, %dec_label_pc_1000fea9, %dec_label_pc_1000fea1
  %stack_var_-8.1 = phi i32 [ %stack_var_-8.0, %dec_label_pc_1000fea1 ], [ %stack_var_-8.0, %dec_label_pc_1000fea9 ], [ %v4_1000feda, %dec_label_pc_1000feda ]
  %stack_var_4.2 = phi i32 [ %stack_var_4.1, %dec_label_pc_1000fea1 ], [ %stack_var_4.1, %dec_label_pc_1000fea9 ], [ %v4_1000fedd, %dec_label_pc_1000feda ]
  %v0_1000fee2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000fee2 = add i32 %v0_1000fee2, -4096
  %v7_1000fee2 = icmp slt i32 %v1_1000fee2, 0
  store i32 %v1_1000fee2, i32* %ebx.global-to-local, align 4
  %v0_1000fee8 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000fee8 = add i32 %v0_1000fee8, -8
  store i32 %v1_1000fee8, i32* %edi.global-to-local, align 4
  %v2_1000feed = icmp eq i1 %v7_1000fee2, false
  br i1 %v2_1000feed, label %dec_label_pc_1000fea1, label %dec_label_pc_1000feef

dec_label_pc_1000feef:                            ; preds = %dec_label_pc_1000fee2, %dec_label_pc_1000feda
  %v3_1000feef = phi i32 [ %v4_1000feda, %dec_label_pc_1000feda ], [ %stack_var_-8.1, %dec_label_pc_1000fee2 ]
  %stack_var_4.3 = phi i32 [ 0, %dec_label_pc_1000feda ], [ %stack_var_4.2, %dec_label_pc_1000fee2 ]
  %v4_1000feef = icmp eq i32 %v3_1000feef, 0
  %v0_1000fef3 = load i32, i32* @esi, align 4
  %v1_1000fef5 = add i32 %v0_1000fef3, 4
  %v2_1000fef5 = inttoptr i32 %v1_1000fef5 to i32*
  %v3_1000fef5 = load i32, i32* %v2_1000fef5, align 4
  store i32 %v3_1000fef5, i32* @esi, align 4
  br i1 %v4_1000feef, label %dec_label_pc_1000ff26, label %dec_label_pc_1000fefa

dec_label_pc_1000fefa:                            ; preds = %dec_label_pc_1000feef
  %v1_1000fefa = add i32 %v0_1000fef3, 24
  %v2_1000fefa = inttoptr i32 %v1_1000fefa to i32*
  %v3_1000fefa = load i32, i32* %v2_1000fefa, align 4
  %v13_1000fefa = icmp eq i32 %v3_1000fefa, -1
  %v1_1000fefe = icmp eq i1 %v13_1000fefa, false
  br i1 %v1_1000fefe, label %dec_label_pc_1000ff26, label %dec_label_pc_1000ff00

dec_label_pc_1000ff00:                            ; preds = %dec_label_pc_1000fefa
  %v1_1000ff02 = add i32 %v0_1000fef3, 32
  store i32 %v1_1000ff02, i32* @eax, align 4
  br label %dec_label_pc_1000ff06

dec_label_pc_1000ff06:                            ; preds = %dec_label_pc_1000ff0b, %dec_label_pc_1000ff00
  %v0_1000ff0b = phi i32 [ %v1_1000ff0b, %dec_label_pc_1000ff0b ], [ 1, %dec_label_pc_1000ff00 ]
  %v0_1000ff0c = phi i32 [ %v1_1000ff0c, %dec_label_pc_1000ff0b ], [ %v1_1000ff02, %dec_label_pc_1000ff00 ]
  %v1_1000ff06 = inttoptr i32 %v0_1000ff0c to i32*
  %v2_1000ff06 = load i32, i32* %v1_1000ff06, align 4
  %v12_1000ff06 = icmp eq i32 %v2_1000ff06, -1
  %v1_1000ff09 = icmp eq i1 %v12_1000ff06, false
  br i1 %v1_1000ff09, label %dec_label_pc_1000ff17, label %dec_label_pc_1000ff0b

dec_label_pc_1000ff0b:                            ; preds = %dec_label_pc_1000ff06
  %v1_1000ff0b = add nuw nsw i32 %v0_1000ff0b, 1
  %v1_1000ff0c = add i32 %v0_1000ff0c, 8
  store i32 %v1_1000ff0c, i32* @eax, align 4
  %v5_1000ff15 = icmp slt i32 %v1_1000ff0b, 1024
  br i1 %v5_1000ff15, label %dec_label_pc_1000ff06, label %dec_label_pc_1000ff17

dec_label_pc_1000ff17:                            ; preds = %dec_label_pc_1000ff0b, %dec_label_pc_1000ff06
  %v0_1000ff17 = phi i32 [ 1024, %dec_label_pc_1000ff0b ], [ %v0_1000ff0b, %dec_label_pc_1000ff06 ]
  %v6_1000ff17 = icmp eq i32 %v0_1000ff17, 1024
  %v1_1000ff1d = icmp eq i1 %v6_1000ff17, false
  br i1 %v1_1000ff1d, label %dec_label_pc_1000ff26, label %dec_label_pc_1000ff1f

dec_label_pc_1000ff1f:                            ; preds = %dec_label_pc_1000ff17
  %v1_1000ff20 = inttoptr i32 %v0_1000fef3 to i32*
  %v2_1000ff20 = call i32 @function_1000fe25(i32* %v1_1000ff20)
  store i32 %v2_1000ff20, i32* @eax, align 4
  %v0_1000ff26.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000ff26

dec_label_pc_1000ff26:                            ; preds = %dec_label_pc_1000ff17, %dec_label_pc_1000fefa, %dec_label_pc_1000feef, %dec_label_pc_1000fe88, %dec_label_pc_1000ff1f
  %v0_1000ff26 = phi i32 [ %v0_1000fe96, %dec_label_pc_1000fe88 ], [ %v3_1000fef5, %dec_label_pc_1000feef ], [ %v3_1000fef5, %dec_label_pc_1000fefa ], [ %v3_1000fef5, %dec_label_pc_1000ff17 ], [ %v0_1000ff26.pre, %dec_label_pc_1000ff1f ]
  %stack_var_4.4 = phi i32 [ %stack_var_4.0, %dec_label_pc_1000fe88 ], [ %stack_var_4.3, %dec_label_pc_1000feef ], [ %stack_var_4.3, %dec_label_pc_1000fefa ], [ %stack_var_4.3, %dec_label_pc_1000ff17 ], [ %stack_var_4.3, %dec_label_pc_1000ff1f ]
  %v1_1000ff26 = load i32, i32* @global_var_10018714, align 4
  %v12_1000ff26 = icmp eq i32 %v0_1000ff26, %v1_1000ff26
  br i1 %v12_1000ff26, label %dec_label_pc_1000ff38, label %dec_label_pc_1000ff2e

dec_label_pc_1000ff2e:                            ; preds = %dec_label_pc_1000ff26
  %tmp23 = icmp slt i32 %stack_var_4.4, 1
  %tmp24 = icmp eq i1 %tmp23, false
  br i1 %tmp24, label %dec_label_pc_1000fe88, label %dec_label_pc_1000ff38

dec_label_pc_1000ff38:                            ; preds = %dec_label_pc_1000ff2e, %dec_label_pc_1000ff26
  %v2_1000ff38 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1000ff38, i32* %edi.global-to-local, align 4
  %v0_1000ff3c = load i32, i32* @eax, align 4
  ret i32 %v0_1000ff3c

; uselistorder directives
  uselistorder i32 %v1_1000ff0c, { 1, 0 }
  uselistorder i32 %v1_1000ff0b, { 1, 0 }
  uselistorder i32 %v1_1000fee8, { 1, 0 }
  uselistorder i32 %v1_1000fee2, { 2, 1, 0 }
  uselistorder i32 %v0_1000fed7.pre, { 1, 0 }
  uselistorder i32 %stack_var_4.1, { 1, 2, 0 }
  uselistorder i32 %stack_var_-8.0, { 1, 2, 0 }
  uselistorder i32 %stack_var_4.0, { 1, 0 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 (i32*, i32, i32)* @VirtualFree, { 2, 3, 1, 7, 6, 0, 5, 4 }
  uselistorder label %dec_label_pc_1000ff26, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_1000feda, { 1, 0 }
}

define i32 @function_1000ff3d(i16 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000ff3d:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v4_1000ff3d = sext i16 %arg1 to i32
  store i32 %v4_1000ff3d, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10018710 to i32), i32* %edx.global-to-local, align 4
  %v0_1000ff46 = load i32, i32* @esi, align 4
  store i32 %v0_1000ff46, i32* %stack_var_-4, align 4
  store i32 ptrtoint (i32* @global_var_10018710 to i32), i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000ff49

dec_label_pc_1000ff49:                            ; preds = %dec_label_pc_1000ff53, %dec_label_pc_1000ff3d
  %v0_1000ff74 = phi i32 [ %v2_1000ff53, %dec_label_pc_1000ff53 ], [ ptrtoint (i32* @global_var_10018710 to i32), %dec_label_pc_1000ff3d ]
  %v2_1000ff49 = add i32 %v0_1000ff74, 16
  %v3_1000ff49 = inttoptr i32 %v2_1000ff49 to i32*
  %v4_1000ff49 = load i32, i32* %v3_1000ff49, align 4
  %tmp11 = icmp ugt i32 %v4_1000ff3d, %v4_1000ff49
  br i1 %tmp11, label %dec_label_pc_1000ff4e, label %dec_label_pc_1000ff53

dec_label_pc_1000ff4e:                            ; preds = %dec_label_pc_1000ff49
  %v2_1000ff4e = add i32 %v0_1000ff74, 20
  %v3_1000ff4e = inttoptr i32 %v2_1000ff4e to i32*
  %v4_1000ff4e = load i32, i32* %v3_1000ff4e, align 4
  %v10_1000ff4e = icmp ult i32 %v4_1000ff3d, %v4_1000ff4e
  br i1 %v10_1000ff4e, label %dec_label_pc_1000ff5b, label %dec_label_pc_1000ff53

dec_label_pc_1000ff53:                            ; preds = %dec_label_pc_1000ff49, %dec_label_pc_1000ff4e
  %v1_1000ff53 = inttoptr i32 %v0_1000ff74 to i32*
  %v2_1000ff53 = load i32, i32* %v1_1000ff53, align 4
  store i32 %v2_1000ff53, i32* %ecx.global-to-local, align 4
  %v12_1000ff55 = icmp eq i32 %v2_1000ff53, ptrtoint (i32* @global_var_10018710 to i32)
  br i1 %v12_1000ff55, label %dec_label_pc_1000ff90.loopexit, label %dec_label_pc_1000ff49

dec_label_pc_1000ff5b:                            ; preds = %dec_label_pc_1000ff4e
  %v2_1000ff5b = and i32 %v4_1000ff3d, 15
  %v3_1000ff5b = icmp eq i32 %v2_1000ff5b, 0
  %v1_1000ff5d = icmp eq i1 %v3_1000ff5b, false
  br i1 %v1_1000ff5d, label %dec_label_pc_1000ff90, label %dec_label_pc_1000ff5f

dec_label_pc_1000ff5f:                            ; preds = %dec_label_pc_1000ff5b
  store i32 256, i32* %edx.global-to-local, align 4
  %v2_1000ff66 = and i32 %v4_1000ff3d, 3840
  %v7_1000ff6c = icmp ult i32 %v2_1000ff66, 256
  br i1 %v7_1000ff6c, label %dec_label_pc_1000ff90, label %dec_label_pc_1000ff70

dec_label_pc_1000ff70:                            ; preds = %dec_label_pc_1000ff5f
  %v2_1000ff74 = inttoptr i32 %arg2 to i32*
  store i32 %v0_1000ff74, i32* %v2_1000ff74, align 4
  %v0_1000ff7a = load i32, i32* %eax.global-to-local, align 4
  %v8_1000ff7c = and i32 %v0_1000ff7a, -4096
  store i32 %v8_1000ff7c, i32* %ecx.global-to-local, align 4
  %v2_1000ff81 = sub i32 %v0_1000ff7a, %v8_1000ff7c
  store i32 %v2_1000ff81, i32* %eax.global-to-local, align 4
  %v2_1000ff83 = inttoptr i32 %arg3 to i32*
  store i32 %v8_1000ff7c, i32* %v2_1000ff83, align 4
  %v0_1000ff85 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000ff85 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000ff85 = sub i32 %v0_1000ff85, %v1_1000ff85
  %v2_1000ff87 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000ff87, i32* @esi, align 4
  %v2_1000ff88 = sdiv i32 %v2_1000ff85, 16
  %v1_1000ff8b = load i32, i32* %ecx.global-to-local, align 4
  %v2_1000ff8b = add nsw i32 %v2_1000ff88, 8
  %v3_1000ff8b = add i32 %v2_1000ff8b, %v1_1000ff8b
  store i32 %v3_1000ff8b, i32* %eax.global-to-local, align 4
  ret i32 %v3_1000ff8b

dec_label_pc_1000ff90.loopexit:                   ; preds = %dec_label_pc_1000ff53
  br label %dec_label_pc_1000ff90

dec_label_pc_1000ff90:                            ; preds = %dec_label_pc_1000ff90.loopexit, %dec_label_pc_1000ff5f, %dec_label_pc_1000ff5b
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v0_1000ff46, i32* @esi, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v8_1000ff7c, { 2, 1, 0 }
  uselistorder i32 %v0_1000ff7a, { 1, 0 }
  uselistorder i32 %v2_1000ff53, { 0, 2, 1 }
  uselistorder i32 %v4_1000ff3d, { 2, 3, 1, 0, 4 }
  uselistorder label %dec_label_pc_1000ff53, { 1, 0 }
}

define i32 @function_1000ff94(i32 %arg1, i32 %arg2, i8* %arg3) local_unnamed_addr {
dec_label_pc_1000ff94:
  %ecx.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  %v2_1000ff9c = add i32 %arg1, 16
  %v3_1000ff9c = inttoptr i32 %v2_1000ff9c to i32*
  %v4_1000ff9c = load i32, i32* %v3_1000ff9c, align 4
  %v5_1000ff9c = sub i32 %arg2, %v4_1000ff9c
  %v2_1000ff9f = sdiv i32 %v5_1000ff9c, 4096
  %v2_1000ffa2 = mul nsw i32 %v2_1000ff9f, 8
  %v3_1000ffa2 = add i32 %arg1, 24
  %v4_1000ffa2 = add i32 %v3_1000ffa2, %v2_1000ffa2
  store i32 %v4_1000ffa2, i32* @eax, align 4
  %v4_1000ffa6 = ptrtoint i8* %arg3 to i32
  store i32 %v4_1000ffa6, i32* %ecx.global-to-local, align 4
  %v2_1000ffaa = load i8, i8* %arg3, align 1
  %v3_1000ffaa = zext i8 %v2_1000ffaa to i32
  %v1_1000ffad = inttoptr i32 %v4_1000ffa2 to i32*
  %v2_1000ffad = load i32, i32* %v1_1000ffad, align 4
  %v4_1000ffad = add i32 %v2_1000ffad, %v3_1000ffaa
  store i32 %v4_1000ffad, i32* %v1_1000ffad, align 4
  %v3_1000ffaf = load i32, i32* %ecx.global-to-local, align 4
  %v4_1000ffaf = inttoptr i32 %v3_1000ffaf to i8*
  store i8 0, i8* %v4_1000ffaf, align 1
  %v0_1000ffb2 = load i32, i32* @eax, align 4
  %v1_1000ffb2 = inttoptr i32 %v0_1000ffb2 to i32*
  %v2_1000ffb2 = load i32, i32* %v1_1000ffb2, align 4
  %v8_1000ffb2 = icmp eq i32 %v2_1000ffb2, 240
  %v1_1000ffb8 = add i32 %v0_1000ffb2, 4
  %v2_1000ffb8 = inttoptr i32 %v1_1000ffb8 to i32*
  store i32 241, i32* %v2_1000ffb8, align 4
  %v1_1000ffbf = icmp eq i1 %v8_1000ffb2, false
  br i1 %v1_1000ffbf, label %dec_label_pc_1000ffd8, label %dec_label_pc_1000ffc1

dec_label_pc_1000ffc1:                            ; preds = %dec_label_pc_1000ff94
  %v0_1000ffc1 = load i32, i32* @global_var_1001b434.158, align 4
  %v1_1000ffc1 = add i32 %v0_1000ffc1, 1
  store i32 %v1_1000ffc1, i32* @global_var_1001b434.158, align 4
  %v6_1000ffc7 = icmp eq i32 %v0_1000ffc1, 31
  %v1_1000ffce = icmp eq i1 %v6_1000ffc7, false
  br i1 %v1_1000ffce, label %dec_label_pc_1000ffd8, label %dec_label_pc_1000ffd0

dec_label_pc_1000ffd0:                            ; preds = %dec_label_pc_1000ffc1
  %v1_1000ffd2 = call i32 @function_1000fe7b(i32 16)
  store i32 %v1_1000ffd2, i32* @eax, align 4
  store i32 16, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1000ffd8

dec_label_pc_1000ffd8:                            ; preds = %dec_label_pc_1000ffc1, %dec_label_pc_1000ff94, %dec_label_pc_1000ffd0
  %v0_1000ffd8 = load i32, i32* @eax, align 4
  ret i32 %v0_1000ffd8

; uselistorder directives
  uselistorder i8* %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_1000ffd8, { 2, 0, 1 }
}

define i32 @function_1000ffd9(i8 %arg1) local_unnamed_addr {
dec_label_pc_1000ffd9:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_1000ffde = load i32, i32* @ebx, align 4
  %v0_1000ffdf = load i32, i32* @esi, align 4
  %v0_1000ffe0 = load i32, i32* bitcast (i32** @global_var_1001a730.157 to i32*), align 16
  store i32 %v0_1000ffe0, i32* @esi, align 4
  %v4_10010092 = sext i8 %arg1 to i32
  br label %dec_label_pc_1000ffe7

dec_label_pc_1000ffe7:                            ; preds = %dec_label_pc_10010095, %dec_label_pc_1000ffd9
  %v1_1000fffe = phi i32 [ %v2_10010095, %dec_label_pc_10010095 ], [ %v0_1000ffe0, %dec_label_pc_1000ffd9 ]
  %v1_1000ffe7 = add i32 %v1_1000fffe, 16
  %v2_1000ffe7 = inttoptr i32 %v1_1000ffe7 to i32*
  %v3_1000ffe7 = load i32, i32* %v2_1000ffe7, align 4
  store i32 %v3_1000ffe7, i32* %edx.global-to-local, align 4
  %v10_1000ffea = icmp eq i32 %v3_1000ffe7, -1
  br i1 %v10_1000ffea, label %dec_label_pc_10010092, label %dec_label_pc_1000fff3

dec_label_pc_1000fff3:                            ; preds = %dec_label_pc_1000ffe7
  %v1_1000fff3 = add i32 %v1_1000fffe, 8
  %v2_1000fff3 = inttoptr i32 %v1_1000fff3 to i32*
  %v3_1000fff3 = load i32, i32* %v2_1000fff3, align 4
  store i32 %v3_1000fff3, i32* @edi, align 4
  %v1_1000fff6 = add i32 %v1_1000fffe, 8216
  store i32 %v1_1000fff6, i32* %ecx.global-to-local, align 4
  %v2_1000fffe = sub i32 8388584, %v1_1000fffe
  %v1_10010000 = add i32 %v2_1000fffe, %v3_1000fff3
  %v2_1001000351 = udiv i32 %v1_10010000, 8
  %v2_10010006 = mul i32 %v2_1001000351, 4096
  %v2_10010009 = add i32 %v2_10010006, %v3_1000ffe7
  store i32 %v2_10010009, i32* %eax.global-to-local, align 4
  %v7_1001000b = icmp ult i32 %v3_1000fff3, %v1_1000fff6
  %v1_10010010 = icmp eq i1 %v7_1001000b, false
  br i1 %v1_10010010, label %dec_label_pc_1001004c, label %dec_label_pc_10010012

dec_label_pc_10010012:                            ; preds = %dec_label_pc_1000fff3, %dec_label_pc_10010035
  %stack_var_-8.0 = phi i32 [ %v1_1001003e, %dec_label_pc_10010035 ], [ %v2_10010009, %dec_label_pc_1000fff3 ]
  %v0_1001003826 = phi i32 [ %v0_10010038, %dec_label_pc_10010035 ], [ %v1_1000fffe, %dec_label_pc_1000fff3 ]
  %v0_1001001b = phi i32 [ %v1_10010035, %dec_label_pc_10010035 ], [ %v3_1000fff3, %dec_label_pc_1000fff3 ]
  %v1_10010012 = inttoptr i32 %v0_1001001b to i32*
  %v2_10010012 = load i32, i32* %v1_10010012, align 4
  store i32 %v2_10010012, i32* %ecx.global-to-local, align 4
  store i32 %v4_10010092, i32* @ebx, align 4
  %v2_10010017 = trunc i32 %v2_10010012 to i8
  %v7_10010019 = icmp slt i8 %v2_10010017, %arg1
  br i1 %v7_10010019, label %dec_label_pc_10010035, label %dec_label_pc_1001001b

dec_label_pc_1001001b:                            ; preds = %dec_label_pc_10010012
  %v1_1001001b = add i32 %v0_1001001b, 4
  %v2_1001001b = inttoptr i32 %v1_1001001b to i32*
  %v3_1001001b = load i32, i32* %v2_1001001b, align 4
  %tmp = icmp ugt i32 %v3_1001001b, %v4_10010092
  br i1 %tmp, label %dec_label_pc_10010020, label %dec_label_pc_10010035

dec_label_pc_10010020:                            ; preds = %dec_label_pc_1001001b
  %v4_10010023 = inttoptr i32 %stack_var_-8.0 to i32*
  %v5_10010023 = call i32 @function_100101e1(i32* %v4_10010023, i32 %v2_10010012, i32 %v4_10010092)
  store i32 %v5_10010023, i32* %eax.global-to-local, align 4
  %v1_1001002b = icmp eq i32 %v5_10010023, 0
  %v1_1001002d = icmp eq i1 %v1_1001002b, false
  br i1 %v1_1001002d, label %dec_label_pc_100100a4, label %dec_label_pc_1001002f

dec_label_pc_1001002f:                            ; preds = %dec_label_pc_10010020
  store i32 %stack_var_-8.0, i32* %eax.global-to-local, align 4
  %v0_10010032 = load i32, i32* @ebx, align 4
  %v1_10010032 = load i32, i32* @edi, align 4
  %v2_10010032 = add i32 %v1_10010032, 4
  %v3_10010032 = inttoptr i32 %v2_10010032 to i32*
  store i32 %v0_10010032, i32* %v3_10010032, align 4
  %v0_10010035.pre = load i32, i32* @edi, align 4
  %v0_10010038.pre = load i32, i32* @esi, align 4
  %v0_1001003e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10010035

dec_label_pc_10010035:                            ; preds = %dec_label_pc_1001001b, %dec_label_pc_10010012, %dec_label_pc_1001002f
  %v0_1001003e = phi i32 [ %stack_var_-8.0, %dec_label_pc_1001001b ], [ %stack_var_-8.0, %dec_label_pc_10010012 ], [ %v0_1001003e.pre, %dec_label_pc_1001002f ]
  %v0_10010038 = phi i32 [ %v0_1001003826, %dec_label_pc_1001001b ], [ %v0_1001003826, %dec_label_pc_10010012 ], [ %v0_10010038.pre, %dec_label_pc_1001002f ]
  %v0_10010035 = phi i32 [ %v0_1001001b, %dec_label_pc_1001001b ], [ %v0_1001001b, %dec_label_pc_10010012 ], [ %v0_10010035.pre, %dec_label_pc_1001002f ]
  %v1_10010035 = add i32 %v0_10010035, 8
  store i32 %v1_10010035, i32* @edi, align 4
  %v1_10010038 = add i32 %v0_10010038, 8216
  store i32 %v1_10010038, i32* %ecx.global-to-local, align 4
  %v1_1001003e = add i32 %v0_1001003e, 4096
  store i32 %v1_1001003e, i32* %eax.global-to-local, align 4
  %v7_10010043 = icmp ult i32 %v1_10010035, %v1_10010038
  br i1 %v7_10010043, label %dec_label_pc_10010012, label %dec_label_pc_1001004f

dec_label_pc_1001004c:                            ; preds = %dec_label_pc_1000fff3
  store i32 %v4_10010092, i32* @ebx, align 4
  br label %dec_label_pc_1001004f

dec_label_pc_1001004f:                            ; preds = %dec_label_pc_10010035, %dec_label_pc_1001004c
  %v0_10010055 = phi i32 [ %v1_1000fffe, %dec_label_pc_1001004c ], [ %v0_10010038, %dec_label_pc_10010035 ]
  %v1_1001004f = add i32 %v0_10010055, 8
  %v2_1001004f = inttoptr i32 %v1_1001004f to i32*
  %v3_1001004f = load i32, i32* %v2_1001004f, align 4
  store i32 %v3_1001004f, i32* %eax.global-to-local, align 4
  %v1_10010052 = add i32 %v0_10010055, 16
  %v2_10010052 = inttoptr i32 %v1_10010052 to i32*
  %v3_10010052 = load i32, i32* %v2_10010052, align 4
  store i32 %v3_10010052, i32* %ecx.global-to-local, align 4
  %v1_10010055 = add i32 %v0_10010055, 24
  store i32 %v1_10010055, i32* @edi, align 4
  %v7_1001005b = icmp ult i32 %v1_10010055, %v3_1001004f
  %v1_10010060 = icmp eq i1 %v7_1001005b, false
  br i1 %v1_10010060, label %dec_label_pc_10010095, label %dec_label_pc_10010062

dec_label_pc_10010062:                            ; preds = %dec_label_pc_1001004f, %dec_label_pc_10010081
  %stack_var_-8.1 = phi i32 [ %v4_10010081, %dec_label_pc_10010081 ], [ %v3_10010052, %dec_label_pc_1001004f ]
  %v0_10010068 = phi i32 [ %v1_10010088, %dec_label_pc_10010081 ], [ %v1_10010055, %dec_label_pc_1001004f ]
  %v1_10010062 = inttoptr i32 %v0_10010068 to i32*
  %v2_10010062 = load i32, i32* %v1_10010062, align 4
  store i32 %v2_10010062, i32* %eax.global-to-local, align 4
  %v1_10010064 = load i32, i32* @ebx, align 4
  %v2_10010064 = trunc i32 %v2_10010062 to i8
  %v3_10010064 = trunc i32 %v1_10010064 to i8
  %v7_10010066 = icmp slt i8 %v2_10010064, %v3_10010064
  br i1 %v7_10010066, label %dec_label_pc_10010081, label %dec_label_pc_10010068

dec_label_pc_10010068:                            ; preds = %dec_label_pc_10010062
  %v1_10010068 = add i32 %v0_10010068, 4
  %v2_10010068 = inttoptr i32 %v1_10010068 to i32*
  %v3_10010068 = load i32, i32* %v2_10010068, align 4
  %tmp74 = icmp ugt i32 %v3_10010068, %v1_10010064
  br i1 %tmp74, label %dec_label_pc_1001006d, label %dec_label_pc_10010081

dec_label_pc_1001006d:                            ; preds = %dec_label_pc_10010068
  %sext = mul i32 %v1_10010064, 16777216
  %v3_10010072 = sdiv i32 %sext, 16777216
  %v4_10010072 = inttoptr i32 %stack_var_-8.1 to i32*
  %v5_10010072 = call i32 @function_100101e1(i32* %v4_10010072, i32 %v2_10010062, i32 %v3_10010072)
  store i32 %v5_10010072, i32* %eax.global-to-local, align 4
  %v1_1001007a = icmp eq i32 %v5_10010072, 0
  %v1_1001007c = icmp eq i1 %v1_1001007a, false
  br i1 %v1_1001007c, label %dec_label_pc_100100a4, label %dec_label_pc_1001007e

dec_label_pc_1001007e:                            ; preds = %dec_label_pc_1001006d
  %v0_1001007e = load i32, i32* @ebx, align 4
  %v1_1001007e = load i32, i32* @edi, align 4
  %v2_1001007e = add i32 %v1_1001007e, 4
  %v3_1001007e = inttoptr i32 %v2_1001007e to i32*
  store i32 %v0_1001007e, i32* %v3_1001007e, align 4
  %v0_10010088.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_10010081

dec_label_pc_10010081:                            ; preds = %dec_label_pc_10010068, %dec_label_pc_10010062, %dec_label_pc_1001007e
  %v0_10010088 = phi i32 [ %v0_10010068, %dec_label_pc_10010068 ], [ %v0_10010068, %dec_label_pc_10010062 ], [ %v0_10010088.pre, %dec_label_pc_1001007e ]
  %v4_10010081 = add i32 %stack_var_-8.1, 4096
  %v1_10010088 = add i32 %v0_10010088, 8
  store i32 %v1_10010088, i32* @edi, align 4
  %v10_1001008b = icmp ult i32 %v1_10010088, %v3_1001004f
  br i1 %v10_1001008b, label %dec_label_pc_10010062, label %dec_label_pc_10010095

dec_label_pc_10010092:                            ; preds = %dec_label_pc_1000ffe7
  store i32 %v4_10010092, i32* @ebx, align 4
  br label %dec_label_pc_10010095

dec_label_pc_10010095:                            ; preds = %dec_label_pc_10010081, %dec_label_pc_1001004f, %dec_label_pc_10010092
  %v0_10010095 = load i32, i32* @esi, align 4
  %v1_10010095 = inttoptr i32 %v0_10010095 to i32*
  %v2_10010095 = load i32, i32* %v1_10010095, align 4
  store i32 %v2_10010095, i32* @esi, align 4
  %v1_10010097 = load i32, i32* bitcast (i32** @global_var_1001a730.157 to i32*), align 16
  %v12_10010097 = icmp eq i32 %v2_10010095, %v1_10010097
  br i1 %v12_10010097, label %dec_label_pc_100100b4, label %dec_label_pc_1000ffe7

dec_label_pc_100100a4:                            ; preds = %dec_label_pc_10010020, %dec_label_pc_1001006d
  %v0_100100a4 = load i32, i32* @esi, align 4
  store i32 %v0_100100a4, i32* bitcast (i32** @global_var_1001a730.157 to i32*), align 16
  %v0_100100aa = load i32, i32* @edi, align 4
  %v1_100100aa = inttoptr i32 %v0_100100aa to i32*
  %v2_100100aa = load i32, i32* %v1_100100aa, align 4
  %v3_100100aa = load i32, i32* @ebx, align 4
  %v4_100100aa = sub i32 %v2_100100aa, %v3_100100aa
  store i32 %v4_100100aa, i32* %v1_100100aa, align 4
  %v0_100100ac = load i32, i32* @edi, align 4
  %v1_100100ac = load i32, i32* @esi, align 4
  %v2_100100ac = add i32 %v1_100100ac, 8
  %v3_100100ac = inttoptr i32 %v2_100100ac to i32*
  store i32 %v0_100100ac, i32* %v3_100100ac, align 4
  br label %dec_label_pc_100101dc

dec_label_pc_100100b4:                            ; preds = %dec_label_pc_10010095
  store i32 ptrtoint (i32* @global_var_10018710 to i32), i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10018710 to i32), i32* @edi, align 4
  br label %dec_label_pc_100100bb

dec_label_pc_100100bb:                            ; preds = %dec_label_pc_100100c7, %dec_label_pc_100100b4
  %v0_100100c7 = phi i32 [ %v2_100100c7, %dec_label_pc_100100c7 ], [ ptrtoint (i32* @global_var_10018710 to i32), %dec_label_pc_100100b4 ]
  %v1_100100bb = add i32 %v0_100100c7, 16
  %v2_100100bb = inttoptr i32 %v1_100100bb to i32*
  %v3_100100bb = load i32, i32* %v2_100100bb, align 4
  %v13_100100bb = icmp eq i32 %v3_100100bb, -1
  br i1 %v13_100100bb, label %dec_label_pc_100100c7, label %dec_label_pc_100100c1

dec_label_pc_100100c1:                            ; preds = %dec_label_pc_100100bb
  %v1_100100c1 = add i32 %v0_100100c7, 12
  %v2_100100c1 = inttoptr i32 %v1_100100c1 to i32*
  %v3_100100c1 = load i32, i32* %v2_100100c1, align 4
  %v4_100100c1 = icmp eq i32 %v3_100100c1, 0
  %v1_100100c5 = icmp eq i1 %v4_100100c1, false
  br i1 %v1_100100c5, label %dec_label_pc_100100d3, label %dec_label_pc_100100c7

dec_label_pc_100100c7:                            ; preds = %dec_label_pc_100100c1, %dec_label_pc_100100bb
  %v1_100100c7 = inttoptr i32 %v0_100100c7 to i32*
  %v2_100100c7 = load i32, i32* %v1_100100c7, align 4
  store i32 %v2_100100c7, i32* @edi, align 4
  %v12_100100c9 = icmp eq i32 %v2_100100c7, ptrtoint (i32* @global_var_10018710 to i32)
  br i1 %v12_100100c9, label %dec_label_pc_100101a8, label %dec_label_pc_100100bb

dec_label_pc_100100d3:                            ; preds = %dec_label_pc_100100c1
  store i32 %v3_100100c1, i32* %ebx.global-to-local, align 4
  store i32 %v3_100100c1, i32* %eax.global-to-local, align 4
  %v2_100100de = sub i32 8388584, %v0_100100c7
  %v1_100100e0 = add i32 %v2_100100de, %v3_100100c1
  %v2_100100e352 = udiv i32 %v1_100100e0, 8
  %v2_100100e6 = mul i32 %v2_100100e352, 4096
  store i32 %v2_100100e6, i32* %esi.global-to-local, align 4
  %v4_100100e9 = load i32, i32* %v2_100100bb, align 4
  %v5_100100e9 = add i32 %v4_100100e9, %v2_100100e6
  store i32 %v5_100100e9, i32* %esi.global-to-local, align 4
  %v1_100100ec = inttoptr i32 %v3_100100c1 to i32*
  %v2_100100ec = load i32, i32* %v1_100100ec, align 4
  %v12_100100ec = icmp eq i32 %v2_100100ec, -1
  %v1_100100ef = icmp eq i1 %v12_100100ec, false
  br i1 %v1_100100ef, label %dec_label_pc_10010102, label %dec_label_pc_100100f1

dec_label_pc_100100f1:                            ; preds = %dec_label_pc_100100d3, %dec_label_pc_100100f7
  %stack_var_-8.2 = phi i32 [ %v4_100100fa, %dec_label_pc_100100f7 ], [ 0, %dec_label_pc_100100d3 ]
  %v0_100100f7 = phi i32 [ %v1_100100f7, %dec_label_pc_100100f7 ], [ %v3_100100c1, %dec_label_pc_100100d3 ]
  %v5_100100f5 = icmp slt i32 %stack_var_-8.2, 16
  br i1 %v5_100100f5, label %dec_label_pc_100100f7, label %dec_label_pc_10010102.loopexit

dec_label_pc_100100f7:                            ; preds = %dec_label_pc_100100f1
  %v1_100100f7 = add i32 %v0_100100f7, 8
  store i32 %v1_100100f7, i32* %eax.global-to-local, align 4
  %v4_100100fa = add nuw nsw i32 %stack_var_-8.2, 1
  %v1_100100fd = inttoptr i32 %v1_100100f7 to i32*
  %v2_100100fd = load i32, i32* %v1_100100fd, align 4
  %v12_100100fd = icmp eq i32 %v2_100100fd, -1
  br i1 %v12_100100fd, label %dec_label_pc_100100f1, label %dec_label_pc_10010102.loopexit

dec_label_pc_10010102.loopexit:                   ; preds = %dec_label_pc_100100f7, %dec_label_pc_100100f1
  %stack_var_-8.3 = phi i32 [ %v4_100100fa, %dec_label_pc_100100f7 ], [ %stack_var_-8.2, %dec_label_pc_100100f1 ]
  br label %dec_label_pc_10010102

dec_label_pc_10010102:                            ; preds = %dec_label_pc_10010102.loopexit, %dec_label_pc_100100d3
  %stack_var_-8.4 = phi i32 [ 0, %dec_label_pc_100100d3 ], [ %stack_var_-8.3, %dec_label_pc_10010102.loopexit ]
  %v2_10010107 = mul i32 %stack_var_-8.4, 4096
  store i32 %v2_10010107, i32* %eax.global-to-local, align 4
  %v7_10010114 = inttoptr i32 %v5_100100e9 to i32*
  %v8_10010114 = call i32* @VirtualAlloc(i32* %v7_10010114, i32 %v2_10010107, i32 4096, i32 4)
  %v9_10010114 = ptrtoint i32* %v8_10010114 to i32
  store i32 %v9_10010114, i32* %eax.global-to-local, align 4
  %v1_1001011a = load i32, i32* %esi.global-to-local, align 4
  %v12_1001011a = icmp eq i32 %v9_10010114, %v1_1001011a
  %v1_1001011c = icmp eq i1 %v12_1001011a, false
  br i1 %v1_1001011c, label %dec_label_pc_100101da, label %dec_label_pc_10010122

dec_label_pc_10010122:                            ; preds = %dec_label_pc_10010102
  %v4_10010128 = inttoptr i32 %v1_1001011a to i8*
  %v5_10010128 = call i32 @function_10012000(i8* %v4_10010128, i32 %v2_10010107, i32 0)
  store i32 %v5_10010128, i32* %eax.global-to-local, align 4
  store i32 %stack_var_-8.4, i32* %edx.global-to-local, align 4
  %v0_10010135 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_10010135, i32* %ecx.global-to-local, align 4
  %tmp64 = icmp slt i32 %stack_var_-8.4, 1
  br i1 %tmp64, label %dec_label_pc_10010169, label %dec_label_pc_10010139

dec_label_pc_10010139:                            ; preds = %dec_label_pc_10010122
  %v0_10010139 = load i32, i32* %esi.global-to-local, align 4
  %v1_10010139 = add i32 %v0_10010139, 4
  store i32 %v1_10010139, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1001013f

dec_label_pc_1001013f:                            ; preds = %dec_label_pc_1001013f, %dec_label_pc_10010139
  %stack_var_-8.5 = phi i32 [ %stack_var_-8.4, %dec_label_pc_10010139 ], [ %v4_10010164, %dec_label_pc_1001013f ]
  %v4_1001013f = phi i32 [ %v1_10010139, %dec_label_pc_10010139 ], [ %v1_1001015c, %dec_label_pc_1001013f ]
  %v5_1001013f = add i32 %v4_1001013f, 244
  %v6_1001013f = inttoptr i32 %v5_1001013f to i8*
  store i8 -1, i8* %v6_1001013f, align 1
  %v0_10010146 = load i32, i32* %eax.global-to-local, align 4
  %v1_10010146 = add i32 %v0_10010146, 4
  %v2_10010149 = add i32 %v0_10010146, -4
  %v3_10010149 = inttoptr i32 %v2_10010149 to i32*
  store i32 %v1_10010146, i32* %v3_10010149, align 4
  store i32 240, i32* %edx.global-to-local, align 4
  %v1_10010151 = load i32, i32* %eax.global-to-local, align 4
  %v2_10010151 = inttoptr i32 %v1_10010151 to i32*
  store i32 240, i32* %v2_10010151, align 4
  %v0_10010153 = load i32, i32* %edx.global-to-local, align 4
  %v1_10010153 = load i32, i32* %ecx.global-to-local, align 4
  %v2_10010153 = inttoptr i32 %v1_10010153 to i32*
  store i32 %v0_10010153, i32* %v2_10010153, align 4
  %v0_10010155 = load i32, i32* %ecx.global-to-local, align 4
  %v1_10010155 = add i32 %v0_10010155, 4
  %v2_10010155 = inttoptr i32 %v1_10010155 to i32*
  store i32 241, i32* %v2_10010155, align 4
  %v0_1001015c = load i32, i32* %eax.global-to-local, align 4
  %v1_1001015c = add i32 %v0_1001015c, 4096
  store i32 %v1_1001015c, i32* %eax.global-to-local, align 4
  %v0_10010161 = load i32, i32* %ecx.global-to-local, align 4
  %v1_10010161 = add i32 %v0_10010161, 8
  store i32 %v1_10010161, i32* %ecx.global-to-local, align 4
  %v4_10010164 = add i32 %stack_var_-8.5, -1
  %v11_10010164 = icmp eq i32 %v4_10010164, 0
  %v1_10010167 = icmp eq i1 %v11_10010164, false
  br i1 %v1_10010167, label %dec_label_pc_1001013f, label %dec_label_pc_10010169

dec_label_pc_10010169:                            ; preds = %dec_label_pc_1001013f, %dec_label_pc_10010122
  %v0_100101753 = phi i32 [ %v0_10010135, %dec_label_pc_10010122 ], [ %v1_10010161, %dec_label_pc_1001013f ]
  %v0_10010169 = load i32, i32* @edi, align 4
  store i32 %v0_10010169, i32* bitcast (i32** @global_var_1001a730.157 to i32*), align 16
  %v1_1001016f = add i32 %v0_10010169, 8216
  store i32 %v1_1001016f, i32* %eax.global-to-local, align 4
  %v7_100101756 = icmp ult i32 %v0_100101753, %v1_1001016f
  %v1_1001017713 = icmp eq i1 %v7_100101756, false
  br i1 %v1_1001017713, label %dec_label_pc_10010185, label %dec_label_pc_10010179

dec_label_pc_10010179:                            ; preds = %dec_label_pc_10010169, %dec_label_pc_1001017e
  %v0_10010179 = phi i32 [ %v1_1001017e, %dec_label_pc_1001017e ], [ %v0_100101753, %dec_label_pc_10010169 ]
  %v1_10010179 = inttoptr i32 %v0_10010179 to i32*
  %v2_10010179 = load i32, i32* %v1_10010179, align 4
  %v12_10010179 = icmp eq i32 %v2_10010179, -1
  br i1 %v12_10010179, label %dec_label_pc_10010183, label %dec_label_pc_1001017e

dec_label_pc_1001017e:                            ; preds = %dec_label_pc_10010179
  %v1_1001017e = add i32 %v0_10010179, 8
  store i32 %v1_1001017e, i32* %ecx.global-to-local, align 4
  %v7_10010175 = icmp ult i32 %v1_1001017e, %v1_1001016f
  %v1_10010177 = icmp eq i1 %v7_10010175, false
  br i1 %v1_10010177, label %dec_label_pc_10010175.dec_label_pc_10010185.loopexit_crit_edge, label %dec_label_pc_10010179

dec_label_pc_10010183:                            ; preds = %dec_label_pc_10010179
  %v7_10010183 = icmp ult i32 %v0_10010179, %v1_1001016f
  br label %dec_label_pc_10010185

dec_label_pc_10010175.dec_label_pc_10010185.loopexit_crit_edge: ; preds = %dec_label_pc_1001017e
  br label %dec_label_pc_10010185

dec_label_pc_10010185:                            ; preds = %dec_label_pc_10010169, %dec_label_pc_10010175.dec_label_pc_10010185.loopexit_crit_edge, %dec_label_pc_10010183
  %v1_10010187 = phi i32 [ %v0_10010179, %dec_label_pc_10010183 ], [ %v1_1001017e, %dec_label_pc_10010175.dec_label_pc_10010185.loopexit_crit_edge ], [ %v0_100101753, %dec_label_pc_10010169 ]
  %v1_10010185 = phi i1 [ %v7_10010183, %dec_label_pc_10010183 ], [ false, %dec_label_pc_10010175.dec_label_pc_10010185.loopexit_crit_edge ], [ false, %dec_label_pc_10010169 ]
  %v2_10010185 = zext i1 %v1_10010185 to i32
  %v2_10010187 = and i32 %v2_10010185, %v1_10010187
  %v2_10010189 = add i32 %v0_10010169, 12
  %v3_10010189 = inttoptr i32 %v2_10010189 to i32*
  store i32 %v2_10010187, i32* %v3_10010189, align 4
  store i32 %v4_10010092, i32* %eax.global-to-local, align 4
  %v2_1001018f = load i32, i32* %esi.global-to-local, align 4
  %v3_1001018f = add i32 %v2_1001018f, 8
  %v4_1001018f = inttoptr i32 %v3_1001018f to i8*
  store i8 %arg1, i8* %v4_1001018f, align 1
  %v0_10010192 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10010192 = load i32, i32* @edi, align 4
  %v2_10010192 = add i32 %v1_10010192, 8
  %v3_10010192 = inttoptr i32 %v2_10010192 to i32*
  store i32 %v0_10010192, i32* %v3_10010192, align 4
  %v0_10010195 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10010195 = inttoptr i32 %v0_10010195 to i32*
  %v2_10010195 = load i32, i32* %v1_10010195, align 4
  %v3_10010195 = load i32, i32* %eax.global-to-local, align 4
  %v4_10010195 = sub i32 %v2_10010195, %v3_10010195
  store i32 %v4_10010195, i32* %v1_10010195, align 4
  %v0_10010197 = load i32, i32* %esi.global-to-local, align 4
  %v1_10010197 = add i32 %v0_10010197, 4
  %v2_10010197 = inttoptr i32 %v1_10010197 to i32*
  %v3_10010197 = load i32, i32* %v2_10010197, align 4
  %v4_10010197 = load i32, i32* %eax.global-to-local, align 4
  %v5_10010197 = sub i32 %v3_10010197, %v4_10010197
  store i32 %v5_10010197, i32* %v2_10010197, align 4
  %v0_1001019a = load i32, i32* %esi.global-to-local, align 4
  %v1_1001019a = load i32, i32* %eax.global-to-local, align 4
  %v2_1001019a = add i32 %v0_1001019a, 8
  %v3_1001019a = add i32 %v2_1001019a, %v1_1001019a
  store i32 %v3_1001019a, i32* %ecx.global-to-local, align 4
  %v1_1001019e = add i32 %v0_1001019a, 256
  store i32 %v1_1001019e, i32* %eax.global-to-local, align 4
  %v2_100101a4 = inttoptr i32 %v0_1001019a to i32*
  store i32 %v3_1001019a, i32* %v2_100101a4, align 4
  br label %dec_label_pc_100101dc

dec_label_pc_100101a8:                            ; preds = %dec_label_pc_100100c7
  %v0_100101a8 = call i32 @function_1000fce1()
  store i32 %v0_100101a8, i32* %eax.global-to-local, align 4
  %v1_100101ad = icmp eq i32 %v0_100101a8, 0
  br i1 %v1_100101ad, label %dec_label_pc_100101da, label %dec_label_pc_100101b1

dec_label_pc_100101b1:                            ; preds = %dec_label_pc_100101a8
  %v1_100101b1 = add i32 %v0_100101a8, 16
  %v2_100101b1 = inttoptr i32 %v1_100101b1 to i32*
  %v3_100101b1 = load i32, i32* %v2_100101b1, align 4
  store i32 %v3_100101b1, i32* %ecx.global-to-local, align 4
  %v0_100101b4 = load i32, i32* @ebx, align 4
  %v1_100101b4 = trunc i32 %v0_100101b4 to i8
  %v3_100101b4 = add i32 %v3_100101b1, 8
  %v4_100101b4 = inttoptr i32 %v3_100101b4 to i8*
  store i8 %v1_100101b4, i8* %v4_100101b4, align 1
  %v0_100101b7 = load i32, i32* %ecx.global-to-local, align 4
  %v1_100101b7 = load i32, i32* @ebx, align 4
  %v2_100101b7 = add i32 %v0_100101b7, 8
  %v3_100101b7 = add i32 %v2_100101b7, %v1_100101b7
  %v0_100101bb = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_100101bb, i32* bitcast (i32** @global_var_1001a730.157 to i32*), align 16
  %v2_100101c0 = inttoptr i32 %v0_100101b7 to i32*
  store i32 %v3_100101b7, i32* %v2_100101c0, align 4
  %v1_100101c7 = load i32, i32* @ebx, align 4
  %v2_100101c7 = sub i32 240, %v1_100101c7
  %v1_100101c9 = load i32, i32* %ecx.global-to-local, align 4
  %v2_100101c9 = add i32 %v1_100101c9, 4
  %v3_100101c9 = inttoptr i32 %v2_100101c9 to i32*
  store i32 %v2_100101c7, i32* %v3_100101c9, align 4
  %v0_100101cc = load i32, i32* @ebx, align 4
  %v1_100101cc = and i32 %v0_100101cc, 255
  store i32 %v1_100101cc, i32* %edx.global-to-local, align 4
  %v0_100101cf = load i32, i32* %eax.global-to-local, align 4
  %v1_100101cf = add i32 %v0_100101cf, 24
  %v2_100101cf = inttoptr i32 %v1_100101cf to i32*
  %v3_100101cf = load i32, i32* %v2_100101cf, align 4
  %v5_100101cf = sub i32 %v3_100101cf, %v1_100101cc
  store i32 %v5_100101cf, i32* %v2_100101cf, align 4
  %v0_100101d2 = load i32, i32* %ecx.global-to-local, align 4
  %v1_100101d2 = add i32 %v0_100101d2, 256
  store i32 %v1_100101d2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100101dc

dec_label_pc_100101da:                            ; preds = %dec_label_pc_100101a8, %dec_label_pc_10010102
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100101dc

dec_label_pc_100101dc:                            ; preds = %dec_label_pc_100101b1, %dec_label_pc_10010185, %dec_label_pc_100100a4, %dec_label_pc_100101da
  store i32 %v0_1000ffdf, i32* @esi, align 4
  store i32 %v0_1000ffde, i32* @ebx, align 4
  %v0_100101e0 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_100101e0

; uselistorder directives
  uselistorder i32 %v1_1001017e, { 0, 2, 3, 1 }
  uselistorder i32 %v0_10010179, { 0, 1, 3, 2 }
  uselistorder i32 %v1_1001016f, { 1, 0, 2, 3 }
  uselistorder i32 %v0_100101753, { 1, 0, 2 }
  uselistorder i32 %v4_10010164, { 1, 0 }
  uselistorder i32 %v1_1001015c, { 1, 0 }
  uselistorder i32 %v1_1001011a, { 1, 0 }
  uselistorder i32 %v2_10010107, { 2, 1, 0 }
  uselistorder i32 %stack_var_-8.4, { 1, 3, 2, 0 }
  uselistorder i32 %v4_100100fa, { 1, 0 }
  uselistorder i32 %v1_100100f7, { 1, 2, 0 }
  uselistorder i32 %stack_var_-8.2, { 2, 1, 0 }
  uselistorder i32 %v2_100100e6, { 1, 0 }
  uselistorder i32 %v2_100100c7, { 0, 2, 1 }
  uselistorder i32 %v3_100100c1, { 0, 2, 1, 4, 3, 5 }
  uselistorder i32 %v2_10010095, { 0, 2, 1 }
  uselistorder i32 %v1_10010088, { 1, 2, 0 }
  uselistorder i32 %v1_10010064, { 1, 0, 2 }
  uselistorder i32 %v0_10010055, { 0, 2, 1 }
  uselistorder i32 %v1_1001003e, { 1, 0 }
  uselistorder i32 %v1_10010035, { 1, 2, 0 }
  uselistorder i32 %v0_10010038, { 0, 2, 1 }
  uselistorder i32 %stack_var_-8.0, { 2, 1, 3, 0 }
  uselistorder i32 %v3_1000fff3, { 0, 2, 1, 3 }
  uselistorder i32 %v3_1000ffe7, { 1, 0, 2 }
  uselistorder i32 %v1_1000fffe, { 2, 0, 1, 4, 3, 5 }
  uselistorder i32 %v4_10010092, { 2, 5, 4, 1, 0, 3 }
  uselistorder i32* %eax.global-to-local, { 28, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30 }
  uselistorder i32 ()* @function_1000fce1, { 1, 0 }
  uselistorder i32 241, { 2, 1, 0, 3 }
  uselistorder i32 240, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32* (i32*, i32, i32, i32)* @VirtualAlloc, { 2, 4, 3, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_10018710 to i32), { 1, 3, 10, 12, 2, 4, 11, 13, 5, 6, 7, 0, 14, 15, 9, 8, 17, 16 }
  uselistorder i32* @global_var_10018710, { 1, 2, 3, 0 }
  uselistorder i8 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_100101dc, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_10010185, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10010179, { 1, 0 }
  uselistorder label %dec_label_pc_100100f1, { 1, 0 }
  uselistorder label %dec_label_pc_100100a4, { 1, 0 }
  uselistorder label %dec_label_pc_10010095, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10010081, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10010062, { 1, 0 }
  uselistorder label %dec_label_pc_1001004f, { 1, 0 }
  uselistorder label %dec_label_pc_10010035, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10010012, { 1, 0 }
}

define i32 @function_100101e1(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100101e1:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp78 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %tmp78, i32* %ecx.global-to-local, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_100101e8 = sdiv i32 %sext, 16777216
  store i32 %v4_100101e8, i32* %edx.global-to-local, align 4
  %v0_100101ec = load i32, i32* @esi, align 4
  store i32 %v0_100101ec, i32* %stack_var_-16, align 4
  %v1_100101ed = add i32 %tmp78, 4
  %v2_100101ed = inttoptr i32 %v1_100101ed to i32*
  %v3_100101ed = load i32, i32* %v2_100101ed, align 4
  store i32 %v3_100101ed, i32* %esi.global-to-local, align 4
  %v0_100101f0 = load i32, i32* @edi, align 4
  store i32 %v0_100101f0, i32* %stack_var_-20, align 4
  %v2_100101f1 = load i32, i32* %arg1, align 4
  store i32 %v2_100101f1, i32* %edi.global-to-local, align 4
  %v1_100101f3 = add i32 %tmp78, 248
  store i32 %v1_100101f3, i32* %ebx.global-to-local, align 4
  %v7_100101f9 = icmp ult i32 %v3_100101ed, %v4_100101e8
  store i32 %v2_100101f1, i32* %eax.global-to-local, align 4
  br i1 %v7_100101f9, label %dec_label_pc_10010226, label %dec_label_pc_10010205

dec_label_pc_10010205:                            ; preds = %dec_label_pc_100101e1
  %v2_10010205 = add i32 %v2_100101f1, %v4_100101e8
  store i32 %v2_10010205, i32* %eax.global-to-local, align 4
  %v1_10010208 = trunc i32 %v4_100101e8 to i8
  %v3_10010208 = inttoptr i32 %v2_100101f1 to i8*
  store i8 %v1_10010208, i8* %v3_10010208, align 1
  %v0_1001020a = load i32, i32* %eax.global-to-local, align 4
  %v1_1001020a = load i32, i32* %ebx.global-to-local, align 4
  %v7_1001020a = icmp ult i32 %v0_1001020a, %v1_1001020a
  %v1_1001020c = icmp eq i1 %v7_1001020a, false
  br i1 %v1_1001020c, label %dec_label_pc_10010215, label %dec_label_pc_1001020e

dec_label_pc_1001020e:                            ; preds = %dec_label_pc_10010205
  %v0_1001020e = load i32, i32* %ecx.global-to-local, align 4
  %v1_1001020e = inttoptr i32 %v0_1001020e to i32*
  %v2_1001020e = load i32, i32* %v1_1001020e, align 4
  %v3_1001020e = load i32, i32* %edx.global-to-local, align 4
  %v4_1001020e = add i32 %v3_1001020e, %v2_1001020e
  store i32 %v4_1001020e, i32* %v1_1001020e, align 4
  %v0_10010210 = load i32, i32* %ecx.global-to-local, align 4
  %v1_10010210 = add i32 %v0_10010210, 4
  %v2_10010210 = inttoptr i32 %v1_10010210 to i32*
  %v3_10010210 = load i32, i32* %v2_10010210, align 4
  %v4_10010210 = load i32, i32* %edx.global-to-local, align 4
  %v5_10010210 = sub i32 %v3_10010210, %v4_10010210
  store i32 %v5_10010210, i32* %v2_10010210, align 4
  br label %dec_label_pc_1001021e

dec_label_pc_10010215:                            ; preds = %dec_label_pc_10010205
  %v4_10010215 = load i32, i32* %ecx.global-to-local, align 4
  %v5_10010215 = add i32 %v4_10010215, 4
  %v6_10010215 = inttoptr i32 %v5_10010215 to i32*
  store i32 0, i32* %v6_10010215, align 4
  %v0_10010219 = load i32, i32* %ecx.global-to-local, align 4
  %v1_10010219 = add i32 %v0_10010219, 8
  store i32 %v1_10010219, i32* %eax.global-to-local, align 4
  %v2_1001021c = inttoptr i32 %v0_10010219 to i32*
  store i32 %v1_10010219, i32* %v2_1001021c, align 4
  br label %dec_label_pc_1001021e

dec_label_pc_1001021e:                            ; preds = %dec_label_pc_1001020e, %dec_label_pc_10010215
  %v0_1001021e = load i32, i32* %edi.global-to-local, align 4
  %v1_1001021e = add i32 %v0_1001021e, 8
  store i32 %v1_1001021e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100102f4

dec_label_pc_10010226:                            ; preds = %dec_label_pc_100101e1
  %v2_10010226 = add i32 %v2_100101f1, %v3_100101ed
  store i32 %v2_10010226, i32* %esi.global-to-local, align 4
  %v1_10010228 = inttoptr i32 %v2_10010226 to i8*
  %v2_10010228 = load i8, i8* %v1_10010228, align 1
  %v3_10010228 = icmp eq i8 %v2_10010228, 0
  br i1 %v3_10010228, label %dec_label_pc_1001022f, label %dec_label_pc_1001022d

dec_label_pc_1001022d:                            ; preds = %dec_label_pc_10010226
  store i32 %v2_10010226, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1001022f

dec_label_pc_1001022f:                            ; preds = %dec_label_pc_10010226, %dec_label_pc_1001022d
  %v0_1001022f = phi i32 [ %v2_100101f1, %dec_label_pc_10010226 ], [ %v2_10010226, %dec_label_pc_1001022d ]
  %v2_1001022f = add i32 %v0_1001022f, %v4_100101e8
  store i32 %v2_1001022f, i32* %esi.global-to-local, align 4
  %v7_10010232 = icmp ult i32 %v2_1001022f, %v1_100101f3
  %v1_10010234 = icmp eq i1 %v7_10010232, false
  br i1 %v1_10010234, label %dec_label_pc_10010279, label %dec_label_pc_10010236

dec_label_pc_10010236:                            ; preds = %dec_label_pc_1001022f, %dec_label_pc_10010271
  %v1_100102a5 = phi i32 [ %v1_10010271, %dec_label_pc_10010271 ], [ %v4_100101e8, %dec_label_pc_1001022f ]
  %v4_10010236 = phi i32 [ %v4_1001023647, %dec_label_pc_10010271 ], [ %v1_100101f3, %dec_label_pc_1001022f ]
  %v0_1001026f = phi i32 [ %storemerge2, %dec_label_pc_10010271 ], [ %v0_1001022f, %dec_label_pc_1001022f ]
  %stack_var_8.0 = phi i32 [ %stack_var_8.2, %dec_label_pc_10010271 ], [ %arg2, %dec_label_pc_1001022f ]
  %v1_10010236 = inttoptr i32 %v0_1001026f to i8*
  %v2_10010236 = load i8, i8* %v1_10010236, align 1
  %v3_10010236 = zext i8 %v2_10010236 to i32
  %v5_10010236 = and i32 %v4_10010236, -256
  %v6_10010236 = or i32 %v3_10010236, %v5_10010236
  store i32 %v6_10010236, i32* %ebx.global-to-local, align 4
  %v4_10010238 = icmp eq i8 %v2_10010236, 0
  %v1_1001023a = icmp eq i1 %v4_10010238, false
  br i1 %v1_1001023a, label %dec_label_pc_1001026c, label %dec_label_pc_1001023c

dec_label_pc_1001023c:                            ; preds = %dec_label_pc_10010236
  %v1_1001023e = add i32 %v0_1001026f, 1
  store i32 %v1_1001023e, i32* %ebx.global-to-local, align 4
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_1001024238 = inttoptr i32 %v1_1001023e to i8*
  %v2_1001024239 = load i8, i8* %v1_1001024238, align 1
  %v3_1001024240 = icmp eq i8 %v2_1001024239, 0
  %v1_1001024542 = icmp eq i1 %v3_1001024240, false
  br i1 %v1_1001024542, label %dec_label_pc_1001024b, label %dec_label_pc_10010247

dec_label_pc_10010247:                            ; preds = %dec_label_pc_1001023c, %dec_label_pc_10010247
  %v0_10010248 = phi i32 [ %v1_10010248, %dec_label_pc_10010247 ], [ 1, %dec_label_pc_1001023c ]
  %v0_10010247 = phi i32 [ %v1_10010247, %dec_label_pc_10010247 ], [ %v1_1001023e, %dec_label_pc_1001023c ]
  %v1_10010247 = add i32 %v0_10010247, 1
  store i32 %v1_10010247, i32* %ebx.global-to-local, align 4
  %v1_10010248 = add i32 %v0_10010248, 1
  store i32 %v1_10010248, i32* %esi.global-to-local, align 4
  %v1_10010242 = inttoptr i32 %v1_10010247 to i8*
  %v2_10010242 = load i8, i8* %v1_10010242, align 1
  %v3_10010242 = icmp eq i8 %v2_10010242, 0
  %v1_10010245 = icmp eq i1 %v3_10010242, false
  br i1 %v1_10010245, label %dec_label_pc_1001024b, label %dec_label_pc_10010247

dec_label_pc_1001024b:                            ; preds = %dec_label_pc_10010247, %dec_label_pc_1001023c
  %v0_1001026856 = phi i32 [ %v1_1001023e, %dec_label_pc_1001023c ], [ %v1_10010247, %dec_label_pc_10010247 ]
  %v0_100102a5 = phi i32 [ 1, %dec_label_pc_1001023c ], [ %v1_10010248, %dec_label_pc_10010247 ]
  %v2_1001024b = sub i32 %v0_100102a5, %v1_100102a5
  %v7_1001024b = icmp ult i32 %v0_100102a5, %v1_100102a5
  %v1_1001024d = icmp eq i1 %v7_1001024b, false
  br i1 %v1_1001024d, label %dec_label_pc_1001029d, label %dec_label_pc_1001024f

dec_label_pc_1001024f:                            ; preds = %dec_label_pc_1001024b
  %v15_1001024f = icmp eq i32 %v0_1001026f, %v2_100101f1
  %v1_10010252 = icmp eq i1 %v15_1001024f, false
  br i1 %v1_10010252, label %dec_label_pc_10010259, label %dec_label_pc_10010254

dec_label_pc_10010254:                            ; preds = %dec_label_pc_1001024f
  %v1_10010254 = load i32, i32* %ecx.global-to-local, align 4
  %v2_10010254 = add i32 %v1_10010254, 4
  %v3_10010254 = inttoptr i32 %v2_10010254 to i32*
  store i32 %v0_100102a5, i32* %v3_10010254, align 4
  %v0_10010268.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_10010271.pre.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10010265

dec_label_pc_10010259:                            ; preds = %dec_label_pc_1001024f
  %v5_10010259 = sub i32 %stack_var_8.0, %v0_100102a5
  %v10_1001025c = icmp ult i32 %v5_10010259, %v1_100102a5
  br i1 %v10_1001025c, label %dec_label_pc_100102fe, label %dec_label_pc_10010265

dec_label_pc_10010265:                            ; preds = %dec_label_pc_10010259, %dec_label_pc_10010254
  %v1_10010271.pre = phi i32 [ %v1_100102a5, %dec_label_pc_10010259 ], [ %v1_10010271.pre.pre, %dec_label_pc_10010254 ]
  %v0_10010268 = phi i32 [ %v0_1001026856, %dec_label_pc_10010259 ], [ %v0_10010268.pre, %dec_label_pc_10010254 ]
  %stack_var_8.1 = phi i32 [ %v5_10010259, %dec_label_pc_10010259 ], [ %stack_var_8.0, %dec_label_pc_10010254 ]
  store i32 %v2_100101f1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10010271

dec_label_pc_1001026c:                            ; preds = %dec_label_pc_10010236
  store i32 %v3_10010236, i32* %esi.global-to-local, align 4
  %v2_1001026f = add i32 %v3_10010236, %v0_1001026f
  br label %dec_label_pc_10010271

dec_label_pc_10010271:                            ; preds = %dec_label_pc_10010265, %dec_label_pc_1001026c
  %v1_10010271 = phi i32 [ %v1_100102a5, %dec_label_pc_1001026c ], [ %v1_10010271.pre, %dec_label_pc_10010265 ]
  %v4_1001023647 = phi i32 [ %v6_10010236, %dec_label_pc_1001026c ], [ %v0_10010268, %dec_label_pc_10010265 ]
  %storemerge2 = phi i32 [ %v2_1001026f, %dec_label_pc_1001026c ], [ %v0_10010268, %dec_label_pc_10010265 ]
  %stack_var_8.2 = phi i32 [ %stack_var_8.0, %dec_label_pc_1001026c ], [ %stack_var_8.1, %dec_label_pc_10010265 ]
  store i32 %storemerge2, i32* %eax.global-to-local, align 4
  %v2_10010271 = add i32 %storemerge2, %v1_10010271
  store i32 %v2_10010271, i32* %esi.global-to-local, align 4
  %v10_10010274 = icmp ult i32 %v2_10010271, %v1_100101f3
  br i1 %v10_10010274, label %dec_label_pc_10010236, label %dec_label_pc_10010279.loopexit

dec_label_pc_10010279.loopexit:                   ; preds = %dec_label_pc_10010271
  %v0_10010279.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_10010279

dec_label_pc_10010279:                            ; preds = %dec_label_pc_10010279.loopexit, %dec_label_pc_1001022f
  %v1_100102dd = phi i32 [ %v4_100101e8, %dec_label_pc_1001022f ], [ %v1_10010271, %dec_label_pc_10010279.loopexit ]
  %v4_100102e6 = phi i32 [ %tmp78, %dec_label_pc_1001022f ], [ %v0_10010279.pre, %dec_label_pc_10010279.loopexit ]
  %stack_var_8.3 = phi i32 [ %arg2, %dec_label_pc_1001022f ], [ %stack_var_8.2, %dec_label_pc_10010279.loopexit ]
  %v1_10010279 = add i32 %v4_100102e6, 8
  store i32 %v1_10010279, i32* %esi.global-to-local, align 4
  %v7_1001027c1128 = icmp ult i32 %v1_10010279, %v2_100101f1
  %v1_1001027e1835 = icmp eq i1 %v7_1001027c1128, false
  br i1 %v1_1001027e1835, label %dec_label_pc_100102fe, label %dec_label_pc_10010280.lr.ph

dec_label_pc_10010280.lr.ph:                      ; preds = %dec_label_pc_10010279, %dec_label_pc_100102ca
  %v0_1001028061 = phi i32 [ %v0_100102ca, %dec_label_pc_100102ca ], [ %v1_10010279, %dec_label_pc_10010279 ]
  %stack_var_8.4.ph36 = phi i32 [ %v5_100102c2, %dec_label_pc_100102ca ], [ %stack_var_8.3, %dec_label_pc_10010279 ]
  br label %dec_label_pc_10010280

dec_label_pc_10010280:                            ; preds = %dec_label_pc_10010280.lr.ph, %dec_label_pc_100102ce
  %v0_100102d1 = phi i32 [ %v0_1001028061, %dec_label_pc_10010280.lr.ph ], [ %v2_100102d1, %dec_label_pc_100102ce ]
  %v2_10010280 = add i32 %v0_100102d1, %v1_100102dd
  store i32 %v2_10010280, i32* %eax.global-to-local, align 4
  %v10_10010283 = icmp ult i32 %v2_10010280, %v1_100101f3
  %v1_10010286 = icmp eq i1 %v10_10010283, false
  br i1 %v1_10010286, label %dec_label_pc_100102fe, label %dec_label_pc_10010288

dec_label_pc_10010288:                            ; preds = %dec_label_pc_10010280
  %v1_10010288 = inttoptr i32 %v0_100102d1 to i8*
  %v2_10010288 = load i8, i8* %v1_10010288, align 1
  %v3_10010288 = zext i8 %v2_10010288 to i32
  %v5_10010288 = and i32 %v2_10010280, -256
  %v6_10010288 = or i32 %v3_10010288, %v5_10010288
  store i32 %v6_10010288, i32* %eax.global-to-local, align 4
  %v4_1001028a = icmp eq i8 %v2_10010288, 0
  %v1_1001028c = icmp eq i1 %v4_1001028a, false
  br i1 %v1_1001028c, label %dec_label_pc_100102ce, label %dec_label_pc_1001028e

dec_label_pc_1001028e:                            ; preds = %dec_label_pc_10010288
  %v1_10010290 = add i32 %v0_100102d1, 1
  store i32 %v1_10010290, i32* %ebx.global-to-local, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v1_1001029420 = inttoptr i32 %v1_10010290 to i8*
  %v2_1001029421 = load i8, i8* %v1_1001029420, align 1
  %v3_1001029422 = icmp eq i8 %v2_1001029421, 0
  %v1_1001029724 = icmp eq i1 %v3_1001029422, false
  br i1 %v1_1001029724, label %dec_label_pc_100102be, label %dec_label_pc_10010299

dec_label_pc_10010299:                            ; preds = %dec_label_pc_1001028e, %dec_label_pc_10010299
  %v0_1001029a = phi i32 [ %v1_1001029a, %dec_label_pc_10010299 ], [ 1, %dec_label_pc_1001028e ]
  %v0_10010299 = phi i32 [ %v1_10010299, %dec_label_pc_10010299 ], [ %v1_10010290, %dec_label_pc_1001028e ]
  %v1_10010299 = add i32 %v0_10010299, 1
  store i32 %v1_10010299, i32* %ebx.global-to-local, align 4
  %v1_1001029a = add i32 %v0_1001029a, 1
  store i32 %v1_1001029a, i32* %eax.global-to-local, align 4
  %v1_10010294 = inttoptr i32 %v1_10010299 to i8*
  %v2_10010294 = load i8, i8* %v1_10010294, align 1
  %v3_10010294 = icmp eq i8 %v2_10010294, 0
  %v1_10010297 = icmp eq i1 %v3_10010294, false
  br i1 %v1_10010297, label %dec_label_pc_100102be, label %dec_label_pc_10010299

dec_label_pc_1001029d:                            ; preds = %dec_label_pc_1001024b
  %v2_1001029d = add i32 %v0_1001026f, %v1_100102a5
  store i32 %v2_1001029d, i32* %ebx.global-to-local, align 4
  %v10_100102a0 = icmp ult i32 %v2_1001029d, %v1_100101f3
  %v1_100102a3 = icmp eq i1 %v10_100102a0, false
  br i1 %v1_100102a3, label %dec_label_pc_100102ae, label %dec_label_pc_100102a5

dec_label_pc_100102a5:                            ; preds = %dec_label_pc_1001029d
  store i32 %v2_1001024b, i32* %esi.global-to-local, align 4
  %v1_100102a7 = load i32, i32* %ecx.global-to-local, align 4
  %v2_100102a7 = inttoptr i32 %v1_100102a7 to i32*
  store i32 %v2_1001029d, i32* %v2_100102a7, align 4
  %v0_100102a9 = load i32, i32* %esi.global-to-local, align 4
  %v1_100102a9 = load i32, i32* %ecx.global-to-local, align 4
  %v2_100102a9 = add i32 %v1_100102a9, 4
  %v3_100102a9 = inttoptr i32 %v2_100102a9 to i32*
  store i32 %v0_100102a9, i32* %v3_100102a9, align 4
  br label %dec_label_pc_100102b7

dec_label_pc_100102ae:                            ; preds = %dec_label_pc_1001029d
  %v4_100102ae = load i32, i32* %ecx.global-to-local, align 4
  %v5_100102ae = add i32 %v4_100102ae, 4
  %v6_100102ae = inttoptr i32 %v5_100102ae to i32*
  store i32 0, i32* %v6_100102ae, align 4
  %v0_100102b2 = load i32, i32* %ecx.global-to-local, align 4
  %v1_100102b2 = add i32 %v0_100102b2, 8
  store i32 %v1_100102b2, i32* %esi.global-to-local, align 4
  %v2_100102b5 = inttoptr i32 %v0_100102b2 to i32*
  store i32 %v1_100102b2, i32* %v2_100102b5, align 4
  br label %dec_label_pc_100102b7

dec_label_pc_100102b7:                            ; preds = %dec_label_pc_100102a5, %dec_label_pc_100102ae
  %v0_100102b7 = load i32, i32* %edx.global-to-local, align 4
  %v1_100102b7 = trunc i32 %v0_100102b7 to i8
  %v2_100102b7 = load i32, i32* %eax.global-to-local, align 4
  %v3_100102b7 = inttoptr i32 %v2_100102b7 to i8*
  store i8 %v1_100102b7, i8* %v3_100102b7, align 1
  %v0_100102b9 = load i32, i32* %eax.global-to-local, align 4
  %v1_100102b9 = add i32 %v0_100102b9, 8
  store i32 %v1_100102b9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100102f4

dec_label_pc_100102be:                            ; preds = %dec_label_pc_10010299, %dec_label_pc_1001028e
  %v0_100102ca = phi i32 [ %v1_10010290, %dec_label_pc_1001028e ], [ %v1_10010299, %dec_label_pc_10010299 ]
  %v0_100102dd = phi i32 [ 1, %dec_label_pc_1001028e ], [ %v1_1001029a, %dec_label_pc_10010299 ]
  %v7_100102be = icmp ult i32 %v0_100102dd, %v1_100102dd
  %v1_100102c0 = icmp eq i1 %v7_100102be, false
  br i1 %v1_100102c0, label %dec_label_pc_100102ef, label %dec_label_pc_100102c2

dec_label_pc_100102c2:                            ; preds = %dec_label_pc_100102be
  %v5_100102c2 = sub i32 %stack_var_8.4.ph36, %v0_100102dd
  %v10_100102c5 = icmp ult i32 %v5_100102c2, %v1_100102dd
  br i1 %v10_100102c5, label %dec_label_pc_100102fe, label %dec_label_pc_100102ca

dec_label_pc_100102ca:                            ; preds = %dec_label_pc_100102c2
  store i32 %v0_100102ca, i32* %esi.global-to-local, align 4
  %v7_1001027c11 = icmp ult i32 %v0_100102ca, %v2_100101f1
  %v1_1001027e18 = icmp eq i1 %v7_1001027c11, false
  br i1 %v1_1001027e18, label %dec_label_pc_100102fe, label %dec_label_pc_10010280.lr.ph

dec_label_pc_100102ce:                            ; preds = %dec_label_pc_10010288
  store i32 %v3_10010288, i32* %eax.global-to-local, align 4
  %v2_100102d1 = add i32 %v3_10010288, %v0_100102d1
  store i32 %v2_100102d1, i32* %esi.global-to-local, align 4
  %v7_1001027c = icmp ult i32 %v2_100102d1, %v2_100101f1
  %v1_1001027e = icmp eq i1 %v7_1001027c, false
  br i1 %v1_1001027e, label %dec_label_pc_100102fe, label %dec_label_pc_10010280

dec_label_pc_100102ef:                            ; preds = %dec_label_pc_100102be
  %v2_100102be = sub i32 %v0_100102dd, %v1_100102dd
  store i32 %v2_10010280, i32* %ebx.global-to-local, align 4
  store i32 %v2_100102be, i32* %eax.global-to-local, align 4
  %v2_100102df = inttoptr i32 %v4_100102e6 to i32*
  store i32 %v2_10010280, i32* %v2_100102df, align 4
  %v0_100102e1 = load i32, i32* %eax.global-to-local, align 4
  %v1_100102e1 = load i32, i32* %ecx.global-to-local, align 4
  %v2_100102e1 = add i32 %v1_100102e1, 4
  %v3_100102e1 = inttoptr i32 %v2_100102e1 to i32*
  store i32 %v0_100102e1, i32* %v3_100102e1, align 4
  %v0_100102ef.pre = load i32, i32* %edx.global-to-local, align 4
  %v2_100102ef.pre = load i32, i32* %esi.global-to-local, align 4
  %phitmp = trunc i32 %v0_100102ef.pre to i8
  %phitmp75 = inttoptr i32 %v2_100102ef.pre to i8*
  store i8 %phitmp, i8* %phitmp75, align 1
  %v0_100102f1 = load i32, i32* %esi.global-to-local, align 4
  %v1_100102f1 = add i32 %v0_100102f1, 8
  store i32 %v1_100102f1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100102f4

dec_label_pc_100102f4:                            ; preds = %dec_label_pc_100102b7, %dec_label_pc_1001021e, %dec_label_pc_100102ef
  %v0_100102f7 = phi i32 [ %v1_100102b9, %dec_label_pc_100102b7 ], [ %v1_1001021e, %dec_label_pc_1001021e ], [ %v1_100102f1, %dec_label_pc_100102ef ]
  %v1_100102f4 = load i32, i32* %ecx.global-to-local, align 4
  %v3_100102f4 = mul i32 %v1_100102f4, 15
  store i32 %v3_100102f4, i32* %ecx.global-to-local, align 4
  %v2_100102f7 = mul i32 %v0_100102f7, 16
  store i32 %v2_100102f7, i32* %eax.global-to-local, align 4
  %v2_100102fa = sub i32 %v2_100102f7, %v3_100102f4
  br label %dec_label_pc_10010300

dec_label_pc_100102fe:                            ; preds = %dec_label_pc_10010259, %dec_label_pc_100102ca, %dec_label_pc_100102c2, %dec_label_pc_100102ce, %dec_label_pc_10010280, %dec_label_pc_10010279
  br label %dec_label_pc_10010300

dec_label_pc_10010300:                            ; preds = %dec_label_pc_100102f4, %dec_label_pc_100102fe
  %storemerge = phi i32 [ 0, %dec_label_pc_100102fe ], [ %v2_100102fa, %dec_label_pc_100102f4 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_10010300 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10010300, i32* @edi, align 4
  %v2_10010301 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10010301, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_100102f7, { 1, 0 }
  uselistorder i32 %v3_100102f4, { 1, 0 }
  uselistorder i32 %v2_100102d1, { 1, 2, 0 }
  uselistorder i32 %v5_100102c2, { 1, 0 }
  uselistorder i32 %v0_100102dd, { 1, 0, 2 }
  uselistorder i32 %v0_100102ca, { 2, 1, 0 }
  uselistorder i32 %v1_1001029a, { 0, 2, 1 }
  uselistorder i32 %v1_10010299, { 0, 2, 3, 1 }
  uselistorder i32 %v1_10010290, { 1, 0, 2, 3 }
  uselistorder i32 %v3_10010288, { 0, 2, 1 }
  uselistorder i32 %v2_10010280, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_100102d1, { 1, 0, 3, 2 }
  uselistorder i32 %v1_100102dd, { 2, 3, 1, 0 }
  uselistorder i32 %storemerge2, { 0, 2, 1 }
  uselistorder i32 %v0_100102a5, { 0, 1, 3, 2 }
  uselistorder i32 %v1_10010248, { 0, 2, 1 }
  uselistorder i32 %v1_10010247, { 0, 2, 3, 1 }
  uselistorder i32 %v1_1001023e, { 1, 0, 2, 3 }
  uselistorder i32 %v3_10010236, { 0, 2, 1 }
  uselistorder i32 %stack_var_8.0, { 2, 0, 1 }
  uselistorder i32 %v0_1001026f, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_100102a5, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v1_100101f3, { 4, 2, 3, 0, 1, 5 }
  uselistorder i32 %v2_100101f1, { 5, 4, 3, 6, 0, 7, 1, 8, 2, 9, 10 }
  uselistorder i32 %v4_100101e8, { 3, 6, 5, 2, 4, 1, 0 }
  uselistorder i32* %esi.global-to-local, { 5, 6, 0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %edx.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 3, 4, 5, 6, 7, 1, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9 }
  uselistorder i32* %eax.global-to-local, { 19, 1, 2, 3, 4, 5, 6, 16, 17, 7, 8, 9, 10, 0, 11, 12, 13, 14, 15, 18 }
  uselistorder i32 15, { 0, 2, 5, 1, 6, 3, 4 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_10010300, { 1, 0 }
  uselistorder label %dec_label_pc_100102fe, { 3, 1, 2, 4, 5, 0 }
  uselistorder label %dec_label_pc_100102f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_100102b7, { 1, 0 }
  uselistorder label %dec_label_pc_10010299, { 1, 0 }
  uselistorder label %dec_label_pc_10010280, { 1, 0 }
  uselistorder label %dec_label_pc_10010280.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_10010271, { 1, 0 }
  uselistorder label %dec_label_pc_10010247, { 1, 0 }
  uselistorder label %dec_label_pc_10010236, { 1, 0 }
  uselistorder label %dec_label_pc_1001022f, { 1, 0 }
  uselistorder label %dec_label_pc_1001021e, { 1, 0 }
}

define i32 @function_10010305(i32 %arg1) local_unnamed_addr {
dec_label_pc_10010305:
  %v0_1001030c = load i32, i32* bitcast (i32** @global_var_1001a77c.160 to i32*), align 4
  %v5_1001030c = inttoptr i32 %v0_1001030c to %_RTL_CRITICAL_SECTION*
  call void @InitializeCriticalSection(%_RTL_CRITICAL_SECTION* %v5_1001030c)
  %v0_10010314 = load i32, i32* bitcast (i32** @global_var_1001a76c.162 to i32*), align 4
  %v5_10010314 = inttoptr i32 %v0_10010314 to %_RTL_CRITICAL_SECTION*
  call void @InitializeCriticalSection(%_RTL_CRITICAL_SECTION* %v5_10010314)
  %v0_1001031c = load i32, i32* bitcast (i32** @global_var_1001a75c.164 to i32*), align 4
  %v5_1001031c = inttoptr i32 %v0_1001031c to %_RTL_CRITICAL_SECTION*
  call void @InitializeCriticalSection(%_RTL_CRITICAL_SECTION* %v5_1001031c)
  %v0_10010324 = load i32, i32* bitcast (i32** @global_var_1001a73c.166 to i32*), align 4
  %v5_10010324 = inttoptr i32 %v0_10010324 to %_RTL_CRITICAL_SECTION*
  call void @InitializeCriticalSection(%_RTL_CRITICAL_SECTION* %v5_10010324)
  ret i32 ptrtoint (i32* @0 to i32)
}

define i32 @function_1001032e() local_unnamed_addr {
dec_label_pc_1001032e:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1001032f = load i32, i32* @edi, align 4
  store i32 %v0_1001032f, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1001a738.167 to i32), i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1001033b

dec_label_pc_1001033b:                            ; preds = %dec_label_pc_1001036c, %dec_label_pc_1001032e
  %v0_10010359 = phi i32 [ %v1_1001036c, %dec_label_pc_1001036c ], [ ptrtoint (i32* @global_var_1001a738.167 to i32), %dec_label_pc_1001032e ]
  %v1_1001033b = inttoptr i32 %v0_10010359 to i32*
  %v2_1001033b = load i32, i32* %v1_1001033b, align 4
  %v1_1001033d = icmp eq i32 %v2_1001033b, 0
  br i1 %v1_1001033d, label %dec_label_pc_1001036c, label %dec_label_pc_10010341

dec_label_pc_10010341:                            ; preds = %dec_label_pc_1001033b
  %v9_10010341 = icmp eq i32 %v0_10010359, 268543868
  br i1 %v9_10010341, label %dec_label_pc_1001036c, label %dec_label_pc_10010349

dec_label_pc_10010349:                            ; preds = %dec_label_pc_10010341
  %v9_10010349 = icmp eq i32 %v0_10010359, 268543852
  br i1 %v9_10010349, label %dec_label_pc_1001036c, label %dec_label_pc_10010351

dec_label_pc_10010351:                            ; preds = %dec_label_pc_10010349
  %v9_10010351 = icmp eq i32 %v0_10010359, 268543836
  br i1 %v9_10010351, label %dec_label_pc_1001036c, label %dec_label_pc_10010359

dec_label_pc_10010359:                            ; preds = %dec_label_pc_10010351
  %v9_10010359 = icmp eq i32 %v0_10010359, 268543804
  br i1 %v9_10010359, label %dec_label_pc_1001036c, label %dec_label_pc_10010361

dec_label_pc_10010361:                            ; preds = %dec_label_pc_10010359
  %v5_10010361 = inttoptr i32 %v2_1001033b to %_RTL_CRITICAL_SECTION*
  call void @DeleteCriticalSection(%_RTL_CRITICAL_SECTION* %v5_10010361)
  %v0_10010364 = load i32, i32* %esi.global-to-local, align 4
  %v1_10010364 = inttoptr i32 %v0_10010364 to i32*
  %v2_10010364 = load i32, i32* %v1_10010364, align 4
  %v2_10010366 = call i32 @function_1000d97b(i32 %v2_10010364)
  store i32 %v2_10010364, i32* @ecx, align 4
  br label %dec_label_pc_1001036c

dec_label_pc_1001036c:                            ; preds = %dec_label_pc_10010359, %dec_label_pc_10010351, %dec_label_pc_10010349, %dec_label_pc_10010341, %dec_label_pc_1001033b, %dec_label_pc_10010361
  %v0_1001036c = phi i32 [ %v0_10010359, %dec_label_pc_10010359 ], [ %v0_10010359, %dec_label_pc_10010351 ], [ %v0_10010359, %dec_label_pc_10010349 ], [ %v0_10010359, %dec_label_pc_10010341 ], [ %v0_10010359, %dec_label_pc_1001033b ], [ %v0_10010364, %dec_label_pc_10010361 ]
  %v1_1001036c = add i32 %v0_1001036c, 4
  store i32 %v1_1001036c, i32* %esi.global-to-local, align 4
  %v5_10010375 = icmp slt i32 %v1_1001036c, 268543992
  br i1 %v5_10010375, label %dec_label_pc_1001033b, label %dec_label_pc_10010377

dec_label_pc_10010377:                            ; preds = %dec_label_pc_1001036c
  %v0_10010377 = load i32, i32* bitcast (i32** @global_var_1001a75c.164 to i32*), align 4
  %v5_10010377 = inttoptr i32 %v0_10010377 to %_RTL_CRITICAL_SECTION*
  call void @DeleteCriticalSection(%_RTL_CRITICAL_SECTION* %v5_10010377)
  %v0_1001037f = load i32, i32* bitcast (i32** @global_var_1001a76c.162 to i32*), align 4
  %v5_1001037f = inttoptr i32 %v0_1001037f to %_RTL_CRITICAL_SECTION*
  call void @DeleteCriticalSection(%_RTL_CRITICAL_SECTION* %v5_1001037f)
  %v0_10010387 = load i32, i32* bitcast (i32** @global_var_1001a77c.160 to i32*), align 4
  %v5_10010387 = inttoptr i32 %v0_10010387 to %_RTL_CRITICAL_SECTION*
  call void @DeleteCriticalSection(%_RTL_CRITICAL_SECTION* %v5_10010387)
  %v0_1001038f = load i32, i32* bitcast (i32** @global_var_1001a73c.166 to i32*), align 4
  %v5_1001038f = inttoptr i32 %v0_1001038f to %_RTL_CRITICAL_SECTION*
  call void @DeleteCriticalSection(%_RTL_CRITICAL_SECTION* %v5_1001038f)
  %v2_10010397 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10010397, i32* @edi, align 4
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder i32 %v1_1001036c, { 1, 2, 0 }
  uselistorder i32 %v0_10010359, { 4, 5, 6, 7, 8, 0, 1, 2, 3, 9 }
  uselistorder label %dec_label_pc_1001036c, { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_1001039a(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001039a:
  %stack_var_-12 = alloca %_RTL_CRITICAL_SECTION*, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_100103a0 = load i32, i32* @esi, align 4
  store i32 %v0_100103a0, i32* %stack_var_-8, align 4
  %v1_100103a1 = mul i32 %arg1, 4
  %v2_100103a1 = add i32 %v1_100103a1, ptrtoint (i32* @global_var_1001a738.167 to i32)
  %v3_100103a1 = inttoptr i32 %v2_100103a1 to i32*
  %v4_100103a1 = load i32, i32* %v3_100103a1, align 4
  %v5_100103a1 = icmp eq i32 %v4_100103a1, 0
  store i32 %v2_100103a1, i32* @esi, align 4
  %v1_100103b0 = icmp eq i1 %v5_100103a1, false
  br i1 %v1_100103b0, label %dec_label_pc_1001039a.dec_label_pc_100103f0_crit_edge, label %dec_label_pc_100103b2

dec_label_pc_1001039a.dec_label_pc_100103f0_crit_edge: ; preds = %dec_label_pc_1001039a
  br label %dec_label_pc_100103f0

dec_label_pc_100103b2:                            ; preds = %dec_label_pc_1001039a
  %v0_100103b2 = load i32, i32* @edi, align 4
  %v5_100103b2 = inttoptr i32 %v0_100103b2 to %_RTL_CRITICAL_SECTION*
  store %_RTL_CRITICAL_SECTION* %v5_100103b2, %_RTL_CRITICAL_SECTION** %stack_var_-12, align 4
  %v2_100103b5 = call i32 @function_1000da64(i32 24)
  store i32 %v2_100103b5, i32* @edi, align 4
  %v2_100103bd = icmp eq i32 %v2_100103b5, 0
  %v1_100103bf = icmp eq i1 %v2_100103bd, false
  br i1 %v1_100103bf, label %dec_label_pc_100103c9, label %dec_label_pc_100103c1

dec_label_pc_100103c1:                            ; preds = %dec_label_pc_100103b2
  %v2_100103c3 = call i32 @__amsg_exit(i32 17)
  br label %dec_label_pc_100103c9

dec_label_pc_100103c9:                            ; preds = %dec_label_pc_100103b2, %dec_label_pc_100103c1
  %v2_100103cb = call i32 @function_1001039a(i32 17)
  %v0_100103d0 = load i32, i32* @esi, align 4
  %v1_100103d0 = inttoptr i32 %v0_100103d0 to i32*
  %v2_100103d0 = load i32, i32* %v1_100103d0, align 4
  %v3_100103d0 = icmp eq i32 %v2_100103d0, 0
  %v1_100103d5 = icmp eq i1 %v3_100103d0, false
  br i1 %v1_100103d5, label %dec_label_pc_100103e1, label %dec_label_pc_100103d7

dec_label_pc_100103d7:                            ; preds = %dec_label_pc_100103c9
  %v0_100103e1.cast = inttoptr i32 %v2_100103b5 to %_RTL_CRITICAL_SECTION*
  call void @InitializeCriticalSection(%_RTL_CRITICAL_SECTION* %v0_100103e1.cast)
  %v2_100103dd = load i32, i32* @esi, align 4
  %v3_100103dd = inttoptr i32 %v2_100103dd to i32*
  store i32 %v2_100103b5, i32* %v3_100103dd, align 4
  br label %dec_label_pc_100103e7

dec_label_pc_100103e1:                            ; preds = %dec_label_pc_100103c9
  %v2_100103e1 = call i32 @function_1000d97b(i32 %v2_100103b5)
  br label %dec_label_pc_100103e7

dec_label_pc_100103e7:                            ; preds = %dec_label_pc_100103d7, %dec_label_pc_100103e1
  %v2_100103e9 = call i32 @function_100103fb(i32 17)
  %v2_100103ef = load %_RTL_CRITICAL_SECTION*, %_RTL_CRITICAL_SECTION** %stack_var_-12, align 4
  %v3_100103ef = ptrtoint %_RTL_CRITICAL_SECTION* %v2_100103ef to i32
  store i32 %v3_100103ef, i32* @edi, align 4
  %v0_100103f0.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_100103f0

dec_label_pc_100103f0:                            ; preds = %dec_label_pc_1001039a.dec_label_pc_100103f0_crit_edge, %dec_label_pc_100103e7
  %v0_100103f0 = phi i32 [ %v2_100103a1, %dec_label_pc_1001039a.dec_label_pc_100103f0_crit_edge ], [ %v0_100103f0.pre, %dec_label_pc_100103e7 ]
  %v1_100103f0 = inttoptr i32 %v0_100103f0 to i32*
  %v2_100103f0 = load i32, i32* %v1_100103f0, align 4
  %v7_100103f0 = inttoptr i32 %v2_100103f0 to %_RTL_CRITICAL_SECTION*
  store %_RTL_CRITICAL_SECTION* %v7_100103f0, %_RTL_CRITICAL_SECTION** %stack_var_-12, align 4
  call void @EnterCriticalSection(%_RTL_CRITICAL_SECTION* %v7_100103f0)
  %v2_100103f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_100103f8, i32* @esi, align 4
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder i32 %v2_100103b5, { 2, 0, 1, 3, 4 }
  uselistorder %_RTL_CRITICAL_SECTION** %stack_var_-12, { 2, 1, 0 }
  uselistorder void (%_RTL_CRITICAL_SECTION*)* @InitializeCriticalSection, { 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_100103f0, { 1, 0 }
  uselistorder label %dec_label_pc_100103e7, { 1, 0 }
  uselistorder label %dec_label_pc_100103c9, { 1, 0 }
}

define i32 @function_100103fb(i32 %arg1) local_unnamed_addr {
dec_label_pc_100103fb:
  %v1_10010401 = mul i32 %arg1, 4
  %v2_10010401 = add i32 %v1_10010401, ptrtoint (i32* @global_var_1001a738.167 to i32)
  %v3_10010401 = inttoptr i32 %v2_10010401 to i32*
  %v4_10010401 = load i32, i32* %v3_10010401, align 4
  %v9_10010401 = inttoptr i32 %v4_10010401 to %_RTL_CRITICAL_SECTION*
  call void @LeaveCriticalSection(%_RTL_CRITICAL_SECTION* %v9_10010401)
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder i32 ptrtoint (i32* @global_var_1001a738.167 to i32), { 1, 2, 0, 3 }
}

declare i32 @__global_unwind2(i32) local_unnamed_addr

declare i32 @__local_unwind2(i32, i32) local_unnamed_addr

define i32 @function_100104dd() local_unnamed_addr {
entry:
  %v0_100104dd = load i32, i32* @ebx, align 4
  %v0_100104de = load i32, i32* @ecx, align 4
  store i32 ptrtoint (i32* @global_var_1001a7f8.168 to i32), i32* @ebx, align 4
  %v2_100104e4 = call i32 @function_100104f0(i32 %v0_100104de, i32 %v0_100104dd)
  ret i32 %v2_100104e4
}

define i32 @function_100104e6(i32 %arg1) local_unnamed_addr {
dec_label_pc_100104e6:
  store i32 ptrtoint (i32* @global_var_1001a7f8.168 to i32), i32* @ebx, align 4
  %v0_100104ed = load i32, i32* @ebp, align 4
  %v1_100104ed = add i32 %v0_100104ed, 8
  %v2_100104ed = inttoptr i32 %v1_100104ed to i32*
  %v3_100104ed = load i32, i32* %v2_100104ed, align 4
  store i32 %v3_100104ed, i32* @ecx, align 4
  %v4_100104ed = load i32, i32* @eax, align 4
  ret i32 %v4_100104ed
}

define i32 @function_100104f0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100104f0:
  %v0_100104f0 = load i32, i32* @ecx, align 4
  %v1_100104f0 = load i32, i32* @ebx, align 4
  %v2_100104f0 = add i32 %v1_100104f0, 8
  %v3_100104f0 = inttoptr i32 %v2_100104f0 to i32*
  store i32 %v0_100104f0, i32* %v3_100104f0, align 4
  %v0_100104f3 = load i32, i32* @eax, align 4
  %v1_100104f3 = load i32, i32* @ebx, align 4
  %v2_100104f3 = add i32 %v1_100104f3, 4
  %v3_100104f3 = inttoptr i32 %v2_100104f3 to i32*
  store i32 %v0_100104f3, i32* %v3_100104f3, align 4
  %v0_100104f6 = load i32, i32* @ebp, align 4
  %v1_100104f6 = load i32, i32* @ebx, align 4
  %v2_100104f6 = add i32 %v1_100104f6, 12
  %v3_100104f6 = inttoptr i32 %v2_100104f6 to i32*
  store i32 %v0_100104f6, i32* %v3_100104f6, align 4
  %v0_100104fb = load i32, i32* @eax, align 4
  ret i32 %v0_100104fb
}

define i32 @function_10010508(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10010508:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp21 = ptrtoint i32* %arg2 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10010508 = load i32, i32* @ebp, align 4
  store i32 %v0_10010508, i32* %stack_var_-4, align 4
  %v4_10010508 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10010508, i32* @ebp, align 4
  %v15_1001050b = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v4_10010508, i32* %stack_var_-28, align 4
  store i32 %tmp21, i32* %ebx.global-to-local, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10010519 = add i32 %arg1, 4
  %v2_10010519 = inttoptr i32 %v1_10010519 to i32*
  %v3_10010519 = load i32, i32* %v2_10010519, align 4
  %v4_10010519 = and i32 %v3_10010519, 6
  %v5_10010519 = icmp eq i32 %v4_10010519, 0
  %v1_10010520 = icmp eq i1 %v5_10010519, false
  br i1 %v1_10010520, label %dec_label_pc_100105a8, label %dec_label_pc_10010526

dec_label_pc_10010526:                            ; preds = %dec_label_pc_10010508
  store i32 %arg1, i32* %stack_var_-12, align 4
  store i32 %v15_1001050b, i32* %eax.global-to-local, align 4
  %v2_10010532 = add i32 %tmp21, -4
  %v3_10010532 = inttoptr i32 %v2_10010532 to i32*
  store i32 %v15_1001050b, i32* %v3_10010532, align 4
  %v0_10010535 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10010535 = add i32 %v0_10010535, 12
  %v2_10010535 = inttoptr i32 %v1_10010535 to i32*
  %v3_10010535 = load i32, i32* %v2_10010535, align 4
  store i32 %v3_10010535, i32* %esi.global-to-local, align 4
  %v1_10010538 = add i32 %v0_10010535, 8
  %v2_10010538 = inttoptr i32 %v1_10010538 to i32*
  %v3_10010538 = load i32, i32* %v2_10010538, align 4
  store i32 %v3_10010538, i32* %edi.global-to-local, align 4
  %v10_1001053b8 = icmp eq i32 %v3_10010535, -1
  br i1 %v10_1001053b8, label %dec_label_pc_100105a1, label %dec_label_pc_10010540.lr.ph

dec_label_pc_10010540.lr.ph:                      ; preds = %dec_label_pc_10010526
  br label %dec_label_pc_10010540

dec_label_pc_10010540:                            ; preds = %dec_label_pc_10010540.lr.ph, %dec_label_pc_1001058f
  %v0_1001054c = phi i32 [ %v0_10010535, %dec_label_pc_10010540.lr.ph ], [ %v0_1001058f, %dec_label_pc_1001058f ]
  %v4_1001054f = phi i32 [ %v3_10010538, %dec_label_pc_10010540.lr.ph ], [ %v3_1001058f, %dec_label_pc_1001058f ]
  %v0_1001054a = phi i32 [ %v3_10010535, %dec_label_pc_10010540.lr.ph ], [ %v5_10010595, %dec_label_pc_1001058f ]
  %v2_10010543 = mul i32 %v0_1001054a, 12
  %v3_10010543 = add i32 %v4_1001054f, 4
  %v4_10010543 = add i32 %v3_10010543, %v2_10010543
  %v5_10010543 = inttoptr i32 %v4_10010543 to i32*
  %v6_10010543 = load i32, i32* %v5_10010543, align 4
  %v7_10010543 = icmp eq i32 %v6_10010543, 0
  br i1 %v7_10010543, label %dec_label_pc_1001058f, label %dec_label_pc_1001054a

dec_label_pc_1001054a:                            ; preds = %dec_label_pc_10010540
  store i32 %v0_1001054a, i32* %stack_var_-32, align 4
  %v0_1001054b = load i32, i32* @ebp, align 4
  store i32 %v0_1001054b, i32* %stack_var_-36, align 4
  %v10_1001054f = load i32, i32* %v5_10010543, align 4
  call void @__pseudo_call(i32 %v10_1001054f)
  store i32 268502355, i32* @ebp, align 4
  store i32 %v0_1001054b, i32* %esi.global-to-local, align 4
  %v3_10010555 = load i32, i32* inttoptr (i32 268502367 to i32*), align 4
  store i32 %v3_10010555, i32* %ebx.global-to-local, align 4
  %v0_10010558 = load i32, i32* %eax.global-to-local, align 4
  %v1_10010558 = icmp eq i32 %v0_10010558, 0
  br i1 %v1_10010558, label %dec_label_pc_1001058f, label %dec_label_pc_1001055c

dec_label_pc_1001055c:                            ; preds = %dec_label_pc_1001054a
  %v2_10010558 = icmp slt i32 %v0_10010558, 0
  br i1 %v2_10010558, label %dec_label_pc_1001059a, label %dec_label_pc_1001055e

dec_label_pc_1001055e:                            ; preds = %dec_label_pc_1001055c
  %v1_1001055e = add i32 %v3_10010555, 8
  %v2_1001055e = inttoptr i32 %v1_1001055e to i32*
  %v3_1001055e = load i32, i32* %v2_1001055e, align 4
  store i32 %v3_1001055e, i32* %edi.global-to-local, align 4
  store i32 %v3_10010555, i32* %stack_var_-36, align 4
  %v1_10010562 = call i32 @__global_unwind2(i32 %v3_10010555)
  store i32 %v1_10010562, i32* %eax.global-to-local, align 4
  %v0_1001056a = load i32, i32* %ebx.global-to-local, align 4
  %v1_1001056a = add i32 %v0_1001056a, 16
  store i32 %v1_1001056a, i32* @ebp, align 4
  %v0_1001056d = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1001056d, i32* %stack_var_-36, align 4
  %v2_1001056f = call i32 @__local_unwind2(i32 %v0_1001056a, i32 %v0_1001056d)
  store i32 %v2_1001056f, i32* %eax.global-to-local, align 4
  store i32 1, i32* %stack_var_-36, align 4
  %v0_1001057c = load i32, i32* %edi.global-to-local, align 4
  %v2_1001057c = mul i32 %v0_1001056d, 12
  %v3_1001057c = add i32 %v2_1001057c, 8
  %v4_1001057c = add i32 %v3_1001057c, %v0_1001057c
  %v5_1001057c = inttoptr i32 %v4_1001057c to i32*
  %v6_1001057c = load i32, i32* %v5_1001057c, align 4
  store i32 %v6_1001057c, i32* @eax, align 4
  %v1_10010580 = call i32 @function_100104e6(i32 1)
  store i32 %v1_10010580, i32* %eax.global-to-local, align 4
  %v0_10010585 = load i32, i32* %edi.global-to-local, align 4
  %v1_10010585 = load i32, i32* @ecx, align 4
  %v2_10010585 = mul i32 %v1_10010585, 4
  %v3_10010585 = add i32 %v2_10010585, %v0_10010585
  %v4_10010585 = inttoptr i32 %v3_10010585 to i32*
  %v5_10010585 = load i32, i32* %v4_10010585, align 4
  store i32 %v5_10010585, i32* %eax.global-to-local, align 4
  %v1_10010588 = load i32, i32* @ebx, align 4
  %v2_10010588 = add i32 %v1_10010588, 12
  %v3_10010588 = inttoptr i32 %v2_10010588 to i32*
  store i32 %v5_10010585, i32* %v3_10010588, align 4
  %v4_1001058b = load i32, i32* %edi.global-to-local, align 4
  %v5_1001058b = load i32, i32* @ecx, align 4
  %v6_1001058b = mul i32 %v5_1001058b, 4
  %v7_1001058b = add i32 %v4_1001058b, 8
  %v8_1001058b = add i32 %v7_1001058b, %v6_1001058b
  %v9_1001058b = inttoptr i32 %v8_1001058b to i32*
  %v10_1001058b = load i32, i32* %v9_1001058b, align 4
  call void @__pseudo_call(i32 %v10_1001058b)
  %v0_1001058f.pre = load i32, i32* @ebx, align 4
  %v0_10010592.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1001058f

dec_label_pc_1001058f:                            ; preds = %dec_label_pc_1001054a, %dec_label_pc_10010540, %dec_label_pc_1001055e
  %v0_10010592 = phi i32 [ %v0_1001054b, %dec_label_pc_1001054a ], [ %v0_1001054a, %dec_label_pc_10010540 ], [ %v0_10010592.pre, %dec_label_pc_1001055e ]
  %v0_1001058f = phi i32 [ %v3_10010555, %dec_label_pc_1001054a ], [ %v0_1001054c, %dec_label_pc_10010540 ], [ %v0_1001058f.pre, %dec_label_pc_1001055e ]
  %v1_1001058f = add i32 %v0_1001058f, 8
  %v2_1001058f = inttoptr i32 %v1_1001058f to i32*
  %v3_1001058f = load i32, i32* %v2_1001058f, align 4
  store i32 %v3_1001058f, i32* %edi.global-to-local, align 4
  %v2_10010595 = mul i32 %v0_10010592, 12
  %v3_10010595 = add i32 %v3_1001058f, %v2_10010595
  %v4_10010595 = inttoptr i32 %v3_10010595 to i32*
  %v5_10010595 = load i32, i32* %v4_10010595, align 4
  store i32 %v5_10010595, i32* %esi.global-to-local, align 4
  %v10_1001053b = icmp eq i32 %v5_10010595, -1
  br i1 %v10_1001053b, label %dec_label_pc_100105a1, label %dec_label_pc_10010540

dec_label_pc_1001059a:                            ; preds = %dec_label_pc_1001055c
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100105bd

dec_label_pc_100105a1:                            ; preds = %dec_label_pc_1001058f, %dec_label_pc_10010526
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100105bd

dec_label_pc_100105a8:                            ; preds = %dec_label_pc_10010508
  store i32 %v4_10010508, i32* %stack_var_-32, align 4
  store i32 -1, i32* %stack_var_-36, align 4
  %v2_100105af = call i32 @__local_unwind2(i32 %tmp21, i32 -1)
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100105bd

dec_label_pc_100105bd:                            ; preds = %dec_label_pc_100105a1, %dec_label_pc_1001059a, %dec_label_pc_100105a8
  %v0_100105c4 = phi i32 [ 1, %dec_label_pc_100105a1 ], [ 0, %dec_label_pc_1001059a ], [ 1, %dec_label_pc_100105a8 ]
  %v2_100105be = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_100105be, i32* %edi.global-to-local, align 4
  %v2_100105bf = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_100105bf, i32* %esi.global-to-local, align 4
  %v2_100105c0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_100105c0, i32* %ebx.global-to-local, align 4
  ret i32 %v0_100105c4

; uselistorder directives
  uselistorder i32 %v5_10010595, { 0, 2, 1 }
  uselistorder i32 %v3_1001058f, { 0, 2, 1 }
  uselistorder i32 %v0_10010558, { 1, 0 }
  uselistorder i32 %v3_10010555, { 0, 3, 2, 1, 4 }
  uselistorder i32 %v0_1001054b, { 1, 0, 2 }
  uselistorder i32 %v3_10010535, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 9, 4, 5, 6, 7, 8 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_100105bd, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1001058f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10010540, { 1, 0 }
}

define i32 @function_100105c5(i32* %arg1) local_unnamed_addr {
dec_label_pc_100105c5:
  %tmp1 = ptrtoint i32* %arg1 to i32
  %v1_100105cc = add i32 %tmp1, 28
  %v2_100105cc = inttoptr i32 %v1_100105cc to i32*
  %v3_100105cc = load i32, i32* %v2_100105cc, align 4
  %v1_100105d0 = add i32 %tmp1, 24
  %v2_100105d0 = inttoptr i32 %v1_100105d0 to i32*
  %v3_100105d0 = load i32, i32* %v2_100105d0, align 4
  %v2_100105d4 = call i32 @__local_unwind2(i32 %v3_100105d0, i32 %v3_100105cc)
  ret i32 %v2_100105d4

; uselistorder directives
  uselistorder i32 (i32, i32)* @__local_unwind2, { 2, 1, 0 }
  uselistorder i32 28, { 0, 2, 3, 1, 5, 4 }
}

define i32 @function_100105e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100105e0:
  %v0_100105e0 = load i32, i32* @global_var_1001b49c.169, align 4
  %v1_100105e5 = icmp eq i32 %v0_100105e0, 0
  br i1 %v1_100105e5, label %dec_label_pc_100105f8, label %dec_label_pc_100105e9

dec_label_pc_100105e9:                            ; preds = %dec_label_pc_100105e0
  %v1_100105ed = call i32 @unknown_0(i32 %arg1)
  %v1_100105ef = icmp eq i32 %v1_100105ed, 0
  br i1 %v1_100105ef, label %dec_label_pc_100105f8, label %dec_label_pc_100105f4

dec_label_pc_100105f4:                            ; preds = %dec_label_pc_100105e9
  ret i32 1

dec_label_pc_100105f8:                            ; preds = %dec_label_pc_100105e9, %dec_label_pc_100105e0
  ret i32 0
}

define i32 @function_10010807() local_unnamed_addr {
entry:
  %v0_1001080f = load i32, i32* @eax, align 4
  ret i32 %v0_1001080f
}

define i32 @function_100109da() local_unnamed_addr {
entry:
  %v0_100109df = load i32, i32* @eax, align 4
  ret i32 %v0_100109df
}

define i32 @function_100109e0() local_unnamed_addr {
dec_label_pc_100109e0:
  %stack_var_-4 = alloca i32, align 4
  %v0_100109e0 = load i32, i32* @ebp, align 4
  store i32 %v0_100109e0, i32* %stack_var_-4, align 4
  %v4_100109e0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100109e0, i32* @ebp, align 4
  %v0_100109e6 = load i32, i32* @eax, align 4
  %v1_100109f5 = call i32 @unknown_10010a00(i32 %v0_100109e6)
  ret i32 %v1_100109f5

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

declare i32 @__startOneArgErrorHandling() local_unnamed_addr

define i32 @function_10010a33() local_unnamed_addr {
entry:
  %v0_10010a3f = load i32, i32* @eax, align 4
  ret i32 %v0_10010a3f
}

define i32 @function_10010a40() local_unnamed_addr {
dec_label_pc_10010a40:
  %v0_10010a40 = load x86_fp80, x86_fp80* @st0, align 4
  %v2_10010a42 = call x86_fp80 @llvm.round.f80(x86_fp80 %v0_10010a40)
  %v4_10010a44 = fsub x86_fp80 %v2_10010a42, %v2_10010a42
  %v4_10010a4e = fsub x86_fp80 0xK3FFF8000000000000000, %v4_10010a44
  store x86_fp80 %v4_10010a4e, x86_fp80* @st0, align 4
  store x86_fp80 %v4_10010a4e, x86_fp80* @st1, align 4
  %v0_10010a54 = load i32, i32* @eax, align 4
  ret i32 %v0_10010a54

; uselistorder directives
  uselistorder x86_fp80* @st1, { 5, 0, 6, 1, 2, 3, 4 }
}

define i32 @function_10010a55(i32 %arg1) local_unnamed_addr {
dec_label_pc_10010a55:
  %v0_10010a6b = load i32, i32* @eax, align 4
  ret i32 %v0_10010a6b
}

define i32 @function_10010a6c() local_unnamed_addr {
dec_label_pc_10010a6c:
  %v0_10010a6c = load i32, i32* @eax, align 4
  %v1_10010a6c = and i32 %v0_10010a6c, 524288
  %v2_10010a6c = icmp eq i32 %v1_10010a6c, 0
  br i1 %v2_10010a6c, label %dec_label_pc_10010a79, label %dec_label_pc_10010a73

dec_label_pc_10010a73:                            ; preds = %dec_label_pc_10010a6c
  ret i32 7

dec_label_pc_10010a79:                            ; preds = %dec_label_pc_10010a6c
  %v3_10010a79 = load x86_fp80, x86_fp80* @st0, align 4
  %v4_10010a79 = fadd x86_fp80 %v3_10010a79, 0xK3FFF8000000000000000
  store x86_fp80 %v4_10010a79, x86_fp80* @st0, align 4
  ret i32 1
}

declare i32 @__fload_withFB() local_unnamed_addr

define i32 @function_10010ac8(i32 %arg1) local_unnamed_addr {
entry:
  %v1_10010acc = and i32 %arg1, 2146435072
  %v6_10010ad1 = icmp eq i32 %v1_10010acc, 2146435072
  br i1 %v6_10010ad1, label %dec_label_pc_10010ad9, label %dec_label_pc_10010ad8

dec_label_pc_10010ad8:                            ; preds = %entry
  ret i32 %v1_10010acc

dec_label_pc_10010ad9:                            ; preds = %entry
  ret i32 %arg1
}

define i32 @function_10010ade() local_unnamed_addr {
dec_label_pc_10010ade:
  %v0_10010aea = load i32, i32* @eax, align 4
  ret i32 %v0_10010aea
}

declare i32 @__math_exit() local_unnamed_addr

define i32 @function_10010b15() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_1()
  %v1_10010b18 = load x86_fp80, x86_fp80* @st0, align 4
  %v5_10010b18 = fptrunc x86_fp80 %v1_10010b18 to float
  %v6_10010b18 = bitcast float %v5_10010b18 to i32
  %v1_10010b22 = and i32 %tmp, 2146435072
  store i1 false, i1* @cf, align 1
  store i1 false, i1* @of, align 1
  %v2_10010b22 = icmp eq i32 %v1_10010b22, 0
  store i1 %v2_10010b22, i1* @zf, align 1
  store i1 false, i1* @sf, align 1
  store i32 %v1_10010b22, i32* @eax, align 4
  %v2_10010b27 = call i32 bitcast (i32 (i32)** @global_var_10010b3d.3 to i32 (i32)*)(i32 %v6_10010b18)
  ret i32 %v2_10010b27
}

declare i32 @__check_range_exit() local_unnamed_addr

define i32 @function_10010bcc(double %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp72 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10010bcc = load i32, i32* @ebp, align 4
  store i32 %v0_10010bcc, i32* %stack_var_-4, align 4
  %v4_10010bcc = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10010bcc, i32* @ebp, align 4
  %v5_10010bd1 = load i3, i3* @fpu_stat_TOP, align 1
  %v6_10010bd1 = add i3 %v5_10010bd1, -1
  %v0_10010bdd = load i32, i32* @esi, align 4
  store i32 %v0_10010bdd, i32* %stack_var_-16, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %v0_10010be4 = load i32, i32* @eax, align 4
  %v1_10010be4 = udiv i32 %v0_10010be4, 256
  %v3_10010be4 = and i32 %v1_10010be4, 1
  %v4_10010be4 = icmp ne i32 %v3_10010be4, 0
  %v1_10010be5 = icmp eq i1 %v4_10010be4, false
  br i1 %v1_10010be5, label %dec_label_pc_10010be9, label %dec_label_pc_10010be7

dec_label_pc_10010be7:                            ; preds = %entry
  br label %dec_label_pc_10010be9

dec_label_pc_10010be9:                            ; preds = %entry, %dec_label_pc_10010be7
  store i3 %v5_10010bd1, i3* @fpu_stat_TOP, align 1
  store i32 -1048576, i32* @ecx, align 4
  %v15_10010bf6 = icmp eq i32 %tmp72, 2146435072
  %v1_10010bf9 = icmp eq i1 %v15_10010bf6, false
  br i1 %v1_10010bf9, label %dec_label_pc_10010c2f, label %dec_label_pc_10010bfb

dec_label_pc_10010bfb:                            ; preds = %dec_label_pc_10010be9
  %v17_10010bfb = icmp eq i32 %arg3, 0
  %v1_10010bfe = icmp eq i1 %v17_10010bfb, false
  br i1 %v1_10010bfe, label %dec_label_pc_10010c57, label %dec_label_pc_10010c73

dec_label_pc_10010c2f:                            ; preds = %dec_label_pc_10010be9
  %v15_10010c2f = icmp eq i32 %tmp72, -1048576
  %v1_10010c32 = icmp eq i1 %v15_10010c2f, false
  br i1 %v1_10010c32, label %dec_label_pc_10010c57, label %dec_label_pc_10010c34

dec_label_pc_10010c34:                            ; preds = %dec_label_pc_10010c2f
  %v17_10010c34 = icmp eq i32 %arg3, 0
  %v1_10010c37 = icmp eq i1 %v17_10010c34, false
  br i1 %v1_10010c37, label %dec_label_pc_10010c57, label %dec_label_pc_10010c89

dec_label_pc_10010c57:                            ; preds = %dec_label_pc_10010c34, %dec_label_pc_10010c2f, %dec_label_pc_10010bfb
  %v15_10010c57 = icmp eq i32 %arg2, 2146435072
  %v1_10010c5a = icmp eq i1 %v15_10010c57, false
  br i1 %v1_10010c5a, label %dec_label_pc_10010c8d, label %dec_label_pc_10010c5c

dec_label_pc_10010c5c:                            ; preds = %dec_label_pc_10010c57
  %v4_10010c5c = fptrunc double %arg1 to float
  %v5_10010c5c = bitcast float %v4_10010c5c to i32
  %v17_10010c5c = icmp eq i32 %v5_10010c5c, 0
  %v1_10010c5f = icmp eq i1 %v17_10010c5c, false
  br i1 %v1_10010c5f, label %dec_label_pc_10010cf7, label %dec_label_pc_10010c73

dec_label_pc_10010c73:                            ; preds = %dec_label_pc_10010c5c, %dec_label_pc_10010bfb
  %v0_10010c73 = load double, double* @global_var_100186c8.141, align 8
  %v1_10010c73 = fpext double %v0_10010c73 to x86_fp80
  br label %dec_label_pc_10010cf2

dec_label_pc_10010c89:                            ; preds = %dec_label_pc_10010c34
  br label %dec_label_pc_10010cf2

dec_label_pc_10010c8d:                            ; preds = %dec_label_pc_10010c57
  %v15_10010c8d = icmp eq i32 %arg2, -1048576
  %v1_10010c90 = icmp eq i1 %v15_10010c8d, false
  br i1 %v1_10010c90, label %dec_label_pc_10010cf7, label %dec_label_pc_10010c92

dec_label_pc_10010c92:                            ; preds = %dec_label_pc_10010c8d
  %v4_10010c92 = fptrunc double %arg1 to float
  %v5_10010c92 = bitcast float %v4_10010c92 to i32
  %v17_10010c92 = icmp eq i32 %v5_10010c92, 0
  %v1_10010c95 = icmp eq i1 %v17_10010c92, false
  br i1 %v1_10010c95, label %dec_label_pc_10010cf7, label %dec_label_pc_10010c97

dec_label_pc_10010c97:                            ; preds = %dec_label_pc_10010c92
  store i3 %v5_10010bd1, i3* @fpu_stat_TOP, align 1
  %v2_10010c9f = sext i32 %arg3 to i64
  %v3_10010c9f = bitcast i64 %v2_10010c9f to double
  %v4_10010c9f = call i32 @function_10010cfc(double %v3_10010c9f, i32 -1048576)
  %v9_10010ca4 = load i3, i3* @fpu_stat_TOP, align 1
  %v1_10010cb3 = udiv i32 %v4_10010c9f, 256
  %tmp = and i32 %v1_10010cb3, 65
  %tmp85 = icmp eq i32 %tmp, 0
  br i1 %tmp85, label %dec_label_pc_10010cb6, label %dec_label_pc_10010ccb

dec_label_pc_10010cb6:                            ; preds = %dec_label_pc_10010c97
  %v0_10010cb6 = load double, double* @global_var_100186c8.141, align 8
  %v1_10010cb6 = fpext double %v0_10010cb6 to x86_fp80
  %v3_10010cb6 = add i3 %v9_10010ca4, -1
  %v9_10010cbc = icmp eq i32 %v4_10010c9f, 1
  %v1_10010cbf = icmp eq i1 %v9_10010cbc, false
  br i1 %v1_10010cbf, label %dec_label_pc_10010cc3, label %dec_label_pc_10010cc1

dec_label_pc_10010cc1:                            ; preds = %dec_label_pc_10010cb6
  %v2_10010cc1 = fsub x86_fp80 0xK80000000000000000000, %v1_10010cb6
  br label %dec_label_pc_10010cc3

dec_label_pc_10010cc3:                            ; preds = %dec_label_pc_10010cb6, %dec_label_pc_10010cc1
  %v1_10010cc3 = phi x86_fp80 [ %v1_10010cb6, %dec_label_pc_10010cb6 ], [ %v2_10010cc1, %dec_label_pc_10010cc1 ]
  br label %dec_label_pc_10010cf2

dec_label_pc_10010ccb:                            ; preds = %dec_label_pc_10010c97
  %v3_10010cb3 = and i32 %v1_10010cb3, 1
  %v4_10010cb3 = icmp ne i32 %v3_10010cb3, 0
  %v1_10010cd7 = icmp eq i1 %v4_10010cb3, false
  br i1 %v1_10010cd7, label %dec_label_pc_10010cf0, label %dec_label_pc_10010cd9

dec_label_pc_10010cd9:                            ; preds = %dec_label_pc_10010ccb
  %v9_10010cd9 = icmp eq i32 %v4_10010c9f, 1
  %v1_10010cdc = icmp eq i1 %v9_10010cd9, false
  %v0_10010cde = load double, double* @global_var_100186e8.172, align 8
  %v1_10010cde = fpext double %v0_10010cde to x86_fp80
  %storemerge25 = select i1 %v1_10010cdc, x86_fp80 0xK00000000000000000000, x86_fp80 %v1_10010cde
  %storemerge24 = add i3 %v9_10010ca4, -1
  br label %dec_label_pc_10010cf2

dec_label_pc_10010cf0:                            ; preds = %dec_label_pc_10010ccb
  %v1_10010cf0 = add i3 %v9_10010ca4, -1
  br label %dec_label_pc_10010cf2

dec_label_pc_10010cf2:                            ; preds = %dec_label_pc_10010cd9, %dec_label_pc_10010cc3, %dec_label_pc_10010c89, %dec_label_pc_10010c73, %dec_label_pc_10010cf0
  %v1_10010cf5 = phi x86_fp80 [ %storemerge25, %dec_label_pc_10010cd9 ], [ %v1_10010cc3, %dec_label_pc_10010cc3 ], [ 0xK00000000000000000000, %dec_label_pc_10010c89 ], [ %v1_10010c73, %dec_label_pc_10010c73 ], [ 0xK3FFF8000000000000000, %dec_label_pc_10010cf0 ]
  %v0_10010cf5 = phi i3 [ %storemerge24, %dec_label_pc_10010cd9 ], [ %v3_10010cb6, %dec_label_pc_10010cc3 ], [ %v6_10010bd1, %dec_label_pc_10010c89 ], [ %v6_10010bd1, %dec_label_pc_10010c73 ], [ %v1_10010cf0, %dec_label_pc_10010cf0 ]
  %v3_10010cf5 = fptrunc x86_fp80 %v1_10010cf5 to double
  %v5_10010cf5 = add i3 %v0_10010cf5, 1
  store i3 %v5_10010cf5, i3* @fpu_stat_TOP, align 1
  %v0_10010cf7.pre = load i32, i32* %esi.global-to-local, align 4
  %v2_10010cf9.pre = load i32, i32* %stack_var_-16, align 4
  %v2_10010cfa.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_10010cf7

dec_label_pc_10010cf7:                            ; preds = %dec_label_pc_10010c92, %dec_label_pc_10010c8d, %dec_label_pc_10010c5c, %dec_label_pc_10010cf2
  %v2_10010cfa = phi i32 [ %v0_10010bcc, %dec_label_pc_10010c92 ], [ %v0_10010bcc, %dec_label_pc_10010c8d ], [ %v0_10010bcc, %dec_label_pc_10010c5c ], [ %v2_10010cfa.pre, %dec_label_pc_10010cf2 ]
  %v2_10010cf9 = phi i32 [ %v0_10010bdd, %dec_label_pc_10010c92 ], [ %v0_10010bdd, %dec_label_pc_10010c8d ], [ %v0_10010bdd, %dec_label_pc_10010c5c ], [ %v2_10010cf9.pre, %dec_label_pc_10010cf2 ]
  %v0_10010cf7 = phi i32 [ 0, %dec_label_pc_10010c92 ], [ 0, %dec_label_pc_10010c8d ], [ 0, %dec_label_pc_10010c5c ], [ %v0_10010cf7.pre, %dec_label_pc_10010cf2 ]
  store i32 %v2_10010cf9, i32* @esi, align 4
  store i32 %v2_10010cfa, i32* @ebp, align 4
  ret i32 %v0_10010cf7

; uselistorder directives
  uselistorder i32 %v1_10010cb3, { 1, 0 }
  uselistorder i3 %v6_10010bd1, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder x86_fp80 0xK80000000000000000000, { 1, 2, 3, 4, 0 }
  uselistorder double* @global_var_100186c8.141, { 3, 2, 0, 1 }
  uselistorder i32 2146435072, { 0, 1, 6, 4, 7, 2, 8, 13, 9, 3, 10, 11, 5, 12 }
  uselistorder i32 -1048576, { 3, 1, 0, 4, 2 }
  uselistorder double %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_10010cf7, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_10010cf2, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_10010cc3, { 1, 0 }
  uselistorder label %dec_label_pc_10010be9, { 1, 0 }
}

define i32 @function_10010cfc(double %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10010cfc:
  %v0_10010cff = load i32, i32* @ecx, align 4
  %v4_10010d01 = fpext double %arg1 to x86_fp80
  %v8_10010d09 = call i32 @function_100136fd(double %arg1, i32 %v0_10010cff, i32 %v0_10010cff, i32 %v0_10010cff)
  %v2_10010d0f = and i32 %v8_10010d09, 144
  %v3_10010d0f = icmp eq i32 %v2_10010d0f, 0
  %v1_10010d12 = icmp eq i1 %v3_10010d0f, false
  br i1 %v1_10010d12, label %dec_label_pc_10010d5d, label %dec_label_pc_10010d14

dec_label_pc_10010d14:                            ; preds = %dec_label_pc_10010cfc
  %v4_10010d1c = call x86_fp80 @function_100136eb(double %arg1, i32 %v0_10010cff)
  %v5_10010d1c = fptrunc x86_fp80 %v4_10010d1c to float
  %v6_10010d1c = bitcast float %v5_10010d1c to i32
  %v0_10010d21 = load i3, i3* @fpu_stat_TOP, align 1
  %v12_10010d21 = add i3 %v0_10010d21, 1
  store i3 %v12_10010d21, i3* @fpu_stat_TOP, align 1
  %v1_10010d2e = udiv i32 %v6_10010d1c, 256
  %v9_10010d2e = and i32 %v1_10010d2e, 64
  %v10_10010d2e = icmp ne i32 %v9_10010d2e, 0
  %v1_10010d2f = icmp eq i1 %v10_10010d2e, false
  br i1 %v1_10010d2f, label %dec_label_pc_10010d5d, label %dec_label_pc_10010d31

dec_label_pc_10010d31:                            ; preds = %dec_label_pc_10010d14
  %v4_10010d34 = fdiv x86_fp80 0xK40008000000000000000, %v4_10010d01
  store i3 %v12_10010d21, i3* @fpu_stat_TOP, align 1
  %tmp = fptrunc x86_fp80 %v4_10010d34 to double
  %v4_10010d45 = call x86_fp80 @function_100136eb(double %tmp, i32 %v0_10010cff)
  %v5_10010d45 = fptrunc x86_fp80 %v4_10010d45 to float
  %v6_10010d45 = bitcast float %v5_10010d45 to i32
  %v0_10010d4a = load i3, i3* @fpu_stat_TOP, align 1
  %storemerge5 = add i3 %v0_10010d4a, 1
  store i3 %storemerge5, i3* @fpu_stat_TOP, align 1
  %v1_10010d51 = udiv i32 %v6_10010d45, 256
  %v9_10010d51 = and i32 %v1_10010d51, 64
  %v10_10010d51 = icmp ne i32 %v9_10010d51, 0
  %v1_10010d52 = icmp eq i1 %v10_10010d51, false
  %.12 = select i1 %v1_10010d52, i32 1, i32 2
  ret i32 %.12

dec_label_pc_10010d5d:                            ; preds = %dec_label_pc_10010d14, %dec_label_pc_10010cfc
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_10010cff, { 2, 1, 3, 0, 4 }
  uselistorder i3 1, { 2, 39, 40, 48, 49, 50, 41, 3, 42, 43, 44, 45, 46, 9, 10, 4, 31, 5, 32, 11, 12, 20, 21, 33, 0, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 35, 36, 1, 37, 38, 47, 6, 7, 8, 51 }
  uselistorder i32 144, { 0, 3, 2, 4, 5, 6, 1 }
  uselistorder double %arg1, { 1, 0, 2 }
}

define i32 @function_10010d61() local_unnamed_addr {
dec_label_pc_10010d61:
  %v0_10010d61 = load i32, i32* @global_var_10018380.174, align 128
  %v1_10010d66 = icmp eq i32 %v0_10010d61, 0
  br i1 %v1_10010d66, label %dec_label_pc_10010d6c, label %dec_label_pc_10010d6a

dec_label_pc_10010d6a:                            ; preds = %dec_label_pc_10010d61
  %v0_10010d6a = call i32 @function_1000d4eb()
  br label %dec_label_pc_10010d6c

dec_label_pc_10010d6c:                            ; preds = %dec_label_pc_10010d6a, %dec_label_pc_10010d61
  %v3_10010d76 = call i32 @function_10010e65(i32* nonnull @global_var_10018008.176, i32 ptrtoint (i32* @global_var_10018010.175 to i32))
  %v3_10010d85 = call i32 @function_10010e65(i32* nonnull @global_var_10018000.178, i32 ptrtoint (i32* @global_var_10018004.177 to i32))
  ret i32 %v3_10010d85
}

define i32 @function_10010d8e(i32 %arg1) local_unnamed_addr {
dec_label_pc_10010d8e:
  %v4_10010d96 = call i32 @function_10010dae(i32 %arg1, i32 1, i8 0)
  ret i32 %v4_10010d96
}

define i32 @function_10010d9f() local_unnamed_addr {
dec_label_pc_10010d9f:
  %v4_10010da5 = call i32 @function_10010dae(i32 0, i32 0, i8 1)
  ret i32 %v4_10010da5

; uselistorder directives
  uselistorder i32 (i32, i32, i8)* @function_10010dae, { 1, 0 }
}

define i32 @function_10010dae(i32 %arg1, i32 %arg2, i8 %arg3) local_unnamed_addr {
dec_label_pc_10010dae:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10010dae = load i32, i32* @edi, align 4
  store i32 %v0_10010dae, i32* %stack_var_-4, align 4
  %v1_10010daf = call i32 @function_10010e53(i32 %v0_10010dae)
  store i32 1, i32* %stack_var_-8, align 4
  store i32 1, i32* @edi, align 4
  %v0_10010db7 = load i32, i32* @global_var_1001b4e0.179, align 32
  %v12_10010db7 = icmp eq i32 %v0_10010db7, 1
  %v1_10010dbd = icmp eq i1 %v12_10010db7, false
  br i1 %v1_10010dbd, label %dec_label_pc_10010dd0, label %dec_label_pc_10010dbf

dec_label_pc_10010dbf:                            ; preds = %dec_label_pc_10010dae
  store i32 %arg1, i32* %stack_var_-8, align 4
  %v1_10010dc3 = call i32* @GetCurrentProcess()
  %v5_10010dca = call i1 @TerminateProcess(i32* %v1_10010dc3, i32 %arg1)
  %v0_10010dda.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_10010dd0

dec_label_pc_10010dd0:                            ; preds = %dec_label_pc_10010dae, %dec_label_pc_10010dbf
  %v0_10010dda = phi i32 [ 1, %dec_label_pc_10010dae ], [ %v0_10010dda.pre, %dec_label_pc_10010dbf ]
  %v4_10010dd0 = icmp eq i32 %arg2, 0
  %v0_10010dd5 = load i32, i32* @ebx, align 4
  store i32 %v0_10010dd5, i32* %stack_var_-8, align 4
  store i32 %v0_10010dda, i32* @global_var_1001b4dc.133, align 4
  store i8 %arg3, i8* bitcast (i32* @global_var_1001b4d8.180 to i8*), align 8
  %v1_10010de6 = icmp eq i1 %v4_10010dd0, false
  br i1 %v1_10010de6, label %dec_label_pc_10010dd0.dec_label_pc_10010e24_crit_edge, label %dec_label_pc_10010de8

dec_label_pc_10010dd0.dec_label_pc_10010e24_crit_edge: ; preds = %dec_label_pc_10010dd0
  br label %dec_label_pc_10010e24

dec_label_pc_10010de8:                            ; preds = %dec_label_pc_10010dd0
  %v0_10010de8 = load i32, i32* @global_var_1001baf0.181, align 16
  %v1_10010ded = icmp eq i32 %v0_10010de8, 0
  br i1 %v1_10010ded, label %dec_label_pc_10010e13, label %dec_label_pc_10010df1

dec_label_pc_10010df1:                            ; preds = %dec_label_pc_10010de8
  %v0_10010df1 = load i32, i32* @global_var_1001baec.182, align 4
  %v1_10010df8 = add i32 %v0_10010df1, -4
  store i32 %v1_10010df8, i32* %esi.global-to-local, align 4
  %v7_10010dfb = icmp ult i32 %v1_10010df8, %v0_10010de8
  br i1 %v7_10010dfb, label %dec_label_pc_10010e12, label %dec_label_pc_10010dff.preheader

dec_label_pc_10010dff.preheader:                  ; preds = %dec_label_pc_10010df1
  br label %dec_label_pc_10010dff

dec_label_pc_10010dff:                            ; preds = %dec_label_pc_10010dff.preheader, %dec_label_pc_10010e07
  %v1_10010e0a4 = phi i32 [ %v0_10010de8, %dec_label_pc_10010dff.preheader ], [ %v1_10010e0a, %dec_label_pc_10010e07 ]
  %v0_10010dff = phi i32 [ %v1_10010df8, %dec_label_pc_10010dff.preheader ], [ %v1_10010e07, %dec_label_pc_10010e07 ]
  %v1_10010dff = inttoptr i32 %v0_10010dff to i32*
  %v2_10010dff = load i32, i32* %v1_10010dff, align 4
  %v1_10010e01 = icmp eq i32 %v2_10010dff, 0
  br i1 %v1_10010e01, label %dec_label_pc_10010e07, label %dec_label_pc_10010e05

dec_label_pc_10010e05:                            ; preds = %dec_label_pc_10010dff
  store i32 268504583, i32* %stack_var_-16, align 4
  call void @__pseudo_call(i32 %v2_10010dff)
  %v0_10010e07.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_10010e0a.pre = load i32, i32* @global_var_1001baf0.181, align 16
  br label %dec_label_pc_10010e07

dec_label_pc_10010e07:                            ; preds = %dec_label_pc_10010dff, %dec_label_pc_10010e05
  %v1_10010e0a = phi i32 [ %v1_10010e0a4, %dec_label_pc_10010dff ], [ %v1_10010e0a.pre, %dec_label_pc_10010e05 ]
  %v0_10010e07 = phi i32 [ %v0_10010dff, %dec_label_pc_10010dff ], [ %v0_10010e07.pre, %dec_label_pc_10010e05 ]
  %v1_10010e07 = add i32 %v0_10010e07, -4
  store i32 %v1_10010e07, i32* %esi.global-to-local, align 4
  %v7_10010e0a = icmp ult i32 %v1_10010e07, %v1_10010e0a
  %v1_10010e10 = icmp eq i1 %v7_10010e0a, false
  br i1 %v1_10010e10, label %dec_label_pc_10010dff, label %dec_label_pc_10010e12

dec_label_pc_10010e12:                            ; preds = %dec_label_pc_10010e07, %dec_label_pc_10010df1
  %v2_10010e12 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10010e12, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10010e13

dec_label_pc_10010e13:                            ; preds = %dec_label_pc_10010de8, %dec_label_pc_10010e12
  store i32 ptrtoint (i32* @global_var_10018014.184 to i32), i32* %stack_var_-16, align 4
  %v3_10010e1d = call i32 @function_10010e65(i32* nonnull @global_var_10018014.184, i32 ptrtoint (i32* @global_var_10018018.183 to i32))
  br label %dec_label_pc_10010e24

dec_label_pc_10010e24:                            ; preds = %dec_label_pc_10010dd0.dec_label_pc_10010e24_crit_edge, %dec_label_pc_10010e13
  store i32 ptrtoint (i32* @global_var_1001801c.186 to i32), i32* %stack_var_-16, align 4
  %v3_10010e2e = call i32 @function_10010e65(i32* nonnull @global_var_1001801c.186, i32 ptrtoint (i32* @global_var_10018020.185 to i32))
  store i32 ptrtoint (i32* @global_var_10018020.185 to i32), i32* @ecx, align 4
  %v2_10010e35 = icmp eq i8 %arg3, 0
  %v2_10010e37 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10010e37, i32* @ebx, align 4
  br i1 %v2_10010e35, label %dec_label_pc_10010e41, label %dec_label_pc_10010e3a

dec_label_pc_10010e3a:                            ; preds = %dec_label_pc_10010e24
  %v0_10010e3a = call i32 @function_10010e5c()
  %v2_10010e3f = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10010e3f, i32* @edi, align 4
  ret i32 %v0_10010e3a

dec_label_pc_10010e41:                            ; preds = %dec_label_pc_10010e24
  store i32 %arg1, i32* %stack_var_-8, align 4
  %v0_10010e45 = load i32, i32* @edi, align 4
  store i32 %v0_10010e45, i32* @global_var_1001b4e0.179, align 32
  call void @ExitProcess(i32 %arg1)
  unreachable

; uselistorder directives
  uselistorder i32 %v1_10010e07, { 1, 2, 0 }
  uselistorder void (i32)* @__pseudo_call, { 19, 0, 1, 6, 4, 7, 8, 9, 10, 11, 12, 2, 18, 5, 17, 13, 3, 14, 15, 16 }
  uselistorder i8 %arg3, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_10010e24, { 1, 0 }
  uselistorder label %dec_label_pc_10010e13, { 1, 0 }
  uselistorder label %dec_label_pc_10010e07, { 1, 0 }
  uselistorder label %dec_label_pc_10010dff, { 1, 0 }
  uselistorder label %dec_label_pc_10010dd0, { 1, 0 }
}

define i32 @function_10010e51(i32 %arg1) local_unnamed_addr {
dec_label_pc_10010e51:
  %v0_10010e52 = load i32, i32* @eax, align 4
  ret i32 %v0_10010e52
}

define i32 @function_10010e53(i32 %arg1) local_unnamed_addr {
dec_label_pc_10010e53:
  %v1_10010e55 = call i32 @function_1001039a(i32 13)
  ret i32 %v1_10010e55
}

define i32 @function_10010e5c() local_unnamed_addr {
dec_label_pc_10010e5c:
  %v1_10010e5e = call i32 @function_100103fb(i32 13)
  store i32 13, i32* @ecx, align 4
  ret i32 %v1_10010e5e
}

define i32 @function_10010e65(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10010e7d:
  ret i32 undef
}

define i32 @function_10010e7f() local_unnamed_addr {
dec_label_pc_10010e7f:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10010e7f = load i32, i32* @esi, align 4
  store i32 %v0_10010e7f, i32* %stack_var_-4, align 4
  %v1_10010e80 = call i32 @function_10010305(i32 %v0_10010e7f)
  %v0_10010e85 = call i32 @TlsAlloc()
  %v10_10010e8b = icmp eq i32 %v0_10010e85, -1
  store i32 %v0_10010e85, i32* @global_var_1001a8a0.187, align 32
  br i1 %v10_10010e8b, label %dec_label_pc_10010ecf, label %dec_label_pc_10010e95

dec_label_pc_10010e95:                            ; preds = %dec_label_pc_10010e7f
  store i32 116, i32* %stack_var_-8, align 4
  %v3_10010e99 = call i32 @function_1001378f(i64 1, i32 116)
  %v1_10010ea1 = icmp eq i32 %v3_10010e99, 0
  store i32 116, i32* @ecx, align 4
  br i1 %v1_10010ea1, label %dec_label_pc_10010ecf, label %dec_label_pc_10010ea6

dec_label_pc_10010ea6:                            ; preds = %dec_label_pc_10010e95
  store i32 %v3_10010e99, i32* %stack_var_-8, align 4
  %v0_10010ea7 = load i32, i32* @global_var_1001a8a0.187, align 32
  %v4_10010ead = inttoptr i32 %v3_10010e99 to i32*
  %v5_10010ead = call i1 @TlsSetValue(i32 %v0_10010ea7, i32* %v4_10010ead)
  %v1_10010eb3 = icmp eq i1 %v5_10010ead, false
  br i1 %v1_10010eb3, label %dec_label_pc_10010ecf, label %dec_label_pc_10010eb7

dec_label_pc_10010eb7:                            ; preds = %dec_label_pc_10010ea6
  store i32 %v3_10010e99, i32* %stack_var_-8, align 4
  %v1_10010eb8 = call i32 @function_10010ef1(i32 %v3_10010e99)
  store i32 %v3_10010e99, i32* @ecx, align 4
  %v0_10010ebe = call i32 @GetCurrentThreadId()
  %v5_10010ec4 = add i32 %v3_10010e99, 4
  %v6_10010ec4 = inttoptr i32 %v5_10010ec4 to i32*
  store i32 -1, i32* %v6_10010ec4, align 4
  store i32 1, i32* %stack_var_-8, align 4
  store i32 %v0_10010ebe, i32* %v4_10010ead, align 4
  %v2_10010ecc = load i32, i32* %stack_var_-8, align 4
  %v2_10010ecd = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10010ecd, i32* @esi, align 4
  ret i32 %v2_10010ecc

dec_label_pc_10010ecf:                            ; preds = %dec_label_pc_10010ea6, %dec_label_pc_10010e95, %dec_label_pc_10010e7f
  %v2_10010ed1 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10010ed1, i32* @esi, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_10010e99, { 2, 0, 4, 3, 1, 5, 6 }
  uselistorder i32 %v0_10010e85, { 1, 0 }
}

define i32 @function_10010ed3() local_unnamed_addr {
dec_label_pc_10010ed3:
  %v0_10010ed3 = call i32 @function_1001032e()
  %v0_10010ed8 = load i32, i32* @global_var_1001a8a0.187, align 32
  %v10_10010edd = icmp eq i32 %v0_10010ed8, -1
  br i1 %v10_10010edd, label %dec_label_pc_10010ef0, label %dec_label_pc_10010ee2

dec_label_pc_10010ee2:                            ; preds = %dec_label_pc_10010ed3
  %v3_10010ee3 = call i1 @TlsFree(i32 %v0_10010ed8)
  %v4_10010ee3 = sext i1 %v3_10010ee3 to i32
  store i32 -1, i32* @global_var_1001a8a0.187, align 32
  br label %dec_label_pc_10010ef0

dec_label_pc_10010ef0:                            ; preds = %dec_label_pc_10010ed3, %dec_label_pc_10010ee2
  %v0_10010ef0 = phi i32 [ %v0_10010ed8, %dec_label_pc_10010ed3 ], [ %v4_10010ee3, %dec_label_pc_10010ee2 ]
  ret i32 %v0_10010ef0

; uselistorder directives
  uselistorder i32 %v0_10010ed8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10010ef0, { 1, 0 }
}

define i32 @function_10010ef1(i32 %arg1) local_unnamed_addr {
dec_label_pc_10010ef1:
  %v1_10010ef5 = add i32 %arg1, 80
  %v2_10010ef5 = inttoptr i32 %v1_10010ef5 to i32*
  store i32 ptrtoint (i32* @global_var_1001ac60.188 to i32), i32* %v2_10010ef5, align 4
  %v1_10010efc = add i32 %arg1, 20
  %v2_10010efc = inttoptr i32 %v1_10010efc to i32*
  store i32 1, i32* %v2_10010efc, align 4
  ret i32 %arg1
}

define i32 @function_10010f04() local_unnamed_addr {
dec_label_pc_10010f04:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_10010f05 = load i32, i32* @edi, align 4
  store i32 %v0_10010f05, i32* %stack_var_-8, align 4
  %v2_10010f06 = call i32 @GetLastError()
  %v0_10010f0c = load i32, i32* @global_var_1001a8a0.187, align 32
  store i32 %v2_10010f06, i32* %edi.global-to-local, align 4
  %v3_10010f14 = call i32* @TlsGetValue(i32 %v0_10010f0c)
  %v4_10010f14 = ptrtoint i32* %v3_10010f14 to i32
  store i32 %v4_10010f14, i32* %esi.global-to-local, align 4
  %v1_10010f1c = icmp eq i32* %v3_10010f14, null
  %v1_10010f1e = icmp eq i1 %v1_10010f1c, false
  br i1 %v1_10010f1e, label %dec_label_pc_10010f5f, label %dec_label_pc_10010f20

dec_label_pc_10010f20:                            ; preds = %dec_label_pc_10010f04
  %v3_10010f24 = call i32 @function_1001378f(i64 1, i32 116)
  store i32 %v3_10010f24, i32* %esi.global-to-local, align 4
  %v1_10010f2c = icmp eq i32 %v3_10010f24, 0
  br i1 %v1_10010f2c, label %dec_label_pc_10010f57, label %dec_label_pc_10010f31

dec_label_pc_10010f31:                            ; preds = %dec_label_pc_10010f20
  %v0_10010f32 = load i32, i32* @global_var_1001a8a0.187, align 32
  %v4_10010f38 = inttoptr i32 %v3_10010f24 to i32*
  %v5_10010f38 = call i1 @TlsSetValue(i32 %v0_10010f32, i32* %v4_10010f38)
  %v1_10010f3e = icmp eq i1 %v5_10010f38, false
  br i1 %v1_10010f3e, label %dec_label_pc_10010f57, label %dec_label_pc_10010f42

dec_label_pc_10010f42:                            ; preds = %dec_label_pc_10010f31
  %v0_10010f42 = load i32, i32* %esi.global-to-local, align 4
  %v1_10010f43 = call i32 @function_10010ef1(i32 %v0_10010f42)
  store i32 %v0_10010f42, i32* @ecx, align 4
  %v0_10010f49 = call i32 @GetCurrentThreadId()
  %v5_10010f4f = add i32 %v0_10010f42, 4
  %v6_10010f4f = inttoptr i32 %v5_10010f4f to i32*
  store i32 -1, i32* %v6_10010f4f, align 4
  %v1_10010f53 = load i32, i32* %esi.global-to-local, align 4
  %v2_10010f53 = inttoptr i32 %v1_10010f53 to i32*
  store i32 %v0_10010f49, i32* %v2_10010f53, align 4
  br label %dec_label_pc_10010f5f

dec_label_pc_10010f57:                            ; preds = %dec_label_pc_10010f31, %dec_label_pc_10010f20
  %v1_10010f59 = call i32 @__amsg_exit(i32 16)
  store i32 16, i32* @ecx, align 4
  br label %dec_label_pc_10010f5f

dec_label_pc_10010f5f:                            ; preds = %dec_label_pc_10010f04, %dec_label_pc_10010f42, %dec_label_pc_10010f57
  %v0_10010f5f = load i32, i32* %edi.global-to-local, align 4
  call void @SetLastError(i32 %v0_10010f5f)
  %v0_10010f66 = load i32, i32* %esi.global-to-local, align 4
  %v2_10010f68 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10010f68, i32* %edi.global-to-local, align 4
  ret i32 %v0_10010f66

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 ()* @GetCurrentThreadId, { 1, 0 }
  uselistorder i32 (i32)* @function_10010ef1, { 1, 0 }
  uselistorder i32 116, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_10010f5f, { 2, 1, 0 }
}

define i32 @function_10010f6b(i32 %arg1) local_unnamed_addr {
dec_label_pc_10010f6b:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10010f6b = load i32, i32* @global_var_1001a8a0.187, align 32
  %v10_10010f70 = icmp eq i32 %v0_10010f6b, -1
  br i1 %v10_10010f70, label %dec_label_pc_1001100a, label %dec_label_pc_10010f79

dec_label_pc_10010f79:                            ; preds = %dec_label_pc_10010f6b
  %v0_10010f79 = load i32, i32* @esi, align 4
  store i32 %v0_10010f79, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  %v1_10010f7e = icmp eq i32 %arg1, 0
  %v1_10010f80 = icmp eq i1 %v1_10010f7e, false
  br i1 %v1_10010f80, label %dec_label_pc_10010f8f, label %dec_label_pc_10010f82

dec_label_pc_10010f82:                            ; preds = %dec_label_pc_10010f79
  %v3_10010f83 = call i32* @TlsGetValue(i32 %v0_10010f6b)
  %v4_10010f83 = ptrtoint i32* %v3_10010f83 to i32
  store i32 %v4_10010f83, i32* %esi.global-to-local, align 4
  %v1_10010f8b = icmp eq i32* %v3_10010f83, null
  br i1 %v1_10010f8b, label %dec_label_pc_10010ffb, label %dec_label_pc_10010f8f

dec_label_pc_10010f8f:                            ; preds = %dec_label_pc_10010f82, %dec_label_pc_10010f79
  %v0_10010f8f = phi i32 [ %v4_10010f83, %dec_label_pc_10010f82 ], [ %arg1, %dec_label_pc_10010f79 ]
  %v1_10010f8f = add i32 %v0_10010f8f, 36
  %v2_10010f8f = inttoptr i32 %v1_10010f8f to i32*
  %v3_10010f8f = load i32, i32* %v2_10010f8f, align 4
  %v1_10010f92 = icmp eq i32 %v3_10010f8f, 0
  br i1 %v1_10010f92, label %dec_label_pc_10010f9d, label %dec_label_pc_10010f96

dec_label_pc_10010f96:                            ; preds = %dec_label_pc_10010f8f
  %v1_10010f97 = call i32 @function_1000d97b(i32 %v3_10010f8f)
  %v0_10010f9d.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10010f9d

dec_label_pc_10010f9d:                            ; preds = %dec_label_pc_10010f8f, %dec_label_pc_10010f96
  %v0_10010f9d = phi i32 [ %v0_10010f8f, %dec_label_pc_10010f8f ], [ %v0_10010f9d.pre, %dec_label_pc_10010f96 ]
  %v1_10010f9d = add i32 %v0_10010f9d, 40
  %v2_10010f9d = inttoptr i32 %v1_10010f9d to i32*
  %v3_10010f9d = load i32, i32* %v2_10010f9d, align 4
  %v1_10010fa0 = icmp eq i32 %v3_10010f9d, 0
  br i1 %v1_10010fa0, label %dec_label_pc_10010fab, label %dec_label_pc_10010fa4

dec_label_pc_10010fa4:                            ; preds = %dec_label_pc_10010f9d
  %v1_10010fa5 = call i32 @function_1000d97b(i32 %v3_10010f9d)
  %v0_10010fab.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10010fab

dec_label_pc_10010fab:                            ; preds = %dec_label_pc_10010f9d, %dec_label_pc_10010fa4
  %v0_10010fab = phi i32 [ %v0_10010f9d, %dec_label_pc_10010f9d ], [ %v0_10010fab.pre, %dec_label_pc_10010fa4 ]
  %v1_10010fab = add i32 %v0_10010fab, 48
  %v2_10010fab = inttoptr i32 %v1_10010fab to i32*
  %v3_10010fab = load i32, i32* %v2_10010fab, align 4
  %v1_10010fae = icmp eq i32 %v3_10010fab, 0
  br i1 %v1_10010fae, label %dec_label_pc_10010fb9, label %dec_label_pc_10010fb2

dec_label_pc_10010fb2:                            ; preds = %dec_label_pc_10010fab
  %v1_10010fb3 = call i32 @function_1000d97b(i32 %v3_10010fab)
  %v0_10010fb9.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10010fb9

dec_label_pc_10010fb9:                            ; preds = %dec_label_pc_10010fab, %dec_label_pc_10010fb2
  %v0_10010fb9 = phi i32 [ %v0_10010fab, %dec_label_pc_10010fab ], [ %v0_10010fb9.pre, %dec_label_pc_10010fb2 ]
  %v1_10010fb9 = add i32 %v0_10010fb9, 56
  %v2_10010fb9 = inttoptr i32 %v1_10010fb9 to i32*
  %v3_10010fb9 = load i32, i32* %v2_10010fb9, align 4
  %v1_10010fbc = icmp eq i32 %v3_10010fb9, 0
  br i1 %v1_10010fbc, label %dec_label_pc_10010fc7, label %dec_label_pc_10010fc0

dec_label_pc_10010fc0:                            ; preds = %dec_label_pc_10010fb9
  %v1_10010fc1 = call i32 @function_1000d97b(i32 %v3_10010fb9)
  %v0_10010fc7.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10010fc7

dec_label_pc_10010fc7:                            ; preds = %dec_label_pc_10010fb9, %dec_label_pc_10010fc0
  %v0_10010fc7 = phi i32 [ %v0_10010fb9, %dec_label_pc_10010fb9 ], [ %v0_10010fc7.pre, %dec_label_pc_10010fc0 ]
  %v1_10010fc7 = add i32 %v0_10010fc7, 64
  %v2_10010fc7 = inttoptr i32 %v1_10010fc7 to i32*
  %v3_10010fc7 = load i32, i32* %v2_10010fc7, align 4
  %v1_10010fca = icmp eq i32 %v3_10010fc7, 0
  br i1 %v1_10010fca, label %dec_label_pc_10010fd5, label %dec_label_pc_10010fce

dec_label_pc_10010fce:                            ; preds = %dec_label_pc_10010fc7
  %v1_10010fcf = call i32 @function_1000d97b(i32 %v3_10010fc7)
  %v0_10010fd5.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10010fd5

dec_label_pc_10010fd5:                            ; preds = %dec_label_pc_10010fc7, %dec_label_pc_10010fce
  %v0_10010fd5 = phi i32 [ %v0_10010fc7, %dec_label_pc_10010fc7 ], [ %v0_10010fd5.pre, %dec_label_pc_10010fce ]
  %v1_10010fd5 = add i32 %v0_10010fd5, 68
  %v2_10010fd5 = inttoptr i32 %v1_10010fd5 to i32*
  %v3_10010fd5 = load i32, i32* %v2_10010fd5, align 4
  %v1_10010fd8 = icmp eq i32 %v3_10010fd5, 0
  br i1 %v1_10010fd8, label %dec_label_pc_10010fe3, label %dec_label_pc_10010fdc

dec_label_pc_10010fdc:                            ; preds = %dec_label_pc_10010fd5
  %v1_10010fdd = call i32 @function_1000d97b(i32 %v3_10010fd5)
  %v0_10010fe3.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10010fe3

dec_label_pc_10010fe3:                            ; preds = %dec_label_pc_10010fd5, %dec_label_pc_10010fdc
  %v0_10010fe3 = phi i32 [ %v0_10010fd5, %dec_label_pc_10010fd5 ], [ %v0_10010fe3.pre, %dec_label_pc_10010fdc ]
  %v1_10010fe3 = add i32 %v0_10010fe3, 80
  %v2_10010fe3 = inttoptr i32 %v1_10010fe3 to i32*
  %v3_10010fe3 = load i32, i32* %v2_10010fe3, align 4
  %v6_10010fe6 = icmp eq i32 %v3_10010fe3, 268545120
  br i1 %v6_10010fe6, label %dec_label_pc_10010fe3.dec_label_pc_10010ff4_crit_edge, label %dec_label_pc_10010fed

dec_label_pc_10010fe3.dec_label_pc_10010ff4_crit_edge: ; preds = %dec_label_pc_10010fe3
  br label %dec_label_pc_10010ff4

dec_label_pc_10010fed:                            ; preds = %dec_label_pc_10010fe3
  %v1_10010fee = call i32 @function_1000d97b(i32 %v3_10010fe3)
  %v0_10010ff4.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10010ff4

dec_label_pc_10010ff4:                            ; preds = %dec_label_pc_10010fe3.dec_label_pc_10010ff4_crit_edge, %dec_label_pc_10010fed
  %v0_10010ff4 = phi i32 [ %v0_10010fe3, %dec_label_pc_10010fe3.dec_label_pc_10010ff4_crit_edge ], [ %v0_10010ff4.pre, %dec_label_pc_10010fed ]
  %v1_10010ff5 = call i32 @function_1000d97b(i32 %v0_10010ff4)
  br label %dec_label_pc_10010ffb

dec_label_pc_10010ffb:                            ; preds = %dec_label_pc_10010f82, %dec_label_pc_10010ff4
  %v0_10010ffd = load i32, i32* @global_var_1001a8a0.187, align 32
  %v5_10011003 = call i1 @TlsSetValue(i32 %v0_10010ffd, i32* null)
  %v6_10011003 = sext i1 %v5_10011003 to i32
  %v2_10011009 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10011009, i32* @esi, align 4
  br label %dec_label_pc_1001100a

dec_label_pc_1001100a:                            ; preds = %dec_label_pc_10010f6b, %dec_label_pc_10010ffb
  %v0_1001100a = phi i32 [ %v0_10010f6b, %dec_label_pc_10010f6b ], [ %v6_10011003, %dec_label_pc_10010ffb ]
  ret i32 %v0_1001100a

; uselistorder directives
  uselistorder i32 %v3_10010fe3, { 1, 0 }
  uselistorder i32 %v0_10010f6b, { 1, 2, 0 }
  uselistorder i32* %esi.global-to-local, { 6, 5, 4, 3, 2, 1, 7, 0, 8 }
  uselistorder i1 (i32, i32*)* @TlsSetValue, { 1, 2, 0 }
  uselistorder i32 80, { 10, 11, 12, 2, 3, 0, 4, 5, 6, 7, 1, 8, 9 }
  uselistorder i32 68, { 6, 10, 11, 12, 0, 7, 8, 9, 2, 3, 5, 4, 1 }
  uselistorder i32 40, { 12, 1, 0, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1001100a, { 1, 0 }
  uselistorder label %dec_label_pc_10010ffb, { 1, 0 }
  uselistorder label %dec_label_pc_10010ff4, { 1, 0 }
  uselistorder label %dec_label_pc_10010fe3, { 1, 0 }
  uselistorder label %dec_label_pc_10010fd5, { 1, 0 }
  uselistorder label %dec_label_pc_10010fc7, { 1, 0 }
  uselistorder label %dec_label_pc_10010fb9, { 1, 0 }
  uselistorder label %dec_label_pc_10010fab, { 1, 0 }
  uselistorder label %dec_label_pc_10010f9d, { 1, 0 }
}

define i32 @function_1001100b() local_unnamed_addr {
dec_label_pc_1001100b:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %tmp37 = call i32 @__decompiler_undefined_function_1()
  %tmp38 = call i16 @__decompiler_undefined_function_0()
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1001100b = load i32, i32* @ebp, align 4
  store i32 %v0_1001100b, i32* %stack_var_-4, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  %v15_1001100e = ptrtoint i32* %stack_var_-76 to i32
  %v0_10011013 = load i32, i32* @edi, align 4
  store i32 %v0_10011013, i32* %stack_var_-88, align 4
  %v2_10011019 = call i32 @function_1000da64(i32 1152)
  store i32 %v2_10011019, i32* %eax.global-to-local, align 4
  store i32 %v2_10011019, i32* %esi.global-to-local, align 4
  store i32 1152, i32* %ecx.global-to-local, align 4
  %v1_10011021 = icmp eq i32 %v2_10011019, 0
  store i1 %v1_10011021, i1* %zf.global-to-local, align 1
  %v1_10011023 = icmp eq i1 %v1_10011021, false
  br i1 %v1_10011023, label %dec_label_pc_1001102d, label %dec_label_pc_10011025

dec_label_pc_10011025:                            ; preds = %dec_label_pc_1001100b
  %v2_10011027 = call i32 @__amsg_exit(i32 27)
  store i32 %v2_10011027, i32* %eax.global-to-local, align 4
  store i32 27, i32* %ecx.global-to-local, align 4
  %v0_1001102d.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1001102d

dec_label_pc_1001102d:                            ; preds = %dec_label_pc_1001100b, %dec_label_pc_10011025
  %v0_1001102d = phi i32 [ %v2_10011019, %dec_label_pc_1001100b ], [ %v0_1001102d.pre, %dec_label_pc_10011025 ]
  store i32 %v0_1001102d, i32* @global_var_1001b9e0.189, align 32
  store %_STARTUPINFOA* inttoptr (i32 32 to %_STARTUPINFOA*), %_STARTUPINFOA** @global_var_1001bae0.190, align 32
  %v1_1001103d = add i32 %v0_1001102d, 1152
  store i32 %v1_1001103d, i32* %eax.global-to-local, align 4
  %v7_1001104317 = icmp ult i32 %v0_1001102d, -1152
  store i1 false, i1* %zf.global-to-local, align 1
  %v1_1001104524 = icmp eq i1 %v7_1001104317, false
  br i1 %v1_1001104524, label %dec_label_pc_10011065, label %dec_label_pc_10011047

dec_label_pc_10011047:                            ; preds = %dec_label_pc_1001102d, %dec_label_pc_10011047
  %v4_10011047 = phi i32 [ %v1_1001105b, %dec_label_pc_10011047 ], [ %v0_1001102d, %dec_label_pc_1001102d ]
  %v5_10011047 = add i32 %v4_10011047, 4
  %v6_10011047 = inttoptr i32 %v5_10011047 to i8*
  store i8 0, i8* %v6_10011047, align 1
  %v3_1001104b = load i32, i32* %esi.global-to-local, align 4
  %v4_1001104b = inttoptr i32 %v3_1001104b to i32*
  store i32 -1, i32* %v4_1001104b, align 4
  %v4_1001104e = load i32, i32* %esi.global-to-local, align 4
  %v5_1001104e = add i32 %v4_1001104e, 8
  %v6_1001104e = inttoptr i32 %v5_1001104e to i32*
  store i32 0, i32* %v6_1001104e, align 4
  %v0_10011052 = load i32, i32* %esi.global-to-local, align 4
  %v1_10011052 = add i32 %v0_10011052, 5
  %v2_10011052 = inttoptr i32 %v1_10011052 to i8*
  store i8 10, i8* %v2_10011052, align 1
  %v0_10011056 = load i32, i32* @global_var_1001b9e0.189, align 32
  %v0_1001105b = load i32, i32* %esi.global-to-local, align 4
  %v1_1001105b = add i32 %v0_1001105b, 36
  store i32 %v1_1001105b, i32* %esi.global-to-local, align 4
  %v1_1001105e = add i32 %v0_10011056, 1152
  store i32 %v1_1001105e, i32* %eax.global-to-local, align 4
  %v7_10011043 = icmp ult i32 %v1_1001105b, %v1_1001105e
  %v12_10011043 = icmp eq i32 %v1_1001105b, %v1_1001105e
  store i1 %v12_10011043, i1* %zf.global-to-local, align 1
  %v1_10011045 = icmp eq i1 %v7_10011043, false
  br i1 %v1_10011045, label %dec_label_pc_10011065, label %dec_label_pc_10011047

dec_label_pc_10011065:                            ; preds = %dec_label_pc_10011047, %dec_label_pc_1001102d
  store i32 %v15_1001100e, i32* %eax.global-to-local, align 4
  %tmp46 = bitcast i32* %stack_var_-76 to %_STARTUPINFOA*
  call void @GetStartupInfoA(%_STARTUPINFOA* %tmp46)
  store i32 ptrtoint (i32* @0 to i32), i32* %eax.global-to-local, align 4
  %v4_1001106f = icmp eq i16 %tmp38, 0
  store i1 %v4_1001106f, i1* %zf.global-to-local, align 1
  br i1 %v4_1001106f, label %dec_label_pc_1001114b, label %dec_label_pc_1001107a

dec_label_pc_1001107a:                            ; preds = %dec_label_pc_10011065
  store i32 %tmp37, i32* %eax.global-to-local, align 4
  %v1_1001107d = icmp eq i32 %tmp37, 0
  store i1 %v1_1001107d, i1* %zf.global-to-local, align 1
  br i1 %v1_1001107d, label %dec_label_pc_1001114b, label %dec_label_pc_10011085

dec_label_pc_10011085:                            ; preds = %dec_label_pc_1001107a
  %v1_10011085 = inttoptr i32 %tmp37 to i32*
  %v2_10011085 = load i32, i32* %v1_10011085, align 4
  store i32 %v2_10011085, i32* %edi.global-to-local, align 4
  %v1_10011087 = add i32 %tmp37, 4
  store i32 %v1_10011087, i32* %ebx.global-to-local, align 4
  %v2_1001108a = add i32 %v2_10011085, %v1_10011087
  store i32 2048, i32* %eax.global-to-local, align 4
  %v12_10011095 = icmp eq i32 %v2_10011085, 2048
  store i1 %v12_10011095, i1* %zf.global-to-local, align 1
  %v5_10011097 = icmp slt i32 %v2_10011085, 2048
  br i1 %v5_10011097, label %dec_label_pc_1001109b, label %dec_label_pc_10011099

dec_label_pc_10011099:                            ; preds = %dec_label_pc_10011085
  store i32 2048, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1001109b

dec_label_pc_1001109b:                            ; preds = %dec_label_pc_10011085, %dec_label_pc_10011099
  %v2_1001109b = phi i32 [ %v2_10011085, %dec_label_pc_10011085 ], [ 2048, %dec_label_pc_10011099 ]
  %v0_1001109b = load %_STARTUPINFOA*, %_STARTUPINFOA** @global_var_1001bae0.190, align 4
  %v1_1001109b = ptrtoint %_STARTUPINFOA* %v0_1001109b to i32
  %v4_1001109b = inttoptr i32 %v2_1001109b to %_STARTUPINFOA*
  %v15_1001109b = icmp eq i32 %v1_1001109b, %v2_1001109b
  store i1 %v15_1001109b, i1* %zf.global-to-local, align 1
  %v7_100110a1 = icmp slt %_STARTUPINFOA* %v0_1001109b, %v4_1001109b
  br i1 %v7_100110a1, label %dec_label_pc_100110a3, label %dec_label_pc_100110f9

dec_label_pc_100110a3:                            ; preds = %dec_label_pc_1001109b
  store i32 ptrtoint (i32* @global_var_1001b9e4.191 to i32), i32* %esi.global-to-local, align 4
  br label %dec_label_pc_100110a8

dec_label_pc_100110a8:                            ; preds = %dec_label_pc_100110e6, %dec_label_pc_100110a3
  %v2_100110ad = call i32 @function_1000da64(i32 1152)
  store i32 %v2_100110ad, i32* %eax.global-to-local, align 4
  %v1_100110b2 = icmp eq i32 %v2_100110ad, 0
  store i1 %v1_100110b2, i1* %zf.global-to-local, align 1
  store i32 1152, i32* %ecx.global-to-local, align 4
  %v0_100110f3 = load %_STARTUPINFOA*, %_STARTUPINFOA** @global_var_1001bae0.190, align 4
  %v1_100110f3 = ptrtoint %_STARTUPINFOA* %v0_100110f3 to i32
  br i1 %v1_100110b2, label %dec_label_pc_100110f3, label %dec_label_pc_100110b7

dec_label_pc_100110b7:                            ; preds = %dec_label_pc_100110a8
  %v2_100110b7 = add i32 %v1_100110f3, 32
  %v13_100110b7 = inttoptr i32 %v2_100110b7 to %_STARTUPINFOA*
  store %_STARTUPINFOA* %v13_100110b7, %_STARTUPINFOA** @global_var_1001bae0.190, align 32
  %v1_100110be = load i32, i32* %esi.global-to-local, align 4
  %v2_100110be = inttoptr i32 %v1_100110be to i32*
  store i32 %v2_100110ad, i32* %v2_100110be, align 4
  %v0_100110c0 = load i32, i32* %eax.global-to-local, align 4
  %v1_100110c0 = add i32 %v0_100110c0, 1152
  store i32 %v1_100110c0, i32* %ecx.global-to-local, align 4
  %v7_100110c67 = icmp ult i32 %v0_100110c0, -1152
  store i1 false, i1* %zf.global-to-local, align 1
  %v1_100110c814 = icmp eq i1 %v7_100110c67, false
  br i1 %v1_100110c814, label %dec_label_pc_100110b7.dec_label_pc_100110e6_crit_edge, label %dec_label_pc_100110ca

dec_label_pc_100110b7.dec_label_pc_100110e6_crit_edge: ; preds = %dec_label_pc_100110b7
  %v0_100110e6.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_100110e6

dec_label_pc_100110ca:                            ; preds = %dec_label_pc_100110b7, %dec_label_pc_100110ca
  %v4_100110ca = phi i32 [ %v1_100110db, %dec_label_pc_100110ca ], [ %v0_100110c0, %dec_label_pc_100110b7 ]
  %v5_100110ca = add i32 %v4_100110ca, 4
  %v6_100110ca = inttoptr i32 %v5_100110ca to i8*
  store i8 0, i8* %v6_100110ca, align 1
  %v3_100110ce = load i32, i32* %eax.global-to-local, align 4
  %v4_100110ce = inttoptr i32 %v3_100110ce to i32*
  store i32 -1, i32* %v4_100110ce, align 4
  %v4_100110d1 = load i32, i32* %eax.global-to-local, align 4
  %v5_100110d1 = add i32 %v4_100110d1, 8
  %v6_100110d1 = inttoptr i32 %v5_100110d1 to i32*
  store i32 0, i32* %v6_100110d1, align 4
  %v0_100110d5 = load i32, i32* %eax.global-to-local, align 4
  %v1_100110d5 = add i32 %v0_100110d5, 5
  %v2_100110d5 = inttoptr i32 %v1_100110d5 to i8*
  store i8 10, i8* %v2_100110d5, align 1
  %v0_100110d9 = load i32, i32* %esi.global-to-local, align 4
  %v1_100110d9 = inttoptr i32 %v0_100110d9 to i32*
  %v2_100110d9 = load i32, i32* %v1_100110d9, align 4
  %v0_100110db = load i32, i32* %eax.global-to-local, align 4
  %v1_100110db = add i32 %v0_100110db, 36
  store i32 %v1_100110db, i32* %eax.global-to-local, align 4
  %v1_100110de = add i32 %v2_100110d9, 1152
  store i32 %v1_100110de, i32* %ecx.global-to-local, align 4
  %v7_100110c6 = icmp ult i32 %v1_100110db, %v1_100110de
  %v12_100110c6 = icmp eq i32 %v1_100110db, %v1_100110de
  store i1 %v12_100110c6, i1* %zf.global-to-local, align 1
  %v1_100110c8 = icmp eq i1 %v7_100110c6, false
  br i1 %v1_100110c8, label %dec_label_pc_100110e6, label %dec_label_pc_100110ca

dec_label_pc_100110e6:                            ; preds = %dec_label_pc_100110ca, %dec_label_pc_100110b7.dec_label_pc_100110e6_crit_edge
  %v0_100110e6 = phi i32 [ %v0_100110e6.pre, %dec_label_pc_100110b7.dec_label_pc_100110e6_crit_edge ], [ %v0_100110d9, %dec_label_pc_100110ca ]
  %v1_100110e6 = add i32 %v0_100110e6, 4
  store i32 %v1_100110e6, i32* %esi.global-to-local, align 4
  %v0_100110e9 = load %_STARTUPINFOA*, %_STARTUPINFOA** @global_var_1001bae0.190, align 4
  %v1_100110e9 = ptrtoint %_STARTUPINFOA* %v0_100110e9 to i32
  %v2_100110e9 = load i32, i32* %edi.global-to-local, align 4
  %v4_100110e9 = inttoptr i32 %v2_100110e9 to %_STARTUPINFOA*
  %v15_100110e9 = icmp eq i32 %v1_100110e9, %v2_100110e9
  store i1 %v15_100110e9, i1* %zf.global-to-local, align 1
  %v7_100110ef = icmp slt %_STARTUPINFOA* %v0_100110e9, %v4_100110e9
  br i1 %v7_100110ef, label %dec_label_pc_100110a8, label %dec_label_pc_100110f9

dec_label_pc_100110f3:                            ; preds = %dec_label_pc_100110a8
  store i32 %v1_100110f3, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_100110f9

dec_label_pc_100110f9:                            ; preds = %dec_label_pc_100110e6, %dec_label_pc_1001109b, %dec_label_pc_100110f3
  %v0_100110fb = phi i32 [ %v1_100110f3, %dec_label_pc_100110f3 ], [ %v2_1001109b, %dec_label_pc_1001109b ], [ %v2_100110e9, %dec_label_pc_100110e6 ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v1_100110fb = icmp eq i32 %v0_100110fb, 0
  store i1 %v1_100110fb, i1* %zf.global-to-local, align 1
  %tmp48 = icmp slt i32 %v0_100110fb, 1
  br i1 %tmp48, label %dec_label_pc_1001114b, label %dec_label_pc_100110ff

dec_label_pc_100110ff:                            ; preds = %dec_label_pc_100110f9, %dec_label_pc_10011141
  %v0_1001111e33 = phi i32 [ %v1_10011145, %dec_label_pc_10011141 ], [ 0, %dec_label_pc_100110f9 ]
  %v4_10011109 = phi i32 [ %v4_10011141, %dec_label_pc_10011141 ], [ %v2_1001108a, %dec_label_pc_100110f9 ]
  store i32 %v4_10011109, i32* %eax.global-to-local, align 4
  %v1_10011102 = inttoptr i32 %v4_10011109 to i32*
  %v2_10011102 = load i32, i32* %v1_10011102, align 4
  store i32 %v2_10011102, i32* %ecx.global-to-local, align 4
  %v10_10011104 = icmp eq i32 %v2_10011102, -1
  store i1 %v10_10011104, i1* %zf.global-to-local, align 1
  br i1 %v10_10011104, label %dec_label_pc_10011141, label %dec_label_pc_10011109

dec_label_pc_10011109:                            ; preds = %dec_label_pc_100110ff
  %v0_10011109 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10011109 = inttoptr i32 %v0_10011109 to i8*
  %v2_10011109 = load i8, i8* %v1_10011109, align 1
  %v3_10011109 = zext i8 %v2_10011109 to i32
  %v5_10011109 = and i32 %v4_10011109, -256
  %v6_10011109 = or i32 %v3_10011109, %v5_10011109
  store i32 %v6_10011109, i32* %eax.global-to-local, align 4
  %v2_1001110b = and i8 %v2_10011109, 1
  %v3_1001110b = icmp eq i8 %v2_1001110b, 0
  store i1 %v3_1001110b, i1* %zf.global-to-local, align 1
  br i1 %v3_1001110b, label %dec_label_pc_10011141, label %dec_label_pc_1001110f

dec_label_pc_1001110f:                            ; preds = %dec_label_pc_10011109
  %v2_1001110f = and i32 %v3_10011109, 8
  %v3_1001110f = icmp eq i32 %v2_1001110f, 0
  store i1 %v3_1001110f, i1* %zf.global-to-local, align 1
  %v1_10011111 = icmp eq i1 %v3_1001110f, false
  br i1 %v1_10011111, label %dec_label_pc_1001111e, label %dec_label_pc_10011113

dec_label_pc_10011113:                            ; preds = %dec_label_pc_1001110f
  %v5_10011113 = inttoptr i32 %v2_10011102 to %_STARTUPINFOA*
  %tmp49 = getelementptr inbounds %_STARTUPINFOA, %_STARTUPINFOA* %v5_10011113, i32 0, i32 0
  %v5_10011114 = call i32 @GetFileType(i32* %tmp49)
  store i32 %v5_10011114, i32* %eax.global-to-local, align 4
  %v1_1001111a = icmp eq i32 %v5_10011114, 0
  store i1 %v1_1001111a, i1* %zf.global-to-local, align 1
  br i1 %v1_1001111a, label %dec_label_pc_10011141, label %dec_label_pc_10011113.dec_label_pc_1001111e_crit_edge

dec_label_pc_10011113.dec_label_pc_1001111e_crit_edge: ; preds = %dec_label_pc_10011113
  %v0_1001111e.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1001111e

dec_label_pc_1001111e:                            ; preds = %dec_label_pc_10011113.dec_label_pc_1001111e_crit_edge, %dec_label_pc_1001110f
  %v0_1001111e = phi i32 [ %v0_1001111e.pre, %dec_label_pc_10011113.dec_label_pc_1001111e_crit_edge ], [ %v0_1001111e33, %dec_label_pc_1001110f ]
  %v2_10011122 = sdiv i32 %v0_1001111e, 32
  store i32 %v2_10011122, i32* %ecx.global-to-local, align 4
  %v1_10011125 = and i32 %v0_1001111e, 31
  %v2_10011125 = icmp eq i32 %v1_10011125, 0
  store i1 %v2_10011125, i1* %zf.global-to-local, align 1
  store i32 %v1_10011125, i32* %eax.global-to-local, align 4
  %v1_10011128 = mul nsw i32 %v2_10011122, 4
  %v2_10011128 = add i32 %v1_10011128, ptrtoint (i32* @global_var_1001b9e0.189 to i32)
  %v3_10011128 = inttoptr i32 %v2_10011128 to i32*
  %v4_10011128 = load i32, i32* %v3_10011128, align 4
  %v2_10011132 = mul nuw nsw i32 %v1_10011125, 36
  %v3_10011132 = add i32 %v4_10011128, %v2_10011132
  store i32 %v3_10011132, i32* %eax.global-to-local, align 4
  store i32 %v4_10011109, i32* %ecx.global-to-local, align 4
  %v2_10011138 = load i32, i32* %v1_10011102, align 4
  store i32 %v2_10011138, i32* %ecx.global-to-local, align 4
  %v2_1001113a = inttoptr i32 %v3_10011132 to i32*
  store i32 %v2_10011138, i32* %v2_1001113a, align 4
  %v0_1001113c = load i32, i32* %ebx.global-to-local, align 4
  %v1_1001113c = inttoptr i32 %v0_1001113c to i8*
  %v2_1001113c = load i8, i8* %v1_1001113c, align 1
  %v3_1001113c = zext i8 %v2_1001113c to i32
  %v4_1001113c = load i32, i32* %ecx.global-to-local, align 4
  %v5_1001113c = and i32 %v4_1001113c, -256
  %v6_1001113c = or i32 %v5_1001113c, %v3_1001113c
  store i32 %v6_1001113c, i32* %ecx.global-to-local, align 4
  %v2_1001113e = load i32, i32* %eax.global-to-local, align 4
  %v3_1001113e = add i32 %v2_1001113e, 4
  %v4_1001113e = inttoptr i32 %v3_1001113e to i8*
  store i8 %v2_1001113c, i8* %v4_1001113e, align 1
  br label %dec_label_pc_10011141

dec_label_pc_10011141:                            ; preds = %dec_label_pc_10011113, %dec_label_pc_10011109, %dec_label_pc_100110ff, %dec_label_pc_1001111e
  %v4_10011141 = add i32 %v4_10011109, 4
  %v0_10011145 = load i32, i32* %esi.global-to-local, align 4
  %v1_10011145 = add i32 %v0_10011145, 1
  store i32 %v1_10011145, i32* %esi.global-to-local, align 4
  %v0_10011146 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10011146 = add i32 %v0_10011146, 1
  store i32 %v1_10011146, i32* %ebx.global-to-local, align 4
  %v1_10011147 = load i32, i32* %edi.global-to-local, align 4
  %v2_10011147 = inttoptr i32 %v1_10011145 to %_STARTUPINFOA*
  %v3_10011147 = inttoptr i32 %v1_10011147 to %_STARTUPINFOA*
  %v14_10011147 = icmp eq i32 %v1_10011145, %v1_10011147
  store i1 %v14_10011147, i1* %zf.global-to-local, align 1
  %v7_10011149 = icmp slt %_STARTUPINFOA* %v2_10011147, %v3_10011147
  br i1 %v7_10011149, label %dec_label_pc_100110ff, label %dec_label_pc_1001114b

dec_label_pc_1001114b:                            ; preds = %dec_label_pc_10011141, %dec_label_pc_100110f9, %dec_label_pc_1001107a, %dec_label_pc_10011065
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1001114d

dec_label_pc_1001114d:                            ; preds = %dec_label_pc_100111b0, %dec_label_pc_1001114b
  %v0_1001115f = phi i32 [ %v1_100111b0, %dec_label_pc_100111b0 ], [ 0, %dec_label_pc_1001114b ]
  %v0_1001114d = load i32, i32* @global_var_1001b9e0.189, align 32
  store i32 %v0_1001114d, i32* @ecx, align 4
  %v3_10011153 = mul i32 %v0_1001115f, 9
  store i32 %v3_10011153, i32* %eax.global-to-local, align 4
  %v2_10011156 = mul i32 %v0_1001115f, 36
  %v3_10011156 = add i32 %v2_10011156, %v0_1001114d
  %v4_10011156 = inttoptr i32 %v3_10011156 to i32*
  %v5_10011156 = load i32, i32* %v4_10011156, align 4
  %v15_10011156 = icmp eq i32 %v5_10011156, -1
  store i1 %v15_10011156, i1* %zf.global-to-local, align 1
  store i32 %v3_10011156, i32* %esi.global-to-local, align 4
  %v1_1001115d = icmp eq i1 %v15_10011156, false
  br i1 %v1_1001115d, label %dec_label_pc_100111ac, label %dec_label_pc_1001115f

dec_label_pc_1001115f:                            ; preds = %dec_label_pc_1001114d
  %v1_1001115f = icmp eq i32 %v0_1001115f, 0
  store i1 %v1_1001115f, i1* %zf.global-to-local, align 1
  %v1_10011161 = add i32 %v3_10011156, 4
  %v2_10011161 = inttoptr i32 %v1_10011161 to i8*
  store i8 -127, i8* %v2_10011161, align 1
  %v0_10011165 = load i1, i1* %zf.global-to-local, align 1
  %v1_10011165 = icmp eq i1 %v0_10011165, false
  br i1 %v1_10011165, label %dec_label_pc_1001116c, label %dec_label_pc_10011167

dec_label_pc_10011167:                            ; preds = %dec_label_pc_1001115f
  br label %dec_label_pc_10011176

dec_label_pc_1001116c:                            ; preds = %dec_label_pc_1001115f
  %v0_1001116c = load i32, i32* %ebx.global-to-local, align 4
  %v5_1001116f = icmp ne i32 %v0_1001116c, 1
  %v1_10011173 = select i1 %v5_1001116f, i32 -10, i32 -11
  store i1 false, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_10011176

dec_label_pc_10011176:                            ; preds = %dec_label_pc_10011167, %dec_label_pc_1001116c
  %storemerge = phi i32 [ -10, %dec_label_pc_10011167 ], [ %v1_10011173, %dec_label_pc_1001116c ]
  %v0_10011176 = phi i32 [ -10, %dec_label_pc_10011167 ], [ %v1_10011173, %dec_label_pc_1001116c ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v4_10011177 = call i32* @GetStdHandle(i32 %v0_10011176)
  %v5_10011177 = ptrtoint i32* %v4_10011177 to i32
  store i32 %v5_10011177, i32* %eax.global-to-local, align 4
  store i32 %v5_10011177, i32* %edi.global-to-local, align 4
  %v10_1001117f = icmp eq i32* %v4_10011177, inttoptr (i32 -1 to i32*)
  store i1 %v10_1001117f, i1* %zf.global-to-local, align 1
  br i1 %v10_1001117f, label %dec_label_pc_1001119b, label %dec_label_pc_10011184

dec_label_pc_10011184:                            ; preds = %dec_label_pc_10011176
  %v5_10011185 = call i32 @GetFileType(i32* %v4_10011177)
  store i32 %v5_10011185, i32* %eax.global-to-local, align 4
  %v1_1001118b = icmp eq i32 %v5_10011185, 0
  store i1 %v1_1001118b, i1* %zf.global-to-local, align 1
  br i1 %v1_1001118b, label %dec_label_pc_1001119b, label %dec_label_pc_1001118f

dec_label_pc_1001118f:                            ; preds = %dec_label_pc_10011184
  %v1_1001118f = and i32 %v5_10011185, 255
  store i32 %v1_1001118f, i32* %eax.global-to-local, align 4
  %v0_10011194 = load i32, i32* %edi.global-to-local, align 4
  %v1_10011194 = load i32, i32* %esi.global-to-local, align 4
  %v2_10011194 = inttoptr i32 %v1_10011194 to i32*
  store i32 %v0_10011194, i32* %v2_10011194, align 4
  %v0_10011196 = load i32, i32* %eax.global-to-local, align 4
  %v9_10011196 = icmp eq i32 %v0_10011196, 2
  store i1 %v9_10011196, i1* %zf.global-to-local, align 1
  %v1_10011199 = icmp eq i1 %v9_10011196, false
  br i1 %v1_10011199, label %dec_label_pc_100111a1, label %dec_label_pc_1001119b

dec_label_pc_1001119b:                            ; preds = %dec_label_pc_1001118f, %dec_label_pc_10011184, %dec_label_pc_10011176
  %v0_1001119b = load i32, i32* %esi.global-to-local, align 4
  %v1_1001119b = add i32 %v0_1001119b, 4
  %v2_1001119b = inttoptr i32 %v1_1001119b to i8*
  %v3_1001119b = load i8, i8* %v2_1001119b, align 1
  %v4_1001119b = or i8 %v3_1001119b, 64
  store i1 false, i1* %zf.global-to-local, align 1
  store i8 %v4_1001119b, i8* %v2_1001119b, align 1
  br label %dec_label_pc_100111b0

dec_label_pc_100111a1:                            ; preds = %dec_label_pc_1001118f
  %v9_100111a1 = icmp eq i32 %v0_10011196, 3
  store i1 %v9_100111a1, i1* %zf.global-to-local, align 1
  %v1_100111a4 = icmp eq i1 %v9_100111a1, false
  br i1 %v1_100111a4, label %dec_label_pc_100111b0, label %dec_label_pc_100111a6

dec_label_pc_100111a6:                            ; preds = %dec_label_pc_100111a1
  %v0_100111a6 = load i32, i32* %esi.global-to-local, align 4
  %v1_100111a6 = add i32 %v0_100111a6, 4
  %v2_100111a6 = inttoptr i32 %v1_100111a6 to i8*
  %v3_100111a6 = load i8, i8* %v2_100111a6, align 1
  %v4_100111a6 = or i8 %v3_100111a6, 8
  store i1 false, i1* %zf.global-to-local, align 1
  store i8 %v4_100111a6, i8* %v2_100111a6, align 1
  br label %dec_label_pc_100111b0

dec_label_pc_100111ac:                            ; preds = %dec_label_pc_1001114d
  %v1_100111ac = add i32 %v3_10011156, 4
  %v2_100111ac = inttoptr i32 %v1_100111ac to i8*
  %v3_100111ac = load i8, i8* %v2_100111ac, align 1
  %v4_100111ac = or i8 %v3_100111ac, -128
  store i1 false, i1* %zf.global-to-local, align 1
  store i8 %v4_100111ac, i8* %v2_100111ac, align 1
  br label %dec_label_pc_100111b0

dec_label_pc_100111b0:                            ; preds = %dec_label_pc_100111a1, %dec_label_pc_100111a6, %dec_label_pc_1001119b, %dec_label_pc_100111ac
  %v0_100111b0 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100111b0 = add i32 %v0_100111b0, 1
  store i32 %v1_100111b0, i32* %ebx.global-to-local, align 4
  %v10_100111b1 = icmp eq i32 %v0_100111b0, 2
  store i1 %v10_100111b1, i1* %zf.global-to-local, align 1
  %v5_100111b4 = icmp slt i32 %v1_100111b0, 3
  br i1 %v5_100111b4, label %dec_label_pc_1001114d, label %dec_label_pc_100111b6

dec_label_pc_100111b6:                            ; preds = %dec_label_pc_100111b0
  %v0_100111b63 = load i32, i32* bitcast (%_STARTUPINFOA** @global_var_1001bae0.190 to i32*), align 4
  %v4_100111bc = call i32 @SetHandleCount(i32 %v0_100111b63)
  store i32 %v4_100111bc, i32* %eax.global-to-local, align 4
  %v2_100111c2 = load i32, i32* %stack_var_-88, align 4
  store i32 %v2_100111c2, i32* @edi, align 4
  %v2_100111c5 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100111c5, i32* @ebp, align 4
  ret i32 %v4_100111bc

; uselistorder directives
  uselistorder i32 %v1_100111b0, { 1, 2, 0 }
  uselistorder i1 %v9_100111a1, { 1, 0 }
  uselistorder i1 %v9_10011196, { 1, 0 }
  uselistorder i32 %v5_10011177, { 1, 0 }
  uselistorder i32* %v4_10011177, { 1, 0, 2 }
  uselistorder i32 %v1_10011173, { 1, 0 }
  uselistorder i1 %v15_10011156, { 1, 0 }
  uselistorder i32 %v3_10011156, { 1, 2, 0, 3 }
  uselistorder i32 %v0_1001115f, { 0, 2, 1 }
  uselistorder i32 %v1_10011145, { 0, 1, 3, 2 }
  uselistorder i32 %v2_10011122, { 1, 0 }
  uselistorder i32 %v0_1001111e, { 1, 0 }
  uselistorder i1 %v3_1001110f, { 1, 0 }
  uselistorder i32 %v3_10011109, { 1, 0 }
  uselistorder i1 %v10_10011104, { 1, 0 }
  uselistorder i32 %v2_10011102, { 1, 0, 2 }
  uselistorder i32 %v4_10011109, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_100110fb, { 1, 0 }
  uselistorder i32 %v2_100110e9, { 1, 0, 2 }
  uselistorder i32 %v1_100110de, { 0, 2, 1 }
  uselistorder i32 %v1_100110db, { 0, 2, 3, 1 }
  uselistorder i32 %v2_1001109b, { 1, 0, 2 }
  uselistorder i32 %v2_10011085, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_1001105e, { 0, 2, 1 }
  uselistorder i32 %v1_1001105b, { 0, 2, 3, 1 }
  uselistorder i32 %v0_1001102d, { 0, 3, 2, 1 }
  uselistorder i32 %tmp37, { 1, 0, 3, 2 }
  uselistorder i1* %zf.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 24, 25, 26, 27, 28, 29, 1, 30, 31 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 1, 3, 4, 6, 5, 7, 8, 9, 11, 10, 12, 13, 15, 16, 17, 18, 14, 19 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %ecx.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 0, 7, 9, 10 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 1, 25, 26 }
  uselistorder i8 -128, { 1, 0 }
  uselistorder i8 64, { 1, 0 }
  uselistorder i32 -10, { 1, 0, 2 }
  uselistorder i32 (i32*)* @GetFileType, { 1, 0 }
  uselistorder %_STARTUPINFOA** @global_var_1001bae0.190, { 0, 4, 3, 5, 2, 1 }
  uselistorder label %dec_label_pc_100111b0, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_10011176, { 1, 0 }
  uselistorder label %dec_label_pc_10011141, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_100110ff, { 1, 0 }
  uselistorder label %dec_label_pc_100110f9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_100110ca, { 1, 0 }
  uselistorder label %dec_label_pc_1001109b, { 1, 0 }
  uselistorder label %dec_label_pc_10011047, { 1, 0 }
  uselistorder label %dec_label_pc_1001102d, { 1, 0 }
}

define i32 @function_100111c7() local_unnamed_addr {
dec_label_pc_100111c7:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca %_RTL_CRITICAL_SECTION*, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_100111c9 = load i32, i32* @edi, align 4
  store i32 %v0_100111c9, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1001b9e0.189 to i32), i32* %esi.global-to-local, align 4
  br label %dec_label_pc_100111cf

dec_label_pc_100111cf:                            ; preds = %dec_label_pc_1001120c, %dec_label_pc_100111c7
  %v0_100111cf = phi i32 [ %v1_1001120c, %dec_label_pc_1001120c ], [ ptrtoint (i32* @global_var_1001b9e0.189 to i32), %dec_label_pc_100111c7 ]
  %v1_100111cf = inttoptr i32 %v0_100111cf to i32*
  %v2_100111cf = load i32, i32* %v1_100111cf, align 4
  store i32 %v2_100111cf, i32* %eax.global-to-local, align 4
  %v1_100111d1 = icmp eq i32 %v2_100111cf, 0
  br i1 %v1_100111d1, label %dec_label_pc_1001120c, label %dec_label_pc_100111d5

dec_label_pc_100111d5:                            ; preds = %dec_label_pc_100111cf
  store i32 %v2_100111cf, i32* %edi.global-to-local, align 4
  %v1_100111d7 = add i32 %v2_100111cf, 1152
  store i32 %v1_100111d7, i32* %eax.global-to-local, align 4
  %v7_100111dc = icmp ult i32 %v2_100111cf, -1152
  %v1_100111de = icmp eq i1 %v7_100111dc, false
  br i1 %v1_100111de, label %dec_label_pc_10011201, label %dec_label_pc_100111e0

dec_label_pc_100111e0:                            ; preds = %dec_label_pc_100111d5
  %v1_100111e0 = add i32 %v2_100111cf, 12
  store i32 %v1_100111e0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_100111e3

dec_label_pc_100111e3:                            ; preds = %dec_label_pc_100111f0, %dec_label_pc_100111e0
  %v0_100111f26 = phi i32 [ %v1_100111f2, %dec_label_pc_100111f0 ], [ %v2_100111cf, %dec_label_pc_100111e0 ]
  %v0_100111f04 = phi i32 [ %v0_100111f0, %dec_label_pc_100111f0 ], [ %v0_100111cf, %dec_label_pc_100111e0 ]
  %v0_100111e9 = phi i32 [ %v1_100111fa, %dec_label_pc_100111f0 ], [ %v1_100111e0, %dec_label_pc_100111e0 ]
  %v1_100111e3 = add i32 %v0_100111e9, -4
  %v2_100111e3 = inttoptr i32 %v1_100111e3 to i32*
  %v3_100111e3 = load i32, i32* %v2_100111e3, align 4
  %v4_100111e3 = icmp eq i32 %v3_100111e3, 0
  br i1 %v4_100111e3, label %dec_label_pc_100111f0, label %dec_label_pc_100111e9

dec_label_pc_100111e9:                            ; preds = %dec_label_pc_100111e3
  %v5_100111e9 = inttoptr i32 %v0_100111e9 to %_RTL_CRITICAL_SECTION*
  store %_RTL_CRITICAL_SECTION* %v5_100111e9, %_RTL_CRITICAL_SECTION** %stack_var_-16, align 4
  call void @DeleteCriticalSection(%_RTL_CRITICAL_SECTION* %v5_100111e9)
  store i32 ptrtoint (i32* @0 to i32), i32* %eax.global-to-local, align 4
  %v0_100111f0.pre = load i32, i32* %esi.global-to-local, align 4
  %v0_100111f2.pre = load i32, i32* %edi.global-to-local, align 4
  %v0_100111fa.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_100111f0

dec_label_pc_100111f0:                            ; preds = %dec_label_pc_100111e3, %dec_label_pc_100111e9
  %v0_100111fa = phi i32 [ %v0_100111e9, %dec_label_pc_100111e3 ], [ %v0_100111fa.pre, %dec_label_pc_100111e9 ]
  %v0_100111f2 = phi i32 [ %v0_100111f26, %dec_label_pc_100111e3 ], [ %v0_100111f2.pre, %dec_label_pc_100111e9 ]
  %v0_100111f0 = phi i32 [ %v0_100111f04, %dec_label_pc_100111e3 ], [ %v0_100111f0.pre, %dec_label_pc_100111e9 ]
  %v1_100111f0 = inttoptr i32 %v0_100111f0 to i32*
  %v2_100111f0 = load i32, i32* %v1_100111f0, align 4
  %v1_100111f2 = add i32 %v0_100111f2, 36
  store i32 %v1_100111f2, i32* %edi.global-to-local, align 4
  %v1_100111f5 = add i32 %v2_100111f0, 1152
  store i32 %v1_100111f5, i32* %eax.global-to-local, align 4
  %v1_100111fa = add i32 %v0_100111fa, 36
  store i32 %v1_100111fa, i32* %ebx.global-to-local, align 4
  %v7_100111fd = icmp ult i32 %v1_100111f2, %v1_100111f5
  br i1 %v7_100111fd, label %dec_label_pc_100111e3, label %dec_label_pc_10011201

dec_label_pc_10011201:                            ; preds = %dec_label_pc_100111f0, %dec_label_pc_100111d5
  %v0_10011201 = phi i32 [ %v0_100111cf, %dec_label_pc_100111d5 ], [ %v0_100111f0, %dec_label_pc_100111f0 ]
  %v1_10011201 = inttoptr i32 %v0_10011201 to i32*
  %v2_10011201 = load i32, i32* %v1_10011201, align 4
  %v7_10011201 = inttoptr i32 %v2_10011201 to %_RTL_CRITICAL_SECTION*
  store %_RTL_CRITICAL_SECTION* %v7_10011201, %_RTL_CRITICAL_SECTION** %stack_var_-16, align 4
  %v2_10011203 = call i32 @function_1000d97b(i32 %v2_10011201)
  store i32 %v2_10011203, i32* %eax.global-to-local, align 4
  %v3_10011208 = load i32, i32* %esi.global-to-local, align 4
  %v4_10011208 = inttoptr i32 %v3_10011208 to i32*
  store i32 0, i32* %v4_10011208, align 4
  %v2_1001120b = load %_RTL_CRITICAL_SECTION*, %_RTL_CRITICAL_SECTION** %stack_var_-16, align 4
  %v3_1001120b = ptrtoint %_RTL_CRITICAL_SECTION* %v2_1001120b to i32
  store i32 %v3_1001120b, i32* @ecx, align 4
  %v0_1001120c.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1001120c

dec_label_pc_1001120c:                            ; preds = %dec_label_pc_100111cf, %dec_label_pc_10011201
  %v0_1001120c = phi i32 [ %v0_100111cf, %dec_label_pc_100111cf ], [ %v0_1001120c.pre, %dec_label_pc_10011201 ]
  %v1_1001120c = add i32 %v0_1001120c, 4
  store i32 %v1_1001120c, i32* %esi.global-to-local, align 4
  %v5_10011215 = icmp slt i32 %v1_1001120c, 268548832
  br i1 %v5_10011215, label %dec_label_pc_100111cf, label %dec_label_pc_10011217

dec_label_pc_10011217:                            ; preds = %dec_label_pc_1001120c
  %v2_10011217 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10011217, i32* @edi, align 4
  %v0_1001121a = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1001121a

; uselistorder directives
  uselistorder i32 %v1_1001120c, { 1, 2, 0 }
  uselistorder i32 %v1_100111fa, { 1, 0 }
  uselistorder i32 %v1_100111f2, { 0, 2, 1 }
  uselistorder i32 %v2_100111cf, { 1, 2, 0, 4, 3, 5, 6 }
  uselistorder i32 %v0_100111cf, { 1, 0, 2, 3 }
  uselistorder %_RTL_CRITICAL_SECTION** %stack_var_-16, { 2, 1, 0 }
  uselistorder i32* %esi.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 36, { 11, 12, 0, 1, 13, 14, 15, 3, 2, 4, 5, 6, 7, 10, 8, 9 }
  uselistorder i32* @0, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @0 to i32), { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder void (%_RTL_CRITICAL_SECTION*)* @DeleteCriticalSection, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 1152, { 4, 5, 6, 7, 0, 2, 8, 9, 1, 3 }
  uselistorder label %dec_label_pc_1001120c, { 1, 0 }
  uselistorder label %dec_label_pc_100111f0, { 1, 0 }
}

define i32 @function_1001121b() local_unnamed_addr {
dec_label_pc_1001121b:
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i8*, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_1001121b = load i32, i32* @ebx, align 4
  store i32 0, i32* @ebx, align 4
  %v0_1001121e = load i32, i32* @global_var_1001bae8.192, align 8
  %v12_1001121e = icmp eq i32 %v0_1001121e, 0
  %v0_10011224 = load i32, i32* @esi, align 4
  %v0_10011225 = load i32, i32* @edi, align 4
  store i32 %v0_10011225, i32* %stack_var_-12, align 4
  %v1_10011226 = icmp eq i1 %v12_1001121e, false
  br i1 %v1_10011226, label %dec_label_pc_1001121b.dec_label_pc_1001122d_crit_edge, label %dec_label_pc_10011228

dec_label_pc_1001121b.dec_label_pc_1001122d_crit_edge: ; preds = %dec_label_pc_1001121b
  br label %dec_label_pc_1001122d

dec_label_pc_10011228:                            ; preds = %dec_label_pc_1001121b
  %v3_10011228 = call i32 @function_10013ca4(i32 %v0_10011225, i32 %v0_10011224, i32 %v0_1001121b)
  br label %dec_label_pc_1001122d

dec_label_pc_1001122d:                            ; preds = %dec_label_pc_1001121b.dec_label_pc_1001122d_crit_edge, %dec_label_pc_10011228
  %v0_1001122d = load i8*, i8** @global_var_1001b424.131, align 4
  %v1_1001122d = ptrtoint i8* %v0_1001122d to i32
  store i32 %v1_1001122d, i32* %esi.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10011235

dec_label_pc_10011235:                            ; preds = %dec_label_pc_10011240, %dec_label_pc_1001122d
  %v0_10011240 = phi i32 [ %v3_10011247, %dec_label_pc_10011240 ], [ %v1_1001122d, %dec_label_pc_1001122d ]
  %v1_10011235 = inttoptr i32 %v0_10011240 to i8*
  %v2_10011235 = load i8, i8* %v1_10011235, align 1
  %v2_10011237 = load i32, i32* @ebx, align 4
  %v3_10011237 = trunc i32 %v2_10011237 to i8
  %v15_10011237 = icmp eq i8 %v2_10011235, %v3_10011237
  br i1 %v15_10011237, label %dec_label_pc_1001124d, label %dec_label_pc_1001123b

dec_label_pc_1001123b:                            ; preds = %dec_label_pc_10011235
  %v10_1001123b = icmp eq i8 %v2_10011235, 61
  br i1 %v10_1001123b, label %dec_label_pc_10011240, label %dec_label_pc_1001123f

dec_label_pc_1001123f:                            ; preds = %dec_label_pc_1001123b
  %v0_1001123f = load i32, i32* %edi.global-to-local, align 4
  %v1_1001123f = add i32 %v0_1001123f, 1
  store i32 %v1_1001123f, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10011240

dec_label_pc_10011240:                            ; preds = %dec_label_pc_1001123b, %dec_label_pc_1001123f
  store i8* %v1_10011235, i8** %stack_var_-16, align 4
  %v3_10011241 = call i32 @function_1000d900(i8* %v1_10011235)
  %v0_10011247 = load i32, i32* %esi.global-to-local, align 4
  %v2_10011247 = add i32 %v3_10011241, 1
  %v3_10011247 = add i32 %v2_10011247, %v0_10011247
  store i32 %v3_10011247, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10011235

dec_label_pc_1001124d:                            ; preds = %dec_label_pc_10011235
  %v0_1001124d = load i32, i32* %edi.global-to-local, align 4
  %v1_1001124d = mul i32 %v0_1001124d, 4
  %v2_1001124d = add i32 %v1_1001124d, 4
  %v5_10011254 = inttoptr i32 %v2_1001124d to i8*
  store i8* %v5_10011254, i8** %stack_var_-16, align 4
  %v2_10011255 = call i32 @function_1000da64(i32 %v2_1001124d)
  store i32 %v2_10011255, i32* %esi.global-to-local, align 4
  %v1_1001125d = load i32, i32* @ebx, align 4
  %v12_1001125d = icmp eq i32 %v2_10011255, %v1_1001125d
  store i32 %v2_10011255, i32* @global_var_1001b4c0.193, align 64
  %v1_10011265 = icmp eq i1 %v12_1001125d, false
  br i1 %v1_10011265, label %dec_label_pc_1001126f, label %dec_label_pc_10011267

dec_label_pc_10011267:                            ; preds = %dec_label_pc_1001124d
  store i8* inttoptr (i32 9 to i8*), i8** %stack_var_-16, align 4
  %v2_10011269 = call i32 @__amsg_exit(i32 9)
  %v3_10011275.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1001126f

dec_label_pc_1001126f:                            ; preds = %dec_label_pc_1001124d, %dec_label_pc_10011267
  %v3_10011275 = phi i32 [ %v1_1001125d, %dec_label_pc_1001124d ], [ %v3_10011275.pre, %dec_label_pc_10011267 ]
  %v0_1001126f = load i8*, i8** @global_var_1001b424.131, align 4
  %v1_1001126f = ptrtoint i8* %v0_1001126f to i32
  store i32 %v1_1001126f, i32* @edi, align 4
  %v2_10011275 = load i8, i8* %v0_1001126f, align 1
  %v4_10011275 = trunc i32 %v3_10011275 to i8
  %v15_10011275 = icmp eq i8 %v2_10011275, %v4_10011275
  br i1 %v15_10011275, label %dec_label_pc_100112b2, label %dec_label_pc_10011279

dec_label_pc_10011279:                            ; preds = %dec_label_pc_1001126f
  %v0_10011279 = load i32, i32* @ebp, align 4
  %v5_10011279 = inttoptr i32 %v0_10011279 to i8*
  store i8* %v5_10011279, i8** %stack_var_-16, align 4
  br label %dec_label_pc_1001127a

dec_label_pc_1001127a:                            ; preds = %dec_label_pc_100112ab, %dec_label_pc_10011279
  %v0_1001127a = phi i32 [ %v2_100112ab, %dec_label_pc_100112ab ], [ %v1_1001126f, %dec_label_pc_10011279 ]
  %v5_1001127a = inttoptr i32 %v0_1001127a to i8*
  %v3_1001127b = call i32 @function_1000d900(i8* %v5_1001127a)
  %v1_10011283 = add i32 %v3_1001127b, 1
  store i32 %v1_10011283, i32* %ebp.global-to-local, align 4
  %v0_10011284 = load i32, i32* @edi, align 4
  %v1_10011284 = inttoptr i32 %v0_10011284 to i8*
  %v2_10011284 = load i8, i8* %v1_10011284, align 1
  %v11_10011284 = icmp eq i8 %v2_10011284, 61
  br i1 %v11_10011284, label %dec_label_pc_100112ab, label %dec_label_pc_10011289

dec_label_pc_10011289:                            ; preds = %dec_label_pc_1001127a
  %v2_1001128a = call i32 @function_1000da64(i32 %v1_10011283)
  %v1_1001128f = load i32, i32* @ebx, align 4
  %v12_1001128f = icmp eq i32 %v2_1001128a, %v1_1001128f
  %v1_10011292 = load i32, i32* %esi.global-to-local, align 4
  %v2_10011292 = inttoptr i32 %v1_10011292 to i32*
  store i32 %v2_1001128a, i32* %v2_10011292, align 4
  %v1_10011294 = icmp eq i1 %v12_1001128f, false
  br i1 %v1_10011294, label %dec_label_pc_1001129e, label %dec_label_pc_10011296

dec_label_pc_10011296:                            ; preds = %dec_label_pc_10011289
  %v2_10011298 = call i32 @__amsg_exit(i32 9)
  br label %dec_label_pc_1001129e

dec_label_pc_1001129e:                            ; preds = %dec_label_pc_10011289, %dec_label_pc_10011296
  %v0_1001129f = load i32, i32* %esi.global-to-local, align 4
  %v1_1001129f = inttoptr i32 %v0_1001129f to i32*
  %v2_1001129f = load i32, i32* %v1_1001129f, align 4
  %v1_100112a1 = call i32 @function_1000d570(i32 %v2_1001129f)
  %v1_100112a7 = add i32 %v0_1001129f, 4
  store i32 %v1_100112a7, i32* %esi.global-to-local, align 4
  %v0_100112ab.pre = load i32, i32* @edi, align 4
  %v1_100112ab.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_100112ab

dec_label_pc_100112ab:                            ; preds = %dec_label_pc_1001127a, %dec_label_pc_1001129e
  %v1_100112ab = phi i32 [ %v1_10011283, %dec_label_pc_1001127a ], [ %v1_100112ab.pre, %dec_label_pc_1001129e ]
  %v0_100112ab = phi i32 [ %v0_10011284, %dec_label_pc_1001127a ], [ %v0_100112ab.pre, %dec_label_pc_1001129e ]
  %v2_100112ab = add i32 %v0_100112ab, %v1_100112ab
  store i32 %v2_100112ab, i32* @edi, align 4
  %v1_100112ad = inttoptr i32 %v2_100112ab to i8*
  %v2_100112ad = load i8, i8* %v1_100112ad, align 1
  %v3_100112ad = load i32, i32* @ebx, align 4
  %v4_100112ad = trunc i32 %v3_100112ad to i8
  %v15_100112ad = icmp eq i8 %v2_100112ad, %v4_100112ad
  %v1_100112af = icmp eq i1 %v15_100112ad, false
  br i1 %v1_100112af, label %dec_label_pc_1001127a, label %dec_label_pc_100112b1

dec_label_pc_100112b1:                            ; preds = %dec_label_pc_100112ab
  %v2_100112b1 = load i8*, i8** %stack_var_-16, align 4
  %v3_100112b1 = ptrtoint i8* %v2_100112b1 to i32
  store i32 %v3_100112b1, i32* @ebp, align 4
  %v0_100112b23.pre = load i32, i32* bitcast (i8** @global_var_1001b424.131 to i32*), align 4
  br label %dec_label_pc_100112b2

dec_label_pc_100112b2:                            ; preds = %dec_label_pc_1001126f, %dec_label_pc_100112b1
  %v0_100112b23 = phi i32 [ %v1_1001126f, %dec_label_pc_1001126f ], [ %v0_100112b23.pre, %dec_label_pc_100112b1 ]
  %tmp18 = bitcast i8** %stack_var_-16 to i32*
  store i32 %v0_100112b23, i32* %tmp18, align 4
  %v2_100112b8 = call i32 @function_1000d97b(i32 %v0_100112b23)
  store i32 %v0_100112b23, i32* @ecx, align 4
  %v0_100112be = load i32, i32* @ebx, align 4
  %v1_100112be = inttoptr i32 %v0_100112be to i8*
  store i8* %v1_100112be, i8** @global_var_1001b424.131, align 4
  %v1_100112c4 = load i32, i32* %esi.global-to-local, align 4
  %v2_100112c4 = inttoptr i32 %v1_100112c4 to i32*
  store i32 %v0_100112be, i32* %v2_100112c4, align 4
  %v2_100112c6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_100112c6, i32* @edi, align 4
  store i32 %v0_10011224, i32* @esi, align 4
  store i32 1, i32* @global_var_1001bae4.194, align 4
  store i32 %v0_1001121b, i32* @ebx, align 4
  ret i32 %v2_100112b8

; uselistorder directives
  uselistorder i32 %v0_100112b23, { 0, 2, 1 }
  uselistorder i32 %v2_100112ab, { 1, 2, 0 }
  uselistorder i32 %v2_1001128a, { 1, 0 }
  uselistorder i32 %v1_1001125d, { 1, 0 }
  uselistorder i32 %v2_10011255, { 1, 0, 2 }
  uselistorder i32 %v3_10011247, { 1, 0 }
  uselistorder i8* %v1_10011235, { 1, 0, 2 }
  uselistorder i8** %stack_var_-16, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32* %esi.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %edi.global-to-local, { 2, 0, 1, 3 }
  uselistorder i8** @global_var_1001b424.131, { 4, 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_100112b2, { 1, 0 }
  uselistorder label %dec_label_pc_100112ab, { 1, 0 }
  uselistorder label %dec_label_pc_1001129e, { 1, 0 }
  uselistorder label %dec_label_pc_1001126f, { 1, 0 }
  uselistorder label %dec_label_pc_10011240, { 1, 0 }
  uselistorder label %dec_label_pc_1001122d, { 1, 0 }
}

define i32 @function_100112d4() local_unnamed_addr {
dec_label_pc_100112d4:
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_100112d7 = load i32, i32* @ecx, align 4
  store i32 %v0_100112d7, i32* %stack_var_-8, align 4
  %v4_100112d7 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v0_100112d7, i32* %stack_var_-12, align 4
  %v4_100112d8 = ptrtoint i32* %stack_var_-12 to i32
  %v0_100112d9 = load i32, i32* @ebx, align 4
  store i32 0, i32* @ebx, align 4
  %v0_100112dc = load i32, i32* @global_var_1001bae8.192, align 8
  %v12_100112dc = icmp eq i32 %v0_100112dc, 0
  %v0_100112e2 = load i32, i32* @esi, align 4
  %v0_100112e3 = load i32, i32* @edi, align 4
  store i32 %v0_100112e3, i32* %stack_var_-24, align 4
  %v1_100112e4 = icmp eq i1 %v12_100112dc, false
  br i1 %v1_100112e4, label %dec_label_pc_100112eb, label %dec_label_pc_100112e6

dec_label_pc_100112e6:                            ; preds = %dec_label_pc_100112d4
  %v3_100112e6 = call i32 @function_10013ca4(i32 %v0_100112e3, i32 %v0_100112e2, i32 %v0_100112d9)
  %v0_100112f6.pre = load i32, i32* @ebx, align 4
  %phitmp = inttoptr i32 %v0_100112f6.pre to i32*
  br label %dec_label_pc_100112eb

dec_label_pc_100112eb:                            ; preds = %dec_label_pc_100112d4, %dec_label_pc_100112e6
  %v0_100112f6 = phi i32* [ null, %dec_label_pc_100112d4 ], [ %phitmp, %dec_label_pc_100112e6 ]
  store i32 ptrtoint (i8** @global_var_1001b4e4.195 to i32), i32* @esi, align 4
  %v8_100112f7 = call i32 @GetModuleFileNameA(i32* %v0_100112f6, i8* bitcast (i8** @global_var_1001b4e4.195 to i8*), i32 260)
  %v0_100112fd = load i8*, i8** @global_var_1001bb18.130, align 4
  %v1_100112fd = ptrtoint i8* %v0_100112fd to i32
  %v0_10011302 = load i32, i32* @esi, align 4
  %v1_10011302 = inttoptr i32 %v0_10011302 to i8*
  store i8* %v1_10011302, i8** @global_var_1001b4d0.196, align 16
  store i32 %v0_10011302, i32* @edi, align 4
  %v2_1001130a = load i8, i8* %v0_100112fd, align 1
  %v3_1001130a = load i32, i32* @ebx, align 4
  %v4_1001130a = trunc i32 %v3_1001130a to i8
  %v15_1001130a = icmp eq i8 %v2_1001130a, %v4_1001130a
  br i1 %v15_1001130a, label %dec_label_pc_10011310, label %dec_label_pc_1001130e

dec_label_pc_1001130e:                            ; preds = %dec_label_pc_100112eb
  store i32 %v1_100112fd, i32* @edi, align 4
  br label %dec_label_pc_10011310

dec_label_pc_10011310:                            ; preds = %dec_label_pc_100112eb, %dec_label_pc_1001130e
  %v0_1001131a = phi i32 [ %v0_10011302, %dec_label_pc_100112eb ], [ %v1_100112fd, %dec_label_pc_1001130e ]
  %v5_1001131a = inttoptr i32 %v0_1001131a to i8*
  %v8_1001131b = call i32 @function_1001136d(i8* %v5_1001131a, i32 %v3_1001130a, i32 %v3_1001130a, i32 %v4_100112d7, i32 %v4_100112d8)
  %v3_10011320 = load i32, i32* %stack_var_-12, align 4
  %v3_10011323 = load i32, i32* %stack_var_-8, align 4
  %v2_10011326 = mul i32 %v3_10011323, 4
  %v3_10011326 = add i32 %v2_10011326, %v3_10011320
  %v1_1001132a = call i32 @function_1000da64(i32 %v3_10011326)
  store i32 %v1_1001132a, i32* @esi, align 4
  %v1_10011334 = load i32, i32* @ebx, align 4
  %v12_10011334 = icmp eq i32 %v1_1001132a, %v1_10011334
  %v1_10011336 = icmp eq i1 %v12_10011334, false
  br i1 %v1_10011336, label %dec_label_pc_10011340, label %dec_label_pc_10011338

dec_label_pc_10011338:                            ; preds = %dec_label_pc_10011310
  %v1_1001133a = call i32 @__amsg_exit(i32 8)
  %v0_1001134b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10011340

dec_label_pc_10011340:                            ; preds = %dec_label_pc_10011310, %dec_label_pc_10011338
  %v0_1001134b = phi i32 [ %v1_1001132a, %dec_label_pc_10011310 ], [ %v0_1001134b.pre, %dec_label_pc_10011338 ]
  %v3_10011348 = load i32, i32* %stack_var_-8, align 4
  %v2_1001134b = mul i32 %v3_10011348, 4
  %v3_1001134b = add i32 %v2_1001134b, %v0_1001134b
  %v0_10011350 = load i32, i32* @edi, align 4
  %v5_10011350 = inttoptr i32 %v0_10011350 to i8*
  %v8_10011351 = call i32 @function_1001136d(i8* %v5_10011350, i32 %v0_1001134b, i32 %v3_1001134b, i32 %v4_100112d7, i32 %v4_100112d8)
  %v3_10011356 = load i32, i32* %stack_var_-8, align 4
  %v1_1001135c = add i32 %v3_10011356, -1
  %v0_1001135d = load i32, i32* @esi, align 4
  store i32 %v0_1001135d, i32* @global_var_1001b4b8.197, align 8
  %v2_10011363 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10011363, i32* @edi, align 4
  store i32 %v0_100112e2, i32* @esi, align 4
  store i32 %v1_1001135c, i32* @global_var_1001b4b4.198, align 4
  store i32 %v0_100112d9, i32* @ebx, align 4
  ret i32 %v1_1001135c

; uselistorder directives
  uselistorder i32 %v0_1001134b, { 1, 0 }
  uselistorder i32 %v1_1001132a, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 0, 1, 2, 4, 3 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i8** @global_var_1001bb18.130, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10013ca4, { 1, 0 }
  uselistorder label %dec_label_pc_10011340, { 1, 0 }
  uselistorder label %dec_label_pc_10011310, { 1, 0 }
  uselistorder label %dec_label_pc_100112eb, { 1, 0 }
}

define i32 @function_1001136d(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1001136d:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg5, i32* %ecx.global-to-local, align 4
  store i32 %arg4, i32* %eax.global-to-local, align 4
  %v4_10011378 = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v4_10011378, align 4
  store i32 %arg3, i32* %esi.global-to-local, align 4
  %v0_1001137e = load i32, i32* @edi, align 4
  store i32 %v0_1001137e, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v0_10011382 = load i32, i32* %eax.global-to-local, align 4
  %v1_10011382 = inttoptr i32 %v0_10011382 to i32*
  store i32 1, i32* %v1_10011382, align 4
  %v4_10011388 = ptrtoint i8* %arg1 to i32
  store i32 %v4_10011388, i32* %eax.global-to-local, align 4
  %v0_1001138b = load i32, i32* %edi.global-to-local, align 4
  %v1_1001138b = icmp eq i32 %v0_1001138b, 0
  br i1 %v1_1001138b, label %dec_label_pc_10011397, label %dec_label_pc_1001138f

dec_label_pc_1001138f:                            ; preds = %dec_label_pc_1001136d
  %v0_1001138f = load i32, i32* %esi.global-to-local, align 4
  %v2_1001138f = inttoptr i32 %v0_1001138b to i32*
  store i32 %v0_1001138f, i32* %v2_1001138f, align 4
  %v0_10011391 = load i32, i32* %edi.global-to-local, align 4
  %v1_10011391 = add i32 %v0_10011391, 4
  store i32 %v1_10011391, i32* %edi.global-to-local, align 4
  %v0_10011397.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10011397

dec_label_pc_10011397:                            ; preds = %dec_label_pc_1001136d, %dec_label_pc_1001138f
  %v0_10011397 = phi i32 [ %v4_10011388, %dec_label_pc_1001136d ], [ %v0_10011397.pre, %dec_label_pc_1001138f ]
  %stack_var_8.0 = phi i32 [ %arg2, %dec_label_pc_1001136d ], [ %v1_10011391, %dec_label_pc_1001138f ]
  %v1_10011397 = inttoptr i32 %v0_10011397 to i8*
  %v2_10011397 = load i8, i8* %v1_10011397, align 1
  %v11_10011397 = icmp eq i8 %v2_10011397, 34
  %v1_1001139a = icmp eq i1 %v11_10011397, false
  br i1 %v1_1001139a, label %dec_label_pc_100113e0, label %dec_label_pc_1001139c

dec_label_pc_1001139c:                            ; preds = %dec_label_pc_10011397, %dec_label_pc_1001139c.backedge
  %v0_1001139f = phi i32 [ %v0_1001139c.pre, %dec_label_pc_1001139c.backedge ], [ %v0_10011397, %dec_label_pc_10011397 ]
  %v1_1001139c = add i32 %v0_1001139f, 1
  %v2_1001139c = inttoptr i32 %v1_1001139c to i8*
  %v3_1001139c = load i8, i8* %v2_1001139c, align 1
  %v4_1001139c = zext i8 %v3_1001139c to i32
  %v5_1001139c = load i32, i32* @edx, align 4
  %v6_1001139c = and i32 %v5_1001139c, -256
  %v7_1001139c = or i32 %v6_1001139c, %v4_1001139c
  store i32 %v7_1001139c, i32* @edx, align 4
  store i32 %v1_1001139c, i32* %eax.global-to-local, align 4
  %v10_100113a0 = icmp eq i8 %v3_1001139c, 34
  br i1 %v10_100113a0, label %dec_label_pc_100113ce, label %dec_label_pc_100113a5

dec_label_pc_100113a5:                            ; preds = %dec_label_pc_1001139c
  %v4_100113a5 = icmp eq i8 %v3_1001139c, 0
  br i1 %v4_100113a5, label %dec_label_pc_100113ce, label %dec_label_pc_100113a9

dec_label_pc_100113a9:                            ; preds = %dec_label_pc_100113a5
  store i32 %v4_1001139c, i32* @edx, align 4
  %v1_100113ac = add i32 %v4_1001139c, ptrtoint (i8** @global_var_1001b8c1.199 to i32)
  %v2_100113ac = inttoptr i32 %v1_100113ac to i8*
  %v3_100113ac = load i8, i8* %v2_100113ac, align 1
  %v4_100113ac = and i8 %v3_100113ac, 4
  %v5_100113ac = icmp eq i8 %v4_100113ac, 0
  br i1 %v5_100113ac, label %dec_label_pc_100113c1, label %dec_label_pc_100113b5

dec_label_pc_100113b5:                            ; preds = %dec_label_pc_100113a9
  %v0_100113b5 = load i32, i32* %ecx.global-to-local, align 4
  %v1_100113b5 = inttoptr i32 %v0_100113b5 to i32*
  %v2_100113b5 = load i32, i32* %v1_100113b5, align 4
  %v3_100113b5 = add i32 %v2_100113b5, 1
  store i32 %v3_100113b5, i32* %v1_100113b5, align 4
  %v0_100113b7 = load i32, i32* %esi.global-to-local, align 4
  %v1_100113b7 = icmp eq i32 %v0_100113b7, 0
  br i1 %v1_100113b7, label %dec_label_pc_100113c1, label %dec_label_pc_100113bb

dec_label_pc_100113bb:                            ; preds = %dec_label_pc_100113b5
  %v0_100113bb = load i32, i32* %eax.global-to-local, align 4
  %v1_100113bb = inttoptr i32 %v0_100113bb to i8*
  %v2_100113bb = load i8, i8* %v1_100113bb, align 1
  %v3_100113bb = zext i8 %v2_100113bb to i32
  %v4_100113bb = load i32, i32* @edx, align 4
  %v5_100113bb = and i32 %v4_100113bb, -256
  %v6_100113bb = or i32 %v5_100113bb, %v3_100113bb
  store i32 %v6_100113bb, i32* @edx, align 4
  %v3_100113bd = inttoptr i32 %v0_100113b7 to i8*
  store i8 %v2_100113bb, i8* %v3_100113bd, align 1
  %v0_100113bf = load i32, i32* %esi.global-to-local, align 4
  %v1_100113bf = add i32 %v0_100113bf, 1
  store i32 %v1_100113bf, i32* %esi.global-to-local, align 4
  %v0_100113c0 = load i32, i32* %eax.global-to-local, align 4
  %v1_100113c0 = add i32 %v0_100113c0, 1
  store i32 %v1_100113c0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100113c1

dec_label_pc_100113c1:                            ; preds = %dec_label_pc_100113b5, %dec_label_pc_100113a9, %dec_label_pc_100113bb
  %v0_100113c1 = load i32, i32* %ecx.global-to-local, align 4
  %v1_100113c1 = inttoptr i32 %v0_100113c1 to i32*
  %v2_100113c1 = load i32, i32* %v1_100113c1, align 4
  %v3_100113c1 = add i32 %v2_100113c1, 1
  store i32 %v3_100113c1, i32* %v1_100113c1, align 4
  %v0_100113c3 = load i32, i32* %esi.global-to-local, align 4
  %v1_100113c3 = icmp eq i32 %v0_100113c3, 0
  br i1 %v1_100113c3, label %dec_label_pc_1001139c.backedge, label %dec_label_pc_100113c7

dec_label_pc_100113c7:                            ; preds = %dec_label_pc_100113c1
  %v0_100113c7 = load i32, i32* %eax.global-to-local, align 4
  %v1_100113c7 = inttoptr i32 %v0_100113c7 to i8*
  %v2_100113c7 = load i8, i8* %v1_100113c7, align 1
  %v3_100113c7 = zext i8 %v2_100113c7 to i32
  %v4_100113c7 = load i32, i32* @edx, align 4
  %v5_100113c7 = and i32 %v4_100113c7, -256
  %v6_100113c7 = or i32 %v5_100113c7, %v3_100113c7
  store i32 %v6_100113c7, i32* @edx, align 4
  %v3_100113c9 = inttoptr i32 %v0_100113c3 to i8*
  store i8 %v2_100113c7, i8* %v3_100113c9, align 1
  %v0_100113cb = load i32, i32* %esi.global-to-local, align 4
  %v1_100113cb = add i32 %v0_100113cb, 1
  store i32 %v1_100113cb, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1001139c.backedge

dec_label_pc_1001139c.backedge:                   ; preds = %dec_label_pc_100113c7, %dec_label_pc_100113c1
  %v0_1001139c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1001139c

dec_label_pc_100113ce:                            ; preds = %dec_label_pc_100113a5, %dec_label_pc_1001139c
  %v0_100113ce = load i32, i32* %ecx.global-to-local, align 4
  %v1_100113ce = inttoptr i32 %v0_100113ce to i32*
  %v2_100113ce = load i32, i32* %v1_100113ce, align 4
  %v3_100113ce = add i32 %v2_100113ce, 1
  store i32 %v3_100113ce, i32* %v1_100113ce, align 4
  %v0_100113d0 = load i32, i32* %esi.global-to-local, align 4
  %v1_100113d0 = icmp eq i32 %v0_100113d0, 0
  br i1 %v1_100113d0, label %dec_label_pc_100113d8, label %dec_label_pc_100113d4

dec_label_pc_100113d4:                            ; preds = %dec_label_pc_100113ce
  %v4_100113d4 = inttoptr i32 %v0_100113d0 to i8*
  store i8 0, i8* %v4_100113d4, align 1
  %v0_100113d7 = load i32, i32* %esi.global-to-local, align 4
  %v1_100113d7 = add i32 %v0_100113d7, 1
  store i32 %v1_100113d7, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_100113d8

dec_label_pc_100113d8:                            ; preds = %dec_label_pc_100113ce, %dec_label_pc_100113d4
  %v0_100113d8 = load i32, i32* %eax.global-to-local, align 4
  %v1_100113d8 = inttoptr i32 %v0_100113d8 to i8*
  %v2_100113d8 = load i8, i8* %v1_100113d8, align 1
  %v11_100113d8 = icmp eq i8 %v2_100113d8, 34
  %v1_100113db = icmp eq i1 %v11_100113d8, false
  br i1 %v1_100113db, label %dec_label_pc_10011423, label %dec_label_pc_100113dd

dec_label_pc_100113dd:                            ; preds = %dec_label_pc_100113d8
  %v1_100113dd = add i32 %v0_100113d8, 1
  store i32 %v1_100113dd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10011423

dec_label_pc_100113e0:                            ; preds = %dec_label_pc_10011397, %dec_label_pc_1001140f
  %v0_100113e0 = load i32, i32* %ecx.global-to-local, align 4
  %v1_100113e0 = inttoptr i32 %v0_100113e0 to i32*
  %v2_100113e0 = load i32, i32* %v1_100113e0, align 4
  %v3_100113e0 = add i32 %v2_100113e0, 1
  store i32 %v3_100113e0, i32* %v1_100113e0, align 4
  %v0_100113e2 = load i32, i32* %esi.global-to-local, align 4
  %v1_100113e2 = icmp eq i32 %v0_100113e2, 0
  br i1 %v1_100113e2, label %dec_label_pc_100113eb, label %dec_label_pc_100113e6

dec_label_pc_100113e6:                            ; preds = %dec_label_pc_100113e0
  %v0_100113e6 = load i32, i32* %eax.global-to-local, align 4
  %v1_100113e6 = inttoptr i32 %v0_100113e6 to i8*
  %v2_100113e6 = load i8, i8* %v1_100113e6, align 1
  %v3_100113e6 = zext i8 %v2_100113e6 to i32
  %v4_100113e6 = load i32, i32* @edx, align 4
  %v5_100113e6 = and i32 %v4_100113e6, -256
  %v6_100113e6 = or i32 %v5_100113e6, %v3_100113e6
  store i32 %v6_100113e6, i32* @edx, align 4
  %v3_100113e8 = inttoptr i32 %v0_100113e2 to i8*
  store i8 %v2_100113e6, i8* %v3_100113e8, align 1
  %v0_100113ea = load i32, i32* %esi.global-to-local, align 4
  %v1_100113ea = add i32 %v0_100113ea, 1
  store i32 %v1_100113ea, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_100113eb

dec_label_pc_100113eb:                            ; preds = %dec_label_pc_100113e0, %dec_label_pc_100113e6
  %v0_1001141b18 = phi i32 [ 0, %dec_label_pc_100113e0 ], [ %v1_100113ea, %dec_label_pc_100113e6 ]
  %v0_100113eb = load i32, i32* %eax.global-to-local, align 4
  %v1_100113eb = inttoptr i32 %v0_100113eb to i8*
  %v2_100113eb = load i8, i8* %v1_100113eb, align 1
  %v3_100113eb = zext i8 %v2_100113eb to i32
  %v4_100113eb = load i32, i32* @edx, align 4
  %v5_100113eb = and i32 %v4_100113eb, -256
  %v6_100113eb = or i32 %v5_100113eb, %v3_100113eb
  store i32 %v6_100113eb, i32* @edx, align 4
  %v1_100113ed = add i32 %v0_100113eb, 1
  store i32 %v1_100113ed, i32* %eax.global-to-local, align 4
  store i32 %v3_100113eb, i32* %ebx.global-to-local, align 4
  %v1_100113f1 = add i32 %v3_100113eb, ptrtoint (i8** @global_var_1001b8c1.199 to i32)
  %v2_100113f1 = inttoptr i32 %v1_100113f1 to i8*
  %v3_100113f1 = load i8, i8* %v2_100113f1, align 1
  %v4_100113f1 = and i8 %v3_100113f1, 4
  %v5_100113f1 = icmp eq i8 %v4_100113f1, 0
  br i1 %v5_100113f1, label %dec_label_pc_10011406, label %dec_label_pc_100113fa

dec_label_pc_100113fa:                            ; preds = %dec_label_pc_100113eb
  %v0_100113fa = load i32, i32* %ecx.global-to-local, align 4
  %v1_100113fa = inttoptr i32 %v0_100113fa to i32*
  %v2_100113fa = load i32, i32* %v1_100113fa, align 4
  %v3_100113fa = add i32 %v2_100113fa, 1
  store i32 %v3_100113fa, i32* %v1_100113fa, align 4
  %v0_100113fc = load i32, i32* %esi.global-to-local, align 4
  %v1_100113fc = icmp eq i32 %v0_100113fc, 0
  br i1 %v1_100113fc, label %dec_label_pc_10011405, label %dec_label_pc_10011400

dec_label_pc_10011400:                            ; preds = %dec_label_pc_100113fa
  %v0_10011400 = load i32, i32* %eax.global-to-local, align 4
  %v1_10011400 = inttoptr i32 %v0_10011400 to i8*
  %v2_10011400 = load i8, i8* %v1_10011400, align 1
  %v3_10011400 = zext i8 %v2_10011400 to i32
  %v4_10011400 = load i32, i32* %ebx.global-to-local, align 4
  %v5_10011400 = and i32 %v4_10011400, -256
  %v6_10011400 = or i32 %v5_10011400, %v3_10011400
  store i32 %v6_10011400, i32* %ebx.global-to-local, align 4
  %v3_10011402 = inttoptr i32 %v0_100113fc to i8*
  store i8 %v2_10011400, i8* %v3_10011402, align 1
  %v0_10011404 = load i32, i32* %esi.global-to-local, align 4
  %v1_10011404 = add i32 %v0_10011404, 1
  store i32 %v1_10011404, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10011405

dec_label_pc_10011405:                            ; preds = %dec_label_pc_100113fa, %dec_label_pc_10011400
  %v0_1001141b17 = phi i32 [ 0, %dec_label_pc_100113fa ], [ %v1_10011404, %dec_label_pc_10011400 ]
  %v0_10011405 = load i32, i32* %eax.global-to-local, align 4
  %v1_10011405 = add i32 %v0_10011405, 1
  store i32 %v1_10011405, i32* %eax.global-to-local, align 4
  %v0_10011406.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_10011406

dec_label_pc_10011406:                            ; preds = %dec_label_pc_100113eb, %dec_label_pc_10011405
  %v4_1001141f = phi i32 [ %v0_1001141b18, %dec_label_pc_100113eb ], [ %v0_1001141b17, %dec_label_pc_10011405 ]
  %v0_10011418 = phi i32 [ %v1_100113ed, %dec_label_pc_100113eb ], [ %v1_10011405, %dec_label_pc_10011405 ]
  %v0_10011414 = phi i32 [ %v6_100113eb, %dec_label_pc_100113eb ], [ %v0_10011406.pre, %dec_label_pc_10011405 ]
  %v1_10011406 = trunc i32 %v0_10011414 to i8
  %v7_10011406 = icmp eq i8 %v1_10011406, 32
  br i1 %v7_10011406, label %dec_label_pc_10011414, label %dec_label_pc_1001140b

dec_label_pc_1001140b:                            ; preds = %dec_label_pc_10011406
  %v4_1001140b = icmp eq i8 %v1_10011406, 0
  br i1 %v4_1001140b, label %dec_label_pc_10011418, label %dec_label_pc_1001140f

dec_label_pc_1001140f:                            ; preds = %dec_label_pc_1001140b
  %v10_1001140f = icmp eq i8 %v1_10011406, 9
  %v1_10011412 = icmp eq i1 %v10_1001140f, false
  br i1 %v1_10011412, label %dec_label_pc_100113e0, label %dec_label_pc_10011414

dec_label_pc_10011414:                            ; preds = %dec_label_pc_1001140f, %dec_label_pc_10011406
  %v4_10011414 = icmp eq i8 %v1_10011406, 0
  %v1_10011416 = icmp eq i1 %v4_10011414, false
  br i1 %v1_10011416, label %dec_label_pc_1001141b, label %dec_label_pc_10011418

dec_label_pc_10011418:                            ; preds = %dec_label_pc_1001140b, %dec_label_pc_10011414
  %v1_10011418 = add i32 %v0_10011418, -1
  store i32 %v1_10011418, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10011423

dec_label_pc_1001141b:                            ; preds = %dec_label_pc_10011414
  %v1_1001141b = icmp eq i32 %v4_1001141f, 0
  br i1 %v1_1001141b, label %dec_label_pc_10011423, label %dec_label_pc_1001141f

dec_label_pc_1001141f:                            ; preds = %dec_label_pc_1001141b
  %v5_1001141f = add i32 %v4_1001141f, -1
  %v6_1001141f = inttoptr i32 %v5_1001141f to i8*
  store i8 0, i8* %v6_1001141f, align 1
  %v0_100114275.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10011423

dec_label_pc_10011423:                            ; preds = %dec_label_pc_1001141b, %dec_label_pc_100113d8, %dec_label_pc_10011418, %dec_label_pc_100113dd, %dec_label_pc_1001141f
  %v0_100114275 = phi i32 [ %v0_10011418, %dec_label_pc_1001141b ], [ %v0_100113d8, %dec_label_pc_100113d8 ], [ %v1_10011418, %dec_label_pc_10011418 ], [ %v1_100113dd, %dec_label_pc_100113dd ], [ %v0_100114275.pre, %dec_label_pc_1001141f ]
  %v1_100114276 = inttoptr i32 %v0_100114275 to i8*
  %v2_100114277 = load i8, i8* %v1_100114276, align 1
  %v3_100114278 = icmp eq i8 %v2_100114277, 0
  br i1 %v3_100114278, label %dec_label_pc_10011510, label %dec_label_pc_10011430.preheader.lr.ph

dec_label_pc_10011430.preheader.lr.ph:            ; preds = %dec_label_pc_10011423
  %v1_10011457 = inttoptr i32 %arg4 to i32*
  br label %dec_label_pc_10011430.preheader

dec_label_pc_10011430.preheader:                  ; preds = %dec_label_pc_10011430.preheader.lr.ph, %dec_label_pc_10011509
  %v0_1001143021 = phi i32 [ %v0_100114275, %dec_label_pc_10011430.preheader.lr.ph ], [ %v0_10011427, %dec_label_pc_10011509 ]
  %stack_var_20.011 = phi i32 [ 0, %dec_label_pc_10011430.preheader.lr.ph ], [ %stack_var_20.3, %dec_label_pc_10011509 ]
  %stack_var_8.110 = phi i32 [ %stack_var_8.0, %dec_label_pc_10011430.preheader.lr.ph ], [ %stack_var_8.2, %dec_label_pc_10011509 ]
  %v4_10011430.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_10011430

dec_label_pc_10011430:                            ; preds = %dec_label_pc_10011430.preheader, %dec_label_pc_1001143c
  %v4_10011430 = phi i32 [ %v4_10011430.pre, %dec_label_pc_10011430.preheader ], [ %v6_10011430, %dec_label_pc_1001143c ]
  %v0_1001143c = phi i32 [ %v0_1001143021, %dec_label_pc_10011430.preheader ], [ %v1_1001143c, %dec_label_pc_1001143c ]
  %v1_10011430 = inttoptr i32 %v0_1001143c to i8*
  %v2_10011430 = load i8, i8* %v1_10011430, align 1
  %v3_10011430 = zext i8 %v2_10011430 to i32
  %v5_10011430 = and i32 %v4_10011430, -256
  %v6_10011430 = or i32 %v3_10011430, %v5_10011430
  store i32 %v6_10011430, i32* @edx, align 4
  %v7_10011432 = icmp eq i8 %v2_10011430, 32
  br i1 %v7_10011432, label %dec_label_pc_1001143c, label %dec_label_pc_10011437

dec_label_pc_10011437:                            ; preds = %dec_label_pc_10011430
  %v10_10011437 = icmp eq i8 %v2_10011430, 9
  %v1_1001143a = icmp eq i1 %v10_10011437, false
  br i1 %v1_1001143a, label %dec_label_pc_1001143f, label %dec_label_pc_1001143c

dec_label_pc_1001143c:                            ; preds = %dec_label_pc_10011437, %dec_label_pc_10011430
  %v1_1001143c = add i32 %v0_1001143c, 1
  store i32 %v1_1001143c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10011430

dec_label_pc_1001143f:                            ; preds = %dec_label_pc_10011437
  %v2_1001143f = load i8, i8* %v1_10011430, align 1
  %v3_1001143f = icmp eq i8 %v2_1001143f, 0
  br i1 %v3_1001143f, label %dec_label_pc_10011510, label %dec_label_pc_10011448

dec_label_pc_10011448:                            ; preds = %dec_label_pc_1001143f
  %v0_10011448 = load i32, i32* %edi.global-to-local, align 4
  %v1_10011448 = icmp eq i32 %v0_10011448, 0
  br i1 %v1_10011448, label %dec_label_pc_10011454, label %dec_label_pc_1001144c

dec_label_pc_1001144c:                            ; preds = %dec_label_pc_10011448
  %v0_1001144c = load i32, i32* %esi.global-to-local, align 4
  %v2_1001144c = inttoptr i32 %v0_10011448 to i32*
  store i32 %v0_1001144c, i32* %v2_1001144c, align 4
  %v0_1001144e = load i32, i32* %edi.global-to-local, align 4
  %v1_1001144e = add i32 %v0_1001144e, 4
  store i32 %v1_1001144e, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10011454

dec_label_pc_10011454:                            ; preds = %dec_label_pc_10011448, %dec_label_pc_1001144c
  %stack_var_8.2 = phi i32 [ %stack_var_8.110, %dec_label_pc_10011448 ], [ %v1_1001144e, %dec_label_pc_1001144c ]
  %v2_10011457 = load i32, i32* %v1_10011457, align 4
  %v3_10011457 = add i32 %v2_10011457, 1
  store i32 %v3_10011457, i32* %v1_10011457, align 4
  %v0_10011462.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10011459

dec_label_pc_10011459:                            ; preds = %dec_label_pc_100114fb, %dec_label_pc_10011454
  %v0_10011462.pre = phi i32 [ %v0_10011462.pre.pre, %dec_label_pc_10011454 ], [ %v1_100114fb, %dec_label_pc_100114fb ]
  %stack_var_20.1 = phi i32 [ %stack_var_20.011, %dec_label_pc_10011454 ], [ %stack_var_20.3, %dec_label_pc_100114fb ]
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_1001146248 = inttoptr i32 %v0_10011462.pre to i8*
  %v2_1001146249 = load i8, i8* %v1_1001146248, align 1
  %v11_1001146255 = icmp eq i8 %v2_1001146249, 92
  %v1_1001146557 = icmp eq i1 %v11_1001146255, false
  br i1 %v1_1001146557, label %dec_label_pc_1001146b, label %dec_label_pc_10011467

dec_label_pc_10011467:                            ; preds = %dec_label_pc_10011459, %dec_label_pc_10011467
  %v0_1001149a59 = phi i32 [ %v1_10011468, %dec_label_pc_10011467 ], [ 0, %dec_label_pc_10011459 ]
  %v0_1001148058 = phi i32 [ %v1_10011467, %dec_label_pc_10011467 ], [ %v0_10011462.pre, %dec_label_pc_10011459 ]
  %v1_10011467 = add i32 %v0_1001148058, 1
  store i32 %v1_10011467, i32* %eax.global-to-local, align 4
  %v1_10011468 = add i32 %v0_1001149a59, 1
  store i32 %v1_10011468, i32* %ebx.global-to-local, align 4
  %v1_10011462 = inttoptr i32 %v1_10011467 to i8*
  %v2_10011462 = load i8, i8* %v1_10011462, align 1
  %v11_10011462 = icmp eq i8 %v2_10011462, 92
  %v1_10011465 = icmp eq i1 %v11_10011462, false
  br i1 %v1_10011465, label %dec_label_pc_1001146b, label %dec_label_pc_10011467

dec_label_pc_1001146b:                            ; preds = %dec_label_pc_10011467, %dec_label_pc_10011459
  %v0_10011480.lcssa = phi i32 [ %v0_10011462.pre, %dec_label_pc_10011459 ], [ %v1_10011467, %dec_label_pc_10011467 ]
  %v0_1001149a.lcssa = phi i32 [ 0, %dec_label_pc_10011459 ], [ %v1_10011468, %dec_label_pc_10011467 ]
  %v1_10011462.lcssa = phi i8* [ %v1_1001146248, %dec_label_pc_10011459 ], [ %v1_10011462, %dec_label_pc_10011467 ]
  %v2_1001146b = load i8, i8* %v1_10011462.lcssa, align 1
  %v11_1001146b = icmp eq i8 %v2_1001146b, 34
  %v1_1001146e = icmp eq i1 %v11_1001146b, false
  br i1 %v1_1001146e, label %dec_label_pc_1001149c, label %dec_label_pc_10011470

dec_label_pc_10011470:                            ; preds = %dec_label_pc_1001146b
  %v2_10011470 = and i32 %v0_1001149a.lcssa, 1
  %v3_10011470 = icmp eq i32 %v2_10011470, 0
  %v1_10011473 = icmp eq i1 %v3_10011470, false
  br i1 %v1_10011473, label %dec_label_pc_1001149a, label %dec_label_pc_10011475

dec_label_pc_10011475:                            ; preds = %dec_label_pc_10011470
  store i32 0, i32* %edi.global-to-local, align 4
  %v15_10011477 = icmp eq i32 %stack_var_20.1, 0
  br i1 %v15_10011477, label %dec_label_pc_1001148c, label %dec_label_pc_1001147c

dec_label_pc_1001147c:                            ; preds = %dec_label_pc_10011475
  %v1_1001147c = add i32 %v0_10011480.lcssa, 1
  %v2_1001147c = inttoptr i32 %v1_1001147c to i8*
  %v3_1001147c = load i8, i8* %v2_1001147c, align 1
  %v12_1001147c = icmp eq i8 %v3_1001147c, 34
  %v1_10011483 = icmp eq i1 %v12_1001147c, false
  br i1 %v1_10011483, label %dec_label_pc_1001148c, label %dec_label_pc_10011485

dec_label_pc_10011485:                            ; preds = %dec_label_pc_1001147c
  store i32 %v1_1001147c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1001148c

dec_label_pc_1001148c:                            ; preds = %dec_label_pc_10011475, %dec_label_pc_1001147c, %dec_label_pc_10011485
  %v0_100114b129 = phi i32 [ %v1_1001147c, %dec_label_pc_10011485 ], [ %v0_10011480.lcssa, %dec_label_pc_1001147c ], [ %v0_10011480.lcssa, %dec_label_pc_10011475 ]
  %stack_var_4.0 = phi i8* [ inttoptr (i32 1 to i8*), %dec_label_pc_10011485 ], [ null, %dec_label_pc_1001147c ], [ null, %dec_label_pc_10011475 ]
  store i32 %stack_var_8.2, i32* %edi.global-to-local, align 4
  %v1_10011494 = zext i1 %v15_10011477 to i32
  br label %dec_label_pc_1001149a

dec_label_pc_1001149a:                            ; preds = %dec_label_pc_10011470, %dec_label_pc_1001148c
  %v0_100114b128 = phi i32 [ %v0_10011480.lcssa, %dec_label_pc_10011470 ], [ %v0_100114b129, %dec_label_pc_1001148c ]
  %stack_var_4.1 = phi i8* [ inttoptr (i32 1 to i8*), %dec_label_pc_10011470 ], [ %stack_var_4.0, %dec_label_pc_1001148c ]
  %stack_var_20.2 = phi i32 [ %stack_var_20.1, %dec_label_pc_10011470 ], [ %v1_10011494, %dec_label_pc_1001148c ]
  %v2_1001149a = udiv i32 %v0_1001149a.lcssa, 2
  store i32 %v2_1001149a, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1001149c

dec_label_pc_1001149c:                            ; preds = %dec_label_pc_1001146b, %dec_label_pc_1001149a
  %v0_100114b127 = phi i32 [ %v0_10011480.lcssa, %dec_label_pc_1001146b ], [ %v0_100114b128, %dec_label_pc_1001149a ]
  %v0_1001149c = phi i32 [ %v0_1001149a.lcssa, %dec_label_pc_1001146b ], [ %v2_1001149a, %dec_label_pc_1001149a ]
  %stack_var_4.2 = phi i8* [ inttoptr (i32 1 to i8*), %dec_label_pc_1001146b ], [ %stack_var_4.1, %dec_label_pc_1001149a ]
  %stack_var_20.3 = phi i32 [ %stack_var_20.1, %dec_label_pc_1001146b ], [ %stack_var_20.2, %dec_label_pc_1001149a ]
  %v1_1001149e = add i32 %v0_1001149c, -1
  store i32 %v1_1001149e, i32* %ebx.global-to-local, align 4
  %v1_1001149f = icmp eq i32 %v0_1001149c, 0
  br i1 %v1_1001149f, label %dec_label_pc_100114b1, label %dec_label_pc_100114a3

dec_label_pc_100114a3:                            ; preds = %dec_label_pc_1001149c
  store i32 %v0_1001149c, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_100114a4

dec_label_pc_100114a4:                            ; preds = %dec_label_pc_100114ac, %dec_label_pc_100114a3
  %v0_100114a4 = load i32, i32* %esi.global-to-local, align 4
  %v1_100114a4 = icmp eq i32 %v0_100114a4, 0
  br i1 %v1_100114a4, label %dec_label_pc_100114ac, label %dec_label_pc_100114a8

dec_label_pc_100114a8:                            ; preds = %dec_label_pc_100114a4
  %v1_100114a8 = inttoptr i32 %v0_100114a4 to i8*
  store i8 92, i8* %v1_100114a8, align 1
  %v0_100114ab = load i32, i32* %esi.global-to-local, align 4
  %v1_100114ab = add i32 %v0_100114ab, 1
  store i32 %v1_100114ab, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_100114ac

dec_label_pc_100114ac:                            ; preds = %dec_label_pc_100114a4, %dec_label_pc_100114a8
  %v0_100114ac = load i32, i32* %ecx.global-to-local, align 4
  %v1_100114ac = inttoptr i32 %v0_100114ac to i32*
  %v2_100114ac = load i32, i32* %v1_100114ac, align 4
  %v3_100114ac = add i32 %v2_100114ac, 1
  store i32 %v3_100114ac, i32* %v1_100114ac, align 4
  %v0_100114ae = load i32, i32* %ebx.global-to-local, align 4
  %v1_100114ae = add i32 %v0_100114ae, -1
  %v8_100114ae = icmp eq i32 %v1_100114ae, 0
  store i32 %v1_100114ae, i32* %ebx.global-to-local, align 4
  %v1_100114af = icmp eq i1 %v8_100114ae, false
  br i1 %v1_100114af, label %dec_label_pc_100114a4, label %dec_label_pc_100114b1.loopexit

dec_label_pc_100114b1.loopexit:                   ; preds = %dec_label_pc_100114ac
  %v0_100114b1.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100114b1

dec_label_pc_100114b1:                            ; preds = %dec_label_pc_100114b1.loopexit, %dec_label_pc_1001149c
  %v0_100114f6 = phi i32 [ %v0_100114b1.pre, %dec_label_pc_100114b1.loopexit ], [ %v0_100114b127, %dec_label_pc_1001149c ]
  %v1_100114b1 = inttoptr i32 %v0_100114f6 to i8*
  %v2_100114b1 = load i8, i8* %v1_100114b1, align 1
  %v3_100114b1 = zext i8 %v2_100114b1 to i32
  %v5_100114b1 = and i32 %v0_1001149c, -256
  %v6_100114b1 = or i32 %v3_100114b1, %v5_100114b1
  store i32 %v6_100114b1, i32* @edx, align 4
  %v4_100114b3 = icmp eq i8 %v2_100114b1, 0
  br i1 %v4_100114b3, label %dec_label_pc_10011501, label %dec_label_pc_100114b7

dec_label_pc_100114b7:                            ; preds = %dec_label_pc_100114b1
  %v4_100114b7 = icmp eq i32 %stack_var_20.3, 0
  %v1_100114bb = icmp eq i1 %v4_100114b7, false
  br i1 %v1_100114bb, label %dec_label_pc_100114c7, label %dec_label_pc_100114bd

dec_label_pc_100114bd:                            ; preds = %dec_label_pc_100114b7
  %v7_100114bd = icmp eq i8 %v2_100114b1, 32
  br i1 %v7_100114bd, label %dec_label_pc_10011501, label %dec_label_pc_100114c2

dec_label_pc_100114c2:                            ; preds = %dec_label_pc_100114bd
  %v10_100114c2 = icmp eq i8 %v2_100114b1, 9
  br i1 %v10_100114c2, label %dec_label_pc_10011501, label %dec_label_pc_100114c7

dec_label_pc_100114c7:                            ; preds = %dec_label_pc_100114c2, %dec_label_pc_100114b7
  %v5_100114c7 = icmp eq i8* %stack_var_4.2, null
  br i1 %v5_100114c7, label %dec_label_pc_100114fb, label %dec_label_pc_100114cd

dec_label_pc_100114cd:                            ; preds = %dec_label_pc_100114c7
  %v0_100114cd = load i32, i32* %esi.global-to-local, align 4
  %v1_100114cd = icmp eq i32 %v0_100114cd, 0
  br i1 %v1_100114cd, label %dec_label_pc_100114ea, label %dec_label_pc_100114d1

dec_label_pc_100114d1:                            ; preds = %dec_label_pc_100114cd
  store i32 %v3_100114b1, i32* %ebx.global-to-local, align 4
  %v1_100114d4 = add i32 %v3_100114b1, ptrtoint (i8** @global_var_1001b8c1.199 to i32)
  %v2_100114d4 = inttoptr i32 %v1_100114d4 to i8*
  %v3_100114d4 = load i8, i8* %v2_100114d4, align 1
  %v4_100114d4 = and i8 %v3_100114d4, 4
  %v5_100114d4 = icmp eq i8 %v4_100114d4, 0
  br i1 %v5_100114d4, label %dec_label_pc_100114e3, label %dec_label_pc_100114dd

dec_label_pc_100114dd:                            ; preds = %dec_label_pc_100114d1
  %v3_100114dd = inttoptr i32 %v0_100114cd to i8*
  store i8 %v2_100114b1, i8* %v3_100114dd, align 1
  %v0_100114df = load i32, i32* %esi.global-to-local, align 4
  %v1_100114df = add i32 %v0_100114df, 1
  store i32 %v1_100114df, i32* %esi.global-to-local, align 4
  %v0_100114e0 = load i32, i32* %eax.global-to-local, align 4
  %v1_100114e0 = add i32 %v0_100114e0, 1
  store i32 %v1_100114e0, i32* %eax.global-to-local, align 4
  %v0_100114e1 = load i32, i32* %ecx.global-to-local, align 4
  %v1_100114e1 = inttoptr i32 %v0_100114e1 to i32*
  %v2_100114e1 = load i32, i32* %v1_100114e1, align 4
  %v3_100114e1 = add i32 %v2_100114e1, 1
  store i32 %v3_100114e1, i32* %v1_100114e1, align 4
  %v0_100114e3.pre = load i32, i32* %eax.global-to-local, align 4
  %v2_100114e5.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_100114e3

dec_label_pc_100114e3:                            ; preds = %dec_label_pc_100114d1, %dec_label_pc_100114dd
  %v2_100114e5 = phi i32 [ %v0_100114cd, %dec_label_pc_100114d1 ], [ %v2_100114e5.pre, %dec_label_pc_100114dd ]
  %v0_100114e3 = phi i32 [ %v0_100114f6, %dec_label_pc_100114d1 ], [ %v0_100114e3.pre, %dec_label_pc_100114dd ]
  %v1_100114e3 = inttoptr i32 %v0_100114e3 to i8*
  %v2_100114e3 = load i8, i8* %v1_100114e3, align 1
  %v3_100114e5 = inttoptr i32 %v2_100114e5 to i8*
  store i8 %v2_100114e3, i8* %v3_100114e5, align 1
  %v0_100114e7 = load i32, i32* %esi.global-to-local, align 4
  %v1_100114e7 = add i32 %v0_100114e7, 1
  store i32 %v1_100114e7, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_100114f9

dec_label_pc_100114ea:                            ; preds = %dec_label_pc_100114cd
  %v1_100114ed = add i32 %v3_100114b1, ptrtoint (i8** @global_var_1001b8c1.199 to i32)
  %v2_100114ed = inttoptr i32 %v1_100114ed to i8*
  %v3_100114ed = load i8, i8* %v2_100114ed, align 1
  %v4_100114ed = and i8 %v3_100114ed, 4
  %v5_100114ed = icmp eq i8 %v4_100114ed, 0
  br i1 %v5_100114ed, label %dec_label_pc_100114f9, label %dec_label_pc_100114f6

dec_label_pc_100114f6:                            ; preds = %dec_label_pc_100114ea
  %v1_100114f6 = add i32 %v0_100114f6, 1
  store i32 %v1_100114f6, i32* %eax.global-to-local, align 4
  %v0_100114f7 = load i32, i32* %ecx.global-to-local, align 4
  %v1_100114f7 = inttoptr i32 %v0_100114f7 to i32*
  %v2_100114f7 = load i32, i32* %v1_100114f7, align 4
  %v3_100114f7 = add i32 %v2_100114f7, 1
  store i32 %v3_100114f7, i32* %v1_100114f7, align 4
  br label %dec_label_pc_100114f9

dec_label_pc_100114f9:                            ; preds = %dec_label_pc_100114ea, %dec_label_pc_100114e3, %dec_label_pc_100114f6
  %v0_100114f9 = load i32, i32* %ecx.global-to-local, align 4
  %v1_100114f9 = inttoptr i32 %v0_100114f9 to i32*
  %v2_100114f9 = load i32, i32* %v1_100114f9, align 4
  %v3_100114f9 = add i32 %v2_100114f9, 1
  store i32 %v3_100114f9, i32* %v1_100114f9, align 4
  %v0_100114fb.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100114fb

dec_label_pc_100114fb:                            ; preds = %dec_label_pc_100114c7, %dec_label_pc_100114f9
  %v0_100114fb = phi i32 [ %v0_100114f6, %dec_label_pc_100114c7 ], [ %v0_100114fb.pre, %dec_label_pc_100114f9 ]
  %v1_100114fb = add i32 %v0_100114fb, 1
  store i32 %v1_100114fb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10011459

dec_label_pc_10011501:                            ; preds = %dec_label_pc_100114c2, %dec_label_pc_100114bd, %dec_label_pc_100114b1
  %v0_10011501 = load i32, i32* %esi.global-to-local, align 4
  %v1_10011501 = icmp eq i32 %v0_10011501, 0
  br i1 %v1_10011501, label %dec_label_pc_10011509, label %dec_label_pc_10011505

dec_label_pc_10011505:                            ; preds = %dec_label_pc_10011501
  %v4_10011505 = inttoptr i32 %v0_10011501 to i8*
  store i8 0, i8* %v4_10011505, align 1
  %v0_10011508 = load i32, i32* %esi.global-to-local, align 4
  %v1_10011508 = add i32 %v0_10011508, 1
  store i32 %v1_10011508, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10011509

dec_label_pc_10011509:                            ; preds = %dec_label_pc_10011501, %dec_label_pc_10011505
  %v0_10011509 = load i32, i32* %ecx.global-to-local, align 4
  %v1_10011509 = inttoptr i32 %v0_10011509 to i32*
  %v2_10011509 = load i32, i32* %v1_10011509, align 4
  %v3_10011509 = add i32 %v2_10011509, 1
  store i32 %v3_10011509, i32* %v1_10011509, align 4
  %v0_10011427 = load i32, i32* %eax.global-to-local, align 4
  %v1_10011427 = inttoptr i32 %v0_10011427 to i8*
  %v2_10011427 = load i8, i8* %v1_10011427, align 1
  %v3_10011427 = icmp eq i8 %v2_10011427, 0
  br i1 %v3_10011427, label %dec_label_pc_10011510, label %dec_label_pc_10011430.preheader

dec_label_pc_10011510:                            ; preds = %dec_label_pc_10011509, %dec_label_pc_1001143f, %dec_label_pc_10011423
  %v0_10011510 = load i32, i32* %edi.global-to-local, align 4
  %v1_10011510 = icmp eq i32 %v0_10011510, 0
  br i1 %v1_10011510, label %dec_label_pc_10011517, label %dec_label_pc_10011514

dec_label_pc_10011514:                            ; preds = %dec_label_pc_10011510
  %v4_10011514 = inttoptr i32 %v0_10011510 to i32*
  store i32 0, i32* %v4_10011514, align 4
  br label %dec_label_pc_10011517

dec_label_pc_10011517:                            ; preds = %dec_label_pc_10011510, %dec_label_pc_10011514
  store i32 %arg4, i32* %eax.global-to-local, align 4
  %v2_1001151a = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1001151a, i32* @edi, align 4
  %v1_1001151d = inttoptr i32 %arg4 to i32*
  %v2_1001151d = load i32, i32* %v1_1001151d, align 4
  %v3_1001151d = add i32 %v2_1001151d, 1
  store i32 %v3_1001151d, i32* %v1_1001151d, align 4
  ret i32 %arg4

; uselistorder directives
  uselistorder i32 %v0_10011427, { 1, 0 }
  uselistorder i32 %v1_100114fb, { 1, 0 }
  uselistorder i32 %v3_100114b1, { 1, 2, 3, 0 }
  uselistorder i8 %v2_100114b1, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v1_100114ae, { 1, 0 }
  uselistorder i32 %stack_var_20.3, { 2, 0, 1 }
  uselistorder i32 %v0_1001149c, { 3, 0, 2, 1 }
  uselistorder i32 %v2_1001149a, { 1, 0 }
  uselistorder i32 %v0_1001149a.lcssa, { 2, 0, 1 }
  uselistorder i32 %v0_10011480.lcssa, { 2, 1, 4, 3, 0 }
  uselistorder i32 %v1_10011468, { 0, 2, 1 }
  uselistorder i32 %v1_10011467, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_20.1, { 2, 1, 0 }
  uselistorder i32 %stack_var_8.2, { 1, 0 }
  uselistorder i32 %v1_1001143c, { 1, 0 }
  uselistorder i32 %v6_10011430, { 1, 0 }
  uselistorder i8 %v1_10011406, { 2, 0, 3, 1 }
  uselistorder i32 %v0_10011418, { 1, 0 }
  uselistorder i32 %v3_100113eb, { 2, 1, 0 }
  uselistorder i32 %v4_1001139c, { 2, 1, 0 }
  uselistorder i8 %v3_1001139c, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 0, 10, 14, 1, 11, 2, 3, 12, 13, 4, 15, 16, 17, 5, 18, 19, 6, 20, 21, 7, 22, 23, 8, 24, 25, 9, 26, 27, 28, 29 }
  uselistorder i32* %edi.global-to-local, { 6, 0, 1, 2, 4, 5, 3, 7, 8, 9 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 2, 3, 4, 5, 9, 8, 6, 7, 10 }
  uselistorder i32* %ebx.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1, 8, 9, 10 }
  uselistorder i32* %eax.global-to-local, { 0, 21, 1, 18, 2, 3, 4, 19, 20, 5, 6, 16, 7, 10, 8, 9, 11, 12, 13, 28, 29, 14, 22, 17, 23, 15, 24, 25, 26, 27, 30, 31, 32 }
  uselistorder i8* null, { 3, 1, 2, 0, 4 }
  uselistorder i8 92, { 2, 0, 1 }
  uselistorder i8 4, { 7, 8, 9, 10, 0, 1, 6, 3, 4, 5, 2 }
  uselistorder i32 %arg4, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10011517, { 1, 0 }
  uselistorder label %dec_label_pc_10011509, { 1, 0 }
  uselistorder label %dec_label_pc_100114fb, { 1, 0 }
  uselistorder label %dec_label_pc_100114f9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_100114e3, { 1, 0 }
  uselistorder label %dec_label_pc_100114ac, { 1, 0 }
  uselistorder label %dec_label_pc_1001149c, { 1, 0 }
  uselistorder label %dec_label_pc_1001149a, { 1, 0 }
  uselistorder label %dec_label_pc_1001148c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10011467, { 1, 0 }
  uselistorder label %dec_label_pc_10011454, { 1, 0 }
  uselistorder label %dec_label_pc_10011430, { 1, 0 }
  uselistorder label %dec_label_pc_10011430.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10011423, { 4, 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_10011418, { 1, 0 }
  uselistorder label %dec_label_pc_10011406, { 1, 0 }
  uselistorder label %dec_label_pc_10011405, { 1, 0 }
  uselistorder label %dec_label_pc_100113eb, { 1, 0 }
  uselistorder label %dec_label_pc_100113e0, { 1, 0 }
  uselistorder label %dec_label_pc_100113d8, { 1, 0 }
  uselistorder label %dec_label_pc_100113c1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1001139c, { 1, 0 }
  uselistorder label %dec_label_pc_10011397, { 1, 0 }
}

define i32 @function_10011521() local_unnamed_addr {
dec_label_pc_10011521:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i1*, align 4
  %v0_10011523 = load i32, i32* @global_var_1001b5e8.200, align 8
  %v0_1001152a = load i32, i32* inttoptr (i32 268525732 to i32*), align 4
  store i32 %v0_1001152a, i32* @ebp, align 4
  %v0_10011530 = load i32, i32* @esi, align 4
  %v0_10011531 = load i32, i32* @edi, align 4
  %v5_10011531 = inttoptr i32 %v0_10011531 to i1*
  store i1* %v5_10011531, i1** %stack_var_-24, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  store i32 0, i32* @edi, align 4
  %v12_10011538 = icmp eq i32 %v0_10011523, 0
  %v1_1001153a = icmp eq i1 %v12_10011538, false
  br i1 %v1_1001153a, label %dec_label_pc_1001156f, label %dec_label_pc_1001153c

dec_label_pc_1001153c:                            ; preds = %dec_label_pc_10011521
  %v7_1001153c = call i16* @GetEnvironmentStringsW()
  %v9_1001153c = ptrtoint i16* %v7_1001153c to i32
  store i32 %v9_1001153c, i32* %esi.global-to-local, align 4
  %v1_10011540 = load i32, i32* %ebx.global-to-local, align 4
  %v12_10011540 = icmp eq i32 %v9_1001153c, %v1_10011540
  br i1 %v12_10011540, label %dec_label_pc_10011550, label %dec_label_pc_10011544

dec_label_pc_10011544:                            ; preds = %dec_label_pc_1001153c
  store i32 1, i32* @global_var_1001b5e8.200, align 8
  br label %dec_label_pc_10011578

dec_label_pc_10011550:                            ; preds = %dec_label_pc_1001153c
  %v0_10011550 = call i8* @GetEnvironmentStrings()
  %v2_10011550 = ptrtoint i8* %v0_10011550 to i32
  store i32 %v2_10011550, i32* @edi, align 4
  %v1_10011558 = load i32, i32* %ebx.global-to-local, align 4
  %v12_10011558 = icmp eq i32 %v2_10011550, %v1_10011558
  br i1 %v12_10011558, label %dec_label_pc_1001164a, label %dec_label_pc_10011560

dec_label_pc_10011560:                            ; preds = %dec_label_pc_10011550
  store i32 2, i32* @global_var_1001b5e8.200, align 8
  br label %dec_label_pc_100115fe

dec_label_pc_1001156f:                            ; preds = %dec_label_pc_10011521
  %v9_1001156f = icmp eq i32 %v0_10011523, 1
  %v1_10011572 = icmp eq i1 %v9_1001156f, false
  br i1 %v1_10011572, label %dec_label_pc_100115f9, label %dec_label_pc_10011578

dec_label_pc_10011578:                            ; preds = %dec_label_pc_1001156f, %dec_label_pc_10011544
  %v1_10011578 = phi i32 [ 0, %dec_label_pc_1001156f ], [ %v1_10011540, %dec_label_pc_10011544 ]
  %v0_10011578 = phi i32 [ 0, %dec_label_pc_1001156f ], [ %v9_1001153c, %dec_label_pc_10011544 ]
  %v12_10011578 = icmp eq i32 %v0_10011578, %v1_10011578
  %v1_1001157a = icmp eq i1 %v12_10011578, false
  br i1 %v1_1001157a, label %dec_label_pc_10011588, label %dec_label_pc_1001157c

dec_label_pc_1001157c:                            ; preds = %dec_label_pc_10011578
  %v0_1001157c = call i16* @GetEnvironmentStringsW()
  %v2_1001157c = ptrtoint i16* %v0_1001157c to i32
  store i32 %v2_1001157c, i32* %esi.global-to-local, align 4
  %v1_10011580 = load i32, i32* %ebx.global-to-local, align 4
  %v12_10011580 = icmp eq i32 %v2_1001157c, %v1_10011580
  br i1 %v12_10011580, label %dec_label_pc_1001164a, label %dec_label_pc_10011588

dec_label_pc_10011588:                            ; preds = %dec_label_pc_1001157c, %dec_label_pc_10011578
  %v0_100115ae = phi i32 [ %v1_10011580, %dec_label_pc_1001157c ], [ %v1_10011578, %dec_label_pc_10011578 ]
  %v0_100115ad = phi i32 [ %v2_1001157c, %dec_label_pc_1001157c ], [ %v0_10011578, %dec_label_pc_10011578 ]
  %v1_10011588 = inttoptr i32 %v0_100115ad to i16*
  %v2_10011588 = load i16, i16* %v1_10011588, align 2
  %v4_10011588 = trunc i32 %v0_100115ae to i16
  %v15_10011588 = icmp eq i16 %v2_10011588, %v4_10011588
  br i1 %v15_10011588, label %dec_label_pc_1001159d, label %dec_label_pc_1001158f

dec_label_pc_1001158f:                            ; preds = %dec_label_pc_10011596, %dec_label_pc_1001158f, %dec_label_pc_10011588
  %v0_1001158f = phi i32 [ %v0_100115ad, %dec_label_pc_10011588 ], [ %v1_10011590, %dec_label_pc_1001158f ], [ %v1_10011597, %dec_label_pc_10011596 ]
  %v1_10011590 = add i32 %v0_1001158f, 2
  %v1_10011591 = inttoptr i32 %v1_10011590 to i16*
  %v2_10011591 = load i16, i16* %v1_10011591, align 2
  %v15_10011591 = icmp eq i16 %v2_10011591, %v4_10011588
  %v1_10011594 = icmp eq i1 %v15_10011591, false
  br i1 %v1_10011594, label %dec_label_pc_1001158f, label %dec_label_pc_10011596

dec_label_pc_10011596:                            ; preds = %dec_label_pc_1001158f
  %v1_10011597 = add i32 %v0_1001158f, 4
  %v1_10011598 = inttoptr i32 %v1_10011597 to i16*
  %v2_10011598 = load i16, i16* %v1_10011598, align 2
  %v15_10011598 = icmp eq i16 %v2_10011598, %v4_10011588
  %v1_1001159b = icmp eq i1 %v15_10011598, false
  br i1 %v1_1001159b, label %dec_label_pc_1001158f, label %dec_label_pc_1001159d.loopexit

dec_label_pc_1001159d.loopexit:                   ; preds = %dec_label_pc_10011596
  br label %dec_label_pc_1001159d

dec_label_pc_1001159d:                            ; preds = %dec_label_pc_1001159d.loopexit, %dec_label_pc_10011588
  %v0_1001159d = phi i32 [ %v1_10011597, %dec_label_pc_1001159d.loopexit ], [ %v0_100115ad, %dec_label_pc_10011588 ]
  %v2_1001159d = sub i32 %v0_1001159d, %v0_100115ad
  %v2_100115a5 = sdiv i32 %v2_1001159d, 2
  %v5_100115a8 = inttoptr i32 %v0_100115ae to i8*
  %v1_100115a9 = add nsw i32 %v2_100115a5, 1
  %tmp45 = inttoptr i32 %v0_100115ae to i1*
  %v18_100115b4 = call i32 @WideCharToMultiByte(i32 %v0_100115ae, i32 %v0_100115ae, i16* %v1_10011588, i32 %v1_100115a9, i8* %v5_100115a8, i32 %v0_100115ae, i8* %v5_100115a8, i1* %tmp45)
  store i32 %v18_100115b4, i32* @ebp, align 4
  %v1_100115b8 = load i32, i32* %ebx.global-to-local, align 4
  %v12_100115b8 = icmp eq i32 %v18_100115b4, %v1_100115b8
  br i1 %v12_100115b8, label %dec_label_pc_100115ee, label %dec_label_pc_100115bc

dec_label_pc_100115bc:                            ; preds = %dec_label_pc_1001159d
  %v2_100115bd = call i32 @function_1000da64(i32 %v18_100115b4)
  %v2_100115c2 = load i32, i32* %ebx.global-to-local, align 4
  %v13_100115c2 = icmp eq i32 %v2_100115bd, %v2_100115c2
  br i1 %v13_100115c2, label %dec_label_pc_100115ee, label %dec_label_pc_100115cb

dec_label_pc_100115cb:                            ; preds = %dec_label_pc_100115bc
  %v0_100115d3 = load i32, i32* %esi.global-to-local, align 4
  %v5_100115d3 = inttoptr i32 %v0_100115d3 to i16*
  %v13_100115d6 = load i1*, i1** %stack_var_-24, align 4
  %tmp47 = inttoptr i32 %v2_100115bd to i8*
  %tmp48 = inttoptr i32 %v2_100115c2 to i8*
  %v19_100115d6 = call i32 @WideCharToMultiByte(i32 %v2_100115c2, i32 %v2_100115c2, i16* %v5_100115d3, i32 %v1_100115a9, i8* %tmp47, i32 %v2_100115c2, i8* %tmp48, i1* %v13_100115d6)
  %v1_100115d8 = icmp eq i32 %v19_100115d6, 0
  %v1_100115da = icmp eq i1 %v1_100115d8, false
  br i1 %v1_100115da, label %dec_label_pc_100115ea, label %dec_label_pc_100115dc

dec_label_pc_100115dc:                            ; preds = %dec_label_pc_100115cb
  %v2_100115e0 = call i32 @function_1000d97b(i32 %v2_100115bd)
  %v0_100115e6 = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_100115ea

dec_label_pc_100115ea:                            ; preds = %dec_label_pc_100115cb, %dec_label_pc_100115dc
  %v3_100115ea.in = phi i32 [ %v0_100115e6, %dec_label_pc_100115dc ], [ %v2_100115bd, %dec_label_pc_100115cb ]
  store i32 %v3_100115ea.in, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_100115ee

dec_label_pc_100115ee:                            ; preds = %dec_label_pc_100115bc, %dec_label_pc_1001159d, %dec_label_pc_100115ea
  %v0_100115ee = load i32, i32* %esi.global-to-local, align 4
  %v5_100115ee = inttoptr i32 %v0_100115ee to i16*
  %v5_100115ef = call i1 @FreeEnvironmentStringsW(i16* %v5_100115ee)
  %v0_100115f5 = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1001164c

dec_label_pc_100115f9:                            ; preds = %dec_label_pc_1001156f
  %v9_100115f9 = icmp eq i32 %v0_10011523, 2
  %v1_100115fc = icmp eq i1 %v9_100115f9, false
  br i1 %v1_100115fc, label %dec_label_pc_1001164a, label %dec_label_pc_100115fe

dec_label_pc_100115fe:                            ; preds = %dec_label_pc_100115f9, %dec_label_pc_10011560
  %v1_100115fe = phi i32 [ 0, %dec_label_pc_100115f9 ], [ %v1_10011558, %dec_label_pc_10011560 ]
  %v0_100115fe = phi i32 [ 0, %dec_label_pc_100115f9 ], [ %v2_10011550, %dec_label_pc_10011560 ]
  %v12_100115fe = icmp eq i32 %v0_100115fe, %v1_100115fe
  %v1_10011600 = icmp eq i1 %v12_100115fe, false
  br i1 %v1_10011600, label %dec_label_pc_1001160e, label %dec_label_pc_10011602

dec_label_pc_10011602:                            ; preds = %dec_label_pc_100115fe
  %v0_10011602 = call i8* @GetEnvironmentStrings()
  %v2_10011602 = ptrtoint i8* %v0_10011602 to i32
  store i32 %v2_10011602, i32* @edi, align 4
  %v1_1001160a = load i32, i32* %ebx.global-to-local, align 4
  %v12_1001160a = icmp eq i32 %v2_10011602, %v1_1001160a
  br i1 %v12_1001160a, label %dec_label_pc_1001164a, label %dec_label_pc_1001160e

dec_label_pc_1001160e:                            ; preds = %dec_label_pc_10011602, %dec_label_pc_100115fe
  %v3_1001160e = phi i32 [ %v1_1001160a, %dec_label_pc_10011602 ], [ %v1_100115fe, %dec_label_pc_100115fe ]
  %v1_1001161e = phi i32 [ %v2_10011602, %dec_label_pc_10011602 ], [ %v0_100115fe, %dec_label_pc_100115fe ]
  %v1_1001160e = inttoptr i32 %v1_1001161e to i8*
  %v2_1001160e = load i8, i8* %v1_1001160e, align 1
  %v4_1001160e = trunc i32 %v3_1001160e to i8
  %v15_1001160e = icmp eq i8 %v2_1001160e, %v4_1001160e
  br i1 %v15_1001160e, label %dec_label_pc_1001161e, label %dec_label_pc_10011614

dec_label_pc_10011614:                            ; preds = %dec_label_pc_10011619, %dec_label_pc_10011614, %dec_label_pc_1001160e
  %v0_10011614 = phi i32 [ %v1_1001161e, %dec_label_pc_1001160e ], [ %v1_10011614, %dec_label_pc_10011614 ], [ %v1_10011619, %dec_label_pc_10011619 ]
  %v1_10011614 = add i32 %v0_10011614, 1
  %v1_10011615 = inttoptr i32 %v1_10011614 to i8*
  %v2_10011615 = load i8, i8* %v1_10011615, align 1
  %v15_10011615 = icmp eq i8 %v2_10011615, %v4_1001160e
  %v1_10011617 = icmp eq i1 %v15_10011615, false
  br i1 %v1_10011617, label %dec_label_pc_10011614, label %dec_label_pc_10011619

dec_label_pc_10011619:                            ; preds = %dec_label_pc_10011614
  %v1_10011619 = add i32 %v0_10011614, 2
  %v1_1001161a = inttoptr i32 %v1_10011619 to i8*
  %v2_1001161a = load i8, i8* %v1_1001161a, align 1
  %v15_1001161a = icmp eq i8 %v2_1001161a, %v4_1001160e
  %v1_1001161c = icmp eq i1 %v15_1001161a, false
  br i1 %v1_1001161c, label %dec_label_pc_10011614, label %dec_label_pc_1001161e

dec_label_pc_1001161e:                            ; preds = %dec_label_pc_10011619, %dec_label_pc_1001160e
  %v0_1001161e = phi i32 [ %v1_1001161e, %dec_label_pc_1001160e ], [ %v1_10011619, %dec_label_pc_10011619 ]
  %v2_1001161e = sub i32 %v0_1001161e, %v1_1001161e
  %v1_10011620 = add i32 %v2_1001161e, 1
  store i32 %v1_10011620, i32* @ebp, align 4
  %v2_10011624 = call i32 @function_1000da64(i32 %v1_10011620)
  store i32 %v2_10011624, i32* @esi, align 4
  %v1_1001162c = load i32, i32* %ebx.global-to-local, align 4
  %v12_1001162c = icmp eq i32 %v2_10011624, %v1_1001162c
  %v1_1001162e = icmp eq i1 %v12_1001162c, false
  br i1 %v1_1001162e, label %dec_label_pc_10011634, label %dec_label_pc_10011630

dec_label_pc_10011630:                            ; preds = %dec_label_pc_1001161e
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_1001163f

dec_label_pc_10011634:                            ; preds = %dec_label_pc_1001161e
  %v0_10011634 = load i32, i32* @ebp, align 4
  %v0_10011635 = load i32, i32* @edi, align 4
  %v5_10011637 = inttoptr i32 %v2_10011624 to i8*
  %v6_10011637 = call i32 @function_1000dba0(i8* %v5_10011637, i32 %v0_10011635, i32 %v0_10011634)
  br label %dec_label_pc_1001163f

dec_label_pc_1001163f:                            ; preds = %dec_label_pc_10011630, %dec_label_pc_10011634
  %v0_1001163f = load i32, i32* @edi, align 4
  %tmp50 = inttoptr i32 %v0_1001163f to i8*
  %v5_10011640 = call i1 @FreeEnvironmentStringsA(i8* %tmp50)
  %v0_10011646 = load i32, i32* @esi, align 4
  br label %dec_label_pc_1001164c

dec_label_pc_1001164a:                            ; preds = %dec_label_pc_10011602, %dec_label_pc_100115f9, %dec_label_pc_1001157c, %dec_label_pc_10011550
  br label %dec_label_pc_1001164c

dec_label_pc_1001164c:                            ; preds = %dec_label_pc_1001163f, %dec_label_pc_100115ee, %dec_label_pc_1001164a
  %v0_10011652 = phi i32 [ 0, %dec_label_pc_1001164a ], [ %v0_10011646, %dec_label_pc_1001163f ], [ %v0_100115f5, %dec_label_pc_100115ee ]
  %v2_1001164c = load i1*, i1** %stack_var_-24, align 4
  %v3_1001164c = ptrtoint i1* %v2_1001164c to i32
  store i32 %v3_1001164c, i32* @edi, align 4
  store i32 %v0_10011530, i32* @esi, align 4
  ret i32 %v0_10011652

; uselistorder directives
  uselistorder i32 %v2_10011624, { 1, 0, 2 }
  uselistorder i32 %v1_10011619, { 0, 2, 1 }
  uselistorder i32 %v1_10011614, { 1, 0 }
  uselistorder i32 %v1_1001161e, { 2, 1, 0, 3 }
  uselistorder i32 %v1_1001160a, { 1, 0 }
  uselistorder i32 %v2_10011602, { 1, 0, 2 }
  uselistorder i32 %v0_100115fe, { 1, 0 }
  uselistorder i32 %v1_100115fe, { 1, 0 }
  uselistorder i32 %v2_100115c2, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v2_100115bd, { 1, 2, 3, 0 }
  uselistorder i32 %v18_100115b4, { 1, 0, 2 }
  uselistorder i8* %v5_100115a8, { 1, 0 }
  uselistorder i32 %v1_10011597, { 1, 2, 0 }
  uselistorder i32 %v1_10011590, { 1, 0 }
  uselistorder i16 %v4_10011588, { 0, 2, 1 }
  uselistorder i32 %v0_100115ad, { 1, 2, 0, 3 }
  uselistorder i32 %v0_100115ae, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v1_10011580, { 1, 0 }
  uselistorder i32 %v2_1001157c, { 1, 0, 2 }
  uselistorder i32 %v0_10011578, { 1, 0 }
  uselistorder i32 %v1_10011578, { 1, 0 }
  uselistorder i32 %v1_10011558, { 1, 0 }
  uselistorder i32 %v2_10011550, { 1, 0, 2 }
  uselistorder i32 %v1_10011540, { 1, 0 }
  uselistorder i32 %v9_1001153c, { 1, 0, 2 }
  uselistorder i1** %stack_var_-24, { 1, 2, 0 }
  uselistorder i32* %esi.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 (i8*, i32, i32)* @function_1000dba0, { 1, 0 }
  uselistorder i32 (i32)* @function_1000d97b, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1, 18, 17, 16, 15, 14, 13 }
  uselistorder i32 (i32)* @function_1000da64, { 7, 6, 5, 4, 3, 2, 1, 0, 13, 12, 11, 10, 9, 8 }
  uselistorder i32 (i32, i32, i16*, i32, i8*, i32, i8*, i1*)* @WideCharToMultiByte, { 1, 0 }
  uselistorder i8* ()* @GetEnvironmentStrings, { 1, 0 }
  uselistorder i16* ()* @GetEnvironmentStringsW, { 1, 0 }
  uselistorder label %dec_label_pc_1001164c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1001163f, { 1, 0 }
  uselistorder label %dec_label_pc_100115ee, { 2, 0, 1 }
  uselistorder label %dec_label_pc_100115ea, { 1, 0 }
}

define i32 @function_10011653(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10011653:
  ret i32 1
}

define i32 @function_10011659() local_unnamed_addr {
dec_label_pc_10011659:
  %v0_10011659 = load i32, i32* @global_var_1001b42c.201, align 4
  %v9_1001165e = icmp eq i32 %v0_10011659, 1
  br i1 %v9_1001165e, label %dec_label_pc_10011670, label %dec_label_pc_10011663

dec_label_pc_10011663:                            ; preds = %dec_label_pc_10011659
  %v5_1001165e = icmp eq i32 %v0_10011659, 0
  %v1_10011665 = icmp eq i1 %v5_1001165e, false
  br i1 %v1_10011665, label %dec_label_pc_10011691, label %dec_label_pc_10011667

dec_label_pc_10011667:                            ; preds = %dec_label_pc_10011663
  %v0_10011667 = load i32, i32* @global_var_1001b430.202, align 16
  %v9_10011667 = icmp eq i32 %v0_10011667, 1
  %v1_1001166e = icmp eq i1 %v9_10011667, false
  br i1 %v1_1001166e, label %dec_label_pc_10011691, label %dec_label_pc_10011670

dec_label_pc_10011670:                            ; preds = %dec_label_pc_10011667, %dec_label_pc_10011659
  %v1_10011675 = call i32 @function_10011692(i32 252)
  %v0_1001167a = load i32, i32* @global_var_1001b5ec.203, align 4
  %v1_10011680 = icmp eq i32 %v0_1001167a, 0
  br i1 %v1_10011680, label %dec_label_pc_10011686, label %dec_label_pc_10011684

dec_label_pc_10011684:                            ; preds = %dec_label_pc_10011670
  %v1_10011684 = call i32 @unknown_0(i32 252)
  br label %dec_label_pc_10011686

dec_label_pc_10011686:                            ; preds = %dec_label_pc_10011684, %dec_label_pc_10011670
  %v1_1001168b = call i32 @function_10011692(i32 255)
  br label %dec_label_pc_10011691

dec_label_pc_10011691:                            ; preds = %dec_label_pc_10011667, %dec_label_pc_10011663, %dec_label_pc_10011686
  %v0_10011691 = phi i32 [ %v0_10011659, %dec_label_pc_10011667 ], [ %v0_10011659, %dec_label_pc_10011663 ], [ %v1_1001168b, %dec_label_pc_10011686 ]
  ret i32 %v0_10011691

; uselistorder directives
  uselistorder i32 %v0_10011659, { 1, 2, 3, 0 }
  uselistorder i32 (i32)* @function_10011692, { 1, 0 }
  uselistorder label %dec_label_pc_10011691, { 2, 0, 1 }
}

define i32 @function_10011692(i32 %arg1) local_unnamed_addr {
dec_label_pc_10011692:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_4, align 4
  %stack_var_-164 = alloca i32, align 4
  %stack_var_-483 = alloca i32, align 4
  %stack_var_-436 = alloca i8*, align 4
  %stack_var_-432 = alloca %_OVERLAPPED*, align 4
  %stack_var_-428 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %v15_10011695 = ptrtoint i32* %stack_var_-424 to i32
  store i32 %arg1, i32* @edx, align 4
  br label %dec_label_pc_100116a5

dec_label_pc_100116a5:                            ; preds = %dec_label_pc_100116a9, %dec_label_pc_10011692
  %v0_100116ac = phi i32 [ %v1_100116ac, %dec_label_pc_100116a9 ], [ 0, %dec_label_pc_10011692 ]
  %v0_100116a9 = phi i32 [ %v1_100116a9, %dec_label_pc_100116a9 ], [ ptrtoint (i32* @global_var_1001a8d0.204 to i32), %dec_label_pc_10011692 ]
  %v2_100116a5 = inttoptr i32 %v0_100116a9 to i32*
  %v3_100116a5 = load i32, i32* %v2_100116a5, align 4
  %v14_100116a5 = icmp eq i32 %v3_100116a5, %arg1
  br i1 %v14_100116a5, label %dec_label_pc_100116b4, label %dec_label_pc_100116a9

dec_label_pc_100116a9:                            ; preds = %dec_label_pc_100116a5
  %v1_100116a9 = add i32 %v0_100116a9, 8
  %v1_100116ac = add nuw nsw i32 %v0_100116ac, 1
  %v5_100116b2 = icmp slt i32 %v1_100116a9, 268544352
  br i1 %v5_100116b2, label %dec_label_pc_100116a5, label %dec_label_pc_100116b4

dec_label_pc_100116b4:                            ; preds = %dec_label_pc_100116a9, %dec_label_pc_100116a5
  %v0_100117e414 = phi i32 [ %v1_100116a9, %dec_label_pc_100116a9 ], [ %v0_100116a9, %dec_label_pc_100116a5 ]
  %v0_100116b5 = phi i32 [ %v1_100116ac, %dec_label_pc_100116a9 ], [ %v0_100116ac, %dec_label_pc_100116a5 ]
  %v0_100116b4 = load i32, i32* @esi, align 4
  store i32 %v0_100116b4, i32* %stack_var_-428, align 4
  %v2_100116b7 = mul i32 %v0_100116b5, 8
  store i32 %v2_100116b7, i32* @esi, align 4
  %v2_100116ba = add i32 %v2_100116b7, ptrtoint (i32* @global_var_1001a8d0.204 to i32)
  %v3_100116ba = inttoptr i32 %v2_100116ba to i32*
  %v4_100116ba = load i32, i32* %v3_100116ba, align 4
  %v15_100116ba = icmp eq i32 %v4_100116ba, %arg1
  %v1_100116c0 = icmp eq i1 %v15_100116ba, false
  br i1 %v1_100116c0, label %dec_label_pc_100117e2, label %dec_label_pc_100116c6

dec_label_pc_100116c6:                            ; preds = %dec_label_pc_100116b4
  %v0_100116c6 = load i32, i32* @global_var_1001b42c.201, align 4
  %v9_100116cb = icmp eq i32 %v0_100116c6, 1
  br i1 %v9_100116cb, label %dec_label_pc_100117bc, label %dec_label_pc_100116d4

dec_label_pc_100116d4:                            ; preds = %dec_label_pc_100116c6
  %v5_100116cb = icmp eq i32 %v0_100116c6, 0
  %v1_100116d6 = icmp eq i1 %v5_100116cb, false
  br i1 %v1_100116d6, label %dec_label_pc_100116e5, label %dec_label_pc_100116d8

dec_label_pc_100116d8:                            ; preds = %dec_label_pc_100116d4
  %v0_100116d8 = load i32, i32* @global_var_1001b430.202, align 16
  %v9_100116d8 = icmp eq i32 %v0_100116d8, 1
  br i1 %v9_100116d8, label %dec_label_pc_100117bc, label %dec_label_pc_100116e5

dec_label_pc_100116e5:                            ; preds = %dec_label_pc_100116d8, %dec_label_pc_100116d4
  %v9_100116e5 = icmp eq i32 %arg1, 252
  br i1 %v9_100116e5, label %dec_label_pc_100117e2, label %dec_label_pc_100116f1

dec_label_pc_100116f1:                            ; preds = %dec_label_pc_100116e5
  store %_OVERLAPPED* inttoptr (i32 260 to %_OVERLAPPED*), %_OVERLAPPED** %stack_var_-432, align 4
  %tmp34 = bitcast i32* %stack_var_-424 to i8*
  store i8* %tmp34, i8** %stack_var_-436, align 4
  %v9_100116ff = call i32 @GetModuleFileNameA(i32* null, i8* %tmp34, i32 260)
  %v1_10011705 = icmp eq i32 %v9_100116ff, 0
  %v1_10011707 = icmp eq i1 %v1_10011705, false
  br i1 %v1_10011707, label %dec_label_pc_1001171c, label %dec_label_pc_10011709

dec_label_pc_10011709:                            ; preds = %dec_label_pc_100116f1
  store %_OVERLAPPED* bitcast ([23 x i8]* @global_var_10016618.205 to %_OVERLAPPED*), %_OVERLAPPED** %stack_var_-432, align 4
  store i8* %tmp34, i8** %stack_var_-436, align 4
  %v2_10011715 = call i32 @function_1000d570(i32 %v15_10011695)
  br label %dec_label_pc_1001171c

dec_label_pc_1001171c:                            ; preds = %dec_label_pc_100116f1, %dec_label_pc_10011709
  %v0_10011722 = load i32, i32* @edi, align 4
  %v5_10011722 = inttoptr i32 %v0_10011722 to %_OVERLAPPED*
  store %_OVERLAPPED* %v5_10011722, %_OVERLAPPED** %stack_var_-432, align 4
  store i8* %tmp34, i8** %stack_var_-436, align 4
  store i32 %v15_10011695, i32* @edi, align 4
  %v3_1001172a = call i32 @function_1000d900(i8* %tmp34)
  %v1_1001172f = add i32 %v3_1001172a, 1
  %tmp = icmp ult i32 %v1_1001172f, 61
  br i1 %tmp, label %dec_label_pc_1001171c.dec_label_pc_1001175f_crit_edge, label %dec_label_pc_10011736

dec_label_pc_1001171c.dec_label_pc_1001175f_crit_edge: ; preds = %dec_label_pc_1001171c
  br label %dec_label_pc_1001175f

dec_label_pc_10011736:                            ; preds = %dec_label_pc_1001171c
  store i8* %tmp34, i8** %stack_var_-436, align 4
  %v3_1001173d = call i32 @function_1000d900(i8* %tmp34)
  %v15_1001174a = ptrtoint i32* %stack_var_-483 to i32
  store i32 %v15_1001174a, i32* @eax, align 4
  %v2_1001174f = add i32 %v3_1001173d, %v15_1001174a
  store i32 %v2_1001174f, i32* @edi, align 4
  %v3_10011757 = inttoptr i32 %v2_1001174f to i8*
  %v4_10011757 = call i32 @function_1000d740(i8* %v3_10011757, i32 ptrtoint ([4 x i8]* @global_var_10016614.206 to i32), i32 3)
  br label %dec_label_pc_1001175f

dec_label_pc_1001175f:                            ; preds = %dec_label_pc_1001171c.dec_label_pc_1001175f_crit_edge, %dec_label_pc_10011736
  %v2_1001175f = ptrtoint i32* %stack_var_-164 to i32
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @global_var_100165f8.207, i32 0, i32 0), i8** %stack_var_-436, align 4
  %v1_1001176b = call i32 @function_1000d570(i32 %v2_1001175f)
  store i32 %v2_1001175f, i32* @eax, align 4
  %v0_10011776 = load i32, i32* @edi, align 4
  %v2_10011778 = bitcast i32* %stack_var_-164 to i8*
  %v3_10011778 = call i32 @function_1000d580(i8* %v2_10011778, i32 %v0_10011776)
  store i32 %v2_1001175f, i32* @eax, align 4
  %v4_10011789 = call i32 @function_1000d580(i8* %v2_10011778, i32 ptrtoint ([3 x i8]* @global_var_100165f4.208 to i32))
  %v0_1001178e = load i32, i32* @esi, align 4
  %v1_1001178e = add i32 %v0_1001178e, ptrtoint ([37 x i8]** @global_var_1001a8d4.210 to i32)
  %v2_1001178e = inttoptr i32 %v1_1001178e to i32*
  %v3_1001178e = load i32, i32* %v2_1001178e, align 4
  store i32 %v2_1001175f, i32* @eax, align 4
  %v3_1001179b = call i32 @function_1000d580(i8* %v2_10011778, i32 %v3_1001178e)
  %v5_100117b1 = call i32 @function_10013cc0(i32 %v2_1001175f, i32 ptrtoint ([37 x i8]* @global_var_100165cc.211 to i32), i32* inttoptr (i32 73744 to i32*))
  %v2_100117b9 = load %_OVERLAPPED*, %_OVERLAPPED** %stack_var_-432, align 4
  %v3_100117b9 = ptrtoint %_OVERLAPPED* %v2_100117b9 to i32
  store i32 %v3_100117b9, i32* @edi, align 4
  br label %dec_label_pc_100117e2

dec_label_pc_100117bc:                            ; preds = %dec_label_pc_100116d8, %dec_label_pc_100116c6
  %v1_100117bf = add i32 %v2_100116b7, ptrtoint ([37 x i8]** @global_var_1001a8d4.210 to i32)
  store i32 %v1_100117bf, i32* %esi.global-to-local, align 4
  store %_OVERLAPPED* null, %_OVERLAPPED** %stack_var_-432, align 4
  %tmp35 = bitcast i32* %stack_var_4 to i8*
  store i8* %tmp35, i8** %stack_var_-436, align 4
  %v1_100117c8 = inttoptr i32 %v1_100117bf to i32*
  %v2_100117c8 = load i32, i32* %v1_100117c8, align 4
  %v1_100117ca = inttoptr i32 %v2_100117c8 to i8*
  %v2_100117ca = call i32 @function_1000d900(i8* %v1_100117ca)
  %v0_100117d1 = load i32, i32* %esi.global-to-local, align 4
  %v1_100117d1 = inttoptr i32 %v0_100117d1 to i32*
  %v2_100117d1 = load i32, i32* %v1_100117d1, align 4
  %v3_100117d5 = call i32* @GetStdHandle(i32 -12)
  %v5_100117dc = load i8*, i8** %stack_var_-436, align 4
  %v7_100117dc = load %_OVERLAPPED*, %_OVERLAPPED** %stack_var_-432, align 4
  %v10_100117dc = inttoptr i32 %v2_100117d1 to i32*
  %tmp36 = bitcast i8* %v5_100117dc to i32*
  %v13_100117dc = call i1 @WriteFile(i32* %v3_100117d5, i32* %v10_100117dc, i32 %v2_100117ca, i32* %tmp36, %_OVERLAPPED* %v7_100117dc)
  %v14_100117dc = sext i1 %v13_100117dc to i32
  br label %dec_label_pc_100117e2

dec_label_pc_100117e2:                            ; preds = %dec_label_pc_100116e5, %dec_label_pc_100116b4, %dec_label_pc_1001175f, %dec_label_pc_100117bc
  %v0_100117e4 = phi i32 [ %v0_100116c6, %dec_label_pc_100116e5 ], [ %v0_100117e414, %dec_label_pc_100116b4 ], [ %v5_100117b1, %dec_label_pc_1001175f ], [ %v14_100117dc, %dec_label_pc_100117bc ]
  %v2_100117e2 = load i32, i32* %stack_var_-428, align 4
  store i32 %v2_100117e2, i32* @esi, align 4
  ret i32 %v0_100117e4

; uselistorder directives
  uselistorder i8* %tmp34, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %v0_100116c6, { 1, 2, 0 }
  uselistorder i32 %v2_100116b7, { 2, 1, 0 }
  uselistorder i32 %v1_100116a9, { 0, 2, 1 }
  uselistorder i32 %v15_10011695, { 1, 0 }
  uselistorder %_OVERLAPPED** %stack_var_-432, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8** %stack_var_-436, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* (i32)* @GetStdHandle, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_1000d580, { 1, 2, 3, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_1000d740, { 1, 0 }
  uselistorder i32 (i32*, i8*, i32)* @GetModuleFileNameA, { 2, 1, 0 }
  uselistorder i32* null, { 4, 0, 1, 5, 6, 8, 9, 10, 7, 11, 12, 13, 2, 3 }
  uselistorder i32 260, { 0, 3, 1, 2 }
  uselistorder i32 252, { 0, 2, 3, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_1001a8d0.204 to i32), { 1, 0 }
  uselistorder label %dec_label_pc_100117e2, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_1001175f, { 1, 0 }
  uselistorder label %dec_label_pc_1001171c, { 1, 0 }
}

define i32 @function_100117e5(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100117e5:
  %v0_100117e8 = load i32, i32* @ecx, align 4
  %v0_100117e9 = load i32, i32* @esi, align 4
  %v3_100117f1 = trunc i32 %v0_100117e8 to i8
  %v4_100117f1 = call i32 @function_10011830(i8 %v3_100117f1, i32 %v0_100117e9, i32 %v0_100117e8)
  %v1_100117fb = sub i32 -1, %arg2
  %v2_100117fd = and i32 %v4_100117f1, %v1_100117fb
  %v5_10011802 = and i32 %arg2, %arg1
  %v2_10011805 = or i32 %v2_100117fd, %v5_10011802
  %v5_10011805 = trunc i32 %v2_10011805 to i8
  store i32 %v2_10011805, i32* @esi, align 4
  %v2_10011808 = call i32 @function_100118c2(i8 %v5_10011805)
  %v0_10011815 = load i32, i32* @esi, align 4
  ret i32 %v0_10011815

; uselistorder directives
  uselistorder i32 %v0_100117e8, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @function_1001181a(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1001181a:
  %v1_1001181e = and i32 %arg2, -524289
  %v2_10011828 = call i32 @function_100117e5(i32 %arg1, i32 %v1_1001181e)
  ret i32 %v2_10011828
}

define i32 @function_10011830(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10011830:
  %v4_10011831 = sext i8 %arg1 to i32
  %v2_10011838 = and i32 %v4_10011831, 1
  %v3_10011838 = icmp eq i32 %v2_10011838, 0
  br i1 %v3_10011838, label %dec_label_pc_10011841, label %dec_label_pc_1001183e

dec_label_pc_1001183e:                            ; preds = %dec_label_pc_10011830
  br label %dec_label_pc_10011841

dec_label_pc_10011841:                            ; preds = %dec_label_pc_10011830, %dec_label_pc_1001183e
  %v8_10011846 = phi i32 [ 0, %dec_label_pc_10011830 ], [ 16, %dec_label_pc_1001183e ]
  %v2_10011841 = and i32 %v4_10011831, 4
  %v3_10011841 = icmp eq i32 %v2_10011841, 0
  br i1 %v3_10011841, label %dec_label_pc_10011848, label %dec_label_pc_10011846

dec_label_pc_10011846:                            ; preds = %dec_label_pc_10011841
  %v2_10011846 = or i32 %v8_10011846, 8
  br label %dec_label_pc_10011848

dec_label_pc_10011848:                            ; preds = %dec_label_pc_10011841, %dec_label_pc_10011846
  %v8_1001184d = phi i32 [ %v8_10011846, %dec_label_pc_10011841 ], [ %v2_10011846, %dec_label_pc_10011846 ]
  %v2_10011848 = and i32 %v4_10011831, 8
  %v3_10011848 = icmp eq i32 %v2_10011848, 0
  br i1 %v3_10011848, label %dec_label_pc_1001184f, label %dec_label_pc_1001184d

dec_label_pc_1001184d:                            ; preds = %dec_label_pc_10011848
  %v2_1001184d = and i32 %v8_1001184d, 251
  %v7_1001184d = or i32 %v2_1001184d, 4
  br label %dec_label_pc_1001184f

dec_label_pc_1001184f:                            ; preds = %dec_label_pc_10011848, %dec_label_pc_1001184d
  %v8_10011854 = phi i32 [ %v8_1001184d, %dec_label_pc_10011848 ], [ %v7_1001184d, %dec_label_pc_1001184d ]
  %v2_1001184f = and i32 %v4_10011831, 16
  %v3_1001184f = icmp eq i32 %v2_1001184f, 0
  br i1 %v3_1001184f, label %dec_label_pc_10011856, label %dec_label_pc_10011854

dec_label_pc_10011854:                            ; preds = %dec_label_pc_1001184f
  %v10_10011854 = or i32 %v8_10011854, 2
  br label %dec_label_pc_10011856

dec_label_pc_10011856:                            ; preds = %dec_label_pc_1001184f, %dec_label_pc_10011854
  %v8_1001185b = phi i32 [ %v8_10011854, %dec_label_pc_1001184f ], [ %v10_10011854, %dec_label_pc_10011854 ]
  %v2_10011856 = and i32 %v4_10011831, 32
  %v3_10011856 = icmp eq i32 %v2_10011856, 0
  br i1 %v3_10011856, label %dec_label_pc_1001185d, label %dec_label_pc_1001185b

dec_label_pc_1001185b:                            ; preds = %dec_label_pc_10011856
  %v10_1001185b = or i32 %v8_1001185b, 1
  br label %dec_label_pc_1001185d

dec_label_pc_1001185d:                            ; preds = %dec_label_pc_10011856, %dec_label_pc_1001185b
  %v0_10011862 = phi i32 [ %v8_1001185b, %dec_label_pc_10011856 ], [ %v10_1001185b, %dec_label_pc_1001185b ]
  %v2_1001185d = and i32 %v4_10011831, 2
  %v3_1001185d = icmp eq i32 %v2_1001185d, 0
  br i1 %v3_1001185d, label %dec_label_pc_10011867, label %dec_label_pc_10011862

dec_label_pc_10011862:                            ; preds = %dec_label_pc_1001185d
  %v1_10011862 = or i32 %v0_10011862, 524288
  br label %dec_label_pc_10011867

dec_label_pc_10011867:                            ; preds = %dec_label_pc_1001185d, %dec_label_pc_10011862
  %v9_1001189c = phi i32 [ %v0_10011862, %dec_label_pc_1001185d ], [ %v1_10011862, %dec_label_pc_10011862 ]
  %v2_10011877 = and i32 %v4_10011831, 3072
  %v3_10011877 = icmp eq i32 %v2_10011877, 0
  br i1 %v3_10011877, label %dec_label_pc_1001189f, label %dec_label_pc_10011880

dec_label_pc_10011880:                            ; preds = %dec_label_pc_10011867
  %v6_10011880 = icmp eq i32 %v2_10011877, 1024
  br i1 %v6_10011880, label %dec_label_pc_1001189c, label %dec_label_pc_10011888

dec_label_pc_10011888:                            ; preds = %dec_label_pc_10011880
  %v6_10011888 = icmp eq i32 %v2_10011877, 2048
  br i1 %v6_10011888, label %dec_label_pc_10011898, label %dec_label_pc_10011890

dec_label_pc_10011890:                            ; preds = %dec_label_pc_10011888
  %v12_10011890 = icmp eq i32 %v2_10011877, 3072
  %v1_10011892 = icmp eq i1 %v12_10011890, false
  br i1 %v1_10011892, label %dec_label_pc_1001189f, label %dec_label_pc_10011894

dec_label_pc_10011894:                            ; preds = %dec_label_pc_10011890
  %v2_10011894 = or i32 %v9_1001189c, 768
  br label %dec_label_pc_1001189f

dec_label_pc_10011898:                            ; preds = %dec_label_pc_10011888
  %v2_10011898 = or i32 %v9_1001189c, 512
  br label %dec_label_pc_1001189f

dec_label_pc_1001189c:                            ; preds = %dec_label_pc_10011880
  %v1_1001189c = udiv i32 %v9_1001189c, 256
  %v3_1001189c = and i32 %v1_1001189c, 254
  %v8_1001189c = or i32 %v3_1001189c, 1
  %v10_1001189c = mul nuw nsw i32 %v8_1001189c, 256
  %v11_1001189c = and i32 %v9_1001189c, -65281
  %v12_1001189c = or i32 %v10_1001189c, %v11_1001189c
  br label %dec_label_pc_1001189f

dec_label_pc_1001189f:                            ; preds = %dec_label_pc_10011890, %dec_label_pc_10011867, %dec_label_pc_10011898, %dec_label_pc_10011894, %dec_label_pc_1001189c
  %v0_100118af = phi i32 [ %v9_1001189c, %dec_label_pc_10011890 ], [ %v9_1001189c, %dec_label_pc_10011867 ], [ %v2_10011898, %dec_label_pc_10011898 ], [ %v2_10011894, %dec_label_pc_10011894 ], [ %v12_1001189c, %dec_label_pc_1001189c ]
  %v2_1001189f = and i32 %v4_10011831, 768
  %v3_1001189f = icmp eq i32 %v2_1001189f, 0
  br i1 %v3_1001189f, label %dec_label_pc_100118af, label %dec_label_pc_100118a4

dec_label_pc_100118a4:                            ; preds = %dec_label_pc_1001189f
  %v12_100118a4 = icmp eq i32 %v2_1001189f, 512
  %v1_100118a6 = icmp eq i1 %v12_100118a4, false
  br i1 %v1_100118a6, label %dec_label_pc_100118b4, label %dec_label_pc_100118a8

dec_label_pc_100118a8:                            ; preds = %dec_label_pc_100118a4
  %v1_100118a8 = or i32 %v0_100118af, 65536
  br label %dec_label_pc_100118b4

dec_label_pc_100118af:                            ; preds = %dec_label_pc_1001189f
  %v1_100118af = or i32 %v0_100118af, 131072
  br label %dec_label_pc_100118b4

dec_label_pc_100118b4:                            ; preds = %dec_label_pc_100118a4, %dec_label_pc_100118a8, %dec_label_pc_100118af
  %v0_100118bc = phi i32 [ %v0_100118af, %dec_label_pc_100118a4 ], [ %v1_100118a8, %dec_label_pc_100118a8 ], [ %v1_100118af, %dec_label_pc_100118af ]
  %v3_100118b6 = and i32 %v4_10011831, 4096
  %v4_100118b6 = icmp eq i32 %v3_100118b6, 0
  br i1 %v4_100118b6, label %dec_label_pc_100118c1, label %dec_label_pc_100118bc

dec_label_pc_100118bc:                            ; preds = %dec_label_pc_100118b4
  %v1_100118bc = or i32 %v0_100118bc, 262144
  br label %dec_label_pc_100118c1

dec_label_pc_100118c1:                            ; preds = %dec_label_pc_100118b4, %dec_label_pc_100118bc
  %v0_100118c1 = phi i32 [ %v0_100118bc, %dec_label_pc_100118b4 ], [ %v1_100118bc, %dec_label_pc_100118bc ]
  ret i32 %v0_100118c1

; uselistorder directives
  uselistorder i32 %v9_1001189c, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 %v8_1001185b, { 1, 0 }
  uselistorder i32 %v8_10011854, { 1, 0 }
  uselistorder i32 %v8_1001184d, { 1, 0 }
  uselistorder i32 %v8_10011846, { 1, 0 }
  uselistorder i32 %v4_10011831, { 1, 0, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 131072, { 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 254, { 0, 2, 1 }
  uselistorder i32 3072, { 0, 3, 1, 4, 7, 2, 5, 6 }
  uselistorder label %dec_label_pc_100118c1, { 1, 0 }
  uselistorder label %dec_label_pc_100118b4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1001189f, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_10011867, { 1, 0 }
  uselistorder label %dec_label_pc_1001185d, { 1, 0 }
  uselistorder label %dec_label_pc_10011856, { 1, 0 }
  uselistorder label %dec_label_pc_1001184f, { 1, 0 }
  uselistorder label %dec_label_pc_10011848, { 1, 0 }
  uselistorder label %dec_label_pc_10011841, { 1, 0 }
}

define i32 @function_100118c2(i8 %arg1) local_unnamed_addr {
dec_label_pc_100118c2:
  %v4_100118c3 = sext i8 %arg1 to i32
  %v2_100118ca = and i32 %v4_100118c3, 16
  %v3_100118ca = icmp eq i32 %v2_100118ca, 0
  br i1 %v3_100118ca, label %dec_label_pc_100118d2, label %dec_label_pc_100118cf

dec_label_pc_100118cf:                            ; preds = %dec_label_pc_100118c2
  br label %dec_label_pc_100118d2

dec_label_pc_100118d2:                            ; preds = %dec_label_pc_100118c2, %dec_label_pc_100118cf
  %v8_100118d7 = phi i32 [ 0, %dec_label_pc_100118c2 ], [ 1, %dec_label_pc_100118cf ]
  %v2_100118d2 = and i32 %v4_100118c3, 8
  %v3_100118d2 = icmp eq i32 %v2_100118d2, 0
  br i1 %v3_100118d2, label %dec_label_pc_100118d9, label %dec_label_pc_100118d7

dec_label_pc_100118d7:                            ; preds = %dec_label_pc_100118d2
  %v2_100118d7 = or i32 %v8_100118d7, 4
  br label %dec_label_pc_100118d9

dec_label_pc_100118d9:                            ; preds = %dec_label_pc_100118d2, %dec_label_pc_100118d7
  %v8_100118de = phi i32 [ %v8_100118d7, %dec_label_pc_100118d2 ], [ %v2_100118d7, %dec_label_pc_100118d7 ]
  %v2_100118d9 = and i32 %v4_100118c3, 4
  %v3_100118d9 = icmp eq i32 %v2_100118d9, 0
  br i1 %v3_100118d9, label %dec_label_pc_100118e0, label %dec_label_pc_100118de

dec_label_pc_100118de:                            ; preds = %dec_label_pc_100118d9
  %v2_100118de = and i32 %v8_100118de, 247
  %v7_100118de = or i32 %v2_100118de, 8
  br label %dec_label_pc_100118e0

dec_label_pc_100118e0:                            ; preds = %dec_label_pc_100118d9, %dec_label_pc_100118de
  %v8_100118e5 = phi i32 [ %v8_100118de, %dec_label_pc_100118d9 ], [ %v7_100118de, %dec_label_pc_100118de ]
  %v2_100118e0 = and i32 %v4_100118c3, 2
  %v3_100118e0 = icmp eq i32 %v2_100118e0, 0
  br i1 %v3_100118e0, label %dec_label_pc_100118e7, label %dec_label_pc_100118e5

dec_label_pc_100118e5:                            ; preds = %dec_label_pc_100118e0
  %v10_100118e5 = or i32 %v8_100118e5, 16
  br label %dec_label_pc_100118e7

dec_label_pc_100118e7:                            ; preds = %dec_label_pc_100118e0, %dec_label_pc_100118e5
  %v8_100118ec = phi i32 [ %v8_100118e5, %dec_label_pc_100118e0 ], [ %v10_100118e5, %dec_label_pc_100118e5 ]
  %v2_100118e7 = and i32 %v4_100118c3, 1
  %v3_100118e7 = icmp eq i32 %v2_100118e7, 0
  br i1 %v3_100118e7, label %dec_label_pc_100118ee, label %dec_label_pc_100118ec

dec_label_pc_100118ec:                            ; preds = %dec_label_pc_100118e7
  %v10_100118ec = or i32 %v8_100118ec, 32
  br label %dec_label_pc_100118ee

dec_label_pc_100118ee:                            ; preds = %dec_label_pc_100118e7, %dec_label_pc_100118ec
  %v8_100118f6 = phi i32 [ %v8_100118ec, %dec_label_pc_100118e7 ], [ %v10_100118ec, %dec_label_pc_100118ec ]
  %v1_100118ee = and i32 %v4_100118c3, 524288
  %v2_100118ee = icmp eq i32 %v1_100118ee, 0
  br i1 %v2_100118ee, label %dec_label_pc_100118f8, label %dec_label_pc_100118f6

dec_label_pc_100118f6:                            ; preds = %dec_label_pc_100118ee
  %v10_100118f6 = or i32 %v8_100118f6, 2
  br label %dec_label_pc_100118f8

dec_label_pc_100118f8:                            ; preds = %dec_label_pc_100118ee, %dec_label_pc_100118f6
  %v9_10011922 = phi i32 [ %v8_100118f6, %dec_label_pc_100118ee ], [ %v10_100118f6, %dec_label_pc_100118f6 ]
  store i32 768, i32* @edx, align 4
  %v2_100118ff = and i32 %v4_100118c3, 768
  %v3_100118ff = icmp eq i32 %v2_100118ff, 0
  br i1 %v3_100118ff, label %dec_label_pc_10011925, label %dec_label_pc_10011908

dec_label_pc_10011908:                            ; preds = %dec_label_pc_100118f8
  %v6_10011908 = icmp eq i32 %v2_100118ff, 256
  br i1 %v6_10011908, label %dec_label_pc_10011922, label %dec_label_pc_10011910

dec_label_pc_10011910:                            ; preds = %dec_label_pc_10011908
  %v12_10011910 = icmp eq i32 %v2_100118ff, 512
  br i1 %v12_10011910, label %dec_label_pc_1001191d, label %dec_label_pc_10011914

dec_label_pc_10011914:                            ; preds = %dec_label_pc_10011910
  %v12_10011914 = icmp eq i32 %v2_100118ff, 768
  %v1_10011916 = icmp eq i1 %v12_10011914, false
  br i1 %v1_10011916, label %dec_label_pc_10011925, label %dec_label_pc_10011918

dec_label_pc_10011918:                            ; preds = %dec_label_pc_10011914
  %v1_10011918 = udiv i32 %v9_10011922, 256
  %v3_10011918 = and i32 %v1_10011918, 243
  %v8_10011918 = or i32 %v3_10011918, 12
  %v10_10011918 = mul nuw nsw i32 %v8_10011918, 256
  %v11_10011918 = and i32 %v9_10011922, -65281
  %v12_10011918 = or i32 %v10_10011918, %v11_10011918
  br label %dec_label_pc_10011925

dec_label_pc_1001191d:                            ; preds = %dec_label_pc_10011910
  %v1_1001191d = udiv i32 %v9_10011922, 256
  %v3_1001191d = and i32 %v1_1001191d, 247
  %v8_1001191d = or i32 %v3_1001191d, 8
  %v10_1001191d = mul nuw nsw i32 %v8_1001191d, 256
  %v11_1001191d = and i32 %v9_10011922, -65281
  %v12_1001191d = or i32 %v10_1001191d, %v11_1001191d
  br label %dec_label_pc_10011925

dec_label_pc_10011922:                            ; preds = %dec_label_pc_10011908
  %v1_10011922 = udiv i32 %v9_10011922, 256
  %v3_10011922 = and i32 %v1_10011922, 251
  %v8_10011922 = or i32 %v3_10011922, 4
  %v10_10011922 = mul nuw nsw i32 %v8_10011922, 256
  %v11_10011922 = and i32 %v9_10011922, -65281
  %v12_10011922 = or i32 %v10_10011922, %v11_10011922
  br label %dec_label_pc_10011925

dec_label_pc_10011925:                            ; preds = %dec_label_pc_10011914, %dec_label_pc_100118f8, %dec_label_pc_1001191d, %dec_label_pc_10011918, %dec_label_pc_10011922
  %v0_1001193b = phi i32 [ %v9_10011922, %dec_label_pc_10011914 ], [ %v9_10011922, %dec_label_pc_100118f8 ], [ %v12_1001191d, %dec_label_pc_1001191d ], [ %v12_10011918, %dec_label_pc_10011918 ], [ %v12_10011922, %dec_label_pc_10011922 ]
  %v1_10011927 = and i32 %v4_100118c3, 196608
  %v2_10011927 = icmp eq i32 %v1_10011927, 0
  br i1 %v2_10011927, label %dec_label_pc_1001193b, label %dec_label_pc_1001192f

dec_label_pc_1001192f:                            ; preds = %dec_label_pc_10011925
  %v6_1001192f = icmp eq i32 %v1_10011927, 65536
  %v1_10011935 = icmp eq i1 %v6_1001192f, false
  br i1 %v1_10011935, label %dec_label_pc_1001193d, label %dec_label_pc_10011937

dec_label_pc_10011937:                            ; preds = %dec_label_pc_1001192f
  %v2_10011937 = or i32 %v0_1001193b, 512
  br label %dec_label_pc_1001193d

dec_label_pc_1001193b:                            ; preds = %dec_label_pc_10011925
  %v2_1001193b = or i32 %v0_1001193b, 768
  br label %dec_label_pc_1001193d

dec_label_pc_1001193d:                            ; preds = %dec_label_pc_1001192f, %dec_label_pc_10011937, %dec_label_pc_1001193b
  %v9_10011947 = phi i32 [ %v0_1001193b, %dec_label_pc_1001192f ], [ %v2_10011937, %dec_label_pc_10011937 ], [ %v2_1001193b, %dec_label_pc_1001193b ]
  %v1_1001193e = and i32 %v4_100118c3, 262144
  %v2_1001193e = icmp eq i32 %v1_1001193e, 0
  br i1 %v2_1001193e, label %dec_label_pc_1001194a, label %dec_label_pc_10011947

dec_label_pc_10011947:                            ; preds = %dec_label_pc_1001193d
  %v1_10011947 = udiv i32 %v9_10011947, 256
  %v3_10011947 = and i32 %v1_10011947, 239
  %v8_10011947 = or i32 %v3_10011947, 16
  %v10_10011947 = mul nuw nsw i32 %v8_10011947, 256
  %v11_10011947 = and i32 %v9_10011947, -65281
  %v12_10011947 = or i32 %v10_10011947, %v11_10011947
  br label %dec_label_pc_1001194a

dec_label_pc_1001194a:                            ; preds = %dec_label_pc_1001193d, %dec_label_pc_10011947
  %v0_1001194a = phi i32 [ %v9_10011947, %dec_label_pc_1001193d ], [ %v12_10011947, %dec_label_pc_10011947 ]
  ret i32 %v0_1001194a

; uselistorder directives
  uselistorder i32 %v9_10011947, { 1, 2, 0 }
  uselistorder i32 %v0_1001193b, { 2, 0, 1 }
  uselistorder i32 %v9_10011922, { 3, 4, 5, 0, 6, 1, 7, 2 }
  uselistorder i32 %v8_100118f6, { 1, 0 }
  uselistorder i32 %v8_100118ec, { 1, 0 }
  uselistorder i32 %v8_100118e5, { 1, 0 }
  uselistorder i32 %v8_100118de, { 1, 0 }
  uselistorder i32 %v8_100118d7, { 1, 0 }
  uselistorder i32 262144, { 2, 3, 0, 1 }
  uselistorder i32 196608, { 6, 4, 5, 0, 1, 2, 3 }
  uselistorder i32 768, { 1, 0, 5, 7, 2, 3, 4, 6, 8 }
  uselistorder i32 524288, { 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_1001194a, { 1, 0 }
  uselistorder label %dec_label_pc_1001193d, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10011925, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_100118f8, { 1, 0 }
  uselistorder label %dec_label_pc_100118ee, { 1, 0 }
  uselistorder label %dec_label_pc_100118e7, { 1, 0 }
  uselistorder label %dec_label_pc_100118e0, { 1, 0 }
  uselistorder label %dec_label_pc_100118d9, { 1, 0 }
  uselistorder label %dec_label_pc_100118d2, { 1, 0 }
}

define i32 @function_1001194b(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1001194b:
  store i32 0, i32* @ebx, align 4
  %v0_1001194e = load i32, i32* @global_var_1001b62c.212, align 4
  %v12_1001194e = icmp eq i32 %v0_1001194e, 0
  %v1_10011954 = icmp eq i1 %v12_1001194e, false
  br i1 %v1_10011954, label %dec_label_pc_10011969, label %dec_label_pc_10011956

dec_label_pc_10011956:                            ; preds = %dec_label_pc_1001194b
  %v5_1001195d = icmp slt i32 %arg1, 65
  br i1 %v5_1001195d, label %dec_label_pc_100119b8, label %dec_label_pc_1001195f

dec_label_pc_1001195f:                            ; preds = %dec_label_pc_10011956
  %v1_1001195f = add i32 %arg1, -90
  %v6_1001195f = sub i32 89, %arg1
  %v7_1001195f = and i32 %v6_1001195f, %arg1
  %v8_1001195f = icmp slt i32 %v7_1001195f, 0
  %v9_1001195f = icmp eq i32 %v1_1001195f, 0
  %v10_1001195f = icmp slt i32 %v1_1001195f, 0
  %v3_10011962 = icmp eq i1 %v10_1001195f, %v8_1001195f
  %v4_10011962 = icmp eq i1 %v9_1001195f, false
  %v5_10011962 = and i1 %v4_10011962, %v3_10011962
  br i1 %v5_10011962, label %dec_label_pc_100119b8, label %dec_label_pc_10011964

dec_label_pc_10011964:                            ; preds = %dec_label_pc_1001195f
  %v1_10011964 = add i32 %arg1, 32
  ret i32 %v1_10011964

dec_label_pc_10011969:                            ; preds = %dec_label_pc_1001194b
  %v0_10011969 = load i32, i32* @esi, align 4
  store i32 ptrtoint (i32* @global_var_1001b78c.213 to i32), i32* @esi, align 4
  %v7_10011971 = call i32 @InterlockedIncrement(i32* nonnull @global_var_1001b78c.213)
  %v0_10011977 = load i32, i32* @global_var_1001b788.214, align 8
  %v1_10011977 = load i32, i32* @ebx, align 4
  %v12_10011977 = icmp eq i32 %v0_10011977, %v1_10011977
  %v0_1001197d = load i32, i32* inttoptr (i32 268525740 to i32*), align 4
  store i32 %v0_1001197d, i32* @edi, align 4
  br i1 %v12_10011977, label %dec_label_pc_10011993, label %dec_label_pc_10011985

dec_label_pc_10011985:                            ; preds = %dec_label_pc_10011969
  %v0_10011985 = load i32, i32* @esi, align 4
  %v3_10011986 = inttoptr i32 %v0_10011985 to i32*
  %v4_10011986 = call i32 @InterlockedDecrement(i32* %v3_10011986)
  %v1_1001198a = call i32 @function_1001039a(i32 19)
  store i32 19, i32* @ecx, align 4
  store i32 1, i32* @ebx, align 4
  br label %dec_label_pc_10011993

dec_label_pc_10011993:                            ; preds = %dec_label_pc_10011969, %dec_label_pc_10011985
  %v1_10011997 = trunc i32 %arg1 to i8
  %v2_10011997 = call i32 @function_100119ba(i8 %v1_10011997)
  %v0_1001199c = load i32, i32* @ebx, align 4
  %v1_1001199c = icmp eq i32 %v0_1001199c, 0
  br i1 %v1_1001199c, label %dec_label_pc_100119af, label %dec_label_pc_100119a5

dec_label_pc_100119a5:                            ; preds = %dec_label_pc_10011993
  %v1_100119a7 = call i32 @function_100103fb(i32 19)
  br label %dec_label_pc_100119b2

dec_label_pc_100119af:                            ; preds = %dec_label_pc_10011993
  %v0_100119af = load i32, i32* @esi, align 4
  %v3_100119b0 = inttoptr i32 %v0_100119af to i32*
  %v4_100119b0 = call i32 @InterlockedDecrement(i32* %v3_100119b0)
  br label %dec_label_pc_100119b2

dec_label_pc_100119b2:                            ; preds = %dec_label_pc_100119af, %dec_label_pc_100119a5
  store i32 %v0_10011969, i32* @esi, align 4
  br label %dec_label_pc_100119b8

dec_label_pc_100119b8:                            ; preds = %dec_label_pc_1001195f, %dec_label_pc_10011956, %dec_label_pc_100119b2
  %v0_100119b9 = phi i32 [ %arg1, %dec_label_pc_1001195f ], [ %arg1, %dec_label_pc_10011956 ], [ %v2_10011997, %dec_label_pc_100119b2 ]
  ret i32 %v0_100119b9

; uselistorder directives
  uselistorder i32 %v1_1001195f, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 7, 3, 0, 5, 4, 6 }
  uselistorder label %dec_label_pc_100119b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10011993, { 1, 0 }
}

define i32 @function_100119ba(i8 %arg1) local_unnamed_addr {
dec_label_pc_100119ba:
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_7()
  %stack_var_4 = alloca i8, align 1
  store i8 %arg1, i8* %stack_var_4, align 1
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-8 = alloca i8, align 1
  %v0_100119bd = load i32, i32* @ecx, align 4
  %v5_100119bd = trunc i32 %v0_100119bd to i8
  store i8 %v5_100119bd, i8* %stack_var_-8, align 1
  %v6_100119bd = ptrtoint i8* %stack_var_-8 to i32
  %v0_100119be = load i32, i32* @global_var_1001b62c.212, align 4
  %v1_100119be = icmp eq i32 %v0_100119be, 0
  %v0_100119c6 = load i32, i32* @esi, align 4
  %v0_100119c7 = load i32, i32* @edi, align 4
  store i32 %v0_100119c7, i32* %stack_var_-20, align 4
  %v1_100119c8 = icmp eq i1 %v1_100119be, false
  %v4_100119e7 = sext i8 %arg1 to i32
  br i1 %v1_100119c8, label %dec_label_pc_100119e7, label %dec_label_pc_100119ca

dec_label_pc_100119ca:                            ; preds = %dec_label_pc_100119ba
  %v12_100119cd = icmp slt i8 %arg1, 65
  br i1 %v12_100119cd, label %dec_label_pc_10011a80, label %dec_label_pc_100119d6

dec_label_pc_100119d6:                            ; preds = %dec_label_pc_100119ca
  %v6_100119d6 = sub nsw i32 89, %v4_100119e7
  %v7_100119d6 = and i32 %v6_100119d6, %v4_100119e7
  %v8_100119d6 = icmp slt i32 %v7_100119d6, 0
  %v9_100119d6 = icmp eq i8 %arg1, 90
  %v10_100119d6 = icmp slt i8 %arg1, 90
  %v3_100119d9 = icmp eq i1 %v10_100119d6, %v8_100119d6
  %v4_100119d9 = icmp eq i1 %v9_100119d6, false
  %v5_100119d9 = and i1 %v4_100119d9, %v3_100119d9
  br i1 %v5_100119d9, label %dec_label_pc_10011a80, label %dec_label_pc_100119df

dec_label_pc_100119df:                            ; preds = %dec_label_pc_100119d6
  %v1_100119df = add nsw i32 %v4_100119e7, 32
  br label %dec_label_pc_10011a80

dec_label_pc_100119e7:                            ; preds = %dec_label_pc_100119ba
  store i32 %v4_100119e7, i32* %ebx.global-to-local, align 4
  store i32 256, i32* %edi.global-to-local, align 4
  store i32 1, i32* @esi, align 4
  %v7_100119f4 = icmp slt i8 %arg1, 0
  br i1 %v7_100119f4, label %dec_label_pc_100119f6, label %dec_label_pc_10011a1b

dec_label_pc_100119f6:                            ; preds = %dec_label_pc_100119e7
  %v0_100119f6 = load i32, i32* @global_var_100185e0.98, align 32
  %v7_100119fc = icmp sgt i32 %v0_100119f6, 1
  br i1 %v7_100119fc, label %dec_label_pc_100119fe, label %dec_label_pc_10011a09

dec_label_pc_100119fe:                            ; preds = %dec_label_pc_100119f6
  %v6_10011a00 = call i32 @function_1000e8d2(i8 %arg1, i32 1)
  store i32 1, i32* @ecx, align 4
  br label %dec_label_pc_10011a13

dec_label_pc_10011a09:                            ; preds = %dec_label_pc_100119f6
  %v0_10011a09 = load i32, i32* @global_var_100183d4, align 4
  %v2_10011a0e = mul nsw i32 %v4_100119e7, 2
  %v3_10011a0e = add i32 %v0_10011a09, %v2_10011a0e
  %v4_10011a0e = inttoptr i32 %v3_10011a0e to i8*
  %v5_10011a0e = load i8, i8* %v4_10011a0e, align 1
  %v6_10011a0e = zext i8 %v5_10011a0e to i32
  %v2_10011a11 = and i32 %v6_10011a0e, 1
  br label %dec_label_pc_10011a13

dec_label_pc_10011a13:                            ; preds = %dec_label_pc_100119fe, %dec_label_pc_10011a09
  %v0_10011a13 = phi i32 [ %v6_10011a00, %dec_label_pc_100119fe ], [ %v2_10011a11, %dec_label_pc_10011a09 ]
  %v1_10011a13 = icmp eq i32 %v0_10011a13, 0
  %v1_10011a15 = icmp eq i1 %v1_10011a13, false
  br i1 %v1_10011a15, label %dec_label_pc_10011a13.dec_label_pc_10011a1b_crit_edge, label %dec_label_pc_10011a17

dec_label_pc_10011a13.dec_label_pc_10011a1b_crit_edge: ; preds = %dec_label_pc_10011a13
  %v0_10011a21.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10011a1b

dec_label_pc_10011a17:                            ; preds = %dec_label_pc_10011a48, %dec_label_pc_10011a13
  %v0_10011a17 = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10011a80

dec_label_pc_10011a1b:                            ; preds = %dec_label_pc_10011a13.dec_label_pc_10011a1b_crit_edge, %dec_label_pc_100119e7
  %v0_10011a43 = phi i32 [ %v0_10011a21.pre, %dec_label_pc_10011a13.dec_label_pc_10011a1b_crit_edge ], [ %v4_100119e7, %dec_label_pc_100119e7 ]
  %v0_10011a1b = load i32, i32* @global_var_100183d4, align 4
  store i32 %v0_10011a1b, i32* @edx, align 4
  %v2_10011a23 = sdiv i32 %v0_10011a43, 256
  %v1_10011a26 = and i32 %v2_10011a23, 255
  %v2_10011a29 = mul nuw nsw i32 %v1_10011a26, 2
  %v3_10011a29 = or i32 %v2_10011a29, 1
  %v4_10011a29 = add i32 %v3_10011a29, %v0_10011a1b
  %v5_10011a29 = inttoptr i32 %v4_10011a29 to i8*
  %v6_10011a29 = load i8, i8* %v5_10011a29, align 1
  %v8_10011a29 = icmp sgt i8 %v6_10011a29, -1
  br i1 %v8_10011a29, label %dec_label_pc_10011a3f, label %dec_label_pc_10011a30

dec_label_pc_10011a30:                            ; preds = %dec_label_pc_10011a1b
  %v6_10011a36 = trunc i32 %v2_10011a23 to i8
  store i8 %v6_10011a36, i8* %stack_var_4, align 1
  %v0_10011a48.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10011a48

dec_label_pc_10011a3f:                            ; preds = %dec_label_pc_10011a1b
  %v9_10011a23 = trunc i32 %v0_10011a43 to i8
  store i8 %v9_10011a23, i8* %stack_var_4, align 1
  %v0_10011a46 = load i32, i32* @esi, align 4
  br label %dec_label_pc_10011a48

dec_label_pc_10011a48:                            ; preds = %dec_label_pc_10011a30, %dec_label_pc_10011a3f
  %v0_10011a48 = phi i32 [ %v0_10011a48.pre, %dec_label_pc_10011a30 ], [ %v0_10011a46, %dec_label_pc_10011a3f ]
  %v0_10011a51 = phi i32 [ 2, %dec_label_pc_10011a30 ], [ %v0_10011a46, %dec_label_pc_10011a3f ]
  store i32 %v6_100119bd, i32* @ecx, align 4
  %v2_10011a52 = ptrtoint i8* %stack_var_4 to i32
  %v0_10011a56 = load i32, i32* %edi.global-to-local, align 4
  %v0_10011a57 = load i32, i32* @global_var_1001b62c.212, align 4
  %v9_10011a5d = trunc i32 %v2_10011a52 to i8
  %v10_10011a5d = call i32 @function_10013d49(i32 %v0_10011a57, i32 %v0_10011a56, i8 %v9_10011a5d, i32 %v0_10011a51, i32 %v6_100119bd, i32 3, i32 0, i32 %v0_10011a48)
  %v1_10011a65 = icmp eq i32 %v10_10011a5d, 0
  br i1 %v1_10011a65, label %dec_label_pc_10011a17, label %dec_label_pc_10011a69

dec_label_pc_10011a69:                            ; preds = %dec_label_pc_10011a48
  %v1_10011a69 = load i32, i32* @esi, align 4
  %v12_10011a69 = icmp eq i32 %v10_10011a5d, %v1_10011a69
  %v1_10011a6b = icmp eq i1 %v12_10011a69, false
  br i1 %v1_10011a6b, label %dec_label_pc_10011a73, label %dec_label_pc_10011a6d

dec_label_pc_10011a6d:                            ; preds = %dec_label_pc_10011a69
  %v3_10011a6d = load i8, i8* %stack_var_-8, align 1
  %v4_10011a6d = sext i8 %v3_10011a6d to i32
  br label %dec_label_pc_10011a80

dec_label_pc_10011a73:                            ; preds = %dec_label_pc_10011a69
  %v4_10011a73 = zext i8 %tmp to i32
  %v3_10011a77 = load i8, i8* %stack_var_-8, align 1
  %v4_10011a77 = sext i8 %v3_10011a77 to i32
  store i32 %v4_10011a77, i32* @ecx, align 4
  %v2_10011a7b = mul nuw nsw i32 %v4_10011a73, 256
  %v2_10011a7e = or i32 %v4_10011a77, %v2_10011a7b
  br label %dec_label_pc_10011a80

dec_label_pc_10011a80:                            ; preds = %dec_label_pc_100119d6, %dec_label_pc_100119ca, %dec_label_pc_10011a6d, %dec_label_pc_10011a17, %dec_label_pc_100119df, %dec_label_pc_10011a73
  %v0_10011a84 = phi i32 [ %v4_100119e7, %dec_label_pc_100119d6 ], [ %v4_100119e7, %dec_label_pc_100119ca ], [ %v4_10011a6d, %dec_label_pc_10011a6d ], [ %v0_10011a17, %dec_label_pc_10011a17 ], [ %v1_100119df, %dec_label_pc_100119df ], [ %v2_10011a7e, %dec_label_pc_10011a73 ]
  %v2_10011a80 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10011a80, i32* @edi, align 4
  store i32 %v0_100119c6, i32* @esi, align 4
  ret i32 %v0_10011a84

; uselistorder directives
  uselistorder i32 %v2_10011a23, { 1, 0 }
  uselistorder i32 %v0_10011a43, { 1, 0 }
  uselistorder i32 %v4_100119e7, { 1, 2, 3, 4, 7, 5, 0, 6 }
  uselistorder i8* %stack_var_-8, { 3, 2, 0, 1 }
  uselistorder i8* %stack_var_4, { 0, 2, 1, 3 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2 }
  uselistorder i8 90, { 1, 0 }
  uselistorder i32 89, { 1, 2, 0 }
  uselistorder i8 %arg1, { 1, 5, 2, 0, 4, 3, 6 }
  uselistorder label %dec_label_pc_10011a80, { 5, 2, 3, 4, 0, 1 }
  uselistorder label %dec_label_pc_10011a48, { 1, 0 }
  uselistorder label %dec_label_pc_10011a13, { 1, 0 }
}

define i32 @function_10011a85(i32 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_10011a85:
  %v4_10011a85 = trunc i64 %arg2 to i32
  %v1_10011a8c = ashr i32 %v4_10011a85, 31
  %v2_10011a8e = and i64 %arg2, 4294967295
  %v4_10011a8e = zext i32 %v1_10011a8c to i64
  %v5_10011a8e = mul nuw i64 %v4_10011a8e, 4294967296
  %v6_10011a8e = or i64 %v5_10011a8e, %v2_10011a8e
  %v8_10011a8e = sdiv i64 %v6_10011a8e, 32
  %v9_10011a8e = trunc i64 %v8_10011a8e to i32
  %v11_10011a99 = trunc i64 %arg2 to i32
  %v2_10011aa0 = sub i32 31, %v11_10011a99
  %v2_10011aa5 = and i32 %v2_10011aa0, 31
  %v4_10011aa5 = icmp eq i32 %v2_10011aa5, 0
  br i1 %v4_10011aa5, label %bb12, label %bb

bb:                                               ; preds = %dec_label_pc_10011a85
  %v5_10011aa5 = shl i32 -1, %v2_10011aa5
  %phitmp = sub i32 -1, %v5_10011aa5
  br label %bb12

bb12:                                             ; preds = %dec_label_pc_10011a85, %bb
  %v0_10011aa7 = phi i32 [ 0, %dec_label_pc_10011a85 ], [ %phitmp, %bb ]
  %v2_10011aa9 = mul i32 %v9_10011a8e, 4
  %v3_10011aa9 = add i32 %v2_10011aa9, %arg1
  %v4_10011aa9 = inttoptr i32 %v3_10011aa9 to i32*
  %v5_10011aa9 = load i32, i32* %v4_10011aa9, align 4
  %v7_10011aa9 = and i32 %v5_10011aa9, %v0_10011aa7
  %v8_10011aa9 = icmp eq i32 %v7_10011aa9, 0
  %v1_10011aac = icmp eq i1 %v8_10011aa9, false
  br i1 %v1_10011aac, label %dec_label_pc_10011aca, label %dec_label_pc_10011aae

dec_label_pc_10011aae:                            ; preds = %bb12
  %v1_10011aae = add i32 %v9_10011a8e, 1
  %v5_10011ab2 = icmp slt i32 %v1_10011aae, 3
  br i1 %v5_10011ab2, label %dec_label_pc_10011ab4, label %dec_label_pc_10011ac5

dec_label_pc_10011ab4:                            ; preds = %dec_label_pc_10011aae
  %v2_10011ab4 = mul i32 %v1_10011aae, 4
  %v3_10011ab4 = add i32 %v2_10011ab4, %arg1
  br label %dec_label_pc_10011ab7

dec_label_pc_10011ab7:                            ; preds = %dec_label_pc_10011abc, %dec_label_pc_10011ab4
  %v0_10011abc = phi i32 [ %v1_10011abc, %dec_label_pc_10011abc ], [ %v1_10011aae, %dec_label_pc_10011ab4 ]
  %v0_10011abd = phi i32 [ %v1_10011abd, %dec_label_pc_10011abc ], [ %v3_10011ab4, %dec_label_pc_10011ab4 ]
  %v1_10011ab7 = inttoptr i32 %v0_10011abd to i32*
  %v2_10011ab7 = load i32, i32* %v1_10011ab7, align 4
  %v3_10011ab7 = icmp eq i32 %v2_10011ab7, 0
  %v1_10011aba = icmp eq i1 %v3_10011ab7, false
  br i1 %v1_10011aba, label %dec_label_pc_10011aca.loopexit, label %dec_label_pc_10011abc

dec_label_pc_10011abc:                            ; preds = %dec_label_pc_10011ab7
  %v1_10011abc = add i32 %v0_10011abc, 1
  %v1_10011abd = add i32 %v0_10011abd, 4
  %v5_10011ac3 = icmp slt i32 %v1_10011abc, 3
  br i1 %v5_10011ac3, label %dec_label_pc_10011ab7, label %dec_label_pc_10011ac5.loopexit

dec_label_pc_10011ac5.loopexit:                   ; preds = %dec_label_pc_10011abc
  br label %dec_label_pc_10011ac5

dec_label_pc_10011ac5:                            ; preds = %dec_label_pc_10011ac5.loopexit, %dec_label_pc_10011aae
  ret i32 1

dec_label_pc_10011aca.loopexit:                   ; preds = %dec_label_pc_10011ab7
  br label %dec_label_pc_10011aca

dec_label_pc_10011aca:                            ; preds = %dec_label_pc_10011aca.loopexit, %bb12
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10011abc, { 1, 0 }
  uselistorder label %bb12, { 1, 0 }
}

define i32 @function_10011ace(i32 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_10011ace:
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v4_10011ace = trunc i64 %arg2 to i32
  %v0_10011ad3 = load i32, i32* @esi, align 4
  %v0_10011ad4 = load i32, i32* @edi, align 4
  store i32 %v0_10011ad4, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_10011adb = ashr i32 %v4_10011ace, 31
  %v2_10011add = and i64 %arg2, 4294967295
  %v4_10011add = zext i32 %v1_10011adb to i64
  %v5_10011add = mul nuw i64 %v4_10011add, 4294967296
  %v6_10011add = or i64 %v5_10011add, %v2_10011add
  %v8_10011add = sdiv i64 %v6_10011add, 32
  %v9_10011add = trunc i64 %v8_10011add to i32
  store i32 %v9_10011add, i32* @esi, align 4
  %v11_10011ae6 = trunc i64 %arg2 to i32
  %v2_10011ae8 = mul i32 %v9_10011add, 4
  %v3_10011ae8 = add i32 %v2_10011ae8, %arg1
  store i32 %v3_10011ae8, i32* %edi.global-to-local, align 4
  %v2_10011af2 = sub i32 31, %v11_10011ae6
  %v2_10011af4 = and i32 %v2_10011af2, 31
  %v4_10011af4 = icmp eq i32 %v2_10011af4, 0
  br i1 %v4_10011af4, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_10011ace
  %v5_10011af4 = shl i32 1, %v2_10011af4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_10011ace, %bb
  %v0_10011af6 = phi i32 [ 1, %dec_label_pc_10011ace ], [ %v5_10011af4, %bb ]
  %v1_10011af7 = inttoptr i32 %v3_10011ae8 to i32*
  %v2_10011af7 = load i32, i32* %v1_10011af7, align 4
  %v2_10011af9 = call i32 @function_10013f98(i32 %v2_10011af7, i32 %v0_10011af6)
  %v0_10011b01 = load i32, i32* @esi, align 4
  %v1_10011b01 = add i32 %v0_10011b01, -1
  %v9_10011b01 = icmp slt i32 %v1_10011b01, 0
  store i32 %v1_10011b01, i32* @esi, align 4
  br i1 %v9_10011b01, label %dec_label_pc_10011b20, label %dec_label_pc_10011b04

dec_label_pc_10011b04:                            ; preds = %bb15
  %v0_10011b04 = load i32, i32* %ebx.global-to-local, align 4
  %v2_10011b04 = mul i32 %v1_10011b01, 4
  %v3_10011b04 = add i32 %v0_10011b04, %v2_10011b04
  store i32 %v3_10011b04, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10011b07

dec_label_pc_10011b07:                            ; preds = %dec_label_pc_10011b0b, %dec_label_pc_10011b04
  %v0_10011b0b = phi i32 [ %v1_10011b19, %dec_label_pc_10011b0b ], [ %v3_10011b04, %dec_label_pc_10011b04 ]
  %v0_10011b07 = phi i32 [ %v4_10011b10, %dec_label_pc_10011b0b ], [ %v2_10011af9, %dec_label_pc_10011b04 ]
  %v1_10011b07 = icmp eq i32 %v0_10011b07, 0
  br i1 %v1_10011b07, label %dec_label_pc_10011b20, label %dec_label_pc_10011b0b

dec_label_pc_10011b0b:                            ; preds = %dec_label_pc_10011b07
  %v1_10011b0e = inttoptr i32 %v0_10011b0b to i32*
  %v2_10011b0e = load i32, i32* %v1_10011b0e, align 4
  %v4_10011b10 = call i32 @function_10013f98(i32 %v2_10011b0e, i32 1)
  %v0_10011b18 = load i32, i32* @esi, align 4
  %v1_10011b18 = add i32 %v0_10011b18, -1
  %v9_10011b18 = icmp slt i32 %v1_10011b18, 0
  store i32 %v1_10011b18, i32* @esi, align 4
  %v0_10011b19 = load i32, i32* %edi.global-to-local, align 4
  %v1_10011b19 = add i32 %v0_10011b19, -4
  store i32 %v1_10011b19, i32* %edi.global-to-local, align 4
  %v2_10011b1e = icmp eq i1 %v9_10011b18, false
  br i1 %v2_10011b1e, label %dec_label_pc_10011b07, label %dec_label_pc_10011b20

dec_label_pc_10011b20:                            ; preds = %dec_label_pc_10011b0b, %dec_label_pc_10011b07, %bb15
  %v0_10011b23 = phi i32 [ %v2_10011af9, %bb15 ], [ %v4_10011b10, %dec_label_pc_10011b0b ], [ 0, %dec_label_pc_10011b07 ]
  %v2_10011b20 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10011b20, i32* %edi.global-to-local, align 4
  store i32 %v0_10011ad3, i32* @esi, align 4
  ret i32 %v0_10011b23

; uselistorder directives
  uselistorder i32 %v1_10011b19, { 1, 0 }
  uselistorder i32 %v1_10011b18, { 1, 0 }
  uselistorder i32 %v1_10011b01, { 0, 2, 1 }
  uselistorder i32 %v2_10011af4, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_10011b24(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10011b24:
  %ecx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg2 to i32
  %stack_var_-24 = alloca i32, align 4
  %v0_10011b2c = load i32, i32* @ebx, align 4
  %v0_10011b2e = load i32, i32* @edi, align 4
  store i32 %v0_10011b2e, i32* %stack_var_-24, align 4
  %v1_10011b2f = add i32 %tmp7, -1
  store i32 %v1_10011b2f, i32* @edi, align 4
  %v1_10011b41 = ashr i32 %tmp7, 31
  %v2_10011b42 = zext i32 %tmp7 to i64
  %v4_10011b42 = zext i32 %v1_10011b41 to i64
  %v5_10011b42 = mul nuw i64 %v4_10011b42, 4294967296
  %v6_10011b42 = or i64 %v5_10011b42, %v2_10011b42
  %v8_10011b42 = sdiv i64 %v6_10011b42, 32
  %v9_10011b42 = trunc i64 %v8_10011b42 to i32
  %v10_10011b42 = srem i64 %v6_10011b42, 32
  %v11_10011b42 = trunc i64 %v10_10011b42 to i32
  %v2_10011b56 = mul i32 %v9_10011b42, 4
  %v3_10011b56 = add i32 %v2_10011b56, %arg1
  %v2_10011b5c = sub i32 31, %v11_10011b42
  store i32 %v2_10011b5c, i32* @esi, align 4
  store i32 %v2_10011b5c, i32* %ecx.global-to-local, align 4
  %v2_10011b61 = and i32 %v2_10011b5c, 31
  %v4_10011b61 = icmp eq i32 %v2_10011b61, 0
  br i1 %v4_10011b61, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_10011b24
  %v5_10011b61 = shl i32 1, %v2_10011b61
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_10011b24, %bb
  %v3_10011b63 = phi i32 [ 1, %dec_label_pc_10011b24 ], [ %v5_10011b61, %bb ]
  %v1_10011b63 = inttoptr i32 %v3_10011b56 to i32*
  %v2_10011b63 = load i32, i32* %v1_10011b63, align 4
  %v4_10011b63 = and i32 %v2_10011b63, %v3_10011b63
  %v5_10011b63 = icmp eq i32 %v4_10011b63, 0
  br i1 %v5_10011b63, label %dec_label_pc_10011b88, label %dec_label_pc_10011b67

dec_label_pc_10011b67:                            ; preds = %bb17
  %v1_10011b67 = add i32 %tmp7, 1
  %v5_10011b68 = sext i32 %v1_10011b67 to i64
  %v4_10011b6c = call i32 @function_10011a85(i32 %arg1, i64 %v5_10011b68)
  %v1_10011b72 = icmp eq i32 %v4_10011b6c, 0
  store i32 %v1_10011b67, i32* %ecx.global-to-local, align 4
  %v1_10011b75 = icmp eq i1 %v1_10011b72, false
  br i1 %v1_10011b75, label %dec_label_pc_10011b85, label %dec_label_pc_10011b77

dec_label_pc_10011b77:                            ; preds = %dec_label_pc_10011b67
  %v0_10011b77 = load i32, i32* @edi, align 4
  %v5_10011b77 = sext i32 %v0_10011b77 to i64
  %v4_10011b7b = call i32 @function_10011ace(i32 %arg1, i64 %v5_10011b77)
  store i32 %v0_10011b77, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_10011b85

dec_label_pc_10011b85:                            ; preds = %dec_label_pc_10011b67, %dec_label_pc_10011b77
  %stack_var_-8.0 = phi i32 [ 0, %dec_label_pc_10011b67 ], [ %v4_10011b7b, %dec_label_pc_10011b77 ]
  %v0_10011b8b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10011b88

dec_label_pc_10011b88:                            ; preds = %bb17, %dec_label_pc_10011b85
  %stack_var_-8.1 = phi i32 [ 0, %bb17 ], [ %stack_var_-8.0, %dec_label_pc_10011b85 ]
  %v0_10011b8b = phi i32 [ %v2_10011b5c, %bb17 ], [ %v0_10011b8b.pre, %dec_label_pc_10011b85 ]
  store i32 %v0_10011b8b, i32* %ecx.global-to-local, align 4
  %v2_10011b8d = and i32 %v0_10011b8b, 31
  %v4_10011b8d = icmp eq i32 %v2_10011b8d, 0
  br i1 %v4_10011b8d, label %bb19, label %bb18

bb18:                                             ; preds = %dec_label_pc_10011b88
  %v5_10011b8d = shl i32 -1, %v2_10011b8d
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_10011b88, %bb18
  %v3_10011b92 = phi i32 [ -1, %dec_label_pc_10011b88 ], [ %v5_10011b8d, %bb18 ]
  store i32 3, i32* %ecx.global-to-local, align 4
  %v2_10011b92 = load i32, i32* %v1_10011b63, align 4
  %v4_10011b92 = and i32 %v2_10011b92, %v3_10011b92
  store i32 %v4_10011b92, i32* %v1_10011b63, align 4
  %v1_10011b97 = add i32 %v9_10011b42, 1
  %v1_10011b98 = load i32, i32* %ecx.global-to-local, align 4
  %v5_10011b9a = icmp sgt i32 %v1_10011b98, %v1_10011b97
  br i1 %v5_10011b9a, label %dec_label_pc_10011b9c, label %bb20

dec_label_pc_10011b9c:                            ; preds = %bb19
  %v2_10011b9f = sub i32 %v1_10011b98, %v1_10011b97
  store i32 %v2_10011b9f, i32* %ecx.global-to-local, align 4
  %v2_10011ba1 = mul i32 %v1_10011b97, 4
  %v3_10011ba1 = add i32 %v2_10011ba1, %arg1
  %v4_10011ba1 = inttoptr i32 %v3_10011ba1 to i8*
  %v5_10011ba6 = call i8* @_memset(i8* %v4_10011ba1, i32 0, i32 %v2_10011b9f)
  %v6_10011ba6 = ptrtoint i8* %v5_10011ba6 to i32
  store i32 %v6_10011ba6, i32* %ecx.global-to-local, align 4
  br label %bb20

bb20:                                             ; preds = %bb19, %dec_label_pc_10011b9c
  %v2_10011bab = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10011bab, i32* @edi, align 4
  store i32 %v0_10011b2c, i32* @ebx, align 4
  ret i32 %stack_var_-8.1

; uselistorder directives
  uselistorder i32 %v1_10011b98, { 1, 0 }
  uselistorder i32 %v1_10011b97, { 1, 2, 0 }
  uselistorder i32 %v0_10011b8b, { 1, 0 }
  uselistorder i32* %v1_10011b63, { 1, 0, 2 }
  uselistorder i32 %tmp7, { 0, 2, 1, 3 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_10011b88, { 1, 0 }
  uselistorder label %dec_label_pc_10011b85, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_10011bb0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10011bb0:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg2 to i32
  %stack_var_-4 = alloca i32, align 4
  store i32 %tmp4, i32* %eax.global-to-local, align 4
  %v0_10011bb8 = load i32, i32* @esi, align 4
  store i32 %v0_10011bb8, i32* %stack_var_-4, align 4
  %v2_10011bbb = sub i32 %arg1, %tmp4
  store i32 %v2_10011bbb, i32* %ecx.global-to-local, align 4
  store i32 3, i32* %edx.global-to-local, align 4
  %v2_10011bbe9 = load i32, i32* %arg2, align 4
  %v4_10011bc010 = inttoptr i32 %arg1 to i32*
  store i32 %v2_10011bbe9, i32* %v4_10011bc010, align 4
  %v0_10011bc311 = load i32, i32* %eax.global-to-local, align 4
  %v1_10011bc312 = add i32 %v0_10011bc311, 4
  store i32 %v1_10011bc312, i32* %eax.global-to-local, align 4
  %v0_10011bc613 = load i32, i32* %edx.global-to-local, align 4
  %v1_10011bc614 = add i32 %v0_10011bc613, -1
  %v8_10011bc615 = icmp eq i32 %v1_10011bc614, 0
  store i32 %v1_10011bc614, i32* %edx.global-to-local, align 4
  %v1_10011bc716 = icmp eq i1 %v8_10011bc615, false
  br i1 %v1_10011bc716, label %dec_label_pc_10011bbe.dec_label_pc_10011bbe_crit_edge, label %dec_label_pc_10011bc9

dec_label_pc_10011bbe.dec_label_pc_10011bbe_crit_edge: ; preds = %dec_label_pc_10011bb0, %dec_label_pc_10011bbe.dec_label_pc_10011bbe_crit_edge
  %v1_10011bc317 = phi i32 [ %v1_10011bc3, %dec_label_pc_10011bbe.dec_label_pc_10011bbe_crit_edge ], [ %v1_10011bc312, %dec_label_pc_10011bb0 ]
  %v1_10011bc0.pre = load i32, i32* %ecx.global-to-local, align 4
  %v1_10011bbe = inttoptr i32 %v1_10011bc317 to i32*
  %v2_10011bbe = load i32, i32* %v1_10011bbe, align 4
  %v3_10011bc0 = add i32 %v1_10011bc317, %v1_10011bc0.pre
  %v4_10011bc0 = inttoptr i32 %v3_10011bc0 to i32*
  store i32 %v2_10011bbe, i32* %v4_10011bc0, align 4
  %v0_10011bc3 = load i32, i32* %eax.global-to-local, align 4
  %v1_10011bc3 = add i32 %v0_10011bc3, 4
  store i32 %v1_10011bc3, i32* %eax.global-to-local, align 4
  %v0_10011bc6 = load i32, i32* %edx.global-to-local, align 4
  %v1_10011bc6 = add i32 %v0_10011bc6, -1
  %v8_10011bc6 = icmp eq i32 %v1_10011bc6, 0
  store i32 %v1_10011bc6, i32* %edx.global-to-local, align 4
  %v1_10011bc7 = icmp eq i1 %v8_10011bc6, false
  br i1 %v1_10011bc7, label %dec_label_pc_10011bbe.dec_label_pc_10011bbe_crit_edge, label %dec_label_pc_10011bc9

dec_label_pc_10011bc9:                            ; preds = %dec_label_pc_10011bbe.dec_label_pc_10011bbe_crit_edge, %dec_label_pc_10011bb0
  %v1_10011bc3.lcssa = phi i32 [ %v1_10011bc312, %dec_label_pc_10011bb0 ], [ %v1_10011bc3, %dec_label_pc_10011bbe.dec_label_pc_10011bbe_crit_edge ]
  %v2_10011bc9 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10011bc9, i32* @esi, align 4
  ret i32 %v1_10011bc3.lcssa

; uselistorder directives
  uselistorder i32 %v1_10011bc6, { 1, 0 }
  uselistorder i32 %v1_10011bc3, { 0, 2, 1 }
  uselistorder i32 %v1_10011bc317, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 2, 1, 0, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_10011bbe.dec_label_pc_10011bbe_crit_edge, { 1, 0 }
}

define i32 @function_10011bcb(i32* %arg1) local_unnamed_addr {
dec_label_pc_10011bcb:
  %edi.global-to-local = alloca i32, align 4
  %tmp1 = ptrtoint i32* %arg1 to i32
  store i32 %tmp1, i32* %edi.global-to-local, align 4
  store i32 0, i32* %arg1, align 4
  %v4_10011bd2 = load i1, i1* @df, align 1
  %v5_10011bd2 = select i1 %v4_10011bd2, i32 -4, i32 4
  %v6_10011bd2 = add i32 %v5_10011bd2, %tmp1
  store i32 %v6_10011bd2, i32* %edi.global-to-local, align 4
  %v2_10011bd3 = inttoptr i32 %v6_10011bd2 to i32*
  store i32 0, i32* %v2_10011bd3, align 4
  %v3_10011bd3 = load i32, i32* %edi.global-to-local, align 4
  %v6_10011bd3 = add i32 %v3_10011bd3, %v5_10011bd2
  %v2_10011bd4 = inttoptr i32 %v6_10011bd3 to i32*
  store i32 0, i32* %v2_10011bd4, align 4
  ret i32 0
}

define i32 @function_10011bd7(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10011bd7:
  %tmp5 = ptrtoint i32* %arg1 to i32
  br label %dec_label_pc_10011bdd

dec_label_pc_10011bdd:                            ; preds = %dec_label_pc_10011be2, %dec_label_pc_10011bd7
  %v0_10011be2 = phi i32 [ %v1_10011be2, %dec_label_pc_10011be2 ], [ 0, %dec_label_pc_10011bd7 ]
  %v0_10011be3 = phi i32 [ %v1_10011be3, %dec_label_pc_10011be2 ], [ %tmp5, %dec_label_pc_10011bd7 ]
  %v1_10011bdd = inttoptr i32 %v0_10011be3 to i32*
  %v2_10011bdd = load i32, i32* %v1_10011bdd, align 4
  %v3_10011bdd = icmp eq i32 %v2_10011bdd, 0
  %v1_10011be0 = icmp eq i1 %v3_10011bdd, false
  br i1 %v1_10011be0, label %dec_label_pc_10011bef, label %dec_label_pc_10011be2

dec_label_pc_10011be2:                            ; preds = %dec_label_pc_10011bdd
  %v1_10011be2 = add nuw nsw i32 %v0_10011be2, 1
  %v1_10011be3 = add i32 %v0_10011be3, 4
  %v5_10011be9 = icmp slt i32 %v1_10011be2, 3
  br i1 %v5_10011be9, label %dec_label_pc_10011bdd, label %dec_label_pc_10011beb

dec_label_pc_10011beb:                            ; preds = %dec_label_pc_10011be2
  ret i32 1

dec_label_pc_10011bef:                            ; preds = %dec_label_pc_10011bdd
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10011be2, { 1, 0 }
}

define i32 @function_10011bf2(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10011bf2:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp16 = ptrtoint i32* %arg1 to i32
  %tmp18 = zext i32 %arg2 to i64
  %stack_var_-28 = alloca i32, align 4
  %v0_10011bfd = load i32, i32* @edi, align 4
  store i32 %v0_10011bfd, i32* %stack_var_-28, align 4
  store i32 %tmp16, i32* %edi.global-to-local, align 4
  store i32 32, i32* %ebx.global-to-local, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v1_10011c07 = ashr i32 %arg2, 31
  %v4_10011c11 = zext i32 %v1_10011c07 to i64
  %v5_10011c11 = mul nuw i64 %v4_10011c11, 4294967296
  %v6_10011c11 = or i64 %v5_10011c11, %tmp18
  %v8_10011c11 = sdiv i64 %v6_10011c11, 32
  %v9_10011c11 = trunc i64 %v8_10011c11 to i32
  %v10_10011c11 = srem i64 %v6_10011c11, 32
  %v11_10011c11 = trunc i64 %v10_10011c11 to i32
  store i32 %v9_10011c11, i32* %eax.global-to-local, align 4
  store i32 %v11_10011c11, i32* %edx.global-to-local, align 4
  store i32 %v11_10011c11, i32* %ecx.global-to-local, align 4
  %v2_10011c22 = and i32 %v11_10011c11, 31
  %v4_10011c22 = icmp eq i32 %v2_10011c22, 0
  br i1 %v4_10011c22, label %bb26, label %bb

bb:                                               ; preds = %dec_label_pc_10011bf2
  %v5_10011c22 = shl i32 -1, %v2_10011c22
  store i32 %v5_10011c22, i32* %esi.global-to-local, align 4
  %phitmp = sub i32 -1, %v5_10011c22
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_10011bf2, %bb
  %v0_10011c26 = phi i32 [ 0, %dec_label_pc_10011bf2 ], [ %phitmp, %bb ]
  %v2_10011c24 = sub i32 32, %v11_10011c11
  store i32 %v2_10011c24, i32* %ebx.global-to-local, align 4
  store i32 %v0_10011c26, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10011c28

dec_label_pc_10011c28:                            ; preds = %.dec_label_pc_10011c28_crit_edge, %bb26
  %v0_10011c31 = phi i32 [ %v11_10011c11, %bb26 ], [ %v0_10011c31.pre, %.dec_label_pc_10011c28_crit_edge ]
  %v1_10011c2c = phi i32 [ %v0_10011c26, %bb26 ], [ %v1_10011c2c.pre, %.dec_label_pc_10011c28_crit_edge ]
  %v1_10011c38 = phi i32 [ %tmp16, %bb26 ], [ %v1_10011c3f, %.dec_label_pc_10011c28_crit_edge ]
  %stack_var_-8.0 = phi i32 [ 3, %bb26 ], [ %v4_10011c44, %.dec_label_pc_10011c28_crit_edge ]
  %stack_var_8.0.off0 = phi i32 [ 0, %bb26 ], [ %v0_10011c47, %.dec_label_pc_10011c28_crit_edge ]
  %v1_10011c28 = inttoptr i32 %v1_10011c38 to i32*
  %v2_10011c28 = load i32, i32* %v1_10011c28, align 4
  store i32 %v2_10011c28, i32* %eax.global-to-local, align 4
  %v2_10011c2c = and i32 %v2_10011c28, %v1_10011c2c
  store i32 %v0_10011c31, i32* %ecx.global-to-local, align 4
  %v2_10011c33 = and i32 %v0_10011c31, 31
  %v4_10011c33 = icmp eq i32 %v2_10011c33, 0
  br i1 %v4_10011c33, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_10011c28
  %v5_10011c33 = lshr i32 %v2_10011c28, %v2_10011c33
  store i32 %v5_10011c33, i32* %eax.global-to-local, align 4
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_10011c28, %bb27
  %v0_10011c35 = phi i32 [ %v2_10011c28, %dec_label_pc_10011c28 ], [ %v5_10011c33, %bb27 ]
  %v6_10011c35 = or i32 %v0_10011c35, %stack_var_8.0.off0
  store i32 %v6_10011c35, i32* %v1_10011c28, align 4
  store i32 %v2_10011c2c, i32* %eax.global-to-local, align 4
  %v0_10011c3d = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_10011c3d, i32* %ecx.global-to-local, align 4
  %v0_10011c3f = load i32, i32* %edi.global-to-local, align 4
  %v1_10011c3f = add i32 %v0_10011c3f, 4
  store i32 %v1_10011c3f, i32* %edi.global-to-local, align 4
  %v2_10011c42 = and i32 %v0_10011c3d, 31
  %v4_10011c42 = icmp eq i32 %v2_10011c42, 0
  br i1 %v4_10011c42, label %bb30, label %bb29

bb29:                                             ; preds = %bb28
  %v5_10011c42 = shl i32 %v2_10011c2c, %v2_10011c42
  store i32 %v5_10011c42, i32* %eax.global-to-local, align 4
  br label %bb30

bb30:                                             ; preds = %bb28, %bb29
  %v0_10011c47 = phi i32 [ %v2_10011c2c, %bb28 ], [ %v5_10011c42, %bb29 ]
  %v4_10011c44 = add nsw i32 %stack_var_-8.0, -1
  %v11_10011c44 = icmp eq i32 %v4_10011c44, 0
  %v1_10011c4a = icmp eq i1 %v11_10011c44, false
  br i1 %v1_10011c4a, label %.dec_label_pc_10011c28_crit_edge, label %dec_label_pc_10011c4c

.dec_label_pc_10011c28_crit_edge:                 ; preds = %bb30
  %v1_10011c2c.pre = load i32, i32* %esi.global-to-local, align 4
  %v0_10011c31.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10011c28

dec_label_pc_10011c4c:                            ; preds = %bb30
  store i32 %v9_10011c11, i32* %edi.global-to-local, align 4
  store i32 2, i32* %ebx.global-to-local, align 4
  store i32 8, i32* %ecx.global-to-local, align 4
  %v2_10011c57 = mul i32 %v9_10011c11, 4
  store i32 %v2_10011c57, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10011c5a

dec_label_pc_10011c5a:                            ; preds = %dec_label_pc_10011c74.dec_label_pc_10011c5a_crit_edge, %dec_label_pc_10011c4c
  %v5_10011c70 = phi i32 [ %v1_10011c75, %dec_label_pc_10011c74.dec_label_pc_10011c5a_crit_edge ], [ 8, %dec_label_pc_10011c4c ]
  %v1_10011c5a = phi i32 [ %v1_10011c5a.pre, %dec_label_pc_10011c74.dec_label_pc_10011c5a_crit_edge ], [ %v9_10011c11, %dec_label_pc_10011c4c ]
  %v0_10011c5a = phi i32 [ %v1_10011c74, %dec_label_pc_10011c74.dec_label_pc_10011c5a_crit_edge ], [ 2, %dec_label_pc_10011c4c ]
  %v5_10011c5c = icmp slt i32 %v0_10011c5a, %v1_10011c5a
  br i1 %v5_10011c5c, label %dec_label_pc_10011c6d, label %dec_label_pc_10011c5e

dec_label_pc_10011c5e:                            ; preds = %dec_label_pc_10011c5a
  store i32 %tmp16, i32* %edx.global-to-local, align 4
  %v1_10011c63 = load i32, i32* %esi.global-to-local, align 4
  %v2_10011c63 = sub i32 %v5_10011c70, %v1_10011c63
  store i32 %v2_10011c63, i32* %eax.global-to-local, align 4
  %v2_10011c65 = add i32 %v2_10011c63, %tmp16
  %v3_10011c65 = inttoptr i32 %v2_10011c65 to i32*
  %v4_10011c65 = load i32, i32* %v3_10011c65, align 4
  store i32 %v4_10011c65, i32* %eax.global-to-local, align 4
  %v3_10011c68 = add i32 %v5_10011c70, %tmp16
  %v4_10011c68 = inttoptr i32 %v3_10011c68 to i32*
  store i32 %v4_10011c65, i32* %v4_10011c68, align 4
  br label %dec_label_pc_10011c74

dec_label_pc_10011c6d:                            ; preds = %dec_label_pc_10011c5a
  store i32 %tmp16, i32* %eax.global-to-local, align 4
  %v7_10011c70 = add i32 %v5_10011c70, %tmp16
  %v8_10011c70 = inttoptr i32 %v7_10011c70 to i32*
  store i32 0, i32* %v8_10011c70, align 4
  br label %dec_label_pc_10011c74

dec_label_pc_10011c74:                            ; preds = %dec_label_pc_10011c5e, %dec_label_pc_10011c6d
  %v0_10011c74 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10011c74 = add i32 %v0_10011c74, -1
  store i32 %v1_10011c74, i32* %ebx.global-to-local, align 4
  %v0_10011c75 = load i32, i32* %ecx.global-to-local, align 4
  %v1_10011c75 = add i32 %v0_10011c75, -4
  %v10_10011c75 = icmp slt i32 %v1_10011c75, 0
  store i32 %v1_10011c75, i32* %ecx.global-to-local, align 4
  %v1_10011c78 = icmp eq i1 %v10_10011c75, false
  br i1 %v1_10011c78, label %dec_label_pc_10011c74.dec_label_pc_10011c5a_crit_edge, label %dec_label_pc_10011c7a

dec_label_pc_10011c74.dec_label_pc_10011c5a_crit_edge: ; preds = %dec_label_pc_10011c74
  %v1_10011c5a.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10011c5a

dec_label_pc_10011c7a:                            ; preds = %dec_label_pc_10011c74
  %v2_10011c7a = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10011c7a, i32* @edi, align 4
  %v0_10011c7e = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10011c7e

; uselistorder directives
  uselistorder i32 %v1_10011c75, { 2, 1, 0 }
  uselistorder i32 %v1_10011c74, { 1, 0 }
  uselistorder i32 %v4_10011c44, { 1, 0 }
  uselistorder i32 %v1_10011c3f, { 1, 0 }
  uselistorder i32 %v2_10011c28, { 1, 2, 0, 3 }
  uselistorder i32 %v0_10011c31, { 1, 0 }
  uselistorder i32 %v0_10011c26, { 1, 0 }
  uselistorder i32 %v11_10011c11, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v9_10011c11, { 2, 0, 1, 3 }
  uselistorder i32 %tmp16, { 0, 5, 1, 2, 6, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i64 32, { 1, 0, 3, 2, 4, 5 }
  uselistorder i64 4294967296, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_10011c74, { 1, 0 }
  uselistorder label %bb30, { 1, 0 }
  uselistorder label %bb28, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
}

define i32 @function_10011c7f(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10011c7f:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v15_10011c82 = ptrtoint i32* %stack_var_-28 to i32
  %v4_10011c85 = ptrtoint i16* %arg1 to i32
  store i32 %v4_10011c85, i32* %eax.global-to-local, align 4
  %v0_10011c88 = load i32, i32* @ebx, align 4
  %v0_10011c89 = load i32, i32* @esi, align 4
  %v0_10011c8a = load i32, i32* @edi, align 4
  %v1_10011c8b = add i32 %v4_10011c85, 10
  %v2_10011c8b = inttoptr i32 %v1_10011c8b to i16*
  %v3_10011c8b = load i16, i16* %v2_10011c8b, align 2
  %v4_10011c8b = zext i16 %v3_10011c8b to i32
  %v1_10011c91 = and i32 %v4_10011c8b, 32768
  store i32 %v1_10011c91, i32* %ecx.global-to-local, align 4
  %v1_10011c9a = add i32 %v4_10011c85, 6
  %v2_10011c9a = inttoptr i32 %v1_10011c9a to i32*
  %v3_10011c9a = load i32, i32* %v2_10011c9a, align 4
  store i32 %v3_10011c9a, i32* %ecx.global-to-local, align 4
  store i32 %v3_10011c9a, i32* %stack_var_-16, align 4
  %v1_10011ca0 = add i32 %v4_10011c85, 2
  %v2_10011ca0 = inttoptr i32 %v1_10011ca0 to i32*
  %v3_10011ca0 = load i32, i32* %v2_10011ca0, align 4
  store i32 %v3_10011ca0, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* @edi, align 4
  %v1_10011ca9 = and i32 %v4_10011c8b, 32767
  %v2_10011ca9 = icmp eq i32 %v1_10011ca9, 0
  %v1_10011caf = add nsw i32 %v1_10011ca9, -16383
  store i32 %v1_10011caf, i32* @ebx, align 4
  %v1_10011cc4 = icmp eq i1 %v2_10011ca9, false
  %v2_10011cec = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v2_10011cec, i32* %eax.global-to-local, align 4
  br i1 %v1_10011cc4, label %dec_label_pc_10011cec, label %dec_label_pc_10011cc6

dec_label_pc_10011cc6:                            ; preds = %dec_label_pc_10011c7f
  store i32 0, i32* @esi, align 4
  store i32 %v2_10011cec, i32* %stack_var_-44, align 4
  %v5_10011ccc = call i32 @function_10011bd7(i32* nonnull %stack_var_-16, i32 %v0_10011c8a, i32 %v0_10011c89, i32 %v0_10011c88)
  store i32 %v5_10011ccc, i32* %eax.global-to-local, align 4
  %v1_10011cd1 = icmp eq i32 %v5_10011ccc, 0
  store i32 %v2_10011cec, i32* %ecx.global-to-local, align 4
  %v1_10011cd4 = icmp eq i1 %v1_10011cd1, false
  br i1 %v1_10011cd4, label %dec_label_pc_10011dab, label %dec_label_pc_10011cda

dec_label_pc_10011cda:                            ; preds = %dec_label_pc_10011cc6
  store i32 %v2_10011cec, i32* %eax.global-to-local, align 4
  store i32 %v2_10011cec, i32* %stack_var_-44, align 4
  %v2_10011cde = call i32 @function_10011bcb(i32* nonnull %stack_var_-16)
  store i32 %v2_10011cde, i32* %eax.global-to-local, align 4
  store i32 %v2_10011cec, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_10011ce6

dec_label_pc_10011ce6:                            ; preds = %dec_label_pc_10011cda, %dec_label_pc_10011d61, %dec_label_pc_10011d6c
  %storemerge2 = phi i32 [ 2, %dec_label_pc_10011cda ], [ 2, %dec_label_pc_10011d61 ], [ 1, %dec_label_pc_10011d6c ]
  store i32 %storemerge2, i32* %stack_var_-44, align 4
  br label %dec_label_pc_10011dad

dec_label_pc_10011cec:                            ; preds = %dec_label_pc_10011c7f
  store i32 %v2_10011cec, i32* %stack_var_-44, align 4
  store i32 %v15_10011c82, i32* %eax.global-to-local, align 4
  %v3_10011cf4 = call i32 @function_10011bb0(i32 %v15_10011c82, i32* nonnull %stack_var_-16)
  store i32 %v3_10011cf4, i32* %eax.global-to-local, align 4
  %v0_10011cf9 = load i32, i32* @edi, align 4
  %v1_10011cf9 = add i32 %v0_10011cf9, 8
  %v2_10011cf9 = inttoptr i32 %v1_10011cf9 to i32*
  %v3_10011cf9 = load i32, i32* %v2_10011cf9, align 4
  store i32 %v2_10011cec, i32* %eax.global-to-local, align 4
  %v2_10011d00 = inttoptr i32 %v3_10011cf9 to i32*
  %v3_10011d00 = call i32 @function_10011b24(i32 %v2_10011cec, i32* %v2_10011d00)
  store i32 %v3_10011d00, i32* %eax.global-to-local, align 4
  %v1_10011d08 = icmp eq i32 %v3_10011d00, 0
  %v0_10011d15.pre = load i32, i32* @ebx, align 4
  br i1 %v1_10011d08, label %dec_label_pc_10011d0d, label %dec_label_pc_10011d0c

dec_label_pc_10011d0c:                            ; preds = %dec_label_pc_10011cec
  %v1_10011d0c = add i32 %v0_10011d15.pre, 1
  store i32 %v1_10011d0c, i32* @ebx, align 4
  br label %dec_label_pc_10011d0d

dec_label_pc_10011d0d:                            ; preds = %dec_label_pc_10011cec, %dec_label_pc_10011d0c
  %v1_10011da2 = phi i32 [ %v1_10011d0c, %dec_label_pc_10011d0c ], [ %v0_10011d15.pre, %dec_label_pc_10011cec ]
  %v0_10011d0d = load i32, i32* @edi, align 4
  %v1_10011d0d = add i32 %v0_10011d0d, 4
  %v2_10011d0d = inttoptr i32 %v1_10011d0d to i32*
  %v3_10011d0d = load i32, i32* %v2_10011d0d, align 4
  store i32 %v3_10011d0d, i32* %eax.global-to-local, align 4
  store i32 %v3_10011d0d, i32* %ecx.global-to-local, align 4
  %v2_10011d12 = add i32 %v0_10011d0d, 8
  %v3_10011d12 = inttoptr i32 %v2_10011d12 to i32*
  %v4_10011d12 = load i32, i32* %v3_10011d12, align 4
  %v5_10011d12 = sub i32 %v3_10011d0d, %v4_10011d12
  store i32 %v5_10011d12, i32* %ecx.global-to-local, align 4
  %v5_10011d17 = icmp slt i32 %v1_10011da2, %v5_10011d12
  br i1 %v5_10011d17, label %dec_label_pc_10011d19, label %dec_label_pc_10011d25

dec_label_pc_10011d19:                            ; preds = %dec_label_pc_10011d0d
  store i32 %v2_10011cec, i32* %eax.global-to-local, align 4
  store i32 %v2_10011cec, i32* %stack_var_-44, align 4
  %v2_10011d1d = call i32 @function_10011bcb(i32* nonnull %stack_var_-16)
  store i32 %v2_10011d1d, i32* %eax.global-to-local, align 4
  store i32 %v2_10011cec, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_10011d61

dec_label_pc_10011d25:                            ; preds = %dec_label_pc_10011d0d
  %v8_10011d27 = icmp slt i32 %v3_10011d0d, %v1_10011da2
  br i1 %v8_10011d27, label %dec_label_pc_10011d68, label %dec_label_pc_10011d29

dec_label_pc_10011d29:                            ; preds = %dec_label_pc_10011d25
  %v2_10011d29 = sub i32 %v3_10011d0d, %v1_10011da2
  store i32 %v2_10011d29, i32* @esi, align 4
  store i32 %v15_10011c82, i32* %stack_var_-44, align 4
  store i32 %v2_10011cec, i32* %eax.global-to-local, align 4
  %v3_10011d35 = call i32 @function_10011bb0(i32 %v2_10011cec, i32* nonnull %stack_var_-28)
  store i32 %v2_10011cec, i32* %eax.global-to-local, align 4
  %v0_10011d3d = load i32, i32* @esi, align 4
  %v3_10011d3f = call i32 @function_10011bf2(i32* nonnull %stack_var_-16, i32 %v0_10011d3d)
  store i32 %v3_10011d3f, i32* %eax.global-to-local, align 4
  %v0_10011d44 = load i32, i32* @edi, align 4
  %v1_10011d44 = add i32 %v0_10011d44, 8
  %v2_10011d44 = inttoptr i32 %v1_10011d44 to i32*
  %v3_10011d44 = load i32, i32* %v2_10011d44, align 4
  store i32 %v2_10011cec, i32* %eax.global-to-local, align 4
  %v2_10011d4b = inttoptr i32 %v3_10011d44 to i32*
  %v3_10011d4b = call i32 @function_10011b24(i32 %v2_10011cec, i32* %v2_10011d4b)
  store i32 %v3_10011d4b, i32* %eax.global-to-local, align 4
  %v0_10011d50 = load i32, i32* @edi, align 4
  %v1_10011d50 = add i32 %v0_10011d50, 12
  %v2_10011d50 = inttoptr i32 %v1_10011d50 to i32*
  %v3_10011d50 = load i32, i32* %v2_10011d50, align 4
  %v1_10011d53 = add i32 %v3_10011d50, 1
  store i32 %v2_10011cec, i32* %eax.global-to-local, align 4
  %v3_10011d59 = call i32 @function_10011bf2(i32* nonnull %stack_var_-16, i32 %v1_10011d53)
  store i32 %v3_10011d59, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10011d61

dec_label_pc_10011d61:                            ; preds = %dec_label_pc_10011d19, %dec_label_pc_10011d29
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_10011ce6

dec_label_pc_10011d68:                            ; preds = %dec_label_pc_10011d25
  %v2_10011d68 = inttoptr i32 %v0_10011d0d to i32*
  %v3_10011d68 = load i32, i32* %v2_10011d68, align 4
  %v5_10011d6a = icmp slt i32 %v1_10011da2, %v3_10011d68
  br i1 %v5_10011d6a, label %dec_label_pc_10011d94, label %dec_label_pc_10011d6c

dec_label_pc_10011d6c:                            ; preds = %dec_label_pc_10011d68
  store i32 %v2_10011cec, i32* %eax.global-to-local, align 4
  store i32 %v2_10011cec, i32* %stack_var_-44, align 4
  %v2_10011d70 = call i32 @function_10011bcb(i32* nonnull %stack_var_-16)
  store i32 %v2_10011d70, i32* %eax.global-to-local, align 4
  %v0_10011d75 = load i32, i32* @edi, align 4
  %v1_10011d75 = add i32 %v0_10011d75, 12
  %v2_10011d75 = inttoptr i32 %v1_10011d75 to i32*
  %v3_10011d75 = load i32, i32* %v2_10011d75, align 4
  store i32 %v2_10011cec, i32* %eax.global-to-local, align 4
  %v3_10011d80 = call i32 @function_10011bf2(i32* nonnull %stack_var_-16, i32 %v3_10011d75)
  store i32 %v3_10011d80, i32* %eax.global-to-local, align 4
  %v0_10011d85 = load i32, i32* @edi, align 4
  %v1_10011d85 = add i32 %v0_10011d85, 20
  %v2_10011d85 = inttoptr i32 %v1_10011d85 to i32*
  %v3_10011d85 = load i32, i32* %v2_10011d85, align 4
  %v2_10011d8b = inttoptr i32 %v0_10011d85 to i32*
  %v3_10011d8b = load i32, i32* %v2_10011d8b, align 4
  %v4_10011d8b = add i32 %v3_10011d8b, %v3_10011d85
  store i32 %v4_10011d8b, i32* @esi, align 4
  br label %dec_label_pc_10011ce6

dec_label_pc_10011d94:                            ; preds = %dec_label_pc_10011d68
  %v1_10011d94 = add i32 %v0_10011d0d, 12
  %v2_10011d94 = inttoptr i32 %v1_10011d94 to i32*
  %v3_10011d94 = load i32, i32* %v2_10011d94, align 4
  store i32 %v3_10011d94, i32* %stack_var_-44, align 4
  %v1_10011d97 = add i32 %v0_10011d0d, 20
  %v2_10011d97 = inttoptr i32 %v1_10011d97 to i32*
  %v3_10011d97 = load i32, i32* %v2_10011d97, align 4
  store i32 %v2_10011cec, i32* %eax.global-to-local, align 4
  %v2_10011da2 = add i32 %v3_10011d97, %v1_10011da2
  store i32 %v2_10011da2, i32* @esi, align 4
  %v3_10011da4 = call i32 @function_10011bf2(i32* nonnull %stack_var_-16, i32 %v3_10011d94)
  store i32 %v3_10011da4, i32* %eax.global-to-local, align 4
  %v2_10011daa = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_10011daa, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_10011dab

dec_label_pc_10011dab:                            ; preds = %dec_label_pc_10011cc6, %dec_label_pc_10011d94
  br label %dec_label_pc_10011dad

dec_label_pc_10011dad:                            ; preds = %dec_label_pc_10011ce6, %dec_label_pc_10011dab
  %storemerge = phi i32 [ %storemerge2, %dec_label_pc_10011ce6 ], [ 0, %dec_label_pc_10011dab ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 31, i32* %stack_var_-44, align 4
  store i32 31, i32* %ecx.global-to-local, align 4
  %v1_10011db0 = load i32, i32* @edi, align 4
  %v2_10011db0 = add i32 %v1_10011db0, 12
  %v3_10011db0 = inttoptr i32 %v2_10011db0 to i32*
  %v4_10011db0 = load i32, i32* %v3_10011db0, align 4
  %v5_10011db0 = sub i32 31, %v4_10011db0
  store i32 %v5_10011db0, i32* %ecx.global-to-local, align 4
  %v1_10011db3 = add i32 %v1_10011db0, 16
  %v2_10011db3 = inttoptr i32 %v1_10011db3 to i32*
  %v3_10011db3 = load i32, i32* %v2_10011db3, align 4
  %v0_10011db6 = load i32, i32* @esi, align 4
  %v2_10011db6 = and i32 %v5_10011db0, 31
  %v4_10011db6 = icmp eq i32 %v2_10011db6, 0
  br i1 %v4_10011db6, label %bb25, label %bb

bb:                                               ; preds = %dec_label_pc_10011dad
  %v5_10011db6 = shl i32 %v0_10011db6, %v2_10011db6
  br label %bb25

bb25:                                             ; preds = %dec_label_pc_10011dad, %bb
  %v0_10011dc5 = phi i32 [ %v0_10011db6, %dec_label_pc_10011dad ], [ %v5_10011db6, %bb ]
  store i32 0, i32* %ecx.global-to-local, align 4
  %v4_10011dc7 = load i32, i32* %stack_var_-16, align 4
  %v5_10011dc7 = or i32 %v4_10011dc7, %v0_10011dc5
  %v6_10011dca = icmp eq i32 %v3_10011db3, 64
  %v1_10011dcd = icmp eq i1 %v6_10011dca, false
  br i1 %v1_10011dcd, label %dec_label_pc_10011ddc, label %dec_label_pc_10011dcf

dec_label_pc_10011dcf:                            ; preds = %bb25
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  store i32 %v3_10011ca0, i32* %edx.global-to-local, align 4
  %v2_10011dd5 = add i32 %arg2, 4
  %v3_10011dd5 = inttoptr i32 %v2_10011dd5 to i32*
  store i32 %v5_10011dc7, i32* %v3_10011dd5, align 4
  %v0_10011dd8 = load i32, i32* %edx.global-to-local, align 4
  %v1_10011dd8 = load i32, i32* %ecx.global-to-local, align 4
  %v2_10011dd8 = inttoptr i32 %v1_10011dd8 to i32*
  store i32 %v0_10011dd8, i32* %v2_10011dd8, align 4
  br label %dec_label_pc_10011de6

dec_label_pc_10011ddc:                            ; preds = %bb25
  %v6_10011ddc = icmp eq i32 %v3_10011db3, 32
  %v1_10011ddf = icmp eq i1 %v6_10011ddc, false
  br i1 %v1_10011ddf, label %dec_label_pc_10011de6, label %dec_label_pc_10011de1

dec_label_pc_10011de1:                            ; preds = %dec_label_pc_10011ddc
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  %v2_10011de4 = inttoptr i32 %arg2 to i32*
  store i32 %v5_10011dc7, i32* %v2_10011de4, align 4
  br label %dec_label_pc_10011de6

dec_label_pc_10011de6:                            ; preds = %dec_label_pc_10011ddc, %dec_label_pc_10011dcf, %dec_label_pc_10011de1
  %v0_10011dea = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10011dea

; uselistorder directives
  uselistorder i32 %v3_10011d0d, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_10011d0d, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_10011da2, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_10011cec, { 15, 12, 13, 14, 6, 7, 8, 9, 10, 11, 1, 16, 17, 18, 19, 20, 2, 3, 4, 0, 5, 21 }
  uselistorder i32 %v4_10011c85, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-16, { 9, 0, 2, 3, 4, 5, 6, 1, 7, 8, 11, 10 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 6, 7, 0, 8, 9 }
  uselistorder i32* %eax.global-to-local, { 16, 17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 11, 12, 13, 14, 26, 18, 25, 19, 24, 21, 23, 20, 22 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10011de6, { 2, 0, 1 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %dec_label_pc_10011dad, { 1, 0 }
  uselistorder label %dec_label_pc_10011dab, { 1, 0 }
  uselistorder label %dec_label_pc_10011d61, { 1, 0 }
  uselistorder label %dec_label_pc_10011d0d, { 1, 0 }
  uselistorder label %dec_label_pc_10011ce6, { 2, 1, 0 }
}

define i32 @function_10011deb(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10011deb:
  %v3_10011df8 = inttoptr i32 %arg1 to i16*
  %v4_10011df8 = call i32 @function_10011c7f(i16* %v3_10011df8, i32 %arg2, i32 ptrtoint (i32* @global_var_1001a960.215 to i32))
  ret i32 %v4_10011df8

; uselistorder directives
  uselistorder i32 1024, { 7, 0, 6, 15, 16, 1, 2, 3, 4, 5, 13, 14, 9, 10, 17, 8, 11, 12, 18 }
}

define i32 @function_10011e01(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10011e01:
  %v3_10011e0e = inttoptr i32 %arg1 to i16*
  %v4_10011e0e = call i32 @function_10011c7f(i16* %v3_10011e0e, i32 %arg2, i32 ptrtoint (i32* @global_var_1001a978.216 to i32))
  ret i32 %v4_10011e0e
}

define i32 @function_10011e17(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10011e17:
  %stack_var_8 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_8, align 4
  %stack_var_-16 = alloca i32, align 4
  %v15_10011e1a = ptrtoint i32* %stack_var_-16 to i32
  %v2_10011e26 = ptrtoint i32* %stack_var_8 to i32
  %v7_10011e2e = bitcast i32* %stack_var_-16 to i16*
  %v8_10011e2e = call i32 @function_10014139(i16* %v7_10011e2e, i32 %v2_10011e26, i32 %arg2, i32 0, i32 0, i32 0, i32 0)
  %v2_10011e3a = call i32 @function_10011deb(i32 %v15_10011e1a, i32 %arg1)
  ret i32 %v2_10011e3a

; uselistorder directives
  uselistorder i32* %stack_var_8, { 1, 0 }
}

define i32 @function_10011e44(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10011e44:
  %stack_var_8 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_8, align 4
  %stack_var_-16 = alloca i32, align 4
  %v15_10011e47 = ptrtoint i32* %stack_var_-16 to i32
  %v2_10011e53 = ptrtoint i32* %stack_var_8 to i32
  %v7_10011e5b = bitcast i32* %stack_var_-16 to i16*
  %v8_10011e5b = call i32 @function_10014139(i16* %v7_10011e5b, i32 %v2_10011e53, i32 %arg2, i32 0, i32 0, i32 0, i32 0)
  %v2_10011e67 = call i32 @function_10011e01(i32 %v15_10011e47, i32 %arg1)
  ret i32 %v2_10011e67

; uselistorder directives
  uselistorder i32* %stack_var_8, { 1, 0 }
}

define i32 @function_10011e71(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10011e71:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg3, i32* @edx, align 4
  store i32 %arg2, i32* %ebx.global-to-local, align 4
  %v0_10011e7b = load i32, i32* @esi, align 4
  store i32 %v0_10011e7b, i32* %stack_var_-12, align 4
  %v4_10011e7c = ptrtoint i8* %arg1 to i32
  store i32 %v4_10011e7c, i32* @esi, align 4
  %v1_10011e7f = add i32 %arg3, 12
  %v2_10011e7f = inttoptr i32 %v1_10011e7f to i32*
  %v3_10011e7f = load i32, i32* %v2_10011e7f, align 4
  store i32 %v3_10011e7f, i32* @ecx, align 4
  %v0_10011e82 = load i32, i32* @edi, align 4
  store i32 %v0_10011e82, i32* %stack_var_-16, align 4
  %v1_10011e83 = add i32 %v4_10011e7c, 1
  store i32 %v1_10011e83, i32* @edi, align 4
  store i8 48, i8* %arg1, align 1
  %v0_10011e89 = load i32, i32* %ebx.global-to-local, align 4
  %v0_10011e8b = load i32, i32* @edi, align 4
  store i32 %v0_10011e8b, i32* %eax.global-to-local, align 4
  %tmp18 = icmp slt i32 %v0_10011e89, 1
  br i1 %tmp18, label %dec_label_pc_10011eae, label %dec_label_pc_10011e8f

dec_label_pc_10011e8f:                            ; preds = %dec_label_pc_10011e71
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10011e94

dec_label_pc_10011e94:                            ; preds = %dec_label_pc_10011ea3, %dec_label_pc_10011e8f
  %v2_10011ea3 = phi i32 [ %v0_10011e8b, %dec_label_pc_10011e8f ], [ %v1_10011ea5, %dec_label_pc_10011ea3 ]
  %stack_var_4.0.in = phi i32 [ %v0_10011e89, %dec_label_pc_10011e8f ], [ %v5_10011ea6, %dec_label_pc_10011ea3 ]
  %v0_10011e94 = load i32, i32* @ecx, align 4
  %v1_10011e94 = inttoptr i32 %v0_10011e94 to i8*
  %v2_10011e94 = load i8, i8* %v1_10011e94, align 1
  %v4_10011e96 = icmp eq i8 %v2_10011e94, 0
  br i1 %v4_10011e96, label %dec_label_pc_10011ea0, label %dec_label_pc_10011e9a

dec_label_pc_10011e9a:                            ; preds = %dec_label_pc_10011e94
  %v2_10011e9a = sext i8 %v2_10011e94 to i32
  store i32 %v2_10011e9a, i32* @edx, align 4
  %v1_10011e9d = add i32 %v0_10011e94, 1
  store i32 %v1_10011e9d, i32* @ecx, align 4
  br label %dec_label_pc_10011ea3

dec_label_pc_10011ea0:                            ; preds = %dec_label_pc_10011e94
  store i32 48, i32* @edx, align 4
  br label %dec_label_pc_10011ea3

dec_label_pc_10011ea3:                            ; preds = %dec_label_pc_10011e9a, %dec_label_pc_10011ea0
  %v0_10011ea3 = phi i8 [ %v2_10011e94, %dec_label_pc_10011e9a ], [ 48, %dec_label_pc_10011ea0 ]
  %v3_10011ea3 = inttoptr i32 %v2_10011ea3 to i8*
  store i8 %v0_10011ea3, i8* %v3_10011ea3, align 1
  %v0_10011ea5 = load i32, i32* %eax.global-to-local, align 4
  %v1_10011ea5 = add i32 %v0_10011ea5, 1
  store i32 %v1_10011ea5, i32* %eax.global-to-local, align 4
  %v5_10011ea6 = add i32 %stack_var_4.0.in, -1
  %v12_10011ea6 = icmp eq i32 %v5_10011ea6, 0
  %v1_10011ea9 = icmp eq i1 %v12_10011ea6, false
  br i1 %v1_10011ea9, label %dec_label_pc_10011e94, label %dec_label_pc_10011eab

dec_label_pc_10011eab:                            ; preds = %dec_label_pc_10011ea3
  store i32 %arg3, i32* @edx, align 4
  br label %dec_label_pc_10011eae

dec_label_pc_10011eae:                            ; preds = %dec_label_pc_10011e71, %dec_label_pc_10011eab
  %v3_10011eae = phi i32 [ %v0_10011e8b, %dec_label_pc_10011e71 ], [ %v1_10011ea5, %dec_label_pc_10011eab ]
  %v4_10011eae = inttoptr i32 %v3_10011eae to i8*
  store i8 0, i8* %v4_10011eae, align 1
  %v0_10011eb1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_10011eb1 = icmp slt i32 %v0_10011eb1, 0
  %v2_10011eb3 = icmp eq i1 %v2_10011eb1, false
  br i1 %v2_10011eb3, label %dec_label_pc_10011eb5, label %dec_label_pc_10011ec7

dec_label_pc_10011eb5:                            ; preds = %dec_label_pc_10011eae
  %v0_10011eb5 = load i32, i32* @ecx, align 4
  %v1_10011eb5 = inttoptr i32 %v0_10011eb5 to i8*
  %v2_10011eb5 = load i8, i8* %v1_10011eb5, align 1
  %v5_10011eb8 = icmp slt i8 %v2_10011eb5, 53
  br i1 %v5_10011eb8, label %dec_label_pc_10011ec7, label %dec_label_pc_10011eba

dec_label_pc_10011eba:                            ; preds = %dec_label_pc_10011eb5, %dec_label_pc_10011ec0
  %v0_10011eba = load i32, i32* %eax.global-to-local, align 4
  %v1_10011eba = add i32 %v0_10011eba, -1
  store i32 %v1_10011eba, i32* %eax.global-to-local, align 4
  %v1_10011ebb = inttoptr i32 %v1_10011eba to i8*
  %v2_10011ebb = load i8, i8* %v1_10011ebb, align 1
  %v11_10011ebb = icmp eq i8 %v2_10011ebb, 57
  %v1_10011ebe = icmp eq i1 %v11_10011ebb, false
  br i1 %v1_10011ebe, label %dec_label_pc_10011ec5, label %dec_label_pc_10011ec0

dec_label_pc_10011ec0:                            ; preds = %dec_label_pc_10011eba
  store i8 48, i8* %v1_10011ebb, align 1
  br label %dec_label_pc_10011eba

dec_label_pc_10011ec5:                            ; preds = %dec_label_pc_10011eba
  %v2_10011ec5 = load i8, i8* %v1_10011ebb, align 1
  %v3_10011ec5 = add i8 %v2_10011ec5, 1
  store i8 %v3_10011ec5, i8* %v1_10011ebb, align 1
  br label %dec_label_pc_10011ec7

dec_label_pc_10011ec7:                            ; preds = %dec_label_pc_10011eae, %dec_label_pc_10011eb5, %dec_label_pc_10011ec5
  %v0_10011ec7 = load i32, i32* @esi, align 4
  %v1_10011ec7 = inttoptr i32 %v0_10011ec7 to i8*
  %v2_10011ec7 = load i8, i8* %v1_10011ec7, align 1
  %v11_10011ec7 = icmp eq i8 %v2_10011ec7, 49
  %v1_10011eca = icmp eq i1 %v11_10011ec7, false
  br i1 %v1_10011eca, label %dec_label_pc_10011ed1, label %dec_label_pc_10011ecc

dec_label_pc_10011ecc:                            ; preds = %dec_label_pc_10011ec7
  %v0_10011ecc = load i32, i32* @edx, align 4
  %v1_10011ecc = add i32 %v0_10011ecc, 4
  %v2_10011ecc = inttoptr i32 %v1_10011ecc to i32*
  %v3_10011ecc = load i32, i32* %v2_10011ecc, align 4
  %v4_10011ecc = add i32 %v3_10011ecc, 1
  store i32 %v4_10011ecc, i32* %v2_10011ecc, align 4
  %v0_10011ee7.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10011ee3

dec_label_pc_10011ed1:                            ; preds = %dec_label_pc_10011ec7
  %v0_10011ed1 = load i32, i32* @edi, align 4
  %sext = mul i32 %v0_10011ed1, 16777216
  %v1_10011ed2 = sdiv i32 %sext, 16777216
  %v2_10011ed2 = inttoptr i32 %v1_10011ed2 to i8*
  %v3_10011ed2 = call i32 @function_1000d900(i8* %v2_10011ed2)
  %v1_10011ed7 = add i32 %v3_10011ed2, 1
  store i32 %v1_10011ed7, i32* %eax.global-to-local, align 4
  %v0_10011ed9 = load i32, i32* @edi, align 4
  %v0_10011eda = load i32, i32* @esi, align 4
  %v5_10011eda = inttoptr i32 %v0_10011eda to i8*
  %v5_10011edb = call i32 @function_10012060(i8* %v5_10011eda, i32 %v0_10011ed9, i32 %v1_10011ed7)
  store i32 %v5_10011edb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10011ee3

dec_label_pc_10011ee3:                            ; preds = %dec_label_pc_10011ecc, %dec_label_pc_10011ed1
  %v0_10011ee7 = phi i32 [ %v0_10011ee7.pre, %dec_label_pc_10011ecc ], [ %v5_10011edb, %dec_label_pc_10011ed1 ]
  %v2_10011ee3 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10011ee3, i32* @edi, align 4
  %v2_10011ee4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10011ee4, i32* @esi, align 4
  ret i32 %v0_10011ee7

; uselistorder directives
  uselistorder i32 %v5_10011ea6, { 1, 0 }
  uselistorder i32 %v1_10011ea5, { 0, 2, 1 }
  uselistorder i32 %v0_10011e89, { 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32 (i8*, i32, i32)* @function_10012060, { 0, 2, 1 }
  uselistorder i32 (i8*)* @function_1000d900, { 0, 4, 5, 6, 7, 8, 1, 2, 3 }
  uselistorder i32 %arg3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10011ee3, { 1, 0 }
  uselistorder label %dec_label_pc_10011ec7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10011eba, { 1, 0 }
  uselistorder label %dec_label_pc_10011eae, { 1, 0 }
  uselistorder label %dec_label_pc_10011ea3, { 1, 0 }
}

define i32 @function_10011ee8(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10011ee8:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_7()
  %tmp4 = ptrtoint i32* %arg1 to i32
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %stack_var_-44 = alloca i16, align 2
  %stack_var_-4 = alloca i32, align 4
  %v0_10011ee8 = load i32, i32* @ebp, align 4
  store i32 %v0_10011ee8, i32* %stack_var_-4, align 4
  %v4_10011ee8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10011ee8, i32* @ebp, align 4
  %v0_10011eee = load i32, i32* @esi, align 4
  %v2_10011eef = ptrtoint i32* %stack_var_4 to i32
  %v0_10011ef2 = load i32, i32* @edi, align 4
  %v2_10011ef4 = ptrtoint i32* %stack_var_-16 to i32
  %v5_10011ef8 = call i32 @function_10011f44(i32* nonnull %stack_var_-16, i32 %v2_10011eef, i32 %v0_10011ef2, i32 %v0_10011eee)
  %v15_10011f0a = ptrtoint i32* %stack_var_-76 to i32
  %v2_10011f0f = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10011f0f, i32* %stack_var_-76, align 4
  %v7_10011f0f = load i1, i1* @df, align 1
  %v8_10011f0f = select i1 %v7_10011f0f, i32 -4, i32 4
  %v9_10011f0f = add i32 %v8_10011f0f, %v15_10011f0a
  %v10_10011f0f = add i32 %v8_10011f0f, %v2_10011ef4
  store i32 %v9_10011f0f, i32* %edi.global-to-local, align 4
  store i32 %v10_10011f0f, i32* %esi.global-to-local, align 4
  %v1_10011f10 = inttoptr i32 %v10_10011f0f to i32*
  %v2_10011f10 = load i32, i32* %v1_10011f10, align 4
  %v4_10011f10 = inttoptr i32 %v9_10011f0f to i32*
  store i32 %v2_10011f10, i32* %v4_10011f10, align 4
  %v5_10011f10 = load i32, i32* %edi.global-to-local, align 4
  %v6_10011f10 = load i32, i32* %esi.global-to-local, align 4
  %v9_10011f10 = add i32 %v5_10011f10, %v8_10011f0f
  %v10_10011f10 = add i32 %v6_10011f10, %v8_10011f0f
  store i32 %v9_10011f10, i32* %edi.global-to-local, align 4
  store i32 %v10_10011f10, i32* %esi.global-to-local, align 4
  %v1_10011f11 = inttoptr i32 %v10_10011f10 to i16*
  %v2_10011f11 = load i16, i16* %v1_10011f11, align 2
  %v4_10011f11 = inttoptr i32 %v9_10011f10 to i16*
  store i16 %v2_10011f11, i16* %v4_10011f11, align 2
  %v5_10011f11 = load i32, i32* %edi.global-to-local, align 4
  %v6_10011f11 = load i32, i32* %esi.global-to-local, align 4
  %v8_10011f11 = select i1 %v7_10011f0f, i32 -2, i32 2
  %v9_10011f11 = add i32 %v5_10011f11, %v8_10011f11
  %v10_10011f11 = add i32 %v6_10011f11, %v8_10011f11
  store i32 %v9_10011f11, i32* @edi, align 4
  store i32 %v10_10011f11, i32* @esi, align 4
  %v0_10011f13 = load i32, i32* %stack_var_-76, align 4
  %v1_10011f13 = call i32 @function_1001460a(i32 %v0_10011f13)
  store i32 %tmp4, i32* %esi.global-to-local, align 4
  store i32 %arg2, i32* @edi, align 4
  %v2_10011f1e = add i32 %tmp4, 8
  %v3_10011f1e = inttoptr i32 %v2_10011f1e to i32*
  store i32 %v1_10011f13, i32* %v3_10011f1e, align 4
  %v4_10011f21 = sext i8 %tmp to i32
  %v1_10011f25 = load i32, i32* %esi.global-to-local, align 4
  %v2_10011f25 = inttoptr i32 %v1_10011f25 to i32*
  store i32 %v4_10011f21, i32* %v2_10011f25, align 4
  %v3_10011f27 = load i16, i16* %stack_var_-44, align 2
  %v4_10011f27 = sext i16 %v3_10011f27 to i32
  %v1_10011f2b = load i32, i32* %esi.global-to-local, align 4
  %v2_10011f2b = add i32 %v1_10011f2b, 4
  %v3_10011f2b = inttoptr i32 %v2_10011f2b to i32*
  store i32 %v4_10011f27, i32* %v3_10011f2b, align 4
  %v0_10011f32 = load i32, i32* @edi, align 4
  %v1_10011f33 = call i32 @function_1000d570(i32 %v0_10011f32)
  %v0_10011f3b = load i32, i32* @edi, align 4
  %v1_10011f3b = load i32, i32* %esi.global-to-local, align 4
  %v2_10011f3b = add i32 %v1_10011f3b, 12
  %v3_10011f3b = inttoptr i32 %v2_10011f3b to i32*
  store i32 %v0_10011f3b, i32* %v3_10011f3b, align 4
  %v0_10011f3e = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10011ef2, i32* @edi, align 4
  store i32 %v0_10011eee, i32* %esi.global-to-local, align 4
  ret i32 %v0_10011f3e

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32 %tmp4, { 1, 0 }
}

define i32 @function_10011f44(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10011f44:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp12 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v0_10011f4d = load i32, i32* @edi, align 4
  store i32 %v0_10011f4d, i32* %stack_var_-20, align 4
  %v1_10011f4e = add i32 %arg2, 6
  %v2_10011f4e = inttoptr i32 %v1_10011f4e to i16*
  %v3_10011f4e = load i16, i16* %v2_10011f4e, align 2
  %v4_10011f4e = zext i16 %v3_10011f4e to i32
  store i32 2047, i32* %edi.global-to-local, align 4
  %v1_10011f59 = and i32 %v4_10011f4e, 32768
  store i32 %v1_10011f59, i32* %eax.global-to-local, align 4
  %div = udiv i16 %v3_10011f4e, 16
  %v2_10011f5e = zext i16 %div to i32
  %v2_10011f61 = and i32 %v2_10011f5e, 2047
  %v3_10011f61 = icmp eq i32 %v2_10011f61, 0
  store i32 %v2_10011f61, i32* %ecx.global-to-local, align 4
  %v1_10011f66 = add i32 %arg2, 4
  %v2_10011f66 = inttoptr i32 %v1_10011f66 to i32*
  %v3_10011f66 = load i32, i32* %v2_10011f66, align 4
  store i32 %v3_10011f66, i32* %eax.global-to-local, align 4
  %v1_10011f69 = inttoptr i32 %arg2 to i32*
  %v2_10011f69 = load i32, i32* %v1_10011f69, align 4
  store i32 %v2_10011f69, i32* %edx.global-to-local, align 4
  store i32 %v2_10011f61, i32* %ebx.global-to-local, align 4
  store i32 -2147483648, i32* %esi.global-to-local, align 4
  %v1_10011f73 = and i32 %v3_10011f66, 1048575
  store i32 %v1_10011f73, i32* %eax.global-to-local, align 4
  br i1 %v3_10011f61, label %dec_label_pc_10011f92, label %dec_label_pc_10011f7f

dec_label_pc_10011f7f:                            ; preds = %dec_label_pc_10011f44
  %v12_10011f7f = icmp eq i32 %v2_10011f61, 2047
  br i1 %v12_10011f7f, label %dec_label_pc_10011f8b, label %dec_label_pc_10011f83

dec_label_pc_10011f83:                            ; preds = %dec_label_pc_10011f7f
  %v1_10011f83 = add nuw nsw i32 %v2_10011f61, 15360
  store i32 %v1_10011f83, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10011fb3

dec_label_pc_10011f8b:                            ; preds = %dec_label_pc_10011f7f
  store i32 32767, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10011fb3

dec_label_pc_10011f92:                            ; preds = %dec_label_pc_10011f44
  %v2_10011f73 = icmp eq i32 %v1_10011f73, 0
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_10011f96 = icmp eq i1 %v2_10011f73, false
  br i1 %v1_10011f96, label %dec_label_pc_10011faa, label %dec_label_pc_10011f98

dec_label_pc_10011f98:                            ; preds = %dec_label_pc_10011f92
  %v12_10011f98 = icmp eq i32 %v2_10011f69, 0
  %v1_10011f9a = icmp eq i1 %v12_10011f98, false
  br i1 %v1_10011f9a, label %dec_label_pc_10011faa, label %dec_label_pc_10011f9c

dec_label_pc_10011f9c:                            ; preds = %dec_label_pc_10011f98
  store i32 %tmp12, i32* %eax.global-to-local, align 4
  %v2_10011f9f = add i32 %tmp12, 4
  %v3_10011f9f = inttoptr i32 %v2_10011f9f to i32*
  store i32 0, i32* %v3_10011f9f, align 4
  %v0_10011fa2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10011fa2 = load i32, i32* %eax.global-to-local, align 4
  %v2_10011fa2 = inttoptr i32 %v1_10011fa2 to i32*
  store i32 %v0_10011fa2, i32* %v2_10011fa2, align 4
  %v0_10011fa4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10011fa4 = trunc i32 %v0_10011fa4 to i16
  %v2_10011fa4 = load i32, i32* %eax.global-to-local, align 4
  %v3_10011fa4 = add i32 %v2_10011fa4, 8
  %v4_10011fa4 = inttoptr i32 %v3_10011fa4 to i16*
  store i16 %v1_10011fa4, i16* %v4_10011fa4, align 2
  br label %dec_label_pc_10011ff5

dec_label_pc_10011faa:                            ; preds = %dec_label_pc_10011f98, %dec_label_pc_10011f92
  store i32 15361, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10011fb3

dec_label_pc_10011fb3:                            ; preds = %dec_label_pc_10011f8b, %dec_label_pc_10011f83, %dec_label_pc_10011faa
  %v4_10011fc0 = phi i32 [ -2147483648, %dec_label_pc_10011f8b ], [ -2147483648, %dec_label_pc_10011f83 ], [ 0, %dec_label_pc_10011faa ]
  %v2_10011fb5 = udiv i32 %v2_10011f69, 2097152
  %v2_10011fb8 = mul nuw i32 %v1_10011f73, 2048
  %v2_10011fbb = or i32 %v2_10011fb5, %v2_10011fb8
  store i32 %tmp12, i32* %eax.global-to-local, align 4
  %v5_10011fc0 = or i32 %v2_10011fbb, %v4_10011fc0
  store i32 %v5_10011fc0, i32* %ecx.global-to-local, align 4
  %v2_10011fc3 = mul i32 %v2_10011f69, 2048
  store i32 %v2_10011fc3, i32* %edx.global-to-local, align 4
  %v2_10011fc6 = add i32 %tmp12, 4
  %v3_10011fc6 = inttoptr i32 %v2_10011fc6 to i32*
  store i32 %v5_10011fc0, i32* %v3_10011fc6, align 4
  %v0_10011fc9 = load i32, i32* %edx.global-to-local, align 4
  %v1_10011fc9 = load i32, i32* %eax.global-to-local, align 4
  %v2_10011fc9 = inttoptr i32 %v1_10011fc9 to i32*
  store i32 %v0_10011fc9, i32* %v2_10011fc9, align 4
  %v0_10011fcb1 = load i32, i32* %esi.global-to-local, align 4
  %v1_10011fcb2 = load i32, i32* %ecx.global-to-local, align 4
  %v2_10011fcb3 = and i32 %v1_10011fcb2, %v0_10011fcb1
  %v3_10011fcb4 = icmp eq i32 %v2_10011fcb3, 0
  %v1_10011fcd6 = icmp eq i1 %v3_10011fcb4, false
  br i1 %v1_10011fcd6, label %dec_label_pc_10011fb3.dec_label_pc_10011fec_crit_edge, label %dec_label_pc_10011fcf

dec_label_pc_10011fb3.dec_label_pc_10011fec_crit_edge: ; preds = %dec_label_pc_10011fb3
  %v1_10011fef.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10011fec

dec_label_pc_10011fcf:                            ; preds = %dec_label_pc_10011fb3, %dec_label_pc_10011fcf
  %v0_10011fd1 = phi i32 [ %v0_10011fe8, %dec_label_pc_10011fcf ], [ %v1_10011fcb2, %dec_label_pc_10011fb3 ]
  %v0_10011fcf = load i32, i32* %eax.global-to-local, align 4
  %v1_10011fcf = inttoptr i32 %v0_10011fcf to i32*
  %v2_10011fcf = load i32, i32* %v1_10011fcf, align 4
  store i32 %v2_10011fcf, i32* %edx.global-to-local, align 4
  %v2_10011fd1 = mul i32 %v0_10011fd1, 2
  %v2_10011fd5 = lshr i32 %v2_10011fcf, 31
  %v2_10011fd8 = or i32 %v2_10011fd5, %v2_10011fd1
  store i32 %v2_10011fd8, i32* %ebx.global-to-local, align 4
  %v2_10011fda = mul i32 %v2_10011fcf, 2
  store i32 %v2_10011fda, i32* %v1_10011fcf, align 4
  %v0_10011fdf = load i32, i32* %ebx.global-to-local, align 4
  %v1_10011fdf = load i32, i32* %eax.global-to-local, align 4
  %v2_10011fdf = add i32 %v1_10011fdf, 4
  %v3_10011fdf = inttoptr i32 %v2_10011fdf to i32*
  store i32 %v0_10011fdf, i32* %v3_10011fdf, align 4
  %v0_10011fe2 = load i32, i32* %edi.global-to-local, align 4
  %v1_10011fe2 = add i32 %v0_10011fe2, 65535
  store i32 %v1_10011fe2, i32* %edi.global-to-local, align 4
  %v0_10011fe8 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_10011fe8, i32* %ecx.global-to-local, align 4
  %v0_10011fcb = load i32, i32* %esi.global-to-local, align 4
  %v2_10011fcb = and i32 %v0_10011fcb, %v0_10011fe8
  %v3_10011fcb = icmp eq i32 %v2_10011fcb, 0
  %v1_10011fcd = icmp eq i1 %v3_10011fcb, false
  br i1 %v1_10011fcd, label %dec_label_pc_10011fcb.dec_label_pc_10011fec_crit_edge, label %dec_label_pc_10011fcf

dec_label_pc_10011fcb.dec_label_pc_10011fec_crit_edge: ; preds = %dec_label_pc_10011fcf
  br label %dec_label_pc_10011fec

dec_label_pc_10011fec:                            ; preds = %dec_label_pc_10011fb3.dec_label_pc_10011fec_crit_edge, %dec_label_pc_10011fcb.dec_label_pc_10011fec_crit_edge
  %v1_10011fef = phi i32 [ %v1_10011fef.pre, %dec_label_pc_10011fb3.dec_label_pc_10011fec_crit_edge ], [ %v1_10011fe2, %dec_label_pc_10011fcb.dec_label_pc_10011fec_crit_edge ]
  %v2_10011fef = or i32 %v1_10011fef, %v1_10011f59
  store i32 %v2_10011fef, i32* %ecx.global-to-local, align 4
  %v1_10011ff1 = trunc i32 %v2_10011fef to i16
  %v2_10011ff1 = load i32, i32* %eax.global-to-local, align 4
  %v3_10011ff1 = add i32 %v2_10011ff1, 8
  %v4_10011ff1 = inttoptr i32 %v3_10011ff1 to i16*
  store i16 %v1_10011ff1, i16* %v4_10011ff1, align 2
  br label %dec_label_pc_10011ff5

dec_label_pc_10011ff5:                            ; preds = %dec_label_pc_10011f9c, %dec_label_pc_10011fec
  %v2_10011ff5 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10011ff5, i32* %edi.global-to-local, align 4
  %v0_10011ff9 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10011ff9

; uselistorder directives
  uselistorder i32 %v0_10011fe8, { 0, 2, 1 }
  uselistorder i32 %v1_10011f73, { 0, 2, 1 }
  uselistorder i32 %v2_10011f61, { 1, 0, 2, 3, 4 }
  uselistorder i32 %tmp12, { 0, 3, 2, 1 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 4, 5, 2, 3, 6, 7 }
  uselistorder i32* %eax.global-to-local, { 5, 0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 2048, { 1, 2, 3, 6, 7, 8, 0, 9, 4, 5 }
  uselistorder i32 2097152, { 2, 0, 1 }
  uselistorder i32 2047, { 1, 2, 3, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10011ff5, { 1, 0 }
  uselistorder label %dec_label_pc_10011fec, { 1, 0 }
  uselistorder label %dec_label_pc_10011fcf, { 1, 0 }
  uselistorder label %dec_label_pc_10011fb3, { 2, 0, 1 }
}

define i32 @function_10012000(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10012000:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 %arg3, i32* @edx, align 4
  %v4_10012004 = ptrtoint i8* %arg1 to i32
  store i32 %v4_10012004, i32* %ecx.global-to-local, align 4
  %v1_10012008 = icmp eq i32 %arg3, 0
  br i1 %v1_10012008, label %dec_label_pc_10012053, label %dec_label_pc_1001200c

dec_label_pc_1001200c:                            ; preds = %dec_label_pc_10012000
  %v4_1001200e = and i32 %arg2, 255
  store i32 %v4_1001200e, i32* %eax.global-to-local, align 4
  %v0_10012012 = load i32, i32* @edi, align 4
  store i32 %v0_10012012, i32* %stack_var_-4, align 4
  store i32 %v4_10012004, i32* %edi.global-to-local, align 4
  %v5_10012015 = icmp ult i32 %arg3, 4
  br i1 %v5_10012015, label %dec_label_pc_10012047, label %dec_label_pc_1001201a

dec_label_pc_1001201a:                            ; preds = %dec_label_pc_1001200c
  %v1_1001201a = sub i32 0, %v4_10012004
  %v1_1001201c = and i32 %v1_1001201a, 3
  %v2_1001201c = icmp eq i32 %v1_1001201c, 0
  store i32 %v1_1001201c, i32* %ecx.global-to-local, align 4
  br i1 %v2_1001201c, label %dec_label_pc_10012029, label %dec_label_pc_10012021

dec_label_pc_10012021:                            ; preds = %dec_label_pc_1001201a
  %v2_10012021 = sub i32 %arg3, %v1_1001201c
  store i32 %v2_10012021, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10012023

dec_label_pc_10012023:                            ; preds = %dec_label_pc_10012023, %dec_label_pc_10012021
  %v2_10012023 = phi i32 [ %v4_10012004, %dec_label_pc_10012021 ], [ %v1_10012025, %dec_label_pc_10012023 ]
  %v0_10012023 = phi i32 [ %v4_1001200e, %dec_label_pc_10012021 ], [ %v0_10012023.pre, %dec_label_pc_10012023 ]
  %v1_10012023 = trunc i32 %v0_10012023 to i8
  %v3_10012023 = inttoptr i32 %v2_10012023 to i8*
  store i8 %v1_10012023, i8* %v3_10012023, align 1
  %v0_10012025 = load i32, i32* %edi.global-to-local, align 4
  %v1_10012025 = add i32 %v0_10012025, 1
  store i32 %v1_10012025, i32* %edi.global-to-local, align 4
  %v0_10012026 = load i32, i32* %ecx.global-to-local, align 4
  %v1_10012026 = add i32 %v0_10012026, -1
  %v8_10012026 = icmp eq i32 %v1_10012026, 0
  store i32 %v1_10012026, i32* %ecx.global-to-local, align 4
  %v1_10012027 = icmp eq i1 %v8_10012026, false
  %v0_10012023.pre = load i32, i32* %eax.global-to-local, align 4
  br i1 %v1_10012027, label %dec_label_pc_10012023, label %dec_label_pc_10012029.loopexit

dec_label_pc_10012029.loopexit:                   ; preds = %dec_label_pc_10012023
  %v0_10012037.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10012029

dec_label_pc_10012029:                            ; preds = %dec_label_pc_10012029.loopexit, %dec_label_pc_1001201a
  %v0_10012041 = phi i32 [ %v1_10012025, %dec_label_pc_10012029.loopexit ], [ %v4_10012004, %dec_label_pc_1001201a ]
  %v0_10012037 = phi i32 [ %v0_10012037.pre, %dec_label_pc_10012029.loopexit ], [ %arg3, %dec_label_pc_1001201a ]
  %v0_10012029 = phi i32 [ %v0_10012023.pre, %dec_label_pc_10012029.loopexit ], [ %v4_1001200e, %dec_label_pc_1001201a ]
  %v2_10012035 = mul i32 %v0_10012029, 16843009
  store i32 %v2_10012035, i32* %eax.global-to-local, align 4
  %v1_10012039 = and i32 %v0_10012037, 3
  store i32 %v1_10012039, i32* @edx, align 4
  %v2_1001203c = udiv i32 %v0_10012037, 4
  %tmp = icmp ult i32 %v0_10012037, 4
  store i32 %v2_1001203c, i32* %ecx.global-to-local, align 4
  br i1 %tmp, label %dec_label_pc_10012047, label %dec_label_pc_10012041

dec_label_pc_10012041:                            ; preds = %dec_label_pc_10012029
  %v3_10012041 = inttoptr i32 %v0_10012041 to i8*
  %v4_10012041 = call i8* @_memset(i8* %v3_10012041, i32 %v2_10012035, i32 %v2_1001203c)
  %v5_10012041 = ptrtoint i8* %v4_10012041 to i32
  store i32 %v5_10012041, i32* %ecx.global-to-local, align 4
  %v0_10012043 = load i32, i32* @edx, align 4
  %v1_10012043 = icmp eq i32 %v0_10012043, 0
  br i1 %v1_10012043, label %dec_label_pc_1001204d, label %dec_label_pc_10012041.dec_label_pc_10012047.preheader_crit_edge

dec_label_pc_10012041.dec_label_pc_10012047.preheader_crit_edge: ; preds = %dec_label_pc_10012041
  %v2_10012047.pre.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10012047

dec_label_pc_10012047:                            ; preds = %dec_label_pc_10012029, %dec_label_pc_1001200c, %dec_label_pc_10012041.dec_label_pc_10012047.preheader_crit_edge, %dec_label_pc_10012047
  %v2_10012047 = phi i32 [ %v1_10012049, %dec_label_pc_10012047 ], [ %v0_10012041, %dec_label_pc_10012029 ], [ %v4_10012004, %dec_label_pc_1001200c ], [ %v2_10012047.pre.pre, %dec_label_pc_10012041.dec_label_pc_10012047.preheader_crit_edge ]
  %v0_10012047 = load i32, i32* %eax.global-to-local, align 4
  %v1_10012047 = trunc i32 %v0_10012047 to i8
  %v3_10012047 = inttoptr i32 %v2_10012047 to i8*
  store i8 %v1_10012047, i8* %v3_10012047, align 1
  %v0_10012049 = load i32, i32* %edi.global-to-local, align 4
  %v1_10012049 = add i32 %v0_10012049, 1
  store i32 %v1_10012049, i32* %edi.global-to-local, align 4
  %v0_1001204a = load i32, i32* @edx, align 4
  %v1_1001204a = add i32 %v0_1001204a, -1
  %v8_1001204a = icmp eq i32 %v1_1001204a, 0
  store i32 %v1_1001204a, i32* @edx, align 4
  %v1_1001204b = icmp eq i1 %v8_1001204a, false
  br i1 %v1_1001204b, label %dec_label_pc_10012047, label %dec_label_pc_1001204d

dec_label_pc_1001204d:                            ; preds = %dec_label_pc_10012047, %dec_label_pc_10012041
  store i32 %v4_10012004, i32* %eax.global-to-local, align 4
  %v2_10012051 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10012051, i32* @edi, align 4
  ret i32 %v4_10012004

dec_label_pc_10012053:                            ; preds = %dec_label_pc_10012000
  store i32 %v4_10012004, i32* %eax.global-to-local, align 4
  ret i32 %v4_10012004

; uselistorder directives
  uselistorder i32 %v1_1001204a, { 1, 0 }
  uselistorder i32 %v1_10012049, { 1, 0 }
  uselistorder i32 %v2_1001203c, { 1, 0 }
  uselistorder i32 %v2_10012035, { 1, 0 }
  uselistorder i32 %v1_10012026, { 1, 0 }
  uselistorder i32 %v1_10012025, { 0, 2, 1 }
  uselistorder i32 %v4_1001200e, { 1, 0, 2 }
  uselistorder i32 %v4_10012004, { 8, 7, 6, 5, 0, 2, 1, 3, 4, 9 }
  uselistorder i32* %edi.global-to-local, { 0, 3, 2, 1, 4, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %arg3, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_10012047, { 3, 2, 0, 1 }
}

define i32 @function_10012060(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10012060:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_10012063 = load i32, i32* @edi, align 4
  %v0_10012064 = load i32, i32* @esi, align 4
  store i32 %v0_10012064, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  store i32 %arg3, i32* %ecx.global-to-local, align 4
  %v4_1001206b = ptrtoint i8* %arg1 to i32
  store i32 %v4_1001206b, i32* @edi, align 4
  %v2_10012072 = add i32 %arg3, %arg2
  store i32 %v2_10012072, i32* %eax.global-to-local, align 4
  %tmp = icmp ugt i32 %v4_1001206b, %arg2
  br i1 %tmp, label %dec_label_pc_10012078, label %dec_label_pc_10012080

dec_label_pc_10012078:                            ; preds = %dec_label_pc_10012060
  %v7_10012078 = icmp ult i32 %v4_1001206b, %v2_10012072
  br i1 %v7_10012078, label %dec_label_pc_100121f8, label %dec_label_pc_10012080

dec_label_pc_10012080:                            ; preds = %dec_label_pc_10012060, %dec_label_pc_10012078
  %v1_10012080 = and i32 %v4_1001206b, 3
  %v2_10012080 = icmp eq i32 %v1_10012080, 0
  %v1_10012086 = icmp eq i1 %v2_10012080, false
  br i1 %v1_10012086, label %dec_label_pc_1001209c, label %dec_label_pc_10012088

dec_label_pc_10012088:                            ; preds = %dec_label_pc_10012080
  %v2_10012088 = udiv i32 %arg3, 4
  store i32 %v2_10012088, i32* %ecx.global-to-local, align 4
  %v1_1001208b = and i32 %arg3, 3
  store i32 %v1_1001208b, i32* @edx, align 4
  %v3_10012093 = inttoptr i32 %arg2 to i8*
  %v5_10012093 = call i8* @_memcpy(i8* %arg1, i8* %v3_10012093, i32 %v2_10012088)
  %v6_10012093 = ptrtoint i8* %v5_10012093 to i32
  store i32 %v6_10012093, i32* @ecx, align 4
  %trunc = trunc i32 %arg3 to i2
  switch i2 %trunc, label %dec_label_pc_100120bc4 [
    i2 0, label %dec_label_pc_100121b8
    i2 1, label %dec_label_pc_100121c0
    i2 -2, label %dec_label_pc_100121cc
    i2 -1, label %dec_label_pc_100121e0
  ]

dec_label_pc_1001209c:                            ; preds = %dec_label_pc_10012080
  %v1_100120a3 = add i32 %arg3, -4
  store i32 %v1_10012080, i32* %eax.global-to-local, align 4
  %v2_100120ab = add i32 %v1_100120a3, %v1_10012080
  store i32 %v2_100120ab, i32* %ecx.global-to-local, align 4
  %v1_100120ad = mul nuw nsw i32 %v1_10012080, 4
  %v2_100120ad = add i32 %v1_100120ad, ptrtoint (i32* @global_var_100120c0.218 to i32)
  %v3_100120ad = inttoptr i32 %v2_100120ad to i32*
  %v4_100120ad = load i32, i32* %v3_100120ad, align 4
  call void @__pseudo_branch(i32 %v4_100120ad)
  br label %dec_label_pc_100120b4

dec_label_pc_100120b4:                            ; preds = %dec_label_pc_100120bc, %dec_label_pc_1001209c
  %v0_100120b4 = phi i32 [ %v2_100120ab, %dec_label_pc_1001209c ], [ %v2_10012160, %dec_label_pc_100120bc ]
  %v1_100120b4 = mul i32 %v0_100120b4, 4
  %v2_100120b4 = add i32 %v1_100120b4, ptrtoint (i32* @global_var_100121b8.219 to i32)
  %v3_100120b4 = inttoptr i32 %v2_100120b4 to i32*
  %v4_100120b4 = load i32, i32* %v3_100120b4, align 4
  call void @__pseudo_branch(i32 %v4_100120b4)
  %v0_100120bc.pr.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_100120bcthread-pre-split

dec_label_pc_100120bc4:                           ; preds = %dec_label_pc_10012088
  unreachable

dec_label_pc_100120bcthread-pre-split:            ; preds = %dec_label_pc_100120b4, %dec_label_pc_1001218c
  %v2_10012160 = phi i32 [ %v0_100120bc.pr.pre, %dec_label_pc_100120b4 ], [ %v0_10012194, %dec_label_pc_1001218c ]
  br label %dec_label_pc_100120bc

dec_label_pc_100120bc:                            ; preds = %dec_label_pc_100120bcthread-pre-split, %dec_label_pc_100120bc
  %v0_100120bc = phi i32 [ %v2_10012160, %dec_label_pc_100120bcthread-pre-split ], [ 0, %dec_label_pc_100120bc ]
  switch i32 %v0_100120bc, label %dec_label_pc_100120b4 [
    i32 0, label %dec_label_pc_100120bc
    i32 1, label %dec_label_pc_1001218c
    i32 2, label %dec_label_pc_10012184
    i32 3, label %dec_label_pc_1001217c
    i32 4, label %dec_label_pc_10012174
    i32 5, label %dec_label_pc_1001216c
    i32 6, label %dec_label_pc_10012164
    i32 7, label %dec_label_pc_1001215c
  ]

dec_label_pc_1001215c:                            ; preds = %dec_label_pc_100120bc
  %v0_1001215c = load i32, i32* %esi.global-to-local, align 4
  %v5_1001215c = inttoptr i32 %v0_1001215c to i32*
  %v6_1001215c = load i32, i32* %v5_1001215c, align 4
  store i32 %v6_1001215c, i32* %eax.global-to-local, align 4
  %v1_10012160 = load i32, i32* @edi, align 4
  %v3_10012160 = mul i32 %v2_10012160, 4
  %v4_10012160 = add i32 %v3_10012160, -28
  %v5_10012160 = add i32 %v4_10012160, %v1_10012160
  %v6_10012160 = inttoptr i32 %v5_10012160 to i32*
  store i32 %v6_1001215c, i32* %v6_10012160, align 4
  %v1_10012164.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_10012164

dec_label_pc_10012164:                            ; preds = %dec_label_pc_100120bc, %dec_label_pc_1001215c
  %v2_10012168 = phi i32 [ %v1_10012164.pre, %dec_label_pc_1001215c ], [ %v2_10012160, %dec_label_pc_100120bc ]
  %v0_10012164 = load i32, i32* %esi.global-to-local, align 4
  %v2_10012164 = mul i32 %v2_10012168, 4
  %v3_10012164 = add i32 %v0_10012164, -24
  %v4_10012164 = add i32 %v3_10012164, %v2_10012164
  %v5_10012164 = inttoptr i32 %v4_10012164 to i32*
  %v6_10012164 = load i32, i32* %v5_10012164, align 4
  store i32 %v6_10012164, i32* %eax.global-to-local, align 4
  %v1_10012168 = load i32, i32* @edi, align 4
  %v4_10012168 = add i32 %v2_10012164, -24
  %v5_10012168 = add i32 %v4_10012168, %v1_10012168
  %v6_10012168 = inttoptr i32 %v5_10012168 to i32*
  store i32 %v6_10012164, i32* %v6_10012168, align 4
  %v1_1001216c.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1001216c

dec_label_pc_1001216c:                            ; preds = %dec_label_pc_100120bc, %dec_label_pc_10012164
  %v2_10012170 = phi i32 [ %v1_1001216c.pre, %dec_label_pc_10012164 ], [ %v2_10012160, %dec_label_pc_100120bc ]
  %v0_1001216c = load i32, i32* %esi.global-to-local, align 4
  %v2_1001216c = mul i32 %v2_10012170, 4
  %v3_1001216c = add i32 %v0_1001216c, -20
  %v4_1001216c = add i32 %v3_1001216c, %v2_1001216c
  %v5_1001216c = inttoptr i32 %v4_1001216c to i32*
  %v6_1001216c = load i32, i32* %v5_1001216c, align 4
  store i32 %v6_1001216c, i32* %eax.global-to-local, align 4
  %v1_10012170 = load i32, i32* @edi, align 4
  %v4_10012170 = add i32 %v2_1001216c, -20
  %v5_10012170 = add i32 %v4_10012170, %v1_10012170
  %v6_10012170 = inttoptr i32 %v5_10012170 to i32*
  store i32 %v6_1001216c, i32* %v6_10012170, align 4
  %v1_10012174.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_10012174

dec_label_pc_10012174:                            ; preds = %dec_label_pc_100120bc, %dec_label_pc_1001216c
  %v2_10012178 = phi i32 [ %v1_10012174.pre, %dec_label_pc_1001216c ], [ %v2_10012160, %dec_label_pc_100120bc ]
  %v0_10012174 = load i32, i32* %esi.global-to-local, align 4
  %v2_10012174 = mul i32 %v2_10012178, 4
  %v3_10012174 = add i32 %v0_10012174, -16
  %v4_10012174 = add i32 %v3_10012174, %v2_10012174
  %v5_10012174 = inttoptr i32 %v4_10012174 to i32*
  %v6_10012174 = load i32, i32* %v5_10012174, align 4
  store i32 %v6_10012174, i32* %eax.global-to-local, align 4
  %v1_10012178 = load i32, i32* @edi, align 4
  %v4_10012178 = add i32 %v2_10012174, -16
  %v5_10012178 = add i32 %v4_10012178, %v1_10012178
  %v6_10012178 = inttoptr i32 %v5_10012178 to i32*
  store i32 %v6_10012174, i32* %v6_10012178, align 4
  %v1_1001217c.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1001217c

dec_label_pc_1001217c:                            ; preds = %dec_label_pc_100120bc, %dec_label_pc_10012174
  %v2_10012180 = phi i32 [ %v1_1001217c.pre, %dec_label_pc_10012174 ], [ %v2_10012160, %dec_label_pc_100120bc ]
  %v0_1001217c = load i32, i32* %esi.global-to-local, align 4
  %v2_1001217c = mul i32 %v2_10012180, 4
  %v3_1001217c = add i32 %v0_1001217c, -12
  %v4_1001217c = add i32 %v3_1001217c, %v2_1001217c
  %v5_1001217c = inttoptr i32 %v4_1001217c to i32*
  %v6_1001217c = load i32, i32* %v5_1001217c, align 4
  store i32 %v6_1001217c, i32* %eax.global-to-local, align 4
  %v1_10012180 = load i32, i32* @edi, align 4
  %v4_10012180 = add i32 %v2_1001217c, -12
  %v5_10012180 = add i32 %v4_10012180, %v1_10012180
  %v6_10012180 = inttoptr i32 %v5_10012180 to i32*
  store i32 %v6_1001217c, i32* %v6_10012180, align 4
  %v1_10012184.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_10012184

dec_label_pc_10012184:                            ; preds = %dec_label_pc_100120bc, %dec_label_pc_1001217c
  %v2_10012188 = phi i32 [ %v1_10012184.pre, %dec_label_pc_1001217c ], [ %v2_10012160, %dec_label_pc_100120bc ]
  %v0_10012184 = load i32, i32* %esi.global-to-local, align 4
  %v2_10012184 = mul i32 %v2_10012188, 4
  %v3_10012184 = add i32 %v0_10012184, -8
  %v4_10012184 = add i32 %v3_10012184, %v2_10012184
  %v5_10012184 = inttoptr i32 %v4_10012184 to i32*
  %v6_10012184 = load i32, i32* %v5_10012184, align 4
  store i32 %v6_10012184, i32* %eax.global-to-local, align 4
  %v1_10012188 = load i32, i32* @edi, align 4
  %v4_10012188 = add i32 %v2_10012184, -8
  %v5_10012188 = add i32 %v4_10012188, %v1_10012188
  %v6_10012188 = inttoptr i32 %v5_10012188 to i32*
  store i32 %v6_10012184, i32* %v6_10012188, align 4
  %v1_1001218c.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_1001218c

dec_label_pc_1001218c:                            ; preds = %dec_label_pc_100120bc, %dec_label_pc_10012184
  %v2_10012190 = phi i32 [ %v1_1001218c.pre, %dec_label_pc_10012184 ], [ %v2_10012160, %dec_label_pc_100120bc ]
  %v0_1001218c = load i32, i32* %esi.global-to-local, align 4
  %v2_1001218c = mul i32 %v2_10012190, 4
  %v3_1001218c = add i32 %v0_1001218c, -4
  %v4_1001218c = add i32 %v3_1001218c, %v2_1001218c
  %v5_1001218c = inttoptr i32 %v4_1001218c to i32*
  %v6_1001218c = load i32, i32* %v5_1001218c, align 4
  %v1_10012190 = load i32, i32* @edi, align 4
  %v4_10012190 = add i32 %v2_1001218c, -4
  %v5_10012190 = add i32 %v4_10012190, %v1_10012190
  %v6_10012190 = inttoptr i32 %v5_10012190 to i32*
  store i32 %v6_1001218c, i32* %v6_10012190, align 4
  %v0_10012194 = load i32, i32* %ecx.global-to-local, align 4
  %v1_10012194 = mul i32 %v0_10012194, 4
  store i32 %v1_10012194, i32* %eax.global-to-local, align 4
  %v0_1001219b = load i32, i32* %esi.global-to-local, align 4
  %v2_1001219b = add i32 %v0_1001219b, %v1_10012194
  store i32 %v2_1001219b, i32* %esi.global-to-local, align 4
  %v0_1001219d = load i32, i32* @edi, align 4
  %v2_1001219d = add i32 %v0_1001219d, %v1_10012194
  store i32 %v2_1001219d, i32* @edi, align 4
  br label %dec_label_pc_100120bcthread-pre-split

dec_label_pc_100121b8:                            ; preds = %dec_label_pc_10012088
  store i32 %v4_1001206b, i32* %eax.global-to-local, align 4
  %v2_100121bb = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_100121bb, i32* %esi.global-to-local, align 4
  store i32 %v0_10012063, i32* @edi, align 4
  ret i32 %v4_1001206b

dec_label_pc_100121c0:                            ; preds = %dec_label_pc_10012088
  %v0_100121c0 = load i32, i32* %esi.global-to-local, align 4
  %v1_100121c0 = inttoptr i32 %v0_100121c0 to i8*
  %v2_100121c0 = load i8, i8* %v1_100121c0, align 1
  %v2_100121c2 = load i32, i32* @edi, align 4
  %v3_100121c2 = inttoptr i32 %v2_100121c2 to i8*
  store i8 %v2_100121c0, i8* %v3_100121c2, align 1
  store i32 %v4_1001206b, i32* %eax.global-to-local, align 4
  %v2_100121c7 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_100121c7, i32* %esi.global-to-local, align 4
  store i32 %v0_10012063, i32* @edi, align 4
  ret i32 %v4_1001206b

dec_label_pc_100121cc:                            ; preds = %dec_label_pc_10012088
  %v0_100121cc = load i32, i32* %esi.global-to-local, align 4
  %v1_100121cc = inttoptr i32 %v0_100121cc to i8*
  %v2_100121cc = load i8, i8* %v1_100121cc, align 1
  %v3_100121cc = zext i8 %v2_100121cc to i32
  %v4_100121cc = load i32, i32* %eax.global-to-local, align 4
  %v5_100121cc = and i32 %v4_100121cc, -256
  %v6_100121cc = or i32 %v5_100121cc, %v3_100121cc
  store i32 %v6_100121cc, i32* %eax.global-to-local, align 4
  %v2_100121ce = load i32, i32* @edi, align 4
  %v3_100121ce = inttoptr i32 %v2_100121ce to i8*
  store i8 %v2_100121cc, i8* %v3_100121ce, align 1
  %v0_100121d0 = load i32, i32* %esi.global-to-local, align 4
  %v1_100121d0 = add i32 %v0_100121d0, 1
  %v2_100121d0 = inttoptr i32 %v1_100121d0 to i8*
  %v3_100121d0 = load i8, i8* %v2_100121d0, align 1
  %v2_100121d3 = load i32, i32* @edi, align 4
  %v3_100121d3 = add i32 %v2_100121d3, 1
  %v4_100121d3 = inttoptr i32 %v3_100121d3 to i8*
  store i8 %v3_100121d0, i8* %v4_100121d3, align 1
  store i32 %v4_1001206b, i32* %eax.global-to-local, align 4
  %v2_100121d9 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_100121d9, i32* %esi.global-to-local, align 4
  store i32 %v0_10012063, i32* @edi, align 4
  ret i32 %v4_1001206b

dec_label_pc_100121e0:                            ; preds = %dec_label_pc_10012088
  %v0_100121e0 = load i32, i32* %esi.global-to-local, align 4
  %v1_100121e0 = inttoptr i32 %v0_100121e0 to i8*
  %v2_100121e0 = load i8, i8* %v1_100121e0, align 1
  %v3_100121e0 = zext i8 %v2_100121e0 to i32
  %v4_100121e0 = load i32, i32* %eax.global-to-local, align 4
  %v5_100121e0 = and i32 %v4_100121e0, -256
  %v6_100121e0 = or i32 %v5_100121e0, %v3_100121e0
  store i32 %v6_100121e0, i32* %eax.global-to-local, align 4
  %v2_100121e2 = load i32, i32* @edi, align 4
  %v3_100121e2 = inttoptr i32 %v2_100121e2 to i8*
  store i8 %v2_100121e0, i8* %v3_100121e2, align 1
  %v0_100121e4 = load i32, i32* %esi.global-to-local, align 4
  %v1_100121e4 = add i32 %v0_100121e4, 1
  %v2_100121e4 = inttoptr i32 %v1_100121e4 to i8*
  %v3_100121e4 = load i8, i8* %v2_100121e4, align 1
  %v4_100121e4 = zext i8 %v3_100121e4 to i32
  %v5_100121e4 = load i32, i32* %eax.global-to-local, align 4
  %v6_100121e4 = and i32 %v5_100121e4, -256
  %v7_100121e4 = or i32 %v6_100121e4, %v4_100121e4
  store i32 %v7_100121e4, i32* %eax.global-to-local, align 4
  %v2_100121e7 = load i32, i32* @edi, align 4
  %v3_100121e7 = add i32 %v2_100121e7, 1
  %v4_100121e7 = inttoptr i32 %v3_100121e7 to i8*
  store i8 %v3_100121e4, i8* %v4_100121e7, align 1
  %v0_100121ea = load i32, i32* %esi.global-to-local, align 4
  %v1_100121ea = add i32 %v0_100121ea, 2
  %v2_100121ea = inttoptr i32 %v1_100121ea to i8*
  %v3_100121ea = load i8, i8* %v2_100121ea, align 1
  %v2_100121ed = load i32, i32* @edi, align 4
  %v3_100121ed = add i32 %v2_100121ed, 2
  %v4_100121ed = inttoptr i32 %v3_100121ed to i8*
  store i8 %v3_100121ea, i8* %v4_100121ed, align 1
  store i32 %v4_1001206b, i32* %eax.global-to-local, align 4
  %v2_100121f3 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_100121f3, i32* %esi.global-to-local, align 4
  store i32 %v0_10012063, i32* @edi, align 4
  ret i32 %v4_1001206b

dec_label_pc_100121f8:                            ; preds = %dec_label_pc_10012078
  %v2_100121f8 = add i32 %arg3, -4
  %v3_100121f8 = add i32 %v2_100121f8, %arg2
  store i32 %v3_100121f8, i32* %esi.global-to-local, align 4
  %v3_100121fc = add i32 %v2_100121f8, %v4_1001206b
  store i32 %v3_100121fc, i32* @edi, align 4
  %v2_10012200 = and i32 %v3_100121fc, 3
  %v3_10012200 = icmp eq i32 %v2_10012200, 0
  %v1_10012206 = icmp eq i1 %v3_10012200, false
  br i1 %v1_10012206, label %dec_label_pc_1001222c, label %dec_label_pc_10012208

dec_label_pc_10012208:                            ; preds = %dec_label_pc_100121f8
  %v4_100121fc = inttoptr i32 %v3_100121fc to i8*
  %v4_100121f8 = inttoptr i32 %v3_100121f8 to i8*
  %v2_10012208 = udiv i32 %arg3, 4
  store i32 %v2_10012208, i32* %ecx.global-to-local, align 4
  %v1_1001220b = and i32 %arg3, 3
  store i32 %v1_1001220b, i32* @edx, align 4
  %v7_10012214 = call i8* @_memcpy(i8* %v4_100121fc, i8* %v4_100121f8, i32 %v2_10012208)
  %v8_10012214 = ptrtoint i8* %v7_10012214 to i32
  store i32 %v8_10012214, i32* @ecx, align 4
  %trunc3 = trunc i32 %arg3 to i2
  switch i2 %trunc3, label %dec_label_pc_100122205 [
    i2 0, label %dec_label_pc_10012350
    i2 1, label %dec_label_pc_10012358
    i2 -2, label %dec_label_pc_10012368
    i2 -1, label %dec_label_pc_1001237c
  ]

dec_label_pc_100122205:                           ; preds = %dec_label_pc_10012208
  unreachable

dec_label_pc_1001222c:                            ; preds = %dec_label_pc_100121f8
  store i32 3, i32* @edx, align 4
  store i32 %v2_10012200, i32* %eax.global-to-local, align 4
  %v2_1001223b = sub i32 %arg3, %v2_10012200
  store i32 %v2_1001223b, i32* @ecx, align 4
  %v1_1001223d = mul nuw nsw i32 %v2_10012200, 4
  %v2_1001223d = add i32 %v1_1001223d, ptrtoint (i32* @global_var_10012248.223 to i32)
  %v3_1001223d = inttoptr i32 %v2_1001223d to i32*
  %v4_1001223d = load i32, i32* %v3_1001223d, align 4
  call void @__pseudo_branch(i32 %v4_1001223d)
  %v0_10012244.pr = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10012244

dec_label_pc_10012244:                            ; preds = %dec_label_pc_10012244, %dec_label_pc_1001222c
  switch i32 %v0_10012244.pr, label %dec_label_pc_10012244 [
    i32 0, label %dec_label_pc_10012350
    i32 1, label %dec_label_pc_10012358
    i32 2, label %dec_label_pc_10012368
    i32 3, label %dec_label_pc_1001237c
  ]

dec_label_pc_10012350:                            ; preds = %dec_label_pc_10012244, %dec_label_pc_10012208
  store i32 %v4_1001206b, i32* %eax.global-to-local, align 4
  %v2_10012353 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10012353, i32* %esi.global-to-local, align 4
  store i32 %v0_10012063, i32* @edi, align 4
  ret i32 %v4_1001206b

dec_label_pc_10012358:                            ; preds = %dec_label_pc_10012244, %dec_label_pc_10012208
  %v2_10012358 = add i32 %v3_100121f8, 3
  %v3_10012358 = inttoptr i32 %v2_10012358 to i8*
  %v4_10012358 = load i8, i8* %v3_10012358, align 1
  %v4_1001235b = add i32 %v3_100121fc, 3
  %v5_1001235b = inttoptr i32 %v4_1001235b to i8*
  store i8 %v4_10012358, i8* %v5_1001235b, align 1
  store i32 %v4_1001206b, i32* %eax.global-to-local, align 4
  %v2_10012361 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10012361, i32* %esi.global-to-local, align 4
  store i32 %v0_10012063, i32* @edi, align 4
  ret i32 %v4_1001206b

dec_label_pc_10012368:                            ; preds = %dec_label_pc_10012244, %dec_label_pc_10012208
  %v2_10012368 = add i32 %v3_100121f8, 3
  %v3_10012368 = inttoptr i32 %v2_10012368 to i8*
  %v4_10012368 = load i8, i8* %v3_10012368, align 1
  %v5_10012368 = zext i8 %v4_10012368 to i32
  %v6_10012368 = load i32, i32* %eax.global-to-local, align 4
  %v7_10012368 = and i32 %v6_10012368, -256
  %v8_10012368 = or i32 %v7_10012368, %v5_10012368
  store i32 %v8_10012368, i32* %eax.global-to-local, align 4
  %v4_1001236b = add i32 %v3_100121fc, 3
  %v5_1001236b = inttoptr i32 %v4_1001236b to i8*
  store i8 %v4_10012368, i8* %v5_1001236b, align 1
  %v2_1001236e = add i32 %v3_100121f8, 2
  %v3_1001236e = inttoptr i32 %v2_1001236e to i8*
  %v4_1001236e = load i8, i8* %v3_1001236e, align 1
  %v4_10012371 = add i32 %v3_100121fc, 2
  %v5_10012371 = inttoptr i32 %v4_10012371 to i8*
  store i8 %v4_1001236e, i8* %v5_10012371, align 1
  store i32 %v4_1001206b, i32* %eax.global-to-local, align 4
  %v2_10012377 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10012377, i32* %esi.global-to-local, align 4
  store i32 %v0_10012063, i32* @edi, align 4
  ret i32 %v4_1001206b

dec_label_pc_1001237c:                            ; preds = %dec_label_pc_10012244, %dec_label_pc_10012208
  %v2_1001237c = add i32 %v3_100121f8, 3
  %v3_1001237c = inttoptr i32 %v2_1001237c to i8*
  %v4_1001237c = load i8, i8* %v3_1001237c, align 1
  %v5_1001237c = zext i8 %v4_1001237c to i32
  %v6_1001237c = load i32, i32* %eax.global-to-local, align 4
  %v7_1001237c = and i32 %v6_1001237c, -256
  %v8_1001237c = or i32 %v7_1001237c, %v5_1001237c
  store i32 %v8_1001237c, i32* %eax.global-to-local, align 4
  %v4_1001237f = add i32 %v3_100121fc, 3
  %v5_1001237f = inttoptr i32 %v4_1001237f to i8*
  store i8 %v4_1001237c, i8* %v5_1001237f, align 1
  %v2_10012382 = add i32 %v3_100121f8, 2
  %v3_10012382 = inttoptr i32 %v2_10012382 to i8*
  %v4_10012382 = load i8, i8* %v3_10012382, align 1
  %v5_10012382 = zext i8 %v4_10012382 to i32
  %v6_10012382 = load i32, i32* %eax.global-to-local, align 4
  %v7_10012382 = and i32 %v6_10012382, -256
  %v8_10012382 = or i32 %v7_10012382, %v5_10012382
  store i32 %v8_10012382, i32* %eax.global-to-local, align 4
  %v4_10012385 = add i32 %v3_100121fc, 2
  %v5_10012385 = inttoptr i32 %v4_10012385 to i8*
  store i8 %v4_10012382, i8* %v5_10012385, align 1
  %v2_10012388 = add i32 %v3_100121f8, 1
  %v3_10012388 = inttoptr i32 %v2_10012388 to i8*
  %v4_10012388 = load i8, i8* %v3_10012388, align 1
  %v4_1001238b = add i32 %v3_100121fc, 1
  %v5_1001238b = inttoptr i32 %v4_1001238b to i8*
  store i8 %v4_10012388, i8* %v5_1001238b, align 1
  store i32 %v4_1001206b, i32* %eax.global-to-local, align 4
  %v2_10012391 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10012391, i32* %esi.global-to-local, align 4
  store i32 %v0_10012063, i32* @edi, align 4
  ret i32 %v4_1001206b

; uselistorder directives
  uselistorder i32 %v2_10012208, { 1, 0 }
  uselistorder i32 %v2_10012200, { 0, 2, 1, 3 }
  uselistorder i32 %v3_100121fc, { 3, 4, 5, 1, 2, 0, 7, 6, 8 }
  uselistorder i32 %v3_100121f8, { 3, 4, 5, 1, 2, 0, 6, 7 }
  uselistorder i32 %v0_10012194, { 1, 0 }
  uselistorder i32 %v2_1001218c, { 1, 0 }
  uselistorder i32 %v2_10012184, { 1, 0 }
  uselistorder i32 %v2_1001217c, { 1, 0 }
  uselistorder i32 %v2_10012174, { 1, 0 }
  uselistorder i32 %v2_1001216c, { 1, 0 }
  uselistorder i32 %v2_10012164, { 1, 0 }
  uselistorder i32 %v2_10012160, { 0, 1, 2, 3, 4, 5, 7, 8, 6 }
  uselistorder i32 %v2_10012088, { 1, 0 }
  uselistorder i32 %v1_10012080, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1001206b, { 4, 5, 6, 7, 8, 9, 10, 11, 1, 12, 13, 14, 15, 16, 17, 18, 19, 2, 3, 0, 20 }
  uselistorder i32 %v0_10012063, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %esi.global-to-local, { 0, 1, 2, 3, 9, 4, 10, 11, 20, 5, 12, 21, 6, 22, 7, 8, 13, 14, 15, 16, 17, 18, 19, 23, 24 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 4, 6, 1, 7, 5, 3, 8, 9, 10, 11 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 25, 4, 5, 26, 6, 7, 23, 8, 9, 10, 11, 27, 12, 13, 28, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 29 }
  uselistorder i32 -8, { 25, 26, 24, 29, 1, 27, 28, 7, 2, 3, 4, 5, 6, 8, 11, 10, 9, 12, 15, 14, 13, 16, 22, 17, 18, 19, 20, 21, 23, 0 }
  uselistorder i32 -12, { 4, 5, 0, 6, 7, 1, 2, 3 }
  uselistorder i32 -16, { 8, 9, 7, 1, 2, 12, 3, 4, 5, 10, 11, 0, 13, 6 }
  uselistorder i32 -20, { 2, 3, 1, 7, 4, 5, 6, 0 }
  uselistorder i32 %arg3, { 6, 8, 7, 0, 9, 3, 5, 4, 1, 2, 10 }
  uselistorder i32 %arg2, { 1, 3, 0, 2, 4 }
  uselistorder label %dec_label_pc_1001218c, { 1, 0 }
  uselistorder label %dec_label_pc_10012184, { 1, 0 }
  uselistorder label %dec_label_pc_1001217c, { 1, 0 }
  uselistorder label %dec_label_pc_10012174, { 1, 0 }
  uselistorder label %dec_label_pc_1001216c, { 1, 0 }
  uselistorder label %dec_label_pc_10012164, { 1, 0 }
  uselistorder label %dec_label_pc_100120bc, { 1, 0 }
  uselistorder label %dec_label_pc_100120bcthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_10012080, { 1, 0 }
}

define i32 @function_10012395() local_unnamed_addr {
dec_label_pc_10012395:
  %v1_10012397 = call i32 @__amsg_exit(i32 2)
  ret i32 %v1_10012397

; uselistorder directives
  uselistorder i32 (i32)* @__amsg_exit, { 6, 4, 3, 2, 1, 5, 0 }
}

define i32 @function_1001239e(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_1001239e:
  call void @llvm.trap()
  unreachable
}

define i32 @function_100124e7() local_unnamed_addr {
dec_label_pc_100124e7:
  %v0_100124e7 = call i32 @function_10010f04()
  %v1_100124ec = add i32 %v0_100124e7, 8
  ret i32 %v1_100124ec
}

define i32 @function_100124f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100124f0:
  ret i32 0
}

define i32 @function_100124f3(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100124f3:
  %v4_10012501 = inttoptr i32 %arg1 to i8*
  %v5_10012501 = call i32 @function_1001250a(i8* %v4_10012501, i32 %arg2, i32 %arg3, i32 0)
  ret i32 %v5_10012501
}

define i32 @function_1001250a(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1001250a:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_10012510 = load i32, i32* @ebx, align 4
  %v0_10012515 = load i32, i32* @esi, align 4
  %v0_10012516 = load i32, i32* @edi, align 4
  store i32 %v0_10012516, i32* %stack_var_-28, align 4
  %v4_10012517 = ptrtoint i8* %arg1 to i32
  store i32 %v4_10012517, i32* %edi.global-to-local, align 4
  %v2_1001251a = load i8, i8* %arg1, align 1
  %v3_1001251a = zext i8 %v2_1001251a to i32
  %v5_1001251a = and i32 %v0_10012510, -256
  %v6_1001251a = or i32 %v3_1001251a, %v5_1001251a
  br label %dec_label_pc_10012522

dec_label_pc_10012522:                            ; preds = %dec_label_pc_1001254d, %dec_label_pc_1001250a
  %storemerge = phi i32 [ %v6_1001251a, %dec_label_pc_1001250a ], [ %v6_1001254d, %dec_label_pc_1001254d ]
  %v0_1001252b = phi i32 [ %v6_1001251a, %dec_label_pc_1001250a ], [ %v6_1001254d, %dec_label_pc_1001254d ]
  %storemerge6.in = phi i32 [ %v4_10012517, %dec_label_pc_1001250a ], [ %v0_1001254d, %dec_label_pc_1001254d ]
  store i32 %storemerge, i32* @ebx, align 4
  %storemerge6 = add i32 %storemerge6.in, 1
  store i32 %storemerge6, i32* @esi, align 4
  %v0_10012522 = load i32, i32* @global_var_100185e0.98, align 32
  %v7_10012529 = icmp sgt i32 %v0_10012522, 1
  br i1 %v7_10012529, label %dec_label_pc_1001252b, label %dec_label_pc_1001253a

dec_label_pc_1001252b:                            ; preds = %dec_label_pc_10012522
  %v2_10012531 = trunc i32 %v0_1001252b to i8
  %v3_10012531 = call i32 @function_1000e8d2(i8 %v2_10012531, i32 8)
  store i32 8, i32* @ecx, align 4
  br label %dec_label_pc_10012549

dec_label_pc_1001253a:                            ; preds = %dec_label_pc_10012522
  %v0_1001253a = load i32, i32* @global_var_100183d4, align 4
  store i32 %v0_1001253a, i32* @ecx, align 4
  %v1_10012540 = and i32 %v0_1001252b, 255
  %v2_10012543 = mul nuw nsw i32 %v1_10012540, 2
  %v3_10012543 = add i32 %v0_1001253a, %v2_10012543
  %v4_10012543 = inttoptr i32 %v3_10012543 to i8*
  %v5_10012543 = load i8, i8* %v4_10012543, align 1
  %v6_10012543 = zext i8 %v5_10012543 to i32
  %v1_10012546 = and i32 %v6_10012543, 8
  br label %dec_label_pc_10012549

dec_label_pc_10012549:                            ; preds = %dec_label_pc_1001252b, %dec_label_pc_1001253a
  %v0_10012549 = phi i32 [ %v3_10012531, %dec_label_pc_1001252b ], [ %v1_10012546, %dec_label_pc_1001253a ]
  %v1_10012549 = icmp eq i32 %v0_10012549, 0
  br i1 %v1_10012549, label %dec_label_pc_10012552, label %dec_label_pc_1001254d

dec_label_pc_1001254d:                            ; preds = %dec_label_pc_10012549
  %v0_1001254d = load i32, i32* @esi, align 4
  %v1_1001254d = inttoptr i32 %v0_1001254d to i8*
  %v2_1001254d = load i8, i8* %v1_1001254d, align 1
  %v3_1001254d = zext i8 %v2_1001254d to i32
  %v4_1001254d = load i32, i32* @ebx, align 4
  %v5_1001254d = and i32 %v4_1001254d, -256
  %v6_1001254d = or i32 %v5_1001254d, %v3_1001254d
  br label %dec_label_pc_10012522

dec_label_pc_10012552:                            ; preds = %dec_label_pc_10012549
  %tmp30 = trunc i32 %arg4 to i8
  %v0_10012552 = load i32, i32* @ebx, align 4
  %v1_10012552 = trunc i32 %v0_10012552 to i8
  %v10_10012552 = icmp eq i8 %v1_10012552, 45
  %v1_10012558 = icmp eq i1 %v10_10012552, false
  br i1 %v1_10012558, label %dec_label_pc_10012560, label %dec_label_pc_1001255a

dec_label_pc_1001255a:                            ; preds = %dec_label_pc_10012552
  %sext = mul i32 %arg4, 16777216
  %v4_1001255a = sdiv i32 %sext, 16777216
  %v5_1001255a = or i32 %v4_1001255a, 2
  %v7_1001255a = trunc i32 %v5_1001255a to i8
  %v0_10012565.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10012565

dec_label_pc_10012560:                            ; preds = %dec_label_pc_10012552
  %v0_10012555 = load i32, i32* @esi, align 4
  %v10_10012560 = icmp eq i8 %v1_10012552, 43
  %v1_10012563 = icmp eq i1 %v10_10012560, false
  br i1 %v1_10012563, label %dec_label_pc_1001256b, label %dec_label_pc_10012565

dec_label_pc_10012565:                            ; preds = %dec_label_pc_10012560, %dec_label_pc_1001255a
  %v0_10012567 = phi i32 [ %v0_10012555, %dec_label_pc_10012560 ], [ %v0_10012565.pre, %dec_label_pc_1001255a ]
  %stack_var_16.0 = phi i8 [ %tmp30, %dec_label_pc_10012560 ], [ %v7_1001255a, %dec_label_pc_1001255a ]
  %v1_10012565 = inttoptr i32 %v0_10012567 to i8*
  %v2_10012565 = load i8, i8* %v1_10012565, align 1
  %v3_10012565 = zext i8 %v2_10012565 to i32
  %v5_10012565 = and i32 %v0_10012552, -256
  %v6_10012565 = or i32 %v3_10012565, %v5_10012565
  store i32 %v6_10012565, i32* @ebx, align 4
  %v1_10012567 = add i32 %v0_10012567, 1
  br label %dec_label_pc_1001256b

dec_label_pc_1001256b:                            ; preds = %dec_label_pc_10012560, %dec_label_pc_10012565
  %v5_100125c7 = phi i32 [ %v0_10012552, %dec_label_pc_10012560 ], [ %v6_10012565, %dec_label_pc_10012565 ]
  %stack_var_16.1 = phi i8 [ %tmp30, %dec_label_pc_10012560 ], [ %stack_var_16.0, %dec_label_pc_10012565 ]
  %v0_100125ca = phi i32 [ %v0_10012555, %dec_label_pc_10012560 ], [ %v1_10012567, %dec_label_pc_10012565 ]
  %stack_var_-8.0 = inttoptr i32 %v0_100125ca to i8*
  %v1_1001256e = icmp eq i32 %arg3, 0
  %v2_1001256e = icmp slt i32 %arg3, 0
  %v2_10012570 = icmp eq i1 %v2_1001256e, false
  br i1 %v2_10012570, label %dec_label_pc_10012576, label %dec_label_pc_100126ff

dec_label_pc_10012576:                            ; preds = %dec_label_pc_1001256b
  %v9_10012576 = icmp eq i32 %arg3, 1
  br i1 %v9_10012576, label %dec_label_pc_100126ff, label %dec_label_pc_1001257f

dec_label_pc_1001257f:                            ; preds = %dec_label_pc_10012576
  %v1_1001257f = add i32 %arg3, -36
  %v6_1001257f = sub i32 35, %arg3
  %v7_1001257f = and i32 %v6_1001257f, %arg3
  %v8_1001257f = icmp slt i32 %v7_1001257f, 0
  %v9_1001257f = icmp eq i32 %v1_1001257f, 0
  %v10_1001257f = icmp slt i32 %v1_1001257f, 0
  %v3_10012582 = icmp eq i1 %v10_1001257f, %v8_1001257f
  %v4_10012582 = icmp eq i1 %v9_1001257f, false
  %v5_10012582 = and i1 %v4_10012582, %v3_10012582
  br i1 %v5_10012582, label %dec_label_pc_100126ff, label %dec_label_pc_10012588

dec_label_pc_10012588:                            ; preds = %dec_label_pc_1001257f
  store i32 16, i32* @ecx, align 4
  %v1_1001258d = icmp eq i1 %v1_1001256e, false
  br i1 %v1_1001258d, label %dec_label_pc_100125b3, label %dec_label_pc_1001258f

dec_label_pc_1001258f:                            ; preds = %dec_label_pc_10012588
  %v1_1001258f = trunc i32 %v5_100125c7 to i8
  %v7_1001258f = icmp eq i8 %v1_1001258f, 48
  br i1 %v7_1001258f, label %dec_label_pc_1001259d, label %dec_label_pc_100125cf

dec_label_pc_1001259d:                            ; preds = %dec_label_pc_1001258f
  %v2_1001259d = load i8, i8* %stack_var_-8.0, align 1
  %v10_1001259f = icmp eq i8 %v2_1001259d, 120
  br i1 %v10_1001259f, label %dec_label_pc_100125b3, label %dec_label_pc_100125a3

dec_label_pc_100125a3:                            ; preds = %dec_label_pc_1001259d
  %v10_100125a3 = icmp eq i8 %v2_1001259d, 88
  br i1 %v10_100125a3, label %dec_label_pc_100125b3, label %dec_label_pc_100125cf

dec_label_pc_100125b3:                            ; preds = %dec_label_pc_1001259d, %dec_label_pc_100125a3, %dec_label_pc_10012588
  %stack_var_12.0.in = phi i32 [ %arg3, %dec_label_pc_10012588 ], [ 16, %dec_label_pc_100125a3 ], [ 16, %dec_label_pc_1001259d ]
  %stack_var_12.0 = sext i32 %stack_var_12.0.in to i64
  %v16_100125b3 = icmp eq i32 %stack_var_12.0.in, 16
  %v1_100125b6 = icmp eq i1 %v16_100125b3, false
  br i1 %v1_100125b6, label %dec_label_pc_100125cf, label %dec_label_pc_100125b8

dec_label_pc_100125b8:                            ; preds = %dec_label_pc_100125b3
  %v1_100125b8 = trunc i32 %v5_100125c7 to i8
  %v7_100125b8 = icmp eq i8 %v1_100125b8, 48
  %v1_100125bb = icmp eq i1 %v7_100125b8, false
  br i1 %v1_100125bb, label %dec_label_pc_100125cf, label %dec_label_pc_100125bd

dec_label_pc_100125bd:                            ; preds = %dec_label_pc_100125b8
  %v2_100125bd = load i8, i8* %stack_var_-8.0, align 1
  %v10_100125bf = icmp eq i8 %v2_100125bd, 120
  br i1 %v10_100125bf, label %dec_label_pc_100125c7, label %dec_label_pc_100125c3

dec_label_pc_100125c3:                            ; preds = %dec_label_pc_100125bd
  %v10_100125c3 = icmp eq i8 %v2_100125bd, 88
  %v1_100125c5 = icmp eq i1 %v10_100125c3, false
  br i1 %v1_100125c5, label %dec_label_pc_100125cf, label %dec_label_pc_100125c7

dec_label_pc_100125c7:                            ; preds = %dec_label_pc_100125c3, %dec_label_pc_100125bd
  %v1_100125c7 = add i32 %v0_100125ca, 1
  %v2_100125c7 = inttoptr i32 %v1_100125c7 to i8*
  %v3_100125c7 = load i8, i8* %v2_100125c7, align 1
  %v4_100125c7 = zext i8 %v3_100125c7 to i32
  %v6_100125c7 = and i32 %v5_100125c7, -256
  %v7_100125c7 = or i32 %v4_100125c7, %v6_100125c7
  store i32 %v7_100125c7, i32* @ebx, align 4
  %v1_100125cb = add i32 %v0_100125ca, 2
  %v5_100125cc = inttoptr i32 %v1_100125cb to i8*
  br label %dec_label_pc_100125cf

dec_label_pc_100125cf:                            ; preds = %dec_label_pc_100125a3, %dec_label_pc_1001258f, %dec_label_pc_100125c3, %dec_label_pc_100125b8, %dec_label_pc_100125b3, %dec_label_pc_100125c7
  %v0_100125e614 = phi i32 [ %v5_100125c7, %dec_label_pc_100125b3 ], [ %v5_100125c7, %dec_label_pc_100125b8 ], [ %v7_100125c7, %dec_label_pc_100125c7 ], [ %v5_100125c7, %dec_label_pc_100125c3 ], [ %v5_100125c7, %dec_label_pc_1001258f ], [ %v5_100125c7, %dec_label_pc_100125a3 ]
  %stack_var_12.1 = phi i64 [ %stack_var_12.0, %dec_label_pc_100125b3 ], [ %stack_var_12.0, %dec_label_pc_100125b8 ], [ %stack_var_12.0, %dec_label_pc_100125c7 ], [ %stack_var_12.0, %dec_label_pc_100125c3 ], [ 10, %dec_label_pc_1001258f ], [ 8, %dec_label_pc_100125a3 ]
  %stack_var_-8.1 = phi i8* [ %stack_var_-8.0, %dec_label_pc_100125b3 ], [ %stack_var_-8.0, %dec_label_pc_100125b8 ], [ %v5_100125cc, %dec_label_pc_100125c7 ], [ %stack_var_-8.0, %dec_label_pc_100125c3 ], [ %stack_var_-8.0, %dec_label_pc_1001258f ], [ %stack_var_-8.0, %dec_label_pc_100125a3 ]
  %v12_100125d4 = udiv i64 4294967295, %stack_var_12.1
  %v13_100125d4 = trunc i64 %v12_100125d4 to i32
  %v14_100125d4 = urem i64 4294967295, %stack_var_12.1
  %v15_100125d4 = trunc i64 %v14_100125d4 to i32
  store i32 %v15_100125d4, i32* @edx, align 4
  store i32 259, i32* @edi, align 4
  %v5_10012640 = trunc i64 %stack_var_12.1 to i32
  br label %dec_label_pc_100125df

dec_label_pc_100125df:                            ; preds = %dec_label_pc_1001266e, %dec_label_pc_100125cf
  %v0_100125e6 = phi i32 [ %v0_100125e614, %dec_label_pc_100125cf ], [ %v6_10012674, %dec_label_pc_1001266e ]
  %stack_var_16.2 = phi i8 [ %stack_var_16.1, %dec_label_pc_100125cf ], [ %stack_var_16.3.in, %dec_label_pc_1001266e ]
  %stack_var_-8.2 = phi i8* [ %stack_var_-8.1, %dec_label_pc_100125cf ], [ %v22_10012671, %dec_label_pc_1001266e ]
  %v0_10012665 = phi i32 [ 0, %dec_label_pc_100125cf ], [ %stack_var_-12.1, %dec_label_pc_1001266e ]
  %v0_100125df = load i32, i32* @global_var_100185e0.98, align 32
  %v1_100125e6 = and i32 %v0_100125e6, 255
  store i32 %v1_100125e6, i32* @esi, align 4
  %v7_100125e9 = icmp sgt i32 %v0_100125df, 1
  br i1 %v7_100125e9, label %dec_label_pc_100125eb, label %dec_label_pc_100125f7

dec_label_pc_100125eb:                            ; preds = %dec_label_pc_100125df
  %v2_100125ee = trunc i32 %v0_100125e6 to i8
  %v3_100125ee = call i32 @function_1000e8d2(i8 %v2_100125ee, i32 4)
  store i32 4, i32* @ecx, align 4
  br label %dec_label_pc_10012602

dec_label_pc_100125f7:                            ; preds = %dec_label_pc_100125df
  %v0_100125f7 = load i32, i32* @global_var_100183d4, align 4
  %v2_100125fc = mul nuw nsw i32 %v1_100125e6, 2
  %v3_100125fc = add i32 %v0_100125f7, %v2_100125fc
  %v4_100125fc = inttoptr i32 %v3_100125fc to i8*
  %v5_100125fc = load i8, i8* %v4_100125fc, align 1
  %v6_100125fc = zext i8 %v5_100125fc to i32
  %v1_100125ff = and i32 %v6_100125fc, 4
  br label %dec_label_pc_10012602

dec_label_pc_10012602:                            ; preds = %dec_label_pc_100125eb, %dec_label_pc_100125f7
  %v0_10012602 = phi i32 [ %v3_100125ee, %dec_label_pc_100125eb ], [ %v1_100125ff, %dec_label_pc_100125f7 ]
  %v1_10012602 = icmp eq i32 %v0_10012602, 0
  br i1 %v1_10012602, label %dec_label_pc_1001260e, label %dec_label_pc_10012606

dec_label_pc_10012606:                            ; preds = %dec_label_pc_10012602
  %v0_10012606 = load i32, i32* @ebx, align 4
  %v1_10012606 = mul i32 %v0_10012606, 16777216
  %v2_10012606 = sdiv i32 %v1_10012606, 16777216
  %v1_10012609 = add nsw i32 %v2_10012606, -48
  br label %dec_label_pc_10012640

dec_label_pc_1001260e:                            ; preds = %dec_label_pc_10012602
  %v0_1001260e = load i32, i32* @global_var_100185e0.98, align 32
  %v7_10012615 = icmp sgt i32 %v0_1001260e, 1
  br i1 %v7_10012615, label %dec_label_pc_10012617, label %dec_label_pc_10012622

dec_label_pc_10012617:                            ; preds = %dec_label_pc_1001260e
  %v0_10012617 = load i32, i32* @edi, align 4
  %v0_10012618 = load i32, i32* @esi, align 4
  %v2_10012619 = trunc i32 %v0_10012618 to i8
  %v3_10012619 = call i32 @function_1000e8d2(i8 %v2_10012619, i32 %v0_10012617)
  store i32 %v0_10012617, i32* @ecx, align 4
  br label %dec_label_pc_1001262d

dec_label_pc_10012622:                            ; preds = %dec_label_pc_1001260e
  %v0_10012622 = load i32, i32* @global_var_100183d4, align 4
  %v1_10012627 = load i32, i32* @esi, align 4
  %v2_10012627 = mul i32 %v1_10012627, 2
  %v3_10012627 = add i32 %v2_10012627, %v0_10012622
  %v4_10012627 = inttoptr i32 %v3_10012627 to i16*
  %v5_10012627 = load i16, i16* %v4_10012627, align 2
  %v6_10012627 = zext i16 %v5_10012627 to i32
  %v8_10012627 = and i32 %v0_10012622, -65536
  %v9_10012627 = or i32 %v6_10012627, %v8_10012627
  %v1_1001262b = load i32, i32* @edi, align 4
  %v2_1001262b = and i32 %v9_10012627, %v1_1001262b
  br label %dec_label_pc_1001262d

dec_label_pc_1001262d:                            ; preds = %dec_label_pc_10012617, %dec_label_pc_10012622
  %v0_1001262d = phi i32 [ %v3_10012619, %dec_label_pc_10012617 ], [ %v2_1001262b, %dec_label_pc_10012622 ]
  %v1_1001262d = icmp eq i32 %v0_1001262d, 0
  br i1 %v1_1001262d, label %dec_label_pc_1001267b, label %dec_label_pc_10012631

dec_label_pc_10012631:                            ; preds = %dec_label_pc_1001262d
  %v0_10012631 = load i32, i32* @ebx, align 4
  %v1_10012631 = mul i32 %v0_10012631, 16777216
  %v2_10012631 = sdiv i32 %v1_10012631, 16777216
  %v1_10012635 = call i32 @function_1001489d(i32 %v2_10012631)
  %v1_1001263d = add i32 %v1_10012635, -55
  br label %dec_label_pc_10012640

dec_label_pc_10012640:                            ; preds = %dec_label_pc_10012606, %dec_label_pc_10012631
  %storemerge.in = phi i32 [ %v1_1001263d, %dec_label_pc_10012631 ], [ %v1_10012609, %dec_label_pc_10012606 ]
  store i32 %storemerge.in, i32* @ecx, align 4
  %v11_10012640 = icmp ult i32 %storemerge.in, %v5_10012640
  %v1_10012643 = icmp eq i1 %v11_10012640, false
  br i1 %v1_10012643, label %dec_label_pc_1001267b, label %dec_label_pc_10012645

dec_label_pc_10012645:                            ; preds = %dec_label_pc_10012640
  %v5_10012648 = or i8 %stack_var_16.2, 8
  %v10_1001264c = icmp ult i32 %v0_10012665, %v13_100125d4
  br i1 %v10_1001264c, label %dec_label_pc_10012665, label %dec_label_pc_10012651

dec_label_pc_10012651:                            ; preds = %dec_label_pc_10012645
  %v15_1001264c = icmp eq i32 %v0_10012665, %v13_100125d4
  %v1_10012651 = icmp eq i1 %v15_1001264c, false
  br i1 %v1_10012651, label %dec_label_pc_1001265f, label %dec_label_pc_10012653

dec_label_pc_10012653:                            ; preds = %dec_label_pc_10012651
  store i32 %v15_100125d4, i32* @edx, align 4
  %tmp = icmp ugt i32 %storemerge.in, %v15_100125d4
  br i1 %tmp, label %dec_label_pc_1001265f, label %dec_label_pc_10012665

dec_label_pc_1001265f:                            ; preds = %dec_label_pc_10012653, %dec_label_pc_10012651
  %v5_1001265f = or i8 %stack_var_16.2, 12
  br label %dec_label_pc_1001266e

dec_label_pc_10012665:                            ; preds = %dec_label_pc_10012653, %dec_label_pc_10012645
  %v6_10012665 = sext i32 %v0_10012665 to i64
  %v8_10012665 = mul nsw i64 %v6_10012665, %stack_var_12.1
  %v9_10012665 = trunc i64 %v8_10012665 to i32
  %v2_10012669 = add i32 %storemerge.in, %v9_10012665
  br label %dec_label_pc_1001266e

dec_label_pc_1001266e:                            ; preds = %dec_label_pc_1001265f, %dec_label_pc_10012665
  %stack_var_16.3.in = phi i8 [ %v5_10012648, %dec_label_pc_10012665 ], [ %v5_1001265f, %dec_label_pc_1001265f ]
  %stack_var_-12.1 = phi i32 [ %v2_10012669, %dec_label_pc_10012665 ], [ %v0_10012665, %dec_label_pc_1001265f ]
  %v4_1001266e = ptrtoint i8* %stack_var_-8.2 to i32
  %v5_10012671 = add i32 %v4_1001266e, 1
  %v22_10012671 = inttoptr i32 %v5_10012671 to i8*
  %v2_10012674 = load i8, i8* %stack_var_-8.2, align 1
  %v3_10012674 = zext i8 %v2_10012674 to i32
  %v4_10012674 = load i32, i32* @ebx, align 4
  %v5_10012674 = and i32 %v4_10012674, -256
  %v6_10012674 = or i32 %v5_10012674, %v3_10012674
  store i32 %v6_10012674, i32* @ebx, align 4
  br label %dec_label_pc_100125df

dec_label_pc_1001267b:                            ; preds = %dec_label_pc_10012640, %dec_label_pc_1001262d
  %v4_1001267b = sext i8 %stack_var_16.2 to i32
  %v4_1001267e = ptrtoint i8* %stack_var_-8.2 to i32
  %v5_1001267e = add i32 %v4_1001267e, -1
  %v22_1001267e = inttoptr i32 %v5_1001267e to i8*
  %v2_10012684 = and i32 %v4_1001267b, 8
  %v3_10012684 = icmp eq i32 %v2_10012684, 0
  %v1_10012686 = icmp eq i1 %v3_10012684, false
  br i1 %v1_10012686, label %dec_label_pc_10012698, label %dec_label_pc_10012688

dec_label_pc_10012688:                            ; preds = %dec_label_pc_1001267b
  %v1_10012688 = icmp eq i32 %arg2, 0
  br i1 %v1_10012688, label %dec_label_pc_10012692, label %dec_label_pc_1001268c

dec_label_pc_1001268c:                            ; preds = %dec_label_pc_10012688
  br label %dec_label_pc_10012692

dec_label_pc_10012692:                            ; preds = %dec_label_pc_10012688, %dec_label_pc_1001268c
  %stack_var_-8.3 = phi i8* [ %v22_1001267e, %dec_label_pc_10012688 ], [ %arg1, %dec_label_pc_1001268c ]
  br label %dec_label_pc_100126e3

dec_label_pc_10012698:                            ; preds = %dec_label_pc_1001267b
  %v2_10012698 = and i32 %v4_1001267b, 4
  %v3_10012698 = icmp eq i32 %v2_10012698, 0
  store i32 2147483647, i32* @esi, align 4
  %v1_1001269f = icmp eq i1 %v3_10012698, false
  br i1 %v1_1001269f, label %dec_label_pc_100126bc, label %dec_label_pc_100126a1

dec_label_pc_100126a1:                            ; preds = %dec_label_pc_10012698
  %v2_100126a1 = and i32 %v4_1001267b, 1
  %v3_100126a1 = icmp eq i32 %v2_100126a1, 0
  %v1_100126a3 = icmp eq i1 %v3_100126a1, false
  br i1 %v1_100126a3, label %dec_label_pc_100126e3, label %dec_label_pc_100126a5

dec_label_pc_100126a5:                            ; preds = %dec_label_pc_100126a1
  %v1_100126a5 = and i32 %v4_1001267b, 2
  %v2_100126a5 = icmp eq i32 %v1_100126a5, 0
  br i1 %v2_100126a5, label %dec_label_pc_100126b7, label %dec_label_pc_100126aa

dec_label_pc_100126aa:                            ; preds = %dec_label_pc_100126a5
  %v5_100126aa = icmp sgt i32 %v0_10012665, -1
  %v8_100126aa = icmp eq i32 %v0_10012665, -2147483648
  %v2_100126b1 = or i1 %v5_100126aa, %v8_100126aa
  br i1 %v2_100126b1, label %dec_label_pc_100126b3.thread, label %dec_label_pc_100126bc

dec_label_pc_100126b3.thread:                     ; preds = %dec_label_pc_100126aa
  br label %dec_label_pc_100126e3

dec_label_pc_100126b7:                            ; preds = %dec_label_pc_100126a5
  %tmp33 = icmp sgt i32 %v0_10012665, -1
  br i1 %tmp33, label %dec_label_pc_100126e3, label %dec_label_pc_100126bc

dec_label_pc_100126bc:                            ; preds = %dec_label_pc_100126aa, %dec_label_pc_100126b7, %dec_label_pc_10012698
  %v0_100126bc = call i32 @function_100124e7()
  %v6_100126c1 = and i8 %stack_var_16.2, 1
  %v7_100126c1 = icmp eq i8 %v6_100126c1, 0
  %v1_100126c5 = inttoptr i32 %v0_100126bc to i32*
  store i32 34, i32* %v1_100126c5, align 4
  br i1 %v7_100126c1, label %dec_label_pc_100126d3, label %dec_label_pc_100126cd

dec_label_pc_100126cd:                            ; preds = %dec_label_pc_100126bc
  br label %dec_label_pc_100126e3

dec_label_pc_100126d3:                            ; preds = %dec_label_pc_100126bc
  %v2_100126d6 = and i8 %stack_var_16.2, 2
  %v6_100126d8 = icmp ne i8 %v2_100126d6, 0
  %v1_100126dc = sext i1 %v6_100126d8 to i32
  %v1_100126de = load i32, i32* @esi, align 4
  %v2_100126de = add i32 %v1_100126de, %v1_100126dc
  br label %dec_label_pc_100126e3

dec_label_pc_100126e3:                            ; preds = %dec_label_pc_100126b3.thread, %dec_label_pc_100126b7, %dec_label_pc_100126a1, %dec_label_pc_100126cd, %dec_label_pc_10012692, %dec_label_pc_100126d3
  %stack_var_-8.4 = phi i8* [ %v22_1001267e, %dec_label_pc_100126d3 ], [ %v22_1001267e, %dec_label_pc_100126cd ], [ %v22_1001267e, %dec_label_pc_100126a1 ], [ %v22_1001267e, %dec_label_pc_100126b7 ], [ %stack_var_-8.3, %dec_label_pc_10012692 ], [ %v22_1001267e, %dec_label_pc_100126b3.thread ]
  %stack_var_-12.2 = phi i32 [ %v2_100126de, %dec_label_pc_100126d3 ], [ -1, %dec_label_pc_100126cd ], [ %v0_10012665, %dec_label_pc_100126a1 ], [ %v0_10012665, %dec_label_pc_100126b7 ], [ 0, %dec_label_pc_10012692 ], [ %v0_10012665, %dec_label_pc_100126b3.thread ]
  %v1_100126e3 = icmp eq i32 %arg2, 0
  br i1 %v1_100126e3, label %dec_label_pc_100126ec, label %dec_label_pc_100126e7

dec_label_pc_100126e7:                            ; preds = %dec_label_pc_100126e3
  %v4_100126e7 = ptrtoint i8* %stack_var_-8.4 to i32
  %v2_100126ea = inttoptr i32 %arg2 to i32*
  store i32 %v4_100126e7, i32* %v2_100126ea, align 4
  br label %dec_label_pc_100126ec

dec_label_pc_100126ec:                            ; preds = %dec_label_pc_100126e3, %dec_label_pc_100126e7
  %v6_100126ec = and i8 %stack_var_16.2, 2
  %v7_100126ec = icmp eq i8 %v6_100126ec, 0
  br i1 %v7_100126ec, label %dec_label_pc_1001270a, label %dec_label_pc_100126f2

dec_label_pc_100126f2:                            ; preds = %dec_label_pc_100126ec
  %v1_100126f5 = sub i32 0, %stack_var_-12.2
  br label %dec_label_pc_1001270a

dec_label_pc_100126ff:                            ; preds = %dec_label_pc_1001256b, %dec_label_pc_1001257f, %dec_label_pc_10012576
  %v1_10012702 = icmp eq i32 %arg2, 0
  br i1 %v1_10012702, label %dec_label_pc_10012708, label %dec_label_pc_10012706

dec_label_pc_10012706:                            ; preds = %dec_label_pc_100126ff
  %v0_10012706 = load i32, i32* %edi.global-to-local, align 4
  %v2_10012706 = inttoptr i32 %arg2 to i32*
  store i32 %v0_10012706, i32* %v2_10012706, align 4
  br label %dec_label_pc_10012708

dec_label_pc_10012708:                            ; preds = %dec_label_pc_100126ff, %dec_label_pc_10012706
  br label %dec_label_pc_1001270a

dec_label_pc_1001270a:                            ; preds = %dec_label_pc_100126f2, %dec_label_pc_100126ec, %dec_label_pc_10012708
  %storemerge4 = phi i32 [ 0, %dec_label_pc_10012708 ], [ %stack_var_-12.2, %dec_label_pc_100126ec ], [ %v1_100126f5, %dec_label_pc_100126f2 ]
  %v2_1001270a = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1001270a, i32* @edi, align 4
  store i32 %v0_10012515, i32* @esi, align 4
  ret i32 %storemerge4

; uselistorder directives
  uselistorder i32 %v6_10012674, { 1, 0 }
  uselistorder i32 %storemerge.in, { 1, 0, 3, 2 }
  uselistorder i32 %v0_10012622, { 1, 0 }
  uselistorder i32 %v0_10012665, { 3, 4, 5, 0, 2, 6, 9, 7, 1, 8 }
  uselistorder i8 %stack_var_16.2, { 2, 3, 4, 5, 0, 1 }
  uselistorder i64 %stack_var_12.0, { 3, 2, 1, 0 }
  uselistorder i32 %v1_1001257f, { 1, 0 }
  uselistorder i8* %stack_var_-8.0, { 2, 3, 6, 5, 4, 0, 1 }
  uselistorder i32 %v0_10012555, { 1, 0 }
  uselistorder i8 %tmp30, { 1, 0 }
  uselistorder i32 %v0_1001254d, { 1, 0 }
  uselistorder i32 %v0_1001252b, { 1, 0 }
  uselistorder i32 %v6_1001251a, { 1, 0 }
  uselistorder i8 2, { 2, 3, 1, 0 }
  uselistorder i32 34, { 11, 4, 5, 6, 7, 8, 0, 1, 2, 3, 10, 9 }
  uselistorder i8 12, { 0, 2, 1 }
  uselistorder i8 8, { 0, 10, 1, 2, 9, 6, 7, 8, 4, 5, 3 }
  uselistorder i64 4294967295, { 2, 3, 0, 1 }
  uselistorder i32 -36, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %arg2, { 4, 3, 0, 2, 1 }
  uselistorder i8* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1001270a, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10012708, { 1, 0 }
  uselistorder label %dec_label_pc_100126ff, { 1, 2, 0 }
  uselistorder label %dec_label_pc_100126ec, { 1, 0 }
  uselistorder label %dec_label_pc_100126e3, { 5, 3, 1, 0, 2, 4 }
  uselistorder label %dec_label_pc_100126bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10012692, { 1, 0 }
  uselistorder label %dec_label_pc_1001266e, { 1, 0 }
  uselistorder label %dec_label_pc_10012640, { 1, 0 }
  uselistorder label %dec_label_pc_1001262d, { 1, 0 }
  uselistorder label %dec_label_pc_10012602, { 1, 0 }
  uselistorder label %dec_label_pc_100125cf, { 5, 2, 3, 4, 0, 1 }
  uselistorder label %dec_label_pc_100125b3, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1001256b, { 1, 0 }
  uselistorder label %dec_label_pc_10012549, { 1, 0 }
}

define i32 @function_10012710(i32 %arg1) local_unnamed_addr {
dec_label_pc_10012710:
  %v0_10012710 = load i32, i32* @edx, align 4
  %v1_10012710 = add i32 %v0_10012710, -1
  ret i32 %v1_10012710
}

define i32 @function_10012720(i8 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10012720:
  %v4_10012722 = zext i8 %arg1 to i32
  ret i32 %v4_10012722
}

define i32 @function_10012726(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10012726:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10012726 = load i32, i32* @ebx, align 4
  store i32 %v0_10012726, i32* %stack_var_-4, align 4
  %v0_10012727 = load i32, i32* @eax, align 4
  store i32 %v0_10012727, i32* %ebx.global-to-local, align 4
  %v2_10012729 = mul i32 %v0_10012727, 256
  store i32 %v2_10012729, i32* %eax.global-to-local, align 4
  %v4_1001272c = ptrtoint i8* %arg1 to i32
  %v1_10012730 = and i32 %v4_1001272c, 3
  %v2_10012730 = icmp eq i32 %v1_10012730, 0
  br i1 %v2_10012730, label %dec_label_pc_1001274b, label %dec_label_pc_10012738.preheader

dec_label_pc_10012738.preheader:                  ; preds = %dec_label_pc_10012726
  %v4_10012738.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10012738

dec_label_pc_10012738:                            ; preds = %dec_label_pc_10012743, %dec_label_pc_10012738.preheader
  %v2_1001273b = phi i32 [ %v0_10012727, %dec_label_pc_10012738.preheader ], [ %v2_1001273b.pre, %dec_label_pc_10012743 ]
  %v4_10012738 = phi i32 [ %v4_10012738.pre, %dec_label_pc_10012738.preheader ], [ %v6_10012738, %dec_label_pc_10012743 ]
  %v0_1001273a = phi i32 [ %v4_1001272c, %dec_label_pc_10012738.preheader ], [ %v0_10012743, %dec_label_pc_10012743 ]
  %v1_10012738 = inttoptr i32 %v0_1001273a to i8*
  %v2_10012738 = load i8, i8* %v1_10012738, align 1
  %v1_1001273a = add i32 %v0_1001273a, 1
  store i32 %v1_1001273a, i32* @edx, align 4
  %v3_1001273b = trunc i32 %v2_1001273b to i8
  %v15_1001273b = icmp eq i8 %v2_10012738, %v3_1001273b
  call void @__pseudo_cond_branch(i1 %v15_1001273b, i32 268510992)
  %v4_1001273f = icmp eq i8 %v2_10012738, 0
  br i1 %v4_1001273f, label %dec_label_pc_10012794, label %dec_label_pc_10012743

dec_label_pc_10012743:                            ; preds = %dec_label_pc_10012738
  %v3_10012738 = zext i8 %v2_10012738 to i32
  %v5_10012738 = and i32 %v4_10012738, -256
  %v6_10012738 = or i32 %v3_10012738, %v5_10012738
  %v0_10012743 = load i32, i32* @edx, align 4
  %v1_10012743 = and i32 %v0_10012743, 3
  %v2_10012743 = icmp eq i32 %v1_10012743, 0
  %v1_10012749 = icmp eq i1 %v2_10012743, false
  %v2_1001273b.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v1_10012749, label %dec_label_pc_10012738, label %dec_label_pc_1001274b.loopexit

dec_label_pc_1001274b.loopexit:                   ; preds = %dec_label_pc_10012743
  %v1_1001274b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1001274b

dec_label_pc_1001274b:                            ; preds = %dec_label_pc_1001274b.loopexit, %dec_label_pc_10012726
  %v0_1001275645 = phi i32 [ %v0_10012743, %dec_label_pc_1001274b.loopexit ], [ %v4_1001272c, %dec_label_pc_10012726 ]
  %v1_1001274b = phi i32 [ %v1_1001274b.pre, %dec_label_pc_1001274b.loopexit ], [ %v2_10012729, %dec_label_pc_10012726 ]
  %v0_1001274b = phi i32 [ %v2_1001273b.pre, %dec_label_pc_1001274b.loopexit ], [ %v0_10012727, %dec_label_pc_10012726 ]
  %v2_1001274b = or i32 %v0_1001274b, %v1_1001274b
  %v0_1001274d = load i32, i32* @edi, align 4
  store i32 %v2_1001274b, i32* %eax.global-to-local, align 4
  %v2_10012750 = mul i32 %v2_1001274b, 65536
  %v2_10012754 = or i32 %v2_10012750, %v2_1001274b
  store i32 %v2_10012754, i32* %ebx.global-to-local, align 4
  %v3_1001279b = trunc i32 %v2_1001274b to i8
  br label %dec_label_pc_10012756

dec_label_pc_10012756:                            ; preds = %dec_label_pc_100127ba, %dec_label_pc_1001278a, %dec_label_pc_1001277c, %dec_label_pc_1001274b
  %v0_10012771 = phi i32 [ %v0_1001275645, %dec_label_pc_1001274b ], [ %v1_10012771, %dec_label_pc_1001277c ], [ %v1_10012771, %dec_label_pc_1001278a ], [ %v1_10012771, %dec_label_pc_100127ba ]
  %v1_10012756 = inttoptr i32 %v0_10012771 to i32*
  %v2_10012756 = load i32, i32* %v1_10012756, align 4
  %v2_10012761 = xor i32 %v2_10012756, %v2_10012754
  %v2_10012763 = add i32 %v2_10012756, 2130640639
  %v2_10012765 = add i32 %v2_10012761, 2130640639
  %v1_10012767 = xor i32 %v2_10012761, -2130640640
  %v1_1001276a = sub i32 -1, %v2_10012756
  %v2_1001276d = xor i32 %v1_10012767, %v2_10012765
  %v2_1001276f = xor i32 %v2_10012763, %v1_1001276a
  store i32 %v2_1001276f, i32* %eax.global-to-local, align 4
  %v1_10012771 = add i32 %v0_10012771, 4
  store i32 %v1_10012771, i32* @edx, align 4
  %v1_10012774 = and i32 %v2_1001276d, -2130640640
  %v2_10012774 = icmp eq i32 %v1_10012774, 0
  %v1_1001277a = icmp eq i1 %v2_10012774, false
  br i1 %v1_1001277a, label %dec_label_pc_10012798, label %dec_label_pc_1001277c

dec_label_pc_1001277c:                            ; preds = %dec_label_pc_10012756
  %v1_1001277c = and i32 %v2_1001276f, -2130640640
  %v2_1001277c = icmp eq i32 %v1_1001277c, 0
  store i32 %v1_1001277c, i32* %eax.global-to-local, align 4
  br i1 %v2_1001277c, label %dec_label_pc_10012756, label %dec_label_pc_10012783

dec_label_pc_10012783:                            ; preds = %dec_label_pc_1001277c
  %v1_10012783 = and i32 %v2_1001276f, 16843008
  %v2_10012783 = icmp eq i32 %v1_10012783, 0
  store i32 %v1_10012783, i32* %eax.global-to-local, align 4
  %v1_10012788 = icmp eq i1 %v2_10012783, false
  br i1 %v1_10012788, label %dec_label_pc_10012792, label %dec_label_pc_1001278a

dec_label_pc_1001278a:                            ; preds = %dec_label_pc_10012783
  %v2_1001278a = icmp sgt i32 %v2_10012763, -1
  %v1_10012790 = icmp eq i1 %v2_1001278a, false
  br i1 %v1_10012790, label %dec_label_pc_10012756, label %dec_label_pc_10012792

dec_label_pc_10012792:                            ; preds = %dec_label_pc_100127ba, %dec_label_pc_100127b2, %dec_label_pc_100127a7, %dec_label_pc_1001279f, %dec_label_pc_1001278a, %dec_label_pc_10012783
  store i32 %v0_1001274d, i32* @edi, align 4
  br label %dec_label_pc_10012794

dec_label_pc_10012794:                            ; preds = %dec_label_pc_10012738, %dec_label_pc_10012792
  %v2_10012794 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10012794, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  ret i32 0

dec_label_pc_10012798:                            ; preds = %dec_label_pc_10012756
  %v3_10012798 = load i32, i32* %v1_10012756, align 4
  store i32 %v3_10012798, i32* %eax.global-to-local, align 4
  %v1_1001279b = trunc i32 %v3_10012798 to i8
  %v15_1001279b = icmp eq i8 %v1_1001279b, %v3_1001279b
  br i1 %v15_1001279b, label %dec_label_pc_100127d5, label %dec_label_pc_1001279f

dec_label_pc_1001279f:                            ; preds = %dec_label_pc_10012798
  %v4_1001279f = icmp eq i8 %v1_1001279b, 0
  br i1 %v4_1001279f, label %dec_label_pc_10012792, label %dec_label_pc_100127a3

dec_label_pc_100127a3:                            ; preds = %dec_label_pc_1001279f
  %v1_100127a3 = udiv i32 %v3_10012798, 256
  %v2_100127a3 = trunc i32 %v1_100127a3 to i8
  %v16_100127a3 = icmp eq i8 %v2_100127a3, %v3_1001279b
  br i1 %v16_100127a3, label %dec_label_pc_100127ce, label %dec_label_pc_100127a7

dec_label_pc_100127a7:                            ; preds = %dec_label_pc_100127a3
  %v5_100127a7 = icmp eq i8 %v2_100127a3, 0
  br i1 %v5_100127a7, label %dec_label_pc_10012792, label %dec_label_pc_100127ab

dec_label_pc_100127ab:                            ; preds = %dec_label_pc_100127a7
  %v2_100127ab = udiv i32 %v3_10012798, 65536
  %v4_100127ab = trunc i32 %v2_100127ab to i8
  store i32 %v2_100127ab, i32* %eax.global-to-local, align 4
  %v15_100127ae = icmp eq i8 %v4_100127ab, %v3_1001279b
  br i1 %v15_100127ae, label %dec_label_pc_100127c7, label %dec_label_pc_100127b2

dec_label_pc_100127b2:                            ; preds = %dec_label_pc_100127ab
  %v4_100127b2 = icmp eq i8 %v4_100127ab, 0
  br i1 %v4_100127b2, label %dec_label_pc_10012792, label %dec_label_pc_100127b6

dec_label_pc_100127b6:                            ; preds = %dec_label_pc_100127b2
  %v1_100127b6 = udiv i32 %v3_10012798, 16777216
  %v2_100127b6 = trunc i32 %v1_100127b6 to i8
  %v16_100127b6 = icmp eq i8 %v2_100127b6, %v3_1001279b
  br i1 %v16_100127b6, label %dec_label_pc_100127c0, label %dec_label_pc_100127ba

dec_label_pc_100127ba:                            ; preds = %dec_label_pc_100127b6
  %v5_100127ba = icmp eq i8 %v2_100127b6, 0
  br i1 %v5_100127ba, label %dec_label_pc_10012792, label %dec_label_pc_10012756

dec_label_pc_100127c0:                            ; preds = %dec_label_pc_100127b6
  store i32 %v0_1001274d, i32* @edi, align 4
  %v1_100127c2 = add i32 %v0_10012771, 3
  store i32 %v1_100127c2, i32* %eax.global-to-local, align 4
  %v2_100127c5 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100127c5, i32* %ebx.global-to-local, align 4
  ret i32 %v1_100127c2

dec_label_pc_100127c7:                            ; preds = %dec_label_pc_100127ab
  %v1_100127c7 = add i32 %v0_10012771, 2
  store i32 %v1_100127c7, i32* %eax.global-to-local, align 4
  store i32 %v0_1001274d, i32* @edi, align 4
  %v2_100127cc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100127cc, i32* %ebx.global-to-local, align 4
  ret i32 %v1_100127c7

dec_label_pc_100127ce:                            ; preds = %dec_label_pc_100127a3
  %v1_100127ce = add i32 %v0_10012771, 1
  store i32 %v1_100127ce, i32* %eax.global-to-local, align 4
  store i32 %v0_1001274d, i32* @edi, align 4
  %v2_100127d3 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100127d3, i32* %ebx.global-to-local, align 4
  ret i32 %v1_100127ce

dec_label_pc_100127d5:                            ; preds = %dec_label_pc_10012798
  store i32 %v0_10012771, i32* %eax.global-to-local, align 4
  store i32 %v0_1001274d, i32* @edi, align 4
  %v2_100127da = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100127da, i32* %ebx.global-to-local, align 4
  ret i32 %v0_10012771

; uselistorder directives
  uselistorder i8 %v2_100127b6, { 1, 0 }
  uselistorder i8 %v4_100127ab, { 1, 0 }
  uselistorder i32 %v2_100127ab, { 1, 0 }
  uselistorder i8 %v2_100127a3, { 1, 0 }
  uselistorder i8 %v1_1001279b, { 1, 0 }
  uselistorder i32 %v1_10012771, { 3, 2, 1, 0 }
  uselistorder i32 %v2_1001276f, { 1, 0, 2 }
  uselistorder i32 %v2_10012756, { 0, 2, 1 }
  uselistorder i32 %v0_10012771, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_1001274d, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v2_1001274b, { 2, 1, 0, 3 }
  uselistorder i32 %v0_10012743, { 0, 2, 1 }
  uselistorder i8 %v2_10012738, { 2, 0, 1 }
  uselistorder i32 %v2_10012729, { 1, 0 }
  uselistorder i32 %v0_10012727, { 1, 2, 0, 3 }
  uselistorder i32 -2130640640, { 1, 2, 0, 6, 4, 5, 3 }
  uselistorder label %dec_label_pc_10012794, { 1, 0 }
}

define i32 @function_100127e0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100127e0:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v0_100127e4 = load i32, i32* @edi, align 4
  %v0_100127e5 = load i32, i32* @ebx, align 4
  %v0_100127e6 = load i32, i32* @esi, align 4
  store i32 %v0_100127e6, i32* %stack_var_-12, align 4
  %v1_100127e7 = inttoptr i32 %arg2 to i8*
  %v2_100127e7 = load i8, i8* %v1_100127e7, align 1
  %v3_100127e7 = zext i8 %v2_100127e7 to i32
  %v4_100127e7 = load i32, i32* @edx, align 4
  %v5_100127e7 = and i32 %v4_100127e7, -256
  %v6_100127e7 = or i32 %v5_100127e7, %v3_100127e7
  store i32 %v6_100127e7, i32* @edx, align 4
  %v4_100127e9 = ptrtoint i8* %arg1 to i32
  %v4_100127ed = icmp eq i8 %v2_100127e7, 0
  br i1 %v4_100127ed, label %dec_label_pc_1001285a, label %dec_label_pc_100127f1

dec_label_pc_100127f1:                            ; preds = %dec_label_pc_100127e0
  %v1_100127f1 = add i32 %arg2, 1
  %v2_100127f1 = inttoptr i32 %v1_100127f1 to i8*
  %v3_100127f1 = load i8, i8* %v2_100127f1, align 1
  %v4_100127f1 = zext i8 %v3_100127f1 to i32
  %v6_100127f1 = mul nuw nsw i32 %v4_100127f1, 256
  %v7_100127f1 = and i32 %v6_100127e7, -65281
  %v8_100127f1 = or i32 %v6_100127f1, %v7_100127f1
  store i32 %v8_100127f1, i32* @edx, align 4
  %v5_100127f4 = icmp eq i8 %v3_100127f1, 0
  br i1 %v5_100127f4, label %dec_label_pc_10012847, label %dec_label_pc_100127f8.preheader

dec_label_pc_100127f8.preheader:                  ; preds = %dec_label_pc_100127f1
  %v4_100127fe.pre = load i32, i32* @eax, align 4
  %v3_1001281d = udiv i32 %v8_100127f1, 256
  %v4_1001281d = trunc i32 %v3_1001281d to i8
  br label %dec_label_pc_100127f8

dec_label_pc_100127f8:                            ; preds = %dec_label_pc_1001283b, %dec_label_pc_1001282b, %dec_label_pc_100127f8.preheader
  %v4_100127fe = phi i32 [ %v4_100127fe.pre, %dec_label_pc_100127f8.preheader ], [ %v8_1001283b, %dec_label_pc_1001283b ], [ %v6_1001282b, %dec_label_pc_1001282b ]
  %v0_100127f8 = phi i32 [ %v4_100127e9, %dec_label_pc_100127f8.preheader ], [ %v0_1001281c, %dec_label_pc_1001283b ], [ %v0_1001281c, %dec_label_pc_1001282b ]
  %v1_100127fe = inttoptr i32 %v0_100127f8 to i8*
  %v2_100127fe = load i8, i8* %v1_100127fe, align 1
  %v3_100127fe = zext i8 %v2_100127fe to i32
  %v5_100127fe = and i32 %v4_100127fe, -256
  %v6_100127fe = or i32 %v3_100127fe, %v5_100127fe
  %v1_10012800 = add i32 %v0_100127f8, 1
  %v15_10012801 = icmp eq i8 %v2_100127fe, %v2_100127e7
  br i1 %v15_10012801, label %dec_label_pc_1001281a, label %dec_label_pc_10012805

dec_label_pc_10012805:                            ; preds = %dec_label_pc_100127f8
  %v4_10012805 = icmp eq i8 %v2_100127fe, 0
  br i1 %v4_10012805, label %dec_label_pc_10012814, label %dec_label_pc_10012809

dec_label_pc_10012809:                            ; preds = %dec_label_pc_10012810, %dec_label_pc_10012805
  %v4_10012809 = phi i32 [ %v0_10012810, %dec_label_pc_10012810 ], [ %v6_100127fe, %dec_label_pc_10012805 ]
  %v0_1001280b = phi i32 [ %v0_1001281a6, %dec_label_pc_10012810 ], [ %v1_10012800, %dec_label_pc_10012805 ]
  %v1_10012809 = inttoptr i32 %v0_1001280b to i8*
  %v2_10012809 = load i8, i8* %v1_10012809, align 1
  %v3_10012809 = zext i8 %v2_10012809 to i32
  %v5_10012809 = and i32 %v4_10012809, -256
  %v6_10012809 = or i32 %v3_10012809, %v5_10012809
  %v1_1001280b = add i32 %v0_1001280b, 1
  br label %dec_label_pc_1001280c

dec_label_pc_1001280c:                            ; preds = %dec_label_pc_1001281a, %dec_label_pc_10012809
  %v0_10012810 = phi i32 [ %v6_1001281a, %dec_label_pc_1001281a ], [ %v6_10012809, %dec_label_pc_10012809 ]
  %v0_1001281a6 = phi i32 [ %v1_1001281c, %dec_label_pc_1001281a ], [ %v1_1001280b, %dec_label_pc_10012809 ]
  %v1_1001280c = trunc i32 %v0_10012810 to i8
  %v15_1001280c = icmp eq i8 %v1_1001280c, %v2_100127e7
  br i1 %v15_1001280c, label %dec_label_pc_1001281a, label %dec_label_pc_10012810

dec_label_pc_10012810:                            ; preds = %dec_label_pc_1001280c
  %v4_10012810 = icmp eq i8 %v1_1001280c, 0
  %v1_10012812 = icmp eq i1 %v4_10012810, false
  br i1 %v1_10012812, label %dec_label_pc_10012809, label %dec_label_pc_10012814

dec_label_pc_10012814:                            ; preds = %dec_label_pc_10012810, %dec_label_pc_10012805
  store i32 %v0_100127e6, i32* @esi, align 4
  store i32 %v0_100127e4, i32* @edi, align 4
  ret i32 0

dec_label_pc_1001281a:                            ; preds = %dec_label_pc_1001280c, %dec_label_pc_100127f8
  %v4_1001281a = phi i32 [ %v0_10012810, %dec_label_pc_1001280c ], [ %v6_100127fe, %dec_label_pc_100127f8 ]
  %v0_1001281c = phi i32 [ %v0_1001281a6, %dec_label_pc_1001280c ], [ %v1_10012800, %dec_label_pc_100127f8 ]
  %v1_1001281a = inttoptr i32 %v0_1001281c to i8*
  %v2_1001281a = load i8, i8* %v1_1001281a, align 1
  %v3_1001281a = zext i8 %v2_1001281a to i32
  %v5_1001281a = and i32 %v4_1001281a, -256
  %v6_1001281a = or i32 %v3_1001281a, %v5_1001281a
  %v1_1001281c = add i32 %v0_1001281c, 1
  %v16_1001281d = icmp eq i8 %v2_1001281a, %v4_1001281d
  %v1_1001281f = icmp eq i1 %v16_1001281d, false
  br i1 %v1_1001281f, label %dec_label_pc_1001280c, label %dec_label_pc_10012821

dec_label_pc_10012821:                            ; preds = %dec_label_pc_1001281a
  br label %dec_label_pc_10012824

dec_label_pc_10012824:                            ; preds = %dec_label_pc_1001283b, %dec_label_pc_10012821
  %v0_1001282d = phi i32 [ %v1_1001282d, %dec_label_pc_1001283b ], [ %v1_1001281c, %dec_label_pc_10012821 ]
  %v5_10012824 = phi i32 [ %v8_1001283b, %dec_label_pc_1001283b ], [ %v6_1001281a, %dec_label_pc_10012821 ]
  %v0_1001283e = phi i32 [ %v1_10012824, %dec_label_pc_1001283b ], [ %arg2, %dec_label_pc_10012821 ]
  %v1_10012824 = add i32 %v0_1001283e, 2
  %v2_10012824 = inttoptr i32 %v1_10012824 to i8*
  %v3_10012824 = load i8, i8* %v2_10012824, align 1
  %v4_10012824 = zext i8 %v3_10012824 to i32
  %v6_10012824 = mul nuw nsw i32 %v4_10012824, 256
  %v7_10012824 = and i32 %v5_10012824, -65281
  %v8_10012824 = or i32 %v6_10012824, %v7_10012824
  %v5_10012827 = icmp eq i8 %v3_10012824, 0
  br i1 %v5_10012827, label %dec_label_pc_10012853.loopexit, label %dec_label_pc_1001282b

dec_label_pc_1001282b:                            ; preds = %dec_label_pc_10012824
  %v1_1001282b = inttoptr i32 %v0_1001282d to i8*
  %v2_1001282b = load i8, i8* %v1_1001282b, align 1
  %v3_1001282b = zext i8 %v2_1001282b to i32
  %v5_1001282b = and i32 %v8_10012824, -256
  %v6_1001282b = or i32 %v3_1001282b, %v5_1001282b
  %v1_1001282d = add i32 %v0_1001282d, 2
  %v3_10012830 = udiv i32 %v8_10012824, 256
  %v4_10012830 = trunc i32 %v3_10012830 to i8
  %v16_10012830 = icmp eq i8 %v2_1001282b, %v4_10012830
  %v1_10012832 = icmp eq i1 %v16_10012830, false
  br i1 %v1_10012832, label %dec_label_pc_100127f8, label %dec_label_pc_10012834

dec_label_pc_10012834:                            ; preds = %dec_label_pc_1001282b
  %v1_10012834 = add i32 %v0_1001283e, 3
  %v2_10012834 = inttoptr i32 %v1_10012834 to i8*
  %v3_10012834 = load i8, i8* %v2_10012834, align 1
  %v4_10012837 = icmp eq i8 %v3_10012834, 0
  br i1 %v4_10012837, label %dec_label_pc_10012853.loopexit, label %dec_label_pc_1001283b

dec_label_pc_1001283b:                            ; preds = %dec_label_pc_10012834
  %v4_10012834 = zext i8 %v3_10012834 to i32
  %v1_1001283b = add i32 %v0_1001282d, 1
  %v2_1001283b = inttoptr i32 %v1_1001283b to i8*
  %v3_1001283b = load i8, i8* %v2_1001283b, align 1
  %v4_1001283b = zext i8 %v3_1001283b to i32
  %v6_1001283b = mul nuw nsw i32 %v4_1001283b, 256
  %v5_1001282b.masked = and i32 %v8_10012824, -65536
  %v7_1001283b = or i32 %v4_10012834, %v5_1001282b.masked
  %v8_1001283b = or i32 %v6_1001283b, %v7_1001283b
  %v3_10012841 = udiv i32 %v8_1001283b, 256
  %v4_10012841 = trunc i32 %v3_10012841 to i8
  %v16_10012841 = icmp eq i8 %v3_10012834, %v4_10012841
  br i1 %v16_10012841, label %dec_label_pc_10012824, label %dec_label_pc_100127f8

dec_label_pc_10012847:                            ; preds = %dec_label_pc_100127f1
  store i32 %v0_100127e4, i32* @edi, align 4
  store i32 %v3_100127e7, i32* @eax, align 4
  %v3_1001284e = inttoptr i32 %v0_100127e6 to i8*
  %v4_1001284e = call i32 @function_10012726(i8* %v3_1001284e, i32 %v0_100127e5, i32 %v0_100127e4)
  %v0_10012853.pre = load i32, i32* @edi, align 4
  %v2_10012856.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_10012853

dec_label_pc_10012853.loopexit:                   ; preds = %dec_label_pc_10012824, %dec_label_pc_10012834
  br label %dec_label_pc_10012853

dec_label_pc_10012853:                            ; preds = %dec_label_pc_10012853.loopexit, %dec_label_pc_10012847
  %v2_10012856 = phi i32 [ %v0_100127e6, %dec_label_pc_10012853.loopexit ], [ %v2_10012856.pre, %dec_label_pc_10012847 ]
  %v0_10012853 = phi i32 [ %v0_1001281c, %dec_label_pc_10012853.loopexit ], [ %v0_10012853.pre, %dec_label_pc_10012847 ]
  %v1_10012853 = add i32 %v0_10012853, -1
  store i32 %v2_10012856, i32* @esi, align 4
  store i32 %v0_100127e5, i32* @ebx, align 4
  store i32 %v0_100127e4, i32* @edi, align 4
  ret i32 %v1_10012853

dec_label_pc_1001285a:                            ; preds = %dec_label_pc_100127e0
  store i32 %v0_100127e4, i32* @edi, align 4
  ret i32 %v4_100127e9

; uselistorder directives
  uselistorder i8 %v3_10012834, { 0, 2, 1 }
  uselistorder i32 %v1_10012824, { 1, 0 }
  uselistorder i32 %v6_1001281a, { 1, 0 }
  uselistorder i32 %v0_1001281c, { 2, 3, 4, 1, 0 }
  uselistorder i8 %v1_1001280c, { 1, 0 }
  uselistorder i32 %v0_1001281a6, { 1, 0 }
  uselistorder i32 %v0_10012810, { 2, 1, 0 }
  uselistorder i32 %v1_10012800, { 1, 0 }
  uselistorder i32 %v6_100127fe, { 1, 0 }
  uselistorder i8 %v2_100127fe, { 1, 0, 2 }
  uselistorder i32 %v4_100127e9, { 1, 0 }
  uselistorder i32 %v3_100127e7, { 1, 0 }
  uselistorder i32 %v0_100127e4, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10012853.loopexit, { 1, 0 }
}

define i32 @function_10012860(i32 %arg1) local_unnamed_addr {
dec_label_pc_10012860:
  %stack_var_4 = alloca i32, align 4
  %v0_10012861 = load i32, i32* @eax, align 4
  %v2_10012861 = icmp ult i32 %v0_10012861, 4096
  %v2_10012866 = ptrtoint i32* %stack_var_4 to i32
  br i1 %v2_10012861, label %dec_label_pc_10012880, label %dec_label_pc_1001286c

dec_label_pc_1001286c:                            ; preds = %dec_label_pc_10012860, %dec_label_pc_1001286c
  %v0_10012872 = phi i32 [ %v1_10012872, %dec_label_pc_1001286c ], [ %v0_10012861, %dec_label_pc_10012860 ]
  %v0_1001286c = phi i32 [ %v1_1001286c, %dec_label_pc_1001286c ], [ %v2_10012866, %dec_label_pc_10012860 ]
  %v1_1001286c = add i32 %v0_1001286c, -4096
  %v1_10012872 = add i32 %v0_10012872, -4096
  %v2_10012879 = icmp ult i32 %v1_10012872, 4096
  %v1_1001287e = icmp eq i1 %v2_10012879, false
  br i1 %v1_1001287e, label %dec_label_pc_1001286c, label %dec_label_pc_10012880.loopexit

dec_label_pc_10012880.loopexit:                   ; preds = %dec_label_pc_1001286c
  br label %dec_label_pc_10012880

dec_label_pc_10012880:                            ; preds = %dec_label_pc_10012880.loopexit, %dec_label_pc_10012860
  %v1_10012880 = phi i32 [ %v1_10012872, %dec_label_pc_10012880.loopexit ], [ %v0_10012861, %dec_label_pc_10012860 ]
  %v0_10012880 = phi i32 [ %v1_1001286c, %dec_label_pc_10012880.loopexit ], [ %v2_10012866, %dec_label_pc_10012860 ]
  %v2_10012880 = sub i32 %v0_10012880, %v1_10012880
  %v2_1001288d = add i32 %v2_10012880, -4
  %v3_1001288d = inttoptr i32 %v2_1001288d to i32*
  store i32 %arg1, i32* %v3_1001288d, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_10012872, { 0, 2, 1 }
  uselistorder i32 %v2_10012866, { 1, 0 }
  uselistorder i32 %v0_10012861, { 1, 0, 2 }
  uselistorder i32 -4096, { 1, 2, 0, 3 }
  uselistorder i32 4096, { 10, 11, 8, 12, 4, 0, 1, 13, 14, 2, 3, 9, 16, 5, 15, 6, 7 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_1001286c, { 1, 0 }
}

declare i32 @_fdiv_main_routine(i32) local_unnamed_addr

define i32 @function_10012e46() local_unnamed_addr {
entry:
  %v1_10012e49 = load x86_fp80, x86_fp80* @st0, align 4
  %v4_10012e49 = fptrunc x86_fp80 %v1_10012e49 to float
  %v5_10012e49 = bitcast float %v4_10012e49 to i32
  %v1_10012e50 = call i32 @_fdiv_main_routine(i32 %v5_10012e49)
  ret i32 %v1_10012e50
}

define i32 @function_10012e59() local_unnamed_addr {
dec_label_pc_10012e59:
  %v1_10012e60 = load x86_fp80, x86_fp80* @st0, align 4
  %v4_10012e60 = fptrunc x86_fp80 %v1_10012e60 to float
  %v5_10012e60 = bitcast float %v4_10012e60 to i32
  %v1_10012e63 = call i32 @_fdiv_main_routine(i32 %v5_10012e60)
  ret i32 %v1_10012e63
}

define i32 @function_1001306c() local_unnamed_addr {
entry:
  %v0_1001306c = load i32, i32* @eax, align 4
  %v1_10013070 = load x86_fp80, x86_fp80* @st0, align 4
  %v4_10013070 = fptrunc x86_fp80 %v1_10013070 to float
  %v5_10013070 = bitcast float %v4_10013070 to i32
  %v1_10013077 = call i32 @_fdiv_main_routine(i32 %v5_10013070)
  ret i32 %v0_1001306c
}

define i32 @function_10013081() local_unnamed_addr {
dec_label_pc_10013081:
  %v0_10013081 = load i32, i32* @eax, align 4
  %v1_10013089 = load x86_fp80, x86_fp80* @st0, align 4
  %v4_10013089 = fptrunc x86_fp80 %v1_10013089 to float
  %v5_10013089 = bitcast float %v4_10013089 to i32
  %v1_1001308c = call i32 @_fdiv_main_routine(i32 %v5_10013089)
  ret i32 %v0_10013081

; uselistorder directives
  uselistorder i32 (i32)* @_fdiv_main_routine, { 3, 2, 1, 0 }
  uselistorder x86_fp80* @st0, { 8, 9, 10, 11, 12, 13, 14, 15, 94, 16, 7, 17, 6, 18, 19, 21, 20, 95, 24, 27, 28, 22, 23, 29, 30, 31, 32, 33, 34, 25, 26, 37, 36, 35, 38, 0, 39, 40, 41, 42, 45, 46, 47, 44, 43, 49, 48, 50, 1, 53, 54, 51, 52, 2, 55, 56, 57, 58, 3, 4, 59, 60, 61, 5, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 81, 87, 88, 86, 85, 84, 91, 90, 92, 89, 93 }
}

declare i32 @__adj_fprem() local_unnamed_addr

define i32 @function_10013609() local_unnamed_addr {
entry:
  %v0_10013609 = call i32 @__adj_fprem()
  ret i32 %v0_10013609
}

define i32 @function_1001361b(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1001361b:
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_12 = alloca i16*, align 4
  %tmp17 = inttoptr i32 %arg3 to i16*
  store i16* %tmp17, i16** %stack_var_12, align 4
  %stack_var_-92 = alloca i32, align 4
  store i32 %tmp11, i32* @esi, align 4
  %v2_10013629 = load i16, i16* %tmp17, align 2
  %v3_10013629 = zext i16 %v2_10013629 to i32
  store i32 %v3_10013629, i32* @ecx, align 4
  %v2_1001362c = load i32, i32* %arg2, align 4
  %v8_1001362f = icmp eq i32 %v2_1001362c, 1
  %v5_10013630 = inttoptr i32 %v3_10013629 to i16*
  store i16* %v5_10013630, i16** %stack_var_12, align 4
  br i1 %v8_1001362f, label %dec_label_pc_10013660, label %dec_label_pc_10013635

dec_label_pc_10013635:                            ; preds = %dec_label_pc_1001361b
  %v8_10013635 = icmp eq i32 %v2_1001362c, 2
  br i1 %v8_10013635, label %dec_label_pc_1001365c, label %dec_label_pc_10013638

dec_label_pc_10013638:                            ; preds = %dec_label_pc_10013635
  %v8_10013638 = icmp eq i32 %v2_1001362c, 3
  br i1 %v8_10013638, label %dec_label_pc_10013658, label %dec_label_pc_1001363b

dec_label_pc_1001363b:                            ; preds = %dec_label_pc_10013638
  %v8_1001363b = icmp eq i32 %v2_1001362c, 4
  br i1 %v8_1001363b, label %dec_label_pc_10013654, label %dec_label_pc_1001363e

dec_label_pc_1001363e:                            ; preds = %dec_label_pc_1001363b
  %v8_1001363e = icmp eq i32 %v2_1001362c, 5
  br i1 %v8_1001363e, label %dec_label_pc_10013660, label %dec_label_pc_10013641

dec_label_pc_10013641:                            ; preds = %dec_label_pc_1001363e
  %v8_10013642 = icmp eq i32 %v2_1001362c, 7
  br i1 %v8_10013642, label %dec_label_pc_1001364c, label %dec_label_pc_10013645

dec_label_pc_10013645:                            ; preds = %dec_label_pc_10013641
  %v8_10013645 = icmp eq i32 %v2_1001362c, 8
  %v1_10013646 = icmp eq i1 %v8_10013645, false
  br i1 %v1_10013646, label %dec_label_pc_100136b6, label %dec_label_pc_10013648

dec_label_pc_10013648:                            ; preds = %dec_label_pc_10013645
  br label %dec_label_pc_10013662

dec_label_pc_1001364c:                            ; preds = %dec_label_pc_10013641
  store i32 1, i32* %arg2, align 4
  br label %dec_label_pc_100136b6

dec_label_pc_10013654:                            ; preds = %dec_label_pc_1001363b
  br label %dec_label_pc_10013662

dec_label_pc_10013658:                            ; preds = %dec_label_pc_10013638
  br label %dec_label_pc_10013662

dec_label_pc_1001365c:                            ; preds = %dec_label_pc_10013635
  br label %dec_label_pc_10013662

dec_label_pc_10013660:                            ; preds = %dec_label_pc_1001363e, %dec_label_pc_1001361b
  br label %dec_label_pc_10013662

dec_label_pc_10013662:                            ; preds = %dec_label_pc_1001365c, %dec_label_pc_10013658, %dec_label_pc_10013654, %dec_label_pc_10013648, %dec_label_pc_10013660
  %v2_10013662 = phi i32 [ 4, %dec_label_pc_1001365c ], [ 17, %dec_label_pc_10013658 ], [ 18, %dec_label_pc_10013654 ], [ 16, %dec_label_pc_10013648 ], [ 8, %dec_label_pc_10013660 ]
  store i32 %v2_10013662, i32* @ebx, align 4
  %v1_10013663 = add i32 %tmp11, 24
  store i32 %v1_10013663, i32* @edi, align 4
  %v4_10013669 = trunc i32 %v2_10013662 to i8
  %v5_10013669 = call i32 @function_1000ed23(i8 %v4_10013669, i32 %v1_10013663, i32 %v3_10013629)
  %v1_10013671 = icmp eq i32 %v5_10013669, 0
  %v1_10013673 = icmp eq i1 %v1_10013671, false
  br i1 %v1_10013673, label %dec_label_pc_100136b6, label %dec_label_pc_10013675

dec_label_pc_10013675:                            ; preds = %dec_label_pc_10013662
  %v6_10013678 = icmp eq i32 %arg1, 16
  br i1 %v6_10013678, label %dec_label_pc_1001368d, label %dec_label_pc_1001367d

dec_label_pc_1001367d:                            ; preds = %dec_label_pc_10013675
  %v9_1001367d = icmp eq i32 %arg1, 22
  br i1 %v9_1001367d, label %dec_label_pc_1001368d, label %dec_label_pc_10013682

dec_label_pc_10013682:                            ; preds = %dec_label_pc_1001367d
  %v9_10013682 = icmp eq i32 %arg1, 29
  br i1 %v9_10013682, label %dec_label_pc_1001368d, label %dec_label_pc_10013687

dec_label_pc_10013687:                            ; preds = %dec_label_pc_10013682
  br label %dec_label_pc_1001369f

dec_label_pc_1001368d:                            ; preds = %dec_label_pc_10013682, %dec_label_pc_1001367d, %dec_label_pc_10013675
  br label %dec_label_pc_1001369f

dec_label_pc_1001369f:                            ; preds = %dec_label_pc_10013687, %dec_label_pc_1001368d
  %v0_1001369f = load i32, i32* @esi, align 4
  %v1_1001369f = add i32 %v0_1001369f, 8
  %v0_100136a2 = load i32, i32* @edi, align 4
  %v2_100136a5 = ptrtoint i16** %stack_var_12 to i32
  %v0_100136a8 = load i32, i32* @ebx, align 4
  %v8_100136ae = call i32 @function_1000ea70(i32* nonnull %stack_var_-92, i32 %v2_100136a5, i32 %v0_100136a8, i32 %arg1, i32 %v1_1001369f, i32 %v0_100136a2)
  %tmp26.phi.trans.insert = bitcast i16** %stack_var_12 to i32*
  %v3_100136bb3.pre = load i32, i32* %tmp26.phi.trans.insert, align 4
  br label %dec_label_pc_100136b6

dec_label_pc_100136b6:                            ; preds = %dec_label_pc_10013662, %dec_label_pc_10013645, %dec_label_pc_1001364c, %dec_label_pc_1001369f
  %v3_100136bb3 = phi i32 [ %v3_10013629, %dec_label_pc_10013662 ], [ %v3_10013629, %dec_label_pc_10013645 ], [ %v3_10013629, %dec_label_pc_1001364c ], [ %v3_100136bb3.pre, %dec_label_pc_1001369f ]
  %v3_100136be = call i32 @function_1000f19d(i32 %v3_100136bb3, i32 65535)
  %v0_100136c3 = load i32, i32* @esi, align 4
  %v1_100136c3 = inttoptr i32 %v0_100136c3 to i32*
  %v2_100136c3 = load i32, i32* %v1_100136c3, align 4
  %v11_100136c3 = icmp eq i32 %v2_100136c3, 8
  br i1 %v11_100136c3, label %dec_label_pc_100136de, label %dec_label_pc_100136ca

dec_label_pc_100136ca:                            ; preds = %dec_label_pc_100136b6
  %v0_100136ca = load i32, i32* @global_var_1001aaf8.139, align 8
  %v1_100136ca = icmp eq i32 %v0_100136ca, 0
  %v1_100136d1 = icmp eq i1 %v1_100136ca, false
  br i1 %v1_100136d1, label %dec_label_pc_100136de, label %dec_label_pc_100136d3

dec_label_pc_100136d3:                            ; preds = %dec_label_pc_100136ca
  %v1_100136d4 = call i32 @function_100124f0(i32 %v0_100136c3)
  %v1_100136d9 = icmp eq i32 %v1_100136d4, 0
  %v1_100136dc = icmp eq i1 %v1_100136d9, false
  br i1 %v1_100136dc, label %dec_label_pc_100136e6, label %dec_label_pc_100136d3.dec_label_pc_100136de_crit_edge

dec_label_pc_100136d3.dec_label_pc_100136de_crit_edge: ; preds = %dec_label_pc_100136d3
  %v0_100136de.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_100136de

dec_label_pc_100136de:                            ; preds = %dec_label_pc_100136d3.dec_label_pc_100136de_crit_edge, %dec_label_pc_100136b6, %dec_label_pc_100136ca
  %v0_100136de = phi i32 [ %v0_100136de.pre, %dec_label_pc_100136d3.dec_label_pc_100136de_crit_edge ], [ %v0_100136c3, %dec_label_pc_100136b6 ], [ %v0_100136c3, %dec_label_pc_100136ca ]
  %v1_100136de = inttoptr i32 %v0_100136de to i32*
  %v2_100136de = load i32, i32* %v1_100136de, align 4
  %v1_100136e0 = call i32 @__set_errno_from_matherr(i32 %v2_100136de)
  br label %dec_label_pc_100136e6

dec_label_pc_100136e6:                            ; preds = %dec_label_pc_100136d3, %dec_label_pc_100136de
  %v0_100136ea = phi i32 [ %v1_100136d4, %dec_label_pc_100136d3 ], [ %v1_100136e0, %dec_label_pc_100136de ]
  ret i32 %v0_100136ea

; uselistorder directives
  uselistorder i32 (i32)* @__set_errno_from_matherr, { 0, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_1000f19d, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32*, i32, i32, i32, i32, i32)* @function_1000ea70, { 1, 0 }
  uselistorder i32 (i8, i32, i32)* @function_1000ed23, { 1, 0 }
  uselistorder i32 24, { 9, 3, 2, 19, 20, 18, 17, 21, 0, 1, 6, 7, 8, 4, 5, 15, 16, 10, 11, 12, 13, 14 }
  uselistorder i32 %arg1, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_100136e6, { 1, 0 }
  uselistorder label %dec_label_pc_100136de, { 0, 2, 1 }
  uselistorder label %dec_label_pc_100136b6, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_1001369f, { 1, 0 }
  uselistorder label %dec_label_pc_10013662, { 4, 0, 1, 2, 3 }
}

define x86_fp80 @function_100136eb(double %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100136eb:
  %v4_100136f0 = fpext double %arg1 to x86_fp80
  %v5_100136f0 = load i3, i3* @fpu_stat_TOP, align 1
  %v6_100136f0 = add i3 %v5_100136f0, -1
  %v2_100136f3 = call x86_fp80 @llvm.round.f80(x86_fp80 %v4_100136f0)
  store i3 %v6_100136f0, i3* @fpu_stat_TOP, align 1
  ret x86_fp80 %v2_100136f3

; uselistorder directives
  uselistorder i3 -1, { 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 2, 3, 29, 4, 5, 6, 7, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder i3* @fpu_stat_TOP, { 139, 140, 2, 141, 142, 3, 143, 144, 145, 146, 147, 148, 173, 174, 175, 178, 176, 177, 43, 44, 45, 46, 179, 180, 181, 0, 47, 48, 49, 50, 182, 183, 149, 4, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 51, 52, 53, 54, 55, 56, 57, 58, 59, 6, 5, 169, 170, 184, 185, 186, 187, 188, 189, 35, 36, 37, 38, 10, 8, 9, 7, 99, 100, 13, 11, 12, 101, 1, 102, 103, 39, 40, 41, 42, 15, 14, 17, 16, 77, 78, 79, 80, 104, 105, 60, 61, 62, 63, 64, 19, 18, 21, 20, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 114, 115, 116, 117, 118, 119, 26, 27, 28, 22, 23, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 29, 30, 171, 172, 31, 32, 33, 34, 106, 107, 108, 109, 110, 111, 112, 113, 202, 203, 204, 205, 24, 190, 25, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201 }
}

define i32 @function_100136fd(double %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_100136fd:
  %arg3.tr = trunc i32 %arg3 to i16
  %v1_1001370c = and i16 %arg3.tr, 32752
  %v15_1001370c = icmp eq i16 %v1_1001370c, 32752
  %v1_1001370f = icmp eq i1 %v15_1001370c, false
  br i1 %v1_1001370f, label %dec_label_pc_1001373d, label %dec_label_pc_10013711

dec_label_pc_10013711:                            ; preds = %dec_label_pc_100136fd
  %v4_10013711 = fpext double %arg1 to x86_fp80
  %v5_10013716 = fptrunc x86_fp80 %v4_10013711 to float
  %v6_10013716 = bitcast float %v5_10013716 to i32
  %v2_10013719 = call i32 @function_1000f065(i32 %v6_10013716, i32 32752)
  %v8_1001371f = icmp eq i32 %v2_10013719, 1
  br i1 %v8_1001371f, label %dec_label_pc_10013736, label %dec_label_pc_10013723

dec_label_pc_10013723:                            ; preds = %dec_label_pc_10013711
  %v8_10013723 = icmp eq i32 %v2_10013719, 2
  br i1 %v8_10013723, label %dec_label_pc_10013732, label %dec_label_pc_10013726

dec_label_pc_10013726:                            ; preds = %dec_label_pc_10013723
  %v8_10013726 = icmp eq i32 %v2_10013719, 3
  br i1 %v8_10013726, label %dec_label_pc_1001372e, label %dec_label_pc_10013729

dec_label_pc_10013729:                            ; preds = %dec_label_pc_10013726
  br label %dec_label_pc_1001372b

dec_label_pc_1001372b:                            ; preds = %dec_label_pc_10013732, %dec_label_pc_1001372e, %dec_label_pc_10013729
  %v2_1001372b = phi i32 [ 4, %dec_label_pc_10013732 ], [ 2, %dec_label_pc_1001372e ], [ 1, %dec_label_pc_10013729 ]
  ret i32 %v2_1001372b

dec_label_pc_1001372e:                            ; preds = %dec_label_pc_10013726
  br label %dec_label_pc_1001372b

dec_label_pc_10013732:                            ; preds = %dec_label_pc_10013723
  br label %dec_label_pc_1001372b

dec_label_pc_10013736:                            ; preds = %dec_label_pc_10013711
  ret i32 512

dec_label_pc_1001373d:                            ; preds = %dec_label_pc_100136fd
  %v4_10013742 = icmp eq i16 %v1_1001370c, 0
  %v1_10013747 = icmp eq i1 %v4_10013742, false
  br i1 %v1_10013747, label %dec_label_pc_10013782, label %dec_label_pc_10013749

dec_label_pc_10013749:                            ; preds = %dec_label_pc_1001373d
  %v4_10013749 = and i32 %arg2, 1048575
  %v5_10013749 = icmp eq i32 %v4_10013749, 0
  %v1_10013750 = icmp eq i1 %v5_10013749, false
  br i1 %v1_10013750, label %dec_label_pc_10013758, label %dec_label_pc_10013752

dec_label_pc_10013752:                            ; preds = %dec_label_pc_10013749
  %v4_10013752 = fptrunc double %arg1 to float
  %v5_10013752 = bitcast float %v4_10013752 to i32
  %v6_10013752 = icmp eq i32 %v5_10013752, 0
  br i1 %v6_10013752, label %dec_label_pc_10013782, label %dec_label_pc_10013758

dec_label_pc_10013758:                            ; preds = %dec_label_pc_10013752, %dec_label_pc_10013749
  ret i32 128

dec_label_pc_10013782:                            ; preds = %dec_label_pc_1001373d, %dec_label_pc_10013752
  ret i32 256

; uselistorder directives
  uselistorder i32 128, { 0, 1, 3, 4, 5, 6, 7, 11, 12, 8, 13, 9, 10, 14, 15, 16, 17, 18, 19, 20, 2 }
  uselistorder i32 1048575, { 1, 0, 8, 2, 3, 9, 10, 4, 5, 6, 7 }
  uselistorder i16 32752, { 1, 0, 5, 2, 3, 4 }
  uselistorder double %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_10013782, { 1, 0 }
}

define i32 @function_1001378f(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1001378f:
  call void @llvm.trap()
  unreachable
}

define i32 @function_10013828(i32 %arg1) local_unnamed_addr {
dec_label_pc_10013828:
  %v1_1001382a = call i32 @function_100103fb(i32 9)
  ret i32 %v1_1001382a
}

define i32 @function_10013831() local_unnamed_addr {
dec_label_pc_10013831:
  %v0_10013831 = load i32, i32* @eax, align 4
  %v9_10013831 = icmp eq i32 %v0_10013831, 2
  %v1_10013834 = icmp eq i1 %v9_10013831, false
  call void @__pseudo_cond_branch(i1 %v1_10013834, i32 268515447)
  %v0_10013836 = load i32, i32* @esi, align 4
  %v1_10013836 = load i32, i32* @global_var_1001a734.108, align 4
  %tmp = icmp ugt i32 %v0_10013836, %v1_10013836
  call void @__pseudo_cond_branch(i1 %tmp, i32 268515447)
  %v1_10013840 = call i32 @function_1001039a(i32 9)
  %v0_10013846 = load i32, i32* @ebp, align 4
  %v1_10013846 = add i32 %v0_10013846, -4
  %v2_10013846 = inttoptr i32 %v1_10013846 to i32*
  store i32 1, i32* %v2_10013846, align 4
  %v0_1001384d = load i32, i32* @esi, align 4
  %v2_1001384f = udiv i32 %v0_1001384d, 16
  %v4_1001384f = trunc i32 %v2_1001384f to i8
  %v2_10013853 = call i32 @function_1000ffd9(i8 %v4_1001384f)
  %v1_10013859 = load i32, i32* @ebp, align 4
  %v2_10013859 = add i32 %v1_10013859, -32
  %v3_10013859 = inttoptr i32 %v2_10013859 to i32*
  store i32 %v2_10013853, i32* %v3_10013859, align 4
  %v4_1001385c = load i32, i32* @ebp, align 4
  %v5_1001385c = add i32 %v4_1001385c, -4
  %v6_1001385c = inttoptr i32 %v5_1001385c to i32*
  store i32 -1, i32* %v6_1001385c, align 4
  %v0_10013860 = call i32 @function_100138b1()
  %v0_10013865 = load i32, i32* @ebp, align 4
  %v1_10013865 = add i32 %v0_10013865, -32
  %v2_10013865 = inttoptr i32 %v1_10013865 to i32*
  %v3_10013865 = load i32, i32* %v2_10013865, align 4
  %v4_10013865 = load i32, i32* @ebx, align 4
  %v15_10013865 = icmp eq i32 %v3_10013865, %v4_10013865
  call void @__pseudo_cond_branch(i1 %v15_10013865, i32 268515452)
  ret i32 %v0_10013860

; uselistorder directives
  uselistorder i32 16, { 20, 0, 34, 1, 31, 32, 35, 46, 2, 3, 38, 39, 36, 15, 43, 45, 21, 66, 42, 67, 68, 69, 16, 44, 59, 22, 60, 57, 58, 56, 79, 80, 70, 71, 72, 73, 74, 75, 23, 76, 77, 78, 24, 61, 62, 63, 64, 25, 26, 27, 65, 81, 82, 40, 28, 17, 41, 49, 50, 29, 51, 18, 4, 30, 37, 19, 48, 33, 47, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 54, 55, 52, 53 }
  uselistorder i32 480, { 1, 2, 3, 0 }
}

define i32 @function_1001386b(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001386b:
  %tmp = call i32 @__decompiler_undefined_function_1()
  %v0_1001386b = load i32, i32* @ebx, align 4
  %v0_1001386c = load i32, i32* @ebp, align 4
  %v1_1001386c = add i32 %v0_1001386c, -32
  %v2_1001386c = inttoptr i32 %v1_1001386c to i32*
  %v3_1001386c = load i32, i32* %v2_1001386c, align 4
  %v3_1001386f = inttoptr i32 %v3_1001386c to i8*
  %v4_1001386f = call i32 @function_10012000(i8* %v3_1001386f, i32 %v0_1001386b, i32 %tmp)
  %v0_10013877 = load i32, i32* @ebp, align 4
  %v1_10013877 = add i32 %v0_10013877, -32
  %v2_10013877 = inttoptr i32 %v1_10013877 to i32*
  %v3_10013877 = load i32, i32* %v2_10013877, align 4
  %v4_10013877 = load i32, i32* @ebx, align 4
  %v15_10013877 = icmp eq i32 %v3_10013877, %v4_10013877
  %v1_1001387a = icmp eq i1 %v15_10013877, false
  call void @__pseudo_cond_branch(i1 %v1_1001387a, i32 268515514)
  %v0_1001387c = load i32, i32* @esi, align 4
  %v0_1001387f = load i32, i32* @global_var_1001bb10.104, align 16
  %v5_10013885 = inttoptr i32 %v0_1001387f to i32*
  %v6_10013885 = call i32* @HeapAlloc(i32* %v5_10013885, i32 8, i32 %v0_1001387c)
  %v7_10013885 = ptrtoint i32* %v6_10013885 to i32
  %v1_1001388b = load i32, i32* @ebp, align 4
  %v2_1001388b = add i32 %v1_1001388b, -32
  %v3_1001388b = inttoptr i32 %v2_1001388b to i32*
  store i32 %v7_10013885, i32* %v3_1001388b, align 4
  %v0_1001388e = load i32, i32* @ebp, align 4
  %v1_1001388e = add i32 %v0_1001388e, -32
  %v2_1001388e = inttoptr i32 %v1_1001388e to i32*
  %v3_1001388e = load i32, i32* %v2_1001388e, align 4
  %v4_1001388e = load i32, i32* @ebx, align 4
  %v15_1001388e = icmp eq i32 %v3_1001388e, %v4_1001388e
  %v1_10013891 = icmp eq i1 %v15_1001388e, false
  call void @__pseudo_cond_branch(i1 %v1_10013891, i32 268515514)
  %v0_10013893 = load i32, i32* @global_var_1001b498.105, align 8
  %v1_10013893 = load i32, i32* @ebx, align 4
  %v12_10013893 = icmp eq i32 %v0_10013893, %v1_10013893
  call void @__pseudo_cond_branch(i1 %v12_10013893, i32 268515514)
  %v0_1001389b = load i32, i32* @esi, align 4
  %v1_1001389c = call i32 @function_100105e0(i32 %v0_1001389b)
  %v1_100138a2 = icmp eq i32 %v1_1001389c, 0
  %v1_100138a4 = icmp eq i1 %v1_100138a2, false
  call void @__pseudo_cond_branch(i1 %v1_100138a4, i32 268515290)
  %v0_100138aa = call i32 @function_100138bd()
  ret i32 %v0_100138aa

; uselistorder directives
  uselistorder i32* (i32*, i32, i32)* @HeapAlloc, { 5, 2, 4, 1, 3, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 9, 10, 11, 12, 13, 14, 15, 16, 1, 2, 7, 8, 3, 4, 5, 6, 19, 20, 17, 18, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_10012000, { 1, 2, 3, 0 }
}

define i32 @function_100138b1() local_unnamed_addr {
dec_label_pc_100138b1:
  %v1_100138b3 = call i32 @function_100103fb(i32 9)
  ret i32 %v1_100138b3

; uselistorder directives
  uselistorder i32 9, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 0 }
}

define i32 @function_100138bd() local_unnamed_addr {
dec_label_pc_100138bd:
  call void @llvm.trap()
  unreachable
}

define i32 @function_100138cc(%_cpinfo* %arg1) local_unnamed_addr {
dec_label_pc_100138cc:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca %_cpinfo*, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100138cc = load i32, i32* @ebp, align 4
  store i32 %v0_100138cc, i32* %stack_var_-4, align 4
  %v4_100138cc = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100138cc, i32* @ebp, align 4
  %v15_100138cf = ptrtoint i32* %stack_var_-28 to i32
  %v0_100138d3 = load i32, i32* @esi, align 4
  %v0_100138d4 = load i32, i32* @edi, align 4
  store i32 %v0_100138d4, i32* %stack_var_-40, align 4
  store %_cpinfo* inttoptr (i32 25 to %_cpinfo*), %_cpinfo** %stack_var_-44, align 4
  %v2_100138d7 = call i32 @function_1001039a(i32 25)
  store i32 %v2_100138d7, i32* %eax.global-to-local, align 4
  %tmp28 = ptrtoint %_cpinfo* %arg1 to i32
  %v2_100138df = call i32 @function_10013a79(i32 %tmp28)
  store i32 %v2_100138df, i32* %eax.global-to-local, align 4
  store i32 %v2_100138df, i32* %ebx.global-to-local, align 4
  %v1_100138e7 = load i32, i32* @global_var_1001b790.230, align 16
  %v12_100138e7 = icmp eq i32 %v2_100138df, %v1_100138e7
  %v2_100138ed = load %_cpinfo*, %_cpinfo** %stack_var_-44, align 4
  %v3_100138ed = ptrtoint %_cpinfo* %v2_100138ed to i32
  store i32 %v3_100138ed, i32* %ecx.global-to-local, align 4
  %v5_100138ee = inttoptr i32 %v2_100138df to %_cpinfo*
  %v1_100138f1 = icmp eq i1 %v12_100138e7, false
  br i1 %v1_100138f1, label %dec_label_pc_100138fa, label %dec_label_pc_10013a6a

dec_label_pc_100138fa:                            ; preds = %dec_label_pc_100138cc
  %v1_100138fa = icmp eq i32 %v2_100138df, 0
  br i1 %v1_100138fa, label %dec_label_pc_10013a58, label %dec_label_pc_10013902

dec_label_pc_10013902:                            ; preds = %dec_label_pc_100138fa
  store i32 0, i32* @edx, align 4
  store i32 ptrtoint (i32* @global_var_1001acf0.231 to i32), i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10013909

dec_label_pc_10013909:                            ; preds = %dec_label_pc_1001390d, %dec_label_pc_10013902
  %v0_1001398f = phi i32 [ %v1_10013910, %dec_label_pc_1001390d ], [ 0, %dec_label_pc_10013902 ]
  %v0_1001390d = phi i32 [ %v1_1001390d, %dec_label_pc_1001390d ], [ ptrtoint (i32* @global_var_1001acf0.231 to i32), %dec_label_pc_10013902 ]
  %v1_10013909 = inttoptr i32 %v0_1001390d to i32*
  %v2_10013909 = load i32, i32* %v1_10013909, align 4
  %v14_10013909 = icmp eq i32 %v2_10013909, %v2_100138df
  br i1 %v14_10013909, label %dec_label_pc_10013981, label %dec_label_pc_1001390d

dec_label_pc_1001390d:                            ; preds = %dec_label_pc_10013909
  %v1_1001390d = add i32 %v0_1001390d, 48
  store i32 %v1_1001390d, i32* %eax.global-to-local, align 4
  %v1_10013910 = add nuw nsw i32 %v0_1001398f, 1
  store i32 %v1_10013910, i32* @edx, align 4
  %v5_10013916 = icmp slt i32 %v1_1001390d, 268545504
  br i1 %v5_10013916, label %dec_label_pc_10013909, label %dec_label_pc_10013918

dec_label_pc_10013918:                            ; preds = %dec_label_pc_1001390d
  store i32 %v15_100138cf, i32* %eax.global-to-local, align 4
  %tmp30 = bitcast i32* %stack_var_-28 to %_cpinfo*
  store %_cpinfo* %tmp30, %_cpinfo** %stack_var_-44, align 4
  %v7_1001391d = call i1 @GetCPInfo(i32 %v2_100138df, %_cpinfo* %tmp30)
  %v8_1001391d = sext i1 %v7_1001391d to i32
  store i32 %v8_1001391d, i32* %eax.global-to-local, align 4
  store %_cpinfo* inttoptr (i32 1 to %_cpinfo*), %_cpinfo** %stack_var_-44, align 4
  store i32 1, i32* @esi, align 4
  %v0_10013a4f = load i32, i32* @global_var_1001b5f4.239, align 4
  %v1_10013a4f = icmp eq i32 %v0_10013a4f, 0
  br i1 %v1_10013a4f, label %dec_label_pc_10013a6a, label %dec_label_pc_10013a58

dec_label_pc_10013981:                            ; preds = %dec_label_pc_10013909
  store %_cpinfo* inttoptr (i32 64 to %_cpinfo*), %_cpinfo** %stack_var_-44, align 4
  store i32 64, i32* %ecx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1001b8c0.233 to i32), i32* %edi.global-to-local, align 4
  %v3_1001398f = mul i32 %v0_1001398f, 3
  store i32 %v3_1001398f, i32* %esi.global-to-local, align 4
  %v7_10013992 = call i8* @_memset(i8* bitcast (i8** @global_var_1001b8c0.233 to i8*), i32 0, i32 64)
  %v8_10013992 = ptrtoint i8* %v7_10013992 to i32
  store i32 %v8_10013992, i32* %ecx.global-to-local, align 4
  %v2_10013994 = mul i32 %v0_1001398f, 48
  store i32 %v2_10013994, i32* %esi.global-to-local, align 4
  store i8 0, i8* bitcast (i8** @global_var_1001b8c0.233 to i8*), align 4
  %v8_10013997 = load i1, i1* @df, align 1
  %v9_10013997 = select i1 %v8_10013997, i32 -1, i32 1
  %v10_10013997 = add i32 %v9_10013997, ptrtoint (i8** @global_var_1001b8c0.233 to i32)
  store i32 %v10_10013997, i32* %edi.global-to-local, align 4
  %v1_10013998 = add i32 %v2_10013994, ptrtoint (i8** @global_var_1001ad00.234 to i32)
  store i32 %v1_10013998, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1001399e

dec_label_pc_1001399e:                            ; preds = %dec_label_pc_100139d1, %dec_label_pc_10013981
  %v0_100139a1 = phi i32 [ %v1_10013998, %dec_label_pc_10013981 ], [ %v1_100139d4, %dec_label_pc_100139d1 ]
  %stack_var_-8.0 = phi i32 [ 0, %dec_label_pc_10013981 ], [ %v4_100139d1, %dec_label_pc_100139d1 ]
  %v1_1001399e = inttoptr i32 %v0_100139a1 to i8*
  %v2_1001399e = load i8, i8* %v1_1001399e, align 1
  %v3_1001399e = icmp eq i8 %v2_1001399e, 0
  store i32 %v0_100139a1, i32* %ecx.global-to-local, align 4
  br i1 %v3_1001399e, label %dec_label_pc_100139d1, label %dec_label_pc_100139a5.preheader

dec_label_pc_100139a5.preheader:                  ; preds = %dec_label_pc_1001399e
  %v1_100139b9 = add nuw nsw i32 %stack_var_-8.0, ptrtoint (i8** @global_var_1001ace8.235 to i32)
  %v2_100139b9 = inttoptr i32 %v1_100139b9 to i8*
  %v6_100139b9 = and i32 %stack_var_-8.0, -256
  br label %dec_label_pc_100139a5

dec_label_pc_100139a5:                            ; preds = %dec_label_pc_100139a5.preheader, %dec_label_pc_100139ca
  %v0_100139ac = phi i32 [ %v0_100139a1, %dec_label_pc_100139a5.preheader ], [ %v1_100139cb, %dec_label_pc_100139ca ]
  %v1_100139a5 = add i32 %v0_100139ac, 1
  %v2_100139a5 = inttoptr i32 %v1_100139a5 to i8*
  %v3_100139a5 = load i8, i8* %v2_100139a5, align 1
  %v4_100139a5 = zext i8 %v3_100139a5 to i32
  %v5_100139a5 = load i32, i32* @edx, align 4
  %v6_100139a5 = and i32 %v5_100139a5, -256
  %v7_100139a5 = or i32 %v6_100139a5, %v4_100139a5
  store i32 %v7_100139a5, i32* @edx, align 4
  %v4_100139a8 = icmp eq i8 %v3_100139a5, 0
  br i1 %v4_100139a8, label %dec_label_pc_100139d1.loopexit, label %dec_label_pc_100139ac

dec_label_pc_100139ac:                            ; preds = %dec_label_pc_100139a5
  %v1_100139ac = inttoptr i32 %v0_100139ac to i8*
  %v2_100139ac = load i8, i8* %v1_100139ac, align 1
  %v3_100139ac = zext i8 %v2_100139ac to i32
  store i32 %v3_100139ac, i32* %eax.global-to-local, align 4
  store i32 %v4_100139a5, i32* %edi.global-to-local, align 4
  %v6_100139b4 = icmp ugt i8 %v2_100139ac, %v3_100139a5
  br i1 %v6_100139b4, label %dec_label_pc_100139ca, label %dec_label_pc_100139b6

dec_label_pc_100139b6:                            ; preds = %dec_label_pc_100139ac
  %v3_100139b9 = load i8, i8* %v2_100139b9, align 1
  %v4_100139b9 = zext i8 %v3_100139b9 to i32
  %v7_100139b9 = or i32 %v4_100139b9, %v6_100139b9
  store i32 %v7_100139b9, i32* @edx, align 4
  br label %dec_label_pc_100139bf

dec_label_pc_100139bf:                            ; preds = %dec_label_pc_100139bf.dec_label_pc_100139bf_crit_edge, %dec_label_pc_100139b6
  %v4_100139bf = phi i32 [ %v4_100139bf.pre, %dec_label_pc_100139bf.dec_label_pc_100139bf_crit_edge ], [ %v7_100139b9, %dec_label_pc_100139b6 ]
  %v12_100139bf = phi i32 [ %v1_100139c5, %dec_label_pc_100139bf.dec_label_pc_100139bf_crit_edge ], [ %v3_100139ac, %dec_label_pc_100139b6 ]
  %v1_100139bf = add i32 %v12_100139bf, ptrtoint (i8** @global_var_1001b8c1.199 to i32)
  %v2_100139bf = inttoptr i32 %v1_100139bf to i8*
  %v3_100139bf = load i8, i8* %v2_100139bf, align 1
  %v5_100139bf = trunc i32 %v4_100139bf to i8
  %v6_100139bf = or i8 %v3_100139bf, %v5_100139bf
  store i8 %v6_100139bf, i8* %v2_100139bf, align 1
  %v0_100139c5 = load i32, i32* %eax.global-to-local, align 4
  %v1_100139c5 = add i32 %v0_100139c5, 1
  store i32 %v1_100139c5, i32* %eax.global-to-local, align 4
  %v1_100139c6 = load i32, i32* %edi.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_100139c5, %v1_100139c6
  br i1 %tmp, label %dec_label_pc_100139ca.loopexit, label %dec_label_pc_100139bf.dec_label_pc_100139bf_crit_edge

dec_label_pc_100139bf.dec_label_pc_100139bf_crit_edge: ; preds = %dec_label_pc_100139bf
  %v4_100139bf.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_100139bf

dec_label_pc_100139ca.loopexit:                   ; preds = %dec_label_pc_100139bf
  %v0_100139ca.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_100139ca

dec_label_pc_100139ca:                            ; preds = %dec_label_pc_100139ca.loopexit, %dec_label_pc_100139ac
  %v0_100139ca = phi i32 [ %v0_100139ca.pre, %dec_label_pc_100139ca.loopexit ], [ %v0_100139ac, %dec_label_pc_100139ac ]
  %v1_100139cb = add i32 %v0_100139ca, 2
  store i32 %v1_100139cb, i32* %ecx.global-to-local, align 4
  %v1_100139cc = inttoptr i32 %v1_100139cb to i8*
  %v2_100139cc = load i8, i8* %v1_100139cc, align 1
  %v3_100139cc = icmp eq i8 %v2_100139cc, 0
  %v1_100139cf = icmp eq i1 %v3_100139cc, false
  br i1 %v1_100139cf, label %dec_label_pc_100139a5, label %dec_label_pc_100139d1.loopexit

dec_label_pc_100139d1.loopexit:                   ; preds = %dec_label_pc_100139a5, %dec_label_pc_100139ca
  %v0_100139d4.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_100139d1

dec_label_pc_100139d1:                            ; preds = %dec_label_pc_100139d1.loopexit, %dec_label_pc_1001399e
  %v0_100139d4 = phi i32 [ %v0_100139d4.pre, %dec_label_pc_100139d1.loopexit ], [ %v0_100139a1, %dec_label_pc_1001399e ]
  %v4_100139d1 = add nuw nsw i32 %stack_var_-8.0, 1
  %v1_100139d4 = add i32 %v0_100139d4, 8
  store i32 %v1_100139d4, i32* %ebx.global-to-local, align 4
  %exitcond = icmp eq i32 %v4_100139d1, 4
  br i1 %exitcond, label %dec_label_pc_100139dd, label %dec_label_pc_1001399e

dec_label_pc_100139dd:                            ; preds = %dec_label_pc_100139d1
  store i32 %v2_100138df, i32* %eax.global-to-local, align 4
  store i32 1, i32* @global_var_1001b7ac.236, align 4
  store %_cpinfo* %v5_100138ee, %_cpinfo** %stack_var_-44, align 4
  store i32 %v2_100138df, i32* @global_var_1001b790.230, align 16
  %v2_100139f0 = call i32 @function_10013ac3(i32 %v2_100138df)
  store i32 %v2_100139f0, i32* %eax.global-to-local, align 4
  %v0_100139f5 = load i32, i32* %esi.global-to-local, align 4
  %v1_100139f5 = add i32 %v0_100139f5, ptrtoint (i32* @global_var_1001acf4.237 to i32)
  store i32 %v1_100139f5, i32* %esi.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1001b7a0.238 to i32), i32* %edi.global-to-local, align 4
  %v1_10013a00 = inttoptr i32 %v1_100139f5 to i32*
  %v2_10013a00 = load i32, i32* %v1_10013a00, align 4
  store i32 %v2_10013a00, i32* @global_var_1001b7a0.238, align 4
  %v7_10013a00 = load i1, i1* @df, align 1
  %v8_10013a00 = select i1 %v7_10013a00, i32 -4, i32 4
  %v9_10013a00 = add i32 %v8_10013a00, ptrtoint (i32* @global_var_1001b7a0.238 to i32)
  %v10_10013a00 = add i32 %v8_10013a00, %v1_100139f5
  store i32 %v9_10013a00, i32* %edi.global-to-local, align 4
  store i32 %v10_10013a00, i32* %esi.global-to-local, align 4
  %v1_10013a01 = inttoptr i32 %v10_10013a00 to i32*
  %v2_10013a01 = load i32, i32* %v1_10013a01, align 4
  %v4_10013a01 = inttoptr i32 %v9_10013a00 to i32*
  store i32 %v2_10013a01, i32* %v4_10013a01, align 4
  %v5_10013a01 = load i32, i32* %edi.global-to-local, align 4
  %v6_10013a01 = load i32, i32* %esi.global-to-local, align 4
  %v9_10013a01 = add i32 %v5_10013a01, %v8_10013a00
  %v10_10013a01 = add i32 %v6_10013a01, %v8_10013a00
  store i32 %v9_10013a01, i32* %edi.global-to-local, align 4
  store i32 %v10_10013a01, i32* %esi.global-to-local, align 4
  %v2_10013a02 = load %_cpinfo*, %_cpinfo** %stack_var_-44, align 4
  %v3_10013a02 = ptrtoint %_cpinfo* %v2_10013a02 to i32
  store i32 %v3_10013a02, i32* @ecx, align 4
  store i32 %v2_100139f0, i32* @global_var_1001b9c4.232, align 4
  %v1_10013a08 = inttoptr i32 %v10_10013a01 to i32*
  %v2_10013a08 = load i32, i32* %v1_10013a08, align 4
  %v4_10013a08 = inttoptr i32 %v9_10013a01 to i32*
  store i32 %v2_10013a08, i32* %v4_10013a08, align 4
  %v5_10013a08 = load i32, i32* %edi.global-to-local, align 4
  %v6_10013a08 = load i32, i32* %esi.global-to-local, align 4
  %v9_10013a08 = add i32 %v5_10013a08, %v8_10013a00
  %v10_10013a08 = add i32 %v6_10013a08, %v8_10013a00
  store i32 %v9_10013a08, i32* %edi.global-to-local, align 4
  store i32 %v10_10013a08, i32* @esi, align 4
  br label %dec_label_pc_10013a5d

dec_label_pc_10013a58:                            ; preds = %dec_label_pc_10013918, %dec_label_pc_100138fa
  %v0_10013a58 = call i32 @function_10013af6()
  store i32 %v0_10013a58, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10013a5d

dec_label_pc_10013a5d:                            ; preds = %dec_label_pc_100139dd, %dec_label_pc_10013a58
  %v0_10013a5d = call i32 @function_10013b1f()
  store i32 %v0_10013a5d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10013a6a

dec_label_pc_10013a6a:                            ; preds = %dec_label_pc_10013918, %dec_label_pc_10013a5d, %dec_label_pc_100138cc
  %storemerge = phi i32 [ 0, %dec_label_pc_100138cc ], [ 0, %dec_label_pc_10013a5d ], [ -1, %dec_label_pc_10013918 ]
  store i32 %storemerge, i32* %esi.global-to-local, align 4
  store %_cpinfo* inttoptr (i32 25 to %_cpinfo*), %_cpinfo** %stack_var_-44, align 4
  %v2_10013a6c = call i32 @function_100103fb(i32 25)
  store i32 25, i32* %ecx.global-to-local, align 4
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_10013a74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_10013a74, i32* %edi.global-to-local, align 4
  store i32 %v0_100138d3, i32* %esi.global-to-local, align 4
  %v2_10013a77 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10013a77, i32* @ebp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_100139d4, { 1, 0 }
  uselistorder i32 %v1_100139cb, { 1, 2, 0 }
  uselistorder i32 %v1_100139c5, { 0, 2, 1 }
  uselistorder i32 %v4_100139a5, { 1, 0 }
  uselistorder i32 %stack_var_-8.0, { 2, 1, 0 }
  uselistorder i32 %v2_10013994, { 1, 0 }
  uselistorder i32 %v1_10013910, { 1, 0 }
  uselistorder i32 %v1_1001390d, { 1, 2, 0 }
  uselistorder i32 %v2_100138df, { 1, 2, 3, 6, 4, 5, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder %_cpinfo** %stack_var_-44, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %esi.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %eax.global-to-local, { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14 }
  uselistorder i32 48, { 0, 9, 2, 10, 1, 3, 4, 8, 5, 6, 7 }
  uselistorder i32* @ebp, { 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 26, 27, 210, 211, 212, 213, 214, 215, 216, 217, 104, 105, 106, 107, 108, 0, 1, 2, 3, 4, 34, 35, 230, 231, 232, 55, 56, 57, 58, 59, 60, 61, 207, 208, 209, 30, 31, 32, 33, 28, 29, 224, 225, 226, 227, 228, 229, 218, 219, 220, 221, 222, 223, 167, 168, 169, 170, 36, 5, 6, 7, 136, 137, 114, 118, 119, 109, 110, 111, 115, 116, 117, 37, 38, 39, 40, 41, 42, 75, 76, 77, 78, 79, 80, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 70, 71, 72, 81, 85, 86, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 49, 50, 8, 9, 10, 11, 87, 88, 89, 90, 91, 92, 12, 13, 14, 15, 16, 17, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 112, 113, 123, 124, 125, 120, 121, 122, 126, 127, 128, 129, 130, 131, 132, 158, 159, 160, 133, 134, 135, 18, 19, 150, 151, 161, 162, 163, 152, 153, 154, 155, 156, 157, 164, 165, 166, 20, 21, 171, 172, 82, 83, 84, 183, 184, 185, 173, 174, 175, 176, 177, 178, 22, 23, 24, 25, 179, 180, 181, 182, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195 }
  uselistorder label %dec_label_pc_10013a6a, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10013a5d, { 1, 0 }
  uselistorder label %dec_label_pc_100139d1.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_100139a5, { 1, 0 }
}

define i32 @function_10013a79(i32 %arg1) local_unnamed_addr {
dec_label_pc_10013a79:
  ret i32 %arg1
}

define i32 @function_10013ac3(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @function_10013af6() local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10013af6 = load i32, i32* @edi, align 4
  store i32 %v0_10013af6, i32* %stack_var_-4, align 4
  store i32 ptrtoint (i8** @global_var_1001b8c0.233 to i32), i32* %edi.global-to-local, align 4
  %v6_10013b01 = call i8* @_memset(i8* bitcast (i8** @global_var_1001b8c0.233 to i8*), i32 0, i32 64)
  %v7_10013b01 = ptrtoint i8* %v6_10013b01 to i32
  store i32 %v7_10013b01, i32* @ecx, align 4
  store i8 0, i8* bitcast (i8** @global_var_1001b8c0.233 to i8*), align 4
  %v8_10013b03 = load i1, i1* @df, align 1
  store i32 0, i32* @global_var_1001b790.230, align 16
  store i32 0, i32* @global_var_1001b7ac.236, align 4
  store i32 0, i32* @global_var_1001b9c4.232, align 4
  store i32 0, i32* @global_var_1001b7a0.238, align 4
  %v5_10013b1a = select i1 %v8_10013b03, i32 -4, i32 4
  %v6_10013b1a = add i32 %v5_10013b1a, ptrtoint (i32* @global_var_1001b7a0.238 to i32)
  store i32 %v6_10013b1a, i32* %edi.global-to-local, align 4
  %v2_10013b1b = inttoptr i32 %v6_10013b1a to i32*
  store i32 0, i32* %v2_10013b1b, align 4
  %v3_10013b1b = load i32, i32* %edi.global-to-local, align 4
  %v6_10013b1b = add i32 %v3_10013b1b, %v5_10013b1a
  %v2_10013b1c = inttoptr i32 %v6_10013b1b to i32*
  store i32 0, i32* %v2_10013b1c, align 4
  %v2_10013b1d = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10013b1d, i32* %edi.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 64, { 14, 11, 15, 16, 0, 33, 1, 2, 7, 8, 12, 13, 3, 4, 17, 18, 5, 19, 23, 20, 28, 21, 22, 26, 27, 29, 6, 30, 31, 32, 24, 25, 9, 10 }
  uselistorder i8* bitcast (i8** @global_var_1001b8c0.233 to i8*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i8** @global_var_1001b8c0.233 to i32), { 2, 0, 1 }
}

define i32 @function_10013b1f() local_unnamed_addr {
dec_label_pc_10013b1f:
  %eax.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-1308 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_10013b28 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_10013b28, i32* %eax.global-to-local, align 4
  %v0_10013b2b = load i32, i32* @esi, align 4
  store i32 %v0_10013b2b, i32* %stack_var_-1308, align 4
  %tmp36 = bitcast i32* %stack_var_-24 to %_cpinfo*
  %v0_10013b2d = load i32, i32* @global_var_1001b790.230, align 16
  %v6_10013b33 = call i1 @GetCPInfo(i32 %v0_10013b2d, %_cpinfo* %tmp36)
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 256, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10013c5f

dec_label_pc_10013c5f:                            ; preds = %dec_label_pc_10013c9c, %dec_label_pc_10013b1f
  %v4_10013c95 = phi i32 [ 0, %dec_label_pc_10013b1f ], [ %v1_10013c9c, %dec_label_pc_10013c9c ]
  %v5_10013c5f = icmp ult i32 %v4_10013c95, 65
  br i1 %v5_10013c5f, label %dec_label_pc_10013c7d, label %dec_label_pc_10013c64

dec_label_pc_10013c64:                            ; preds = %dec_label_pc_10013c5f
  %v6_10013c67 = icmp ugt i32 %v4_10013c95, 90
  br i1 %v6_10013c67, label %dec_label_pc_10013c7d, label %dec_label_pc_10013c69

dec_label_pc_10013c69:                            ; preds = %dec_label_pc_10013c64
  %v1_10013c69 = add i32 %v4_10013c95, ptrtoint (i8** @global_var_1001b8c1.199 to i32)
  %v2_10013c69 = inttoptr i32 %v1_10013c69 to i8*
  %v3_10013c69 = load i8, i8* %v2_10013c69, align 1
  %v4_10013c69 = or i8 %v3_10013c69, 16
  store i8 %v4_10013c69, i8* %v2_10013c69, align 1
  %v0_10013c70 = load i32, i32* %eax.global-to-local, align 4
  %v2_10013c70 = load i32, i32* @ecx, align 4
  %v3_10013c70 = and i32 %v2_10013c70, -256
  %v2_10013c72 = add i32 %v0_10013c70, 32
  %v12_10013c72 = and i32 %v2_10013c72, 255
  %v15_10013c72 = or i32 %v12_10013c72, %v3_10013c70
  br label %dec_label_pc_10013c75

dec_label_pc_10013c75:                            ; preds = %dec_label_pc_10013c87, %dec_label_pc_10013c69
  %v2_10013c75 = phi i32 [ %v0_10013c70, %dec_label_pc_10013c69 ], [ %v0_10013c8e, %dec_label_pc_10013c87 ]
  %storemerge2 = phi i32 [ %v15_10013c72, %dec_label_pc_10013c69 ], [ %v15_10013c90, %dec_label_pc_10013c87 ]
  store i32 %storemerge2, i32* @ecx, align 4
  %v1_10013c75 = trunc i32 %storemerge2 to i8
  %v3_10013c75 = add i32 %v2_10013c75, ptrtoint (i8** @global_var_1001b7c0.240 to i32)
  %v4_10013c75 = inttoptr i32 %v3_10013c75 to i8*
  store i8 %v1_10013c75, i8* %v4_10013c75, align 1
  br label %dec_label_pc_10013c9c

dec_label_pc_10013c7d:                            ; preds = %dec_label_pc_10013c64, %dec_label_pc_10013c5f
  %v5_10013c7d = icmp ult i32 %v4_10013c95, 97
  br i1 %v5_10013c7d, label %dec_label_pc_10013c95, label %dec_label_pc_10013c82

dec_label_pc_10013c82:                            ; preds = %dec_label_pc_10013c7d
  %v6_10013c85 = icmp ugt i32 %v4_10013c95, 122
  br i1 %v6_10013c85, label %dec_label_pc_10013c95, label %dec_label_pc_10013c87

dec_label_pc_10013c87:                            ; preds = %dec_label_pc_10013c82
  %v1_10013c87 = add i32 %v4_10013c95, ptrtoint (i8** @global_var_1001b8c1.199 to i32)
  %v2_10013c87 = inttoptr i32 %v1_10013c87 to i8*
  %v3_10013c87 = load i8, i8* %v2_10013c87, align 1
  %v4_10013c87 = or i8 %v3_10013c87, 32
  store i8 %v4_10013c87, i8* %v2_10013c87, align 1
  %v0_10013c8e = load i32, i32* %eax.global-to-local, align 4
  %v2_10013c8e = load i32, i32* @ecx, align 4
  %v3_10013c8e = and i32 %v2_10013c8e, -256
  %v2_10013c90 = add i32 %v0_10013c8e, 224
  %v12_10013c90 = and i32 %v2_10013c90, 255
  %v15_10013c90 = or i32 %v12_10013c90, %v3_10013c8e
  br label %dec_label_pc_10013c75

dec_label_pc_10013c95:                            ; preds = %dec_label_pc_10013c82, %dec_label_pc_10013c7d
  %v5_10013c95 = add i32 %v4_10013c95, ptrtoint (i8** @global_var_1001b7c0.240 to i32)
  %v6_10013c95 = inttoptr i32 %v5_10013c95 to i8*
  store i8 0, i8* %v6_10013c95, align 1
  br label %dec_label_pc_10013c9c

dec_label_pc_10013c9c:                            ; preds = %dec_label_pc_10013c75, %dec_label_pc_10013c95
  %v0_10013c9c = load i32, i32* %eax.global-to-local, align 4
  %v1_10013c9c = add i32 %v0_10013c9c, 1
  store i32 %v1_10013c9c, i32* %eax.global-to-local, align 4
  %v1_10013c9d = load i32, i32* %esi.global-to-local, align 4
  %v7_10013c9d = icmp ult i32 %v1_10013c9c, %v1_10013c9d
  br i1 %v7_10013c9d, label %dec_label_pc_10013c5f, label %dec_label_pc_10013ca1

dec_label_pc_10013ca1:                            ; preds = %dec_label_pc_10013c9c
  %v2_10013ca1 = load i32, i32* %stack_var_-1308, align 4
  store i32 %v2_10013ca1, i32* %esi.global-to-local, align 4
  ret i32 %v1_10013c9c

; uselistorder directives
  uselistorder i32 %v1_10013c9c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_10013c70, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1001b7c0.240 to i32), { 1, 0 }
  uselistorder i8 16, { 7, 5, 0, 1, 6, 3, 4, 2 }
  uselistorder i32 ptrtoint (i8** @global_var_1001b8c1.199 to i32), { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 90, { 1, 0 }
  uselistorder i32 65, { 14, 9, 0, 1, 2, 3, 4, 10, 11, 12, 13, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_10013c9c, { 1, 0 }
}

define i32 @function_10013ca4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10013ca4:
  %v0_10013ca4 = load i32, i32* @global_var_1001bae8.192, align 8
  %v1_10013ca4 = icmp eq i32 %v0_10013ca4, 0
  %v1_10013cab = icmp eq i1 %v1_10013ca4, false
  br i1 %v1_10013cab, label %dec_label_pc_10013cbf, label %dec_label_pc_10013cad

dec_label_pc_10013cad:                            ; preds = %dec_label_pc_10013ca4
  %v2_10013caf = call i32 @function_100138cc(%_cpinfo* inttoptr (i32 -3 to %_cpinfo*))
  store i32 1, i32* @global_var_1001bae8.192, align 8
  br label %dec_label_pc_10013cbf

dec_label_pc_10013cbf:                            ; preds = %dec_label_pc_10013ca4, %dec_label_pc_10013cad
  %.0 = phi i32 [ undef, %dec_label_pc_10013ca4 ], [ %v2_10013caf, %dec_label_pc_10013cad ]
  ret i32 %.0

; uselistorder directives
  uselistorder i32 undef, { 2, 1, 3, 0 }
  uselistorder i32 -3, { 26, 29, 23, 27, 28, 31, 24, 25, 0, 14, 15, 1, 16, 17, 3, 4, 5, 6, 7, 8, 11, 12, 9, 10, 13, 18, 2, 19, 20, 21, 22, 30 }
  uselistorder label %dec_label_pc_10013cbf, { 1, 0 }
}

define i32 @function_10013cc0(i32 %arg1, i32 %arg2, i32* %arg3) local_unnamed_addr {
dec_label_pc_10013cc0:
  %tmp3 = ptrtoint i32* %arg3 to i32
  %stack_var_0 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_10013cc0 = load i32, i32* @ebx, align 4
  store i32 0, i32* @ebx, align 4
  %v0_10013cc3 = load i32 (i32, i32, i32, i32)*, i32 (i32, i32, i32, i32)** @global_var_1001b5f8.2, align 4
  %v13_10013cc3 = icmp eq i32 (i32, i32, i32, i32)* %v0_10013cc3, null
  %v1_10013ccb = icmp eq i1 %v13_10013cc3, false
  br i1 %v1_10013ccb, label %dec_label_pc_10013d0f, label %dec_label_pc_10013ccd

dec_label_pc_10013ccd:                            ; preds = %dec_label_pc_10013cc0
  %v6_10013cd2 = call i32* @LoadLibraryA(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_10016690.241, i32 0, i32 0))
  %v7_10013cd2 = ptrtoint i32* %v6_10013cd2 to i32
  store i32 %v7_10013cd2, i32* @edi, align 4
  %v1_10013cda = load i32, i32* @ebx, align 4
  %v12_10013cda = icmp eq i32 %v7_10013cd2, %v1_10013cda
  br i1 %v12_10013cda, label %dec_label_pc_10013d45, label %dec_label_pc_10013cde

dec_label_pc_10013cde:                            ; preds = %dec_label_pc_10013ccd
  %v0_10013cde = load i32, i32* inttoptr (i32 268525576 to i32*), align 8
  store i32 %v0_10013cde, i32* @esi, align 4
  store i32 %v7_10013cd2, i32* %stack_var_-20, align 4
  %v7_10013cea = call i32 ()* @GetProcAddress(i32* %v6_10013cd2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_10016684.242, i32 0, i32 0))
  %v1_10013cec = icmp eq i32 ()* %v7_10013cea, null
  %v1_10013cee = bitcast i32 ()* %v7_10013cea to i32 (i32, i32, i32, i32)*
  store i32 (i32, i32, i32, i32)* %v1_10013cee, i32 (i32, i32, i32, i32)** @global_var_1001b5f8.2, align 8
  br i1 %v1_10013cec, label %dec_label_pc_10013d45, label %dec_label_pc_10013cf5

dec_label_pc_10013cf5:                            ; preds = %dec_label_pc_10013cde
  %v0_10013cfa = load i32, i32* @edi, align 4
  store i32 %v0_10013cfa, i32* %stack_var_-20, align 4
  %v5_10013cfb = inttoptr i32 %v0_10013cfa to i32*
  %v7_10013cfb = call i32 ()* @GetProcAddress(i32* %v5_10013cfb, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_10016674.243, i32 0, i32 0))
  %v8_10013cfb = ptrtoint i32 ()* %v7_10013cfb to i32
  %v0_10013d02 = load i32, i32* @edi, align 4
  store i32 %v0_10013d02, i32* %stack_var_-20, align 4
  store i32 %v8_10013cfb, i32* @global_var_1001b5fc.245, align 4
  %v5_10013d08 = inttoptr i32 %v0_10013d02 to i32*
  %v7_10013d08 = call i32 ()* @GetProcAddress(i32* %v5_10013d08, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_10016660.244, i32 0, i32 0))
  %v8_10013d08 = ptrtoint i32 ()* %v7_10013d08 to i32
  store i32 %v8_10013d08, i32* @global_var_1001b600.246, align 512
  br label %dec_label_pc_10013d0f

dec_label_pc_10013d0f:                            ; preds = %dec_label_pc_10013cc0, %dec_label_pc_10013cf5
  %v0_10013d0f = load i32, i32* @global_var_1001b5fc.245, align 4
  store i32 %v0_10013d0f, i32* @eax, align 4
  store i1 false, i1* @cf, align 1
  store i1 false, i1* @of, align 1
  %v1_10013d14 = icmp eq i32 %v0_10013d0f, 0
  store i1 %v1_10013d14, i1* @zf, align 1
  %v2_10013d14 = icmp slt i32 %v0_10013d0f, 0
  store i1 %v2_10013d14, i1* @sf, align 1
  br i1 %v1_10013d14, label %dec_label_pc_10013d0f.dec_label_pc_10013d2e_crit_edge, label %dec_label_pc_10013d18

dec_label_pc_10013d0f.dec_label_pc_10013d2e_crit_edge: ; preds = %dec_label_pc_10013d0f
  %v0_10013d3a.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_10013d2e

dec_label_pc_10013d18:                            ; preds = %dec_label_pc_10013d0f
  %v0_10013d18 = load i32, i32* %stack_var_-20, align 4
  %v1_10013d18 = call i32 @unknown_0(i32 %v0_10013d18)
  store i32 %v1_10013d18, i32* @eax, align 4
  store i32 %v1_10013d18, i32* @ebx, align 4
  store i1 false, i1* @cf, align 1
  store i1 false, i1* @of, align 1
  %v1_10013d1c = icmp eq i32 %v1_10013d18, 0
  store i1 %v1_10013d1c, i1* @zf, align 1
  %v2_10013d1c = icmp slt i32 %v1_10013d18, 0
  store i1 %v2_10013d1c, i1* @sf, align 1
  br i1 %v1_10013d1c, label %dec_label_pc_10013d2e, label %dec_label_pc_10013d20

dec_label_pc_10013d20:                            ; preds = %dec_label_pc_10013d18
  %v0_10013d20 = load i32, i32* @global_var_1001b600.246, align 512
  store i32 %v0_10013d20, i32* @eax, align 4
  store i1 false, i1* @cf, align 1
  store i1 false, i1* @of, align 1
  %v1_10013d25 = icmp eq i32 %v0_10013d20, 0
  store i1 %v1_10013d25, i1* @zf, align 1
  %v2_10013d25 = icmp slt i32 %v0_10013d20, 0
  store i1 %v2_10013d25, i1* @sf, align 1
  br i1 %v1_10013d25, label %dec_label_pc_10013d2e, label %dec_label_pc_10013d29

dec_label_pc_10013d29:                            ; preds = %dec_label_pc_10013d20
  %v2_10013d2a = call i32 @unknown_0(i32 %v1_10013d18)
  store i32 %v2_10013d2a, i32* @eax, align 4
  store i32 %v2_10013d2a, i32* @ebx, align 4
  br label %dec_label_pc_10013d2e

dec_label_pc_10013d2e:                            ; preds = %dec_label_pc_10013d0f.dec_label_pc_10013d2e_crit_edge, %dec_label_pc_10013d20, %dec_label_pc_10013d18, %dec_label_pc_10013d29
  %v0_10013d3a = phi i32 [ %v0_10013d3a.pre, %dec_label_pc_10013d0f.dec_label_pc_10013d2e_crit_edge ], [ %v1_10013d18, %dec_label_pc_10013d20 ], [ 0, %dec_label_pc_10013d18 ], [ %v2_10013d2a, %dec_label_pc_10013d29 ]
  store i32 %tmp3, i32* %stack_var_-20, align 4
  %v3_10013d36 = load i32, i32* %stack_var_0, align 4
  %v5_10013d3b = call i32 bitcast (i32 (i32, i32, i32, i32)** @global_var_1001b5f8.2 to i32 (i32, i32, i32, i32)*)(i32 %v0_10013d3a, i32 %v3_10013d36, i32 %arg2, i32 %tmp3)
  br label %dec_label_pc_10013d41

dec_label_pc_10013d41:                            ; preds = %dec_label_pc_10013d45, %dec_label_pc_10013d2e
  %storemerge = phi i32 [ %v5_10013d3b, %dec_label_pc_10013d2e ], [ 0, %dec_label_pc_10013d45 ]
  store i32 %v0_10013cc0, i32* @ebx, align 4
  ret i32 %storemerge

dec_label_pc_10013d45:                            ; preds = %dec_label_pc_10013cde, %dec_label_pc_10013ccd
  br label %dec_label_pc_10013d41

; uselistorder directives
  uselistorder i32 %v7_10013cd2, { 1, 0, 2 }
  uselistorder i32* %stack_var_-20, { 1, 0, 2, 3, 4 }
  uselistorder i32* %stack_var_0, { 1, 0 }
  uselistorder i32 (i32)* @unknown_0, { 1, 0, 5, 4, 2, 3 }
  uselistorder i1* @sf, { 1, 2, 3, 0 }
  uselistorder i1* @zf, { 5, 6, 7, 0, 1, 3, 8, 2, 4 }
  uselistorder i1* @of, { 1, 2, 3, 0 }
  uselistorder i1* @cf, { 1, 2, 3, 0 }
  uselistorder i32 ()* (i32*, i8*)* @GetProcAddress, { 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)** @global_var_1001b5f8.2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10013d2e, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_10013d0f, { 1, 0 }
}

define i32 @function_10013d49(i32 %arg1, i32 %arg2, i8 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_10013d49:
  call void @llvm.trap()
  unreachable
}

define i32 @function_10013f6d(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10013f6d:
  %v4_10013f71 = ptrtoint i8* %arg1 to i32
  %v1_10013f75 = icmp eq i32 %arg2, 0
  br i1 %v1_10013f75, label %dec_label_pc_10013f8a, label %dec_label_pc_10013f7d

dec_label_pc_10013f7d:                            ; preds = %dec_label_pc_10013f6d, %dec_label_pc_10013f82
  %v0_10013f83.in = phi i32 [ %v0_10013f83, %dec_label_pc_10013f82 ], [ %arg2, %dec_label_pc_10013f6d ]
  %v0_10013f82 = phi i32 [ %v1_10013f82, %dec_label_pc_10013f82 ], [ %v4_10013f71, %dec_label_pc_10013f6d ]
  %v0_10013f83 = add i32 %v0_10013f83.in, -1
  %v1_10013f7d = inttoptr i32 %v0_10013f82 to i8*
  %v2_10013f7d = load i8, i8* %v1_10013f7d, align 1
  %v3_10013f7d = icmp eq i8 %v2_10013f7d, 0
  br i1 %v3_10013f7d, label %dec_label_pc_10013f8a, label %dec_label_pc_10013f82

dec_label_pc_10013f82:                            ; preds = %dec_label_pc_10013f7d
  %v1_10013f82 = add i32 %v0_10013f82, 1
  %v1_10013f86 = icmp eq i32 %v0_10013f83, 0
  %v1_10013f88 = icmp eq i1 %v1_10013f86, false
  br i1 %v1_10013f88, label %dec_label_pc_10013f7d, label %dec_label_pc_10013f8a

dec_label_pc_10013f8a:                            ; preds = %dec_label_pc_10013f82, %dec_label_pc_10013f7d, %dec_label_pc_10013f6d
  %v0_10013f90 = phi i32 [ %v4_10013f71, %dec_label_pc_10013f6d ], [ %v1_10013f82, %dec_label_pc_10013f82 ], [ %v0_10013f82, %dec_label_pc_10013f7d ]
  %v1_10013f8a = inttoptr i32 %v0_10013f90 to i8*
  %v2_10013f8a = load i8, i8* %v1_10013f8a, align 1
  %v3_10013f8a = icmp eq i8 %v2_10013f8a, 0
  %v1_10013f8e = icmp eq i1 %v3_10013f8a, false
  br i1 %v1_10013f8e, label %dec_label_pc_10013f95, label %dec_label_pc_10013f90

dec_label_pc_10013f90:                            ; preds = %dec_label_pc_10013f8a
  %v6_10013f90 = sub i32 %v0_10013f90, %v4_10013f71
  ret i32 %v6_10013f90

dec_label_pc_10013f95:                            ; preds = %dec_label_pc_10013f8a
  ret i32 %arg2

; uselistorder directives
  uselistorder i32 %v4_10013f71, { 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10013f7d, { 1, 0 }
}

define i32 @function_10013f98(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10013f98:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_1()
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_10013fa3 = add i32 %arg2, %arg1
  %v7_10013fa6 = icmp ult i32 %v2_10013fa3, %arg1
  br i1 %v7_10013fa6, label %dec_label_pc_10013fae, label %dec_label_pc_10013faa

dec_label_pc_10013faa:                            ; preds = %dec_label_pc_10013f98
  %v7_10013faa = icmp ult i32 %v2_10013fa3, %arg2
  %v1_10013fac = icmp eq i1 %v7_10013faa, false
  br i1 %v1_10013fac, label %dec_label_pc_10013fb1, label %dec_label_pc_10013fae

dec_label_pc_10013fae:                            ; preds = %dec_label_pc_10013faa, %dec_label_pc_10013f98
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10013fb1

dec_label_pc_10013fb1:                            ; preds = %dec_label_pc_10013faa, %dec_label_pc_10013fae
  store i32 %tmp, i32* @edx, align 4
  %v2_10013fb6 = inttoptr i32 %tmp to i32*
  store i32 %v2_10013fa3, i32* %v2_10013fb6, align 4
  %v0_10013fb8 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10013fb8

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_10013fb1, { 1, 0 }
}

declare i32 @___add_12(i32, i32) local_unnamed_addr

define i32 @function_10014017(i32* %arg1) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp1 = ptrtoint i32* %arg1 to i32
  %stack_var_-8 = alloca i32, align 4
  %v0_1001401c = load i32, i32* @edi, align 4
  store i32 %v0_1001401c, i32* %stack_var_-8, align 4
  %v2_1001401d = load i32, i32* %arg1, align 4
  %v1_1001401f = add i32 %tmp1, 4
  %v2_1001401f = inttoptr i32 %v1_1001401f to i32*
  %v3_1001401f = load i32, i32* %v2_1001401f, align 4
  store i32 %v2_1001401d, i32* %ecx.global-to-local, align 4
  %v2_10014024 = mul i32 %v2_1001401d, 2
  store i32 %v2_10014024, i32* %arg1, align 4
  %v2_10014028 = mul i32 %v3_1001401f, 2
  %v2_1001402b = lshr i32 %v2_1001401d, 31
  store i32 %v2_1001402b, i32* %ecx.global-to-local, align 4
  %v2_1001402e = or i32 %v2_1001402b, %v2_10014028
  %v1_10014030 = add i32 %tmp1, 8
  %v2_10014030 = inttoptr i32 %v1_10014030 to i32*
  %v3_10014030 = load i32, i32* %v2_10014030, align 4
  store i32 %v3_10014030, i32* %ecx.global-to-local, align 4
  store i32 %v3_1001401f, i32* %edx.global-to-local, align 4
  store i32 %v2_1001402e, i32* %v2_1001401f, align 4
  %v0_10014038 = load i32, i32* %edx.global-to-local, align 4
  %v2_10014038 = lshr i32 %v0_10014038, 31
  store i32 %v2_10014038, i32* @edx, align 4
  %v0_1001403b = load i32, i32* %ecx.global-to-local, align 4
  %v2_1001403b = mul i32 %v0_1001403b, 2
  %v2_1001403d = or i32 %v2_1001403b, %v2_10014038
  store i32 %v2_1001403d, i32* %ecx.global-to-local, align 4
  %v2_1001403f = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1001403f, i32* @edi, align 4
  store i32 %v2_1001403d, i32* %v2_10014030, align 4
  ret i32 %tmp1

; uselistorder directives
  uselistorder i32 %tmp1, { 2, 0, 1 }
}

define i32 @function_10014045(i32* %arg1) local_unnamed_addr {
dec_label_pc_10014045:
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp1 = ptrtoint i32* %arg1 to i32
  %stack_var_-8 = alloca i32, align 4
  %v0_1001404a = load i32, i32* @edi, align 4
  store i32 %v0_1001404a, i32* %stack_var_-8, align 4
  %v1_1001404b = add i32 %tmp1, 8
  %v2_1001404b = inttoptr i32 %v1_1001404b to i32*
  %v3_1001404b = load i32, i32* %v2_1001404b, align 4
  store i32 %v3_1001404b, i32* %edx.global-to-local, align 4
  %v1_1001404e = add i32 %tmp1, 4
  %v2_1001404e = inttoptr i32 %v1_1001404e to i32*
  %v3_1001404e = load i32, i32* %v2_1001404e, align 4
  store i32 %v3_1001404e, i32* %edi.global-to-local, align 4
  %v2_10014055 = shl i32 %v3_1001404b, 31
  %v2_10014058 = udiv i32 %v3_1001404e, 2
  %v2_1001405a = or i32 %v2_10014058, %v2_10014055
  store i32 %v2_1001405a, i32* %ecx.global-to-local, align 4
  store i32 %v2_1001405a, i32* %v2_1001404e, align 4
  %v2_1001405f = load i32, i32* %arg1, align 4
  %v0_10014061 = load i32, i32* %edi.global-to-local, align 4
  %v2_10014061 = shl i32 %v0_10014061, 31
  %v2_10014064 = udiv i32 %v2_1001405f, 2
  %v0_10014066 = load i32, i32* %edx.global-to-local, align 4
  %v2_10014066 = udiv i32 %v0_10014066, 2
  store i32 %v2_10014066, i32* @edx, align 4
  %v2_10014068 = or i32 %v2_10014061, %v2_10014064
  store i32 %v2_10014068, i32* %ecx.global-to-local, align 4
  %v2_1001406a = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1001406a, i32* @edi, align 4
  store i32 %v2_10014066, i32* %v2_1001404b, align 4
  %v0_1001406e = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_1001406e, i32* %arg1, align 4
  ret i32 %tmp1

; uselistorder directives
  uselistorder i32 %v2_10014066, { 1, 0 }
  uselistorder i32 %tmp1, { 2, 0, 1 }
  uselistorder i32 31, { 41, 42, 48, 49, 43, 7, 4, 5, 6, 8, 9, 10, 37, 11, 12, 1, 40, 13, 3, 38, 14, 2, 39, 69, 0, 19, 20, 21, 22, 23, 15, 24, 25, 16, 26, 27, 28, 29, 30, 31, 32, 33, 34, 17, 35, 36, 18, 51, 44, 45, 46, 47, 50, 52, 60, 61, 62, 63, 64, 65, 66, 67, 68, 53, 54, 55, 56, 57, 58, 59 }
}

define i32 @function_10014072(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10014072:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v12_10014075 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v12_10014081 = icmp eq i32 %arg2, 0
  %v0_10014083 = load i32, i32* @esi, align 4
  store i32 %v0_10014083, i32* %stack_var_-28, align 4
  %v2_1001408b = inttoptr i32 %arg3 to i32*
  store i32 0, i32* %v2_1001408b, align 4
  %v0_1001408d = load i32, i32* %edx.global-to-local, align 4
  %v1_1001408d = load i32, i32* %ebx.global-to-local, align 4
  %v2_1001408d = add i32 %v1_1001408d, 4
  %v3_1001408d = inttoptr i32 %v2_1001408d to i32*
  store i32 %v0_1001408d, i32* %v3_1001408d, align 4
  %v0_10014090 = load i32, i32* %edx.global-to-local, align 4
  %v1_10014090 = load i32, i32* %ebx.global-to-local, align 4
  %v2_10014090 = add i32 %v1_10014090, 8
  %v3_10014090 = inttoptr i32 %v2_10014090 to i32*
  store i32 %v0_10014090, i32* %v3_10014090, align 4
  br i1 %v12_10014081, label %dec_label_pc_10014072.dec_label_pc_100140e6.preheader_crit_edge, label %dec_label_pc_10014095

dec_label_pc_10014072.dec_label_pc_100140e6.preheader_crit_edge: ; preds = %dec_label_pc_10014072
  %v4_100140e643.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_100140e6.preheader

dec_label_pc_10014095:                            ; preds = %dec_label_pc_10014072
  %v0_10014095 = load i32, i32* @edi, align 4
  store i32 %v0_10014095, i32* %stack_var_-32, align 4
  %v0_10014096 = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10014099

dec_label_pc_10014099:                            ; preds = %dec_label_pc_10014099, %dec_label_pc_10014095
  %stack_var_4.0 = phi i8* [ %arg1, %dec_label_pc_10014095 ], [ %v22_100140db, %dec_label_pc_10014099 ]
  %stack_var_12.0 = phi i32 [ %v0_10014096, %dec_label_pc_10014095 ], [ %v4_100140de, %dec_label_pc_10014099 ]
  %v0_10014099 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_10014099, i32* %esi.global-to-local, align 4
  store i32 %v12_10014075, i32* %edi.global-to-local, align 4
  %v1_1001409e = inttoptr i32 %v0_10014099 to i32*
  %v2_1001409e = load i32, i32* %v1_1001409e, align 4
  store i32 %v2_1001409e, i32* %stack_var_-20, align 4
  %v7_1001409e = load i1, i1* @df, align 1
  %v8_1001409e = select i1 %v7_1001409e, i32 -4, i32 4
  %v9_1001409e = add i32 %v8_1001409e, %v12_10014075
  %v10_1001409e = add i32 %v8_1001409e, %v0_10014099
  store i32 %v9_1001409e, i32* %edi.global-to-local, align 4
  store i32 %v10_1001409e, i32* %esi.global-to-local, align 4
  %v1_1001409f = inttoptr i32 %v10_1001409e to i32*
  %v2_1001409f = load i32, i32* %v1_1001409f, align 4
  %v4_1001409f = inttoptr i32 %v9_1001409e to i32*
  store i32 %v2_1001409f, i32* %v4_1001409f, align 4
  %v5_1001409f = load i32, i32* %edi.global-to-local, align 4
  %v6_1001409f = load i32, i32* %esi.global-to-local, align 4
  %v9_1001409f = add i32 %v5_1001409f, %v8_1001409e
  %v10_1001409f = add i32 %v6_1001409f, %v8_1001409e
  store i32 %v9_1001409f, i32* %edi.global-to-local, align 4
  store i32 %v10_1001409f, i32* %esi.global-to-local, align 4
  %v0_100140a0 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_100140a0, i32* %stack_var_-36, align 4
  %v1_100140a1 = inttoptr i32 %v10_1001409f to i32*
  %v2_100140a1 = load i32, i32* %v1_100140a1, align 4
  %v4_100140a1 = inttoptr i32 %v9_1001409f to i32*
  store i32 %v2_100140a1, i32* %v4_100140a1, align 4
  %v5_100140a1 = load i32, i32* %edi.global-to-local, align 4
  %v9_100140a1 = add i32 %v5_100140a1, %v8_1001409e
  store i32 %v9_100140a1, i32* @edi, align 4
  %v0_100140a2 = load i32, i32* %stack_var_-36, align 4
  %v1_100140a2 = inttoptr i32 %v0_100140a2 to i32*
  %v2_100140a2 = call i32 @function_10014017(i32* %v1_100140a2)
  store i32 %v2_100140a2, i32* %eax.global-to-local, align 4
  %v0_100140a7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100140a8 = inttoptr i32 %v0_100140a7 to i32*
  %v2_100140a8 = call i32 @function_10014017(i32* %v1_100140a8)
  store i32 %v12_10014075, i32* %eax.global-to-local, align 4
  %v2_100140b2 = call i32 @___add_12(i32 %v0_100140a7, i32 %v12_10014075)
  store i32 %v2_100140b2, i32* %eax.global-to-local, align 4
  %v1_100140b8 = inttoptr i32 %v0_100140a7 to i32*
  %v2_100140b8 = call i32 @function_10014017(i32* %v1_100140b8)
  %v4_100140bd = ptrtoint i8* %stack_var_4.0 to i32
  store i32 %v4_100140bd, i32* %eax.global-to-local, align 4
  %v2_100140c8 = load i8, i8* %stack_var_4.0, align 1
  %v3_100140c8 = sext i8 %v2_100140c8 to i32
  store i32 %v3_100140c8, i32* %stack_var_-20, align 4
  store i32 %v12_10014075, i32* %eax.global-to-local, align 4
  %v0_100140d2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_100140d3 = call i32 @___add_12(i32 %v0_100140d2, i32 %v12_10014075)
  store i32 %v2_100140d3, i32* %eax.global-to-local, align 4
  %v5_100140db = add i32 %v4_100140bd, 1
  %v22_100140db = inttoptr i32 %v5_100140db to i8*
  %v4_100140de = add i32 %stack_var_12.0, -1
  %v11_100140de = icmp eq i32 %v4_100140de, 0
  %v1_100140e1 = icmp eq i1 %v11_100140de, false
  br i1 %v1_100140e1, label %dec_label_pc_10014099, label %dec_label_pc_100140e3

dec_label_pc_100140e3:                            ; preds = %dec_label_pc_10014099
  store i32 0, i32* %edx.global-to-local, align 4
  %v2_100140e5 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_100140e5, i32* @edi, align 4
  br label %dec_label_pc_100140e6.preheader

dec_label_pc_100140e6.preheader:                  ; preds = %dec_label_pc_10014072.dec_label_pc_100140e6.preheader_crit_edge, %dec_label_pc_100140e3
  %v4_100140e643 = phi i32 [ %v4_100140e643.pre, %dec_label_pc_10014072.dec_label_pc_100140e6.preheader_crit_edge ], [ 0, %dec_label_pc_100140e3 ]
  %v0_100140e639 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100140e640 = add i32 %v0_100140e639, 8
  %v2_100140e641 = inttoptr i32 %v1_100140e640 to i32*
  %v3_100140e642 = load i32, i32* %v2_100140e641, align 4
  %v15_100140e644 = icmp eq i32 %v3_100140e642, %v4_100140e643
  %v1_100140e945 = icmp eq i1 %v15_100140e644, false
  br i1 %v1_100140e945, label %dec_label_pc_10014113, label %dec_label_pc_100140eb

dec_label_pc_100140eb:                            ; preds = %dec_label_pc_100140e6.preheader, %dec_label_pc_100140eb
  %v2_100140e648 = phi i32* [ %v2_100140e6, %dec_label_pc_100140eb ], [ %v2_100140e641, %dec_label_pc_100140e6.preheader ]
  %v0_100140e647 = phi i32 [ %v0_100140e6, %dec_label_pc_100140eb ], [ %v0_100140e639, %dec_label_pc_100140e6.preheader ]
  %stack_var_-8.046 = phi i16 [ %v5_10014105, %dec_label_pc_100140eb ], [ 16462, %dec_label_pc_100140e6.preheader ]
  %v1_100140eb = add i32 %v0_100140e647, 4
  %v2_100140eb = inttoptr i32 %v1_100140eb to i32*
  %v3_100140eb = load i32, i32* %v2_100140eb, align 4
  store i32 %v3_100140eb, i32* %ecx.global-to-local, align 4
  %v2_100140f0 = udiv i32 %v3_100140eb, 65536
  store i32 %v2_100140f0, i32* %eax.global-to-local, align 4
  store i32 %v2_100140f0, i32* %v2_100140e648, align 4
  %v0_100140f6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100140f6 = inttoptr i32 %v0_100140f6 to i32*
  %v2_100140f6 = load i32, i32* %v1_100140f6, align 4
  %v2_100140fa = udiv i32 %v2_100140f6, 65536
  %v0_100140fd = load i32, i32* %ecx.global-to-local, align 4
  %v2_100140fd = mul i32 %v0_100140fd, 65536
  store i32 %v2_100140fd, i32* %ecx.global-to-local, align 4
  %v2_10014100 = or i32 %v2_100140fd, %v2_100140fa
  store i32 %v2_10014100, i32* %esi.global-to-local, align 4
  %v2_10014102 = mul i32 %v2_100140f6, 65536
  store i32 %v2_10014102, i32* %eax.global-to-local, align 4
  %v5_10014105 = add i16 %stack_var_-8.046, -16
  %v2_1001410c = add i32 %v0_100140f6, 4
  %v3_1001410c = inttoptr i32 %v2_1001410c to i32*
  store i32 %v2_10014100, i32* %v3_1001410c, align 4
  %v0_1001410f = load i32, i32* %eax.global-to-local, align 4
  %v1_1001410f = load i32, i32* %ebx.global-to-local, align 4
  %v2_1001410f = inttoptr i32 %v1_1001410f to i32*
  store i32 %v0_1001410f, i32* %v2_1001410f, align 4
  %v0_100140e6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100140e6 = add i32 %v0_100140e6, 8
  %v2_100140e6 = inttoptr i32 %v1_100140e6 to i32*
  %v3_100140e6 = load i32, i32* %v2_100140e6, align 4
  %v4_100140e6 = load i32, i32* %edx.global-to-local, align 4
  %v15_100140e6 = icmp eq i32 %v3_100140e6, %v4_100140e6
  %v1_100140e9 = icmp eq i1 %v15_100140e6, false
  br i1 %v1_100140e9, label %dec_label_pc_10014113, label %dec_label_pc_100140eb

dec_label_pc_10014113:                            ; preds = %dec_label_pc_100140eb, %dec_label_pc_100140e6.preheader
  %stack_var_-8.0.lcssa = phi i16 [ 16462, %dec_label_pc_100140e6.preheader ], [ %v5_10014105, %dec_label_pc_100140eb ]
  %v0_100140e6.lcssa = phi i32 [ %v0_100140e639, %dec_label_pc_100140e6.preheader ], [ %v0_100140e6, %dec_label_pc_100140eb ]
  %v2_100140e6.lcssa = phi i32* [ %v2_100140e641, %dec_label_pc_100140e6.preheader ], [ %v2_100140e6, %dec_label_pc_100140eb ]
  store i32 32768, i32* @esi, align 4
  %v3_100141188 = load i32, i32* %v2_100140e6.lcssa, align 4
  %tmp38 = trunc i32 %v3_100141188 to i16
  %v6_1001411811 = icmp sgt i16 %tmp38, -1
  %v1_1001411b13 = icmp eq i1 %v6_1001411811, false
  br i1 %v1_1001411b13, label %dec_label_pc_10014113.dec_label_pc_1001412d_crit_edge, label %dec_label_pc_1001411d.lr.ph

dec_label_pc_10014113.dec_label_pc_1001412d_crit_edge: ; preds = %dec_label_pc_10014113
  %v6_1001412d.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1001412d

dec_label_pc_1001411d.lr.ph:                      ; preds = %dec_label_pc_10014113
  br label %dec_label_pc_1001411d

dec_label_pc_1001411d:                            ; preds = %dec_label_pc_1001411d.lr.ph, %dec_label_pc_1001411d
  %v0_1001411d = phi i32 [ %v0_100140e6.lcssa, %dec_label_pc_1001411d.lr.ph ], [ %v0_10014118, %dec_label_pc_1001411d ]
  %stack_var_-8.114 = phi i16 [ %stack_var_-8.0.lcssa, %dec_label_pc_1001411d.lr.ph ], [ %v5_10014123, %dec_label_pc_1001411d ]
  store i32 %v0_1001411d, i32* %stack_var_-32, align 4
  %v1_1001411e = inttoptr i32 %v0_1001411d to i32*
  %v2_1001411e = call i32 @function_10014017(i32* %v1_1001411e)
  store i32 %v2_1001411e, i32* %eax.global-to-local, align 4
  %v5_10014123 = add i16 %stack_var_-8.114, -1
  store i32 %v0_1001411d, i32* %ecx.global-to-local, align 4
  %v0_10014118 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10014118 = add i32 %v0_10014118, 8
  %v2_10014118 = inttoptr i32 %v1_10014118 to i32*
  %v3_10014118 = load i32, i32* %v2_10014118, align 4
  %v4_10014118 = load i32, i32* @esi, align 4
  %v5_10014118 = and i32 %v4_10014118, %v3_10014118
  %v6_10014118 = icmp eq i32 %v5_10014118, 0
  %v1_1001411b = icmp eq i1 %v6_10014118, false
  br i1 %v1_1001411b, label %dec_label_pc_1001412d, label %dec_label_pc_1001411d

dec_label_pc_1001412d:                            ; preds = %dec_label_pc_1001411d, %dec_label_pc_10014113.dec_label_pc_1001412d_crit_edge
  %v3_10014132 = phi i32 [ %v0_100140e6.lcssa, %dec_label_pc_10014113.dec_label_pc_1001412d_crit_edge ], [ %v0_10014118, %dec_label_pc_1001411d ]
  %v6_1001412d = phi i32 [ %v6_1001412d.pre, %dec_label_pc_10014113.dec_label_pc_1001412d_crit_edge ], [ %v2_1001411e, %dec_label_pc_1001411d ]
  %stack_var_-8.1.lcssa = phi i16 [ %stack_var_-8.0.lcssa, %dec_label_pc_10014113.dec_label_pc_1001412d_crit_edge ], [ %v5_10014123, %dec_label_pc_1001411d ]
  %v4_1001412d = sext i16 %stack_var_-8.1.lcssa to i32
  %v7_1001412d = and i32 %v6_1001412d, -65536
  %v8_1001412d = or i32 %v4_1001412d, %v7_1001412d
  store i32 %v8_1001412d, i32* %eax.global-to-local, align 4
  %v2_10014131 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10014131, i32* %esi.global-to-local, align 4
  %v4_10014132 = add i32 %v3_10014132, 10
  %v5_10014132 = inttoptr i32 %v4_10014132 to i16*
  store i16 %stack_var_-8.1.lcssa, i16* %v5_10014132, align 2
  ret i32 %v4_1001412d

; uselistorder directives
  uselistorder i32 %v4_1001412d, { 1, 0 }
  uselistorder i32 %v0_10014118, { 0, 2, 1 }
  uselistorder i32 %v0_1001411d, { 0, 2, 1 }
  uselistorder i32 %v0_100140e6.lcssa, { 1, 0 }
  uselistorder i16 %stack_var_-8.0.lcssa, { 1, 0 }
  uselistorder i32* %v2_100140e6, { 0, 2, 1 }
  uselistorder i32 %v0_100140e6, { 0, 2, 1 }
  uselistorder i32 %v2_100140fd, { 1, 0 }
  uselistorder i32 %v2_100140f0, { 1, 0 }
  uselistorder i32 %v4_100140de, { 1, 0 }
  uselistorder i32 %v12_10014075, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32* %edx.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %ebx.global-to-local, { 2, 3, 0, 1, 10, 4, 5, 6, 7, 8, 9, 11 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 12, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13 }
  uselistorder label %dec_label_pc_1001411d, { 1, 0 }
  uselistorder label %dec_label_pc_100140eb, { 1, 0 }
  uselistorder label %dec_label_pc_100140e6.preheader, { 1, 0 }
}

define i32 @function_10014139(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_10014139:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v0_1001413f = load i32, i32* @ebx, align 4
  %v0_10014141 = load i32, i32* @edi, align 4
  store i32 %v0_10014141, i32* %stack_var_-108, align 4
  store i32 %arg3, i32* %edi.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v4_10014174.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10014174

dec_label_pc_10014174:                            ; preds = %dec_label_pc_1001418a, %dec_label_pc_10014139
  %v4_10014174 = phi i32 [ %v6_10014174, %dec_label_pc_1001418a ], [ %v4_10014174.pre, %dec_label_pc_10014139 ]
  %v0_1001418a = phi i32 [ %v1_1001418a, %dec_label_pc_1001418a ], [ %arg3, %dec_label_pc_10014139 ]
  %v1_10014174 = inttoptr i32 %v0_1001418a to i8*
  %v2_10014174 = load i8, i8* %v1_10014174, align 1
  %v3_10014174 = zext i8 %v2_10014174 to i32
  %v5_10014174 = and i32 %v4_10014174, -256
  %v6_10014174 = or i32 %v3_10014174, %v5_10014174
  store i32 %v6_10014174, i32* %ecx.global-to-local, align 4
  %v7_10014176 = icmp eq i8 %v2_10014174, 32
  br i1 %v7_10014176, label %dec_label_pc_1001418a, label %dec_label_pc_1001417b

dec_label_pc_1001417b:                            ; preds = %dec_label_pc_10014174
  %v10_1001417b = icmp eq i8 %v2_10014174, 9
  br i1 %v10_1001417b, label %dec_label_pc_1001418a, label %dec_label_pc_10014180

dec_label_pc_10014180:                            ; preds = %dec_label_pc_1001417b
  %v10_10014180 = icmp eq i8 %v2_10014174, 10
  br i1 %v10_10014180, label %dec_label_pc_1001418a, label %dec_label_pc_10014185

dec_label_pc_10014185:                            ; preds = %dec_label_pc_10014180
  %v10_10014185 = icmp eq i8 %v2_10014174, 13
  %v1_10014188 = icmp eq i1 %v10_10014185, false
  br i1 %v1_10014188, label %dec_label_pc_1001418d, label %dec_label_pc_1001418a

dec_label_pc_1001418a:                            ; preds = %dec_label_pc_10014185, %dec_label_pc_10014180, %dec_label_pc_1001417b, %dec_label_pc_10014174
  %v1_1001418a = add i32 %v0_1001418a, 1
  store i32 %v1_1001418a, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10014174

dec_label_pc_1001418d:                            ; preds = %dec_label_pc_10014185
  br label %dec_label_pc_10014190

dec_label_pc_10014190:                            ; preds = %dec_label_pc_10014413.dec_label_pc_10014190_crit_edge, %dec_label_pc_1001418d
  %v0_1001419c = phi i32 [ %v0_10014413, %dec_label_pc_10014413.dec_label_pc_10014190_crit_edge ], [ 0, %dec_label_pc_1001418d ]
  %v4_10014190 = phi i32 [ %v4_10014190.pre, %dec_label_pc_10014413.dec_label_pc_10014190_crit_edge ], [ %v0_1001413f, %dec_label_pc_1001418d ]
  %v0_10014192 = phi i32 [ %v0_100144b8, %dec_label_pc_10014413.dec_label_pc_10014190_crit_edge ], [ %v0_1001418a, %dec_label_pc_1001418d ]
  %v1_10014190 = inttoptr i32 %v0_10014192 to i8*
  %v2_10014190 = load i8, i8* %v1_10014190, align 1
  %v3_10014190 = zext i8 %v2_10014190 to i32
  %v5_10014190 = and i32 %v4_10014190, -256
  %v6_10014190 = or i32 %v3_10014190, %v5_10014190
  store i32 %v6_10014190, i32* %ebx.global-to-local, align 4
  %v1_10014192 = add i32 %v0_10014192, 1
  store i32 %v1_10014192, i32* %edi.global-to-local, align 4
  %v6_10014196 = icmp ugt i32 %v0_1001419c, 11
  br i1 %v6_10014196, label %dec_label_pc_10014413, label %dec_label_pc_1001419c

dec_label_pc_1001419c:                            ; preds = %dec_label_pc_10014190
  %v1_1001419c = mul i32 %v0_1001419c, 4
  %v2_1001419c = add i32 %v1_1001419c, ptrtoint (i32* @global_var_100145da.249 to i32)
  %v3_1001419c = inttoptr i32 %v2_1001419c to i32*
  %v4_1001419c = load i32, i32* %v3_1001419c, align 4
  call void @__pseudo_branch(i32 %v4_1001419c)
  %v0_10014413.pre = load i32, i32* %eax.global-to-local, align 4
  %v0_100144b8.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10014413

dec_label_pc_10014413:                            ; preds = %dec_label_pc_10014190, %dec_label_pc_1001419c
  %v0_100144b8 = phi i32 [ %v1_10014192, %dec_label_pc_10014190 ], [ %v0_100144b8.pre, %dec_label_pc_1001419c ]
  %v0_10014413 = phi i32 [ %v0_1001419c, %dec_label_pc_10014190 ], [ %v0_10014413.pre, %dec_label_pc_1001419c ]
  %v9_10014413 = icmp eq i32 %v0_10014413, 10
  br i1 %v9_10014413, label %dec_label_pc_100144b1, label %dec_label_pc_10014413.dec_label_pc_10014190_crit_edge

dec_label_pc_10014413.dec_label_pc_10014190_crit_edge: ; preds = %dec_label_pc_10014413
  %v4_10014190.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10014190

dec_label_pc_100144b1:                            ; preds = %dec_label_pc_10014413
  %v2_100144b8 = inttoptr i32 %arg2 to i32*
  store i32 %v0_100144b8, i32* %v2_100144b8, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_100145bf = ptrtoint i16* %arg1 to i32
  store i32 %v4_100145bf, i32* %ecx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_100145c5 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_100145c5, i32* @edi, align 4
  %v2_100145c6 = add i32 %v4_100145bf, 6
  %v3_100145c6 = inttoptr i32 %v2_100145c6 to i32*
  store i32 0, i32* %v3_100145c6, align 4
  %v0_100145c9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100145c9 = load i32, i32* %ecx.global-to-local, align 4
  %v2_100145c9 = add i32 %v1_100145c9, 2
  %v3_100145c9 = inttoptr i32 %v2_100145c9 to i32*
  store i32 %v0_100145c9, i32* %v3_100145c9, align 4
  %v0_100145cc = load i32, i32* %eax.global-to-local, align 4
  %v1_100145cc = trunc i32 %v0_100145cc to i16
  %v2_100145cc = load i32, i32* %ecx.global-to-local, align 4
  %v3_100145cc = add i32 %v2_100145cc, 10
  %v4_100145cc = inttoptr i32 %v3_100145cc to i16*
  store i16 %v1_100145cc, i16* %v4_100145cc, align 2
  store i32 4, i32* %eax.global-to-local, align 4
  %v0_100145d4 = load i32, i32* %edx.global-to-local, align 4
  %v1_100145d4 = trunc i32 %v0_100145d4 to i16
  %v2_100145d4 = load i32, i32* %ecx.global-to-local, align 4
  %v3_100145d4 = inttoptr i32 %v2_100145d4 to i16*
  store i16 %v1_100145d4, i16* %v3_100145d4, align 2
  store i32 %v0_1001413f, i32* @ebx, align 4
  ret i32 4

; uselistorder directives
  uselistorder i32 %v1_1001418a, { 1, 0 }
  uselistorder i32 %v6_10014174, { 1, 0 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 6, 7, 8, 9, 10, 11, 1, 2, 4, 5, 3 }
  uselistorder i32 11, { 7, 5, 0, 4, 1, 2, 6, 3 }
  uselistorder i8 10, { 0, 2, 3, 1 }
  uselistorder i8 9, { 0, 2, 3, 1, 4 }
  uselistorder label %dec_label_pc_10014413, { 1, 0 }
}

define i32 @function_1001460a(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001460a:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %tmp = call i8 @__decompiler_undefined_function_7()
  %tmp53 = call i32 @__decompiler_undefined_function_1()
  %tmp54 = call i8 @__decompiler_undefined_function_7()
  %tmp58 = call i32 @__decompiler_undefined_function_1()
  %tmp71 = call i16* @__decompiler_undefined_function_4()
  %tmp72 = call i32 @__decompiler_undefined_function_1()
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_4, align 4
  %stack_var_-20 = alloca i16, align 2
  %stack_var_-48 = alloca i8*, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v15_1001460d = ptrtoint i32* %stack_var_-32 to i32
  %v4_10014614 = ptrtoint i16* %tmp71 to i32
  store i32 %v4_10014614, i32* @ebx, align 4
  %v0_10014617 = load i32, i32* @esi, align 4
  store i32 32767, i32* %esi.global-to-local, align 4
  %v1_1001461f = and i32 %tmp72, 32768
  store i32 %v1_1001461f, i32* %ecx.global-to-local, align 4
  %v2_10014625 = and i32 %tmp72, 32767
  store i32 %v2_10014625, i32* %eax.global-to-local, align 4
  %v4_10014627 = icmp eq i32 %v1_1001461f, 0
  %v0_1001462a = load i32, i32* @edi, align 4
  store i32 %v0_1001462a, i32* %stack_var_-44, align 4
  store i32 -52, i32* %stack_var_-32, align 4
  store i32 %v2_10014625, i32* @edx, align 4
  %v1_1001466c = add i32 %v4_10014614, 2
  %v2_1001466c = inttoptr i32 %v1_1001466c to i8*
  %. = select i1 %v4_10014627, i8 32, i8 45
  store i8 %., i8* %v2_1001466c, align 1
  store i32 %tmp58, i32* @edi, align 4
  %v0_10014673 = load i32, i32* @edx, align 4
  %v3_10014673 = trunc i32 %v0_10014673 to i16
  %v4_10014673 = icmp eq i16 %v3_10014673, 0
  store i1 %v4_10014673, i1* %zf.global-to-local, align 1
  %v1_10014676 = icmp eq i1 %v4_10014673, false
  br i1 %v1_10014676, label %dec_label_pc_10014696, label %dec_label_pc_10014678

dec_label_pc_10014678:                            ; preds = %dec_label_pc_1001460a
  %v1_10014678 = icmp eq i32 %tmp58, 0
  store i1 %v1_10014678, i1* %zf.global-to-local, align 1
  %v1_1001467a = icmp eq i1 %v1_10014678, false
  br i1 %v1_1001467a, label %dec_label_pc_10014696, label %dec_label_pc_1001467c

dec_label_pc_1001467c:                            ; preds = %dec_label_pc_10014678
  %v3_1001467c = load i32, i32* %stack_var_4, align 4
  %v15_1001467c = icmp eq i32 %v3_1001467c, %tmp58
  store i1 %v15_1001467c, i1* %zf.global-to-local, align 1
  %v1_1001467f = icmp eq i1 %v15_1001467c, false
  br i1 %v1_1001467f, label %dec_label_pc_10014696, label %dec_label_pc_10014681

dec_label_pc_10014681:                            ; preds = %dec_label_pc_1001467c, %dec_label_pc_1001477f
  store i1 true, i1* %zf.global-to-local, align 1
  %v3_10014681 = load i32, i32* @ebx, align 4
  %v4_10014681 = inttoptr i32 %v3_10014681 to i16*
  store i16 0, i16* %v4_10014681, align 2
  %v0_10014685 = load i32, i32* @ebx, align 4
  %v1_10014685 = add i32 %v0_10014685, 2
  %v2_10014685 = inttoptr i32 %v1_10014685 to i8*
  store i8 32, i8* %v2_10014685, align 1
  %v0_10014689 = load i32, i32* @ebx, align 4
  %v1_10014689 = add i32 %v0_10014689, 3
  %v2_10014689 = inttoptr i32 %v1_10014689 to i8*
  store i8 1, i8* %v2_10014689, align 1
  %v0_1001468d = load i32, i32* @ebx, align 4
  %v1_1001468d = add i32 %v0_1001468d, 4
  %v2_1001468d = inttoptr i32 %v1_1001468d to i8*
  store i8 48, i8* %v2_1001468d, align 1
  br label %dec_label_pc_10014894

dec_label_pc_10014696:                            ; preds = %dec_label_pc_1001467c, %dec_label_pc_10014678, %dec_label_pc_1001460a
  %v2_10014696 = load i32, i32* %esi.global-to-local, align 4
  %v3_10014696 = trunc i32 %v2_10014696 to i16
  %v15_10014696 = icmp eq i16 %v3_10014673, %v3_10014696
  store i1 %v15_10014696, i1* %zf.global-to-local, align 1
  %v1_10014699 = icmp eq i1 %v15_10014696, false
  br i1 %v1_10014699, label %dec_label_pc_10014715, label %dec_label_pc_1001469b

dec_label_pc_1001469b:                            ; preds = %dec_label_pc_10014696
  store i32 -2147483648, i32* %eax.global-to-local, align 4
  %v0_100146a0 = load i32, i32* @ebx, align 4
  %v1_100146a0 = inttoptr i32 %v0_100146a0 to i16*
  store i16 1, i16* %v1_100146a0, align 2
  %v1_100146a5 = load i32, i32* %eax.global-to-local, align 4
  %v12_100146a5 = icmp eq i32 %tmp58, %v1_100146a5
  store i1 %v12_100146a5, i1* %zf.global-to-local, align 1
  %v1_100146a7 = icmp eq i1 %v12_100146a5, false
  br i1 %v1_100146a7, label %dec_label_pc_100146af, label %dec_label_pc_100146a9

dec_label_pc_100146a9:                            ; preds = %dec_label_pc_1001469b
  %v3_100146a9 = load i32, i32* %stack_var_4, align 4
  %v4_100146a9 = icmp eq i32 %v3_100146a9, 0
  store i1 %v4_100146a9, i1* %zf.global-to-local, align 1
  br i1 %v4_100146a9, label %dec_label_pc_100146be, label %dec_label_pc_100146af

dec_label_pc_100146af:                            ; preds = %dec_label_pc_100146a9, %dec_label_pc_1001469b
  %v1_100146af = and i32 %tmp58, 1073741824
  %v2_100146af = icmp eq i32 %v1_100146af, 0
  store i1 %v2_100146af, i1* %zf.global-to-local, align 1
  %v1_100146b5 = icmp eq i1 %v2_100146af, false
  br i1 %v1_100146b5, label %dec_label_pc_100146be, label %dec_label_pc_10014704

dec_label_pc_100146be:                            ; preds = %dec_label_pc_100146af, %dec_label_pc_100146a9
  %v0_100146be = load i32, i32* %ecx.global-to-local, align 4
  %v3_100146be = trunc i32 %v0_100146be to i16
  %v4_100146be = icmp eq i16 %v3_100146be, 0
  store i1 %v4_100146be, i1* %zf.global-to-local, align 1
  br i1 %v4_100146be, label %dec_label_pc_100146d8, label %dec_label_pc_100146c3

dec_label_pc_100146c3:                            ; preds = %dec_label_pc_100146be
  %v7_100146c3 = icmp eq i32 %tmp58, -1073741824
  store i1 %v7_100146c3, i1* %zf.global-to-local, align 1
  %v1_100146c9 = icmp eq i1 %v7_100146c3, false
  br i1 %v1_100146c9, label %dec_label_pc_100146d8, label %dec_label_pc_100146cb

dec_label_pc_100146cb:                            ; preds = %dec_label_pc_100146c3
  %v3_100146cb = load i32, i32* %stack_var_4, align 4
  %v4_100146cb = icmp eq i32 %v3_100146cb, 0
  store i1 %v4_100146cb, i1* %zf.global-to-local, align 1
  %v1_100146cf = icmp eq i1 %v4_100146cb, false
  br i1 %v1_100146cf, label %dec_label_pc_10014704, label %dec_label_pc_100146e7

dec_label_pc_100146d8:                            ; preds = %dec_label_pc_100146c3, %dec_label_pc_100146be
  store i1 %v12_100146a5, i1* %zf.global-to-local, align 1
  br i1 %v1_100146a7, label %dec_label_pc_10014704, label %dec_label_pc_100146dc

dec_label_pc_100146dc:                            ; preds = %dec_label_pc_100146d8
  %v3_100146dc = load i32, i32* %stack_var_4, align 4
  %v4_100146dc = icmp eq i32 %v3_100146dc, 0
  store i1 %v4_100146dc, i1* %zf.global-to-local, align 1
  %v1_100146e0 = icmp eq i1 %v4_100146dc, false
  br i1 %v1_100146e0, label %dec_label_pc_10014704, label %dec_label_pc_100146e7

dec_label_pc_100146e7:                            ; preds = %dec_label_pc_100146dc, %dec_label_pc_100146cb
  %storemerge8 = phi i8* [ getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_100166c8.251, i32 0, i32 0), %dec_label_pc_100146cb ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_100166c0.252, i32 0, i32 0), %dec_label_pc_100146dc ]
  store i8* %storemerge8, i8** %stack_var_-48, align 4
  %v0_100146e7 = load i32, i32* @ebx, align 4
  %v1_100146e7 = add i32 %v0_100146e7, 4
  store i32 %v1_100146e7, i32* %eax.global-to-local, align 4
  %v1_100146eb = call i32 @function_1000d570(i32 %v1_100146e7)
  store i32 %v1_100146eb, i32* %eax.global-to-local, align 4
  store i32 %v1_100146e7, i32* %ecx.global-to-local, align 4
  %v0_100146f1 = load i32, i32* @ebx, align 4
  %v1_100146f1 = add i32 %v0_100146f1, 3
  %v2_100146f1 = inttoptr i32 %v1_100146f1 to i8*
  store i8 5, i8* %v2_100146f1, align 1
  br label %dec_label_pc_100146f6

dec_label_pc_100146f6:                            ; preds = %dec_label_pc_10014704, %dec_label_pc_100146e7
  %storemerge7.in = load i8*, i8** %stack_var_-48, align 4
  %storemerge7 = ptrtoint i8* %storemerge7.in to i32
  store i32 %storemerge7, i32* %ecx.global-to-local, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_1001486d

dec_label_pc_10014704:                            ; preds = %dec_label_pc_100146cb, %dec_label_pc_100146d8, %dec_label_pc_100146dc, %dec_label_pc_100146af
  %storemerge6 = phi i8* [ getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_100166d0.250, i32 0, i32 0), %dec_label_pc_100146af ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_100166b8.253, i32 0, i32 0), %dec_label_pc_100146dc ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_100166b8.253, i32 0, i32 0), %dec_label_pc_100146d8 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_100166b8.253, i32 0, i32 0), %dec_label_pc_100146cb ]
  store i8* %storemerge6, i8** %stack_var_-48, align 4
  %v0_10014704 = load i32, i32* @ebx, align 4
  %v1_10014704 = add i32 %v0_10014704, 4
  store i32 %v1_10014704, i32* %eax.global-to-local, align 4
  %v1_10014708 = call i32 @function_1000d570(i32 %v1_10014704)
  store i32 %v1_10014708, i32* %eax.global-to-local, align 4
  store i32 %v1_10014704, i32* %ecx.global-to-local, align 4
  %v0_1001470e = load i32, i32* @ebx, align 4
  %v1_1001470e = add i32 %v0_1001470e, 3
  %v2_1001470e = inttoptr i32 %v1_1001470e to i8*
  store i8 6, i8* %v2_1001470e, align 1
  br label %dec_label_pc_100146f6

dec_label_pc_10014715:                            ; preds = %dec_label_pc_10014696
  %v1_10014715 = and i32 %v0_10014673, 65535
  %v2_1001471c = udiv i32 %tmp58, 16777216
  %v3_1001471f = mul nuw nsw i32 %v1_10014715, 19728
  %v2_10014725 = udiv i32 %v1_10014715, 256
  store i16 0, i16* %stack_var_-20, align 2
  store i8* inttoptr (i32 1 to i8*), i8** %stack_var_-48, align 4
  %v2_1001472f = mul nuw nsw i32 %v2_1001471c, 2
  %v3_1001472f = add nuw nsw i32 %v2_10014725, %v2_1001472f
  %v3_10014736 = mul nuw nsw i32 %v3_1001472f, 77
  store i32 %v3_10014736, i32* %ecx.global-to-local, align 4
  %v2_1001473c = add nsw i32 %v3_1001471f, -323162868
  %v3_1001473c = add i32 %v2_1001473c, %v3_10014736
  %v2_10014746 = sdiv i32 %v3_1001473c, 65536
  %v3_1001473c.off = add i32 %v3_1001473c, 65535
  %tmp100 = icmp ult i32 %v3_1001473c.off, 131071
  store i32 %v2_10014746, i32* @esi, align 4
  %v1_1001474f = sub nsw i32 0, %v2_10014746
  store i1 %tmp100, i1* %zf.global-to-local, align 1
  %v2_10014752 = ptrtoint i16* %stack_var_-20 to i32
  store i32 %v2_10014752, i32* @eax, align 4
  %v5_10014756 = call i32 @function_10014d0a(i16* nonnull %stack_var_-20, i32 %v1_1001474f, i32 1)
  store i32 %v5_10014756, i32* %eax.global-to-local, align 4
  %v8_1001475e = icmp ult i16 %v3_10014673, 16383
  %v12_1001475e = icmp eq i16 %v3_10014673, 16383
  store i1 %v12_1001475e, i1* %zf.global-to-local, align 1
  br i1 %v8_1001475e, label %dec_label_pc_10014776, label %dec_label_pc_10014766

dec_label_pc_10014766:                            ; preds = %dec_label_pc_10014715
  %v0_10014769 = load i32, i32* @esi, align 4
  %v1_10014769 = add i32 %v0_10014769, 1
  %v8_10014769 = icmp eq i32 %v1_10014769, 0
  store i1 %v8_10014769, i1* %zf.global-to-local, align 1
  store i32 %v1_10014769, i32* @esi, align 4
  %tmp86 = bitcast i32* %stack_var_-32 to i8*
  store i8* %tmp86, i8** %stack_var_-48, align 4
  store i32 %v2_10014752, i32* %eax.global-to-local, align 4
  %v4_1001476f = call i32 @function_10014aea(i16* nonnull %stack_var_-20, i32 %v15_1001460d)
  store i32 %v4_1001476f, i32* %eax.global-to-local, align 4
  %v3_10014775 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v3_10014775, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_10014776

dec_label_pc_10014776:                            ; preds = %dec_label_pc_10014715, %dec_label_pc_10014766
  %v4_10014776 = and i8 %tmp54, 1
  %v5_10014776 = icmp eq i8 %v4_10014776, 0
  store i1 %v5_10014776, i1* %zf.global-to-local, align 1
  %v0_1001477a = load i32, i32* @esi, align 4
  %v1_1001477a = trunc i32 %v0_1001477a to i16
  %v2_1001477a = load i32, i32* @ebx, align 4
  %v3_1001477a = inttoptr i32 %v2_1001477a to i16*
  store i16 %v1_1001477a, i16* %v3_1001477a, align 2
  store i32 %tmp53, i32* @edi, align 4
  br i1 %v5_10014776, label %dec_label_pc_10014793, label %dec_label_pc_1001477f

dec_label_pc_1001477f:                            ; preds = %dec_label_pc_10014776
  %v0_10014782 = load i32, i32* @esi, align 4
  %v1_10014782 = mul i32 %v0_10014782, 65536
  %v2_10014782 = sdiv i32 %v1_10014782, 65536
  store i32 %v2_10014782, i32* %eax.global-to-local, align 4
  %v2_10014785 = add i32 %v2_10014782, %tmp53
  %v12_10014785 = icmp eq i32 %v2_10014785, 0
  store i32 %v2_10014785, i32* @edi, align 4
  store i1 %v12_10014785, i1* %zf.global-to-local, align 1
  %tmp87 = icmp slt i32 %v2_10014785, 1
  %tmp88 = icmp eq i1 %tmp87, false
  br i1 %tmp88, label %dec_label_pc_10014793, label %dec_label_pc_10014681

dec_label_pc_10014793:                            ; preds = %dec_label_pc_10014776, %dec_label_pc_1001477f
  %v0_10014793 = phi i32 [ %tmp53, %dec_label_pc_10014776 ], [ %v2_10014785, %dec_label_pc_1001477f ]
  %v1_10014793 = add i32 %v0_10014793, -21
  %v6_10014793 = sub i32 20, %v0_10014793
  %v7_10014793 = and i32 %v6_10014793, %v0_10014793
  %v8_10014793 = icmp slt i32 %v7_10014793, 0
  %v9_10014793 = icmp eq i32 %v1_10014793, 0
  store i1 %v9_10014793, i1* %zf.global-to-local, align 1
  %v10_10014793 = icmp slt i32 %v1_10014793, 0
  %v3_10014796 = icmp ne i1 %v10_10014793, %v8_10014793
  %v4_10014796 = or i1 %v9_10014793, %v3_10014796
  br i1 %v4_10014796, label %dec_label_pc_1001479b, label %dec_label_pc_10014798

dec_label_pc_10014798:                            ; preds = %dec_label_pc_10014793
  store i8* inttoptr (i32 21 to i8*), i8** %stack_var_-48, align 4
  store i32 21, i32* @edi, align 4
  br label %dec_label_pc_1001479b

dec_label_pc_1001479b:                            ; preds = %dec_label_pc_10014793, %dec_label_pc_10014798
  store i1 true, i1* %zf.global-to-local, align 1
  %tmp89 = bitcast i16* %stack_var_-20 to i8*
  %tmp90 = bitcast i16* %stack_var_-20 to i32*
  br label %dec_label_pc_100147b1

dec_label_pc_100147b1:                            ; preds = %dec_label_pc_100147b1, %dec_label_pc_1001479b
  %stack_var_24.0 = phi i16* [ inttoptr (i32 8 to i16*), %dec_label_pc_1001479b ], [ %v22_100147ba, %dec_label_pc_100147b1 ]
  store i32 %v2_10014752, i32* %eax.global-to-local, align 4
  store i8* %tmp89, i8** %stack_var_-48, align 4
  %v3_100147b5 = call i32 @function_10014017(i32* %tmp90)
  store i32 %v3_100147b5, i32* %eax.global-to-local, align 4
  %v4_100147ba = ptrtoint i16* %stack_var_24.0 to i32
  %v5_100147ba = add i32 %v4_100147ba, -1
  %v12_100147ba = icmp eq i32 %v5_100147ba, 0
  store i1 %v12_100147ba, i1* %zf.global-to-local, align 1
  %v22_100147ba = inttoptr i32 %v5_100147ba to i16*
  %v2_100147bd = load i8*, i8** %stack_var_-48, align 4
  %v3_100147bd = ptrtoint i8* %v2_100147bd to i32
  store i32 %v3_100147bd, i32* %ecx.global-to-local, align 4
  %v1_100147be = icmp eq i1 %v12_100147ba, false
  br i1 %v1_100147be, label %dec_label_pc_100147b1, label %dec_label_pc_100147c0

dec_label_pc_100147c0:                            ; preds = %dec_label_pc_100147b1
  %v9_1001479f = icmp eq i32 %v1_10014715, 16382
  store i1 %v9_1001479f, i1* %zf.global-to-local, align 1
  %v2_100147c0 = icmp ult i32 %v1_10014715, 16382
  %v2_100147c2 = icmp eq i1 %v2_100147c0, false
  br i1 %v2_100147c2, label %dec_label_pc_100147db, label %dec_label_pc_100147c4

dec_label_pc_100147c4:                            ; preds = %dec_label_pc_100147c0
  %v1_100147c4 = sub i32 16382, %v0_10014673
  %v1_100147c6 = and i32 %v1_100147c4, 255
  %v2_100147c6 = icmp eq i32 %v1_100147c6, 0
  store i1 %v2_100147c6, i1* %zf.global-to-local, align 1
  store i32 %v1_100147c6, i32* @esi, align 4
  br i1 %v2_100147c6, label %dec_label_pc_100147db, label %dec_label_pc_100147ce

dec_label_pc_100147ce:                            ; preds = %dec_label_pc_100147c4, %dec_label_pc_100147ce
  store i32 %v2_10014752, i32* %eax.global-to-local, align 4
  store i8* %tmp89, i8** %stack_var_-48, align 4
  %v3_100147d2 = call i32 @function_10014045(i32* %tmp90)
  store i32 %v3_100147d2, i32* %eax.global-to-local, align 4
  %v0_100147d7 = load i32, i32* @esi, align 4
  %v1_100147d7 = add i32 %v0_100147d7, -1
  %v8_100147d7 = icmp eq i32 %v1_100147d7, 0
  store i1 %v8_100147d7, i1* %zf.global-to-local, align 1
  store i32 %v1_100147d7, i32* @esi, align 4
  %v2_100147d8 = load i8*, i8** %stack_var_-48, align 4
  %v3_100147d8 = ptrtoint i8* %v2_100147d8 to i32
  store i32 %v3_100147d8, i32* %ecx.global-to-local, align 4
  %v1_100147d9 = icmp eq i1 %v8_100147d7, false
  br i1 %v1_100147d9, label %dec_label_pc_100147ce, label %dec_label_pc_100147db

dec_label_pc_100147db:                            ; preds = %dec_label_pc_100147ce, %dec_label_pc_100147c4, %dec_label_pc_100147c0
  %v0_100147db = load i32, i32* @edi, align 4
  %v1_100147db = add i32 %v0_100147db, 1
  store i32 %v1_100147db, i32* %ecx.global-to-local, align 4
  %v0_100147de = load i32, i32* @ebx, align 4
  %v1_100147de = add i32 %v0_100147de, 4
  store i32 %v1_100147de, i32* %eax.global-to-local, align 4
  %v1_100147e1 = icmp eq i32 %v1_100147db, 0
  store i1 %v1_100147e1, i1* %zf.global-to-local, align 1
  %tmp91 = icmp slt i32 %v1_100147db, 1
  br i1 %tmp91, label %dec_label_pc_10014838, label %dec_label_pc_100147e8

dec_label_pc_100147e8:                            ; preds = %dec_label_pc_100147db
  %v2_100147ee = ptrtoint i32* %stack_var_4 to i32
  %phitmp = add i8 %tmp, 48
  br label %dec_label_pc_100147eb

dec_label_pc_100147eb:                            ; preds = %dec_label_pc_100147eb, %dec_label_pc_100147e8
  %stack_var_16.0 = phi i32 [ %v1_100147db, %dec_label_pc_100147e8 ], [ %v4_1001482e, %dec_label_pc_100147eb ]
  %stack_var_-9.0 = phi i8 [ %phitmp, %dec_label_pc_100147e8 ], [ 48, %dec_label_pc_100147eb ]
  %stack_var_24.1.in = phi i32 [ %v1_100147de, %dec_label_pc_100147e8 ], [ %v5_1001482b, %dec_label_pc_100147eb ]
  %v2_100147f1 = load i16, i16* %stack_var_-20, align 2
  %v3_100147f1 = sext i16 %v2_100147f1 to i32
  store i32 %v3_100147f1, i32* %stack_var_4, align 4
  %v8_100147f1 = load i1, i1* @df, align 1
  %v9_100147f1 = select i1 %v8_100147f1, i32 -4, i32 4
  %v10_100147f1 = add i32 %v9_100147f1, %v2_100147ee
  %v11_100147f1 = add i32 %v9_100147f1, %v2_10014752
  store i32 %v10_100147f1, i32* %edi.global-to-local, align 4
  store i32 %v11_100147f1, i32* %esi.global-to-local, align 4
  %v1_100147f2 = inttoptr i32 %v11_100147f1 to i32*
  %v2_100147f2 = load i32, i32* %v1_100147f2, align 4
  %v4_100147f2 = inttoptr i32 %v10_100147f1 to i32*
  store i32 %v2_100147f2, i32* %v4_100147f2, align 4
  %v5_100147f2 = load i32, i32* %edi.global-to-local, align 4
  %v6_100147f2 = load i32, i32* %esi.global-to-local, align 4
  %v9_100147f2 = add i32 %v5_100147f2, %v9_100147f1
  %v10_100147f2 = add i32 %v6_100147f2, %v9_100147f1
  store i32 %v9_100147f2, i32* %edi.global-to-local, align 4
  store i32 %v10_100147f2, i32* %esi.global-to-local, align 4
  store i32 %v2_10014752, i32* %eax.global-to-local, align 4
  store i8* %tmp89, i8** %stack_var_-48, align 4
  %v1_100147f7 = inttoptr i32 %v10_100147f2 to i32*
  %v2_100147f7 = load i32, i32* %v1_100147f7, align 4
  %v4_100147f7 = inttoptr i32 %v9_100147f2 to i32*
  store i32 %v2_100147f7, i32* %v4_100147f7, align 4
  %v5_100147f7 = load i32, i32* %edi.global-to-local, align 4
  %v9_100147f7 = add i32 %v5_100147f7, %v9_100147f1
  store i32 %v9_100147f7, i32* @edi, align 4
  %v0_100147f8 = load i8*, i8** %stack_var_-48, align 4
  %tmp92 = bitcast i8* %v0_100147f8 to i32*
  %v3_100147f8 = call i32 @function_10014017(i32* %tmp92)
  store i32 %v2_10014752, i32* %eax.global-to-local, align 4
  %v2_10014801 = call i32 @function_10014017(i32* %tmp90)
  store i32 %v2_10014752, i32* %eax.global-to-local, align 4
  %v2_1001480e = call i32 @___add_12(i32 %v2_10014752, i32 %v2_100147ee)
  store i32 %v2_10014752, i32* %eax.global-to-local, align 4
  %v2_10014817 = call i32 @function_10014017(i32* %tmp90)
  store i32 %stack_var_24.1.in, i32* %ecx.global-to-local, align 4
  %v12_10014829 = zext i8 %stack_var_-9.0 to i32
  %v14_10014829 = and i32 %v2_10014817, -256
  %v15_10014829 = or i32 %v14_10014829, %v12_10014829
  store i32 %v15_10014829, i32* %eax.global-to-local, align 4
  %v5_1001482b = add i32 %stack_var_24.1.in, 1
  %v4_1001482e = add i32 %stack_var_16.0, -1
  %v11_1001482e = icmp eq i32 %v4_1001482e, 0
  store i1 %v11_1001482e, i1* %zf.global-to-local, align 1
  %v3_10014831 = inttoptr i32 %stack_var_24.1.in to i8*
  store i8 %stack_var_-9.0, i8* %v3_10014831, align 1
  %v0_10014833 = load i1, i1* %zf.global-to-local, align 1
  %v1_10014833 = icmp eq i1 %v0_10014833, false
  br i1 %v1_10014833, label %dec_label_pc_100147eb, label %dec_label_pc_10014835

dec_label_pc_10014835:                            ; preds = %dec_label_pc_100147eb
  store i32 %v5_1001482b, i32* %eax.global-to-local, align 4
  %v0_10014840.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_10014838

dec_label_pc_10014838:                            ; preds = %dec_label_pc_100147db, %dec_label_pc_10014835
  %v3_10014885 = phi i32 [ %v0_100147de, %dec_label_pc_100147db ], [ %v0_10014840.pre, %dec_label_pc_10014835 ]
  %v0_1001483b = phi i32 [ %v1_100147de, %dec_label_pc_100147db ], [ %v5_1001482b, %dec_label_pc_10014835 ]
  %v1_10014838 = add i32 %v0_1001483b, -1
  %v2_10014838 = inttoptr i32 %v1_10014838 to i8*
  %v3_10014838 = load i8, i8* %v2_10014838, align 1
  %v1_1001483c = add i32 %v0_1001483b, -2
  store i32 %v1_1001483c, i32* %eax.global-to-local, align 4
  %v2_1001483d = add i8 %v3_10014838, -53
  %v7_1001483d = sub i8 52, %v3_10014838
  %v8_1001483d = and i8 %v7_1001483d, %v3_10014838
  %v9_1001483d = icmp slt i8 %v8_1001483d, 0
  %v11_1001483d = icmp slt i8 %v2_1001483d, 0
  %v1_10014840 = add i32 %v3_10014885, 4
  store i32 %v1_10014840, i32* %ecx.global-to-local, align 4
  %v2_10014843 = icmp eq i1 %v11_1001483d, %v9_1001483d
  %v7_1001484514 = icmp ult i32 %v1_1001483c, %v1_10014840
  %v12_1001484519 = icmp eq i32 %v1_1001483c, %v1_10014840
  store i1 %v12_1001484519, i1* %zf.global-to-local, align 1
  br i1 %v2_10014843, label %dec_label_pc_10014845.preheader, label %dec_label_pc_10014875.preheader

dec_label_pc_10014875.preheader:                  ; preds = %dec_label_pc_10014838
  br i1 %v7_1001484514, label %dec_label_pc_10014885, label %dec_label_pc_10014879

dec_label_pc_10014845.preheader:                  ; preds = %dec_label_pc_10014838
  br i1 %v7_1001484514, label %dec_label_pc_10014858, label %dec_label_pc_10014849

dec_label_pc_10014849:                            ; preds = %dec_label_pc_10014845.preheader, %dec_label_pc_1001484e
  %v1_10014854 = phi i32 [ %v1_10014845, %dec_label_pc_1001484e ], [ %v1_10014840, %dec_label_pc_10014845.preheader ]
  %v0_10014854 = phi i32 [ %v1_10014851, %dec_label_pc_1001484e ], [ %v1_1001483c, %dec_label_pc_10014845.preheader ]
  %v1_10014849 = inttoptr i32 %v0_10014854 to i8*
  %v2_10014849 = load i8, i8* %v1_10014849, align 1
  %v11_10014849 = icmp eq i8 %v2_10014849, 57
  store i1 %v11_10014849, i1* %zf.global-to-local, align 1
  %v1_1001484c = icmp eq i1 %v11_10014849, false
  br i1 %v1_1001484c, label %dec_label_pc_10014854, label %dec_label_pc_1001484e

dec_label_pc_1001484e:                            ; preds = %dec_label_pc_10014849
  store i8 48, i8* %v1_10014849, align 1
  %v0_10014851 = load i32, i32* %eax.global-to-local, align 4
  %v1_10014851 = add i32 %v0_10014851, -1
  store i32 %v1_10014851, i32* %eax.global-to-local, align 4
  %v1_10014845 = load i32, i32* %ecx.global-to-local, align 4
  %v7_10014845 = icmp ult i32 %v1_10014851, %v1_10014845
  %v12_10014845 = icmp eq i32 %v1_10014851, %v1_10014845
  store i1 %v12_10014845, i1* %zf.global-to-local, align 1
  br i1 %v7_10014845, label %dec_label_pc_10014858, label %dec_label_pc_10014849

dec_label_pc_10014854:                            ; preds = %dec_label_pc_10014849
  %v7_10014854 = icmp ult i32 %v0_10014854, %v1_10014854
  %v12_10014854 = icmp eq i32 %v0_10014854, %v1_10014854
  store i1 %v12_10014854, i1* %zf.global-to-local, align 1
  %v1_10014856 = icmp eq i1 %v7_10014854, false
  br i1 %v1_10014856, label %dec_label_pc_1001485c, label %dec_label_pc_10014858

dec_label_pc_10014858:                            ; preds = %dec_label_pc_1001484e, %dec_label_pc_10014845.preheader, %dec_label_pc_10014854
  %v0_10014858 = phi i32 [ %v0_10014854, %dec_label_pc_10014854 ], [ %v1_1001483c, %dec_label_pc_10014845.preheader ], [ %v1_10014851, %dec_label_pc_1001484e ]
  %v1_10014858 = add i32 %v0_10014858, 1
  store i32 %v1_10014858, i32* %eax.global-to-local, align 4
  %v0_10014859 = load i32, i32* @ebx, align 4
  %v1_10014859 = inttoptr i32 %v0_10014859 to i16*
  %v2_10014859 = load i16, i16* %v1_10014859, align 2
  %v3_10014859 = add i16 %v2_10014859, 1
  %v10_10014859 = icmp eq i16 %v3_10014859, 0
  store i1 %v10_10014859, i1* %zf.global-to-local, align 1
  store i16 %v3_10014859, i16* %v1_10014859, align 2
  %v0_1001485c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1001485c

dec_label_pc_1001485c:                            ; preds = %dec_label_pc_10014854, %dec_label_pc_10014858
  %v15_1001485c = phi i32 [ %v0_10014854, %dec_label_pc_10014854 ], [ %v0_1001485c.pre, %dec_label_pc_10014858 ]
  %v1_1001485c = inttoptr i32 %v15_1001485c to i8*
  %v2_1001485c = load i8, i8* %v1_1001485c, align 1
  %v3_1001485c = add i8 %v2_1001485c, 1
  %v10_1001485c = icmp eq i8 %v3_1001485c, 0
  store i1 %v10_1001485c, i1* %zf.global-to-local, align 1
  store i8 %v3_1001485c, i8* %v1_1001485c, align 1
  %v0_1001485e.pre = load i32, i32* %eax.global-to-local, align 4
  %v2_1001485e.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1001485e

dec_label_pc_1001485e:                            ; preds = %dec_label_pc_10014881, %dec_label_pc_1001485c
  %v2_10014862 = phi i32 [ %v3_10014885, %dec_label_pc_10014881 ], [ %v2_1001485e.pre, %dec_label_pc_1001485c ]
  %v21_1001485e = phi i32 [ %v0_10014881, %dec_label_pc_10014881 ], [ %v0_1001485e.pre, %dec_label_pc_1001485c ]
  %v1_1001485e = trunc i32 %v21_1001485e to i8
  %v3_1001485e = trunc i32 %v2_10014862 to i8
  %v4_1001485e = sub i8 %v1_1001485e, %v3_1001485e
  %v2_10014860 = add i8 %v4_1001485e, -3
  %v15_10014860 = zext i8 %v2_10014860 to i32
  %v17_10014860 = and i32 %v21_1001485e, -256
  %v18_10014860 = or i32 %v15_10014860, %v17_10014860
  store i32 %v18_10014860, i32* %eax.global-to-local, align 4
  %v3_10014862 = add i32 %v2_10014862, 3
  %v4_10014862 = inttoptr i32 %v3_10014862 to i8*
  store i8 %v2_10014860, i8* %v4_10014862, align 1
  %v0_10014865 = load i32, i32* %eax.global-to-local, align 4
  %v1_10014865 = mul i32 %v0_10014865, 16777216
  %v2_10014865 = sdiv i32 %v1_10014865, 16777216
  store i32 %v2_10014865, i32* %eax.global-to-local, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  %v7_10014868 = load i32, i32* @ebx, align 4
  %v8_10014868 = add nsw i32 %v2_10014865, 4
  %v9_10014868 = add i32 %v8_10014868, %v7_10014868
  %v10_10014868 = inttoptr i32 %v9_10014868 to i8*
  store i8 0, i8* %v10_10014868, align 1
  br label %dec_label_pc_1001486d

dec_label_pc_1001486d:                            ; preds = %dec_label_pc_100146f6, %dec_label_pc_1001485e
  %stack_var_-8.0 = phi i32 [ 1, %dec_label_pc_1001485e ], [ 0, %dec_label_pc_100146f6 ]
  br label %dec_label_pc_10014870

dec_label_pc_10014870:                            ; preds = %dec_label_pc_10014894, %dec_label_pc_1001486d
  %storemerge = phi i32 [ 1, %dec_label_pc_10014894 ], [ %stack_var_-8.0, %dec_label_pc_1001486d ]
  %v0_10014874 = phi i32 [ 1, %dec_label_pc_10014894 ], [ %stack_var_-8.0, %dec_label_pc_1001486d ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_10014870 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_10014870, i32* %edi.global-to-local, align 4
  store i32 %v0_10014617, i32* %esi.global-to-local, align 4
  ret i32 %v0_10014874

dec_label_pc_10014879:                            ; preds = %dec_label_pc_10014875.preheader, %dec_label_pc_1001487e
  %v0_10014881 = phi i32 [ %v1_1001487e, %dec_label_pc_1001487e ], [ %v1_1001483c, %dec_label_pc_10014875.preheader ]
  %v1_10014879 = inttoptr i32 %v0_10014881 to i8*
  %v2_10014879 = load i8, i8* %v1_10014879, align 1
  %v8_10014879 = icmp eq i8 %v2_10014879, 48
  store i1 %v8_10014879, i1* %zf.global-to-local, align 1
  %v1_1001487c = icmp eq i1 %v8_10014879, false
  br i1 %v1_1001487c, label %dec_label_pc_10014881, label %dec_label_pc_1001487e

dec_label_pc_1001487e:                            ; preds = %dec_label_pc_10014879
  %v1_1001487e = add i32 %v0_10014881, -1
  store i32 %v1_1001487e, i32* %eax.global-to-local, align 4
  %v7_10014875 = icmp ult i32 %v1_1001487e, %v1_10014840
  %v12_10014875 = icmp eq i32 %v1_1001487e, %v1_10014840
  store i1 %v12_10014875, i1* %zf.global-to-local, align 1
  br i1 %v7_10014875, label %dec_label_pc_10014885, label %dec_label_pc_10014879

dec_label_pc_10014881:                            ; preds = %dec_label_pc_10014879
  %v7_10014881 = icmp ult i32 %v0_10014881, %v1_10014840
  %v12_10014881 = icmp eq i32 %v0_10014881, %v1_10014840
  store i1 %v12_10014881, i1* %zf.global-to-local, align 1
  %v1_10014883 = icmp eq i1 %v7_10014881, false
  br i1 %v1_10014883, label %dec_label_pc_1001485e, label %dec_label_pc_10014885

dec_label_pc_10014885:                            ; preds = %dec_label_pc_1001487e, %dec_label_pc_10014875.preheader, %dec_label_pc_10014881
  store i1 true, i1* %zf.global-to-local, align 1
  %v4_10014885 = inttoptr i32 %v3_10014885 to i16*
  store i16 0, i16* %v4_10014885, align 2
  %v0_10014889 = load i32, i32* @ebx, align 4
  %v1_10014889 = add i32 %v0_10014889, 2
  %v2_10014889 = inttoptr i32 %v1_10014889 to i8*
  store i8 32, i8* %v2_10014889, align 1
  %v0_1001488d = load i32, i32* @ebx, align 4
  %v1_1001488d = add i32 %v0_1001488d, 3
  %v2_1001488d = inttoptr i32 %v1_1001488d to i8*
  store i8 1, i8* %v2_1001488d, align 1
  %v0_10014891 = load i32, i32* %ecx.global-to-local, align 4
  %v1_10014891 = inttoptr i32 %v0_10014891 to i8*
  store i8 48, i8* %v1_10014891, align 1
  br label %dec_label_pc_10014894

dec_label_pc_10014894:                            ; preds = %dec_label_pc_10014681, %dec_label_pc_10014885
  store i1 true, i1* %zf.global-to-local, align 1
  %v4_10014894 = load i32, i32* @ebx, align 4
  %v5_10014894 = add i32 %v4_10014894, 5
  %v6_10014894 = inttoptr i32 %v5_10014894 to i8*
  store i8 0, i8* %v6_10014894, align 1
  store i8* inttoptr (i32 1 to i8*), i8** %stack_var_-48, align 4
  br label %dec_label_pc_10014870

; uselistorder directives
  uselistorder i32 %v1_1001487e, { 0, 2, 3, 1 }
  uselistorder i1 %v8_10014879, { 1, 0 }
  uselistorder i32 %v0_10014881, { 0, 2, 3, 4, 1 }
  uselistorder i32 %stack_var_-8.0, { 1, 0 }
  uselistorder i32 %v2_10014865, { 1, 0 }
  uselistorder i32 %v1_10014845, { 0, 2, 1 }
  uselistorder i32 %v1_10014851, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v11_10014849, { 1, 0 }
  uselistorder i32 %v0_10014854, { 2, 1, 0, 3, 4 }
  uselistorder i1 %v7_1001484514, { 1, 0 }
  uselistorder i32 %v1_10014840, { 0, 6, 1, 4, 3, 2, 5, 7 }
  uselistorder i32 %v1_1001483c, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32 %v3_10014885, { 1, 0, 2 }
  uselistorder i32 %v4_1001482e, { 1, 0 }
  uselistorder i8 %stack_var_-9.0, { 1, 0 }
  uselistorder i32 %v2_100147ee, { 1, 0 }
  uselistorder i32 %v1_100147d7, { 1, 0 }
  uselistorder i32 %v1_10014793, { 1, 0 }
  uselistorder i32 %v0_10014793, { 0, 2, 1 }
  uselistorder i32 %v2_10014782, { 1, 0 }
  uselistorder i32 %v2_10014752, { 3, 4, 5, 6, 7, 0, 2, 8, 1, 9 }
  uselistorder i32 %v2_10014746, { 1, 0 }
  uselistorder i32 %v1_10014715, { 3, 0, 1, 2 }
  uselistorder i1 %v7_100146c3, { 1, 0 }
  uselistorder i1 %v12_100146a5, { 2, 1, 0 }
  uselistorder i1 %v15_10014696, { 1, 0 }
  uselistorder i1 %v15_1001467c, { 1, 0 }
  uselistorder i16 %v3_10014673, { 0, 2, 1, 3 }
  uselistorder i8** %stack_var_-48, { 11, 12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i16* %stack_var_-20, { 6, 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %stack_var_4, { 1, 6, 2, 3, 4, 5, 0 }
  uselistorder i32 %tmp58, { 3, 0, 6, 1, 2, 5, 4 }
  uselistorder i32 %tmp53, { 1, 0, 2 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 10, 9, 39, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38 }
  uselistorder i32* %ecx.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 12, 13 }
  uselistorder i32* %eax.global-to-local, { 0, 30, 1, 2, 3, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 32, 17, 18, 19, 20, 31, 21, 29, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder i32 (i32, i32)* @___add_12, { 0, 2, 1 }
  uselistorder i32 16382, { 1, 2, 0 }
  uselistorder i32 20, { 6, 7, 8, 12, 13, 20, 0, 16, 17, 18, 19, 1, 4, 14, 2, 15, 3, 21, 10, 9, 11, 5 }
  uselistorder i32 65536, { 20, 19, 21, 22, 23, 24, 25, 26, 27, 953, 956, 954, 957, 29, 28, 955, 30, 32, 31, 34, 33, 36, 35, 37, 38, 39, 40, 42, 41, 43, 45, 44, 47, 46, 48, 50, 49, 51, 52, 54, 53, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 67, 66, 69, 68, 71, 70, 73, 72, 75, 74, 77, 76, 79, 78, 81, 80, 83, 82, 85, 84, 86, 88, 87, 90, 89, 92, 91, 93, 94, 95, 96, 97, 98, 100, 99, 102, 101, 104, 103, 105, 106, 108, 107, 109, 111, 110, 113, 112, 115, 114, 116, 118, 117, 120, 119, 121, 123, 122, 125, 124, 126, 128, 129, 127, 131, 130, 133, 132, 135, 134, 137, 136, 138, 140, 139, 141, 142, 144, 143, 146, 145, 148, 147, 150, 149, 152, 151, 154, 153, 155, 157, 156, 159, 158, 161, 160, 163, 162, 0, 165, 164, 166, 168, 167, 170, 169, 171, 172, 174, 173, 176, 175, 178, 177, 180, 179, 182, 181, 184, 183, 185, 187, 186, 189, 188, 191, 190, 193, 192, 1, 195, 194, 196, 198, 197, 199, 200, 202, 201, 204, 203, 206, 205, 208, 207, 210, 209, 212, 211, 213, 215, 214, 217, 216, 219, 218, 221, 220, 2, 223, 222, 225, 224, 226, 228, 227, 229, 230, 232, 231, 234, 233, 236, 235, 238, 237, 240, 239, 242, 241, 243, 245, 244, 247, 246, 249, 248, 251, 250, 3, 253, 252, 255, 254, 256, 258, 257, 260, 259, 262, 261, 264, 263, 266, 265, 268, 267, 270, 269, 272, 271, 274, 273, 276, 275, 278, 277, 280, 279, 282, 281, 284, 283, 286, 285, 288, 287, 290, 289, 293, 291, 294, 292, 296, 295, 298, 297, 301, 299, 302, 300, 304, 303, 308, 305, 309, 306, 310, 307, 312, 311, 314, 313, 316, 315, 317, 319, 318, 321, 320, 323, 322, 325, 324, 327, 326, 329, 328, 331, 330, 332, 334, 333, 336, 335, 338, 337, 340, 339, 342, 341, 344, 343, 346, 345, 348, 347, 350, 349, 352, 351, 354, 353, 356, 355, 358, 357, 359, 361, 360, 363, 362, 365, 364, 367, 366, 369, 368, 371, 370, 373, 372, 375, 374, 377, 376, 379, 378, 381, 380, 383, 382, 385, 384, 387, 386, 389, 388, 391, 390, 393, 392, 394, 396, 395, 398, 397, 400, 399, 402, 401, 404, 403, 406, 405, 408, 407, 409, 411, 410, 413, 412, 415, 414, 417, 416, 419, 418, 421, 420, 423, 422, 425, 424, 427, 426, 429, 428, 431, 430, 432, 434, 433, 436, 435, 438, 437, 440, 439, 442, 441, 444, 443, 446, 445, 448, 447, 449, 450, 451, 452, 454, 453, 455, 456, 457, 459, 458, 460, 462, 461, 464, 463, 465, 466, 468, 467, 470, 469, 472, 471, 474, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 497, 499, 500, 502, 501, 503, 504, 506, 505, 508, 507, 509, 511, 510, 512, 513, 514, 515, 517, 516, 518, 519, 521, 520, 522, 524, 523, 526, 525, 4, 527, 5, 528, 529, 530, 532, 531, 534, 533, 536, 535, 537, 539, 538, 541, 540, 543, 542, 545, 544, 547, 546, 549, 548, 551, 550, 552, 553, 554, 555, 557, 556, 559, 558, 561, 560, 562, 564, 563, 566, 565, 568, 567, 569, 570, 571, 572, 573, 575, 574, 577, 576, 579, 578, 581, 580, 582, 583, 584, 586, 585, 588, 587, 590, 589, 592, 591, 594, 593, 596, 595, 597, 598, 599, 601, 600, 603, 602, 605, 604, 607, 606, 609, 608, 611, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 621, 623, 625, 624, 627, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 647, 650, 649, 652, 651, 655, 653, 656, 654, 657, 658, 659, 660, 662, 661, 664, 663, 666, 665, 668, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 681, 684, 683, 686, 685, 688, 687, 690, 689, 692, 691, 693, 695, 694, 696, 697, 699, 698, 700, 702, 701, 703, 704, 706, 705, 707, 708, 709, 710, 711, 712, 714, 713, 715, 716, 717, 719, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 731, 733, 734, 736, 735, 6, 737, 738, 740, 739, 741, 743, 742, 745, 744, 747, 746, 749, 748, 750, 752, 751, 754, 753, 7, 755, 757, 756, 758, 760, 759, 762, 761, 8, 763, 765, 764, 767, 766, 768, 770, 769, 772, 771, 9, 773, 775, 774, 776, 777, 779, 778, 780, 782, 781, 784, 783, 786, 785, 787, 789, 788, 790, 792, 791, 793, 795, 794, 797, 796, 799, 798, 801, 800, 803, 802, 805, 804, 807, 806, 809, 808, 811, 810, 813, 812, 815, 814, 816, 818, 817, 819, 821, 820, 822, 824, 823, 825, 827, 826, 829, 828, 831, 830, 833, 832, 835, 834, 836, 838, 837, 839, 841, 840, 842, 844, 843, 845, 847, 846, 848, 849, 850, 852, 851, 853, 854, 856, 855, 858, 857, 860, 859, 862, 861, 863, 864, 866, 865, 868, 867, 869, 870, 871, 873, 872, 875, 874, 877, 876, 879, 878, 880, 881, 882, 884, 883, 885, 887, 886, 888, 889, 10, 890, 891, 893, 892, 894, 11, 895, 896, 898, 897, 899, 12, 900, 901, 902, 903, 906, 904, 905, 907, 909, 908, 910, 912, 911, 913, 13, 914, 915, 916, 917, 919, 918, 920, 14, 921, 922, 923, 924, 926, 925, 927, 928, 929, 931, 930, 933, 932, 15, 935, 934, 16, 936, 17, 938, 937, 18, 939, 940, 942, 941, 944, 943, 945, 946, 947, 949, 948, 951, 950, 952 }
  uselistorder i8* inttoptr (i32 1 to i8*), { 4, 3, 2, 1, 0, 5 }
  uselistorder i32 16777216, { 4, 3, 5, 6, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 26, 0, 27, 28, 1, 2, 23, 24, 25 }
  uselistorder i8 6, { 1, 2, 0 }
  uselistorder i8 5, { 1, 0 }
  uselistorder i32 (i32)* @function_1000d570, { 15, 14, 13, 0, 2, 1, 12, 11, 10, 7, 6, 16, 9, 8, 5, 4, 3 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i8 48, { 8, 0, 9, 1, 2, 10, 3, 4, 11, 7, 12, 13, 14, 5, 6 }
  uselistorder i8 1, { 7, 8, 9, 10, 13, 11, 14, 2, 16, 17, 15, 12, 1, 4, 3, 5, 0, 6 }
  uselistorder i1 true, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 9, 12 }
  uselistorder i8 45, { 2, 0, 5, 3, 4, 1 }
  uselistorder label %dec_label_pc_10014894, { 1, 0 }
  uselistorder label %dec_label_pc_10014885, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10014879, { 1, 0 }
  uselistorder label %dec_label_pc_1001486d, { 1, 0 }
  uselistorder label %dec_label_pc_1001485c, { 1, 0 }
  uselistorder label %dec_label_pc_10014858, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10014849, { 1, 0 }
  uselistorder label %dec_label_pc_10014838, { 1, 0 }
  uselistorder label %dec_label_pc_100147ce, { 1, 0 }
  uselistorder label %dec_label_pc_1001479b, { 1, 0 }
  uselistorder label %dec_label_pc_10014793, { 1, 0 }
  uselistorder label %dec_label_pc_10014776, { 1, 0 }
  uselistorder label %dec_label_pc_10014704, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_10014681, { 1, 0 }
}

define i32 @function_1001489d(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001489d:
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1001489d = load i32, i32* @ebx, align 4
  store i32 %v0_1001489d, i32* %stack_var_-4, align 4
  store i32 0, i32* @ebx, align 4
  %v0_100148a0 = load i32, i32* @global_var_1001b62c.212, align 4
  %v12_100148a0 = icmp eq i32 %v0_100148a0, 0
  %v1_100148a6 = icmp eq i1 %v12_100148a0, false
  br i1 %v1_100148a6, label %dec_label_pc_100148bb, label %dec_label_pc_100148a8

dec_label_pc_100148a8:                            ; preds = %dec_label_pc_1001489d
  %v5_100148af = icmp slt i32 %arg1, 97
  br i1 %v5_100148af, label %dec_label_pc_1001490a, label %dec_label_pc_100148b1

dec_label_pc_100148b1:                            ; preds = %dec_label_pc_100148a8
  %v1_100148b1 = add i32 %arg1, -122
  %v6_100148b1 = sub i32 121, %arg1
  %v7_100148b1 = and i32 %v6_100148b1, %arg1
  %v8_100148b1 = icmp slt i32 %v7_100148b1, 0
  %v9_100148b1 = icmp eq i32 %v1_100148b1, 0
  %v10_100148b1 = icmp slt i32 %v1_100148b1, 0
  %v3_100148b4 = icmp eq i1 %v10_100148b1, %v8_100148b1
  %v4_100148b4 = icmp eq i1 %v9_100148b1, false
  %v5_100148b4 = and i1 %v4_100148b4, %v3_100148b4
  br i1 %v5_100148b4, label %dec_label_pc_1001490a, label %dec_label_pc_100148b6

dec_label_pc_100148b6:                            ; preds = %dec_label_pc_100148b1
  %v1_100148b6 = add i32 %arg1, -32
  store i32 %v0_1001489d, i32* @ebx, align 4
  ret i32 %v1_100148b6

dec_label_pc_100148bb:                            ; preds = %dec_label_pc_1001489d
  store i32 ptrtoint (i32* @global_var_1001b78c.213 to i32), i32* @esi, align 4
  %v0_100148c1 = load i32, i32* @edi, align 4
  store i32 %v0_100148c1, i32* %stack_var_-12, align 4
  %v7_100148c3 = call i32 @InterlockedIncrement(i32* nonnull @global_var_1001b78c.213)
  %v0_100148c9 = load i32, i32* @global_var_1001b788.214, align 8
  %v1_100148c9 = load i32, i32* @ebx, align 4
  %v12_100148c9 = icmp eq i32 %v0_100148c9, %v1_100148c9
  %v0_100148cf = load i32, i32* inttoptr (i32 268525740 to i32*), align 4
  store i32 %v0_100148cf, i32* @edi, align 4
  br i1 %v12_100148c9, label %dec_label_pc_100148e5, label %dec_label_pc_100148d7

dec_label_pc_100148d7:                            ; preds = %dec_label_pc_100148bb
  %v0_100148d7 = load i32, i32* @esi, align 4
  %v3_100148d8 = inttoptr i32 %v0_100148d7 to i32*
  %v4_100148d8 = call i32 @InterlockedDecrement(i32* %v3_100148d8)
  %v1_100148dc = call i32 @function_1001039a(i32 19)
  store i32 19, i32* @ecx, align 4
  store i32 1, i32* @ebx, align 4
  br label %dec_label_pc_100148e5

dec_label_pc_100148e5:                            ; preds = %dec_label_pc_100148bb, %dec_label_pc_100148d7
  %v1_100148e9 = trunc i32 %arg1 to i8
  %v2_100148e9 = call i32 @function_1001490c(i8 %v1_100148e9)
  %v0_100148ee = load i32, i32* @ebx, align 4
  %v1_100148ee = icmp eq i32 %v0_100148ee, 0
  br i1 %v1_100148ee, label %dec_label_pc_10014901, label %dec_label_pc_100148f7

dec_label_pc_100148f7:                            ; preds = %dec_label_pc_100148e5
  %v1_100148f9 = call i32 @function_100103fb(i32 19)
  br label %dec_label_pc_10014904

dec_label_pc_10014901:                            ; preds = %dec_label_pc_100148e5
  %v0_10014901 = load i32, i32* @esi, align 4
  %v3_10014902 = inttoptr i32 %v0_10014901 to i32*
  %v4_10014902 = call i32 @InterlockedDecrement(i32* %v3_10014902)
  br label %dec_label_pc_10014904

dec_label_pc_10014904:                            ; preds = %dec_label_pc_10014901, %dec_label_pc_100148f7
  %v2_10014908 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10014908, i32* @edi, align 4
  %v2_1001490a.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1001490a

dec_label_pc_1001490a:                            ; preds = %dec_label_pc_100148b1, %dec_label_pc_100148a8, %dec_label_pc_10014904
  %v0_1001490b = phi i32 [ %arg1, %dec_label_pc_100148b1 ], [ %arg1, %dec_label_pc_100148a8 ], [ %v2_100148e9, %dec_label_pc_10014904 ]
  %v2_1001490a = phi i32 [ %v0_1001489d, %dec_label_pc_100148b1 ], [ %v0_1001489d, %dec_label_pc_100148a8 ], [ %v2_1001490a.pre, %dec_label_pc_10014904 ]
  store i32 %v2_1001490a, i32* @ebx, align 4
  ret i32 %v0_1001490b

; uselistorder directives
  uselistorder i32 %v1_100148b1, { 1, 0 }
  uselistorder i32 (i32*)* @InterlockedDecrement, { 1, 0, 3, 2 }
  uselistorder i32* inttoptr (i32 268525740 to i32*), { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 7, 3, 0, 5, 4, 6 }
  uselistorder label %dec_label_pc_1001490a, { 2, 0, 1 }
  uselistorder label %dec_label_pc_100148e5, { 1, 0 }
}

define i32 @function_1001490c(i8 %arg1) local_unnamed_addr {
dec_label_pc_1001490c:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_7()
  %stack_var_4 = alloca i8, align 1
  store i8 %arg1, i8* %stack_var_4, align 1
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8, align 1
  %v0_1001490f = load i32, i32* @ecx, align 4
  %v5_1001490f = trunc i32 %v0_1001490f to i8
  store i8 %v5_1001490f, i8* %stack_var_-8, align 1
  %v6_1001490f = ptrtoint i8* %stack_var_-8 to i32
  %v0_10014910 = load i32, i32* @global_var_1001b62c.212, align 4
  %v1_10014910 = icmp eq i32 %v0_10014910, 0
  %v0_10014917 = load i32, i32* @ebx, align 4
  store i32 %v0_10014917, i32* %stack_var_-12, align 4
  %v1_10014918 = icmp eq i1 %v1_10014910, false
  %v4_10014937 = sext i8 %arg1 to i32
  br i1 %v1_10014918, label %dec_label_pc_10014937, label %dec_label_pc_1001491a

dec_label_pc_1001491a:                            ; preds = %dec_label_pc_1001490c
  %v12_1001491d = icmp slt i8 %arg1, 97
  br i1 %v12_1001491d, label %dec_label_pc_100149d5, label %dec_label_pc_10014926

dec_label_pc_10014926:                            ; preds = %dec_label_pc_1001491a
  %v6_10014926 = sub nsw i32 121, %v4_10014937
  %v7_10014926 = and i32 %v6_10014926, %v4_10014937
  %v8_10014926 = icmp slt i32 %v7_10014926, 0
  %v9_10014926 = icmp eq i8 %arg1, 122
  %v10_10014926 = icmp slt i8 %arg1, 122
  %v3_10014929 = icmp eq i1 %v10_10014926, %v8_10014926
  %v4_10014929 = icmp eq i1 %v9_10014926, false
  %v5_10014929 = and i1 %v4_10014929, %v3_10014929
  br i1 %v5_10014929, label %dec_label_pc_100149d5, label %dec_label_pc_1001492f

dec_label_pc_1001492f:                            ; preds = %dec_label_pc_10014926
  %v1_1001492f = add nsw i32 %v4_10014937, -32
  br label %dec_label_pc_100149d5

dec_label_pc_10014937:                            ; preds = %dec_label_pc_1001490c
  store i32 %v4_10014937, i32* %ebx.global-to-local, align 4
  %v0_10014942 = load i32, i32* @global_var_100185e0.98, align 32
  %v7_10014949 = icmp sgt i32 %v0_10014942, 1
  br i1 %v7_10014949, label %dec_label_pc_1001494b, label %dec_label_pc_10014957

dec_label_pc_1001494b:                            ; preds = %dec_label_pc_10014937
  %v7_1001494e = call i32 @function_1000e8d2(i8 %arg1, i32 2)
  br label %dec_label_pc_10014962

dec_label_pc_10014957:                            ; preds = %dec_label_pc_10014937
  %v0_10014957 = load i32, i32* @global_var_100183d4, align 4
  %v2_1001495c = mul nsw i32 %v4_10014937, 2
  %v3_1001495c = add i32 %v0_10014957, %v2_1001495c
  %v4_1001495c = inttoptr i32 %v3_1001495c to i8*
  %v5_1001495c = load i8, i8* %v4_1001495c, align 1
  %v6_1001495c = zext i8 %v5_1001495c to i32
  %v1_1001495f = and i32 %v6_1001495c, 2
  br label %dec_label_pc_10014962

dec_label_pc_10014962:                            ; preds = %dec_label_pc_1001494b, %dec_label_pc_10014957
  %v0_10014962 = phi i32 [ %v7_1001494e, %dec_label_pc_1001494b ], [ %v1_1001495f, %dec_label_pc_10014957 ]
  %v1_10014962 = icmp eq i32 %v0_10014962, 0
  %v1_10014964 = icmp eq i1 %v1_10014962, false
  br i1 %v1_10014964, label %dec_label_pc_1001496a, label %dec_label_pc_10014966

dec_label_pc_10014966:                            ; preds = %dec_label_pc_1001496a, %dec_label_pc_10014962
  %v0_10014966 = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_100149d5

dec_label_pc_1001496a:                            ; preds = %dec_label_pc_10014962
  %v0_1001496a = load i32, i32* @global_var_100183d4, align 4
  store i32 %v0_1001496a, i32* @edx, align 4
  %v0_10014970 = load i32, i32* %ebx.global-to-local, align 4
  %v2_10014972 = sdiv i32 %v0_10014970, 256
  %v1_10014975 = and i32 %v2_10014972, 255
  %v2_10014978 = mul nuw nsw i32 %v1_10014975, 2
  %v3_10014978 = or i32 %v2_10014978, 1
  %v4_10014978 = add i32 %v3_10014978, %v0_1001496a
  %v5_10014978 = inttoptr i32 %v4_10014978 to i8*
  %v6_10014978 = load i8, i8* %v5_10014978, align 1
  %v8_10014978 = icmp sgt i8 %v6_10014978, -1
  %tmp26 = icmp sgt i8 %v6_10014978, -1
  %tmp27 = zext i1 %tmp26 to i32
  %tmp25 = sub nsw i32 2, %tmp27
  %storemerge5.in = select i1 %v8_10014978, i32 %v0_10014970, i32 %v2_10014972
  %storemerge5 = trunc i32 %storemerge5.in to i8
  store i8 %storemerge5, i8* %stack_var_4, align 1
  %v2_100149a2 = ptrtoint i8* %stack_var_4 to i32
  %v0_100149ab = load i32, i32* @global_var_1001b62c.212, align 4
  %v9_100149b1 = trunc i32 %v2_100149a2 to i8
  %v10_100149b1 = call i32 @function_10013d49(i32 %v0_100149ab, i32 512, i8 %v9_100149b1, i32 %tmp25, i32 %v6_1001490f, i32 3, i32 0, i32 1)
  %v1_100149b9 = icmp eq i32 %v10_100149b1, 0
  br i1 %v1_100149b9, label %dec_label_pc_10014966, label %dec_label_pc_100149bd

dec_label_pc_100149bd:                            ; preds = %dec_label_pc_1001496a
  %v9_100149bd = icmp eq i32 %v10_100149b1, 1
  %v1_100149c0 = icmp eq i1 %v9_100149bd, false
  br i1 %v1_100149c0, label %dec_label_pc_100149c8, label %dec_label_pc_100149c2

dec_label_pc_100149c2:                            ; preds = %dec_label_pc_100149bd
  %v3_100149c2 = load i8, i8* %stack_var_-8, align 1
  %v4_100149c2 = sext i8 %v3_100149c2 to i32
  br label %dec_label_pc_100149d5

dec_label_pc_100149c8:                            ; preds = %dec_label_pc_100149bd
  %v4_100149c8 = zext i8 %tmp to i32
  %v3_100149cc = load i8, i8* %stack_var_-8, align 1
  %v4_100149cc = sext i8 %v3_100149cc to i32
  %v2_100149d0 = mul nuw nsw i32 %v4_100149c8, 256
  %v2_100149d3 = or i32 %v4_100149cc, %v2_100149d0
  br label %dec_label_pc_100149d5

dec_label_pc_100149d5:                            ; preds = %dec_label_pc_10014926, %dec_label_pc_1001491a, %dec_label_pc_100149c2, %dec_label_pc_10014966, %dec_label_pc_1001492f, %dec_label_pc_100149c8
  %v0_100149d7 = phi i32 [ %v4_10014937, %dec_label_pc_10014926 ], [ %v4_10014937, %dec_label_pc_1001491a ], [ %v4_100149c2, %dec_label_pc_100149c2 ], [ %v0_10014966, %dec_label_pc_10014966 ], [ %v1_1001492f, %dec_label_pc_1001492f ], [ %v2_100149d3, %dec_label_pc_100149c8 ]
  %v2_100149d5 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_100149d5, i32* @ebx, align 4
  ret i32 %v0_100149d7

; uselistorder directives
  uselistorder i32 %v2_10014972, { 1, 0 }
  uselistorder i32 %v0_10014970, { 1, 0 }
  uselistorder i32 %v4_10014937, { 1, 2, 3, 6, 4, 0, 5 }
  uselistorder i8* %stack_var_-8, { 3, 2, 0, 1 }
  uselistorder i8* %stack_var_4, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i8, i32, i32, i32, i32, i32)* @function_10013d49, { 1, 0 }
  uselistorder i32 3, { 11, 86, 87, 88, 89, 90, 61, 0, 1, 97, 10, 98, 99, 74, 75, 76, 77, 78, 79, 64, 100, 101, 102, 65, 103, 104, 105, 106, 55, 56, 12, 62, 57, 58, 13, 14, 59, 2, 3, 4, 63, 5, 15, 16, 6, 91, 92, 7, 8, 80, 81, 82, 83, 84, 85, 66, 115, 116, 117, 67, 118, 119, 122, 123, 9, 109, 110, 111, 112, 113, 114, 120, 121, 107, 108, 70, 60, 71, 28, 29, 30, 31, 32, 33, 34, 35, 36, 17, 50, 51, 72, 18, 19, 20, 21, 37, 38, 39, 40, 41, 42, 43, 44, 45, 22, 46, 47, 48, 49, 73, 68, 52, 69, 53, 54, 23, 24, 25, 26, 27, 93, 94, 95, 96 }
  uselistorder i32 512, { 5, 0, 2, 1, 3, 4, 6 }
  uselistorder i32 (i8, i32)* @function_1000e8d2, { 4, 5, 6, 7, 1, 0, 2, 3 }
  uselistorder i32 -32, { 0, 1, 7, 8, 9, 10, 11, 12, 17, 18, 2, 3, 13, 14, 4, 5, 15, 16, 6 }
  uselistorder i8 122, { 1, 0 }
  uselistorder i8 97, { 2, 0, 1 }
  uselistorder i8 %arg1, { 1, 2, 0, 4, 3, 5 }
  uselistorder label %dec_label_pc_100149d5, { 5, 2, 3, 4, 0, 1 }
  uselistorder label %dec_label_pc_10014962, { 1, 0 }
}

define i32 @function_10014aea(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10014aea:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i16 @__decompiler_undefined_function_0()
  %tmp14 = call i32 @__decompiler_undefined_function_1()
  %tmp15 = call i16 @__decompiler_undefined_function_0()
  %tmp16 = call i8 @__decompiler_undefined_function_7()
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-40 = alloca i16, align 2
  %v15_10014aed = ptrtoint i16* %stack_var_-40 to i32
  store i32 %arg2, i32* %ebx.global-to-local, align 4
  %v0_10014af4 = load i32, i32* @esi, align 4
  store i32 %v0_10014af4, i32* %stack_var_-48, align 4
  %v4_10014af5 = ptrtoint i16* %arg1 to i32
  store i32 %v4_10014af5, i32* @esi, align 4
  %v1_10014af8 = add i32 %arg2, 10
  %v2_10014af8 = inttoptr i32 %v1_10014af8 to i16*
  %v3_10014af8 = load i16, i16* %v2_10014af8, align 2
  %v4_10014af8 = zext i16 %v3_10014af8 to i32
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_10014afe = load i32, i32* @edi, align 4
  store i32 %v0_10014afe, i32* %stack_var_-52, align 4
  store i16 0, i16* %stack_var_-40, align 2
  store i32 0, i32* %stack_var_-36, align 4
  %v1_10014b0b = add i32 %v4_10014af5, 10
  %v2_10014b0b = inttoptr i32 %v1_10014b0b to i16*
  %v3_10014b0b = load i16, i16* %v2_10014b0b, align 2
  %v4_10014b0b = zext i16 %v3_10014b0b to i32
  %v2_10014b1613 = xor i16 %v3_10014b0b, %v3_10014af8
  %v2_10014b16 = zext i16 %v2_10014b1613 to i32
  %v2_10014b18 = and i32 %v4_10014b0b, 32767
  store i32 %v2_10014b18, i32* %eax.global-to-local, align 4
  %v2_10014b1a = and i32 %v4_10014af8, 32767
  %v1_10014b1c = and i32 %v2_10014b16, 32768
  store i32 %v1_10014b1c, i32* @edi, align 4
  %v1_10014b22 = trunc i32 %v2_10014b18 to i16
  %v6_10014b22 = icmp ne i16 %v1_10014b22, 32767
  %v2_10014b26 = add nuw nsw i32 %v2_10014b18, %v2_10014b1a
  store i32 %v2_10014b26, i32* @edx, align 4
  %v5_10014b29 = inttoptr i32 %v2_10014b26 to i16*
  %v1_10014b2c = icmp eq i1 %v6_10014b22, false
  br i1 %v1_10014b2c, label %dec_label_pc_10014cea, label %dec_label_pc_10014b32

dec_label_pc_10014b32:                            ; preds = %dec_label_pc_10014aea
  %v1_10014b32 = trunc i32 %v2_10014b1a to i16
  %v6_10014b32 = icmp ne i16 %v1_10014b32, 32767
  %v1_10014b37 = icmp eq i1 %v6_10014b32, false
  br i1 %v1_10014b37, label %dec_label_pc_10014cea, label %dec_label_pc_10014b3d

dec_label_pc_10014b3d:                            ; preds = %dec_label_pc_10014b32
  %v1_10014b3d = trunc i32 %v2_10014b26 to i16
  %v8_10014b42 = icmp ugt i16 %v1_10014b3d, -16387
  br i1 %v8_10014b42, label %dec_label_pc_10014cea, label %dec_label_pc_10014b48

dec_label_pc_10014b48:                            ; preds = %dec_label_pc_10014b3d
  %v8_10014b4d = icmp ugt i16 %v1_10014b3d, 16319
  br i1 %v8_10014b4d, label %dec_label_pc_10014b53, label %dec_label_pc_10014b4f

dec_label_pc_10014b4f:                            ; preds = %dec_label_pc_10014b48
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10014b8d

dec_label_pc_10014b53:                            ; preds = %dec_label_pc_10014b48
  %v4_10014b53 = icmp eq i16 %v1_10014b22, 0
  store i32 2147483647, i32* @edx, align 4
  %v1_10014b5b = icmp eq i1 %v4_10014b53, false
  br i1 %v1_10014b5b, label %dec_label_pc_10014b75, label %dec_label_pc_10014b5d

dec_label_pc_10014b5d:                            ; preds = %dec_label_pc_10014b53
  %v5_10014b5d = add nuw nsw i32 %v2_10014b26, 1
  %v22_10014b5d = inttoptr i32 %v5_10014b5d to i16*
  %v1_10014b60 = add i32 %v4_10014af5, 8
  %v2_10014b60 = inttoptr i32 %v1_10014b60 to i32*
  %v3_10014b60 = load i32, i32* %v2_10014b60, align 4
  %v5_10014b60 = and i32 %v3_10014b60, 2147483647
  %v6_10014b60 = icmp eq i32 %v5_10014b60, 0
  %v1_10014b63 = icmp eq i1 %v6_10014b60, false
  br i1 %v1_10014b63, label %dec_label_pc_10014b75, label %dec_label_pc_10014b65

dec_label_pc_10014b65:                            ; preds = %dec_label_pc_10014b5d
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_10014b67 = add i32 %v4_10014af5, 4
  %v2_10014b67 = inttoptr i32 %v1_10014b67 to i32*
  %v3_10014b67 = load i32, i32* %v2_10014b67, align 4
  %v15_10014b67 = icmp eq i32 %v3_10014b67, 0
  %v1_10014b6a = icmp eq i1 %v15_10014b67, false
  br i1 %v1_10014b6a, label %dec_label_pc_10014b77, label %dec_label_pc_10014b6c

dec_label_pc_10014b6c:                            ; preds = %dec_label_pc_10014b65
  %v1_10014b6c = bitcast i16* %arg1 to i32*
  %v2_10014b6c = load i32, i32* %v1_10014b6c, align 4
  %v14_10014b6c = icmp eq i32 %v2_10014b6c, 0
  %v1_10014b6e = icmp eq i1 %v14_10014b6c, false
  br i1 %v1_10014b6e, label %dec_label_pc_10014b77, label %dec_label_pc_10014ce4

dec_label_pc_10014b75:                            ; preds = %dec_label_pc_10014b5d, %dec_label_pc_10014b53
  %stack_var_4.0 = phi i16* [ %v5_10014b29, %dec_label_pc_10014b53 ], [ %v22_10014b5d, %dec_label_pc_10014b5d ]
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10014b77

dec_label_pc_10014b77:                            ; preds = %dec_label_pc_10014b6c, %dec_label_pc_10014b65, %dec_label_pc_10014b75
  %stack_var_4.1 = phi i16* [ %stack_var_4.0, %dec_label_pc_10014b75 ], [ %v22_10014b5d, %dec_label_pc_10014b65 ], [ %v22_10014b5d, %dec_label_pc_10014b6c ]
  %v15_10014b77 = icmp eq i16 %v1_10014b32, 0
  %v1_10014b7a = icmp eq i1 %v15_10014b77, false
  br i1 %v1_10014b7a, label %dec_label_pc_10014b9a, label %dec_label_pc_10014b7c

dec_label_pc_10014b7c:                            ; preds = %dec_label_pc_10014b77
  %v4_10014b7c = ptrtoint i16* %stack_var_4.1 to i32
  %v5_10014b7c = add i32 %v4_10014b7c, 1
  %v22_10014b7c = inttoptr i32 %v5_10014b7c to i16*
  %v1_10014b7f = add i32 %arg2, 8
  %v2_10014b7f = inttoptr i32 %v1_10014b7f to i32*
  %v3_10014b7f = load i32, i32* %v2_10014b7f, align 4
  %v5_10014b7f = and i32 %v3_10014b7f, 2147483647
  %v6_10014b7f = icmp eq i32 %v5_10014b7f, 0
  %v1_10014b82 = icmp eq i1 %v6_10014b7f, false
  br i1 %v1_10014b82, label %dec_label_pc_10014b9a, label %dec_label_pc_10014b84

dec_label_pc_10014b84:                            ; preds = %dec_label_pc_10014b7c
  %v1_10014b84 = add i32 %arg2, 4
  %v2_10014b84 = inttoptr i32 %v1_10014b84 to i32*
  %v3_10014b84 = load i32, i32* %v2_10014b84, align 4
  %v15_10014b84 = icmp eq i32 %v3_10014b84, 0
  %v1_10014b87 = icmp eq i1 %v15_10014b84, false
  br i1 %v1_10014b87, label %dec_label_pc_10014b9a, label %dec_label_pc_10014b89

dec_label_pc_10014b89:                            ; preds = %dec_label_pc_10014b84
  %v1_10014b89 = inttoptr i32 %arg2 to i32*
  %v2_10014b89 = load i32, i32* %v1_10014b89, align 4
  %v14_10014b89 = icmp eq i32 %v2_10014b89, 0
  %v1_10014b8b = icmp eq i1 %v14_10014b89, false
  br i1 %v1_10014b8b, label %dec_label_pc_10014b9a, label %dec_label_pc_10014b8d

dec_label_pc_10014b8d:                            ; preds = %dec_label_pc_10014b89, %dec_label_pc_10014b4f
  %v2_10014b8d = add i32 %v4_10014af5, 8
  %v3_10014b8d = inttoptr i32 %v2_10014b8d to i32*
  store i32 0, i32* %v3_10014b8d, align 4
  %v0_10014b90 = load i32, i32* %eax.global-to-local, align 4
  %v1_10014b90 = load i32, i32* @esi, align 4
  %v2_10014b90 = add i32 %v1_10014b90, 4
  %v3_10014b90 = inttoptr i32 %v2_10014b90 to i32*
  store i32 %v0_10014b90, i32* %v3_10014b90, align 4
  %v0_10014b93 = load i32, i32* %eax.global-to-local, align 4
  %v1_10014b93 = load i32, i32* @esi, align 4
  %v2_10014b93 = inttoptr i32 %v1_10014b93 to i32*
  store i32 %v0_10014b93, i32* %v2_10014b93, align 4
  br label %dec_label_pc_10014d05

dec_label_pc_10014b9a:                            ; preds = %dec_label_pc_10014b89, %dec_label_pc_10014b84, %dec_label_pc_10014b7c, %dec_label_pc_10014b77
  %stack_var_4.2 = phi i16* [ %stack_var_4.1, %dec_label_pc_10014b77 ], [ %v22_10014b7c, %dec_label_pc_10014b7c ], [ %v22_10014b7c, %dec_label_pc_10014b84 ], [ %v22_10014b7c, %dec_label_pc_10014b89 ]
  %v2_10014b9d = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10014b9d, i32* %eax.global-to-local, align 4
  %tmp36 = bitcast i32* %stack_var_-36 to i16*
  br label %dec_label_pc_10014bb5

dec_label_pc_10014bb5:                            ; preds = %dec_label_pc_10014bfe.dec_label_pc_10014bb5_crit_edge, %dec_label_pc_10014b9a
  %v0_10014bb7 = phi i32 [ %arg2, %dec_label_pc_10014b9a ], [ %v0_10014bb7.pre, %dec_label_pc_10014bfe.dec_label_pc_10014bb5_crit_edge ]
  %v1_10014bb5 = phi i32 [ %v4_10014af5, %dec_label_pc_10014b9a ], [ %v1_10014bb5.pre, %dec_label_pc_10014bfe.dec_label_pc_10014bb5_crit_edge ]
  %stack_var_-8.0 = phi i16* [ %tmp36, %dec_label_pc_10014b9a ], [ %v23_10014bfe, %dec_label_pc_10014bfe.dec_label_pc_10014bb5_crit_edge ]
  %stack_var_-20.0 = phi i32 [ 0, %dec_label_pc_10014b9a ], [ %v4_10014c02, %dec_label_pc_10014bfe.dec_label_pc_10014bb5_crit_edge ]
  %stack_var_8.0 = phi i32 [ 5, %dec_label_pc_10014b9a ], [ %v4_10014c05, %dec_label_pc_10014bfe.dec_label_pc_10014bb5_crit_edge ]
  %v2_10014bad = mul i32 %stack_var_-20.0, 2
  %v2_10014bb5 = add i32 %v1_10014bb5, %v2_10014bad
  %v1_10014bb7 = add i32 %v0_10014bb7, 8
  store i32 %stack_var_8.0, i32* %eax.global-to-local, align 4
  %v4_10014bd5 = ptrtoint i16* %stack_var_-8.0 to i32
  %v1_10014bd8 = add i32 %v4_10014bd5, -4
  %v1_10014bdd = inttoptr i32 %v1_10014bd8 to i32*
  br label %dec_label_pc_10014bc6

dec_label_pc_10014bc6:                            ; preds = %dec_label_pc_10014bf1, %dec_label_pc_10014bb5
  %stack_var_-12.0.in = phi i32 [ %v2_10014bb5, %dec_label_pc_10014bb5 ], [ %v5_10014bf1, %dec_label_pc_10014bf1 ]
  %stack_var_-16.0.in = phi i32 [ %v1_10014bb7, %dec_label_pc_10014bb5 ], [ %v5_10014bf5, %dec_label_pc_10014bf1 ]
  %stack_var_-28.0 = phi i32 [ %stack_var_8.0, %dec_label_pc_10014bb5 ], [ %v4_10014bf9, %dec_label_pc_10014bf1 ]
  %stack_var_-16.0 = inttoptr i32 %stack_var_-16.0.in to i16*
  %stack_var_-12.0 = inttoptr i32 %stack_var_-12.0.in to i16*
  store i32 %stack_var_-12.0.in, i32* %eax.global-to-local, align 4
  %v2_10014bcc = load i16, i16* %stack_var_-12.0, align 2
  %v3_10014bcc = zext i16 %v2_10014bcc to i32
  store i32 %v3_10014bcc, i32* %eax.global-to-local, align 4
  %v2_10014bcf = load i16, i16* %stack_var_-16.0, align 2
  %v3_10014bd2 = zext i16 %v2_10014bcf to i32
  %v4_10014bd2 = mul nuw i32 %v3_10014bd2, %v3_10014bcc
  store i32 %v4_10014bd2, i32* %eax.global-to-local, align 4
  %v2_10014bdd = load i32, i32* %v1_10014bdd, align 4
  %v4_10014bdf = call i32 @function_10013f98(i32 %v2_10014bdd, i32 %v4_10014bd2)
  store i32 %v4_10014bdf, i32* %eax.global-to-local, align 4
  %v1_10014be7 = icmp eq i32 %v4_10014bdf, 0
  br i1 %v1_10014be7, label %dec_label_pc_10014bf1, label %dec_label_pc_10014beb

dec_label_pc_10014beb:                            ; preds = %dec_label_pc_10014bc6
  store i32 %v4_10014bd5, i32* %eax.global-to-local, align 4
  %v2_10014bee = load i16, i16* %stack_var_-8.0, align 2
  %v3_10014bee = add i16 %v2_10014bee, 1
  store i16 %v3_10014bee, i16* %stack_var_-8.0, align 2
  br label %dec_label_pc_10014bf1

dec_label_pc_10014bf1:                            ; preds = %dec_label_pc_10014bc6, %dec_label_pc_10014beb
  %v5_10014bf1 = add i32 %stack_var_-12.0.in, 2
  %v5_10014bf5 = add i32 %stack_var_-16.0.in, -2
  %v4_10014bf9 = add i32 %stack_var_-28.0, -1
  %v11_10014bf9 = icmp eq i32 %v4_10014bf9, 0
  %v1_10014bfc = icmp eq i1 %v11_10014bf9, false
  br i1 %v1_10014bfc, label %dec_label_pc_10014bc6, label %dec_label_pc_10014bfe

dec_label_pc_10014bfe:                            ; preds = %dec_label_pc_10014bf1
  %v4_10014c02 = add nuw nsw i32 %stack_var_-20.0, 1
  %exitcond = icmp eq i32 %v4_10014c02, 5
  br i1 %exitcond, label %dec_label_pc_10014c0e, label %dec_label_pc_10014bfe.dec_label_pc_10014bb5_crit_edge

dec_label_pc_10014bfe.dec_label_pc_10014bb5_crit_edge: ; preds = %dec_label_pc_10014bfe
  %v4_10014c05 = add nsw i32 %stack_var_8.0, -1
  %v5_10014bfe = add i32 %v4_10014bd5, 2
  %v23_10014bfe = inttoptr i32 %v5_10014bfe to i16*
  %v1_10014bb5.pre = load i32, i32* @esi, align 4
  %v0_10014bb7.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10014bb5

dec_label_pc_10014c0e:                            ; preds = %dec_label_pc_10014bfe
  %v4_10014c0e = ptrtoint i16* %stack_var_4.2 to i32
  %v5_10014c0e = add i32 %v4_10014c0e, 49154
  %v23_10014c0e = inttoptr i32 %v5_10014c0e to i16*
  %v5_10014c15 = trunc i32 %v5_10014c0e to i16
  %tmp39 = icmp slt i16 %v5_10014c15, 1
  br i1 %tmp39, label %dec_label_pc_10014c41, label %dec_label_pc_10014c1c.preheader

dec_label_pc_10014c1c.preheader:                  ; preds = %dec_label_pc_10014c0e
  %v5_10014c1c = icmp sgt i8 %tmp16, -1
  %v1_10014c20 = icmp eq i1 %v5_10014c1c, false
  %tmp40 = bitcast i16* %stack_var_-40 to i32*
  br label %dec_label_pc_10014c1c

dec_label_pc_10014c1c:                            ; preds = %dec_label_pc_10014c1c.preheader, %dec_label_pc_10014c22
  %stack_var_4.3 = phi i16* [ %v22_10014c2b, %dec_label_pc_10014c22 ], [ %v23_10014c0e, %dec_label_pc_10014c1c.preheader ]
  br i1 %v1_10014c20, label %dec_label_pc_10014c3a, label %dec_label_pc_10014c22

dec_label_pc_10014c22:                            ; preds = %dec_label_pc_10014c1c
  store i32 %v15_10014aed, i32* %eax.global-to-local, align 4
  %v3_10014c26 = call i32 @function_10014017(i32* %tmp40)
  store i32 %v3_10014c26, i32* %eax.global-to-local, align 4
  %v4_10014c2b = ptrtoint i16* %stack_var_4.3 to i32
  %v5_10014c2b = add i32 %v4_10014c2b, 65535
  %v22_10014c2b = inttoptr i32 %v5_10014c2b to i16*
  %v5_10014c33 = trunc i32 %v5_10014c2b to i16
  %tmp41 = icmp slt i16 %v5_10014c33, 1
  %tmp42 = icmp eq i1 %tmp41, false
  br i1 %tmp42, label %dec_label_pc_10014c1c, label %dec_label_pc_10014c3a

dec_label_pc_10014c3a:                            ; preds = %dec_label_pc_10014c22, %dec_label_pc_10014c1c
  %stack_var_4.4 = phi i16* [ %v23_10014c0e, %dec_label_pc_10014c1c ], [ %v22_10014c2b, %dec_label_pc_10014c22 ]
  %v4_10014c3a = ptrtoint i16* %stack_var_4.4 to i32
  %v5_10014c3a = trunc i32 %v4_10014c3a to i16
  %tmp43 = icmp slt i16 %v5_10014c3a, 1
  %tmp44 = icmp eq i1 %tmp43, false
  br i1 %tmp44, label %dec_label_pc_10014c7a, label %dec_label_pc_10014c41

dec_label_pc_10014c41:                            ; preds = %dec_label_pc_10014c3a, %dec_label_pc_10014c0e
  %stack_var_4.5 = phi i16* [ %v23_10014c0e, %dec_label_pc_10014c0e ], [ %stack_var_4.4, %dec_label_pc_10014c3a ]
  %v4_10014c41 = ptrtoint i16* %stack_var_4.5 to i32
  %v5_10014c41 = add i32 %v4_10014c41, 65535
  %v22_10014c41 = inttoptr i32 %v5_10014c41 to i16*
  %v5_10014c48 = trunc i32 %v5_10014c41 to i16
  %v7_10014c48 = icmp slt i16 %v5_10014c48, 0
  %v2_10014c4d = icmp eq i1 %v7_10014c48, false
  br i1 %v2_10014c4d, label %dec_label_pc_10014c7a, label %dec_label_pc_10014c4f

dec_label_pc_10014c4f:                            ; preds = %dec_label_pc_10014c41
  %v1_10014c53 = sub i32 -65535, %v4_10014c41
  store i32 %v1_10014c53, i32* %eax.global-to-local, align 4
  store i32 %v1_10014c53, i32* %ebx.global-to-local, align 4
  %tmp45 = bitcast i16* %stack_var_-40 to i32*
  br label %dec_label_pc_10014c5a

dec_label_pc_10014c5a:                            ; preds = %dec_label_pc_10014c63, %dec_label_pc_10014c4f
  %stack_var_-24.0 = phi i32 [ 0, %dec_label_pc_10014c4f ], [ %stack_var_-24.1, %dec_label_pc_10014c63 ]
  %v3_10014c5a = load i16, i16* %stack_var_-40, align 2
  %v6_10014c5a = and i16 %v3_10014c5a, 1
  %v7_10014c5a = icmp eq i16 %v6_10014c5a, 0
  br i1 %v7_10014c5a, label %dec_label_pc_10014c63, label %dec_label_pc_10014c60

dec_label_pc_10014c60:                            ; preds = %dec_label_pc_10014c5a
  %v4_10014c60 = add i32 %stack_var_-24.0, 1
  br label %dec_label_pc_10014c63

dec_label_pc_10014c63:                            ; preds = %dec_label_pc_10014c5a, %dec_label_pc_10014c60
  %stack_var_-24.1 = phi i32 [ %stack_var_-24.0, %dec_label_pc_10014c5a ], [ %v4_10014c60, %dec_label_pc_10014c60 ]
  store i32 %v15_10014aed, i32* %eax.global-to-local, align 4
  %v3_10014c67 = call i32 @function_10014045(i32* nonnull %tmp45)
  store i32 %v3_10014c67, i32* %eax.global-to-local, align 4
  %v0_10014c6c = load i32, i32* %ebx.global-to-local, align 4
  %v1_10014c6c = add i32 %v0_10014c6c, -1
  %v8_10014c6c = icmp eq i32 %v1_10014c6c, 0
  store i32 %v1_10014c6c, i32* %ebx.global-to-local, align 4
  %v1_10014c6e = icmp eq i1 %v8_10014c6c, false
  br i1 %v1_10014c6e, label %dec_label_pc_10014c5a, label %dec_label_pc_10014c70

dec_label_pc_10014c70:                            ; preds = %dec_label_pc_10014c63
  %v4_10014c70 = icmp eq i32 %stack_var_-24.1, 0
  br i1 %v4_10014c70, label %dec_label_pc_10014c7a, label %dec_label_pc_10014c76

dec_label_pc_10014c76:                            ; preds = %dec_label_pc_10014c70
  %v3_10014c76 = load i16, i16* %stack_var_-40, align 2
  %v6_10014c76 = shl i16 %v3_10014c76, 8
  %sext = ashr exact i16 %v6_10014c76, 8
  %v16_10014c76 = or i16 %sext, 1
  store i16 %v16_10014c76, i16* %stack_var_-40, align 2
  br label %dec_label_pc_10014c7a

dec_label_pc_10014c7a:                            ; preds = %dec_label_pc_10014c70, %dec_label_pc_10014c41, %dec_label_pc_10014c3a, %dec_label_pc_10014c76
  %stack_var_4.6 = phi i16* [ %v22_10014c41, %dec_label_pc_10014c41 ], [ null, %dec_label_pc_10014c70 ], [ null, %dec_label_pc_10014c76 ], [ %stack_var_4.4, %dec_label_pc_10014c3a ]
  %v3_10014c7a = load i16, i16* %stack_var_-40, align 2
  %v7_10014c7a = icmp sgt i16 %v3_10014c7a, -1
  %v10_10014c7a = icmp eq i16 %v3_10014c7a, -32768
  %v2_10014c80 = or i1 %v7_10014c7a, %v10_10014c7a
  br i1 %v2_10014c80, label %dec_label_pc_10014c82, label %dec_label_pc_10014c91

dec_label_pc_10014c82:                            ; preds = %dec_label_pc_10014c7a
  %v4_10014c82 = sext i16 %v3_10014c7a to i32
  %v1_10014c85 = and i32 %v4_10014c82, 131071
  store i32 %v1_10014c85, i32* %eax.global-to-local, align 4
  %v6_10014c8a = icmp eq i32 %v1_10014c85, 98304
  %v1_10014c8f = icmp eq i1 %v6_10014c8a, false
  br i1 %v1_10014c8f, label %dec_label_pc_10014cc6, label %dec_label_pc_10014c91

dec_label_pc_10014c91:                            ; preds = %dec_label_pc_10014c7a, %dec_label_pc_10014c82
  %v4_10014c91 = sext i16 %tmp15 to i32
  %v5_10014c91 = add nsw i32 %v4_10014c91, 1
  %v14_10014c91 = icmp eq i32 %v5_10014c91, 0
  %v1_10014c95 = icmp eq i1 %v14_10014c91, false
  br i1 %v1_10014c95, label %dec_label_pc_10014cc3, label %dec_label_pc_10014c97

dec_label_pc_10014c97:                            ; preds = %dec_label_pc_10014c91
  %v13_10014c9b = icmp eq i32 %tmp14, -1
  %v1_10014c9f = icmp eq i1 %v13_10014c9b, false
  br i1 %v1_10014c9f, label %dec_label_pc_10014cbe, label %dec_label_pc_10014ca1

dec_label_pc_10014ca1:                            ; preds = %dec_label_pc_10014c97
  %v13_10014ca5 = icmp eq i16 %tmp, -1
  %v1_10014cab = icmp eq i1 %v13_10014ca5, false
  br i1 %v1_10014cab, label %dec_label_pc_10014cb8, label %dec_label_pc_10014cad

dec_label_pc_10014cad:                            ; preds = %dec_label_pc_10014ca1
  %v4_10014cad = ptrtoint i16* %stack_var_4.6 to i32
  %v5_10014cad = add i32 %v4_10014cad, 1
  %v22_10014cad = inttoptr i32 %v5_10014cad to i16*
  br label %dec_label_pc_10014cc6

dec_label_pc_10014cb8:                            ; preds = %dec_label_pc_10014ca1
  br label %dec_label_pc_10014cc6

dec_label_pc_10014cbe:                            ; preds = %dec_label_pc_10014c97
  br label %dec_label_pc_10014cc6

dec_label_pc_10014cc3:                            ; preds = %dec_label_pc_10014c91
  %v22_10014cc3 = trunc i32 %v5_10014c91 to i16
  br label %dec_label_pc_10014cc6

dec_label_pc_10014cc6:                            ; preds = %dec_label_pc_10014c82, %dec_label_pc_10014cbe, %dec_label_pc_10014cb8, %dec_label_pc_10014cad, %dec_label_pc_10014cc3
  %stack_var_-38.0 = phi i16 [ %tmp15, %dec_label_pc_10014c82 ], [ %v22_10014cc3, %dec_label_pc_10014cc3 ], [ 0, %dec_label_pc_10014cbe ], [ 0, %dec_label_pc_10014cb8 ], [ 0, %dec_label_pc_10014cad ]
  %stack_var_4.7 = phi i16* [ %stack_var_4.6, %dec_label_pc_10014c82 ], [ %stack_var_4.6, %dec_label_pc_10014cc3 ], [ %stack_var_4.6, %dec_label_pc_10014cbe ], [ %stack_var_4.6, %dec_label_pc_10014cb8 ], [ %v22_10014cad, %dec_label_pc_10014cad ]
  %v4_10014cc6 = ptrtoint i16* %stack_var_4.7 to i32
  store i32 %v4_10014cc6, i32* %eax.global-to-local, align 4
  %v1_10014cc9 = trunc i32 %v4_10014cc6 to i16
  %v6_10014cc9 = icmp ult i16 %v1_10014cc9, 32767
  %v1_10014ccd = icmp eq i1 %v6_10014cc9, false
  %v0_10014cea.pre = load i32, i32* @edi, align 4
  br i1 %v1_10014ccd, label %dec_label_pc_10014cc6.dec_label_pc_10014cea_crit_edge, label %dec_label_pc_10014ccf

dec_label_pc_10014cc6.dec_label_pc_10014cea_crit_edge: ; preds = %dec_label_pc_10014cc6
  %v4_10014cef.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10014cea

dec_label_pc_10014ccf:                            ; preds = %dec_label_pc_10014cc6
  %v2_10014cd3 = or i32 %v0_10014cea.pre, %v4_10014cc6
  store i32 %v2_10014cd3, i32* %eax.global-to-local, align 4
  %v2_10014cd5 = load i32, i32* @esi, align 4
  %v3_10014cd5 = inttoptr i32 %v2_10014cd5 to i16*
  store i16 %stack_var_-38.0, i16* %v3_10014cd5, align 2
  %v3_10014cd8 = load i32, i32* %stack_var_-36, align 4
  %v1_10014cdb = load i32, i32* @esi, align 4
  %v2_10014cdb = add i32 %v1_10014cdb, 2
  %v3_10014cdb = inttoptr i32 %v2_10014cdb to i32*
  store i32 %v3_10014cd8, i32* %v3_10014cdb, align 4
  %v1_10014ce1 = load i32, i32* @esi, align 4
  %v2_10014ce1 = add i32 %v1_10014ce1, 6
  %v3_10014ce1 = inttoptr i32 %v2_10014ce1 to i32*
  store i32 0, i32* %v3_10014ce1, align 4
  %v0_10014ce4.pre = load i32, i32* %eax.global-to-local, align 4
  %v2_10014ce4.pre = load i32, i32* @esi, align 4
  %phitmp = trunc i32 %v0_10014ce4.pre to i16
  br label %dec_label_pc_10014ce4

dec_label_pc_10014ce4:                            ; preds = %dec_label_pc_10014b6c, %dec_label_pc_10014ccf
  %v2_10014ce4 = phi i32 [ %v4_10014af5, %dec_label_pc_10014b6c ], [ %v2_10014ce4.pre, %dec_label_pc_10014ccf ]
  %v0_10014ce4 = phi i16 [ 0, %dec_label_pc_10014b6c ], [ %phitmp, %dec_label_pc_10014ccf ]
  %v3_10014ce4 = add i32 %v2_10014ce4, 10
  %v4_10014ce4 = inttoptr i32 %v3_10014ce4 to i16*
  store i16 %v0_10014ce4, i16* %v4_10014ce4, align 2
  br label %dec_label_pc_10014d05

dec_label_pc_10014cea:                            ; preds = %dec_label_pc_10014cc6.dec_label_pc_10014cea_crit_edge, %dec_label_pc_10014b3d, %dec_label_pc_10014b32, %dec_label_pc_10014aea
  %v4_10014cef = phi i32 [ %v4_10014cef.pre, %dec_label_pc_10014cc6.dec_label_pc_10014cea_crit_edge ], [ %v4_10014af5, %dec_label_pc_10014b3d ], [ %v4_10014af5, %dec_label_pc_10014b32 ], [ %v4_10014af5, %dec_label_pc_10014aea ]
  %v14_10014cea = phi i32 [ %v0_10014cea.pre, %dec_label_pc_10014cc6.dec_label_pc_10014cea_crit_edge ], [ %v1_10014b1c, %dec_label_pc_10014b3d ], [ %v1_10014b1c, %dec_label_pc_10014b32 ], [ %v1_10014b1c, %dec_label_pc_10014aea ]
  %v1_10014cea = trunc i32 %v14_10014cea to i16
  %v6_10014cea = icmp ne i16 %v1_10014cea, 0
  %v2_10014ced = zext i1 %v6_10014cea to i32
  store i32 %v2_10014ced, i32* %edi.global-to-local, align 4
  %v5_10014cef = add i32 %v4_10014cef, 4
  %v6_10014cef = inttoptr i32 %v5_10014cef to i32*
  store i32 0, i32* %v6_10014cef, align 4
  %v0_10014cf3 = load i32, i32* %edi.global-to-local, align 4
  %v1_10014cf3 = and i32 %v0_10014cf3, -2147483648
  %v1_10014cf9 = or i32 %v1_10014cf3, 2147450880
  store i32 %v1_10014cf9, i32* %edi.global-to-local, align 4
  %v3_10014cff = load i32, i32* @esi, align 4
  %v4_10014cff = inttoptr i32 %v3_10014cff to i32*
  store i32 0, i32* %v4_10014cff, align 4
  %v0_10014d02 = load i32, i32* %edi.global-to-local, align 4
  %v1_10014d02 = load i32, i32* @esi, align 4
  %v2_10014d02 = add i32 %v1_10014d02, 8
  %v3_10014d02 = inttoptr i32 %v2_10014d02 to i32*
  store i32 %v0_10014d02, i32* %v3_10014d02, align 4
  br label %dec_label_pc_10014d05

dec_label_pc_10014d05:                            ; preds = %dec_label_pc_10014ce4, %dec_label_pc_10014b8d, %dec_label_pc_10014cea
  %v2_10014d05 = load i32, i32* %stack_var_-52, align 4
  store i32 %v2_10014d05, i32* @edi, align 4
  %v2_10014d06 = load i32, i32* %stack_var_-48, align 4
  store i32 %v2_10014d06, i32* @esi, align 4
  %v0_10014d09 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10014d09

; uselistorder directives
  uselistorder i32 %v0_10014cea.pre, { 1, 0 }
  uselistorder i16 %v3_10014c7a, { 1, 0, 2 }
  uselistorder i16* %stack_var_4.6, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_10014c6c, { 1, 0 }
  uselistorder i32 %stack_var_-24.0, { 1, 0 }
  uselistorder i16* %stack_var_4.4, { 1, 0, 2 }
  uselistorder i16* %v22_10014c2b, { 1, 0 }
  uselistorder i16* %v23_10014c0e, { 2, 0, 1 }
  uselistorder i32 %v4_10014bf9, { 1, 0 }
  uselistorder i32 %v4_10014bd2, { 1, 0 }
  uselistorder i32 %stack_var_8.0, { 2, 0, 1 }
  uselistorder i32 %stack_var_-20.0, { 1, 0 }
  uselistorder i16* %stack_var_4.1, { 1, 0 }
  uselistorder i16 %v1_10014b32, { 1, 0 }
  uselistorder i32 %v2_10014b26, { 1, 0, 2, 3 }
  uselistorder i16 %v1_10014b22, { 1, 0 }
  uselistorder i32 %v2_10014b1a, { 1, 0 }
  uselistorder i32 %v4_10014af5, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9 }
  uselistorder i32 %v15_10014aed, { 1, 0 }
  uselistorder i16* %stack_var_-40, { 7, 6, 5, 4, 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-36, { 1, 0, 3, 2 }
  uselistorder i16 %tmp15, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 20, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 21, 22 }
  uselistorder i32 -2147483648, { 36, 37, 0, 1, 2, 38, 16, 48, 17, 3, 19, 49, 4, 20, 50, 5, 21, 51, 6, 22, 52, 18, 53, 23, 54, 33, 34, 35, 7, 28, 39, 8, 26, 40, 9, 27, 41, 10, 29, 42, 11, 30, 43, 12, 25, 44, 13, 31, 45, 14, 24, 46, 15, 32, 47 }
  uselistorder i32 6, { 25, 23, 17, 26, 24, 22, 18, 19, 20, 11, 4, 21, 0, 1, 2, 3, 5, 12, 7, 27, 13, 14, 15, 16, 8, 9, 10, 6 }
  uselistorder i32 131071, { 279, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278 }
  uselistorder i16* null, { 1, 0, 2 }
  uselistorder i32 65535, { 589, 590, 5, 384, 290, 591, 318, 382, 291, 379, 383, 286, 287, 1, 0, 380, 381, 592, 598, 6, 319, 7, 8, 9, 320, 385, 10, 321, 386, 11, 387, 12, 13, 388, 14, 15, 389, 390, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 322, 391, 27, 292, 293, 294, 295, 28, 323, 324, 325, 29, 30, 326, 392, 31, 32, 296, 297, 33, 327, 328, 329, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 330, 47, 48, 49, 50, 306, 307, 308, 393, 394, 333, 395, 396, 397, 332, 398, 399, 400, 331, 401, 402, 403, 51, 52, 309, 310, 311, 404, 405, 336, 406, 407, 408, 335, 409, 410, 411, 334, 412, 413, 414, 53, 54, 312, 313, 314, 415, 416, 339, 417, 418, 419, 338, 420, 421, 422, 337, 423, 424, 425, 55, 56, 315, 316, 317, 426, 427, 342, 428, 429, 430, 341, 431, 432, 433, 340, 434, 435, 436, 57, 58, 437, 438, 439, 440, 343, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 377, 59, 60, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 378, 61, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 62, 63, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 64, 65, 66, 344, 67, 68, 520, 69, 521, 70, 522, 523, 71, 72, 524, 73, 525, 526, 74, 527, 528, 529, 75, 530, 76, 531, 77, 532, 533, 534, 78, 535, 536, 537, 79, 538, 80, 81, 539, 82, 540, 83, 541, 84, 542, 543, 85, 86, 544, 87, 545, 546, 88, 547, 89, 548, 549, 90, 91, 92, 93, 94, 95, 96, 550, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 588, 298, 299, 300, 301, 302, 115, 345, 346, 347, 116, 117, 118, 348, 303, 304, 119, 349, 350, 351, 120, 121, 122, 352, 551, 123, 124, 305, 552, 125, 353, 354, 355, 126, 127, 128, 553, 554, 555, 556, 129, 356, 357, 358, 130, 131, 132, 133, 134, 135, 136, 137, 593, 138, 557, 139, 558, 140, 141, 142, 143, 144, 559, 145, 146, 560, 147, 148, 561, 149, 150, 151, 152, 562, 153, 154, 155, 156, 563, 157, 158, 159, 160, 161, 162, 163, 164, 165, 359, 166, 564, 565, 167, 566, 168, 567, 169, 170, 171, 172, 568, 173, 174, 569, 175, 176, 177, 178, 570, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 571, 189, 190, 191, 192, 572, 193, 194, 573, 195, 196, 197, 198, 199, 200, 201, 202, 360, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 574, 217, 362, 361, 218, 219, 363, 594, 220, 221, 222, 223, 2, 364, 224, 595, 365, 225, 288, 366, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 367, 238, 368, 239, 240, 241, 242, 243, 244, 245, 575, 246, 576, 247, 577, 578, 579, 248, 249, 580, 250, 251, 581, 582, 252, 253, 254, 255, 583, 584, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 369, 289, 370, 268, 371, 269, 372, 270, 271, 585, 373, 374, 272, 3, 596, 375, 273, 4, 597, 376, 274, 275, 276, 277, 278, 279, 280, 281, 586, 282, 587, 283, 284, 285 }
  uselistorder i32 (i32*)* @function_10014017, { 4, 5, 6, 7, 8, 0, 1, 2, 3 }
  uselistorder i8 -1, { 0, 2, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 3, 6, 7, 1 }
  uselistorder i32 -2, { 5, 4, 6, 15, 13, 2, 3, 10, 11, 12, 1, 14, 7, 8, 9, 0 }
  uselistorder i16 1, { 0, 4, 5, 6, 7, 90, 91, 92, 93, 1, 94, 98, 99, 8, 113, 2, 97, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 87, 88, 95, 96, 100, 79, 101, 102, 103, 104, 80, 105, 106, 77, 78, 107, 108, 45, 114, 115, 46, 81, 109, 110, 47, 48, 111, 82, 49, 50, 51, 112, 89, 52, 53, 54, 55, 83, 56, 117, 118, 119, 120, 121, 122, 123, 124, 57, 58, 60, 59, 61, 62, 125, 63, 3, 84, 65, 116, 85, 64, 66, 71, 72, 73, 74, 68, 76, 69, 67, 70, 75, 86, 126 }
  uselistorder i32 (i32, i32)* @function_10013f98, { 0, 2, 1 }
  uselistorder i32 2, { 109, 110, 111, 22, 20, 160, 161, 162, 47, 112, 113, 114, 115, 96, 23, 24, 25, 26, 27, 28, 76, 0, 48, 1, 2, 163, 164, 41, 165, 166, 167, 77, 168, 169, 78, 90, 91, 92, 93, 84, 94, 95, 85, 29, 30, 116, 74, 42, 97, 49, 79, 50, 152, 153, 3, 68, 69, 4, 43, 5, 31, 80, 172, 32, 6, 7, 75, 33, 34, 8, 9, 10, 11, 51, 35, 81, 52, 36, 37, 70, 12, 39, 38, 53, 83, 148, 71, 21, 170, 171, 117, 13, 54, 147, 98, 99, 100, 101, 86, 102, 103, 87, 14, 15, 44, 16, 40, 154, 45, 155, 173, 121, 122, 130, 131, 118, 119, 120, 60, 61, 123, 124, 125, 62, 63, 126, 127, 128, 64, 65, 132, 133, 134, 66, 67, 135, 157, 104, 105, 106, 107, 108, 136, 55, 137, 138, 139, 140, 142, 141, 143, 145, 144, 146, 56, 150, 149, 46, 88, 72, 151, 89, 73, 156, 57, 17, 159, 18, 19, 129, 158, 58, 59, 82 }
  uselistorder i32 5, { 1, 7, 11, 0, 8, 12, 13, 14, 2, 9, 3, 4, 5, 10, 6 }
  uselistorder i32 2147483647, { 0, 1, 5, 6, 2, 4, 3 }
  uselistorder i16 32767, { 2, 0, 1, 3 }
  uselistorder i32 32768, { 12, 13, 10, 14, 11, 3, 4, 5, 0, 6, 17, 1, 2, 8, 9, 7, 15, 16 }
  uselistorder i32 32767, { 0, 1, 2, 4, 5, 3 }
  uselistorder i32 10, { 14, 15, 16, 11, 0, 12, 13, 1, 8, 9, 7, 10, 3, 2, 4, 5, 6, 17, 18 }
  uselistorder label %dec_label_pc_10014d05, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10014ce4, { 1, 0 }
  uselistorder label %dec_label_pc_10014cc6, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_10014c91, { 1, 0 }
  uselistorder label %dec_label_pc_10014c7a, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_10014c63, { 1, 0 }
  uselistorder label %dec_label_pc_10014c1c, { 1, 0 }
  uselistorder label %dec_label_pc_10014bf1, { 1, 0 }
  uselistorder label %dec_label_pc_10014b77, { 2, 0, 1 }
}

define i32 @function_10014d0a(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10014d0a:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_1()
  %stack_var_4 = alloca i16*, align 4
  store i16* %arg1, i16** %stack_var_4, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v15_10014d0d = ptrtoint i32* %stack_var_-16 to i32
  %v0_10014d10 = load i32, i32* @ebx, align 4
  store i32 %v0_10014d10, i32* %stack_var_-20, align 4
  store i32 0, i32* @ecx, align 4
  store i32 ptrtoint ([5 x i8*]* @global_var_1001af90.260 to i32), i32* @ebx, align 4
  %v15_10014d1b = icmp eq i32 %arg2, 0
  %tmp23 = ptrtoint i16* %arg1 to i32
  br i1 %v15_10014d1b, label %dec_label_pc_10014d83, label %dec_label_pc_10014d20

dec_label_pc_10014d20:                            ; preds = %dec_label_pc_10014d0a
  %v16_10014d1b = icmp slt i32 %arg2, 0
  br i1 %v16_10014d1b, label %dec_label_pc_10014d22, label %dec_label_pc_10014d32

dec_label_pc_10014d22:                            ; preds = %dec_label_pc_10014d20
  %v1_10014d2a = sub i32 0, %arg2
  store i32 %v1_10014d2a, i32* @eax, align 4
  store i32 ptrtoint (i8* @global_var_1001b0f0.262 to i32), i32* @ebx, align 4
  br label %dec_label_pc_10014d32

dec_label_pc_10014d32:                            ; preds = %dec_label_pc_10014d20, %dec_label_pc_10014d22
  %stack_var_8.0 = phi i32 [ %v1_10014d2a, %dec_label_pc_10014d22 ], [ %arg2, %dec_label_pc_10014d20 ]
  %v15_10014d32 = icmp eq i32 %arg3, 0
  %v1_10014d35 = icmp eq i1 %v15_10014d32, false
  br i1 %v1_10014d35, label %dec_label_pc_10014d3d, label %dec_label_pc_10014d37

dec_label_pc_10014d37:                            ; preds = %dec_label_pc_10014d32
  store i32 %tmp23, i32* @eax, align 4
  store i16 0, i16* %arg1, align 2
  %v4_10014d3d.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10014d3d

dec_label_pc_10014d3d:                            ; preds = %dec_label_pc_10014d32, %dec_label_pc_10014d37
  %v4_10014d3d = phi i32 [ 0, %dec_label_pc_10014d32 ], [ %v4_10014d3d.pre, %dec_label_pc_10014d37 ]
  %v15_10014d3d = icmp eq i32 %stack_var_8.0, %v4_10014d3d
  br i1 %v15_10014d3d, label %dec_label_pc_10014d83, label %dec_label_pc_10014d42

dec_label_pc_10014d42:                            ; preds = %dec_label_pc_10014d3d
  %v0_10014d42 = load i32, i32* @esi, align 4
  %v0_10014d43 = load i32, i32* @edi, align 4
  store i32 %v0_10014d43, i32* %stack_var_-28, align 4
  %tmp24 = bitcast i16** %stack_var_4 to i32*
  br label %dec_label_pc_10014d44

dec_label_pc_10014d44:                            ; preds = %dec_label_pc_10014d7c, %dec_label_pc_10014d42
  %v3_10014d7026 = phi i32 [ %tmp23, %dec_label_pc_10014d42 ], [ %v3_10014d7027, %dec_label_pc_10014d7c ]
  %v1_10014d51 = phi i32 [ %v4_10014d3d, %dec_label_pc_10014d42 ], [ %v4_10014d7c, %dec_label_pc_10014d7c ]
  %stack_var_-14.0 = phi i32 [ %tmp, %dec_label_pc_10014d42 ], [ %stack_var_-14.2, %dec_label_pc_10014d7c ]
  %stack_var_8.1 = phi i32 [ %stack_var_8.0, %dec_label_pc_10014d42 ], [ %v5_10014d4a, %dec_label_pc_10014d7c ]
  %v0_10014d47 = load i32, i32* @ebx, align 4
  %v1_10014d47 = add i32 %v0_10014d47, 84
  store i32 %v1_10014d47, i32* @ebx, align 4
  %v5_10014d4a = sdiv i32 %stack_var_8.1, 8
  %v1_10014d4e = and i32 %stack_var_8.1, 7
  store i32 %v1_10014d4e, i32* @eax, align 4
  %v12_10014d51 = icmp eq i32 %v1_10014d4e, %v1_10014d51
  br i1 %v12_10014d51, label %dec_label_pc_10014d7c, label %dec_label_pc_10014d55

dec_label_pc_10014d55:                            ; preds = %dec_label_pc_10014d44
  %v2_10014d58 = mul nuw nsw i32 %v1_10014d4e, 12
  %v3_10014d58 = add i32 %v1_10014d47, %v2_10014d58
  %v4_10014d58 = inttoptr i32 %v3_10014d58 to i16*
  %v5_10014d58 = load i16, i16* %v4_10014d58, align 2
  %v7_10014d58 = icmp sgt i16 %v5_10014d58, -1
  store i32 %v3_10014d58, i32* @esi, align 4
  br i1 %v7_10014d58, label %dec_label_pc_10014d6f, label %dec_label_pc_10014d63

dec_label_pc_10014d63:                            ; preds = %dec_label_pc_10014d55
  store i32 %v15_10014d0d, i32* %edi.global-to-local, align 4
  %v1_10014d66 = inttoptr i32 %v3_10014d58 to i32*
  %v2_10014d66 = load i32, i32* %v1_10014d66, align 4
  store i32 %v2_10014d66, i32* %stack_var_-16, align 4
  %v7_10014d66 = load i1, i1* @df, align 1
  %v8_10014d66 = select i1 %v7_10014d66, i32 -4, i32 4
  %v9_10014d66 = add i32 %v8_10014d66, %v15_10014d0d
  %v10_10014d66 = add i32 %v8_10014d66, %v3_10014d58
  store i32 %v9_10014d66, i32* %edi.global-to-local, align 4
  store i32 %v10_10014d66, i32* %esi.global-to-local, align 4
  %v1_10014d67 = inttoptr i32 %v10_10014d66 to i32*
  %v2_10014d67 = load i32, i32* %v1_10014d67, align 4
  %v4_10014d67 = inttoptr i32 %v9_10014d66 to i32*
  store i32 %v2_10014d67, i32* %v4_10014d67, align 4
  %v5_10014d67 = load i32, i32* %edi.global-to-local, align 4
  %v6_10014d67 = load i32, i32* %esi.global-to-local, align 4
  %v9_10014d67 = add i32 %v5_10014d67, %v8_10014d66
  %v10_10014d67 = add i32 %v6_10014d67, %v8_10014d66
  store i32 %v9_10014d67, i32* %edi.global-to-local, align 4
  store i32 %v10_10014d67, i32* %esi.global-to-local, align 4
  %v1_10014d68 = inttoptr i32 %v10_10014d67 to i32*
  %v2_10014d68 = load i32, i32* %v1_10014d68, align 4
  %v4_10014d68 = inttoptr i32 %v9_10014d67 to i32*
  store i32 %v2_10014d68, i32* %v4_10014d68, align 4
  %v5_10014d68 = load i32, i32* %edi.global-to-local, align 4
  %v9_10014d68 = add i32 %v5_10014d68, %v8_10014d66
  store i32 %v9_10014d68, i32* @edi, align 4
  %v4_10014d69 = add i32 %stack_var_-14.0, -1
  store i32 %v15_10014d0d, i32* @esi, align 4
  %v3_10014d702.pre = load i32, i32* %tmp24, align 4
  br label %dec_label_pc_10014d6f

dec_label_pc_10014d6f:                            ; preds = %dec_label_pc_10014d55, %dec_label_pc_10014d63
  %v3_10014d702 = phi i32 [ %v3_10014d7026, %dec_label_pc_10014d55 ], [ %v3_10014d702.pre, %dec_label_pc_10014d63 ]
  %v0_10014d6f = phi i32 [ %v3_10014d58, %dec_label_pc_10014d55 ], [ %v15_10014d0d, %dec_label_pc_10014d63 ]
  %stack_var_-14.1 = phi i32 [ %stack_var_-14.0, %dec_label_pc_10014d55 ], [ %v4_10014d69, %dec_label_pc_10014d63 ]
  %v0_10014d73.cast = inttoptr i32 %v3_10014d702 to i16*
  %v4_10014d73 = call i32 @function_10014aea(i16* %v0_10014d73.cast, i32 %v0_10014d6f)
  store i32 %v4_10014d73, i32* @eax, align 4
  store i32 0, i32* @ecx, align 4
  br label %dec_label_pc_10014d7c

dec_label_pc_10014d7c:                            ; preds = %dec_label_pc_10014d44, %dec_label_pc_10014d6f
  %v4_10014d7c = phi i32 [ %v1_10014d51, %dec_label_pc_10014d44 ], [ 0, %dec_label_pc_10014d6f ]
  %v3_10014d7027 = phi i32 [ %v3_10014d7026, %dec_label_pc_10014d44 ], [ %v3_10014d702, %dec_label_pc_10014d6f ]
  %stack_var_-14.2 = phi i32 [ %stack_var_-14.0, %dec_label_pc_10014d44 ], [ %stack_var_-14.1, %dec_label_pc_10014d6f ]
  %v15_10014d7c = icmp eq i32 %v5_10014d4a, %v4_10014d7c
  %v1_10014d7f = icmp eq i1 %v15_10014d7c, false
  br i1 %v1_10014d7f, label %dec_label_pc_10014d44, label %dec_label_pc_10014d81

dec_label_pc_10014d81:                            ; preds = %dec_label_pc_10014d7c
  %v2_10014d81 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10014d81, i32* @edi, align 4
  store i32 %v0_10014d42, i32* @esi, align 4
  %v2_10014d83.pre = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_10014d83

dec_label_pc_10014d83:                            ; preds = %dec_label_pc_10014d3d, %dec_label_pc_10014d0a, %dec_label_pc_10014d81
  %v2_10014d83 = phi i32 [ %v0_10014d10, %dec_label_pc_10014d3d ], [ %v0_10014d10, %dec_label_pc_10014d0a ], [ %v2_10014d83.pre, %dec_label_pc_10014d81 ]
  store i32 %v2_10014d83, i32* @ebx, align 4
  %v0_10014d85 = load i32, i32* @eax, align 4
  ret i32 %v0_10014d85

; uselistorder directives
  uselistorder i32 %v3_10014d702, { 1, 0 }
  uselistorder i32 %v3_10014d58, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v1_10014d4e, { 1, 0, 2 }
  uselistorder i32 %stack_var_8.1, { 1, 0 }
  uselistorder i32 %stack_var_-14.0, { 2, 1, 0 }
  uselistorder i32 %v1_10014d51, { 1, 0 }
  uselistorder i32 %v3_10014d7026, { 1, 0 }
  uselistorder i32 %v4_10014d3d, { 1, 0 }
  uselistorder i32 %stack_var_8.0, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 %v15_10014d0d, { 1, 2, 0, 3 }
  uselistorder i32 4, { 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 0, 47, 91, 87, 88, 89, 90, 146, 161, 214, 215, 45, 37, 38, 1, 216, 49, 218, 4, 48, 219, 12, 75, 76, 77, 78, 79, 80, 81, 82, 72, 220, 221, 13, 5, 14, 222, 150, 151, 152, 153, 154, 155, 156, 92, 94, 15, 93, 104, 103, 102, 23, 95, 101, 96, 97, 98, 99, 100, 2, 50, 26, 3, 51, 27, 231, 232, 233, 234, 235, 74, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 217, 253, 83, 84, 85, 86, 162, 254, 329, 252, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 39, 297, 298, 299, 300, 260, 259, 255, 256, 257, 258, 330, 331, 332, 333, 40, 41, 301, 302, 303, 304, 305, 42, 306, 307, 43, 16, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 334, 57, 52, 44, 53, 6, 54, 17, 190, 191, 192, 193, 194, 55, 195, 196, 197, 198, 199, 158, 159, 160, 157, 105, 8, 163, 7, 58, 228, 18, 106, 107, 108, 109, 110, 111, 112, 113, 73, 229, 230, 19, 239, 224, 24, 225, 227, 226, 9, 20, 10, 21, 11, 22, 210, 25, 46, 237, 236, 223, 114, 205, 164, 165, 166, 211, 212, 167, 168, 28, 175, 176, 59, 177, 178, 60, 179, 180, 61, 181, 182, 62, 183, 184, 63, 185, 186, 64, 31, 30, 29, 173, 174, 32, 35, 34, 33, 187, 188, 36, 169, 171, 115, 116, 170, 172, 117, 118, 65, 119, 120, 66, 121, 122, 67, 123, 124, 125, 68, 126, 127, 69, 128, 129, 70, 130, 131, 132, 133, 134, 189, 200, 201, 202, 203, 208, 204, 206, 135, 136, 207, 213, 209, 71, 56 }
  uselistorder i32 -4, { 47, 48, 49, 43, 52, 53, 54, 55, 8, 56, 40, 41, 9, 50, 10, 44, 11, 59, 12, 70, 42, 64, 65, 66, 67, 60, 61, 51, 7, 58, 45, 46, 13, 68, 69, 62, 63, 57, 14, 1, 15, 16, 17, 2, 18, 19, 20, 21, 22, 23, 24, 25, 3, 26, 27, 28, 29, 30, 31, 4, 32, 33, 34, 35, 36, 37, 38, 39, 0, 5, 6 }
  uselistorder i1* @df, { 2, 3, 0, 5, 6, 7, 4, 1, 8 }
  uselistorder i16 -1, { 26, 0, 27, 4, 8, 5, 6, 9, 10, 1, 2, 17, 18, 11, 12, 13, 19, 20, 21, 22, 23, 28, 29, 30, 31, 14, 15, 16, 7, 3, 24, 25 }
  uselistorder i32 12, { 3, 13, 14, 9, 10, 11, 12, 0, 26, 4, 7, 5, 6, 8, 16, 32, 33, 27, 38, 34, 35, 36, 37, 28, 29, 30, 31, 39, 19, 20, 21, 22, 23, 24, 15, 18, 17, 2, 25, 1 }
  uselistorder i32 7, { 7, 0, 5, 1, 9, 8, 6, 3, 10, 2, 4 }
  uselistorder i32 8, { 5, 46, 47, 48, 49, 50, 27, 38, 39, 10, 40, 51, 55, 113, 18, 0, 104, 15, 1, 19, 115, 4, 28, 114, 52, 53, 54, 41, 42, 43, 16, 29, 2, 3, 20, 21, 13, 6, 116, 30, 22, 117, 118, 33, 34, 35, 36, 37, 56, 57, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 7, 147, 148, 149, 150, 8, 151, 120, 121, 119, 172, 173, 174, 152, 153, 154, 155, 156, 157, 158, 17, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 23, 24, 63, 64, 25, 94, 95, 96, 97, 9, 98, 99, 11, 100, 101, 26, 102, 103, 170, 171, 132, 31, 112, 12, 32, 58, 59, 60, 61, 62, 74, 75, 76, 77, 88, 89, 65, 93, 66, 107, 67, 68, 69, 70, 71, 72, 14, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 44, 45, 105, 106, 110, 111, 108, 109 }
  uselistorder i32 84, { 1, 0 }
  uselistorder i16 0, { 23, 411, 22, 143, 144, 145, 30, 412, 413, 414, 148, 407, 415, 149, 416, 408, 417, 420, 445, 31, 421, 150, 151, 32, 33, 34, 35, 0, 36, 1, 37, 152, 153, 2, 38, 3, 39, 154, 155, 40, 4, 156, 24, 28, 41, 42, 43, 44, 45, 46, 47, 157, 13, 158, 159, 160, 161, 162, 18, 163, 164, 165, 166, 167, 48, 49, 50, 51, 52, 16, 168, 169, 170, 29, 175, 176, 177, 178, 173, 174, 54, 179, 171, 172, 53, 180, 181, 182, 187, 188, 189, 190, 185, 186, 56, 191, 183, 184, 55, 192, 193, 194, 199, 59, 200, 201, 202, 197, 198, 58, 203, 195, 196, 57, 204, 205, 206, 211, 62, 212, 213, 214, 209, 210, 61, 215, 207, 208, 60, 216, 217, 218, 224, 225, 226, 221, 222, 223, 64, 227, 219, 220, 63, 228, 229, 230, 231, 65, 232, 25, 237, 68, 238, 239, 240, 241, 242, 243, 244, 235, 236, 67, 245, 233, 234, 66, 246, 247, 248, 249, 250, 69, 255, 72, 256, 257, 258, 259, 260, 261, 262, 263, 253, 254, 71, 264, 251, 252, 70, 265, 266, 267, 268, 269, 73, 274, 76, 275, 276, 277, 278, 279, 272, 273, 75, 280, 270, 271, 74, 281, 282, 283, 284, 77, 285, 78, 290, 81, 291, 292, 293, 294, 295, 296, 288, 289, 80, 297, 286, 287, 79, 298, 299, 300, 301, 82, 302, 83, 84, 303, 304, 11, 12, 14, 19, 15, 20, 85, 86, 305, 306, 87, 88, 89, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 21, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 26, 90, 91, 92, 331, 93, 94, 332, 27, 333, 146, 95, 418, 334, 96, 97, 419, 335, 338, 336, 337, 98, 99, 100, 5, 339, 101, 102, 103, 340, 341, 342, 343, 104, 105, 106, 344, 345, 107, 108, 422, 346, 347, 348, 109, 425, 349, 350, 6, 351, 110, 147, 352, 111, 112, 7, 8, 353, 354, 355, 356, 113, 114, 423, 357, 358, 115, 359, 116, 424, 360, 361, 117, 362, 118, 119, 120, 409, 121, 122, 123, 124, 363, 364, 125, 365, 126, 127, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 128, 366, 367, 17, 368, 129, 369, 370, 130, 371, 372, 131, 132, 373, 374, 133, 9, 383, 440, 375, 376, 377, 378, 379, 380, 381, 382, 384, 134, 135, 136, 137, 385, 444, 386, 138, 139, 140, 10, 387, 388, 141, 389, 410, 142, 441, 390, 426, 391, 392, 393, 394, 395, 396, 442, 397, 398, 399, 400, 401, 443, 402, 403, 404, 405, 406 }
  uselistorder i32 %arg2, { 2, 3, 1, 0 }
  uselistorder i16* %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10014d83, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10014d7c, { 1, 0 }
  uselistorder label %dec_label_pc_10014d6f, { 1, 0 }
  uselistorder label %dec_label_pc_10014d3d, { 1, 0 }
  uselistorder label %dec_label_pc_10014d32, { 1, 0 }
}

define i32 @function_10014e60(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10014e60:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_10014e63 = load i32, i32* @edi, align 4
  %v0_10014e64 = load i32, i32* @esi, align 4
  %v0_10014e65 = load i32, i32* @ebx, align 4
  store i32 %v0_10014e65, i32* %stack_var_-16, align 4
  %v1_10014e69 = icmp eq i32 %arg3, 0
  store i32 %arg3, i32* @ecx, align 4
  br i1 %v1_10014e69, label %dec_label_pc_10014f5a, label %dec_label_pc_10014e71

dec_label_pc_10014e71:                            ; preds = %dec_label_pc_10014e60
  %v4_10014e71 = ptrtoint i8* %arg1 to i32
  store i32 %v4_10014e71, i32* @esi, align 4
  store i32 %arg2, i32* @edi, align 4
  %v3_10014e7d = load i32, i32* @global_var_1001b62c.212, align 4
  %v4_10014e7d = icmp eq i32 %v3_10014e7d, 0
  %v1_10014e81 = icmp eq i1 %v4_10014e7d, false
  br i1 %v1_10014e81, label %dec_label_pc_10014ed1, label %dec_label_pc_10014e83

dec_label_pc_10014e83:                            ; preds = %dec_label_pc_10014e71
  %v0_10014e87 = load i32, i32* @edx, align 4
  %v1_10014e87 = and i32 %v0_10014e87, -65281
  %v2_10014e87 = or i32 %v1_10014e87, 8192
  store i32 %v2_10014e87, i32* @edx, align 4
  br label %dec_label_pc_10014e8c

dec_label_pc_10014e8c:                            ; preds = %dec_label_pc_10014eb2, %dec_label_pc_10014e83
  %v0_10014eb2 = phi i32 [ %v1_10014eb2, %dec_label_pc_10014eb2 ], [ %arg3, %dec_label_pc_10014e83 ]
  %v0_10014e99 = phi i32 [ %v1_10014e99, %dec_label_pc_10014eb2 ], [ %arg2, %dec_label_pc_10014e83 ]
  %v4_10014e8c = phi i32 [ %v0_10014eae, %dec_label_pc_10014eb2 ], [ ptrtoint (i32* @global_var_1001b624.263 to i32), %dec_label_pc_10014e83 ]
  %v0_10014e98 = phi i32 [ %v1_10014e98, %dec_label_pc_10014eb2 ], [ %v4_10014e71, %dec_label_pc_10014e83 ]
  %v1_10014e8c = inttoptr i32 %v0_10014e98 to i8*
  %v2_10014e8c = load i8, i8* %v1_10014e8c, align 1
  %v3_10014e8c = zext i8 %v2_10014e8c to i32
  %v5_10014e8c = mul nuw nsw i32 %v3_10014e8c, 256
  %v5_10014e8e = icmp eq i8 %v2_10014e8c, 0
  %v1_10014e90 = inttoptr i32 %v0_10014e99 to i8*
  %v2_10014e90 = load i8, i8* %v1_10014e90, align 1
  %v3_10014e90 = zext i8 %v2_10014e90 to i32
  %v12_10014e8e.masked = and i32 %v4_10014e8c, -65536
  %v5_10014e90 = or i32 %v5_10014e8c, %v12_10014e8e.masked
  %v6_10014e90 = or i32 %v3_10014e90, %v5_10014e90
  br i1 %v5_10014e8e, label %dec_label_pc_10014eb5, label %dec_label_pc_10014e94

dec_label_pc_10014e94:                            ; preds = %dec_label_pc_10014e8c
  %v4_10014e94 = icmp eq i8 %v2_10014e90, 0
  br i1 %v4_10014e94, label %dec_label_pc_10014eb5, label %dec_label_pc_10014e98

dec_label_pc_10014e98:                            ; preds = %dec_label_pc_10014e94
  %v1_10014e98 = add i32 %v0_10014e98, 1
  %v1_10014e99 = add i32 %v0_10014e99, 1
  %v11_10014e9a = icmp ult i8 %v2_10014e8c, 65
  br i1 %v11_10014e9a, label %dec_label_pc_10014ea4, label %dec_label_pc_10014e9e

dec_label_pc_10014e9e:                            ; preds = %dec_label_pc_10014e98
  %tmp = icmp ult i8 %v2_10014e8c, 91
  br i1 %tmp, label %dec_label_pc_10014ea2, label %dec_label_pc_10014ea4

dec_label_pc_10014ea2:                            ; preds = %dec_label_pc_10014e9e
  %v6_10014ea2 = add i8 %v2_10014e8c, 32
  %v21_10014ea2 = zext i8 %v6_10014ea2 to i32
  %v23_10014ea2 = mul nuw nsw i32 %v21_10014ea2, 256
  %v24_10014ea2 = and i32 %v6_10014e90, -65281
  %v25_10014ea2 = or i32 %v24_10014ea2, %v23_10014ea2
  br label %dec_label_pc_10014ea4

dec_label_pc_10014ea4:                            ; preds = %dec_label_pc_10014e9e, %dec_label_pc_10014e98, %dec_label_pc_10014ea2
  %v21_10014eac = phi i32 [ %v6_10014e90, %dec_label_pc_10014e9e ], [ %v6_10014e90, %dec_label_pc_10014e98 ], [ %v25_10014ea2, %dec_label_pc_10014ea2 ]
  %v1_10014ea4 = trunc i32 %v21_10014eac to i8
  %v10_10014ea4 = icmp ult i8 %v1_10014ea4, 65
  br i1 %v10_10014ea4, label %dec_label_pc_10014eae, label %dec_label_pc_10014ea8

dec_label_pc_10014ea8:                            ; preds = %dec_label_pc_10014ea4
  %tmp43 = icmp ult i8 %v1_10014ea4, 91
  br i1 %tmp43, label %dec_label_pc_10014eac, label %dec_label_pc_10014eae

dec_label_pc_10014eac:                            ; preds = %dec_label_pc_10014ea8
  %v5_10014eac = add i32 %v21_10014eac, 32
  %v20_10014eac = and i32 %v5_10014eac, 255
  %v22_10014eac = and i32 %v21_10014eac, -256
  %v23_10014eac = or i32 %v20_10014eac, %v22_10014eac
  br label %dec_label_pc_10014eae

dec_label_pc_10014eae:                            ; preds = %dec_label_pc_10014ea8, %dec_label_pc_10014ea4, %dec_label_pc_10014eac
  %v0_10014eae = phi i32 [ %v21_10014eac, %dec_label_pc_10014ea8 ], [ %v21_10014eac, %dec_label_pc_10014ea4 ], [ %v23_10014eac, %dec_label_pc_10014eac ]
  %v1_10014eae = udiv i32 %v0_10014eae, 256
  %v2_10014eae = trunc i32 %v1_10014eae to i8
  %v4_10014eae = trunc i32 %v0_10014eae to i8
  %v10_10014eae = icmp ult i8 %v2_10014eae, %v4_10014eae
  %v16_10014eae = icmp eq i8 %v2_10014eae, %v4_10014eae
  %v1_10014eb0 = icmp eq i1 %v16_10014eae, false
  br i1 %v1_10014eb0, label %dec_label_pc_10014ebf, label %dec_label_pc_10014eb2

dec_label_pc_10014eb2:                            ; preds = %dec_label_pc_10014eae
  %v1_10014eb2 = add i32 %v0_10014eb2, -1
  %v8_10014eb2 = icmp eq i32 %v1_10014eb2, 0
  %v1_10014eb3 = icmp eq i1 %v8_10014eb2, false
  br i1 %v1_10014eb3, label %dec_label_pc_10014e8c, label %dec_label_pc_10014eb5

dec_label_pc_10014eb5:                            ; preds = %dec_label_pc_10014eb2, %dec_label_pc_10014e94, %dec_label_pc_10014e8c
  %v0_10014eb7 = phi i32 [ %v0_10014eae, %dec_label_pc_10014eb2 ], [ %v6_10014e90, %dec_label_pc_10014e94 ], [ %v6_10014e90, %dec_label_pc_10014e8c ]
  %v1_10014eb7 = udiv i32 %v0_10014eb7, 256
  %v2_10014eb7 = trunc i32 %v1_10014eb7 to i8
  %v4_10014eb7 = trunc i32 %v0_10014eb7 to i8
  %v10_10014eb7 = icmp ult i8 %v2_10014eb7, %v4_10014eb7
  %v16_10014eb7 = icmp eq i8 %v2_10014eb7, %v4_10014eb7
  br i1 %v16_10014eb7, label %dec_label_pc_10014f5a, label %dec_label_pc_10014ebf

dec_label_pc_10014ebf:                            ; preds = %dec_label_pc_10014eae, %dec_label_pc_10014eb5
  %v0_10014ec4 = phi i1 [ %v10_10014eb7, %dec_label_pc_10014eb5 ], [ %v10_10014eae, %dec_label_pc_10014eae ]
  br i1 %v0_10014ec4, label %dec_label_pc_10014f5a, label %dec_label_pc_10014eca

dec_label_pc_10014eca:                            ; preds = %dec_label_pc_10014ebf
  br label %dec_label_pc_10014f5a

dec_label_pc_10014ed1:                            ; preds = %dec_label_pc_10014e71
  %v0_10014ed1 = load i32, i32* @global_var_1001b78c.213, align 4
  %v1_10014ed1 = add i32 %v0_10014ed1, 1
  store i32 %v1_10014ed1, i32* @global_var_1001b78c.213, align 4
  %v0_10014ed8 = load i32, i32* @global_var_1001b788.214, align 8
  %tmp37 = icmp slt i32 %v0_10014ed8, 1
  %tmp38 = icmp eq i1 %tmp37, false
  br i1 %tmp38, label %dec_label_pc_10014ee5, label %dec_label_pc_10014ee1

dec_label_pc_10014ee1:                            ; preds = %dec_label_pc_10014ed1
  store i32 0, i32* %stack_var_-20, align 4
  br label %dec_label_pc_10014efe

dec_label_pc_10014ee5:                            ; preds = %dec_label_pc_10014ed1
  store i32 %v0_10014ed1, i32* @global_var_1001b78c.213, align 4
  store i32 19, i32* %stack_var_-20, align 4
  %v1_10014ef0 = call i32 @function_1001039a(i32 19)
  store i32 1, i32* %stack_var_-20, align 4
  store i32 %arg3, i32* @ecx, align 4
  br label %dec_label_pc_10014efe

dec_label_pc_10014efe:                            ; preds = %dec_label_pc_10014ee1, %dec_label_pc_10014ee5
  br label %dec_label_pc_10014f04

dec_label_pc_10014f04:                            ; preds = %dec_label_pc_10014f2c, %dec_label_pc_10014efe
  %v0_10014f12 = phi i32 [ %v1_10014f2c, %dec_label_pc_10014f2c ], [ %arg3, %dec_label_pc_10014efe ]
  %v4_10014f08 = phi i32 [ %v1_10014f28, %dec_label_pc_10014f2c ], [ 0, %dec_label_pc_10014efe ]
  %v4_10014f04 = phi i32 [ %v2_10014f1f, %dec_label_pc_10014f2c ], [ 0, %dec_label_pc_10014efe ]
  %v0_10014f04 = load i32, i32* @esi, align 4
  %v1_10014f04 = inttoptr i32 %v0_10014f04 to i8*
  %v2_10014f04 = load i8, i8* %v1_10014f04, align 1
  %v3_10014f04 = zext i8 %v2_10014f04 to i32
  %v5_10014f04 = and i32 %v4_10014f04, -256
  %v6_10014f04 = or i32 %v3_10014f04, %v5_10014f04
  %v1_10014f06 = icmp eq i32 %v6_10014f04, 0
  %v0_10014f08 = load i32, i32* @edi, align 4
  %v1_10014f08 = inttoptr i32 %v0_10014f08 to i8*
  %v2_10014f08 = load i8, i8* %v1_10014f08, align 1
  %v3_10014f08 = zext i8 %v2_10014f08 to i32
  %v5_10014f08 = and i32 %v4_10014f08, -256
  %v6_10014f08 = or i32 %v3_10014f08, %v5_10014f08
  br i1 %v1_10014f06, label %dec_label_pc_10014f2f, label %dec_label_pc_10014f0c

dec_label_pc_10014f0c:                            ; preds = %dec_label_pc_10014f04
  %v1_10014f0c = icmp eq i32 %v6_10014f08, 0
  br i1 %v1_10014f0c, label %dec_label_pc_10014f2f, label %dec_label_pc_10014f10

dec_label_pc_10014f10:                            ; preds = %dec_label_pc_10014f0c
  %v1_10014f10 = add i32 %v0_10014f04, 1
  store i32 %v1_10014f10, i32* @esi, align 4
  %v1_10014f11 = add i32 %v0_10014f08, 1
  store i32 %v1_10014f11, i32* @edi, align 4
  %v4_10014f15 = call i32 @function_100119ba(i8 %v2_10014f08)
  store i32 %v4_10014f15, i32* @ebx, align 4
  %v2_10014f1f = call i32 @function_100119ba(i8 %v2_10014f08)
  %v1_10014f28 = load i32, i32* @ebx, align 4
  %v7_10014f28 = icmp ult i32 %v2_10014f1f, %v1_10014f28
  %v12_10014f28 = icmp eq i32 %v2_10014f1f, %v1_10014f28
  %v1_10014f2a = icmp eq i1 %v12_10014f28, false
  br i1 %v1_10014f2a, label %dec_label_pc_10014f35, label %dec_label_pc_10014f2c

dec_label_pc_10014f2c:                            ; preds = %dec_label_pc_10014f10
  %v1_10014f2c = add i32 %v0_10014f12, -1
  %v8_10014f2c = icmp eq i32 %v1_10014f2c, 0
  store i32 %v1_10014f2c, i32* @ecx, align 4
  %v1_10014f2d = icmp eq i1 %v8_10014f2c, false
  br i1 %v1_10014f2d, label %dec_label_pc_10014f04, label %dec_label_pc_10014f2f

dec_label_pc_10014f2f:                            ; preds = %dec_label_pc_10014f2c, %dec_label_pc_10014f0c, %dec_label_pc_10014f04
  %v1_10014f31 = phi i32 [ %v1_10014f28, %dec_label_pc_10014f2c ], [ 0, %dec_label_pc_10014f0c ], [ %v6_10014f08, %dec_label_pc_10014f04 ]
  %v0_10014f31 = phi i32 [ %v2_10014f1f, %dec_label_pc_10014f2c ], [ %v6_10014f04, %dec_label_pc_10014f0c ], [ 0, %dec_label_pc_10014f04 ]
  %v7_10014f31 = icmp ult i32 %v0_10014f31, %v1_10014f31
  %v12_10014f31 = icmp eq i32 %v0_10014f31, %v1_10014f31
  br i1 %v12_10014f31, label %dec_label_pc_10014f3e, label %dec_label_pc_10014f35

dec_label_pc_10014f35:                            ; preds = %dec_label_pc_10014f10, %dec_label_pc_10014f2f
  %v0_10014f3a = phi i1 [ %v7_10014f31, %dec_label_pc_10014f2f ], [ %v7_10014f28, %dec_label_pc_10014f10 ]
  br i1 %v0_10014f3a, label %dec_label_pc_10014f3e, label %dec_label_pc_10014f3c

dec_label_pc_10014f3c:                            ; preds = %dec_label_pc_10014f35
  br label %dec_label_pc_10014f3e

dec_label_pc_10014f3e:                            ; preds = %dec_label_pc_10014f35, %dec_label_pc_10014f2f, %dec_label_pc_10014f3c
  %v0_10014f4c = phi i32 [ -1, %dec_label_pc_10014f35 ], [ 0, %dec_label_pc_10014f2f ], [ 1, %dec_label_pc_10014f3c ]
  %v2_10014f3e = load i32, i32* %stack_var_-20, align 4
  %v1_10014f3f = icmp eq i32 %v2_10014f3e, 0
  %v1_10014f41 = icmp eq i1 %v1_10014f3f, false
  br i1 %v1_10014f41, label %dec_label_pc_10014f4c, label %dec_label_pc_10014f43

dec_label_pc_10014f43:                            ; preds = %dec_label_pc_10014f3e
  %v0_10014f43 = load i32, i32* @global_var_1001b78c.213, align 4
  %v1_10014f43 = add i32 %v0_10014f43, -1
  store i32 %v1_10014f43, i32* @global_var_1001b78c.213, align 4
  br label %dec_label_pc_10014f5a

dec_label_pc_10014f4c:                            ; preds = %dec_label_pc_10014f3e
  store i32 19, i32* %stack_var_-20, align 4
  %v1_10014f50 = call i32 @function_100103fb(i32 19)
  br label %dec_label_pc_10014f5a

dec_label_pc_10014f5a:                            ; preds = %dec_label_pc_10014ebf, %dec_label_pc_10014eb5, %dec_label_pc_10014e60, %dec_label_pc_10014f43, %dec_label_pc_10014eca, %dec_label_pc_10014f4c
  %v0_10014f5a = phi i32 [ -1, %dec_label_pc_10014ebf ], [ 0, %dec_label_pc_10014eb5 ], [ 0, %dec_label_pc_10014e60 ], [ %v0_10014f4c, %dec_label_pc_10014f43 ], [ 1, %dec_label_pc_10014eca ], [ %v0_10014f4c, %dec_label_pc_10014f4c ]
  %v2_10014f5c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10014f5c, i32* @ebx, align 4
  store i32 %v0_10014e64, i32* @esi, align 4
  store i32 %v0_10014e63, i32* @edi, align 4
  ret i32 %v0_10014f5a

; uselistorder directives
  uselistorder i32 %v1_10014f2c, { 2, 1, 0 }
  uselistorder i32 %v1_10014f28, { 1, 0, 3, 2 }
  uselistorder i32 %v2_10014f1f, { 1, 0, 2, 3 }
  uselistorder i32 %v0_10014eb7, { 1, 0 }
  uselistorder i32 %v1_10014eb2, { 1, 0 }
  uselistorder i32 %v0_10014eae, { 1, 2, 0, 3 }
  uselistorder i32 %v21_10014eac, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_10014e90, { 4, 3, 2, 1, 0 }
  uselistorder i8 %v2_10014e8c, { 1, 0, 2, 3, 4 }
  uselistorder i32 (i32)* @function_100103fb, { 10, 9, 8, 7, 6, 11, 5, 4, 1, 0, 3, 2 }
  uselistorder i32 (i8)* @function_100119ba, { 1, 2, 0 }
  uselistorder i32 (i32)* @function_1001039a, { 7, 6, 5, 4, 8, 0, 2, 1, 3 }
  uselistorder i32 19, { 3, 8, 2, 9, 4, 0, 5, 6, 1, 7, 10, 11 }
  uselistorder i32* @global_var_1001b78c.213, { 2, 3, 4, 5, 6, 0, 1, 7 }
  uselistorder i32 -1, { 67, 120, 68, 121, 122, 123, 0, 124, 125, 126, 127, 128, 207, 129, 130, 131, 132, 1, 88, 210, 133, 211, 2, 24, 212, 86, 3, 134, 135, 136, 137, 138, 139, 140, 141, 25, 69, 142, 143, 44, 70, 91, 206, 144, 145, 26, 92, 27, 146, 147, 214, 148, 149, 93, 4, 5, 150, 151, 6, 152, 153, 7, 154, 8, 94, 116, 9, 10, 59, 155, 13, 11, 85, 12, 51, 14, 156, 157, 158, 15, 159, 60, 61, 16, 95, 28, 160, 161, 162, 163, 164, 30, 29, 165, 52, 53, 87, 166, 71, 96, 167, 168, 169, 170, 171, 32, 33, 172, 173, 174, 31, 34, 175, 176, 35, 177, 178, 179, 36, 37, 38, 39, 62, 208, 180, 181, 182, 72, 183, 184, 17, 18, 19, 20, 185, 186, 215, 40, 187, 46, 188, 41, 189, 190, 191, 45, 192, 193, 63, 216, 217, 42, 213, 43, 89, 90, 21, 22, 54, 194, 97, 73, 74, 75, 98, 99, 76, 77, 64, 47, 65, 48, 55, 56, 195, 100, 101, 102, 103, 78, 79, 196, 197, 198, 57, 104, 117, 118, 119, 49, 50, 58, 105, 80, 106, 107, 81, 108, 66, 82, 109, 110, 199, 111, 112, 23, 83, 84, 113, 200, 201, 209, 202, 203, 204, 205, 114, 115 }
  uselistorder i32 -256, { 40, 41, 42, 0, 1, 11, 12, 44, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 5, 6, 7, 8, 9, 10, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 2, 3, 4, 77, 79, 76, 37, 27, 28, 25, 26, 13, 14, 15, 16, 17, 18, 29, 30, 31, 32, 33, 35, 36, 19, 20, 21, 22, 23, 24, 71, 60, 61, 78, 70, 59, 34, 38, 39, 43 }
  uselistorder i32 255, { 0, 7, 14, 1, 2, 8, 9, 4, 10, 6, 19, 11, 5, 12, 13, 20, 18, 15, 3, 16, 17 }
  uselistorder i32 32, { 0, 1, 2, 8, 14, 27, 18, 3, 11, 5, 28, 15, 29, 13, 9, 10, 16, 30, 31, 32, 12, 4, 21, 22, 6, 7, 19, 20, 23, 24, 17, 26, 25 }
  uselistorder i8 32, { 4, 8, 9, 5, 0, 13, 2, 3, 1, 10, 6, 7, 12, 11 }
  uselistorder i8 65, { 1, 0, 2 }
  uselistorder i32 -65536, { 0, 15, 1, 463, 88, 89, 269, 270, 90, 91, 155, 156, 157, 158, 159, 160, 161, 92, 93, 94, 95, 96, 97, 7, 98, 8, 16, 121, 122, 2, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 162, 163, 164, 165, 166, 167, 168, 169, 103, 104, 105, 106, 107, 322, 9, 323, 108, 10, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 17, 100, 18, 19, 20, 21, 22, 23, 24, 25, 99, 11, 101, 12, 102, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 207, 36, 37, 208, 209, 210, 38, 39, 40, 211, 41, 42, 212, 213, 429, 430, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 214, 215, 216, 217, 218, 219, 220, 221, 72, 222, 225, 226, 227, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 369, 246, 247, 248, 324, 325, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 326, 268, 271, 272, 273, 294, 295, 296, 297, 275, 274, 276, 277, 278, 279, 280, 281, 327, 282, 283, 284, 438, 285, 286, 287, 298, 288, 289, 290, 291, 292, 293, 299, 300, 301, 302, 303, 13, 304, 305, 306, 307, 308, 309, 310, 328, 311, 312, 313, 314, 315, 316, 355, 356, 317, 318, 319, 320, 73, 74, 75, 370, 321, 329, 335, 78, 76, 77, 357, 336, 337, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362, 363, 364, 231, 232, 14, 365, 366, 367, 368, 371, 372, 373, 374, 392, 393, 394, 395, 396, 397, 398, 399, 400, 223, 224, 442, 443, 444, 343, 344, 345, 431, 432, 401, 402, 228, 229, 403, 404, 405, 406, 386, 387, 391, 378, 379, 380, 376, 377, 375, 389, 390, 388, 381, 382, 383, 384, 385, 433, 458, 407, 408, 409, 410, 434, 411, 3, 4, 5, 6, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 79, 80, 81, 82, 83, 84, 85, 86, 426, 427, 428, 435, 436, 437, 87, 330, 331, 332, 333, 334, 439, 440, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462 }
  uselistorder i8 0, { 78, 79, 14, 15, 43, 44, 45, 46, 81, 82, 16, 6, 83, 84, 85, 7, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 17, 47, 8, 109, 18, 105, 106, 107, 108, 2, 19, 110, 111, 112, 20, 113, 114, 120, 21, 22, 9, 1, 133, 4, 134, 135, 3, 136, 137, 30, 138, 139, 140, 141, 23, 142, 143, 24, 121, 122, 123, 25, 124, 125, 126, 26, 127, 128, 27, 129, 130, 28, 131, 132, 29, 144, 145, 146, 147, 148, 149, 150, 68, 52, 69, 70, 71, 72, 73, 74, 75, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 49, 31, 50, 48, 32, 33, 5, 34, 35, 36, 51, 53, 54, 55, 56, 118, 119, 102, 0, 103, 104, 115, 116, 117, 100, 101, 37, 38, 39, 40, 41, 42, 76, 77, 80, 10, 11, 12, 13 }
  uselistorder i32 256, { 2, 3, 4, 5, 6, 7, 8, 74, 0, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 73, 19, 20, 21, 22, 23, 24, 25, 26, 57, 27, 28, 29, 30, 31, 32, 76, 77, 58, 75, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 72, 47, 48, 49, 50, 1, 59, 60, 61, 62, 63, 64, 51, 65, 52, 53, 54, 55, 56, 66, 67, 68, 69, 70, 71 }
  uselistorder i32 8192, { 2, 0, 1 }
  uselistorder i32 -65281, { 10, 11, 12, 13, 0, 1, 2, 3, 4, 6, 7, 8, 9, 5 }
  uselistorder i32* @edx, { 299, 300, 73, 74, 370, 77, 78, 76, 86, 75, 1, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 381, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 79, 80, 81, 82, 83, 298, 87, 399, 403, 404, 2, 3, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 206, 100, 4, 210, 211, 212, 213, 385, 84, 85, 5, 207, 214, 208, 400, 401, 402, 419, 395, 396, 397, 398, 416, 417, 418, 394, 215, 88, 89, 90, 120, 121, 122, 123, 124, 125, 126, 91, 92, 93, 94, 95, 96, 97, 98, 99, 112, 113, 114, 115, 116, 117, 118, 119, 127, 128, 134, 129, 130, 131, 132, 133, 0, 135, 136, 137, 151, 152, 101, 102, 143, 144, 145, 146, 103, 104, 105, 147, 148, 149, 150, 106, 107, 108, 109, 110, 111, 256, 138, 139, 140, 141, 142, 153, 154, 155, 6, 7, 8, 9, 10, 156, 157, 11, 12, 13, 158, 14, 15, 16, 17, 159, 160, 161, 162, 163, 18, 164, 347, 19, 59, 348, 20, 22, 21, 24, 23, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 44, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 55, 56, 175, 176, 177, 178, 179, 182, 185, 186, 187, 188, 189, 57, 58, 60, 61, 190, 191, 192, 193, 194, 195, 301, 302, 303, 304, 257, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 216, 225, 226, 228, 229, 230, 227, 231, 232, 218, 217, 219, 220, 221, 222, 223, 355, 224, 233, 234, 235, 236, 237, 238, 239, 240, 241, 258, 242, 243, 244, 245, 246, 247, 248, 249, 288, 289, 290, 291, 292, 250, 251, 252, 253, 254, 62, 63, 64, 65, 66, 305, 255, 67, 68, 69, 70, 71, 72, 293, 294, 279, 280, 281, 282, 283, 287, 295, 183, 184, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 337, 360, 361, 284, 285, 286, 349, 350, 180, 181, 338, 339, 307, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 316, 340, 341, 351, 352, 342, 343, 344, 364, 365, 356, 357, 353, 354, 296, 297, 345, 346, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 358, 359, 362, 363, 366, 367, 368, 369 }
  uselistorder i1 false, { 584, 585, 586, 47, 591, 592, 593, 234, 235, 236, 237, 238, 239, 240, 241, 48, 49, 50, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 648, 649, 650, 651, 652, 653, 254, 255, 256, 257, 258, 260, 51, 261, 52, 262, 263, 264, 265, 266, 267, 268, 269, 270, 179, 176, 27, 177, 5, 178, 259, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 663, 664, 666, 667, 668, 669, 446, 447, 455, 493, 494, 499, 509, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 53, 689, 690, 692, 693, 694, 695, 271, 28, 272, 273, 274, 275, 54, 276, 180, 181, 188, 190, 182, 183, 189, 187, 6, 184, 55, 185, 186, 587, 588, 589, 590, 284, 285, 288, 289, 290, 291, 708, 709, 710, 711, 712, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 7, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 745, 746, 162, 163, 747, 164, 748, 130, 749, 750, 751, 752, 30, 21, 753, 29, 22, 754, 0, 755, 131, 678, 132, 902, 903, 904, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 165, 282, 283, 175, 820, 821, 901, 827, 34, 822, 823, 824, 33, 825, 826, 32, 828, 829, 830, 31, 831, 832, 833, 10, 11, 834, 35, 835, 836, 837, 838, 839, 840, 841, 842, 761, 762, 763, 56, 757, 758, 759, 57, 133, 760, 756, 905, 906, 907, 908, 909, 843, 134, 844, 845, 846, 847, 15, 135, 166, 848, 849, 850, 851, 23, 58, 36, 37, 852, 853, 854, 855, 856, 857, 858, 859, 860, 137, 861, 138, 863, 139, 864, 140, 862, 167, 865, 168, 866, 867, 868, 136, 869, 870, 871, 141, 872, 26, 59, 39, 40, 873, 874, 875, 16, 25, 876, 877, 878, 879, 880, 881, 882, 883, 17, 885, 884, 886, 888, 887, 38, 889, 18, 891, 890, 8, 892, 24, 19, 893, 894, 60, 895, 169, 896, 142, 170, 897, 764, 765, 766, 767, 171, 172, 768, 769, 151, 152, 770, 771, 772, 773, 774, 147, 148, 775, 776, 149, 150, 778, 779, 153, 154, 780, 781, 155, 156, 777, 173, 174, 782, 783, 20, 45, 46, 784, 785, 786, 787, 788, 145, 146, 789, 790, 791, 792, 793, 157, 158, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 143, 144, 804, 805, 806, 807, 808, 159, 160, 809, 810, 12, 811, 812, 813, 814, 815, 816, 817, 41, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 161, 917, 500, 501, 502, 503, 504, 448, 449, 450, 451, 452, 453, 454, 304, 1, 505, 506, 507, 508, 495, 496, 497, 498, 305, 306, 307, 691, 279, 13, 61, 62, 280, 281, 277, 278, 14, 63, 191, 192, 193, 286, 287, 926, 927, 928, 929, 930, 936, 937, 931, 932, 933, 934, 935, 471, 472, 473, 474, 475, 476, 477, 478, 510, 511, 512, 513, 514, 515, 516, 479, 480, 481, 482, 2, 483, 485, 486, 489, 484, 488, 487, 490, 491, 492, 713, 714, 715, 898, 899, 900, 818, 819, 744, 308, 697, 698, 9, 699, 700, 701, 702, 703, 704, 705, 706, 707, 594, 595, 741, 696, 64, 194, 65, 542, 66, 517, 3, 4, 357, 195, 292, 293, 67, 295, 294, 297, 296, 300, 68, 301, 302, 303, 69, 327, 328, 329, 330, 331, 332, 333, 334, 335, 70, 71, 72, 336, 358, 360, 361, 362, 363, 364, 73, 74, 75, 365, 309, 405, 310, 394, 395, 311, 312, 396, 397, 313, 42, 314, 315, 76, 77, 543, 316, 317, 318, 78, 319, 320, 321, 322, 323, 324, 325, 326, 337, 338, 79, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 80, 349, 350, 351, 352, 353, 354, 355, 356, 366, 367, 81, 368, 369, 370, 371, 372, 373, 374, 375, 82, 376, 377, 378, 379, 83, 380, 84, 381, 382, 383, 384, 385, 386, 387, 85, 388, 389, 390, 391, 392, 393, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 86, 410, 411, 87, 88, 196, 89, 197, 90, 298, 299, 198, 199, 200, 412, 413, 414, 201, 202, 415, 203, 204, 205, 206, 416, 417, 418, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 91, 92, 93, 217, 218, 219, 220, 221, 222, 223, 94, 95, 96, 224, 419, 420, 421, 422, 423, 97, 98, 99, 424, 426, 427, 43, 429, 431, 100, 101, 102, 432, 433, 103, 104, 225, 226, 227, 105, 228, 106, 434, 596, 107, 597, 108, 435, 436, 109, 437, 438, 439, 440, 441, 442, 443, 110, 444, 111, 544, 445, 112, 529, 528, 518, 519, 520, 521, 545, 546, 522, 523, 524, 525, 526, 527, 113, 114, 115, 530, 531, 532, 116, 533, 534, 535, 117, 536, 537, 118, 538, 119, 577, 578, 539, 540, 541, 229, 569, 122, 120, 121, 123, 570, 44, 571, 572, 574, 575, 576, 579, 580, 581, 430, 582, 583, 598, 124, 599, 600, 601, 602, 603, 604, 605, 606, 607, 613, 614, 615, 616, 617, 425, 637, 573, 630, 618, 428, 619, 620, 621, 611, 609, 610, 612, 608, 125, 645, 359, 634, 622, 623, 624, 126, 625, 127, 626, 230, 231, 232, 233, 627, 628, 629, 631, 632, 633, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 635, 636, 638, 639, 128, 640, 641, 642, 643, 644, 646, 129, 647, 938, 939, 940, 941, 942 }
  uselistorder i32* @ecx, { 164, 169, 170, 39, 2, 40, 204, 205, 3, 206, 13, 207, 16, 208, 141, 209, 4, 14, 212, 213, 214, 215, 216, 12, 218, 17, 18, 41, 42, 43, 44, 165, 166, 167, 168, 51, 55, 220, 221, 225, 226, 210, 211, 228, 229, 230, 231, 115, 116, 19, 20, 49, 50, 48, 227, 232, 5, 233, 127, 128, 65, 66, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 15, 129, 67, 68, 69, 70, 217, 46, 47, 45, 21, 22, 52, 53, 54, 56, 234, 235, 236, 237, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 71, 72, 73, 74, 75, 171, 172, 173, 222, 6, 223, 224, 7, 8, 9, 219, 57, 58, 89, 90, 91, 92, 186, 63, 64, 80, 81, 82, 83, 84, 96, 97, 76, 10, 77, 105, 106, 107, 148, 149, 150, 11, 78, 79, 85, 86, 87, 88, 98, 99, 100, 101, 102, 103, 104, 108, 60, 61, 23, 24, 59, 0, 25, 62, 1, 26, 27, 187, 188, 189, 28, 29, 30, 31, 32, 33, 34, 35, 109, 110, 36, 37, 114, 142, 143, 144, 145, 146, 151, 147, 158, 111, 112, 113, 177, 195, 196, 197, 159, 160, 161, 182, 185, 178, 174, 175, 176, 183, 184, 181, 179, 180, 190, 191, 199, 200, 93, 94, 95, 192, 193, 162, 163, 38, 152, 153, 154, 155, 156, 157, 194, 198, 201, 202, 203 }
  uselistorder i32* @ebx, { 63, 64, 65, 66, 27, 28, 29, 30, 31, 32, 67, 68, 69, 70, 71, 72, 73, 74, 75, 33, 34, 35, 36, 3, 37, 4, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 20, 21, 76, 77, 78, 5, 79, 80, 81, 82, 83, 84, 85, 86, 61, 62, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 0, 98, 22, 6, 25, 26, 23, 24, 57, 58, 59, 60, 103, 104, 105, 7, 106, 107, 108, 109, 110, 111, 8, 112, 113, 114, 115, 142, 143, 9, 19, 53, 54, 55, 56, 51, 52, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 17, 2, 138, 18, 1, 139, 140, 141, 144, 145, 146, 10, 147, 148, 11, 149, 150, 12, 153, 154, 14, 13, 50, 155, 156, 157, 15, 16, 158, 99, 100, 101, 102, 151, 152 }
  uselistorder i32* @esi, { 152, 158, 159, 160, 161, 64, 65, 66, 67, 68, 69, 70, 5, 71, 72, 73, 4, 3, 74, 75, 76, 77, 168, 169, 170, 78, 79, 80, 81, 82, 83, 84, 85, 86, 20, 21, 22, 171, 172, 173, 174, 175, 176, 177, 178, 179, 6, 139, 0, 147, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 7, 190, 19, 193, 194, 87, 88, 89, 90, 91, 92, 93, 23, 24, 25, 26, 27, 28, 39, 40, 37, 38, 8, 36, 29, 30, 31, 32, 33, 34, 35, 153, 154, 155, 9, 156, 157, 110, 111, 112, 113, 114, 121, 122, 123, 195, 196, 201, 202, 203, 204, 208, 209, 210, 211, 212, 10, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 137, 138, 224, 11, 239, 240, 257, 258, 241, 242, 243, 244, 245, 246, 247, 12, 248, 249, 233, 234, 235, 13, 228, 229, 230, 231, 232, 225, 226, 227, 250, 251, 252, 253, 254, 236, 237, 259, 260, 140, 141, 130, 142, 14, 143, 144, 145, 1, 146, 191, 192, 107, 108, 109, 99, 100, 101, 102, 15, 16, 103, 104, 105, 106, 96, 17, 97, 98, 94, 95, 115, 116, 117, 118, 119, 120, 261, 41, 42, 43, 44, 205, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 206, 207, 18, 255, 256, 2, 238, 131, 132, 133, 134, 135, 136, 197, 198, 199, 200, 162, 163, 164, 165, 166, 167, 124, 129, 125, 126, 127, 128, 150, 151, 148, 149 }
  uselistorder i32* @edi, { 138, 141, 142, 143, 144, 79, 80, 81, 82, 0, 83, 84, 147, 148, 149, 85, 86, 89, 91, 90, 92, 93, 35, 39, 36, 37, 38, 87, 88, 121, 122, 150, 151, 152, 153, 154, 134, 137, 155, 156, 1, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 12, 13, 14, 15, 172, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 173, 174, 175, 176, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 40, 41, 42, 43, 44, 47, 53, 54, 55, 45, 46, 48, 50, 51, 52, 49, 139, 140, 126, 177, 183, 188, 189, 190, 191, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 2, 227, 228, 229, 230, 231, 232, 233, 167, 267, 268, 3, 269, 270, 236, 244, 266, 234, 235, 245, 246, 247, 248, 249, 250, 251, 252, 253, 4, 254, 255, 256, 5, 257, 258, 237, 271, 272, 273, 274, 275, 276, 6, 277, 278, 279, 280, 281, 259, 260, 261, 262, 263, 264, 265, 238, 239, 240, 241, 242, 243, 282, 283, 135, 136, 133, 123, 124, 125, 110, 7, 111, 112, 113, 114, 115, 116, 11, 117, 118, 119, 120, 107, 108, 8, 109, 284, 285, 9, 10, 286, 56, 57, 58, 59, 193, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 194, 195, 127, 128, 129, 130, 131, 132, 184, 185, 186, 187, 145, 146, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 178, 179, 180, 181, 182, 225, 226 }
  uselistorder i32 1, { 332, 333, 899, 900, 551, 404, 901, 902, 903, 553, 552, 556, 555, 554, 476, 70, 71, 849, 807, 850, 851, 852, 853, 477, 559, 558, 557, 125, 126, 127, 0, 334, 393, 442, 478, 560, 479, 167, 461, 562, 561, 335, 298, 443, 854, 855, 405, 856, 406, 857, 336, 565, 564, 545, 480, 563, 245, 244, 242, 243, 246, 825, 826, 337, 566, 81, 83, 80, 79, 82, 824, 570, 569, 568, 567, 74, 75, 73, 72, 76, 77, 571, 161, 160, 159, 572, 177, 178, 462, 255, 911, 574, 573, 912, 913, 576, 575, 268, 269, 577, 296, 914, 915, 916, 917, 918, 463, 464, 919, 580, 579, 578, 481, 97, 98, 99, 100, 101, 920, 338, 1, 896, 2, 581, 482, 582, 319, 921, 922, 923, 924, 583, 320, 925, 584, 238, 237, 407, 926, 444, 445, 927, 3, 928, 446, 4, 585, 102, 816, 817, 801, 818, 819, 820, 821, 802, 586, 88, 87, 86, 930, 931, 587, 128, 129, 131, 130, 588, 153, 158, 157, 155, 154, 156, 592, 483, 591, 590, 589, 231, 232, 858, 859, 860, 861, 321, 862, 594, 593, 116, 115, 596, 595, 598, 597, 827, 828, 322, 601, 600, 599, 112, 113, 114, 602, 211, 209, 213, 208, 212, 210, 5, 833, 219, 603, 216, 217, 218, 829, 832, 339, 340, 604, 220, 408, 341, 342, 605, 221, 222, 6, 830, 831, 394, 323, 312, 343, 344, 345, 484, 606, 485, 214, 215, 465, 409, 346, 7, 8, 410, 939, 9, 10, 940, 611, 610, 547, 546, 609, 608, 607, 134, 11, 12, 13, 941, 942, 943, 14, 944, 486, 287, 288, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 411, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 612, 39, 38, 41, 37, 40, 615, 614, 613, 979, 982, 983, 985, 616, 549, 276, 275, 274, 617, 487, 286, 284, 283, 285, 986, 313, 987, 988, 412, 620, 619, 618, 281, 280, 278, 279, 277, 282, 621, 224, 622, 270, 271, 989, 623, 625, 624, 347, 15, 466, 626, 629, 628, 627, 207, 413, 459, 16, 808, 17, 809, 631, 630, 179, 18, 632, 19, 348, 349, 822, 823, 350, 633, 638, 637, 636, 635, 634, 228, 227, 229, 230, 639, 488, 640, 289, 317, 1004, 1005, 301, 467, 1006, 318, 1007, 1008, 302, 468, 1009, 642, 641, 66, 67, 65, 68, 64, 69, 324, 1010, 44, 48, 47, 45, 46, 992, 42, 643, 121, 120, 122, 414, 990, 351, 991, 644, 124, 123, 646, 645, 132, 1026, 647, 267, 263, 264, 265, 266, 1011, 469, 1012, 648, 139, 138, 141, 136, 135, 142, 137, 140, 1013, 649, 272, 273, 1014, 325, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 810, 811, 1023, 1024, 650, 152, 149, 146, 148, 147, 151, 145, 150, 812, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 415, 416, 651, 182, 183, 186, 181, 187, 180, 185, 184, 20, 1027, 654, 653, 652, 293, 294, 295, 21, 352, 22, 1029, 1030, 1031, 1032, 470, 489, 490, 491, 492, 261, 262, 1028, 655, 195, 194, 23, 813, 656, 63, 353, 354, 417, 880, 659, 658, 657, 51, 814, 24, 299, 326, 355, 661, 493, 660, 170, 169, 895, 662, 665, 664, 663, 93, 92, 95, 94, 96, 669, 668, 667, 494, 495, 666, 471, 356, 472, 395, 929, 670, 497, 496, 875, 671, 357, 358, 870, 674, 673, 672, 498, 871, 359, 418, 872, 360, 419, 873, 874, 50, 49, 677, 676, 675, 864, 865, 866, 420, 867, 868, 869, 327, 548, 171, 172, 174, 173, 421, 863, 680, 679, 678, 682, 681, 25, 815, 834, 835, 836, 837, 838, 200, 202, 201, 203, 876, 877, 447, 878, 683, 204, 205, 206, 26, 361, 1033, 28, 473, 27, 684, 499, 685, 500, 891, 314, 892, 893, 894, 688, 501, 687, 686, 502, 175, 176, 839, 840, 803, 841, 842, 843, 844, 804, 689, 108, 107, 1025, 690, 1003, 328, 984, 29, 692, 691, 933, 934, 308, 935, 936, 937, 938, 694, 693, 55, 54, 53, 52, 329, 695, 43, 904, 448, 905, 906, 449, 696, 36, 35, 980, 981, 932, 697, 879, 698, 699, 700, 701, 702, 503, 703, 704, 705, 504, 706, 505, 707, 474, 475, 845, 708, 709, 109, 111, 110, 399, 710, 711, 712, 713, 506, 369, 370, 371, 372, 373, 374, 716, 715, 507, 714, 508, 297, 375, 376, 377, 719, 718, 509, 717, 510, 881, 303, 396, 400, 720, 253, 250, 234, 721, 119, 239, 378, 306, 722, 401, 882, 723, 511, 883, 724, 512, 884, 885, 886, 362, 450, 363, 451, 364, 452, 365, 236, 725, 197, 105, 106, 726, 727, 165, 164, 163, 235, 846, 304, 397, 402, 728, 729, 300, 730, 513, 514, 731, 78, 515, 847, 379, 380, 381, 382, 383, 384, 734, 733, 516, 732, 517, 188, 848, 385, 386, 387, 737, 736, 518, 735, 519, 249, 388, 389, 740, 739, 520, 738, 521, 887, 390, 366, 743, 742, 522, 741, 523, 888, 889, 422, 403, 423, 890, 305, 398, 424, 744, 260, 34, 524, 258, 745, 897, 746, 309, 310, 311, 747, 425, 525, 133, 748, 168, 526, 166, 191, 196, 527, 162, 248, 749, 428, 429, 426, 427, 751, 750, 90, 91, 104, 103, 453, 528, 84, 529, 330, 752, 331, 530, 531, 192, 190, 189, 57, 58, 60, 59, 391, 753, 56, 532, 85, 533, 198, 117, 754, 118, 430, 805, 431, 755, 432, 756, 223, 454, 534, 455, 535, 233, 143, 144, 433, 757, 434, 758, 89, 759, 290, 291, 292, 806, 367, 368, 761, 760, 392, 307, 762, 435, 764, 536, 763, 247, 436, 766, 765, 437, 438, 768, 767, 770, 537, 769, 315, 254, 907, 908, 771, 909, 772, 460, 774, 773, 775, 910, 30, 31, 33, 776, 777, 32, 193, 439, 257, 256, 456, 779, 538, 778, 457, 781, 539, 780, 458, 783, 540, 782, 785, 541, 784, 786, 62, 61, 788, 787, 790, 789, 791, 542, 199, 792, 241, 240, 441, 440, 793, 225, 226, 898, 794, 316, 796, 543, 795, 798, 544, 797, 252, 251, 259, 799, 800, 550 }
  uselistorder i32 %arg3, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_10014f5a, { 5, 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_10014f3e, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10014f35, { 1, 0 }
  uselistorder label %dec_label_pc_10014efe, { 1, 0 }
  uselistorder label %dec_label_pc_10014ebf, { 1, 0 }
  uselistorder label %dec_label_pc_10014eae, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10014ea4, { 2, 0, 1 }
}

define i32 @function_10014fd8() local_unnamed_addr {
entry:
  %v0_10014fdf = load i32, i32* @eax, align 4
  ret i32 %v0_10014fdf
}

define i32 @function_10015055() local_unnamed_addr {
entry:
  %v0_1001505f = load i32, i32* @eax, align 4
  ret i32 %v0_1001505f

; uselistorder directives
  uselistorder i32 0, { 117, 118, 995, 119, 116, 115, 996, 1001, 1002, 121, 120, 558, 1003, 1004, 1005, 122, 594, 123, 720, 721, 722, 723, 595, 568, 569, 298, 724, 725, 726, 402, 727, 728, 125, 124, 729, 730, 731, 596, 732, 733, 597, 734, 598, 297, 599, 1063, 126, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 600, 403, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 419, 420, 423, 424, 417, 418, 421, 422, 746, 747, 748, 749, 750, 86, 127, 128, 601, 602, 129, 603, 654, 60, 604, 655, 130, 656, 605, 606, 1072, 1073, 425, 131, 1074, 1075, 1076, 1077, 1078, 1079, 426, 427, 428, 429, 430, 431, 432, 433, 607, 1082, 93, 608, 0, 404, 405, 434, 435, 436, 437, 438, 414, 415, 406, 299, 609, 1080, 132, 610, 1081, 1083, 883, 884, 911, 912, 922, 1, 2, 611, 1084, 1085, 1086, 1087, 1088, 294, 1089, 1090, 1091, 292, 1093, 300, 301, 1094, 302, 1095, 1096, 407, 1097, 1098, 1099, 1100, 1101, 1102, 133, 3, 562, 1104, 563, 290, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 751, 264, 134, 135, 752, 612, 753, 754, 755, 756, 613, 136, 137, 138, 139, 140, 141, 142, 143, 439, 657, 33, 614, 663, 676, 615, 678, 658, 570, 659, 660, 661, 303, 100, 662, 4, 677, 144, 5, 408, 409, 440, 675, 65, 441, 664, 82, 81, 669, 673, 674, 46, 665, 666, 667, 668, 6, 670, 671, 101, 672, 997, 145, 998, 999, 1000, 764, 765, 766, 767, 768, 616, 770, 771, 772, 773, 304, 305, 306, 307, 146, 308, 309, 774, 775, 310, 311, 312, 313, 314, 147, 315, 442, 443, 1132, 571, 148, 1133, 572, 77, 617, 150, 149, 1136, 152, 151, 1137, 618, 619, 620, 573, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 621, 316, 47, 48, 66, 1146, 265, 1147, 153, 1148, 154, 1149, 1150, 1151, 1152, 1153, 574, 1154, 622, 623, 1163, 624, 575, 1164, 1165, 1166, 1167, 155, 625, 1168, 1169, 444, 445, 317, 49, 1170, 626, 576, 1171, 1172, 577, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1092, 7, 1182, 1326, 1327, 1328, 446, 447, 1329, 8, 9, 10, 11, 156, 157, 158, 578, 12, 889, 890, 891, 892, 579, 627, 762, 931, 13, 1183, 1184, 159, 649, 650, 651, 652, 653, 1246, 318, 1325, 1181, 448, 581, 582, 628, 1247, 1248, 160, 83, 50, 1249, 1250, 1251, 14, 629, 319, 1185, 75, 1186, 1187, 1188, 84, 559, 161, 560, 94, 320, 321, 322, 1330, 1331, 162, 630, 1332, 1333, 163, 1252, 1253, 1254, 583, 1256, 1255, 1257, 1258, 1259, 1260, 1262, 1261, 51, 266, 267, 268, 449, 164, 631, 450, 584, 1263, 1264, 1265, 1266, 1267, 166, 165, 167, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1294, 271, 272, 168, 1296, 1297, 632, 323, 1298, 52, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 89, 88, 1306, 1310, 64, 1307, 1308, 1309, 269, 270, 90, 87, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 95, 96, 1319, 633, 1320, 1321, 1189, 1190, 1191, 1192, 1193, 1194, 325, 169, 1195, 1196, 1197, 585, 1198, 1199, 1200, 1201, 1202, 1203, 580, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 324, 326, 170, 586, 587, 171, 327, 561, 1334, 172, 328, 173, 410, 634, 15, 1335, 174, 1340, 1337, 451, 452, 53, 635, 1339, 453, 454, 1336, 588, 329, 330, 331, 332, 175, 176, 177, 178, 179, 923, 34, 924, 925, 636, 16, 589, 17, 885, 886, 887, 888, 637, 333, 334, 335, 18, 180, 786, 787, 926, 19, 927, 928, 929, 455, 590, 20, 21, 336, 337, 930, 338, 102, 339, 913, 914, 915, 916, 917, 918, 919, 181, 920, 921, 340, 341, 342, 35, 182, 638, 183, 788, 789, 790, 184, 791, 1103, 185, 186, 763, 758, 759, 760, 761, 187, 757, 456, 457, 639, 640, 188, 679, 22, 591, 680, 681, 682, 769, 23, 24, 78, 79, 1341, 1342, 1343, 1344, 1345, 343, 1349, 1350, 1351, 1352, 189, 36, 190, 1346, 191, 641, 592, 1347, 1348, 893, 894, 895, 896, 897, 898, 899, 932, 933, 934, 935, 936, 937, 938, 25, 900, 103, 104, 37, 901, 902, 903, 904, 905, 908, 642, 643, 907, 906, 909, 910, 564, 1134, 565, 291, 1135, 1322, 1323, 1324, 192, 1245, 1159, 105, 1160, 1161, 1162, 1116, 1117, 68, 69, 644, 1118, 645, 458, 646, 1119, 255, 1121, 1120, 1122, 1124, 1123, 67, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 194, 193, 647, 1338, 1006, 1007, 648, 1008, 1155, 256, 1156, 1157, 1158, 1112, 106, 1113, 1114, 1115, 959, 960, 683, 961, 344, 459, 345, 26, 460, 461, 684, 685, 686, 346, 776, 777, 107, 778, 779, 780, 781, 273, 347, 782, 783, 784, 785, 195, 799, 800, 231, 801, 802, 232, 803, 804, 233, 274, 805, 806, 234, 275, 807, 808, 235, 276, 809, 810, 236, 54, 61, 811, 822, 823, 237, 824, 825, 238, 826, 827, 239, 70, 62, 71, 828, 97, 348, 55, 349, 792, 350, 352, 351, 353, 196, 240, 56, 962, 354, 793, 355, 286, 197, 277, 257, 293, 794, 795, 796, 356, 797, 798, 287, 198, 278, 258, 812, 813, 814, 357, 815, 816, 817, 818, 288, 73, 259, 819, 358, 820, 289, 74, 260, 829, 359, 830, 831, 199, 200, 201, 832, 833, 202, 203, 204, 360, 205, 206, 834, 207, 208, 209, 361, 210, 211, 835, 212, 213, 362, 214, 215, 216, 836, 217, 218, 363, 219, 220, 221, 837, 838, 38, 462, 687, 39, 463, 688, 689, 690, 691, 839, 840, 841, 464, 98, 364, 57, 365, 692, 27, 40, 366, 367, 368, 369, 842, 843, 222, 693, 694, 241, 695, 696, 242, 697, 698, 243, 281, 699, 700, 244, 701, 702, 245, 703, 704, 246, 279, 261, 280, 223, 705, 370, 706, 707, 247, 708, 709, 248, 710, 711, 249, 283, 282, 262, 712, 371, 844, 845, 846, 250, 847, 848, 251, 72, 63, 849, 852, 252, 284, 263, 855, 224, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 99, 58, 869, 713, 714, 715, 716, 28, 108, 109, 1009, 1010, 41, 372, 76, 373, 80, 870, 871, 872, 42, 873, 874, 43, 875, 876, 877, 878, 44, 879, 880, 881, 882, 375, 465, 374, 466, 946, 939, 85, 45, 940, 941, 942, 110, 943, 111, 112, 113, 225, 944, 945, 947, 114, 376, 253, 29, 30, 948, 31, 949, 950, 951, 952, 953, 32, 954, 955, 956, 957, 958, 295, 378, 377, 379, 380, 381, 382, 566, 986, 467, 296, 985, 468, 717, 718, 593, 383, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 470, 469, 384, 567, 254, 59, 385, 386, 387, 226, 471, 91, 987, 988, 856, 857, 388, 989, 990, 991, 992, 993, 994, 1011, 1012, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 850, 851, 1051, 1052, 983, 984, 1046, 1047, 1033, 1034, 853, 854, 1035, 1036, 1037, 1038, 1039, 1040, 1021, 1022, 1016, 227, 1015, 472, 473, 228, 1013, 1014, 1020, 285, 416, 1019, 1017, 1018, 1058, 1059, 1060, 1061, 474, 1041, 1042, 389, 821, 390, 1049, 1043, 1044, 1045, 719, 391, 392, 1048, 393, 229, 411, 395, 394, 230, 413, 412, 396, 397, 398, 399, 92, 963, 400, 964, 401, 1050, 1053, 1054, 1055, 1056, 1057, 1062, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360 }
  uselistorder i32* @eax, { 25, 26, 15, 76, 333, 334, 335, 336, 30, 653, 31, 654, 655, 332, 338, 656, 657, 2, 658, 659, 660, 661, 670, 12, 468, 339, 19, 489, 23, 24, 27, 469, 28, 29, 263, 16, 340, 18, 21, 261, 674, 675, 20, 259, 671, 672, 673, 260, 678, 679, 17, 483, 151, 484, 485, 486, 487, 152, 153, 488, 89, 90, 337, 262, 470, 32, 154, 471, 472, 230, 33, 34, 473, 474, 231, 475, 476, 477, 479, 478, 480, 35, 232, 233, 677, 676, 3, 662, 663, 664, 665, 4, 666, 667, 5, 668, 669, 6, 7, 264, 11, 491, 234, 481, 155, 490, 0, 341, 1, 342, 377, 378, 379, 380, 381, 101, 102, 382, 383, 384, 385, 386, 387, 103, 388, 13, 14, 343, 344, 345, 265, 348, 77, 349, 78, 350, 79, 80, 81, 82, 351, 83, 352, 84, 353, 85, 354, 355, 86, 87, 88, 356, 367, 97, 368, 369, 370, 98, 99, 371, 391, 104, 392, 393, 394, 105, 106, 395, 91, 357, 410, 411, 107, 412, 358, 359, 92, 360, 403, 404, 405, 361, 93, 362, 94, 363, 406, 407, 408, 95, 364, 8, 9, 96, 365, 366, 100, 372, 373, 374, 375, 376, 396, 397, 398, 399, 400, 401, 402, 409, 413, 108, 414, 415, 266, 347, 150, 267, 268, 269, 270, 271, 272, 273, 274, 275, 346, 276, 277, 278, 279, 280, 36, 281, 282, 283, 284, 285, 416, 109, 417, 286, 418, 419, 420, 421, 287, 10, 288, 37, 289, 290, 38, 291, 110, 422, 292, 293, 39, 40, 294, 295, 296, 41, 42, 297, 423, 111, 112, 424, 113, 114, 425, 115, 426, 43, 298, 116, 427, 242, 628, 44, 299, 65, 316, 117, 428, 243, 629, 300, 45, 301, 302, 303, 304, 46, 47, 305, 48, 49, 306, 50, 51, 307, 52, 53, 308, 309, 54, 55, 310, 56, 57, 311, 58, 59, 312, 429, 118, 430, 431, 432, 119, 120, 433, 60, 61, 313, 437, 124, 438, 439, 440, 125, 126, 441, 127, 128, 442, 314, 62, 63, 64, 315, 317, 66, 67, 68, 318, 129, 443, 444, 130, 445, 131, 446, 132, 447, 133, 448, 215, 589, 134, 449, 450, 549, 451, 135, 136, 452, 453, 454, 137, 455, 138, 456, 139, 457, 140, 458, 141, 459, 142, 460, 143, 461, 144, 462, 145, 463, 146, 464, 147, 465, 198, 550, 148, 466, 149, 467, 235, 482, 156, 492, 157, 493, 173, 514, 510, 171, 511, 495, 496, 159, 497, 158, 494, 160, 498, 161, 499, 162, 500, 163, 501, 164, 502, 165, 503, 199, 551, 166, 504, 505, 248, 636, 167, 506, 168, 507, 512, 172, 513, 169, 508, 170, 509, 174, 515, 175, 516, 517, 176, 518, 177, 519, 178, 520, 179, 521, 522, 180, 523, 181, 524, 182, 525, 183, 526, 200, 552, 184, 527, 185, 528, 186, 529, 187, 530, 188, 531, 532, 533, 534, 535, 189, 536, 568, 206, 207, 576, 190, 537, 569, 570, 571, 572, 573, 574, 575, 538, 539, 540, 191, 541, 192, 542, 543, 193, 544, 194, 545, 195, 546, 22, 319, 320, 321, 322, 196, 547, 69, 323, 70, 324, 216, 590, 197, 548, 558, 325, 326, 71, 327, 577, 208, 578, 579, 580, 203, 560, 561, 562, 204, 563, 564, 565, 566, 205, 567, 210, 583, 584, 211, 585, 72, 328, 212, 586, 123, 436, 213, 587, 214, 588, 217, 591, 595, 219, 598, 600, 604, 605, 223, 606, 224, 607, 225, 608, 121, 434, 250, 640, 202, 559, 244, 630, 226, 609, 122, 435, 227, 610, 228, 611, 612, 596, 222, 599, 597, 218, 593, 594, 592, 601, 602, 603, 220, 221, 229, 613, 614, 254, 615, 631, 632, 616, 617, 255, 256, 618, 649, 650, 257, 619, 389, 390, 637, 638, 258, 620, 245, 633, 246, 634, 581, 209, 582, 621, 236, 622, 237, 623, 238, 624, 239, 625, 240, 626, 73, 329, 74, 330, 241, 627, 247, 635, 75, 331, 553, 554, 555, 556, 201, 557, 249, 639, 251, 641, 642, 252, 643, 253, 644, 645, 646, 647, 648, 651, 652 }
}

define void @_RtlUnwind(i32* %TargetFrame, i32* %TargetIp, %_EXCEPTION_RECORD* %ExceptionRecord, i32* %ReturnValue) local_unnamed_addr {
dec_label_pc_10015060:
  call void @RtlUnwind(i32* %TargetFrame, i32* %TargetIp, %_EXCEPTION_RECORD* %ExceptionRecord, i32* %ReturnValue)
  ret void
}

declare i32* @TlsGetValue(i32) local_unnamed_addr

declare i32 @GetLastError() local_unnamed_addr

declare i32 ()* @GetProcAddress(i32*, i8*) local_unnamed_addr

declare i32* @LoadLibraryA(i8*) local_unnamed_addr

declare i1 @GetVersionExA(%_OSVERSIONINFOA*) local_unnamed_addr

declare i1 @FreeLibrary(i32*) local_unnamed_addr

declare i1 @HeapFree(i32*, i32, i32*) local_unnamed_addr

declare i32* @HeapAlloc(i32*, i32, i32) local_unnamed_addr

declare i8* @GetCommandLineA() local_unnamed_addr

declare i32 @GetVersion() local_unnamed_addr

declare i32* @GetModuleHandleA(i8*) local_unnamed_addr

declare void @RaiseException(i32, i32, i32, i32*) local_unnamed_addr

declare i32 @GetModuleFileNameA(i32*, i8*, i32) local_unnamed_addr

declare i32 @GetEnvironmentVariableA(i8*, i8*, i32) local_unnamed_addr

declare i1 @HeapDestroy(i32*) local_unnamed_addr

declare i32* @HeapCreate(i32, i32, i32) local_unnamed_addr

declare i1 @VirtualFree(i32*, i32, i32) local_unnamed_addr

declare i32* @VirtualAlloc(i32*, i32, i32, i32) local_unnamed_addr

declare i32* @HeapReAlloc(i32*, i32, i32*, i32) local_unnamed_addr

declare void @InitializeCriticalSection(%_RTL_CRITICAL_SECTION*) local_unnamed_addr

declare void @DeleteCriticalSection(%_RTL_CRITICAL_SECTION*) local_unnamed_addr

declare void @EnterCriticalSection(%_RTL_CRITICAL_SECTION*) local_unnamed_addr

declare void @LeaveCriticalSection(%_RTL_CRITICAL_SECTION*) local_unnamed_addr

declare void @ExitProcess(i32) local_unnamed_addr

declare void @RtlUnwind(i32*, i32*, %_EXCEPTION_RECORD*, i32*) local_unnamed_addr

declare i1 @TerminateProcess(i32*, i32) local_unnamed_addr

declare i32* @GetCurrentProcess() local_unnamed_addr

declare i32 @GetCurrentThreadId() local_unnamed_addr

declare i1 @TlsSetValue(i32, i32*) local_unnamed_addr

declare i32 @TlsAlloc() local_unnamed_addr

declare i1 @TlsFree(i32) local_unnamed_addr

declare void @SetLastError(i32) local_unnamed_addr

declare i32 @SetHandleCount(i32) local_unnamed_addr

declare i32* @GetStdHandle(i32) local_unnamed_addr

declare i32 @GetFileType(i32*) local_unnamed_addr

declare void @GetStartupInfoA(%_STARTUPINFOA*) local_unnamed_addr

declare i1 @FreeEnvironmentStringsA(i8*) local_unnamed_addr

declare i1 @FreeEnvironmentStringsW(i16*) local_unnamed_addr

declare i32 @WideCharToMultiByte(i32, i32, i16*, i32, i8*, i32, i8*, i1*) local_unnamed_addr

declare i8* @GetEnvironmentStrings() local_unnamed_addr

declare i16* @GetEnvironmentStringsW() local_unnamed_addr

declare i1 @WriteFile(i32*, i32*, i32, i32*, %_OVERLAPPED*) local_unnamed_addr

declare i32 @InterlockedDecrement(i32*) local_unnamed_addr

declare i32 @InterlockedIncrement(i32*) local_unnamed_addr

declare i1 @GetCPInfo(i32, %_cpinfo*) local_unnamed_addr

declare i32 @timeEndPeriod(i32) local_unnamed_addr

declare i32 @timeBeginPeriod(i32) local_unnamed_addr

declare i32 @timeGetTime() local_unnamed_addr

; Function Attrs: nounwind readnone
declare x86_fp80 @llvm.round.f80(x86_fp80) #0

; Function Attrs: nounwind readnone
declare x86_fp80 @llvm.sqrt.f80(x86_fp80) #0

declare i32 @_strlen(i8*) local_unnamed_addr

declare i32 @_strncmp(i8*, i8*, i32) local_unnamed_addr

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i32 @unknown_10010a00(i32) local_unnamed_addr

declare i32 @unknown_0(i32) local_unnamed_addr

declare i16 @__decompiler_undefined_function_0() local_unnamed_addr

declare i32 @__decompiler_undefined_function_1() local_unnamed_addr

declare double @__decompiler_undefined_function_2() local_unnamed_addr

declare i64 @__decompiler_undefined_function_3() local_unnamed_addr

declare i16* @__decompiler_undefined_function_4() local_unnamed_addr

declare i8* @__decompiler_undefined_function_5() local_unnamed_addr

declare %_OSVERSIONINFOA* @__decompiler_undefined_function_6() local_unnamed_addr

declare i8 @__decompiler_undefined_function_7() local_unnamed_addr

declare double* @__decompiler_undefined_function_8() local_unnamed_addr

declare %_RTL_CRITICAL_SECTION* @__decompiler_undefined_function_9() local_unnamed_addr

declare %_STARTUPINFOA* @__decompiler_undefined_function_10() local_unnamed_addr

declare i1* @__decompiler_undefined_function_11() local_unnamed_addr

declare %_OVERLAPPED* @__decompiler_undefined_function_12() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_13() local_unnamed_addr

declare %_cpinfo* @__decompiler_undefined_function_14() local_unnamed_addr

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #1

attributes #0 = { nounwind readnone }
attributes #1 = { noreturn nounwind }
